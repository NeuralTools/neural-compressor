Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/mix_precision/half_precision_convert/index", "autoapi/neural_compressor/torch/algorithms/mix_precision/module_wrappers/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/mix_precision/half_precision_convert/index.rst", "autoapi/neural_compressor/torch/algorithms/mix_precision/module_wrappers/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["block_mask", "neural_compressor.adaptor.mxnet_utils", "neural_compressor.adaptor.mxnet_utils.util", "neural_compressor.adaptor.ox_utils.calibration", "neural_compressor.adaptor.ox_utils.calibrator", "neural_compressor.adaptor.ox_utils", "neural_compressor.adaptor.ox_utils.operators.activation", "neural_compressor.adaptor.ox_utils.operators.argmax", "neural_compressor.adaptor.ox_utils.operators.attention", "neural_compressor.adaptor.ox_utils.operators.binary_op", "neural_compressor.adaptor.ox_utils.operators.concat", "neural_compressor.adaptor.ox_utils.operators.conv", "neural_compressor.adaptor.ox_utils.operators.direct_q8", "neural_compressor.adaptor.ox_utils.operators.embed_layernorm", "neural_compressor.adaptor.ox_utils.operators.gather", "neural_compressor.adaptor.ox_utils.operators.gavgpool", "neural_compressor.adaptor.ox_utils.operators.gemm", "neural_compressor.adaptor.ox_utils.operators", "neural_compressor.adaptor.ox_utils.operators.lstm", "neural_compressor.adaptor.ox_utils.operators.matmul", "neural_compressor.adaptor.ox_utils.operators.maxpool", "neural_compressor.adaptor.ox_utils.operators.norm", "neural_compressor.adaptor.ox_utils.operators.ops", "neural_compressor.adaptor.ox_utils.operators.pad", "neural_compressor.adaptor.ox_utils.operators.pooling", "neural_compressor.adaptor.ox_utils.operators.reduce", "neural_compressor.adaptor.ox_utils.operators.resize", "neural_compressor.adaptor.ox_utils.operators.split", "neural_compressor.adaptor.ox_utils.operators.unary_op", "neural_compressor.adaptor.ox_utils.quantizer", "neural_compressor.adaptor.ox_utils.smooth_quant", "neural_compressor.adaptor.ox_utils.util", "neural_compressor.adaptor.ox_utils.weight_only", "neural_compressor.adaptor.tensorflow", "neural_compressor.adaptor.tf_utils.graph_converter", "neural_compressor.adaptor.tf_utils.graph_converter_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base", "neural_compressor.adaptor.tf_utils.graph_rewriter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert", "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema", "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.adaptor.tf_utils.graph_util", "neural_compressor.adaptor.tf_utils", "neural_compressor.adaptor.tf_utils.quantize_graph", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize", "neural_compressor.adaptor.tf_utils.quantize_graph.qat", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul", "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling", "neural_compressor.adaptor.tf_utils.quantize_graph_common", "neural_compressor.adaptor.tf_utils.smooth_quant_calibration", "neural_compressor.adaptor.tf_utils.smooth_quant_scaler", "neural_compressor.adaptor.tf_utils.tf2onnx_converter", "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction", "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base", "neural_compressor.adaptor.tf_utils.transform_graph", "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging", "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat", "neural_compressor.adaptor.tf_utils.util", "neural_compressor.adaptor.torch_utils.bf16_convert", "neural_compressor.adaptor.torch_utils.hawq_metric", "neural_compressor.adaptor.torch_utils", "neural_compressor.adaptor.torch_utils.layer_wise_quant", "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle", "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize", "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load", "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils", "neural_compressor.adaptor.torch_utils.model_wrapper", "neural_compressor.adaptor.torch_utils.pattern_detector", "neural_compressor.adaptor.torch_utils.symbolic_trace", "neural_compressor.adaptor.torch_utils.util", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.utils.logger", "neural_compressor.compression.callbacks", "neural_compressor.compression.distillation.criterions", "neural_compressor.compression.distillation", "neural_compressor.compression.distillation.optimizers", "neural_compressor.compression.distillation.utility", "neural_compressor.compression.hpo", "neural_compressor.compression.hpo.sa_optimizer", "neural_compressor.compression.pruner.criteria", "neural_compressor.compression.pruner", "neural_compressor.compression.pruner.model_slim.auto_slim", "neural_compressor.compression.pruner.model_slim", "neural_compressor.compression.pruner.model_slim.pattern_analyzer", "neural_compressor.compression.pruner.model_slim.weight_slim", "neural_compressor.compression.pruner.patterns.base", "neural_compressor.compression.pruner.patterns", "neural_compressor.compression.pruner.patterns.mha", "neural_compressor.compression.pruner.patterns.ninm", "neural_compressor.compression.pruner.patterns.nxm", "neural_compressor.compression.pruner.pruners.base", "neural_compressor.compression.pruner.pruners.basic", "neural_compressor.compression.pruner.pruners.block_mask", "neural_compressor.compression.pruner.pruners", "neural_compressor.compression.pruner.pruners.mha", "neural_compressor.compression.pruner.pruners.pattern_lock", "neural_compressor.compression.pruner.pruners.progressive", "neural_compressor.compression.pruner.pruners.retrain_free", "neural_compressor.compression.pruner.pruning", "neural_compressor.compression.pruner.regs", "neural_compressor.compression.pruner.schedulers", "neural_compressor.compression.pruner.tf_criteria", "neural_compressor.compression.pruner.utils", "neural_compressor.compression.pruner.wanda", "neural_compressor.compression.pruner.wanda.utils", "neural_compressor.conf.pythonic_config", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.dataloaders.base_dataloader", "neural_compressor.data.dataloaders.dataloader", "neural_compressor.data.dataloaders.default_dataloader", "neural_compressor.data.dataloaders.fetcher", "neural_compressor.data.dataloaders.mxnet_dataloader", "neural_compressor.data.dataloaders.onnxrt_dataloader", "neural_compressor.data.dataloaders.pytorch_dataloader", "neural_compressor.data.dataloaders.sampler", "neural_compressor.data.dataloaders.tensorflow_dataloader", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.onnxrt.algorithms.smoother.calibrator", "neural_compressor.onnxrt.algorithms.smoother.core", "neural_compressor.onnxrt.utils.onnx_model", "neural_compressor.profiling", "neural_compressor.profiling.parser.factory", "neural_compressor.profiling.parser.onnx_parser.factory", "neural_compressor.profiling.parser.onnx_parser.parser", "neural_compressor.profiling.parser.parser", "neural_compressor.profiling.parser.result", "neural_compressor.profiling.parser.tensorflow_parser.factory", "neural_compressor.profiling.parser.tensorflow_parser.parser", "neural_compressor.profiling.profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.factory", "neural_compressor.profiling.profiler.onnxrt_profiler.profiler", "neural_compressor.profiling.profiler.onnxrt_profiler.utils", "neural_compressor.profiling.profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.factory", "neural_compressor.profiling.profiler.tensorflow_profiler.profiler", "neural_compressor.profiling.profiler.tensorflow_profiler.utils", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.template.api_doc_example", "neural_compressor.tensorflow.algorithms.smoother.calibration", "neural_compressor.tensorflow.algorithms.smoother.scaler", "neural_compressor.tensorflow.algorithms.static_quant.tensorflow", "neural_compressor.tensorflow.quantization.utils.graph_converter", "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.tensorflow.quantization.utils.graph_util", "neural_compressor.tensorflow.quantization.utils.quantize_graph", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph_common", "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", "neural_compressor.tensorflow.quantization.utils.transform_graph", "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", "neural_compressor.tensorflow.quantization.utils.utility", "neural_compressor.tensorflow.utils.data", "neural_compressor.tensorflow.utils.model_wrappers", "neural_compressor.tensorflow.utils.nets_factory", "neural_compressor.torch.algorithms.layer_wise", "neural_compressor.torch.algorithms.layer_wise.load", "neural_compressor.torch.algorithms.layer_wise.modified_pickle", "neural_compressor.torch.algorithms.layer_wise.utils", "neural_compressor.torch.algorithms.mix_precision.half_precision_convert", "neural_compressor.torch.algorithms.mix_precision.module_wrappers", "neural_compressor.torch.algorithms.weight_only.modules", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (80)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 32, 144, 146, 161, 171, 174, 179, 184, 297, 338, 377, 536, 544, 579, 581, 587, 593], "mask": [0, 161, 167, 169, 172, 174, 178, 179, 202, 244, 270, 299, 323, 581, 596], "mxnet": [1, 2, 4, 188, 197, 201, 204, 207, 211, 218, 239, 243, 246, 249, 253, 259, 265, 274, 302, 327, 328, 333, 358, 498, 502, 503, 504, 521, 523, 530, 533, 536, 541, 542, 543, 583, 593, 595], "util": [1, 5, 91, 96, 97, 125, 128, 135, 136, 137, 138, 145, 156, 162, 185, 187, 188, 227, 268, 298, 308, 319, 321, 339, 340, 366, 475, 504, 505, 506, 521, 522, 529, 541, 545, 565, 581, 584, 593, 594], "init": [1, 5, 30, 149, 156, 162, 164, 185, 524, 540, 593], "optyp": [2, 187, 188, 262, 504], "sourc": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 502, 538, 541, 555, 557, 559, 560, 562, 582], "enum": 2, "op": [2, 17, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 67, 71, 74, 77, 78, 79, 80, 82, 91, 93, 95, 109, 110, 111, 117, 119, 120, 121, 122, 127, 129, 132, 134, 135, 136, 145, 146, 150, 165, 187, 188, 264, 309, 316, 317, 353, 357, 363, 365, 367, 374, 375, 376, 379, 384, 386, 398, 399, 400, 401, 402, 403, 404, 405, 407, 411, 414, 418, 420, 423, 424, 425, 426, 428, 434, 436, 449, 450, 451, 457, 459, 460, 461, 462, 466, 469, 471, 487, 493, 502, 503, 504, 505, 526, 533, 541, 542, 566, 567, 581, 584, 586, 588, 590, 591, 593, 595], "type": [2, 4, 30, 31, 32, 60, 82, 91, 102, 108, 118, 126, 134, 135, 136, 141, 146, 147, 155, 157, 165, 166, 167, 172, 180, 181, 182, 184, 186, 187, 188, 200, 202, 204, 211, 218, 220, 225, 242, 244, 246, 253, 259, 264, 267, 268, 270, 274, 281, 288, 292, 297, 299, 301, 306, 312, 316, 318, 320, 321, 323, 327, 336, 338, 362, 363, 370, 374, 376, 377, 378, 407, 428, 442, 448, 458, 471, 473, 476, 492, 493, 503, 504, 524, 526, 529, 531, 533, 536, 541, 542, 544, 563, 565, 570, 571, 575, 576, 584, 585, 587, 589, 592, 593, 594, 595], "isiter": 2, "obj": [2, 91, 162, 184, 201, 243, 260, 265, 276, 277, 278, 280, 289, 294, 298, 302, 328, 338, 358, 482, 485, 493], "bool": [2, 30, 31, 32, 127, 134, 141, 145, 146, 167, 187, 188, 202, 204, 214, 218, 244, 246, 256, 259, 264, 268, 274, 297, 315, 321, 327, 373, 377, 379, 471, 476, 488, 492, 493, 523, 524, 540, 573, 583, 592], "check": [2, 32, 53, 54, 91, 134, 146, 184, 194, 204, 246, 262, 298, 400, 401, 471, 492, 493, 502, 526, 529, 537, 546, 548, 550, 557, 560, 561, 565, 568, 571, 572, 588], "whether": [2, 31, 32, 91, 102, 134, 141, 146, 167, 187, 188, 200, 202, 214, 218, 242, 244, 256, 259, 268, 270, 274, 297, 321, 323, 327, 442, 471, 476, 485, 488, 492, 493, 503, 524, 540, 584, 587, 590, 592], "object": [2, 30, 31, 32, 60, 72, 91, 102, 118, 134, 135, 136, 139, 141, 145, 146, 152, 154, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 191, 192, 193, 202, 203, 204, 218, 219, 221, 232, 233, 234, 244, 245, 246, 259, 260, 265, 270, 278, 280, 283, 284, 286, 287, 288, 289, 294, 297, 298, 299, 300, 301, 302, 306, 319, 323, 327, 328, 336, 337, 353, 357, 358, 362, 376, 407, 419, 442, 458, 471, 472, 473, 476, 477, 479, 482, 485, 492, 493, 499, 500, 504, 510, 520, 522, 523, 524, 532, 540, 541, 543, 580, 581, 583, 584, 592, 593, 594, 596], "i": [2, 31, 32, 34, 35, 37, 40, 41, 46, 50, 56, 68, 71, 91, 118, 129, 134, 136, 139, 141, 145, 146, 151, 152, 154, 157, 158, 161, 165, 166, 172, 177, 178, 179, 180, 181, 183, 184, 187, 188, 191, 192, 193, 200, 201, 202, 203, 204, 205, 206, 209, 211, 214, 218, 219, 221, 225, 227, 228, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 253, 256, 259, 267, 270, 272, 274, 276, 281, 289, 294, 298, 299, 303, 310, 320, 323, 325, 327, 328, 338, 345, 346, 349, 358, 363, 368, 376, 377, 381, 382, 384, 387, 388, 393, 397, 403, 415, 418, 458, 466, 471, 472, 476, 477, 482, 488, 492, 493, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 512, 515, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 555, 556, 557, 559, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596], "iter": [2, 3, 91, 126, 134, 146, 152, 166, 172, 179, 182, 187, 188, 191, 192, 196, 200, 204, 205, 221, 232, 233, 237, 242, 246, 247, 299, 301, 328, 339, 358, 378, 471, 472, 482, 485, 499, 500, 503, 520, 523, 524, 541, 581, 583, 584, 590, 591, 593, 595], "paramet": [2, 4, 30, 31, 32, 53, 54, 56, 72, 91, 102, 118, 126, 127, 134, 135, 136, 141, 142, 145, 146, 147, 152, 154, 155, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 201, 202, 204, 211, 214, 218, 220, 225, 232, 233, 243, 244, 246, 253, 256, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300, 301, 302, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 353, 357, 358, 362, 370, 374, 376, 377, 378, 379, 400, 401, 403, 419, 442, 458, 471, 473, 476, 478, 482, 485, 488, 489, 490, 492, 493, 499, 504, 523, 524, 527, 529, 536, 540, 541, 544, 556, 562, 563, 564, 565, 570, 575, 576, 581, 584, 585, 587, 589, 590, 592, 593, 595], "return": [2, 4, 32, 40, 53, 54, 56, 60, 91, 102, 134, 135, 136, 141, 145, 146, 147, 152, 155, 157, 162, 165, 167, 168, 172, 175, 180, 181, 182, 184, 186, 191, 192, 204, 211, 214, 218, 219, 220, 225, 232, 233, 246, 253, 256, 259, 264, 267, 268, 270, 271, 272, 274, 280, 281, 288, 292, 297, 298, 299, 301, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 353, 357, 358, 362, 370, 374, 376, 377, 387, 400, 401, 403, 407, 442, 471, 473, 476, 482, 485, 490, 492, 493, 499, 500, 504, 505, 523, 524, 529, 540, 543, 575, 576, 577, 579, 581, 584, 587, 590, 591, 593], "true": [2, 31, 32, 71, 99, 132, 134, 141, 152, 187, 188, 200, 202, 204, 205, 217, 218, 219, 242, 244, 246, 247, 258, 259, 264, 268, 274, 292, 315, 321, 327, 338, 358, 373, 377, 418, 439, 469, 471, 472, 476, 485, 488, 492, 493, 502, 504, 523, 524, 526, 529, 533, 540, 541, 545, 548, 549, 564, 565, 566, 567, 573, 575, 583, 584, 585, 587, 590, 591, 592, 593, 595], "els": [2, 134, 188, 200, 242, 338, 471, 490, 550, 587, 591], "fals": [2, 3, 29, 30, 31, 32, 33, 34, 35, 57, 58, 75, 78, 85, 88, 89, 91, 99, 117, 122, 129, 132, 133, 134, 140, 141, 145, 146, 152, 155, 158, 187, 188, 193, 195, 198, 199, 201, 202, 204, 214, 218, 219, 220, 221, 227, 234, 236, 240, 241, 243, 244, 246, 256, 259, 270, 274, 323, 327, 338, 358, 377, 380, 381, 382, 404, 405, 421, 424, 431, 439, 457, 462, 466, 469, 470, 471, 472, 476, 485, 488, 492, 493, 503, 504, 523, 524, 533, 540, 541, 555, 559, 565, 573, 576, 577, 583, 584, 587, 590, 591, 592, 593, 595], "boolean": 2, "ensure_list": 2, "x": [2, 41, 60, 166, 187, 188, 201, 218, 243, 259, 306, 362, 377, 388, 407, 521, 522, 526, 529, 542, 543, 570, 571, 575, 576, 578, 584, 585, 590, 591, 592, 594], "ensur": [2, 218, 259, 306, 362, 529, 584, 592], "list": [2, 30, 31, 32, 40, 91, 126, 134, 135, 136, 144, 146, 152, 165, 166, 171, 176, 180, 184, 186, 187, 188, 191, 192, 196, 202, 214, 218, 219, 232, 233, 237, 244, 256, 259, 263, 264, 267, 268, 270, 271, 272, 274, 281, 289, 294, 297, 300, 315, 320, 321, 323, 324, 325, 327, 328, 336, 339, 340, 345, 346, 349, 358, 373, 377, 378, 387, 471, 473, 482, 483, 493, 499, 502, 503, 524, 531, 533, 537, 539, 541, 545, 550, 552, 555, 556, 559, 567, 570, 572, 573, 579, 581, 583, 584, 586, 590, 591, 593], "input": [2, 3, 30, 31, 32, 40, 46, 50, 53, 54, 56, 57, 58, 60, 68, 69, 71, 72, 91, 95, 96, 102, 108, 127, 134, 135, 143, 145, 146, 150, 165, 166, 184, 187, 188, 191, 192, 202, 203, 204, 206, 214, 217, 218, 223, 232, 233, 244, 245, 246, 248, 256, 258, 259, 262, 263, 264, 327, 328, 332, 336, 340, 358, 379, 387, 393, 397, 400, 401, 403, 404, 405, 407, 415, 416, 418, 419, 436, 437, 442, 448, 471, 472, 473, 481, 482, 488, 490, 492, 493, 500, 503, 504, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 535, 540, 541, 542, 543, 545, 550, 581, 583, 584, 587, 590, 591, 592, 595], "check_mx_vers": 2, "version": [2, 40, 90, 143, 146, 165, 188, 263, 264, 319, 387, 481, 497, 499, 503, 522, 533, 537, 538, 541, 555, 557, 559, 560, 582, 590, 593, 594], "str": [2, 30, 31, 32, 126, 135, 136, 141, 142, 144, 145, 146, 147, 155, 157, 162, 165, 186, 187, 188, 202, 203, 204, 211, 214, 218, 220, 224, 225, 244, 245, 246, 253, 256, 259, 263, 264, 267, 268, 270, 272, 274, 281, 292, 315, 318, 320, 321, 323, 325, 327, 339, 340, 347, 352, 354, 356, 357, 373, 376, 377, 378, 476, 478, 479, 485, 488, 490, 493, 494, 522, 523, 524, 540, 573, 583, 591, 592], "mx": [2, 544], "__version__": [2, 139, 477, 522], "combine_cap": 2, "current": [2, 56, 90, 161, 162, 165, 168, 172, 175, 187, 188, 276, 283, 284, 286, 287, 288, 297, 299, 306, 310, 362, 368, 403, 493, 499, 500, 503, 505, 521, 522, 529, 533, 541, 545, 549, 562, 570, 579, 581, 584, 587, 590, 593], "new": [2, 4, 32, 134, 152, 193, 204, 218, 219, 234, 246, 259, 298, 338, 471, 472, 498, 504, 529, 541, 542, 556, 562, 563, 564, 565, 571, 572, 575, 576, 581, 582, 584, 587, 588, 589, 592, 594, 595], "combin": [2, 146, 187, 188, 191, 192, 214, 228, 232, 233, 256, 328, 358, 482, 493, 499, 503, 536, 541, 580, 582, 584, 586, 587, 592, 593], "capabl": [2, 33, 316, 374, 380, 504, 505, 520, 533, 541, 542, 553, 564, 569, 581, 583, 584, 593, 595], "dict": [2, 32, 102, 134, 135, 136, 141, 146, 147, 152, 157, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 201, 219, 225, 232, 233, 243, 262, 264, 269, 270, 271, 272, 274, 277, 280, 281, 282, 289, 292, 294, 297, 298, 299, 300, 301, 306, 309, 315, 318, 322, 323, 324, 325, 327, 328, 336, 358, 373, 376, 377, 380, 442, 471, 473, 476, 479, 482, 483, 485, 492, 493, 499, 504, 522, 531, 540, 581, 583, 584, 590, 591, 593], "contain": [2, 53, 54, 56, 60, 125, 134, 136, 141, 146, 152, 154, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 187, 188, 191, 192, 202, 203, 204, 232, 233, 244, 245, 246, 260, 264, 265, 270, 271, 272, 276, 289, 292, 294, 297, 298, 299, 300, 301, 302, 323, 324, 325, 328, 358, 400, 401, 403, 407, 465, 471, 476, 482, 485, 492, 502, 521, 524, 527, 536, 540, 563, 570, 575, 576, 577, 581, 587, 591, 593, 594], "all": [2, 4, 22, 32, 49, 83, 141, 142, 146, 147, 149, 152, 154, 157, 162, 167, 175, 184, 187, 188, 193, 194, 200, 204, 211, 218, 219, 225, 228, 234, 242, 246, 253, 259, 264, 267, 270, 272, 274, 281, 288, 292, 293, 297, 303, 312, 315, 320, 323, 325, 327, 329, 338, 370, 376, 396, 429, 472, 473, 476, 478, 485, 493, 497, 498, 502, 503, 504, 505, 522, 523, 524, 529, 533, 537, 541, 545, 553, 556, 557, 560, 561, 562, 563, 564, 567, 568, 570, 571, 575, 576, 577, 580, 581, 582, 584, 586, 587, 590, 592, 593], "make_nc_model": 2, "target": [2, 30, 31, 88, 146, 165, 182, 184, 188, 298, 301, 306, 362, 488, 524, 529, 541, 581, 591, 592, 593, 595], "sym_model": 2, "ctx": 2, "input_desc": 2, "convert": [2, 31, 34, 35, 36, 39, 40, 41, 42, 43, 52, 60, 72, 85, 86, 88, 89, 90, 91, 117, 122, 126, 128, 135, 146, 165, 187, 188, 202, 214, 217, 218, 244, 256, 258, 259, 263, 270, 276, 298, 316, 323, 374, 377, 378, 380, 381, 382, 383, 386, 387, 388, 389, 390, 399, 407, 419, 431, 432, 457, 462, 479, 499, 504, 541, 542, 547, 584, 586, 587, 590, 592, 593], "symbol": [2, 31, 135, 145, 146, 267, 320, 328, 358, 499, 543], "model": [2, 3, 4, 17, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 102, 104, 126, 127, 128, 134, 135, 136, 140, 141, 142, 144, 145, 146, 150, 152, 154, 162, 163, 165, 172, 173, 174, 177, 179, 180, 182, 184, 187, 188, 191, 192, 198, 201, 202, 204, 218, 219, 222, 223, 232, 233, 240, 243, 244, 246, 259, 260, 262, 263, 264, 265, 266, 274, 275, 276, 277, 280, 283, 284, 286, 287, 288, 289, 294, 298, 299, 300, 301, 302, 303, 304, 306, 309, 310, 312, 319, 327, 328, 338, 339, 340, 341, 352, 356, 357, 358, 359, 360, 362, 363, 367, 368, 370, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 442, 444, 471, 473, 476, 478, 482, 488, 490, 492, 493, 495, 498, 499, 500, 502, 503, 505, 510, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 535, 536, 538, 540, 542, 545, 550, 552, 553, 556, 562, 564, 569, 571, 572, 573, 574, 579, 580, 582, 584, 588, 589, 591, 592, 593, 594, 595], "an": [2, 53, 54, 56, 91, 127, 129, 134, 136, 139, 141, 146, 151, 158, 172, 187, 188, 196, 200, 204, 218, 222, 227, 237, 242, 246, 259, 266, 267, 271, 272, 280, 281, 303, 319, 320, 324, 325, 328, 353, 357, 358, 377, 379, 400, 401, 403, 466, 471, 476, 477, 482, 493, 495, 497, 499, 500, 502, 503, 505, 521, 523, 524, 525, 526, 531, 539, 540, 541, 542, 544, 545, 549, 550, 553, 562, 565, 566, 567, 570, 573, 579, 581, 582, 584, 587, 589, 590, 591, 592, 593], "neural": [2, 136, 152, 154, 157, 167, 168, 169, 170, 180, 187, 188, 214, 215, 218, 219, 222, 225, 228, 256, 257, 259, 261, 266, 273, 274, 276, 289, 294, 297, 300, 302, 303, 308, 314, 319, 326, 327, 328, 332, 342, 358, 365, 366, 372, 490, 495, 498, 503, 504, 505, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 542, 543, 544, 546, 547, 550, 552, 553, 555, 557, 559, 560, 561, 573, 579, 580, 582, 584, 587, 588, 590, 591, 592, 593, 595, 596], "compressor": [2, 152, 154, 157, 169, 170, 180, 187, 188, 214, 215, 218, 219, 222, 225, 228, 256, 257, 259, 261, 266, 273, 274, 276, 297, 300, 302, 303, 308, 314, 319, 326, 327, 328, 332, 342, 358, 366, 372, 490, 495, 498, 500, 503, 504, 505, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 542, 543, 544, 545, 546, 550, 552, 553, 555, 557, 559, 560, 561, 564, 565, 566, 567, 569, 570, 577, 579, 580, 581, 582, 584, 587, 588, 590, 591, 592, 593, 594, 595, 596], "tupl": [2, 91, 134, 146, 188, 191, 192, 214, 218, 232, 233, 256, 259, 264, 315, 328, 358, 373, 471, 479, 482, 492, 504, 522, 524, 540, 541, 584, 592], "symnet": 2, "arg": [2, 40, 91, 146, 202, 203, 204, 244, 245, 246, 297, 306, 362, 377, 387, 479, 488, 489, 524, 529, 541, 544, 551, 581, 584, 587, 590, 591, 592], "aux": 2, "data": [2, 30, 31, 32, 42, 91, 126, 134, 136, 141, 146, 150, 165, 187, 188, 191, 192, 219, 221, 232, 233, 264, 266, 306, 316, 318, 319, 328, 340, 352, 356, 358, 362, 374, 376, 378, 389, 471, 476, 482, 485, 490, 493, 502, 503, 521, 523, 524, 529, 533, 534, 537, 540, 541, 542, 544, 564, 565, 567, 570, 575, 576, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594], "descript": [2, 118, 377, 458, 499, 504, 505, 523, 570, 574, 590], "ncmodel": 2, "fuse": [2, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 77, 78, 79, 80, 82, 117, 122, 145, 146, 150, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 423, 424, 425, 426, 428, 457, 462, 499, 590, 591], "suppli": 2, "get_framework_nam": 2, "get": [2, 30, 31, 32, 53, 54, 56, 90, 91, 134, 142, 146, 152, 157, 158, 161, 162, 163, 165, 168, 175, 181, 182, 183, 184, 188, 196, 218, 219, 225, 227, 237, 259, 264, 297, 299, 301, 309, 316, 318, 327, 336, 358, 367, 374, 376, 400, 401, 403, 471, 472, 473, 478, 485, 488, 490, 493, 504, 521, 532, 536, 537, 539, 541, 548, 565, 567, 575, 576, 582, 587, 590, 593, 594, 597], "framework": [2, 152, 155, 157, 162, 168, 172, 175, 179, 180, 189, 190, 194, 195, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 218, 220, 221, 225, 230, 231, 235, 236, 238, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 257, 259, 265, 274, 275, 302, 310, 316, 327, 328, 329, 330, 332, 368, 374, 485, 502, 503, 505, 521, 522, 526, 529, 530, 534, 535, 536, 537, 540, 541, 542, 564, 565, 581, 582, 584, 588, 591, 592, 593, 594, 595, 596], "name": [2, 31, 40, 53, 54, 56, 90, 91, 96, 102, 126, 134, 135, 136, 141, 142, 145, 146, 147, 152, 158, 161, 165, 167, 172, 175, 176, 180, 181, 182, 183, 184, 186, 187, 188, 202, 203, 204, 207, 211, 216, 218, 219, 223, 226, 227, 244, 245, 246, 249, 253, 259, 262, 263, 264, 269, 274, 292, 297, 299, 301, 316, 318, 322, 327, 332, 336, 338, 358, 374, 376, 378, 387, 400, 401, 403, 437, 442, 471, 473, 476, 478, 483, 485, 490, 493, 498, 499, 505, 522, 524, 526, 529, 531, 533, 538, 540, 541, 543, 544, 548, 555, 559, 563, 564, 570, 581, 584, 588, 589, 591, 593, 595, 596], "context": [2, 493, 583, 587], "prepare_model_data": 2, "nc_model": [2, 289, 294], "data_x": 2, "prepar": [2, 32, 146, 499, 524, 529, 534, 564, 575, 576, 577, 581, 584], "dataload": [2, 3, 30, 32, 126, 127, 136, 146, 152, 162, 163, 165, 180, 184, 191, 192, 202, 213, 222, 232, 233, 244, 255, 260, 289, 294, 303, 339, 340, 352, 356, 358, 378, 379, 472, 482, 485, 499, 502, 503, 504, 526, 527, 528, 529, 534, 535, 541, 542, 564, 565, 580, 581, 584, 585, 586, 587, 590, 591, 592, 594, 595], "need": [2, 30, 91, 95, 152, 165, 180, 188, 191, 192, 193, 200, 201, 204, 211, 218, 221, 223, 224, 232, 233, 234, 242, 243, 246, 253, 259, 264, 303, 309, 327, 328, 338, 340, 358, 367, 436, 472, 482, 492, 493, 499, 503, 522, 523, 524, 526, 527, 529, 536, 541, 545, 547, 548, 551, 555, 556, 557, 559, 560, 562, 563, 564, 565, 566, 567, 569, 573, 575, 581, 583, 584, 585, 586, 587, 588, 590, 592, 593, 595], "quantiz": [2, 4, 5, 30, 31, 32, 34, 35, 74, 78, 80, 82, 85, 93, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 138, 142, 143, 146, 150, 152, 153, 154, 187, 188, 191, 192, 214, 221, 228, 232, 233, 256, 264, 265, 266, 276, 303, 309, 315, 319, 339, 340, 363, 365, 367, 376, 378, 379, 380, 475, 478, 481, 482, 483, 487, 488, 492, 493, 503, 510, 522, 523, 524, 529, 530, 533, 535, 536, 540, 543, 545, 550, 552, 553, 556, 569, 571, 572, 574, 580, 582, 588, 591, 592, 593, 594, 595], "calibr": [2, 5, 32, 35, 75, 76, 126, 146, 152, 187, 188, 191, 192, 232, 233, 265, 302, 340, 358, 382, 421, 422, 487, 503, 505, 524, 535, 536, 581, 584, 587, 593, 594, 595], "run": [2, 126, 134, 141, 152, 172, 184, 187, 188, 191, 192, 201, 217, 219, 232, 233, 243, 258, 298, 299, 306, 328, 358, 362, 378, 471, 476, 482, 502, 503, 520, 529, 532, 533, 541, 545, 547, 549, 550, 551, 553, 555, 556, 557, 559, 560, 562, 570, 571, 572, 573, 575, 576, 577, 582, 584, 587, 588, 589, 591, 593, 595], "loader": [2, 126, 191, 192, 232, 233, 328, 358, 378, 482, 488, 523, 584], "dataloaderwrap": 2, "prepare_model": 2, "create_data_exampl": 2, "creat": [2, 4, 91, 139, 187, 188, 193, 202, 204, 221, 234, 244, 246, 270, 280, 281, 316, 323, 353, 357, 374, 376, 377, 472, 477, 485, 497, 500, 503, 524, 543, 555, 557, 559, 560, 563, 575, 576, 577, 581, 584, 589, 591, 593, 594], "exampl": [2, 32, 136, 141, 146, 152, 165, 166, 180, 187, 188, 202, 203, 204, 214, 218, 244, 245, 246, 256, 259, 270, 271, 272, 274, 300, 323, 324, 325, 327, 328, 338, 358, 376, 377, 476, 482, 492, 493, 497, 502, 504, 505, 510, 535, 536, 545, 548, 549, 550, 553, 570, 573, 586, 588, 592, 593, 594, 597], "prepare_dataload": 2, "io": [2, 141, 476, 568], "ndarray_to_devic": 2, "ndarrai": [2, 30, 31, 53, 54, 56, 218, 259, 400, 401, 403, 483, 532, 592], "devic": [2, 65, 75, 76, 77, 78, 79, 80, 83, 93, 117, 122, 133, 140, 141, 146, 162, 165, 166, 180, 184, 187, 188, 412, 421, 422, 423, 424, 425, 426, 429, 434, 457, 462, 470, 476, 480, 488, 502, 504, 523, 527, 541, 542, 545, 548, 553, 562, 581, 583, 585, 587], "is_model_quant": 2, "query_quantizable_nod": 2, "queri": [2, 33, 134, 146, 165, 176, 187, 188, 380, 471, 504, 505, 572, 584], "node": [2, 30, 31, 32, 36, 40, 41, 42, 43, 46, 48, 50, 53, 54, 56, 60, 63, 66, 68, 69, 70, 84, 88, 89, 91, 96, 118, 126, 134, 165, 262, 264, 336, 357, 378, 383, 387, 388, 389, 390, 393, 395, 397, 400, 401, 403, 407, 410, 413, 415, 416, 417, 430, 437, 458, 471, 473, 503, 526, 529, 565, 569, 572, 575, 576, 577, 585, 591, 593, 596], "given": [2, 4, 31, 53, 54, 56, 90, 91, 102, 134, 142, 146, 186, 218, 259, 270, 323, 358, 400, 401, 403, 442, 471, 478, 500, 505, 581, 590, 592], "tensor": [2, 3, 4, 31, 32, 56, 91, 126, 134, 136, 141, 142, 146, 161, 162, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 188, 218, 259, 262, 264, 297, 299, 309, 336, 367, 378, 403, 471, 473, 476, 478, 488, 492, 493, 499, 505, 522, 523, 524, 526, 544, 581, 584, 588, 591, 592, 593], "map": [2, 31, 91, 134, 141, 146, 188, 218, 259, 262, 264, 265, 269, 271, 272, 274, 289, 294, 299, 302, 322, 324, 325, 327, 471, 476, 522, 524, 529, 540, 541, 555, 559, 567, 581, 584, 587], "quantize_sym_model": 2, "qconfig": [2, 146, 492, 587, 591], "accord": [2, 108, 146, 152, 187, 188, 202, 203, 204, 218, 244, 245, 246, 259, 309, 365, 367, 448, 485, 500, 503, 524, 529, 565, 570, 575, 576, 577, 581, 586, 590, 592, 593], "configur": [2, 104, 135, 146, 152, 184, 187, 188, 191, 192, 194, 204, 207, 219, 224, 232, 233, 246, 249, 260, 264, 265, 276, 277, 278, 280, 289, 294, 298, 302, 303, 309, 327, 328, 338, 358, 367, 376, 444, 482, 484, 485, 491, 492, 499, 500, 503, 504, 524, 526, 541, 549, 563, 570, 575, 576, 577, 579, 581, 584, 587, 588, 590, 592, 593, 596], "run_forward": 2, "b_filter": 2, "collector": [2, 136, 483], "none": [2, 29, 31, 32, 33, 34, 35, 49, 75, 88, 90, 91, 96, 102, 128, 134, 136, 140, 141, 142, 143, 146, 152, 154, 155, 161, 162, 163, 165, 169, 180, 184, 187, 188, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 214, 218, 219, 220, 221, 228, 232, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 256, 259, 260, 263, 264, 265, 270, 274, 275, 276, 277, 280, 289, 294, 298, 302, 304, 306, 309, 310, 312, 316, 323, 327, 328, 338, 352, 356, 357, 358, 359, 360, 362, 363, 367, 368, 370, 374, 377, 380, 381, 382, 396, 421, 437, 442, 471, 472, 476, 478, 481, 482, 483, 485, 488, 490, 492, 493, 502, 503, 504, 523, 524, 540, 544, 565, 584, 587, 591, 592, 593], "pre_batch": 2, "post_batch": 2, "forward": [2, 146, 184, 504, 541, 564, 581, 583, 584, 587, 590, 591], "propag": [2, 86, 432], "gener": [2, 34, 35, 73, 108, 134, 146, 152, 165, 184, 191, 192, 193, 201, 204, 205, 206, 207, 218, 232, 233, 234, 243, 246, 247, 248, 249, 259, 267, 275, 306, 320, 328, 354, 358, 362, 377, 381, 382, 448, 471, 472, 482, 498, 499, 503, 505, 523, 527, 540, 541, 542, 544, 545, 550, 555, 557, 559, 560, 562, 564, 565, 579, 581, 582, 584, 586, 587, 590, 591, 592, 593], "filter": [2, 202, 203, 204, 205, 206, 207, 209, 213, 244, 245, 246, 247, 248, 249, 251, 255, 472, 493, 505, 524, 536, 581, 591], "which": [2, 30, 42, 69, 96, 136, 141, 161, 165, 166, 168, 172, 173, 174, 176, 179, 180, 182, 184, 187, 188, 202, 203, 204, 214, 219, 244, 245, 246, 256, 267, 272, 281, 283, 284, 286, 287, 288, 292, 297, 298, 299, 301, 306, 320, 325, 327, 332, 338, 340, 358, 362, 389, 416, 437, 476, 493, 497, 499, 500, 502, 503, 504, 505, 521, 523, 524, 526, 527, 529, 532, 533, 536, 540, 541, 542, 543, 546, 550, 553, 556, 562, 563, 564, 567, 570, 575, 576, 577, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595], "batch": [2, 146, 193, 195, 196, 200, 201, 221, 234, 236, 237, 242, 243, 472, 482, 523, 527, 528, 541, 580, 581, 584, 590, 592, 593, 596], "infer": [2, 31, 91, 126, 146, 165, 265, 302, 336, 338, 358, 378, 473, 482, 502, 503, 504, 521, 527, 528, 541, 542, 562, 579, 581, 582, 584, 587, 590, 591, 593], "collect": [2, 4, 31, 146, 216, 218, 221, 223, 224, 226, 259, 272, 274, 325, 327, 483, 493, 504, 584, 591, 593], "inform": [2, 136, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 221, 223, 224, 232, 233, 297, 299, 300, 301, 303, 327, 339, 493, 497, 498, 501, 502, 503, 504, 505, 506, 508, 512, 515, 518, 521, 522, 527, 533, 541, 543, 544, 557, 560, 563, 564, 567, 568, 570, 571, 575, 576, 581, 586, 587, 588, 590, 591, 595, 596, 597], "dure": [2, 139, 141, 167, 171, 182, 187, 188, 297, 301, 338, 476, 477, 493, 504, 526, 541, 543, 569, 579, 580, 581, 584, 590, 591, 595], "call": [2, 30, 141, 147, 165, 173, 174, 179, 270, 299, 323, 340, 476, 499, 500, 503, 523, 535, 551, 553, 563, 581, 584, 590, 591, 592], "prior": [2, 74, 420, 593], "after": [2, 64, 134, 146, 163, 167, 172, 174, 179, 187, 188, 202, 214, 218, 221, 244, 256, 259, 299, 363, 377, 411, 471, 488, 493, 500, 502, 504, 524, 526, 527, 528, 531, 536, 540, 541, 555, 556, 559, 563, 567, 579, 580, 581, 584, 586, 587, 589, 590, 591, 592, 593], "count": [2, 500, 524, 587], "int": [2, 4, 30, 31, 32, 91, 126, 134, 144, 146, 163, 187, 188, 201, 202, 203, 214, 218, 243, 244, 245, 256, 259, 263, 264, 268, 270, 274, 281, 321, 323, 327, 339, 347, 353, 357, 376, 377, 378, 471, 488, 493, 502, 522, 523, 524, 540, 541, 573, 583, 587, 592], "make_symbol_block": 2, "gluon": [2, 328, 358, 543], "symbolblock": 2, "make_modul": 2, "parse_tune_config": 2, "tune_cfg": [2, 134, 135, 146, 503, 505, 593], "quantizable_nod": 2, "strategi": [2, 146, 179, 187, 188, 189, 204, 230, 246, 266, 319, 502, 503, 504, 505, 510, 521, 522, 523, 529, 536, 541, 550, 562, 567, 582, 583, 584, 586, 587, 588, 594, 595], "config": [2, 32, 101, 102, 104, 108, 146, 152, 161, 162, 163, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 191, 192, 202, 232, 233, 244, 283, 284, 286, 287, 288, 289, 294, 297, 298, 299, 300, 301, 316, 317, 319, 328, 353, 357, 374, 375, 376, 377, 380, 441, 442, 444, 448, 482, 485, 492, 493, 500, 502, 504, 505, 510, 520, 522, 523, 526, 527, 528, 529, 531, 534, 536, 540, 541, 542, 543, 564, 565, 580, 581, 583, 584, 586, 587, 589, 591, 593], "tune": [2, 152, 153, 187, 188, 191, 192, 202, 204, 232, 233, 244, 246, 265, 302, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 328, 338, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 482, 493, 503, 504, 521, 522, 523, 524, 526, 529, 536, 538, 541, 542, 562, 566, 569, 571, 572, 579, 581, 582, 586, 588, 589, 591, 595], "from": [2, 31, 47, 53, 54, 56, 91, 134, 141, 142, 146, 152, 154, 155, 161, 162, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 191, 192, 193, 196, 199, 202, 203, 204, 205, 206, 207, 209, 214, 220, 221, 224, 232, 233, 234, 237, 241, 244, 245, 246, 247, 248, 249, 251, 256, 260, 262, 263, 264, 267, 270, 271, 272, 276, 281, 297, 298, 299, 301, 316, 318, 320, 323, 324, 325, 328, 336, 338, 358, 374, 376, 377, 394, 400, 401, 403, 471, 472, 473, 476, 478, 482, 485, 488, 492, 493, 497, 498, 499, 500, 503, 505, 520, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 536, 539, 540, 542, 543, 544, 545, 549, 550, 551, 553, 563, 565, 567, 568, 572, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594], "distribute_calib_tensor": 2, "calib_tensor": 2, "calib_cfg": 2, "tensor_to_nod": 2, "distribut": [2, 4, 129, 151, 187, 188, 193, 195, 196, 198, 199, 200, 201, 221, 234, 236, 237, 240, 241, 242, 243, 466, 472, 487, 502, 504, 523, 527, 537, 557, 560, 564, 567, 575, 582, 584, 587, 588, 590, 594, 596], "depend": [2, 191, 192, 219, 232, 233, 328, 358, 482, 498, 532, 533, 568, 583, 584, 593], "algorithm": [2, 32, 146, 188, 267, 274, 282, 319, 320, 327, 485, 487, 500, 502, 503, 504, 505, 522, 527, 528, 533, 536, 539, 551, 556, 581, 584, 591, 595], "set": [2, 31, 37, 82, 91, 101, 134, 141, 146, 152, 157, 184, 187, 188, 191, 192, 193, 202, 204, 207, 218, 219, 224, 225, 232, 233, 234, 244, 246, 249, 259, 270, 276, 289, 294, 298, 303, 323, 327, 328, 336, 357, 358, 377, 384, 428, 441, 471, 472, 473, 476, 482, 490, 493, 497, 500, 502, 504, 520, 523, 524, 527, 529, 531, 533, 535, 536, 537, 540, 541, 542, 545, 547, 549, 563, 564, 565, 566, 567, 568, 572, 575, 581, 583, 584, 587, 589, 590, 593, 595], "kl": [2, 4, 187, 188, 483, 487, 504, 505, 521, 533, 541, 593, 595], "minmax": [2, 4, 504, 505, 521, 533, 584, 595], "calib_model": 2, "qsym_model": 2, "calib_data": [2, 140], "us": [2, 4, 22, 30, 31, 32, 34, 35, 56, 89, 91, 102, 127, 136, 141, 146, 152, 155, 157, 161, 165, 167, 172, 176, 177, 180, 182, 183, 187, 188, 191, 192, 200, 201, 202, 203, 204, 205, 206, 209, 217, 218, 219, 220, 225, 232, 233, 242, 243, 244, 245, 246, 247, 248, 251, 258, 259, 263, 264, 265, 267, 268, 270, 274, 275, 276, 281, 288, 289, 292, 294, 297, 299, 300, 301, 302, 303, 306, 309, 312, 315, 316, 320, 321, 323, 327, 338, 353, 357, 358, 362, 365, 367, 370, 374, 376, 377, 379, 380, 381, 382, 403, 442, 472, 476, 482, 483, 484, 485, 486, 488, 493, 497, 498, 499, 500, 502, 503, 504, 520, 521, 522, 524, 526, 527, 528, 529, 531, 533, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 549, 550, 553, 555, 557, 559, 560, 562, 564, 565, 566, 567, 568, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 595, 596], "gather": [2, 17, 187, 188, 297], "calibdata": 2, "threshold": [2, 148, 483, 487, 540], "amp_convert": 2, "amp_cfg": 2, "support": [2, 30, 31, 32, 83, 90, 150, 155, 157, 162, 168, 175, 179, 187, 188, 191, 192, 201, 202, 204, 211, 214, 218, 220, 221, 222, 225, 232, 233, 243, 244, 246, 253, 256, 259, 266, 274, 276, 281, 297, 299, 303, 310, 316, 319, 327, 328, 332, 338, 340, 358, 368, 374, 377, 429, 482, 485, 487, 488, 493, 495, 502, 504, 522, 539, 541, 545, 550, 553, 556, 562, 569, 570, 573, 582, 586, 589, 593, 594], "amp": [2, 545, 552, 571, 587], "wrap": [2, 91, 102, 155, 220, 270, 323, 442, 499, 529, 557, 560], "dataiterload": 2, "data_it": [2, 165], "collectorbas": 2, "base": [2, 4, 22, 33, 72, 91, 102, 106, 108, 118, 130, 136, 139, 144, 146, 147, 154, 161, 168, 175, 181, 183, 188, 193, 196, 200, 202, 204, 211, 218, 228, 234, 237, 242, 244, 246, 253, 259, 274, 280, 282, 288, 289, 292, 294, 299, 309, 312, 316, 327, 329, 336, 337, 338, 367, 370, 374, 380, 419, 442, 446, 448, 458, 467, 472, 473, 477, 500, 502, 503, 504, 505, 522, 524, 528, 529, 533, 541, 542, 550, 551, 553, 562, 565, 570, 573, 576, 577, 581, 582, 584, 587, 589, 590, 591, 593, 596], "calibcollector": 2, "include_tensors_kl": 2, "include_tensors_minmax": 2, "num_bin": [2, 4, 483], "8001": [2, 483, 570, 575, 576, 577], "tensorcollector": 2, "include_nod": 2, "qtensor_to_tensor": 2, "build": [2, 30, 32, 101, 147, 148, 150, 151, 277, 280, 331, 333, 335, 336, 337, 341, 441, 473, 503, 504, 505, 537, 543, 555, 557, 559, 560, 563, 582, 593], "up": [2, 86, 176, 218, 259, 298, 432, 502, 529, 530, 533, 536, 553, 557, 560, 562, 581, 582, 583, 584, 589, 592, 593, 595], "namecollector": 2, "cache_kl": 2, "cache_minmax": 2, "tensors_kl": 2, "tensors_minmax": 2, "onnx": [3, 4, 17, 29, 31, 32, 73, 128, 150, 187, 188, 198, 240, 262, 263, 264, 328, 335, 340, 341, 353, 491, 498, 502, 503, 504, 506, 523, 526, 530, 531, 533, 534, 536, 542, 543, 544, 547, 552, 553, 565, 582, 583, 587, 588, 590, 593], "onnxrtaug": 3, "model_wrapp": [3, 137], "dump_op_typ": 3, "black_nod": 3, "white_nod": 3, "backend": [3, 29, 30, 150, 157, 187, 188, 189, 190, 194, 195, 198, 202, 203, 205, 206, 207, 208, 209, 213, 215, 218, 224, 225, 230, 231, 235, 236, 238, 240, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 310, 328, 329, 330, 332, 368, 499, 505, 526, 529, 535, 536, 541, 542, 551, 570, 575, 576, 577, 583, 587, 592, 593, 595], "cpuexecutionprovid": [3, 29, 30, 32, 339, 340, 542, 584], "reduce_rang": [3, 29, 30, 187, 188, 505, 583], "kwarg": [3, 31, 91, 108, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 123, 142, 146, 163, 187, 188, 204, 216, 218, 223, 226, 246, 259, 315, 317, 327, 328, 329, 331, 333, 335, 336, 337, 339, 341, 358, 373, 375, 377, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 460, 461, 463, 473, 478, 479, 482, 488, 489, 492, 493, 523], "augment": 3, "dump": [3, 139, 146, 152, 264, 339, 477, 493, 498, 567, 584, 588, 591], "calib_registri": 4, "calib_method": 4, "The": [4, 22, 40, 60, 99, 105, 107, 126, 134, 141, 146, 147, 152, 154, 155, 157, 161, 165, 167, 169, 170, 172, 173, 174, 179, 180, 181, 182, 183, 184, 187, 188, 191, 192, 193, 202, 203, 204, 205, 206, 210, 211, 218, 220, 223, 225, 228, 232, 233, 234, 244, 245, 246, 247, 248, 252, 253, 259, 260, 265, 267, 268, 269, 271, 272, 274, 276, 277, 278, 280, 281, 283, 284, 286, 287, 288, 289, 292, 294, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 310, 311, 312, 316, 318, 320, 321, 322, 324, 325, 327, 328, 336, 338, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 376, 377, 378, 387, 407, 439, 445, 447, 471, 472, 473, 476, 482, 483, 485, 487, 488, 492, 493, 494, 497, 499, 500, 503, 504, 505, 506, 508, 512, 515, 518, 520, 521, 522, 523, 524, 526, 527, 529, 531, 533, 535, 536, 537, 539, 540, 541, 542, 543, 544, 547, 548, 550, 553, 555, 556, 557, 559, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "decor": [4, 22, 53, 54, 56, 134, 147, 157, 167, 172, 180, 182, 218, 225, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 370, 400, 401, 403, 493, 499, 500, 503, 593], "regist": [4, 22, 139, 141, 147, 155, 157, 161, 162, 167, 168, 172, 175, 180, 181, 182, 183, 204, 211, 218, 220, 225, 246, 253, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 370, 376, 476, 477, 490, 500, 503, 522, 524, 529, 540, 541, 563, 579, 590, 593], "subclass": [4, 22, 147, 157, 167, 172, 180, 182, 197, 201, 204, 211, 218, 225, 239, 243, 246, 253, 259, 274, 281, 288, 292, 297, 299, 301, 312, 315, 327, 338, 370, 503], "calibratorbas": 4, "minmaxcalibr": 4, "percentilecalibr": 4, "2048": [4, 493, 502, 587], "percentil": [4, 32, 126, 378, 521], "99": [4, 539, 596], "999": [4, 595], "option": [4, 32, 91, 141, 146, 167, 187, 188, 191, 192, 202, 218, 232, 233, 244, 259, 263, 264, 270, 276, 297, 303, 316, 323, 327, 328, 358, 374, 376, 377, 476, 482, 486, 488, 493, 504, 505, 522, 523, 524, 533, 537, 541, 556, 570, 573, 575, 576, 577, 581, 584, 587, 589, 590, 592, 593, 595], "number": [4, 32, 53, 54, 91, 126, 146, 163, 169, 170, 187, 188, 200, 203, 214, 218, 242, 245, 256, 259, 271, 272, 274, 297, 306, 324, 325, 327, 353, 357, 362, 377, 378, 400, 401, 472, 485, 493, 520, 523, 524, 529, 540, 570, 572, 581, 584, 587, 589, 590, 592, 593], "bin": [4, 141, 142, 476, 478, 493, 532], "histogram": [4, 483, 493, 564, 591], "valu": [4, 31, 32, 42, 53, 54, 56, 75, 76, 91, 129, 134, 141, 146, 151, 152, 161, 165, 166, 176, 183, 184, 187, 188, 191, 192, 202, 205, 206, 214, 218, 219, 232, 233, 244, 247, 248, 256, 259, 270, 274, 298, 306, 309, 316, 323, 327, 328, 358, 362, 367, 374, 376, 377, 389, 400, 401, 403, 421, 422, 466, 471, 472, 476, 482, 483, 485, 493, 499, 504, 505, 521, 524, 526, 533, 540, 541, 542, 544, 548, 565, 567, 573, 579, 581, 583, 584, 587, 588, 590, 592, 593, 595], "default": [4, 32, 83, 134, 141, 146, 184, 187, 188, 191, 192, 195, 202, 203, 204, 214, 218, 232, 233, 236, 244, 245, 246, 256, 259, 263, 264, 267, 276, 298, 318, 320, 327, 336, 376, 429, 471, 473, 476, 485, 488, 493, 499, 503, 522, 523, 524, 533, 536, 537, 540, 541, 542, 544, 550, 553, 555, 559, 567, 570, 575, 576, 577, 579, 581, 583, 584, 586, 587, 589, 590, 592, 593, 595], "float": [4, 31, 32, 126, 127, 136, 167, 172, 181, 184, 187, 188, 202, 214, 244, 256, 268, 270, 271, 272, 299, 321, 323, 324, 325, 373, 377, 378, 379, 490, 493, 522, 524, 540, 544, 583, 584, 590, 592], "A": [4, 41, 60, 61, 89, 102, 126, 127, 134, 139, 146, 153, 154, 161, 162, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 204, 218, 221, 223, 224, 246, 259, 260, 267, 270, 271, 272, 274, 277, 280, 281, 282, 289, 292, 294, 297, 298, 299, 300, 301, 306, 320, 323, 324, 325, 327, 328, 332, 336, 362, 378, 379, 388, 407, 408, 442, 471, 473, 477, 482, 493, 498, 502, 504, 522, 523, 524, 530, 533, 540, 541, 543, 555, 556, 559, 562, 570, 581, 582, 584, 587, 590, 592, 593, 595], "between": [4, 30, 129, 151, 178, 187, 188, 218, 259, 271, 274, 324, 327, 353, 357, 466, 493, 499, 503, 504, 505, 521, 526, 527, 536, 540, 541, 544, 553, 584, 587, 588, 589, 590, 592, 593], "0": [4, 31, 32, 40, 76, 91, 134, 140, 141, 146, 148, 150, 155, 161, 163, 184, 187, 188, 193, 195, 198, 199, 201, 202, 205, 206, 209, 214, 218, 220, 221, 234, 236, 240, 241, 243, 244, 247, 248, 251, 256, 259, 264, 265, 274, 281, 289, 294, 302, 327, 338, 358, 363, 377, 387, 422, 471, 472, 476, 488, 499, 502, 522, 523, 524, 527, 529, 531, 532, 533, 537, 538, 539, 540, 541, 542, 544, 548, 550, 555, 559, 565, 575, 576, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595], "100": [4, 152, 187, 188, 204, 246, 377, 520, 524, 529, 535, 537, 541, 567, 583, 584, 592, 593, 595, 596], "klcalibr": 4, "128": [4, 32, 146, 202, 205, 206, 218, 244, 247, 248, 259, 472, 524, 541, 584, 587, 592, 596], "num_quantized_bin": 4, "histogramcollector": 4, "collctor": 4, "smooth_distribut": 4, "p": [4, 502, 563, 564, 587], "ep": [4, 151, 542], "0001": [4, 187, 188, 527, 541, 583], "smooth": [4, 126, 127, 134, 150, 187, 188, 315, 339, 378, 379, 471, 522, 581, 593], "discret": [4, 593], "mai": [4, 134, 139, 141, 283, 284, 286, 287, 288, 377, 471, 476, 477, 497, 498, 504, 521, 522, 526, 531, 532, 538, 542, 555, 559, 565, 568, 570, 582, 584, 587, 590, 593], "have": [4, 60, 69, 127, 134, 141, 162, 166, 168, 175, 200, 221, 242, 267, 270, 297, 299, 320, 323, 327, 358, 376, 377, 379, 407, 416, 471, 476, 497, 498, 504, 505, 522, 523, 524, 526, 529, 533, 538, 540, 541, 542, 544, 545, 562, 565, 568, 570, 575, 576, 577, 579, 581, 584, 585, 587, 590, 593, 594], "been": [4, 141, 162, 168, 175, 267, 297, 299, 320, 476, 500, 505, 522, 527, 541, 542, 562, 587, 590], "normal": [4, 21, 218, 259, 272, 325, 541, 571, 579, 587, 590, 592], "1": [4, 30, 31, 32, 41, 60, 75, 91, 95, 99, 132, 134, 141, 143, 146, 148, 150, 151, 152, 155, 161, 173, 174, 176, 187, 188, 193, 195, 198, 199, 201, 202, 203, 205, 206, 209, 210, 214, 218, 219, 220, 221, 234, 236, 240, 241, 243, 244, 245, 247, 248, 251, 252, 256, 259, 265, 270, 271, 272, 274, 289, 294, 299, 302, 303, 323, 324, 325, 327, 338, 340, 358, 376, 377, 388, 407, 421, 436, 439, 469, 471, 472, 476, 481, 485, 488, 493, 497, 499, 502, 503, 505, 521, 523, 524, 526, 527, 531, 533, 534, 537, 539, 540, 542, 544, 546, 548, 564, 565, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595], "replac": [4, 142, 146, 272, 325, 478, 522, 529, 541, 544, 553, 588], "zero": [4, 31, 32, 172, 184, 218, 259, 299, 493, 502, 544, 567, 581, 584, 587, 590, 592, 593], "multipli": [4, 187, 188, 544, 587], "scale": [4, 31, 32, 86, 127, 129, 143, 146, 150, 151, 214, 218, 256, 259, 379, 432, 466, 481, 544, 584, 587, 589, 590, 592, 593], "factor": [4, 127, 379, 587, 590, 596], "take": [4, 167, 188, 191, 192, 196, 218, 223, 232, 233, 237, 259, 297, 306, 327, 328, 358, 362, 472, 482, 497, 499, 500, 523, 526, 527, 533, 541, 562, 581, 584, 586, 587, 592, 593, 595], "correspond": [4, 136, 165, 176, 187, 188, 202, 244, 267, 270, 274, 320, 323, 327, 485, 493, 503, 533, 541, 581, 583, 584, 589, 593], "amount": [4, 590], "off": [4, 53, 54, 56, 400, 401, 403, 498, 587], "non": [4, 298, 493, 499, 526, 587, 593], "ref": [4, 134, 471], "http": [4, 136, 161, 169, 170, 179, 180, 202, 204, 244, 246, 267, 268, 270, 271, 272, 297, 299, 300, 320, 321, 323, 324, 325, 327, 358, 499, 524, 526, 534, 537, 538, 541, 551, 557, 560, 564, 566, 567, 568, 569, 570, 573, 575, 576, 577, 581, 588], "hanj": 4, "c": [4, 60, 204, 246, 407, 493, 524, 532, 537, 587, 593], "illinoi": 4, "edu": [4, 204, 246, 524], "cs412": 4, "bk3": 4, "diverg": [4, 483, 487, 505, 521, 527, 593], "pdf": 4, "github": [4, 136, 169, 170, 180, 202, 244, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 358, 498, 502, 524, 526, 530, 537, 538, 541, 551, 557, 560, 564, 566, 567, 568, 569, 570, 573, 576, 577, 588], "com": [4, 136, 169, 170, 180, 202, 244, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 358, 497, 522, 524, 526, 534, 537, 538, 541, 545, 551, 564, 566, 567, 569, 570, 573, 576, 577, 588, 589, 596], "apach": [4, 538], "incub": 4, "blob": [4, 136, 169, 170, 267, 268, 271, 272, 297, 320, 321, 324, 325, 327, 358, 541, 551, 573, 576, 577], "master": [4, 169, 170, 180, 267, 268, 271, 272, 297, 300, 320, 321, 324, 325, 327, 358, 541, 593], "python": [4, 61, 134, 139, 141, 204, 222, 246, 266, 319, 377, 408, 471, 476, 477, 493, 495, 499, 502, 522, 524, 526, 529, 532, 537, 541, 547, 553, 556, 562, 566, 567, 569, 570, 572, 575, 577, 581, 582, 592], "contrib": [4, 266, 319], "py": [4, 134, 136, 152, 172, 187, 188, 268, 270, 271, 272, 299, 321, 323, 324, 325, 377, 471, 499, 503, 522, 526, 529, 537, 541, 547, 549, 550, 551, 557, 560, 564, 566, 567, 569, 570, 572, 573, 575, 576, 577, 584, 588, 591], "microsoft": [4, 502, 503, 544], "onnxruntim": [4, 187, 188, 198, 204, 211, 240, 246, 253, 275, 353, 503, 521, 523, 536, 537, 542, 565, 583], "main": [4, 157, 176, 180, 225, 300, 499, 523, 526, 529, 541, 549, 551, 563, 572, 581, 584, 587], "tool": [4, 134, 263, 471, 493, 502, 503, 541, 555, 559, 565, 568, 569, 570, 581, 582, 584], "arrai": [4, 31, 32, 134, 141, 218, 259, 270, 281, 323, 471, 476, 493, 592], "small": [4, 53, 54, 55, 56, 365, 400, 401, 402, 403, 500, 567, 568, 581, 587, 593, 596], "probabl": [4, 187, 188, 487, 587], "oper": [5, 31, 90, 96, 126, 134, 165, 166, 171, 187, 188, 214, 256, 297, 353, 357, 378, 437, 471, 499, 520, 523, 526, 531, 562, 568, 581, 584, 587, 590, 592, 593], "smooth_quant": [5, 140, 146, 149, 187, 188, 522, 584, 590], "weight_onli": [5, 188, 492, 502, 522, 544, 585, 587], "activationoper": 6, "onnx_quant": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "onnx_nod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 87], "removableactivationoper": 6, "remov": [6, 31, 37, 43, 46, 60, 66, 69, 70, 71, 82, 84, 126, 163, 176, 272, 325, 378, 384, 390, 393, 407, 413, 416, 417, 418, 428, 430, 497, 541, 555, 559, 568, 575, 576, 581, 591], "qactivationoper": 6, "children": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 142, 478], "initi": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 30, 31, 32, 91, 102, 134, 141, 155, 172, 191, 192, 199, 202, 220, 232, 233, 241, 244, 298, 299, 316, 358, 374, 442, 471, 476, 482, 500, 505, 524, 540, 561, 581, 584, 590, 593], "int8": [6, 7, 31, 32, 73, 109, 110, 111, 117, 119, 120, 121, 122, 129, 134, 151, 152, 187, 188, 214, 256, 262, 263, 264, 316, 318, 374, 376, 449, 450, 451, 457, 459, 460, 461, 462, 466, 471, 492, 493, 498, 499, 502, 503, 504, 505, 520, 524, 528, 533, 539, 541, 542, 544, 547, 550, 552, 553, 556, 562, 565, 567, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 595], "qoper": [6, 22, 187, 188, 531, 565], "format": [6, 31, 40, 134, 146, 187, 188, 202, 203, 204, 244, 245, 246, 264, 270, 276, 316, 323, 374, 377, 380, 387, 471, 488, 502, 504, 505, 522, 524, 529, 531, 540, 541, 542, 543, 544, 545, 567, 570, 582, 584, 587, 588], "float16activationoper": 6, "float16": [6, 9, 31, 480, 488, 524, 587], "argmaxoper": 7, "qargmaxoper": 7, "attentionoper": 8, "qattentionoper": 8, "qattent": 8, "binari": [9, 134, 274, 327, 471, 532, 540, 557, 560, 588], "binaryoper": 9, "binarydirect8bitoper": 9, "qbinaryoper": 9, "qbinari": 9, "float16binaryoper": 9, "concatoper": 10, "qconcatoper": 10, "qconcat": 10, "convoper": 11, "qconvoper": 11, "qlinearconv": 11, "direct8bit": 12, "direct8bitoper": 12, "qdirectoper": 12, "qdirect": 12, "embedlayernorm": 13, "embedlayernormalizationoper": 13, "qembedlayernormalizationoper": 13, "qembedlayernorm": 13, "gatheroper": 14, "qgatheroper": 14, "qgather": 14, "globalaveragepool": 15, "globalaveragepooloper": 15, "qglobalaveragepooloper": 15, "qlinearglobalaveragepool": 15, "gemmoper": 16, "qgemmoper": 16, "qgemm": 16, "activ": [17, 32, 127, 146, 158, 187, 188, 227, 316, 374, 376, 379, 503, 504, 505, 521, 526, 528, 533, 541, 563, 564, 567, 575, 576, 577, 583, 584, 587, 590, 591, 595], "argmax": 17, "attent": [17, 144, 163, 165, 176, 187, 188, 202, 244, 497, 527, 581], "binary_op": 17, "concat": [17, 133, 470], "conv": [17, 44, 48, 52, 57, 58, 59, 78, 95, 150, 187, 188, 391, 395, 399, 404, 405, 406, 424, 436, 499, 504, 505, 541, 581, 583, 584, 593], "direct_q8": 17, "embed_layernorm": 17, "gavgpool": 17, "gemm": [17, 187, 188], "lstm": 17, "matmul": [17, 32, 39, 45, 51, 59, 80, 95, 114, 123, 171, 187, 188, 297, 386, 392, 398, 406, 426, 436, 454, 463, 533, 565, 587, 593], "maxpool": [17, 115, 124, 455, 464, 533], "norm": 17, "pad": [17, 32, 57, 58, 202, 218, 244, 259, 404, 405, 524, 592], "pool": [17, 572], "reduc": [17, 187, 188, 503, 521, 528, 541, 542, 562, 563, 581, 582, 584, 585, 586, 587, 590, 593, 595], "resiz": [17, 202, 203, 214, 218, 244, 245, 256, 259, 524, 592], "split": [17, 31, 68, 217, 218, 258, 259, 415, 499, 585, 587, 590, 592], "unary_op": 17, "lstmoper": 18, "matmuloper": 19, "qmatmuloper": 19, "qlinearmatmul": 19, "fusedmatmuloper": 19, "fusedmatmul": 19, "maxpooloper": 20, "qmaxpooloper": 20, "qmaxpool": 20, "batchnormalizationoper": 21, "batchnorm": [21, 48, 53, 107, 395, 400, 447, 499, 590], "normalizationoper": 21, "op_registri": 22, "op_typ": [22, 126, 127, 134, 186, 317, 375, 378, 379, 471], "qop_registri": 22, "padoper": 23, "qpadoper": 23, "qpad": 23, "averagepool": 24, "pooloper": 24, "qpooloper": 24, "qlinearaveragepool": 24, "reduceoper": 25, "reduceminmaxoper": 25, "reducemin": 25, "reducemax": 25, "resizeoper": 26, "qresizeoper": 26, "qresiz": 26, "splitoper": 27, "qsplitoper": 27, "qsplit": 27, "unari": 28, "unaryoper": 28, "unarydirect8bitoper": 28, "q_config": [29, 146, 264, 503], "mode": [29, 30, 31, 96, 141, 211, 253, 270, 316, 323, 336, 340, 374, 437, 473, 476, 490, 492, 493, 503, 504, 526, 536, 555, 559, 567, 568, 584, 586, 587, 593], "static": [29, 30, 33, 150, 165, 188, 264, 316, 340, 358, 374, 380, 503, 504, 505, 526, 531, 536, 541, 545, 550, 551, 552, 553, 556, 562, 565, 573, 575, 576, 577, 585, 590, 593, 596], "quantization_param": 29, "op_types_to_quant": 29, "fallback_list": 29, "fp32": [29, 30, 32, 65, 117, 122, 129, 146, 151, 187, 188, 191, 192, 232, 233, 263, 264, 274, 309, 316, 327, 363, 367, 374, 412, 457, 462, 466, 485, 488, 492, 493, 498, 503, 505, 526, 533, 534, 539, 540, 541, 542, 552, 564, 565, 566, 567, 583, 584, 586, 587, 588, 589, 590, 591, 593, 595, 596], "add_qdq_pair_to_weight": [29, 187, 188, 584], "optypes_to_exclude_output_qu": [29, 187, 188, 584], "dedicated_qdq_pair": [29, 187, 188, 584], "smoothquant": [30, 146, 150, 340, 502, 539, 582, 587, 594], "onnxrt": [30, 31, 32, 202, 204, 211, 218, 244, 246, 253, 259, 274, 327, 352, 491, 503, 526, 542, 564, 584, 596], "get_quant_dequant_output": 30, "input_data": [30, 523], "output_data": 30, "loss": [30, 155, 187, 188, 220, 265, 274, 289, 294, 302, 327, 482, 521, 526, 527, 528, 529, 530, 539, 540, 541, 542, 553, 565, 567, 580, 581, 582, 584, 587, 590, 593, 595], "output": [30, 31, 32, 37, 40, 45, 60, 84, 91, 96, 134, 146, 158, 165, 166, 171, 184, 187, 188, 191, 192, 223, 227, 232, 233, 263, 264, 267, 297, 320, 327, 328, 336, 358, 384, 387, 392, 407, 430, 437, 471, 473, 482, 488, 489, 493, 499, 503, 504, 527, 528, 529, 531, 533, 535, 540, 541, 543, 553, 562, 563, 565, 570, 571, 575, 576, 577, 580, 581, 583, 584, 587, 588, 590, 591, 592, 593, 595], "qdq": [30, 73, 98, 99, 128, 146, 187, 188, 262, 263, 264, 438, 439, 503, 526, 531, 536, 552, 553, 584, 588, 590], "numpi": [30, 31, 53, 54, 56, 91, 134, 218, 259, 270, 281, 323, 400, 401, 403, 471, 532, 590, 592], "7": [30, 152, 187, 188, 338, 505, 520, 532, 533, 541, 581, 584, 588, 590, 593, 596], "bit": [30, 32, 146, 187, 188, 376, 502, 505, 521, 528, 542, 544, 582, 584, 587, 590], "execut": [30, 31, 40, 141, 152, 172, 173, 174, 187, 188, 299, 303, 305, 357, 358, 359, 361, 387, 476, 482, 485, 492, 493, 526, 527, 528, 541, 542, 547, 548, 555, 556, 562, 563, 564, 565, 569, 572, 580, 581, 584, 587, 589, 593, 596], "provid": [30, 31, 32, 88, 91, 96, 165, 191, 192, 218, 232, 233, 259, 265, 270, 289, 294, 302, 303, 323, 328, 339, 340, 358, 437, 482, 486, 488, 500, 502, 503, 504, 505, 520, 523, 526, 528, 529, 530, 536, 537, 539, 540, 541, 542, 543, 545, 549, 553, 556, 562, 563, 564, 570, 571, 581, 583, 584, 587, 590, 591, 593, 594, 595, 596], "make_sub_graph": 30, "opset": [30, 88, 90, 91, 188, 263, 264, 531], "ir_vers": 30, "specif": [30, 90, 102, 152, 157, 184, 187, 188, 202, 203, 204, 205, 209, 211, 225, 244, 245, 246, 247, 251, 253, 283, 284, 286, 287, 288, 327, 358, 442, 472, 490, 497, 500, 503, 504, 521, 522, 523, 526, 527, 533, 535, 539, 540, 541, 542, 543, 544, 545, 549, 550, 552, 556, 562, 564, 570, 579, 581, 583, 587, 593, 595], "thi": [30, 72, 96, 118, 125, 129, 133, 136, 139, 141, 146, 151, 154, 158, 163, 165, 167, 169, 170, 171, 172, 176, 177, 178, 179, 180, 181, 182, 187, 188, 191, 192, 201, 202, 203, 204, 205, 206, 207, 209, 218, 221, 227, 228, 232, 233, 243, 244, 245, 246, 247, 248, 249, 251, 259, 267, 270, 271, 272, 274, 283, 284, 286, 287, 288, 289, 294, 297, 299, 301, 302, 303, 306, 309, 320, 323, 324, 325, 327, 328, 338, 358, 362, 367, 376, 377, 419, 437, 458, 465, 466, 470, 472, 476, 477, 482, 492, 493, 497, 498, 499, 500, 503, 504, 505, 521, 522, 523, 524, 527, 528, 529, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 545, 547, 548, 550, 551, 553, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 575, 576, 577, 581, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594], "quant_dequant_data": 30, "qtype": [30, 31, 503], "3": [30, 32, 134, 141, 174, 188, 204, 218, 246, 259, 270, 323, 377, 471, 476, 493, 499, 500, 502, 521, 522, 523, 524, 527, 529, 531, 533, 534, 537, 540, 541, 542, 544, 545, 549, 553, 555, 559, 564, 569, 570, 572, 573, 575, 579, 581, 582, 583, 584, 587, 588, 589, 590, 592, 593, 596], "scheme": [30, 31, 32, 143, 146, 481, 503, 504, 505, 523, 533, 553, 587, 593, 595], "sym": [30, 31, 32, 504, 505, 533, 584, 587, 595], "dequant": [30, 31, 32, 37, 74, 77, 78, 79, 80, 82, 136, 146, 384, 420, 423, 424, 425, 426, 428, 493, 499, 504, 590, 591], "asym": [30, 31, 32, 143, 146, 481, 505, 533, 587, 595], "ortsmoothqu": 30, "fake": [30, 32, 99, 143, 150, 340, 376, 439, 481, 541, 584, 587, 590], "channel": [30, 31, 32, 129, 150, 151, 163, 166, 171, 187, 188, 214, 218, 256, 259, 297, 340, 466, 488, 502, 503, 505, 536, 537, 544, 545, 547, 552, 567, 581, 587, 592, 596], "For": [30, 32, 146, 150, 165, 166, 169, 170, 180, 188, 204, 218, 246, 259, 271, 272, 274, 297, 300, 324, 325, 327, 328, 340, 358, 497, 499, 501, 503, 505, 527, 528, 529, 531, 533, 536, 545, 547, 548, 550, 553, 564, 565, 570, 581, 586, 587, 590, 591, 593, 595, 596], "more": [30, 134, 150, 169, 170, 218, 259, 297, 340, 471, 500, 501, 502, 504, 521, 522, 524, 527, 529, 531, 534, 536, 537, 539, 541, 542, 544, 545, 553, 557, 560, 565, 570, 579, 580, 581, 586, 587, 590, 593, 594, 596], "detail": [30, 150, 165, 218, 259, 340, 493, 494, 497, 502, 504, 505, 521, 522, 527, 533, 534, 535, 539, 540, 541, 542, 545, 553, 562, 570, 571, 581, 587, 588, 589, 590, 591, 593, 594], "pleas": [30, 136, 150, 161, 169, 170, 171, 179, 180, 187, 188, 202, 203, 204, 207, 244, 245, 246, 249, 297, 299, 300, 327, 340, 358, 377, 499, 500, 501, 502, 503, 520, 521, 524, 528, 529, 531, 537, 539, 540, 542, 545, 546, 550, 553, 569, 570, 571, 581, 584, 586, 587, 588, 589, 590, 593, 594], "refer": [30, 136, 150, 161, 169, 170, 171, 179, 180, 184, 187, 188, 202, 244, 267, 268, 274, 297, 299, 300, 320, 321, 327, 340, 358, 377, 499, 502, 503, 504, 520, 523, 524, 526, 528, 529, 531, 535, 537, 538, 540, 541, 542, 545, 550, 553, 564, 565, 567, 569, 570, 571, 579, 583, 585, 588, 592, 593], "accur": [30, 150, 340, 581, 587, 590], "effici": [30, 150, 340, 500, 502, 521, 523, 527, 545, 570, 580, 581, 582, 587, 590, 593], "post": [30, 83, 84, 150, 179, 188, 191, 192, 232, 233, 340, 358, 429, 430, 497, 502, 503, 504, 526, 528, 529, 531, 536, 537, 544, 545, 551, 562, 572, 581, 582, 585, 587, 590, 591, 593], "train": [30, 43, 66, 150, 154, 173, 174, 177, 179, 187, 188, 191, 192, 202, 204, 218, 228, 232, 233, 244, 246, 259, 260, 276, 299, 319, 340, 358, 390, 413, 485, 500, 502, 503, 504, 510, 524, 526, 527, 528, 531, 536, 542, 544, 545, 551, 562, 567, 575, 580, 582, 585, 587, 589, 590, 593, 595], "larg": [30, 31, 150, 340, 502, 523, 527, 541, 544, 582, 585, 587, 590, 596], "languag": [30, 150, 267, 320, 340, 497, 502, 531, 544, 566, 582, 585, 587, 590], "2": [30, 31, 32, 40, 60, 91, 95, 141, 148, 150, 152, 167, 173, 174, 187, 188, 203, 219, 245, 270, 272, 274, 299, 306, 323, 325, 327, 338, 340, 362, 377, 387, 407, 436, 476, 493, 499, 502, 503, 521, 523, 524, 526, 527, 533, 536, 537, 538, 539, 540, 542, 544, 566, 572, 573, 575, 576, 577, 579, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 594], "spiq": [30, 150, 340, 590], "free": [30, 150, 179, 191, 192, 232, 233, 340, 358, 497, 551, 556, 564, 572, 579, 589, 590], "per": [30, 31, 32, 150, 152, 187, 188, 219, 340, 487, 503, 505, 523, 544, 570, 581, 586, 587, 596], "we": [30, 31, 53, 54, 56, 60, 72, 129, 141, 150, 151, 152, 165, 169, 176, 187, 188, 201, 219, 221, 243, 267, 270, 320, 323, 340, 365, 400, 401, 403, 407, 419, 466, 476, 497, 499, 503, 504, 505, 522, 523, 526, 529, 531, 533, 539, 540, 541, 549, 550, 553, 557, 560, 562, 563, 565, 568, 575, 576, 577, 579, 580, 581, 583, 584, 585, 587, 588, 589, 590, 591, 593, 594], "onli": [30, 32, 40, 49, 56, 72, 95, 101, 129, 141, 150, 151, 152, 157, 162, 168, 175, 187, 188, 202, 219, 221, 225, 244, 264, 276, 297, 299, 310, 340, 358, 368, 376, 377, 387, 396, 403, 419, 436, 441, 466, 476, 493, 503, 504, 505, 520, 521, 522, 523, 526, 527, 529, 532, 533, 539, 541, 542, 550, 563, 581, 582, 583, 584, 585, 590, 591, 593, 594, 595], "inplac": [30, 340], "mean": [30, 32, 167, 176, 187, 188, 214, 218, 256, 259, 272, 274, 297, 309, 325, 327, 340, 367, 499, 504, 505, 523, 526, 529, 533, 540, 541, 548, 567, 581, 584, 585, 587, 590, 592, 593, 595, 596], "weight": [30, 31, 32, 46, 47, 108, 126, 127, 129, 134, 136, 146, 151, 161, 162, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 183, 187, 188, 264, 297, 299, 316, 327, 340, 358, 365, 374, 376, 378, 379, 393, 394, 448, 466, 471, 493, 494, 503, 504, 505, 521, 526, 528, 533, 535, 539, 541, 564, 575, 579, 581, 582, 583, 584, 585, 590, 591, 593, 594, 595], "chang": [30, 82, 129, 151, 173, 174, 176, 177, 179, 182, 187, 188, 299, 301, 340, 365, 428, 466, 493, 498, 504, 523, 529, 532, 538, 541, 545, 555, 556, 559, 562, 568, 581, 591, 592, 593], "you": [30, 141, 187, 188, 200, 202, 242, 244, 299, 327, 340, 358, 476, 498, 499, 504, 522, 523, 524, 526, 529, 537, 538, 540, 542, 545, 547, 548, 550, 555, 559, 562, 563, 564, 565, 566, 567, 568, 570, 581, 584, 587, 588, 589, 590, 591, 594], "can": [30, 31, 32, 129, 136, 141, 151, 165, 166, 167, 172, 180, 182, 187, 188, 191, 192, 201, 204, 218, 219, 221, 232, 233, 243, 246, 259, 270, 272, 274, 297, 299, 301, 323, 325, 327, 328, 338, 340, 358, 466, 476, 482, 493, 499, 500, 502, 503, 504, 505, 520, 522, 523, 524, 526, 527, 528, 529, 531, 533, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 555, 556, 557, 559, 560, 562, 563, 565, 567, 568, 569, 570, 572, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596], "recov": [30, 340, 492, 493, 503, 528], "helper": [31, 96, 102, 134, 146, 202, 203, 204, 217, 244, 245, 246, 258, 262, 263, 264, 336, 437, 442, 471, 473, 491], "get_node_original_nam": 31, "origin": [31, 32, 126, 134, 142, 146, 165, 177, 184, 188, 202, 218, 219, 244, 259, 283, 284, 286, 287, 288, 298, 299, 318, 363, 376, 378, 471, 478, 488, 493, 498, 524, 550, 581, 584, 592, 593, 595], "simple_progress_bar": 31, "total": [31, 172, 218, 259, 274, 299, 327, 524, 526, 581, 587, 592, 596], "progress": [31, 175, 204, 246, 556, 562, 564, 581, 584], "bar": [31, 204, 246, 562, 582], "case": [31, 56, 60, 141, 152, 188, 201, 217, 218, 219, 243, 258, 259, 265, 289, 294, 302, 338, 403, 407, 476, 505, 522, 523, 527, 528, 529, 533, 535, 540, 546, 550, 562, 563, 564, 567, 573, 576, 577, 579, 581, 582, 584, 587, 588, 590, 592, 594, 595, 596], "where": [31, 141, 187, 188, 270, 274, 323, 327, 376, 476, 493, 505, 521, 526, 527, 555, 559, 563, 590, 591], "tqdm": [31, 541], "t": [31, 53, 54, 56, 129, 141, 151, 167, 187, 188, 218, 221, 259, 272, 325, 400, 401, 403, 466, 476, 499, 503, 522, 526, 527, 529, 541, 542, 563, 568, 581, 584, 587, 593, 595], "dtype_to_nam": 31, "dtype_map": 31, "dtype": [31, 32, 88, 91, 187, 188, 205, 206, 214, 218, 247, 248, 256, 259, 472, 480, 488, 502, 504, 505, 524, 526, 531, 533, 545, 567, 583, 584, 587, 590, 591, 592, 595], "its": [31, 46, 82, 134, 136, 165, 174, 177, 179, 184, 188, 198, 204, 218, 240, 246, 259, 262, 268, 269, 299, 306, 321, 322, 362, 393, 428, 471, 497, 524, 527, 538, 540, 542, 553, 555, 559, 562, 563, 581, 587, 589, 592, 593], "string": [31, 102, 134, 139, 141, 152, 155, 157, 165, 167, 172, 180, 181, 182, 184, 187, 188, 204, 220, 225, 246, 260, 265, 267, 270, 276, 277, 278, 280, 281, 289, 294, 297, 298, 299, 300, 301, 302, 320, 323, 332, 336, 442, 471, 473, 476, 477, 485, 490, 493, 540, 592], "represent": [31, 139, 477, 497, 499, 521, 528, 544, 581, 584], "quanttyp": [31, 376], "repres": [31, 167, 171, 172, 180, 181, 184, 204, 209, 246, 251, 270, 272, 274, 323, 325, 327, 497, 505, 521, 524, 531, 570, 581, 584, 585, 593], "make_quant_nod": 31, "axi": [31, 188], "make": [31, 91, 129, 151, 167, 172, 180, 182, 200, 242, 297, 299, 301, 466, 493, 497, 503, 504, 520, 522, 523, 533, 540, 541, 550, 555, 559, 562, 564, 581, 584, 585, 586, 587, 589, 590, 593], "quantizelinear": 31, "make_dquant_nod": 31, "dequantizelinear": 31, "is_b_transpos": 31, "inuput": 31, "b": [31, 60, 202, 244, 407, 493, 498, 521, 524, 540, 581, 587, 590, 593], "transpos": [31, 59, 171, 214, 218, 259, 263, 297, 406, 587, 592], "split_shared_bia": 31, "share": [31, 32, 68, 84, 95, 127, 379, 415, 430, 436, 532, 533, 587, 590, 593], "float_to_float16": 31, "float_to_bfloat16": 31, "bfloat16": [31, 542, 545, 553, 586], "cast_tensor": 31, "is_large_model": 31, "tensorproto": [31, 91], "raw": [31, 152, 203, 207, 210, 245, 249, 252, 309, 367, 540, 566, 593], "remove_init_from_model_input": 31, "collate_pr": 31, "result": [31, 134, 136, 146, 214, 218, 256, 259, 267, 270, 271, 272, 274, 320, 323, 324, 325, 327, 358, 365, 471, 482, 492, 493, 497, 500, 502, 523, 526, 527, 529, 536, 538, 540, 541, 550, 551, 562, 563, 566, 570, 571, 572, 573, 579, 581, 582, 584, 587, 589, 590, 591, 592, 593, 594, 596], "quantize_data_with_scale_zero": 31, "zero_point": [31, 32], "point": [31, 32, 214, 256, 271, 272, 281, 306, 324, 325, 362, 493, 540, 544, 562, 567, 568, 584, 587, 590, 592, 593], "To": [31, 270, 323, 338, 498, 502, 504, 505, 522, 524, 526, 529, 542, 544, 546, 549, 555, 557, 559, 560, 564, 568, 581, 583, 586, 587, 588, 590, 593, 595], "pack": [31, 47, 394], "comput": [31, 32, 91, 136, 146, 267, 268, 271, 272, 274, 320, 321, 324, 325, 327, 482, 493, 521, 523, 528, 531, 540, 541, 542, 544, 545, 556, 565, 581, 582, 584, 587, 590, 593], "linear": [31, 143, 146, 150, 163, 165, 166, 171, 176, 184, 186, 187, 188, 297, 481, 499, 527, 531, 541, 581, 587, 590, 593], "transform": [31, 36, 129, 131, 132, 133, 144, 179, 202, 203, 204, 205, 206, 207, 209, 211, 213, 244, 245, 246, 247, 248, 249, 251, 253, 255, 383, 466, 468, 469, 470, 472, 499, 500, 502, 521, 524, 527, 528, 529, 530, 534, 539, 541, 545, 550, 551, 552, 553, 565, 573, 576, 577, 581, 582, 586, 587, 590, 591, 593, 595], "when": [31, 40, 50, 56, 134, 139, 141, 166, 172, 177, 184, 187, 188, 202, 203, 211, 218, 244, 245, 253, 259, 268, 298, 299, 321, 358, 387, 397, 403, 471, 476, 477, 482, 497, 500, 504, 522, 523, 524, 541, 553, 555, 556, 559, 563, 564, 567, 568, 569, 571, 575, 581, 584, 587, 590, 592, 593], "uint8": [31, 214, 256, 270, 318, 323, 376, 503, 524, 533, 583, 584, 592, 595], "rmin": [31, 544, 584], "rmax": [31, 584], "m": [31, 136, 169, 170, 187, 188, 297, 498, 527, 537, 545, 547, 550, 553, 557, 560, 570, 581, 596], "max": [31, 90, 129, 151, 187, 188, 218, 259, 271, 272, 306, 324, 325, 362, 466, 493, 502, 526, 537, 541, 544, 565, 567, 581, 584, 587, 590, 592, 593], "ab": [31, 161, 179, 299, 581, 584, 590], "np": [31, 218, 259, 306, 362, 529, 572, 590, 592, 593], "calculate_scale_zp": 31, "quantize_rang": 31, "calcul": [31, 46, 146, 161, 169, 184, 188, 205, 206, 247, 248, 271, 272, 297, 299, 309, 324, 325, 367, 393, 472, 483, 493, 521, 524, 540, 541, 553, 565, 579, 581, 584, 587, 589, 590, 593, 595], "quantize_data": 31, "add": [31, 39, 50, 95, 105, 134, 157, 184, 187, 188, 202, 204, 225, 244, 246, 298, 316, 374, 386, 397, 436, 445, 471, 493, 498, 499, 502, 505, 523, 524, 529, 531, 533, 540, 541, 557, 560, 564, 565, 572, 575, 576, 589, 590, 591, 593, 594], "necessari": [31, 180, 497, 500, 504, 543, 563, 581, 589, 593], "intermedi": [31, 136, 155, 187, 188, 220, 499, 536, 584], "full": [31, 202, 203, 204, 244, 245, 246, 488, 493, 502, 521, 524, 526, 532, 538, 563, 568, 581, 587, 588], "equat": [31, 272, 274, 325, 327, 584, 590], "r": [31, 129, 151, 466, 526, 537, 563, 564, 566, 567, 569, 570, 584, 596], "": [31, 32, 91, 129, 134, 141, 151, 165, 166, 167, 171, 172, 173, 174, 177, 179, 184, 186, 187, 188, 201, 204, 217, 218, 219, 221, 223, 243, 246, 258, 259, 272, 297, 299, 325, 327, 328, 332, 358, 466, 471, 476, 490, 493, 497, 498, 500, 504, 505, 522, 526, 527, 529, 531, 533, 536, 541, 542, 550, 553, 555, 559, 562, 565, 567, 570, 580, 581, 582, 583, 584, 587, 588, 589, 590, 593, 594, 595, 596], "q": [31, 32, 93, 95, 117, 434, 436, 457, 587, 590], "z": [31, 521, 522, 527, 590], "real": [31, 205, 221, 247, 472, 504, 521, 529, 564, 571, 582, 584], "quantize_data_per_channel": 31, "dequantize_data_with_scale_zero": 31, "tensor_valu": 31, "scale_valu": 31, "zo_valu": 31, "dequantize_data": 31, "valueinfo": 31, "tensor_nam": [31, 134, 141, 142, 471, 476, 478], "new_dtyp": 31, "cast": [31, 37, 384, 586, 592], "info": [31, 146, 169, 170, 184, 216, 221, 226, 297, 332, 488, 489, 493, 499, 522, 526, 543, 572, 577], "quantizedvalu": 31, "new_quantized_nam": 31, "scale_nam": 31, "zero_point_nam": 31, "quantized_value_typ": 31, "quint8": 31, "linearli": 31, "quantizediniti": 31, "quantized_data": 31, "quantizationmod": 31, "quantizedvaluetyp": 31, "quantformat": 31, "quantize_nparrai": 31, "arr": [31, 493], "low": [31, 191, 192, 205, 206, 232, 233, 247, 248, 265, 275, 302, 328, 472, 503, 504, 520, 521, 524, 529, 541, 542, 567, 582, 584, 587, 590, 593], "high": [31, 205, 206, 247, 248, 472, 524, 526, 537, 567, 582, 593], "attribute_to_kwarg": 31, "attribut": [31, 69, 90, 91, 134, 146, 165, 176, 188, 416, 471, 493, 503, 523, 533, 535, 541, 583, 595], "make_nod": 31, "find_by_nam": 31, "item_list": 31, "find": [31, 53, 54, 56, 91, 134, 186, 274, 281, 306, 327, 362, 400, 401, 403, 471, 493, 503, 526, 539, 548, 555, 559, 562, 563, 565, 567, 581, 587, 589, 590, 591, 593], "item": [31, 184, 187, 188, 217, 258, 298, 316, 374, 521, 529, 581, 590, 593], "trt_env_setup": 31, "environ": [31, 152, 219, 497, 502, 520, 555, 559, 562, 570, 573, 575, 576, 577, 593], "variabl": [31, 139, 152, 181, 187, 188, 204, 219, 246, 306, 362, 376, 477, 537, 581, 593], "tensorrt": [31, 521, 542, 584], "to_numpi": 31, "infer_shap": 31, "in_mp": 31, "int_max": 31, "31": [31, 539, 596], "auto_merg": 31, "guess_output_rank": 31, "verbos": [31, 264, 306, 362], "base_dir": 31, "shape": [31, 32, 91, 134, 167, 205, 206, 214, 218, 247, 248, 256, 259, 270, 323, 471, 472, 502, 524, 533, 534, 541, 564, 565, 587, 590, 592], "weightonli": 32, "get_blob_s": 32, "group_siz": [32, 143, 146, 376, 481, 587], "has_zp": 32, "blob_siz": 32, "how": [32, 141, 154, 161, 167, 173, 174, 179, 187, 188, 218, 259, 260, 297, 476, 498, 499, 501, 503, 523, 524, 527, 528, 529, 535, 540, 541, 556, 557, 560, 561, 562, 564, 575, 576, 577, 581, 582, 584, 590, 592, 593, 594, 595], "mani": [32, 327, 358, 522, 523, 537, 587, 593, 595], "element": [32, 169, 170, 184, 200, 242, 270, 297, 323, 472, 493, 524, 536, 540, 544, 581, 587, 590], "one": [32, 95, 96, 101, 141, 146, 152, 167, 171, 176, 179, 180, 182, 218, 228, 259, 267, 270, 274, 276, 297, 300, 301, 320, 323, 327, 436, 437, 441, 476, 500, 503, 521, 527, 528, 529, 533, 536, 537, 540, 541, 542, 545, 546, 550, 551, 553, 555, 556, 559, 562, 563, 564, 567, 568, 569, 570, 572, 579, 580, 581, 583, 584, 585, 587, 588, 590, 592, 593], "zp": [32, 590], "make_matmul_weight_only_nod": 32, "weight_shap": 32, "num_bit": [32, 99, 143, 146, 439, 481, 590], "k_block": 32, "q_weight": 32, "accuracy_level": 32, "matmulfpq4": 32, "accuraci": [32, 152, 184, 187, 188, 191, 192, 232, 233, 260, 265, 274, 289, 294, 302, 327, 328, 338, 358, 363, 377, 482, 490, 499, 502, 504, 505, 521, 523, 524, 526, 528, 529, 530, 531, 540, 541, 544, 553, 562, 564, 571, 572, 575, 576, 579, 580, 581, 582, 583, 587, 588, 589, 590, 591, 594, 595, 596], "level": [32, 165, 363, 377, 489, 497, 544, 572, 590, 593], "unset": 32, "jbla": 32, "kernel": [32, 150, 187, 188, 503, 504, 593], "fp16": [32, 188, 316, 374, 479, 480, 584], "bf16": [32, 73, 135, 187, 188, 316, 374, 479, 480, 503, 504, 533, 541, 547, 552, 556, 562, 586, 593, 596], "4": [32, 40, 143, 146, 152, 167, 176, 187, 188, 211, 214, 218, 253, 256, 259, 267, 268, 270, 320, 321, 323, 376, 377, 387, 481, 497, 502, 503, 505, 520, 529, 530, 533, 536, 537, 540, 541, 544, 550, 570, 572, 576, 581, 584, 587, 590, 592, 593, 596], "matmulnbit": 32, "new_init": 32, "matmul_weight_only_nod": 32, "quant_tensor": 32, "32": [32, 163, 376, 529, 535, 544, 587, 596], "ratio": [32, 129, 151, 167, 172, 184, 187, 188, 214, 218, 256, 259, 299, 466, 524, 539, 541, 565, 581, 592, 596], "group": [32, 181, 284, 502, 536, 581, 587, 591, 592, 593, 596], "clip": [32, 587, 590], "qdq_tensor": 32, "quant": [32, 134, 146, 187, 188, 316, 339, 374, 380, 471, 499, 522, 539, 541, 584], "pad_tensor": 32, "rowi": 32, "so": [32, 91, 218, 259, 376, 499, 503, 526, 532, 536, 542, 544, 548, 550, 566, 567, 568, 584, 586, 587, 590, 591, 592, 594], "divis": 32, "pade": 32, "rtn_quantiz": 32, "weight_config": 32, "round": [32, 129, 151, 466, 502, 582, 584, 587, 590], "nearst": 32, "method": [32, 127, 129, 139, 141, 146, 181, 187, 188, 196, 200, 201, 202, 204, 211, 218, 221, 237, 242, 243, 244, 246, 253, 259, 280, 281, 282, 316, 374, 376, 379, 466, 476, 477, 485, 486, 488, 489, 499, 500, 502, 521, 522, 523, 524, 526, 527, 528, 540, 541, 580, 581, 584, 586, 587, 590, 592, 593], "modelproto": [32, 262, 328, 340, 543], "onnxmodel": [32, 335, 339, 340, 341, 352], "fc2": [32, 146], "rtn": [32, 146, 522, 585, 587], "get_weight_scal": 32, "apply_awq_scal": 32, "absorb_pair": 32, "output_dict": 32, "appli": [32, 99, 112, 113, 114, 117, 119, 123, 134, 143, 154, 176, 178, 228, 268, 321, 439, 452, 453, 454, 457, 459, 463, 471, 481, 497, 504, 505, 541, 544, 545, 547, 553, 562, 566, 567, 572, 580, 581, 584, 586, 589, 590, 593, 594, 595], "salient": [32, 581, 587], "apply_awq_clip": 32, "mse": [32, 146, 187, 188, 274, 308, 327, 358, 366, 493, 526, 540, 567, 583, 587, 588], "prepare_input": 32, "n_sampl": [32, 146], "sampl": [32, 63, 146, 187, 188, 196, 200, 202, 203, 204, 214, 218, 237, 242, 244, 245, 246, 256, 259, 274, 281, 306, 327, 362, 410, 472, 500, 523, 524, 530, 536, 563, 584, 587, 590, 592, 593, 595, 596], "session": [32, 134, 201, 243, 336, 471, 473, 541, 591], "awq_quant": 32, "enable_auto_scal": [32, 587], "enable_mse_search": [32, 587], "awar": [32, 136, 154, 188, 228, 276, 297, 365, 482, 503, 504, 505, 521, 528, 529, 531, 536, 562, 572, 580, 582, 587, 593], "awq": [32, 585, 587], "enabl": [32, 95, 136, 172, 187, 188, 299, 436, 504, 505, 529, 537, 542, 545, 547, 550, 551, 553, 564, 566, 567, 569, 572, 581, 582, 590, 593], "gptq": [32, 522, 539, 585, 587], "w": [32, 218, 259, 581, 590, 592], "h": [32, 187, 188, 218, 259, 529, 570, 571, 575, 576, 577, 592], "blocksiz": [32, 544], "percdamp": [32, 587], "01": [32, 187, 188, 539, 541, 583, 587, 593, 595, 596], "actord": [32, 587], "perchannel": 32, "hessian": [32, 136, 365, 587, 593], "matrix": [32, 327, 358, 502, 553, 594], "percent": 32, "averag": [32, 271, 272, 274, 324, 325, 327, 540, 541, 587, 593, 596], "diagon": [32, 587], "dampen": 32, "rearrang": [32, 179, 581, 587], "consid": [32, 134, 274, 327, 471, 497, 521, 522, 527, 563, 593], "diag": 32, "error": [32, 91, 136, 141, 274, 309, 327, 367, 476, 489, 526, 540, 546, 567, 568, 571, 587, 590, 593], "gptq_quantiz": 32, "tensorflowadaptor": [33, 380], "framework_specific_info": [33, 380, 503], "layer": [33, 102, 103, 104, 105, 107, 108, 138, 140, 142, 150, 155, 158, 163, 165, 166, 167, 171, 176, 184, 186, 187, 188, 220, 227, 297, 298, 380, 442, 443, 444, 445, 447, 448, 475, 478, 483, 485, 493, 502, 503, 504, 505, 528, 536, 565, 581, 587, 588, 594], "stock": [33, 380, 551, 590], "spr": [33, 380], "tensorflow_itexadaptor": [33, 380], "itex": [33, 95, 187, 188, 263, 380, 436, 542, 584, 590], "tensorflowqueri": [33, 380, 503], "local_config_fil": [33, 380], "performance_onli": [33, 34, 35, 93, 117, 122, 133, 187, 380, 381, 382, 434, 457, 462, 470, 541], "itex_mod": [33, 34, 75, 93, 117, 122, 380, 381, 421, 434, 457, 462], "quant_mod": [33, 316, 374, 380, 504, 505], "graph": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 103, 116, 118, 122, 125, 128, 129, 131, 132, 133, 134, 165, 201, 243, 265, 329, 336, 357, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 456, 458, 462, 465, 466, 468, 469, 470, 471, 473, 499, 503, 524, 527, 529, 535, 543, 545, 564, 567, 584, 585, 586, 591], "graphconvert": [34, 381], "qt_config": [34, 381], "recip": [34, 165, 187, 188, 265, 302, 381, 502, 541, 544, 585, 587, 590, 593], "int8_sequ": [34, 381], "fp32_op": [34, 36, 93, 381, 383, 434], "bf16_op": [34, 36, 93, 381, 383, 434, 504, 586], "data_load": [34, 35, 381, 382, 503], "calib_func": [34, 146, 358, 381, 586], "fake_qu": [34, 74, 93, 117, 122, 381, 420, 434, 457, 462], "qdq_enabl": [34, 381], "new_api": [34, 35, 57, 58, 63, 65, 78, 85, 117, 122, 129, 381, 382, 404, 405, 410, 412, 424, 431, 457, 462, 466], "use_bf16": [34, 35, 187, 381, 382, 583], "without": [35, 76, 134, 177, 218, 259, 299, 318, 376, 382, 422, 471, 497, 527, 529, 541, 544, 553, 564, 567, 581, 582, 583, 593, 594], "graphconverterwithoutcalib": [35, 382], "recover_config": [35, 382], "rewrit": [36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 162, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "bf16convert": [36, 383, 586], "rerewrit": [37, 384], "dequantizecastoptim": [37, 384], "b16": [37, 384], "tensorflow": [38, 40, 61, 62, 63, 73, 81, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 103, 116, 126, 127, 128, 131, 134, 155, 157, 183, 187, 188, 201, 202, 203, 204, 207, 209, 211, 218, 225, 243, 244, 245, 246, 249, 251, 253, 259, 263, 264, 265, 268, 270, 274, 275, 276, 302, 310, 321, 323, 327, 328, 336, 352, 353, 356, 357, 358, 368, 493, 498, 500, 502, 503, 504, 521, 522, 523, 526, 527, 528, 530, 533, 534, 536, 537, 541, 542, 543, 544, 552, 553, 564, 567, 581, 582, 583, 589, 590, 593, 595], "bf16_convert": [38, 137, 385], "dequantize_cast_optim": [38, 385], "biasadd": [39, 45, 50, 52, 95, 386, 392, 397, 399, 436, 533], "convertaddtobiasaddoptim": [39, 386], "conv2d": [39, 45, 46, 47, 51, 52, 57, 111, 121, 129, 386, 392, 393, 394, 398, 399, 404, 451, 461, 466, 504, 505, 526, 531, 533, 567, 590, 591, 593], "addv2": [39, 55, 386, 402, 533], "layout": [40, 387], "convertlayoutoptim": [40, 387], "convers": [40, 41, 188, 276, 387, 388, 498, 503, 504, 541, 542, 584, 586, 590], "optim": [40, 60, 61, 65, 66, 102, 104, 134, 156, 159, 160, 162, 165, 174, 179, 187, 188, 222, 228, 265, 282, 302, 306, 362, 387, 407, 408, 412, 413, 442, 444, 471, 482, 483, 490, 493, 500, 502, 520, 522, 526, 527, 528, 529, 533, 534, 536, 537, 539, 541, 543, 545, 547, 549, 550, 553, 556, 564, 567, 568, 569, 571, 573, 582, 583, 584, 586, 587, 589, 590, 591, 593, 595], "nchw": [40, 214, 387], "nhwc": [40, 214, 387], "It": [40, 141, 153, 154, 158, 167, 191, 192, 227, 232, 233, 272, 274, 281, 297, 302, 309, 325, 327, 328, 358, 363, 367, 387, 476, 482, 503, 504, 505, 521, 526, 527, 541, 544, 548, 551, 556, 562, 563, 564, 565, 567, 568, 570, 581, 584, 587, 588, 589, 593, 595], "exist": [40, 152, 219, 336, 387, 473, 493, 531, 540, 549, 593], "abov": [40, 387, 503, 504, 505, 527, 564, 565, 567, 570, 581, 584, 590, 593], "graph_def": [40, 126, 127, 134, 263, 328, 336, 357, 358, 378, 379, 387, 471, 473], "leakyrelu": [41, 388, 590], "convertleakyreluoptim": [41, 388], "below": [41, 52, 60, 187, 188, 303, 327, 358, 388, 399, 407, 498, 499, 502, 503, 504, 505, 523, 526, 527, 529, 535, 540, 544, 545, 547, 555, 556, 559, 562, 565, 570, 579, 580, 581, 583, 584, 587, 589, 590, 591, 593, 594], "subgraph": [41, 52, 91, 145, 388, 399, 585, 593], "mul": [41, 51, 52, 55, 150, 388, 398, 399, 402, 531, 587, 590], "maximum": [41, 167, 172, 187, 188, 202, 218, 244, 259, 268, 299, 306, 321, 336, 362, 388, 473, 505, 521, 524, 526, 541, 581, 584, 590, 592], "note": [41, 139, 171, 270, 310, 323, 368, 388, 477, 500, 502, 504, 505, 522, 523, 526, 529, 531, 533, 537, 539, 541, 547, 550, 555, 559, 562, 564, 568, 570, 572, 581, 584, 587, 590, 591, 593, 594, 595], "coeffici": [41, 181, 388, 581], "should": [41, 101, 102, 141, 154, 163, 165, 176, 187, 188, 191, 192, 200, 202, 204, 218, 223, 232, 233, 242, 244, 246, 259, 264, 268, 321, 327, 328, 358, 377, 388, 441, 442, 476, 482, 493, 499, 500, 503, 504, 505, 524, 527, 529, 540, 541, 548, 557, 560, 562, 564, 565, 579, 581, 584, 587, 592, 593, 595], "less": [41, 134, 146, 187, 188, 388, 493, 520, 527, 541, 569, 581], "than": [41, 134, 202, 218, 244, 259, 388, 493, 500, 502, 520, 524, 535, 544, 567, 575, 579, 580, 581, 584, 587, 589, 592, 593], "valid": [41, 53, 54, 91, 153, 172, 175, 184, 187, 188, 204, 246, 270, 298, 299, 323, 336, 388, 400, 401, 473, 500, 502, 503, 524, 526, 527, 530, 533, 536, 538, 541, 553, 567, 581, 584, 587, 588], "nan": [42, 389], "random": [42, 134, 187, 188, 214, 218, 256, 259, 282, 306, 308, 362, 366, 389, 493, 500, 541, 581, 583, 592, 595], "convertnantorandom": [42, 389], "const": [42, 43, 49, 50, 53, 54, 56, 68, 84, 389, 390, 396, 397, 400, 401, 403, 415, 430], "consist": [42, 49, 389, 396, 498, 499, 522, 570, 590, 593], "placehold": [43, 200, 242, 390, 472, 522], "convertplaceholdertoconst": [43, 390], "dilat": [44, 391], "contract": [44, 391], "dilatedcontract": [44, 391], "spacetobatchnd": [44, 391], "batchtospacend": [44, 391], "pattern": [44, 45, 47, 64, 82, 93, 94, 95, 117, 122, 146, 161, 162, 165, 166, 172, 173, 174, 175, 177, 179, 181, 187, 188, 204, 246, 287, 288, 290, 295, 299, 316, 374, 391, 392, 394, 411, 428, 434, 435, 436, 457, 462, 503, 522, 524, 533, 536, 541, 563, 580, 583, 590, 593, 596], "inject": [45, 392, 541], "dummi": [45, 165, 205, 206, 247, 248, 274, 327, 392, 472, 502, 524, 534, 540, 541, 564], "injectdummybiasaddoptim": [45, 392], "fusion": [45, 47, 56, 64, 95, 112, 113, 114, 117, 118, 119, 123, 392, 394, 403, 411, 436, 452, 453, 454, 457, 458, 459, 463, 499, 503, 533], "expanddim": [46, 393], "expanddimsoptim": [46, 393], "next": [46, 196, 237, 377, 393, 472, 500, 504, 505, 523, 583, 587, 593], "fetch": [47, 146, 149, 196, 237, 394, 472, 504, 524, 575, 576, 577], "reshap": [47, 53, 54, 59, 394, 400, 401, 406, 590], "fetchweightfromreshapeoptim": [47, 394], "handl": [47, 134, 150, 153, 394, 471, 489, 499, 501, 522, 523, 570, 590], "fold": [48, 49, 146, 264, 395, 396, 533, 587, 590], "foldbatchnormnodesoptim": [48, 395], "graphfoldconstantoptim": [49, 396], "sequenc": [49, 91, 166, 169, 170, 187, 188, 202, 217, 218, 244, 258, 259, 268, 272, 297, 321, 325, 396, 503, 524, 533, 581, 587, 592], "self": [49, 146, 165, 187, 188, 338, 396, 503, 504, 523, 524, 536, 540, 564, 589, 591, 593], "supported_op_typ": [49, 396], "fusebiasaddandaddoptim": [50, 397], "second": [50, 141, 166, 187, 188, 202, 244, 363, 397, 476, 493, 526, 541, 555, 559, 563, 575, 576, 587, 590, 593, 595], "columnwis": [51, 398], "fusecolumnwisemuloptim": [51, 398], "depthwiseconv2dn": [51, 57, 111, 121, 398, 404, 451, 461, 533], "math": [52, 399, 584], "fuseconvwithmathoptim": [52, 399], "elimin": [52, 399, 569], "sub": [52, 146, 152, 165, 219, 399, 500, 522, 593], "realdiv": [52, 55, 399, 402], "decompos": [53, 54, 400, 401], "fusedecomposedbnoptim": [53, 400], "input_graph_def": [53, 54, 56, 400, 401, 403], "node_name_from_input": [53, 54, 56, 400, 401, 403], "node_nam": [53, 54, 56, 134, 336, 347, 400, 401, 403, 471, 473, 504], "strip": [53, 54, 56, 69, 70, 134, 400, 401, 403, 416, 417, 471, 591], "port": [53, 54, 56, 400, 401, 403, 564, 571], "other": [53, 54, 56, 139, 150, 201, 243, 272, 325, 336, 400, 401, 403, 473, 477, 497, 499, 504, 505, 522, 526, 533, 536, 538, 541, 543, 544, 565, 579, 581, 584, 590, 592, 593, 596], "underli": [53, 54, 56, 141, 400, 401, 403, 476], "node_from_map": [53, 54, 56, 400, 401, 403], "node_map": [53, 54, 56, 400, 401, 403], "pull": [53, 54, 56, 400, 401, 403], "def": [53, 54, 56, 191, 192, 232, 233, 358, 377, 400, 401, 403, 482, 499, 503, 522, 523, 524, 527, 528, 529, 540, 541, 584, 590, 591, 593], "dictionari": [53, 54, 56, 134, 135, 136, 141, 146, 186, 187, 188, 217, 258, 270, 277, 280, 282, 323, 400, 401, 403, 471, 476, 493], "entri": [53, 54, 56, 136, 157, 225, 265, 303, 400, 401, 403, 493, 522, 538], "index": [53, 54, 56, 91, 152, 184, 188, 196, 200, 204, 237, 242, 246, 281, 400, 401, 403, 472, 493, 524, 540, 563, 567, 587, 590], "everi": [53, 54, 56, 167, 170, 172, 187, 188, 297, 299, 400, 401, 403, 503, 523, 550, 555, 559, 585, 587, 593], "identifi": [53, 54, 56, 141, 270, 323, 336, 400, 401, 403, 473, 476, 570, 581, 587], "want": [53, 54, 56, 165, 187, 188, 200, 202, 242, 244, 299, 363, 400, 401, 403, 482, 499, 503, 523, 524, 529, 541, 550, 562, 563, 570, 579, 584, 587, 589, 591, 593], "nodedef": [53, 54, 56, 400, 401, 403], "rais": [53, 54, 56, 91, 139, 141, 146, 162, 168, 175, 184, 270, 297, 298, 299, 323, 328, 377, 400, 401, 403, 476, 477, 502, 522, 564, 581, 582], "valueerror": [53, 54, 56, 146, 270, 323, 377, 400, 401, 403, 532], "If": [53, 54, 56, 60, 141, 152, 187, 188, 191, 192, 204, 218, 232, 233, 246, 259, 298, 328, 358, 377, 400, 401, 403, 407, 476, 482, 498, 499, 504, 520, 522, 523, 524, 529, 537, 538, 540, 541, 548, 556, 557, 560, 562, 568, 573, 579, 581, 584, 587, 589, 590, 591, 592, 593], "isn": [53, 54, 56, 400, 401, 403], "present": [53, 54, 56, 400, 401, 403, 526, 570, 582, 590], "values_from_const": [53, 54, 56, 400, 401, 403], "node_def": [53, 54, 56, 400, 401, 403], "extract": [53, 54, 56, 134, 165, 204, 246, 318, 376, 400, 401, 403, 471, 524], "ha": [53, 54, 56, 60, 141, 171, 172, 219, 267, 297, 299, 320, 377, 400, 401, 403, 407, 476, 498, 500, 503, 504, 505, 523, 531, 536, 541, 542, 548, 562, 567, 568, 570, 573, 581, 583, 584, 586, 589, 590, 593], "access": [53, 54, 56, 188, 400, 401, 403, 488, 493, 557, 560, 564], "valid_reshape_input": [53, 54, 400, 401], "reshape_in0_ndef": [53, 54, 400, 401], "reshape_in1_ndef": [53, 54, 400, 401], "ar": [53, 54, 91, 141, 146, 167, 172, 173, 174, 179, 187, 188, 202, 218, 244, 259, 270, 274, 281, 297, 298, 299, 303, 305, 306, 323, 327, 359, 361, 362, 376, 377, 400, 401, 476, 485, 492, 493, 497, 498, 499, 500, 503, 504, 522, 523, 524, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 548, 550, 553, 556, 562, 564, 565, 567, 568, 569, 570, 573, 579, 580, 581, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595], "bypass_reshap": [53, 54, 400, 401], "input_node_map": [53, 54, 400, 401], "input_nam": [53, 54, 88, 128, 188, 263, 264, 336, 400, 401, 473, 531], "get_const_dim_count": [53, 54, 400, 401], "dimens": [53, 54, 91, 195, 218, 236, 259, 400, 401, 472, 524, 527, 587, 592], "instancenorm": [54, 401, 590], "fusedecomposedinoptim": [54, 401], "gelu": [55, 402], "fusegeluoptim": [55, 402], "sqrt": [55, 402, 526], "erf": [55, 402], "layernorm": [56, 403, 590], "fuselayernormoptim": [56, 403], "remap": [56, 141, 403, 476], "smaller": [56, 218, 259, 403, 527, 541, 544, 581, 592], "fusedbatcnormv3": [56, 403], "And": [56, 403, 498, 499, 520, 522, 541, 548, 590], "further": [56, 188, 403, 497, 502, 542, 543, 545, 547, 556, 562, 584], "restrict": [56, 141, 187, 188, 403, 476, 581, 589], "2d": [56, 403, 590], "3d": [56, 403, 582, 590], "kera": [56, 102, 157, 165, 184, 188, 204, 211, 225, 246, 253, 331, 336, 403, 442, 473, 504, 523, 529, 543, 552, 553], "api": [56, 61, 96, 229, 265, 270, 302, 315, 316, 323, 327, 358, 373, 374, 377, 403, 408, 437, 493, 499, 502, 506, 508, 512, 515, 518, 526, 531, 536, 537, 541, 547, 551, 552, 553, 569, 570, 574, 588, 589, 593, 597], "fusepadwithconv2doptim": [57, 404], "excluded_op_nam": [57, 58, 187, 188, 404, 405, 541, 581], "cfg": [57, 58, 146, 316, 374, 404, 405, 485, 504, 505], "itex_qdq_mod": [57, 58, 404, 405], "conv3d": [57, 111, 404, 451], "fusepadwithfp32conv2doptim": [58, 405], "fusetransposereshapeoptim": [59, 406], "cse": [60, 84, 407, 430], "graphcseoptim": [60, 407], "introduc": [60, 407, 503, 504, 505, 533, 541, 584, 587, 588, 590, 594], "ident": [60, 66, 166, 407, 413, 497, 527], "three": [60, 184, 202, 244, 305, 359, 361, 407, 499, 503, 504, 521, 537, 542, 556, 570, 580, 584, 586, 589, 590, 591], "d": [60, 146, 407, 527, 535, 563, 565, 571, 581], "those": [60, 141, 309, 367, 407, 476, 493, 526, 527, 528, 535, 541, 542, 580, 581, 584, 593], "child": [60, 142, 407, 478, 591], "own": [60, 141, 200, 218, 242, 259, 338, 407, 476, 500, 504, 523, 524, 536, 540, 564, 568, 579, 587, 589, 594], "b1": [60, 407], "c1c2": [60, 407], "d1": [60, 407, 493], "c1": [60, 407], "c2": [60, 407], "memori": [60, 146, 265, 289, 294, 302, 338, 407, 493, 521, 523, 528, 541, 542, 544, 545, 579, 581, 584, 585, 587, 590, 593, 596], "bound": [60, 152, 218, 259, 270, 306, 323, 362, 407, 540, 592], "like": [60, 82, 84, 134, 141, 165, 184, 188, 191, 192, 193, 204, 232, 233, 234, 246, 265, 274, 299, 302, 303, 327, 336, 358, 407, 428, 430, 471, 472, 473, 476, 482, 498, 499, 500, 503, 504, 526, 527, 528, 536, 550, 565, 567, 580, 581, 584, 587, 588, 590, 593], "relu": [60, 64, 95, 407, 411, 436, 499, 533, 590, 591], "relu6": [60, 407, 533], "updat": [60, 142, 146, 161, 167, 184, 299, 327, 358, 407, 478, 490, 532, 539, 540, 541, 548, 553, 556, 572, 581, 587, 590, 593, 594], "graphdef": [60, 134, 336, 357, 407, 471, 473, 543], "grappler": [61, 408, 533], "grappleroptim": [61, 408], "input_output_nam": [61, 408], "opt_cfg": [61, 408], "wrapper": [61, 88, 89, 90, 91, 108, 126, 135, 143, 155, 162, 201, 218, 220, 221, 223, 224, 243, 259, 270, 274, 323, 327, 332, 336, 378, 408, 448, 473, 480, 481, 586], "leverag": [61, 408, 488, 500, 502, 527, 531, 545, 562, 580, 584, 587, 593], "built": [61, 157, 176, 189, 190, 194, 198, 202, 203, 208, 210, 212, 213, 214, 215, 218, 223, 225, 230, 231, 235, 238, 240, 244, 245, 250, 252, 254, 255, 256, 257, 259, 303, 327, 330, 338, 358, 408, 482, 500, 503, 524, 529, 541, 555, 559, 579, 584, 589, 592, 593, 595], "convert_add_to_biasadd": [62, 409], "convert_layout": [62, 409], "convert_leakyrelu": [62, 409], "convert_nan_to_random": [62, 409], "convert_placeholder_to_const": [62, 409], "dilated_contract": [62, 409], "dummy_biasadd": [62, 409], "expanddims_optim": [62, 409], "fetch_weight_from_reshap": [62, 409], "fold_batch_norm": [62, 409], "fold_const": [62, 409], "fuse_biasadd_add": [62, 409], "fuse_column_wise_mul": [62, 409], "fuse_conv_with_math": [62, 409], "fuse_decomposed_bn": [62, 409], "fuse_decomposed_in": [62, 409], "fuse_gelu": [62, 409], "fuse_layer_norm": [62, 409], "fuse_pad_with_conv": [62, 409], "fuse_pad_with_fp32_conv": [62, 409], "fuse_reshape_transpos": [62, 409], "graph_cse_optim": [62, 409], "grappler_pass": [62, 409], "insert_print_nod": [62, 409], "move_squeeze_after_relu": [62, 409], "pre_optim": [62, 409], "remove_training_nod": [62, 409], "rename_batch_norm": [62, 409], "split_shared_input": [62, 409], "strip_equivalent_nod": [62, 134, 409, 471], "strip_unused_nod": [62, 134, 409, 471], "switch_optim": [62, 409], "insert": [63, 91, 93, 95, 99, 132, 150, 410, 434, 436, 439, 469, 499, 504, 523, 536, 541, 545, 581, 584, 586, 587, 590, 591], "print": [63, 136, 165, 274, 327, 377, 410, 493, 529, 540, 541, 564, 565, 581, 590, 593], "insertprintminmaxnod": [63, 410], "pre_node_nam": [63, 410], "post_node_nam": [63, 410], "pass": [63, 134, 139, 141, 152, 327, 358, 410, 471, 476, 477, 492, 493, 498, 499, 503, 520, 524, 527, 528, 529, 535, 540, 541, 563, 570, 581, 583, 584, 586, 590, 595], "move": [64, 141, 411, 476, 499, 568, 583, 587, 588], "squeez": [64, 411, 499], "movesqueezeafterreluoptim": [64, 411], "match": [64, 88, 141, 165, 270, 271, 323, 324, 411, 476, 502, 527, 563, 587], "pre": [65, 102, 142, 165, 191, 192, 202, 232, 233, 244, 328, 358, 412, 442, 478, 482, 522, 524, 527, 528, 541, 550, 567, 581, 582, 584, 587, 591, 593], "entranc": [65, 194, 412], "preoptim": [65, 412], "removetrainingnodesoptim": [66, 413], "protected_nod": [66, 413], "types_to_splic": [66, 413], "checknumer": [66, 413], "stopgradi": [66, 413], "renam": [67, 414, 588], "fusedbatchnorm": [67, 414], "fusedbatchnormv2": [67, 414], "renamebatchnormoptim": [67, 414], "splitsharedinputoptim": [68, 415], "equival": [69, 416, 502, 544, 582, 587, 590], "stripequivalentnodesoptim": [69, 416], "output_node_nam": [69, 70, 117, 118, 122, 134, 416, 417, 457, 458, 462, 471], "same": [69, 127, 134, 179, 188, 202, 218, 244, 259, 270, 323, 379, 416, 471, 493, 503, 505, 520, 523, 524, 527, 529, 533, 541, 544, 546, 550, 555, 559, 581, 583, 584, 587, 590, 591, 592, 593], "unus": [70, 134, 417, 471], "stripunusednodesoptim": [70, 417], "input_node_nam": [70, 117, 122, 134, 417, 457, 462, 471], "switch": [71, 418, 545, 591], "switchoptim": [71, 418], "condit": [71, 202, 203, 204, 218, 244, 245, 246, 259, 305, 359, 361, 418, 524, 538, 592, 593], "graphrewriterbas": [72, 419], "abstract": [72, 154, 218, 259, 260, 265, 302, 419, 503, 505, 535], "defin": [72, 136, 165, 167, 172, 173, 174, 179, 180, 181, 182, 187, 188, 191, 192, 232, 233, 277, 278, 280, 281, 282, 289, 294, 297, 298, 299, 301, 328, 358, 419, 482, 492, 497, 500, 503, 504, 523, 524, 527, 528, 533, 536, 540, 541, 563, 580, 581, 584, 587, 589, 590, 591, 593, 595], "interfac": [72, 99, 265, 289, 294, 302, 303, 419, 439, 485, 536, 541, 553, 571, 584, 588], "graph_bas": 73, "freez": [74, 75, 76, 134, 420, 421, 422, 471, 545, 581], "fakequ": [74, 420], "freezefakequantopoptim": [74, 420], "follow": [74, 96, 166, 204, 246, 267, 270, 320, 323, 420, 437, 497, 498, 499, 500, 502, 503, 504, 505, 522, 523, 524, 527, 528, 529, 533, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 555, 559, 564, 566, 567, 570, 575, 580, 581, 583, 584, 587, 590, 591, 593], "freezevaluetransform": [75, 421], "max_min_data": [75, 76, 421, 422], "postfix": [75, 76, 421, 422], "tensor_data": [75, 421, 493, 494], "th": [75, 76, 421, 422], "gpu": [75, 76, 83, 141, 187, 188, 421, 422, 429, 476, 502, 520, 536, 541, 542, 547, 553, 562, 583, 584, 585], "freezevaluewithoutcalibtransform": [76, 422], "95": [76, 274, 327, 422, 540, 596], "quantizedconv": [77, 78, 423, 424], "quantizeddeconv": [77, 423], "redund": [77, 79, 423, 425], "fuseconvredundantdequantizetransform": [77, 423], "cpu": [77, 78, 79, 80, 140, 141, 146, 187, 188, 423, 424, 425, 426, 476, 480, 488, 493, 502, 504, 520, 521, 536, 541, 542, 545, 547, 553, 562, 570, 582, 583, 584, 585, 586, 587, 591], "_quantizedconv": [77, 423], "_quantizeddeconv": [77, 423], "successor": [77, 78, 79, 80, 423, 424, 425, 426], "requant": [78, 80, 424, 426, 591], "fuseconvrequantizetransform": [78, 424], "quantizedmatmul": [79, 80, 425, 426], "fusematmulredundantdequantizetransform": [79, 425], "_quantizedmatmul": [79, 80, 425, 426], "fusematmulrequantizedequantizetransform": [80, 426], "quantizedmatmulwithbiasanddequant": [80, 426], "fusematmulrequantizetransform": [80, 426], "fusematmulrequantizedequantizenewapitransform": [80, 426], "fusematmulrequantizenewapitransform": [80, 426], "newapi": [80, 426], "freeze_fake_qu": [81, 427], "freeze_valu": [81, 427], "freeze_value_without_calib": [81, 427], "fuse_conv_redundant_dequant": [81, 427], "fuse_conv_requant": [81, 427], "fuse_matmul_redundant_dequant": [81, 427], "fuse_matmul_requant": [81, 427], "meta_op_optim": [81, 427], "post_hostconst_convert": [81, 427], "post_quantized_op_cs": [81, 427], "rnn_convert": [81, 427], "scale_propag": [81, 427], "meta": [82, 428, 502, 539, 582, 596], "metainfochangingmemopoptim": [82, 428], "metaop": [82, 428], "With": [82, 338, 428, 499, 503, 505, 523, 541, 550, 555, 559, 563, 569, 579, 581, 582, 589, 590, 593, 596], "better": [82, 187, 188, 191, 192, 232, 233, 281, 328, 358, 428, 482, 522, 528, 540, 542, 581, 582, 584, 587, 589, 590, 593], "perform": [82, 126, 152, 181, 187, 188, 202, 214, 219, 244, 256, 265, 289, 294, 302, 309, 327, 338, 358, 363, 367, 378, 428, 498, 499, 500, 503, 504, 520, 524, 525, 526, 528, 530, 531, 536, 537, 540, 541, 542, 543, 545, 547, 551, 553, 556, 562, 568, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 595, 596], "hostconst": [83, 429], "posthostconstconvert": [83, 429], "just": [83, 193, 216, 218, 221, 223, 224, 226, 234, 259, 338, 429, 472, 500, 541, 552, 556, 562, 570, 580, 584, 590, 592, 593], "postcseoptim": [84, 430], "duplic": [84, 94, 306, 362, 430, 435], "quantizev2": [84, 430], "decreas": [84, 430, 567, 581], "size": [84, 169, 170, 195, 196, 201, 204, 210, 214, 218, 236, 237, 243, 246, 252, 256, 259, 297, 336, 338, 430, 472, 473, 493, 497, 504, 523, 524, 529, 532, 541, 544, 562, 563, 579, 581, 584, 585, 587, 590, 592, 595, 596], "rnn": [85, 431], "quantizedrnnconvert": [85, 431], "calibration_data": [85, 93, 431, 434], "rnn_detail": [85, 431], "scalepropagationtransform": [86, 432], "direct": [86, 171, 297, 432, 581], "export": [87, 188, 266, 270, 323, 502, 534, 548, 563, 565, 591, 594], "onnx_graph": 87, "onnx_schema": 87, "tf2onnx_util": 87, "onnxgraph": 88, "output_shap": 88, "extra_opset": 88, "output_nam": [88, 128, 188, 263, 264, 336, 473, 531], "is_subgraph": 88, "graph_nam": 88, "manipul": [88, 89], "onnxnod": 89, "skip_convers": 89, "schema": 90, "onnxopschema": 90, "domain": [90, 91, 187, 188, 581, 593], "since_vers": 90, "get_schema": 90, "max_inclusive_opset_vers": 90, "within": [90, 173, 174, 179, 186, 265, 270, 302, 323, 336, 353, 357, 473, 497, 499, 505, 521, 542, 555, 559, 562, 570, 581, 582, 590, 593], "get_max_supported_opset_vers": 90, "packag": [90, 502, 503, 522, 532, 537, 562, 563, 582, 588, 593], "set_nam": 91, "find_opset": 91, "assert_error": 91, "bool_val": 91, "error_msg": 91, "messag": [91, 132, 469, 498, 570, 571, 575, 576, 577, 593], "map_numpy_to_onnx_dtyp": 91, "np_dtype": 91, "map_onnx_to_numpy_typ": 91, "onnx_typ": 91, "add_port_to_nam": 91, "nr": 91, "get_tensorflow_node_attr": 91, "pars": [91, 134, 146, 202, 203, 214, 218, 244, 245, 256, 259, 345, 346, 349, 471, 504, 505, 592], "get_tensorflow_tensor_shap": 91, "get_tensorflow_node_shape_attr": 91, "attr": [91, 134, 165, 471], "map_tensorflow_dtyp": 91, "get_tensorflow_tensor_data": 91, "convert_tensorflow_tensor_to_onnx": 91, "read_tensorflow_node_attr": 91, "read": [91, 134, 141, 207, 218, 249, 259, 298, 471, 476, 524, 586, 589], "infer_onnx_shape_dtyp": 91, "opset_vers": [91, 128, 188, 263, 264, 531], "input_shap": [91, 206, 248, 472, 524], "input_dtyp": 91, "sometim": [91, 499, 526, 584], "make_onnx_shap": 91, "seqtyp": 91, "tensor_dtyp": 91, "around": 91, "signifi": 91, "make_onnx_inputs_output": 91, "elem_typ": 91, "text": [91, 180, 217, 218, 258, 259, 267, 272, 300, 320, 325, 531, 538, 544, 551, 573, 576, 577, 581, 582, 587, 590, 592, 596], "datatyp": [91, 146, 586, 593, 596], "save_protobuf": 91, "path": [91, 126, 134, 142, 146, 165, 180, 184, 202, 203, 204, 218, 244, 245, 246, 259, 260, 263, 264, 265, 276, 277, 278, 280, 289, 294, 298, 300, 302, 303, 316, 328, 336, 340, 357, 358, 374, 378, 471, 473, 478, 488, 490, 493, 499, 500, 503, 524, 526, 529, 535, 540, 541, 542, 543, 548, 551, 562, 565, 567, 570, 575, 576, 577, 580, 587, 592, 595], "as_text": 91, "save": [91, 134, 140, 141, 162, 184, 187, 188, 204, 246, 263, 264, 303, 336, 358, 471, 473, 476, 482, 483, 488, 493, 499, 503, 535, 541, 542, 543, 546, 550, 555, 559, 565, 570, 575, 576, 577, 580, 584, 585, 587, 590], "protobuf": [91, 336, 473, 565], "file": [91, 134, 139, 141, 142, 146, 149, 158, 180, 184, 187, 188, 191, 192, 202, 203, 204, 207, 217, 218, 224, 227, 232, 233, 244, 245, 246, 249, 258, 259, 260, 265, 270, 276, 277, 278, 280, 289, 294, 298, 300, 302, 303, 323, 328, 338, 345, 346, 349, 358, 471, 476, 477, 478, 492, 493, 498, 500, 503, 504, 505, 529, 532, 535, 538, 540, 541, 543, 548, 557, 560, 561, 562, 563, 565, 566, 567, 568, 570, 571, 575, 576, 577, 579, 583, 584, 587, 591, 592], "is_onnx_domain": 91, "is_list_or_tupl": 91, "are_shapes_equ": 91, "src": [91, 563], "dest": 91, "equal": [91, 129, 134, 151, 377, 466, 493, 544, 581, 587], "get_subgraphs_from_onnx": 91, "model_proto": 91, "over": [91, 141, 204, 246, 274, 327, 476, 504, 530, 534, 536, 540, 553, 562, 568, 572, 581, 583, 590, 593], "df": 91, "initialize_name_count": 91, "avoid": [91, 141, 146, 202, 244, 476, 499, 522, 591], "conflict": [91, 522, 532], "counter": 91, "make_nam": 91, "get_index_from_strided_slice_of_shap": 91, "outputs_to_valu": 91, "stride": [91, 218, 259, 592], "slice": 91, "compute_const_folding_using_tf": 91, "g": [91, 141, 167, 187, 188, 476, 498, 527, 530, 534, 545, 550, 581, 587, 588, 590, 593], "const_node_valu": 91, "graph_output": 91, "constant": [91, 264, 306, 314, 362, 372, 486, 522, 523, 533, 565, 592], "tf": [91, 102, 127, 134, 165, 184, 201, 202, 203, 204, 218, 243, 244, 245, 246, 259, 334, 336, 379, 442, 471, 472, 473, 474, 522, 529, 537, 543, 582, 586, 592], "insert_qdq_pattern": [92, 433], "merge_duplicated_qdq": [92, 433], "share_qdq_y_pattern": [92, 433], "generategraphwithqdqpattern": [93, 434], "op_wise_config": [93, 117, 122, 434, 457, 462, 504], "quantized_nod": [93, 434], "llm_weight_minmax": [93, 434], "dq": [93, 95, 117, 434, 436, 457, 590], "pair": [93, 187, 188, 434, 504, 523, 541, 542, 588], "befor": [93, 95, 150, 167, 172, 174, 179, 180, 182, 187, 188, 202, 244, 297, 299, 301, 434, 436, 498, 505, 523, 524, 527, 528, 529, 532, 533, 537, 541, 557, 560, 566, 567, 584, 587, 589, 591, 593], "merg": [94, 195, 236, 316, 374, 435, 472, 557, 560, 591, 593], "mergeduplicatedqdqoptim": [94, 435], "y": [95, 187, 188, 218, 259, 306, 362, 436, 522, 526, 532, 548, 590, 592], "shareqdqforitexypatternoptim": [95, 436], "break": [95, 436, 529, 541], "graphanalyz": [96, 437], "extend_engin": [96, 437], "analyz": [96, 165, 336, 437, 473, 589, 590, 591], "implement": [96, 129, 133, 141, 191, 192, 197, 200, 201, 202, 204, 232, 233, 239, 242, 243, 244, 246, 267, 320, 328, 338, 358, 365, 437, 466, 470, 476, 482, 505, 523, 524, 540, 541, 553, 563, 581, 584, 587, 588, 591, 593, 595], "under": [96, 187, 188, 204, 246, 437, 488, 492, 498, 500, 502, 524, 538, 540, 541, 545, 550, 551, 562, 570, 580, 581, 582, 585, 587, 591, 593], "singleton": [96, 437, 493], "specifi": [96, 141, 146, 152, 184, 187, 188, 191, 192, 218, 219, 232, 233, 259, 265, 270, 274, 276, 277, 280, 289, 294, 302, 303, 323, 327, 328, 358, 377, 437, 476, 482, 492, 493, 504, 505, 529, 533, 540, 541, 550, 564, 570, 574, 575, 576, 577, 579, 581, 583, 587, 592, 593, 595], "graphrewriterhelp": [96, 437], "encapsul": [96, 191, 192, 232, 233, 328, 358, 437, 482, 543], "graph_rewrit": 97, "quantize_graph": 97, "transform_graph": 97, "graph_convert": 97, "graph_converter_without_calib": 97, "graph_util": 97, "quantize_graph_common": 97, "smooth_quant_calibr": 97, "smooth_quant_scal": 97, "tf2onnx_convert": 97, "qat": [98, 145, 188, 276, 336, 438, 473, 528, 529, 536, 541, 584], "quantize_graph_bas": [98, 438], "quantize_graph_bn": [98, 438], "quantize_graph_concatv2": [98, 438], "quantize_graph_conv": [98, 438], "quantize_graph_for_intel_cpu": [98, 438], "quantize_graph_matmul": [98, 438], "quantize_graph_pool": [98, 438], "fakequantizebas": [99, 439], "abc": [99, 272, 325, 439, 503, 591, 593], "fakequant": [99, 439], "per_channel": [99, 439, 504, 505, 533, 584, 595], "8": [99, 141, 187, 188, 217, 258, 439, 476, 499, 504, 521, 522, 533, 537, 544, 569, 570, 581, 582, 587, 590, 593, 596], "channel_axi": [99, 148, 151, 439], "symmetr": [99, 439, 488, 505, 584, 587, 592, 593], "narrow_rang": [99, 439], "quantize_lay": [100, 440], "fake_quant": [100, 440], "quantize_config": [100, 440, 504], "quantize_help": [100, 440], "quantize_wrapp": [100, 440], "quantizeconfig": [101, 102, 441, 442], "custom": [101, 139, 146, 152, 188, 303, 327, 338, 441, 477, 492, 520, 527, 528, 545, 568, 569, 570, 574, 576, 577, 581, 582, 587, 589], "There": [101, 303, 305, 359, 361, 441, 522, 526, 527, 533, 536, 541, 545, 567, 569, 570, 587, 590, 593, 595], "instanc": [101, 102, 152, 187, 188, 191, 192, 219, 232, 233, 271, 272, 274, 277, 280, 283, 284, 286, 287, 288, 306, 318, 324, 325, 327, 328, 358, 362, 376, 441, 442, 482, 490, 493, 497, 498, 499, 503, 520, 541, 547, 553, 587, 593, 595, 596], "global": [101, 167, 187, 188, 283, 284, 286, 287, 288, 297, 376, 441, 493, 499, 541, 581, 583, 593], "class": [102, 139, 146, 162, 168, 175, 208, 250, 281, 328, 358, 442, 477, 499, 500, 504, 522, 523, 524, 527, 540, 541, 553, 579, 580, 584, 588, 591, 593, 595], "init_quantize_config": [102, 442], "quantize_recip": [102, 442], "begin": [102, 173, 174, 179, 299, 442, 522, 523, 527, 528, 541, 581, 593], "process": [102, 126, 136, 152, 153, 167, 172, 173, 174, 180, 182, 184, 187, 188, 191, 192, 202, 203, 204, 214, 218, 219, 232, 233, 244, 245, 246, 256, 259, 297, 299, 301, 305, 306, 328, 358, 359, 361, 362, 378, 442, 482, 492, 493, 500, 503, 504, 505, 521, 523, 524, 527, 528, 529, 531, 541, 544, 546, 567, 569, 570, 572, 580, 581, 584, 585, 587, 590, 591, 592, 595], "model_nam": [102, 187, 188, 442, 502], "special": [102, 141, 165, 338, 442, 476, 499, 523, 540, 541, 579, 581, 587, 594], "decid": [102, 187, 188, 268, 299, 321, 442, 503, 504, 541, 584, 588, 593], "qat_clone_funct": [102, 442], "leav": [102, 442, 556], "quantizewrapp": [102, 108, 442, 448], "wrapped_lay": [102, 442], "optimize_lay": [103, 443], "quantize_layer_add": [103, 443], "quantize_layer_bas": [103, 443], "quantize_layer_bn": [103, 443], "config_quantizable_lay": [104, 444], "quantizelayeradd": [105, 445], "quantizelay": [106, 446], "quantizelayerbas": [106, 446], "quantizelayerbatchnorm": [107, 447], "quantizewrapperbas": [108, 448], "fusedbatchnormv3": [109, 119, 449, 459], "fusenodestartwithfusedbatchnormv3": [109, 119, 449, 459], "_quantizedfusedbatchnorm": [109, 449], "concatv2": [110, 120, 133, 450, 460, 470, 533], "fusenodestartwithconcatv2": [110, 120, 450, 460], "quantizedconcatv2": [110, 120, 450, 460], "fusenodestartwithconv2d": [111, 121, 451, 461], "conv2dbackpropinput": [112, 452], "conv3dbackpropinputv2": [112, 452], "fusenodestartwithdeconv2d": [112, 452], "fusedinstancenorm": [113, 453], "fusenodestartwithfusedinstancenorm": [113, 453], "batchmatmul": [114, 454], "batchmatmulv2": [114, 454], "fusenodestartwithmatmul": [114, 123, 454, 463], "avgpool": [115, 124, 455, 464, 533], "fusenodestartwithpool": [115, 124, 455, 464], "fuse_qdq_bn": [116, 456], "fuse_qdq_concatv2": [116, 456], "fuse_qdq_conv": [116, 456], "fuse_qdq_deconv": [116, 456], "fuse_qdq_in": [116, 456], "fuse_qdq_matmul": [116, 456], "fuse_qdq_pool": [116, 456], "optimize_qdq": [116, 456], "optimizeqdqgraph": [117, 457], "input_graph": [117, 122, 129, 354, 357, 457, 462, 466, 503], "op_wise_sequ": [117, 122, 457, 462], "quantizegraph": [118, 458], "quantizegraphbas": [118, 458], "quantizenodebas": [118, 458], "quantizegraphforintel": [122, 462], "common": [125, 139, 141, 188, 216, 266, 276, 280, 281, 282, 465, 476, 477, 485, 497, 522, 524, 528, 529, 531, 535, 537, 541, 584, 590], "herlper": [125, 465], "quantizegraphhelp": [125, 465], "sever": [125, 182, 218, 259, 301, 303, 465, 500, 526, 527, 528, 536, 541, 542, 544, 555, 559, 570, 581, 583, 585, 590, 592, 593, 595], "staticmethod": [125, 465], "function": [125, 126, 139, 153, 173, 174, 179, 187, 188, 191, 192, 203, 232, 233, 245, 277, 280, 289, 294, 340, 378, 465, 477, 486, 498, 499, 500, 503, 504, 505, 520, 523, 527, 528, 531, 535, 536, 537, 539, 540, 541, 542, 553, 563, 569, 570, 581, 584, 587, 588, 589, 590, 591, 593, 594], "smoothquantcalibr": [126, 378], "dataset": [126, 127, 146, 180, 191, 192, 193, 195, 196, 198, 199, 200, 201, 213, 221, 232, 233, 234, 236, 237, 240, 241, 242, 243, 255, 270, 271, 272, 274, 303, 323, 324, 325, 327, 328, 358, 378, 379, 472, 482, 485, 500, 502, 503, 504, 523, 529, 534, 540, 541, 550, 564, 565, 575, 581, 584, 587, 588, 590, 593, 595, 596], "outlier": [126, 378, 504, 521, 526, 567, 587, 590], "smoothquantcalibrationllm": [126, 378], "model_path": [126, 134, 378, 471, 526, 575], "temp_path": [126, 378], "weight_name_map": [126, 378], "llm": [126, 127, 378, 379, 544, 581, 582, 585, 587, 590], "eval_func": [126, 191, 192, 232, 233, 303, 304, 306, 309, 310, 312, 328, 358, 359, 360, 362, 363, 367, 368, 370, 377, 378, 482, 499, 523, 524, 526, 527, 528, 529, 541, 565, 584, 585, 586, 587, 593, 595], "temporari": [126, 146, 378, 493, 497], "store": [126, 161, 162, 165, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 187, 188, 204, 246, 292, 299, 378, 535], "median": [126, 378], "autotrack": [126, 134, 378, 471], "smoothquantscal": [127, 379], "alpha": [127, 140, 143, 150, 161, 181, 379, 481, 522, 584, 593], "scales_per_op": [127, 379], "each": [127, 134, 136, 141, 146, 184, 187, 188, 200, 204, 207, 214, 218, 242, 246, 249, 256, 259, 268, 270, 271, 272, 309, 321, 323, 324, 325, 367, 379, 471, 472, 476, 493, 498, 503, 504, 505, 522, 524, 526, 527, 528, 533, 541, 547, 553, 556, 562, 570, 572, 579, 581, 585, 587, 589, 591, 592, 593, 594], "individu": [127, 167, 297, 353, 357, 379, 497, 570, 581, 590], "smoothquantscalerllm": [127, 379], "tensorflowqdqtoonnxqdqconvert": 128, "shape_overrid": 128, "inputs_as_nchw": [128, 263], "default_opset_vers": 128, "bia": [129, 187, 188, 466, 587, 591], "correct": [129, 151, 184, 187, 188, 270, 271, 272, 274, 298, 323, 324, 325, 327, 466, 497, 545], "biascorrect": [129, 466], "fp32_graph": [129, 466], "weight_empir": [129, 466], "Will": [129, 466, 527, 536], "our": [129, 146, 187, 188, 466, 500, 502, 531, 541, 544, 563, 564, 567, 589, 594], "task": [129, 202, 209, 244, 251, 274, 327, 466, 524, 527, 528, 531, 536, 540, 541, 565, 569, 572, 581, 585, 587, 590, 596], "close": [129, 151, 466, 521, 571], "w_int8": [129, 151, 466], "u": [129, 151, 466, 545, 564, 569], "w_fp32": [129, 151, 466], "varianc": [129, 151, 466, 526], "differ": [129, 147, 151, 155, 176, 187, 188, 196, 204, 218, 220, 237, 246, 259, 265, 274, 280, 282, 291, 302, 327, 336, 338, 466, 473, 487, 497, 499, 500, 504, 523, 524, 526, 527, 529, 530, 535, 536, 540, 541, 543, 555, 559, 564, 567, 570, 579, 581, 584, 587, 590, 591, 592, 593], "wise": [129, 138, 140, 142, 151, 187, 188, 306, 309, 362, 363, 367, 466, 475, 478, 502, 504, 536, 567, 581, 587, 590, 591, 593, 594, 595], "minim": [129, 151, 306, 362, 466, 504, 505, 521, 527, 530, 540, 541, 555, 559, 581, 584, 593], "scale_c": [129, 151, 466], "shift": [129, 151, 214, 256, 466, 563, 592], "notic": [129, 151, 219, 466, 538, 542, 565, 588], "first": [129, 141, 146, 151, 166, 187, 188, 202, 244, 270, 316, 323, 363, 374, 466, 476, 493, 499, 500, 502, 503, 504, 505, 524, 526, 537, 542, 544, 547, 556, 557, 560, 563, 565, 566, 567, 583, 584, 586, 587, 589, 590, 591, 593, 595], "empir": [129, 151, 466], "solut": [129, 151, 466, 502, 503, 504, 532, 547, 551, 556, 582, 587, 588, 590, 593, 594], "don": [129, 151, 167, 187, 188, 466, 499, 568, 581, 593], "min": [129, 151, 188, 466, 493, 526, 544, 565, 567, 581, 584, 587, 590, 592, 593], "graphtransform": [130, 467], "graphtransformbas": [130, 467], "input_pb": [130, 132, 133, 467, 469, 470], "bias_correct": [131, 468], "graph_transform_bas": [131, 468], "insert_log": [131, 468], "rerange_quantized_concat": [131, 468], "log": [132, 152, 153, 165, 345, 346, 349, 469, 489, 499, 553, 575, 576, 577, 589, 591, 593], "insertlog": [132, 469], "node_name_list": [132, 469], "show_nam": [132, 469], "show_op": [132, 469], "first_n": [132, 469], "summar": [132, 469, 522, 527], "1024": [132, 204, 246, 469, 548], "dump_fp32": [132, 469], "rerang": [133, 470], "rerangequantizedconcat": [133, 470], "rerange_quant": [133, 470], "version1_lt_version2": [134, 493], "version1": [134, 493], "version2": [134, 493], "version1_gt_version2": [134, 493], "greater": [134, 493, 575, 581, 593], "version1_eq_version2": [134, 493], "version1_gte_version2": [134, 493], "version1_lte_version2": [134, 493], "disable_random": 134, "seed": [134, 187, 188, 282, 493, 541, 595], "disabl": [134, 187, 188, 497, 562, 567, 586, 587, 590], "read_graph": [134, 471], "in_graph": [134, 471], "in_graph_is_binari": [134, 471], "write_graph": [134, 471], "out_graph_def": [134, 471], "out_graph_fil": [134, 471], "write": [134, 211, 253, 471, 493, 529, 535, 541, 545, 591], "is_ckpt_format": [134, 471], "ckpt": [134, 328, 336, 358, 471, 473, 596], "folder": [134, 204, 209, 246, 251, 328, 358, 471, 492, 524, 550, 555, 559, 568, 575, 576, 577, 587, 591], "prefix": [134, 135, 141, 142, 145, 146, 152, 471, 476, 478, 545, 550, 591], "is_saved_model_format": [134, 471], "saved_model": [134, 276, 471, 585], "get_estimator_graph": [134, 471], "estim": [134, 274, 327, 336, 471, 473, 593], "input_fn": [134, 336, 471, 473], "get_tensor_by_nam": [134, 471], "try_cnt": [134, 471], "import": [134, 152, 187, 188, 276, 328, 338, 358, 377, 471, 482, 493, 499, 500, 502, 505, 520, 523, 524, 526, 527, 528, 529, 531, 534, 540, 541, 542, 543, 544, 545, 549, 551, 564, 565, 573, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594], "scope": [134, 471, 498, 504, 541], "onc": [134, 141, 157, 182, 225, 301, 305, 359, 361, 471, 476, 504, 505, 523, 562, 568, 581, 582, 593, 596], "both": [134, 188, 471, 497, 500, 503, 528, 541, 546, 565, 567, 569, 581, 583, 584, 587, 590, 593], "compat": [134, 336, 471, 473, 498, 529, 543, 557, 560, 562, 581, 588], "v1": [134, 214, 256, 271, 272, 274, 324, 325, 327, 336, 471, 473, 529, 531, 532, 540, 543, 566, 581, 588, 589, 590, 596], "suffix": [134, 471], "time": [134, 141, 187, 188, 218, 259, 274, 306, 327, 338, 362, 471, 476, 493, 504, 523, 526, 529, 532, 541, 550, 552, 555, 559, 562, 563, 568, 571, 575, 576, 579, 581, 582, 584, 587, 589, 590, 591, 592, 593], "got": [134, 471, 504, 532, 591], "iterator_sess_run": [134, 471], "sess": [134, 336, 471, 473], "iter_op": [134, 471], "feed_dict": [134, 201, 243, 471], "output_tensor": [134, 336, 471, 473], "measur": [134, 219, 328, 471, 487, 500, 503, 520, 526, 527, 540, 541, 587, 591, 593], "integr": [134, 155, 220, 471, 503, 541, 563, 564, 569, 587], "makeiter": [134, 471], "feed": [134, 201, 243, 471, 527, 581], "end": [134, 172, 173, 174, 179, 187, 188, 202, 217, 218, 244, 258, 259, 299, 305, 359, 361, 471, 503, 504, 505, 527, 528, 533, 537, 541, 556, 572, 579, 581, 591, 592, 593], "predict": [134, 218, 223, 259, 267, 271, 272, 274, 320, 324, 325, 327, 358, 471, 500, 527, 540, 553, 587, 590, 591, 592], "pred": [134, 274, 327, 471, 540], "collate_tf_pr": [134, 471], "collat": [134, 146, 471], "get_input_output_node_nam": [134, 471], "fix_ref_type_of_graph_def": [134, 471], "fix": [134, 177, 179, 202, 244, 299, 471, 523, 524, 549, 581, 584, 587, 593], "strip_unused_lib": [134, 471], "offici": [134, 267, 271, 272, 320, 324, 325, 471, 497, 590], "r1": [134, 471], "15": [134, 471, 533, 537, 576], "branch": [134, 471, 498], "get_graph_def": [134, 471], "auto_input_output": [134, 471], "get_model_input_shap": [134, 471], "get_tensor_val_from_graph_nod": [134, 471], "graph_node_name_map": [134, 471], "kei": [134, 136, 141, 142, 165, 176, 184, 187, 188, 281, 298, 336, 377, 471, 473, 476, 478, 483, 485, 493, 502, 504, 564, 565, 571, 582, 587, 591, 593], "val": [134, 184, 204, 207, 246, 249, 298, 471, 526, 541, 567], "tensor_v": [134, 471], "int8_node_name_revers": [134, 471], "revers": [134, 471, 565], "tf_diagnosis_help": 134, "fp32_model": [134, 136, 146, 264, 493, 503, 585, 587], "quan_model": 134, "save_path": [134, 263, 264, 503, 543], "diagnosi": [134, 187, 188, 541, 565, 566, 567, 582, 588, 594], "generate_feed_dict": [134, 471], "input_tensor": [134, 336, 471, 473], "get_weight_from_input_tensor": [134, 471], "input_tensor_nam": [134, 336, 471, 473], "associ": [134, 141, 270, 323, 471, 476], "search": [134, 165, 179, 188, 191, 192, 232, 233, 265, 267, 277, 280, 281, 282, 302, 306, 320, 362, 471, 493, 502, 522, 536, 540, 545, 546, 556, 581, 582, 587, 590, 591, 593, 594], "look": [134, 176, 471, 503, 505, 533, 540, 564, 565, 567, 590, 595], "sq_weight_tensor": [134, 471], "sq_weights_nod": [134, 471], "two": [134, 136, 141, 152, 166, 171, 178, 182, 204, 209, 219, 246, 251, 270, 297, 301, 303, 310, 323, 368, 471, 476, 493, 498, 499, 500, 522, 523, 524, 527, 529, 531, 533, 541, 542, 544, 569, 570, 572, 581, 584, 586, 587, 589, 590, 593, 595], "apply_inlin": [134, 471], "func": [134, 146, 471, 493, 584, 595], "inlin": [134, 471, 545, 550, 553], "definit": [134, 143, 196, 200, 237, 242, 471, 481], "concret": [134, 471, 593], "new_graph_def": [134, 471], "construct_function_from_graph_def": [134, 471], "frozen_func": [134, 471], "rebuild": [134, 471, 546, 555, 559], "reconstruct": [134, 471, 582], "new_func": [134, 471], "parse_saved_model": [134, 471], "output_tensor_nam": [134, 336, 471, 473], "_saved_model": [134, 471], "load": [134, 139, 141, 142, 202, 217, 218, 244, 258, 259, 328, 336, 358, 471, 473, 475, 477, 478, 492, 493, 504, 523, 555, 559, 563, 565, 583, 584, 585, 590], "reconstruct_saved_model": [134, 471], "trackabl": [134, 471], "destin": [134, 262, 276, 471], "torch": [135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 150, 162, 165, 166, 168, 176, 187, 188, 264, 328, 358, 488, 492, 499, 502, 505, 506, 527, 529, 531, 541, 542, 543, 544, 545, 550, 553, 565, 584, 587, 590, 591], "bf16modulewrapp": 135, "bf16modul": 135, "mix": [135, 187, 188, 304, 316, 328, 360, 374, 502, 503, 510, 536, 545, 551, 552, 553, 594], "precis": [135, 187, 188, 191, 192, 232, 233, 265, 272, 274, 275, 302, 304, 316, 325, 327, 328, 338, 360, 363, 374, 380, 479, 480, 493, 502, 503, 504, 510, 520, 521, 528, 529, 533, 536, 544, 545, 551, 552, 553, 582, 583, 584, 587, 590, 593, 594], "mixed_precision_model": 135, "bf16_symbolic_trac": 135, "fx_sub_module_list": 135, "trace": [135, 136, 145, 146, 165, 187, 188, 264, 365, 499, 552, 593], "_description_": 135, "node_collector": 136, "hook": [136, 154, 158, 176, 227, 228, 289, 294, 485, 527, 528, 541, 581, 590, 591], "record": [136, 146, 155, 158, 202, 203, 204, 210, 220, 227, 244, 245, 246, 252, 493, 524, 567, 587, 589, 591, 593], "hessiantrac": 136, "q_model": [136, 140, 188, 276, 358, 499, 523, 524, 526, 529, 531, 534, 535, 540, 541, 543, 564, 565, 584, 585, 586, 587], "criterion": [136, 154, 156, 157, 161, 167, 172, 173, 174, 176, 179, 183, 187, 188, 222, 225, 527, 528, 541, 581, 584, 590, 593, 595], "yao": 136, "zhewei": 136, "et": [136, 521, 544, 587, 590], "al": [136, 521, 544, 587, 590], "pyhessian": 136, "network": [136, 161, 167, 168, 299, 365, 500, 521, 527, 528, 531, 541, 544, 564, 582, 584, 590, 593], "through": [136, 191, 192, 232, 233, 327, 328, 358, 502, 520, 533, 535, 536, 540, 548, 569, 579, 580, 581, 583, 584, 587], "len": [136, 188, 218, 259, 524, 529, 592], "2020": [136, 544], "ieee": [136, 542, 590], "intern": [136, 200, 242, 316, 374, 472, 523, 524, 540, 581], "confer": [136, 581, 590], "big": [136, 526, 587], "dong": 136, "zhen": 136, "hawq": [136, 365, 593], "v2": [136, 365, 523, 529, 531, 532, 537, 539, 551, 588, 590, 593, 594, 596], "advanc": [136, 187, 188, 497, 502, 504, 510, 539, 544, 581, 584, 587, 595], "system": [136, 141, 152, 219, 476, 493, 520, 544, 548, 581, 596], "33": [136, 539, 544, 596], "18518": 136, "18529": 136, "openvinotoolkit": 136, "nncf": 136, "develop": [136, 338, 498, 499, 522, 537, 541, 542, 544, 545, 551, 562, 568, 581, 582, 586, 589], "hessian_trac": 136, "compare_weight": 136, "float_dict": 136, "ani": [136, 141, 270, 272, 315, 323, 325, 353, 357, 373, 377, 476, 490, 493, 497, 502, 505, 522, 529, 545, 550, 563, 564, 568, 569, 581, 589, 593], "quantized_dict": 136, "compar": [136, 274, 327, 493, 528, 540, 544, 565, 581, 584, 587, 589, 591, 593], "being": [136, 270, 323, 505, 570], "wt_compare_dict": 136, "float_model": [136, 502], "state_dict": [136, 529, 587, 591], "qmodel": 136, "compute_error": 136, "state": [136, 166, 505, 548, 581], "weight_dict": 136, "hawq_top": 136, "enable_act": 136, "modul": [137, 138, 162, 168, 175, 279, 285, 295, 296, 475, 499, 522, 523, 527, 536, 540, 541, 543, 581, 583, 586, 587, 591, 594], "layer_wise_qu": [137, 188, 585], "hawq_metr": 137, "pattern_detector": 137, "symbolic_trac": 137, "modified_pickl": [138, 475], "torch_load": 138, "portabl": [139, 477], "serial": [139, 141, 476, 477], "see": [139, 218, 259, 267, 320, 477, 497, 498, 499, 501, 522, 538, 541, 555, 556, 559, 562, 563, 567, 568, 587, 590, 591, 593], "copyreg": [139, 477], "mechan": [139, 161, 477, 581, 589, 594], "pickler": [139, 477], "pickletool": [139, 477], "extens": [139, 141, 476, 477, 493, 500, 502, 503, 522, 533, 536, 537, 539, 541, 542, 543, 546, 551, 552, 553, 557, 560, 561, 565, 581, 582, 584, 587, 590, 593, 594, 595], "comment": [139, 477, 497, 504, 524, 540, 541, 587, 592], "unpickl": [139, 141, 476, 477], "misc": [139, 477, 538], "format_vers": [139, 477], "compatible_format": [139, 477], "pickleerror": [139, 477], "pickl": [139, 141, 476, 477], "picklingerror": [139, 477], "unpicklingerror": [139, 477], "problem": [139, 202, 244, 274, 327, 477, 540, 542, 563], "secur": [139, 477, 502, 564, 582, 597], "violat": [139, 477], "also": [139, 166, 201, 204, 218, 243, 246, 259, 267, 320, 327, 338, 358, 477, 498, 500, 503, 504, 505, 523, 526, 530, 534, 536, 540, 541, 545, 550, 555, 556, 559, 562, 563, 564, 567, 568, 579, 581, 582, 584, 586, 587, 590, 593], "includ": [139, 155, 161, 165, 167, 181, 183, 187, 188, 202, 204, 211, 218, 220, 244, 246, 253, 259, 265, 275, 297, 302, 377, 477, 493, 497, 503, 504, 505, 523, 524, 526, 537, 538, 539, 540, 541, 545, 548, 551, 556, 568, 572, 575, 576, 577, 581, 584, 586, 587, 591, 593], "necessarili": [139, 477], "limit": [139, 306, 362, 477, 493, 502, 526, 527, 539, 544, 584, 587, 588, 591], "attributeerror": [139, 377, 477], "eoferror": [139, 477], "importerror": [139, 477, 532], "indexerror": [139, 477], "layerwisequ": 140, "pretrained_model_name_or_path": [140, 142, 478], "op_cfg": 140, "output_dir": [140, 488, 541, 550, 551, 566, 567, 573, 576, 577], "5": [140, 150, 155, 187, 188, 206, 214, 220, 248, 256, 274, 327, 358, 503, 524, 531, 533, 537, 540, 541, 567, 572, 575, 576, 581, 583, 584, 587, 590, 592, 593, 595, 596], "order": [140, 146, 267, 268, 303, 306, 309, 318, 320, 321, 362, 367, 376, 499, 526, 540, 565, 583, 587, 590, 591, 593], "memomeri": 140, "f": [141, 162, 476, 522, 527, 529, 584, 587, 590], "file_lik": [141, 476], "map_loc": [141, 476], "pickle_modul": [141, 162, 476], "weights_onli": [141, 476], "pickle_load_arg": [141, 476], "facil": [141, 476], "treat": [141, 476, 523], "storag": [141, 476, 534, 540, 564, 567, 587, 590], "thei": [141, 219, 377, 476, 497, 522, 527, 533, 541, 550, 565, 568, 579], "deseri": [141, 476], "were": [141, 274, 327, 476, 548, 581], "fail": [141, 476, 499, 523, 531, 571], "e": [141, 167, 187, 188, 476, 497, 498, 502, 527, 530, 534, 545, 550, 551, 555, 559, 581, 587, 590, 593], "becaus": [141, 171, 176, 218, 259, 297, 476, 499, 567, 584, 590, 592, 593], "doesn": [141, 218, 259, 476, 503, 529, 541, 542, 563, 595], "certain": [141, 186, 476, 589], "except": [141, 377, 476, 493, 522, 568, 584, 585], "howev": [141, 476, 568, 581, 587, 590], "dynam": [141, 188, 193, 234, 264, 316, 374, 472, 476, 503, 523, 527, 531, 536, 541, 545, 550, 551, 552, 553, 556, 562, 582, 593, 596], "altern": [141, 187, 188, 358, 476], "argument": [141, 188, 377, 476, 500, 526, 566, 567, 570, 573, 575, 576, 577, 587], "callabl": [141, 187, 188, 272, 325, 476, 482, 522, 523], "locat": [141, 147, 184, 218, 259, 476, 529, 548, 555, 559, 562, 570, 584, 588, 592, 595], "resid": [141, 476], "tag": [141, 336, 473, 476, 590, 591], "wa": [141, 187, 188, 476, 503, 541, 544, 567, 568, 571, 582, 593], "builtin": [141, 476, 529], "cuda": [141, 184, 476, 542, 545, 547, 581, 584], "device_id": [141, 476], "either": [141, 188, 270, 323, 476, 546, 550, 570, 580, 583, 584], "final": [141, 165, 172, 184, 299, 476, 504, 541, 548, 579, 581, 584, 588, 593], "alreadi": [141, 152, 204, 217, 219, 246, 258, 476, 503, 524, 536, 557, 560, 564, 573, 593], "right": [141, 214, 256, 270, 323, 476, 497, 498, 499, 562, 568, 590, 592], "otherwis": [141, 204, 218, 246, 259, 476, 493, 497, 504, 524, 557, 560, 583, 587, 592], "fall": [141, 146, 476, 544], "back": [141, 146, 218, 224, 259, 476, 526, 562, 568], "behavior": [141, 476, 497, 503, 504, 505, 533, 543, 587, 591, 593, 595], "wasn": [141, 476], "indic": [141, 154, 187, 188, 196, 200, 202, 237, 242, 244, 260, 270, 281, 323, 472, 476, 499, 523, 532, 565, 570, 591], "appear": [141, 476, 497, 556, 562, 564], "ones": [141, 270, 323, 476, 581], "put": [141, 204, 246, 476, 524, 527], "user": [141, 152, 157, 165, 177, 184, 187, 188, 191, 192, 204, 207, 211, 218, 219, 225, 232, 233, 246, 249, 253, 259, 265, 289, 294, 300, 302, 303, 327, 328, 338, 358, 363, 376, 476, 482, 493, 499, 500, 502, 503, 504, 505, 510, 520, 522, 523, 527, 528, 531, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 553, 556, 562, 569, 570, 571, 572, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 588, 590, 591, 592, 593, 597], "register_packag": [141, 476], "readlin": [141, 476], "tell": [141, 327, 358, 476, 583], "seek": [141, 476, 587], "o": [141, 377, 476, 522, 537, 547, 565], "pathlik": [141, 476], "metadata": [141, 476], "primit": [141, 476], "keyword": [141, 188, 476], "unless": [141, 476, 533], "implicitli": [141, 476], "known": [141, 221, 306, 362, 476, 541, 544, 581, 584, 591, 593], "insecur": [141, 476, 564], "possibl": [141, 219, 476, 526, 564, 580, 581, 585, 586, 593], "construct": [141, 202, 205, 206, 209, 216, 221, 223, 224, 226, 244, 247, 248, 251, 327, 332, 336, 376, 472, 473, 476, 485, 497, 504, 505, 524, 529, 581, 593], "malici": [141, 476], "arbitrari": [141, 476, 541, 580], "code": [141, 165, 191, 192, 219, 232, 233, 276, 300, 303, 358, 476, 482, 499, 502, 503, 504, 505, 524, 527, 528, 529, 535, 536, 538, 540, 545, 547, 549, 550, 551, 553, 556, 562, 566, 567, 569, 570, 571, 579, 580, 581, 582, 583, 584, 589, 590, 591, 592], "never": [141, 476, 593], "could": [141, 150, 167, 191, 192, 204, 232, 233, 246, 303, 328, 358, 476, 482, 497, 499, 528, 541, 580, 581, 584, 587, 590, 594], "come": [141, 476, 539, 544, 593], "untrust": [141, 476], "unsaf": [141, 476], "tamper": [141, 476], "trust": [141, 476, 526, 564], "load_state_dict": [141, 476], "ram": [141, 476], "surg": [141, 476], "checkpoint": [141, 336, 473, 476, 492, 543], "By": [141, 165, 187, 188, 267, 320, 476, 504, 505, 540, 543, 555, 556, 559, 581, 582, 587, 593], "decod": [141, 214, 256, 267, 320, 476, 540, 592], "byte": [141, 476], "utf": [141, 217, 258, 476], "unicodedecodeerror": [141, 476], "ascii": [141, 476], "codec": [141, 476], "0x": [141, 476], "incorrect": [141, 476], "extra": [141, 272, 325, 476, 541, 587], "encod": [141, 270, 323, 476, 565, 592], "latin1": [141, 476], "them": [141, 165, 202, 244, 476, 499, 505, 523, 526, 531, 533, 535, 565, 568, 580, 581, 587, 593], "keep": [141, 176, 184, 298, 363, 476, 499, 503, 522, 561, 562, 588], "later": [141, 150, 476, 522, 569, 570, 591], "byte_arrai": [141, 476], "xdoctest": [141, 476], "skip": [141, 476, 591, 593], "undefin": [141, 184, 298, 476], "filepath": [141, 476, 493, 522], "pt": [141, 476, 492, 537, 543, 566, 582, 584, 586, 587], "onto": [141, 476], "lambda": [141, 476, 585], "loc": [141, 476], "bytesio": [141, 476], "open": [141, 222, 266, 319, 476, 485, 495, 497, 502, 531, 532, 541, 557, 560, 563, 564, 568, 569, 570, 582], "rb": [141, 476], "buffer": [141, 476], "get_modul": [142, 478], "nn": [142, 143, 146, 165, 166, 176, 186, 187, 188, 264, 328, 358, 478, 481, 488, 492, 499, 527, 541, 543, 587, 590, 591], "get_children": [142, 478], "get_named_children": [142, 478], "dowload_hf_model": [142, 478], "repo_id": [142, 478], "cache_dir": [142, 478], "repo_typ": [142, 478], "revis": [142, 478], "download": [142, 204, 246, 478, 524, 526, 537, 567, 573, 588], "hug": [142, 478, 502, 569, 582], "face": [142, 478, 497, 502, 510, 545, 549, 569, 571, 582, 588, 596], "hf": [142, 478, 539, 590, 596], "hub": [142, 478, 502, 530, 534, 553], "load_empty_model": [142, 478, 585], "cl": [142, 147, 155, 157, 167, 172, 180, 181, 182, 204, 211, 218, 220, 225, 246, 253, 259, 281, 288, 292, 297, 299, 301, 312, 327, 338, 370, 478, 493, 522], "automodelforcausallm": [142, 478], "empti": [142, 187, 188, 478, 548, 585], "get_super_module_by_nam": [142, 478], "module_nam": [142, 161, 162, 172, 173, 174, 175, 177, 178, 179, 181, 183, 299, 478, 493], "father": [142, 165, 478], "update_modul": [142, 478], "new_modul": [142, 146, 478], "load_layer_wise_quantized_model": [142, 478], "load_tensor_from_shard": [142, 478], "shard": [142, 478], "load_tensor": [142, 478], "fakeaffinetensorquantfunct": [143, 481], "affin": [143, 481, 584], "teqlinearfakequ": [143, 481], "orig_lay": [143, 481], "mullinear": [143, 481], "input_scal": [143, 481], "detector": 144, "transformerbasedmodelblockpatterndetector": 144, "pattern_lst": 144, "block_pattern": 144, "detect": [144, 146, 165, 187, 188, 270, 274, 323, 327, 332, 498, 499, 545, 552, 553, 581, 593], "ffn": [144, 176], "trace_and_fuse_sub_graph": 145, "is_qat": 145, "traced_model": 145, "move_input_devic": 146, "auto": [146, 163, 165, 187, 188, 304, 360, 366, 493, 499, 521, 545, 548, 550, 552, 553, 581, 584, 587], "kind": [146, 541], "forward_wrapp": 146, "get_embedding_contigu": 146, "embed": [146, 521, 581], "contigu": 146, "is_fused_modul": 146, "_propagate_qconfig_help": 146, "collate_torch_pr": 146, "collate_result": 146, "input2tupl": 146, "append_attr": 146, "fx_model": 146, "fx_white_list": 146, "append": [146, 303, 306, 362, 499, 528, 541, 580], "fx": [146, 187, 310, 368, 536, 542, 551, 552, 566, 582, 584, 586], "graphmodul": [146, 499, 586], "addit": [146, 188, 482, 504, 505, 527, 556, 564, 570, 587, 588, 593], "dir": [146, 202, 244, 488, 492, 524, 532, 535], "generate_activation_observ": 146, "smooth_quant_en": 146, "observ": [146, 505, 587, 589, 591, 593], "what": [146, 172, 200, 242, 327, 358, 482, 497, 582], "check_cfg_and_qconfig": 146, "op_infos_from_cfg": 146, "output_tensor_ids_op_nam": 146, "paser_cfg": 146, "ops_nam": 146, "get_quantizable_ops_from_cfg": 146, "input_tensor_ids_op_nam": 146, "update_sq_scal": 146, "ipex_config_path": 146, "smoothquant_scale_info": 146, "ipex_config": 146, "json": [146, 203, 218, 245, 259, 492, 524, 543, 563, 570, 571, 575, 576, 577, 587, 592], "auto_copi": 146, "ipex": [146, 187, 188, 492, 536, 539, 541, 542, 547, 551, 552, 590], "fetch_modul": 146, "op_nam": [146, 187, 188, 317, 375, 493, 494, 504, 541, 581, 591], "set_modul": 146, "simple_infer": 146, "get_example_input": 146, "example_inp": 146, "get_fallback_ord": 146, "confidence_batch": [146, 593], "fallback": [146, 188, 309, 310, 365, 367, 368, 531, 542, 565, 586, 593], "requantize_cfg": 146, "confid": 146, "ordered_op": 146, "get_mse_order_per_fp32": 146, "influenc": [146, 581], "last": [146, 161, 184, 187, 188, 523, 542, 545, 547, 552, 556, 584, 587, 590], "fallback_ord": 146, "get_mse_order_per_int8": 146, "example_input": [146, 187, 188, 264, 492, 531], "get_torch_vers": 146, "match_datatype_pattern": 146, "calculate_quant_min_max": 146, "unsign": [146, 318, 376, 505, 587], "qmin": 146, "qmax": 146, "get_depth": 146, "depth": [146, 527, 586], "get_dict_at_depth": 146, "target_depth": 146, "nest": 146, "get_element_under_depth": 146, "ops_lst": 146, "get_op_type_by_nam": 146, "quantizable_op": 146, "collect_weight_info": 146, "fc": [146, 188, 581], "param": [146, 152, 157, 193, 219, 225, 234, 274, 306, 327, 362, 472, 493, 503, 543, 593], "_type_": [146, 488], "get_module_input_output": 146, "module_hook_config": 146, "input_func": 146, "output_func": 146, "help": [146, 158, 227, 276, 522, 539, 543, 545, 551, 562, 570, 575, 576, 577, 587, 593, 594], "module_name_list": 146, "requir": [146, 187, 188, 194, 303, 336, 357, 473, 499, 503, 504, 520, 521, 523, 526, 528, 529, 533, 541, 542, 543, 546, 556, 562, 564, 569, 570, 573, 576, 577, 581, 584, 587, 588, 589, 590, 591, 593, 595], "fc1": 146, "preprocess": [146, 187, 188, 202, 218, 244, 259, 376, 485, 529, 592], "usag": [146, 201, 243, 270, 276, 303, 323, 377, 504, 524, 529, 530, 545, 553, 564, 570, 575, 576, 577, 579, 583, 587, 592], "input_valu": 146, "output_valu": 146, "total_valu": 146, "get_absorb_lay": 146, "supported_lay": 146, "absorb_to_lay": 146, "no_absorb_lay": 146, "allow": [146, 306, 362, 527, 529, 540, 541, 542, 564, 569, 581, 583, 587, 590, 593, 595], "absorpt": 146, "eg": [146, 204, 246, 524, 583], "absorb": [146, 150, 587], "absorbed_1": 146, "xx": 146, "get_block_prefix": 146, "block_list": 146, "block_num": 146, "block_prefix": 146, "get_hidden_st": 146, "calib": [146, 504], "rest": [146, 569, 570, 575, 576, 577], "part": [146, 163, 172, 297, 299, 499, 537, 542, 557, 560, 570, 572, 581, 585, 590, 594], "total_block_kwarg": 146, "total_block_arg": 146, "algorithm_registri": 147, "algorithm_typ": 147, "registr": [147, 204, 211, 218, 246, 253, 259, 292], "algorithmschedul": 147, "conf": [147, 152, 154, 188, 191, 192, 219, 232, 233, 276, 283, 284, 286, 287, 288, 289, 294, 304, 306, 309, 310, 312, 316, 328, 338, 358, 359, 360, 362, 363, 367, 368, 370, 374, 377, 482, 499, 500, 502, 505, 520, 527, 534, 535, 541, 542, 543, 564, 566, 567, 580, 584, 585, 586, 587, 589, 590, 593], "control": [147, 187, 188, 499, 541, 568, 581, 593], "phase": [147, 500, 541, 581, 584, 586, 593], "fastbiascorrect": [148, 151], "fast_bias_correct": [149, 187, 188, 584], "weight_correct": [149, 187, 188, 584], "whose": [150, 167, 298, 336, 473, 535, 590, 593], "futur": [150, 191, 192, 221, 232, 233, 536, 539, 541, 553, 575, 576, 577, 594], "weightcorrect": 151, "1e": [151, 590, 595], "05": [151, 188, 274, 327, 540, 590, 596], "evalu": [152, 154, 167, 187, 191, 192, 202, 219, 232, 233, 244, 260, 267, 270, 271, 272, 274, 276, 320, 323, 324, 325, 327, 328, 338, 358, 482, 485, 500, 503, 504, 522, 524, 527, 528, 535, 536, 539, 540, 541, 542, 545, 551, 553, 556, 562, 579, 581, 584, 589, 590, 591, 593, 595], "set_env_var": [152, 219], "env_var": [152, 219], "overwrite_exist": [152, 219], "env": [152, 219, 532, 575, 576, 577], "set_all_env_var": [152, 219], "physic": [152, 219, 497, 520, 570], "core": [152, 187, 188, 219, 498, 520, 538, 555, 559, 570, 596], "get_architectur": [152, 219], "architectur": [152, 219, 277, 280, 502, 520, 527, 541, 569, 581, 582, 587, 594], "get_threads_per_cor": [152, 219], "thread": [152, 187, 188, 219, 353, 357, 523, 572], "get_thread": [152, 219], "get_physical_id": [152, 219], "socket": [152, 219, 493, 570, 572, 596], "get_core_id": [152, 219], "id": [152, 217, 219, 258, 267, 269, 270, 271, 272, 320, 322, 323, 324, 325, 502, 540, 570, 571, 575, 576, 577, 589, 593], "get_bounded_thread": [152, 219], "core_id": [152, 219], "bind": [152, 219], "run_inst": 152, "b_dataload": [152, 187, 188, 520, 541], "b_func": [152, 520], "benchmarkconfig": [152, 187, 188, 520, 526, 541], "goal": [152, 260, 265, 289, 294, 302, 328, 358, 504, 523, 580, 584, 593], "prefer": [152, 265, 302, 358, 581, 587], "space": [152, 173, 174, 179, 187, 188, 191, 192, 232, 233, 265, 272, 277, 280, 281, 282, 302, 306, 309, 316, 325, 328, 358, 362, 367, 374, 497, 498, 500, 503, 504, 505, 522, 581, 584, 590, 595], "etc": [152, 154, 217, 258, 260, 265, 272, 289, 294, 302, 325, 328, 358, 492, 502, 527, 536, 564, 568, 581, 589, 593], "generate_prefix": 152, "core_list": 152, "command": [152, 219, 482, 526, 529, 545, 547, 550, 555, 559, 563, 564, 566, 567, 568, 570], "numactl": [152, 532, 548, 556], "call_on": 152, "cmd": 152, "log_fil": [152, 352, 356], "window": [152, 520, 537, 562, 563], "config_inst": 152, "raw_cmd": 152, "multi": [152, 163, 165, 176, 270, 323, 327, 358, 500, 523, 524, 536, 541, 579, 581, 584, 593], "trigger": [152, 172, 299], "summary_benchmark": 152, "summari": [152, 482, 526, 557, 560, 591, 596], "profil": [152, 188, 319], "benchmark_with_raw_cmd": 152, "fit_with_raw_cmd": 152, "cores_per_inst": [152, 187, 188, 520, 541, 583], "num_of_inst": [152, 187, 188, 520, 541, 583], "test": [152, 187, 188, 218, 259, 498, 502, 526, 537, 570, 575, 596], "fit": [152, 167, 187, 188, 306, 328, 358, 362, 377, 482, 499, 502, 520, 523, 524, 526, 529, 534, 535, 540, 541, 542, 543, 564, 565, 581, 584, 585, 586, 587], "pb": [152, 187, 188, 328, 336, 358, 473, 520, 529, 534, 541, 543, 564, 567, 575, 591, 596], "eval_dataload": [152, 187, 188, 191, 192, 232, 233, 303, 304, 306, 309, 310, 312, 328, 358, 359, 360, 362, 363, 367, 368, 370, 482, 520, 535, 540, 541, 564, 584, 585, 593], "tuninglogg": 153, "unifi": [153, 265, 302, 503, 504, 505, 523, 535, 536, 540, 541, 543], "assist": [153, 588], "team": [153, 272, 325, 497, 586], "retriev": [153, 200, 242, 472, 581], "compon": [154, 260, 266, 303, 499, 522, 526, 529, 537, 538, 545, 562, 570, 580, 581], "inherit": [154, 155, 177, 178, 182, 187, 199, 218, 220, 228, 241, 259, 299, 301, 500, 503, 504, 524], "quantizationawaretrainingcallback": 154, "pruningcallback": 154, "distillationcallback": 154, "basecallback": 154, "design": [154, 201, 223, 228, 243, 327, 363, 500, 502, 541, 550, 553, 581, 584, 594], "mainli": [154, 182, 228, 301, 502, 541, 581, 584], "prune": [154, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 188, 228, 229, 266, 283, 284, 286, 287, 288, 292, 294, 295, 297, 298, 299, 301, 303, 493, 502, 529, 530, 533, 534, 536, 580, 582, 594, 595], "distil": [154, 187, 188, 220, 227, 228, 266, 502, 530, 534, 536, 580, 594, 595], "In": [154, 169, 170, 171, 176, 177, 178, 181, 188, 201, 228, 243, 270, 297, 299, 323, 338, 497, 499, 500, 502, 503, 504, 523, 524, 526, 527, 528, 529, 540, 541, 552, 555, 556, 559, 565, 566, 567, 568, 575, 576, 577, 579, 580, 581, 584, 586, 587, 589, 590, 591, 592, 593, 594], "adaptor": [154, 187, 188, 318, 376, 380, 485, 502, 505, 536, 585, 586, 588, 590, 591, 594], "deriv": [154, 161, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 260, 297, 299, 301], "pipelin": [154, 260, 277, 278, 303, 498, 528, 541, 580], "knowledg": [154, 155, 187, 188, 220, 260, 528, 530, 534, 536, 541, 543, 595], "transfer": [154, 209, 251, 260, 524, 527, 528, 541, 590], "teacher": [154, 187, 188, 260, 527, 528, 541, 596], "student": [154, 158, 187, 188, 202, 227, 244, 260, 524, 527, 528, 596], "distillation_conf": [154, 260], "_epoch_ran": [154, 260], "integ": [154, 171, 172, 187, 188, 260, 270, 274, 281, 297, 299, 323, 327, 377, 503, 505, 521, 584, 587, 590, 593], "much": [154, 161, 187, 188, 218, 259, 260, 527, 556, 590, 592], "epoch": [154, 173, 174, 179, 260, 299, 482, 523, 527, 528, 529, 541, 580, 581, 595], "ran": [154, 260], "eval_frequ": [154, 260], "frequenc": [154, 172, 187, 188, 260, 299, 541, 581, 595], "do": [154, 180, 187, 188, 201, 202, 243, 244, 260, 264, 267, 270, 300, 320, 323, 492, 497, 504, 522, 524, 529, 533, 536, 540, 541, 557, 560, 581, 586, 588, 590, 593], "term": [154, 173, 174, 179, 181, 260, 498, 521, 527, 538, 540, 579, 580, 593], "best_scor": [154, 260], "best": [154, 218, 259, 260, 265, 302, 309, 367, 497, 500, 502, 522, 537, 545, 551, 562, 568, 579, 584, 587, 590, 592, 593], "metric": [154, 187, 188, 191, 192, 222, 232, 233, 260, 265, 266, 281, 289, 294, 302, 303, 319, 328, 358, 482, 485, 500, 503, 504, 524, 526, 529, 541, 542, 564, 584, 589, 590, 591, 593, 594, 595, 596], "best_model": [154, 260, 492, 587], "found": [154, 260, 502, 522, 527, 539, 542, 550, 567, 571, 590, 593, 596], "critet": [155, 220], "tensorflowcrossentropyloss": [155, 220], "pytorchcrossentropyloss": [155, 220], "tensorflowsparsecategoricalcrossentropi": 155, "tensorflowknowledgedistillationloss": [155, 220], "pytorchknowledgedistillationloss": [155, 220, 541], "pytorchintermediatelayersknowledgedistillationloss": [155, 220], "tensorflowcriterion": [155, 220], "pytorchcriterion": [155, 220], "criterion_registri": [155, 220], "criterion_typ": [155, 220], "registry_criterion": [155, 220], "param_dict": [155, 157, 220, 225], "crossentropyloss": [155, 187, 188, 527, 541], "sparsecategoricalcrossentropyloss": 155, "pytorch": [155, 157, 158, 162, 165, 168, 171, 172, 175, 180, 186, 187, 188, 201, 202, 204, 207, 211, 218, 220, 225, 227, 243, 244, 246, 249, 253, 259, 264, 265, 274, 275, 295, 297, 300, 302, 310, 327, 328, 337, 358, 368, 486, 493, 498, 499, 500, 502, 503, 504, 505, 521, 522, 523, 527, 528, 530, 533, 536, 537, 539, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 562, 564, 573, 576, 577, 581, 582, 583, 587, 588, 590, 593, 595], "knowledgedistillationframework": [155, 220], "student_model": [155, 188, 220, 541], "teacher_model": [155, 187, 188, 220, 527, 528, 541], "knowledgedistillationloss": [155, 220, 541, 595], "temperatur": [155, 187, 188, 220, 541, 595], "loss_typ": [155, 187, 188, 220, 541, 595], "ce": [155, 187, 188, 220, 541, 595], "loss_weight": [155, 187, 188, 220, 541, 595], "pytorchknowledgedistillationlosswrapp": [155, 220], "tensorflowknowledgedistillationlosswrapp": 155, "tensorflowknowledgedistillationlossextern": [155, 220], "intermediatelayersknowledgedistillationloss": [155, 220], "layer_map": [155, 188, 220, 527], "add_origin_loss": [155, 188, 220], "pytorchintermediatelayersknowledgedistillationlosswrapp": [155, 220], "selfknowledgedistillationloss": [155, 220], "selfknowledg": [155, 220], "pytorchselfknowledgedistillationloss": 155, "pytorchselfknowledgedistillationlosswrapp": 155, "intel": [157, 169, 170, 180, 222, 225, 261, 266, 273, 274, 297, 300, 308, 314, 319, 326, 327, 342, 358, 366, 372, 495, 497, 498, 500, 501, 503, 504, 505, 521, 524, 525, 527, 528, 530, 531, 533, 534, 538, 539, 542, 543, 545, 550, 552, 553, 564, 565, 566, 567, 569, 570, 579, 580, 581, 582, 584, 586, 587, 588, 590, 591, 593, 594, 595, 596], "multipl": [157, 163, 189, 190, 194, 195, 202, 203, 205, 206, 207, 208, 209, 213, 215, 218, 225, 230, 231, 235, 236, 238, 244, 245, 247, 248, 249, 250, 251, 255, 257, 259, 275, 328, 329, 330, 332, 338, 520, 524, 531, 541, 569, 572, 580, 581, 589, 590, 593], "tensorflowoptim": [157, 225], "pytorchoptim": [157, 225], "optimizer_registri": [157, 225], "optimizer_typ": [157, 225], "cross": [157, 225, 274, 327, 535, 593], "tensorflowsgd": [157, 225], "sgd": [157, 187, 188, 225, 527, 541, 583, 595], "tensorflowadamw": [157, 225], "tensorflow_addon": [157, 225], "adamw": [157, 225], "tensorflowadam": 157, "adam": [157, 595], "pytorchsgd": [157, 225], "record_output": [158, 227], "output_process": [158, 227], "get_activ": [158, 227], "hyper": [159, 595], "sa_optim": 159, "simul": [160, 505], "anneal": 160, "register_criterion": [161, 183], "registri": [161, 167, 172, 180, 181, 182, 183, 297, 299, 301, 500], "get_criterion": 161, "pruningcriterion": [161, 183], "about": [161, 183, 493, 497, 522, 523, 541, 567, 568, 581, 586, 593, 594, 596], "score": [161, 167, 172, 176, 183, 187, 188, 267, 268, 270, 271, 272, 274, 299, 320, 321, 323, 324, 325, 327, 365, 485, 499, 540, 565, 579, 581, 589, 593], "magnitudecriterion": [161, 183], "magnitud": [161, 183, 187, 188, 274, 285, 327, 536, 581], "criterion_class": [161, 183], "determin": [161, 167, 172, 183, 187, 188, 487, 497, 499, 521, 581, 584], "gradientcriterion": 161, "gradient": [161, 283, 502, 536, 541, 581, 582, 596], "absolut": [161, 187, 188, 274, 327, 540, 541, 544, 581, 584, 593], "snipcriterion": 161, "snip": [161, 187, 188, 299, 536, 581, 596], "product": [161, 502, 536, 542, 545, 546, 562, 568, 582, 584, 589, 593], "singl": [161, 182, 187, 188, 196, 202, 218, 237, 244, 259, 270, 299, 301, 323, 327, 358, 472, 499, 524, 526, 537, 568, 581, 585, 590], "shot": [161, 179, 182, 228, 299, 301, 500, 536, 541, 581, 582, 587], "connect": [161, 299, 562, 564, 571, 581, 589], "sensit": [161, 283, 299, 536, 581], "arxiv": [161, 179, 299, 502, 521, 544, 581, 582, 587, 590], "org": [161, 179, 270, 299, 323, 499, 526, 537, 557, 560, 581], "1810": [161, 299], "02340": [161, 299], "snipmomentumcriterion": 161, "snip_momentum": [161, 187, 188, 541, 581], "momentum": [161, 299, 536, 541, 581, 595], "preserv": [161, 521, 544, 581, 587], "step": [161, 171, 172, 173, 174, 178, 179, 182, 187, 188, 297, 299, 301, 482, 504, 505, 526, 527, 528, 529, 541, 557, 560, 562, 575, 576, 577, 580, 581, 583, 586, 587, 589, 590, 591, 593], "beta": 161, "blockmaskcriterion": 161, "9": [161, 187, 188, 499, 537, 541, 581, 583, 590, 593, 595, 596], "block_mask": [161, 175], "retrainfreecriterion": 161, "retrain_fre": [161, 175, 581], "model_slim": [162, 176], "wanda": 162, "criteria": [162, 187, 188, 265, 289, 294, 297, 299, 302, 499, 562, 590], "reg": [162, 173, 174, 179, 188], "schedul": [162, 172, 173, 174, 179, 181, 187, 188, 266, 295, 299, 541, 569, 570, 572, 580], "tf_criteria": 162, "pickle_protocol": 162, "_use_new_zipfile_seri": 162, "prepare_prun": [162, 581], "loss_func": [162, 180], "assertionerror": [162, 168, 175, 184, 297, 298, 299, 328], "slim": [163, 164, 165, 270, 323, 334, 336, 473, 474, 543, 581], "round_multipli": 163, "spars": [163, 177, 299, 524, 582], "automat": [163, 165, 166, 187, 188, 204, 207, 214, 246, 249, 256, 265, 275, 302, 499, 502, 520, 524, 536, 541, 542, 545, 547, 550, 551, 553, 555, 556, 557, 559, 560, 562, 569, 572, 580, 581, 584, 590, 592, 593], "model_slim_ffn2": 163, "some": [163, 165, 187, 188, 202, 244, 298, 504, 505, 522, 524, 526, 531, 537, 540, 541, 564, 565, 566, 567, 570, 579, 581, 584, 586, 587, 590, 591, 593, 594], "perman": [163, 497, 581], "obtain": [163, 165, 174, 179, 181, 184, 298, 499, 504, 570, 581, 589, 590, 593], "acceler": [163, 502, 527, 541, 545, 553, 562, 565, 569, 581, 582, 586, 587, 590, 593], "directli": [163, 187, 188, 201, 243, 270, 274, 298, 323, 327, 502, 540, 541, 549, 581, 583, 584, 591], "sprase": 163, "model_slim_mha": 163, "parse_auto_slim_config": [163, 581], "ffn2_sparsiti": [163, 581], "mha_spars": [163, 581], "generate_ffn2_pruning_config": 163, "consecut": [163, 165, 166, 581], "generate_mha_pruning_config": 163, "head": [163, 165, 169, 176, 184, 581], "auto_slim": 164, "pattern_analyz": 164, "weight_slim": [164, 176], "get_attribut": 165, "descent": [165, 502, 582], "get_common_modul": 165, "layer1": [165, 187, 188, 541, 581, 584], "layer2": [165, 541, 581, 584], "nearest": [165, 218, 259, 587, 592], "print_iter": 165, "recipesearch": 165, "searcher": [165, 188, 282], "root": [165, 202, 203, 204, 207, 244, 245, 246, 249, 274, 327, 524, 529, 540, 541, 595], "levelwis": 165, "wai": [165, 203, 204, 207, 245, 246, 249, 336, 473, 500, 505, 523, 524, 526, 540, 541, 545, 548, 563, 564, 568, 569, 570, 580, 581, 584, 587, 590, 593, 595], "huggingfac": [165, 176, 202, 244, 488, 524, 530, 534, 544, 550, 551, 552, 553, 573, 574, 576, 577, 590, 596], "bert": [165, 188, 198, 201, 202, 218, 240, 243, 244, 259, 502, 524, 527, 540, 542, 550, 573, 576, 577, 581, 592, 596], "recipe_sampl": 165, "bertattent": 165, "dens": [165, 182, 187, 188, 301, 565, 581, 596], "basic": [165, 167, 175, 187, 188, 217, 258, 277, 297, 308, 312, 315, 366, 370, 373, 482, 536, 537, 541, 544, 564, 583, 589], "searching_result": 165, "jitbasicsearch": 165, "placeholder_shap": 165, "placeholder_dtyp": 165, "jit": [165, 187, 545, 547, 552, 590, 591], "script": [165, 267, 268, 271, 272, 320, 321, 324, 325, 498, 502, 529, 536, 545, 549, 552, 553, 556, 573, 575, 582], "static_graph": 165, "flatten_static_graph": 165, "target_lay": 165, "linear2linearsearch": 165, "target_op_lut": 165, "lookup": 165, "tabl": [165, 176, 493, 505, 526, 531, 544, 565, 567, 596], "current_pattern": 165, "statu": [165, 490, 497, 523, 544, 572, 575, 576, 577, 579, 581], "selfmhasearch": 165, "classifierheadsearch": 165, "classifi": [165, 184, 202, 244, 274, 327, 524, 527], "classifierheadsearchertf": 165, "squeezer": 166, "postcompressionutil": 166, "librari": [166, 222, 266, 319, 353, 495, 502, 537, 541, 542, 547, 556, 562, 582, 584], "relat": [166, 181, 260, 270, 289, 294, 297, 323, 376, 485, 505, 545, 569, 570, 581, 595], "linearcompress": 166, "root_linear": 166, "target_linear": 166, "while": [166, 177, 184, 299, 306, 362, 503, 504, 524, 530, 536, 542, 545, 550, 562, 564, 581, 583, 584, 587, 590], "hidden": [166, 171, 297, 503], "structur": [166, 177, 178, 187, 188, 299, 317, 375, 493, 536, 561, 563, 566, 575, 581, 582, 584, 591, 594, 596], "layer_1": 166, "act_fn": 166, "layer_2": 166, "linearcompressioniter": 166, "linear_pattern": 166, "register_pattern": [167, 297], "sure": [167, 172, 180, 182, 297, 299, 301, 520, 564], "basepattern": [167, 169, 171], "unit": [167, 297, 498, 570, 581], "4x1": [167, 187, 188, 293, 541, 581, 596], "is_glob": [167, 297], "local": [167, 187, 188, 297, 493, 555, 559, 564, 571, 572, 581, 589], "contrast": [167, 297, 592], "keep_mask_lay": 167, "invalid_lay": 167, "max_sparsity_ratio_per_op": [167, 172, 187, 188, 541, 581], "sparsiti": [167, 169, 170, 172, 173, 174, 177, 179, 182, 184, 187, 188, 299, 301, 493, 502, 524, 536, 541, 594, 596], "reach": [167, 182, 187, 188, 301, 498, 523, 564, 581, 593], "min_sparsity_ratio_per_op": [167, 187, 188, 541, 581], "minimum": [167, 187, 188, 505, 521, 526, 541, 544, 553, 581, 590, 593], "target_spars": [167, 187, 188, 541, 581, 583, 595], "pytorchbasepattern": [167, 181], "kerasbasepattern": 167, "mha": [168, 175, 581], "ninm": 168, "nxm": [168, 178, 187, 188, 293, 297, 581], "get_pattern": [168, 297], "patternmha": 169, "doc": [169, 170, 187, 188, 297, 315, 316, 327, 358, 373, 374, 377, 493, 540, 541, 557, 560, 568], "md": [169, 170, 187, 188, 297, 327, 358], "n": [169, 170, 187, 188, 203, 218, 245, 259, 268, 297, 321, 377, 505, 522, 524, 526, 527, 570, 581, 584, 590, 592], "pytorchpatternninm": 170, "out": [170, 187, 188, 202, 203, 204, 244, 245, 246, 265, 297, 302, 498, 499, 502, 524, 545, 550, 555, 556, 557, 559, 560, 562, 568, 581, 583, 584, 587], "continu": [170, 270, 297, 323, 500, 539, 541, 563, 581, 594], "pytorchpatternnxm": 171, "kept": [171, 297], "block_siz": [171, 297, 587], "height": [171, 214, 218, 256, 259, 297, 529, 592, 595], "width": [171, 214, 218, 256, 259, 297, 521, 529, 581, 584, 592, 595], "vertic": [171, 218, 259, 297, 592], "keraspatternnxm": 171, "register_prun": [172, 180, 299], "baseprun": [172, 177, 179, 180], "current_sparsity_ratio": [172, 299], "global_step": [172, 299], "start_step": [172, 187, 188, 299, 541, 581, 583], "end_step": [172, 187, 188, 299, 541, 581, 583], "pruning_frequ": [172, 187, 188, 541, 581], "target_sparsity_ratio": [172, 299], "show": [172, 493, 497, 527, 529, 541, 544, 548, 563, 564, 565, 567, 570, 575, 576, 577, 590, 593, 594], "pytorchbaseprun": 172, "kerasbaseprun": 172, "pytorchbasicprun": 173, "arrang": [173, 174, 179, 203, 204, 207, 245, 246, 249, 524, 581], "proce": [173, 174, 179], "regul": [173, 174, 179], "kerasbasicprun": 173, "pytorchblockmaskprun": 174, "grad": [174, 179], "pattern_lock": [175, 187, 188, 285], "parse_valid_pruner_typ": 175, "get_prun": [175, 299], "pythonmultiheadattentionprun": 176, "mha_modul": 176, "partial": [176, 581, 584], "qkv": 176, "feedward": 176, "simultan": [176, 545, 569, 580, 583], "qkv_name": 176, "query_layer_nam": 176, "key_layer_nam": 176, "value_layer_nam": 176, "ffn_name": 176, "attention_ffn_nam": 176, "mha_nam": 176, "qkv_modul": 176, "ffn_modul": 176, "mha_compress": 176, "mhacompress": 176, "critic": [176, 497], "modifi": [176, 204, 246, 357, 376, 499, 505, 529, 533, 566, 567, 581, 595], "linear_lay": 176, "independ": [176, 353, 357, 505], "length": [176, 187, 188, 202, 218, 244, 259, 270, 323, 524, 540, 582, 584, 587, 592], "4x": [176, 500, 584], "subsequ": [176, 504, 545, 562], "head_mask": 176, "mha_head_s": 176, "similar": [176, 541, 566, 583, 590, 593, 595], "mha_scor": 176, "lock": [177, 287, 288, 536, 580, 581], "pytorchpatternlockprun": 177, "parent": [177, 178, 182, 293, 299, 301, 591], "pytorchprogressiveprun": 178, "basicprun": [178, 180], "interpol": [178, 218, 259, 540, 581, 592], "fine": [178, 202, 244, 522, 524, 548, 581, 582, 584], "grain": [178, 581, 582, 593], "improv": [178, 498, 521, 522, 541, 545, 562, 563, 565, 581, 582, 584, 586, 587, 593, 594, 596], "ad": [178, 202, 244, 267, 306, 320, 362, 504, 505, 526, 542, 545, 550, 553, 557, 560, 570, 581, 587, 591], "interv": [178, 581], "retrain": [179, 528], "pytorchretrainfreeprun": 179, "pruner_class": 179, "fast": [179, 187, 188, 581, 582, 587], "retrainfreeprun": [179, 180], "effect": [179, 502, 503, 581, 582], "2204": 179, "09656": 179, "opt": [180, 502, 539, 550, 581, 590, 593, 596], "least": [180, 300, 498, 541, 581, 593], "templat": [180, 300, 541, 581], "tree": [180, 300, 316, 374, 570], "nlp": [180, 187, 188, 300, 550, 566, 581, 584], "huggingface_model": [180, 300, 566], "classif": [180, 202, 218, 244, 259, 274, 300, 327, 527, 531, 540, 551, 565, 573, 576, 577, 581, 582], "pytorch_prun": [180, 266], "eager": [180, 300, 357, 502, 529, 536, 584, 586, 591], "config_file_path": [180, 300], "pruner_info": [180, 300], "sparsegptprun": 180, "sparsegpt": [180, 581], "pruning_class": 180, "avail": [180, 187, 188, 332, 502, 506, 508, 512, 515, 518, 522, 530, 532, 534, 536, 555, 559, 564, 569, 570, 571, 575, 576, 577, 581, 593, 596], "regular": [181, 267, 298, 320], "register_reg": 181, "regulariz": 181, "get_reg_typ": 181, "get_reg": 181, "basereg": 181, "grouplasso": 181, "coeff": 181, "lasso": [181, 284, 536, 581], "select": [181, 184, 188, 202, 244, 488, 499, 500, 521, 536, 537, 562, 581, 584, 587, 591, 593], "reg_term": 181, "register_schedul": [182, 301], "get_schedul": [182, 301], "pruningschedul": 182, "gradual": [182, 301, 581], "oneshotschedul": [182, 301], "iterativeschedul": [182, 301], "get_tf_criterion": 183, "get_sparsity_ratio": 184, "elementwise_over_matmul_gemm_conv": 184, "elementwise_over_al": 184, "blockwise_over_matmul_gemm_conv": 184, "get_sparsity_ratio_tf": 184, "check_config": [184, 298], "prune_config": [184, 298], "everyth": [184, 298, 550], "reset_none_to_default": 184, "update_param": 184, "process_weight_config": 184, "global_config": [184, 283, 284, 286, 287, 288], "local_config": [184, 187, 188, 283, 284, 286, 287, 288], "default_config": 184, "pruners_info": 184, "process_yaml_config": 184, "yaml": [184, 188, 191, 192, 202, 204, 219, 232, 233, 244, 246, 260, 265, 276, 277, 278, 280, 289, 294, 302, 303, 492, 493, 503, 505, 535, 540, 541, 579, 583, 591, 592], "check_key_valid": 184, "template_config": 184, "user_config": 184, "process_and_check_config": [184, 298], "process_config": [184, 298], "parse_last_linear": 184, "often": [184, 523, 527, 567, 580, 581], "act": [184, 200, 242, 472, 497], "might": [184, 499, 522, 564, 593], "caus": [184, 504, 523, 546, 565, 567, 581, 587], "drop": [184, 270, 298, 323, 498, 541, 542, 556, 581, 587, 590, 596], "parse_last_linear_tf": 184, "parse_to_prun": [184, 298], "parse_to_prune_tf": 184, "generate_pruner_config": 184, "dotdict": [184, 188, 338, 493], "get_lay": 184, "collect_layer_input": 184, "layer_idx": 184, "layer_input": 184, "previou": [184, 504, 505, 541, 581, 588, 590, 591, 593, 594, 596], "find_lay": 186, "conv1d": [186, 505], "recurs": [186, 493], "random_se": [187, 188, 306, 362, 541, 595], "1978": [187, 188], "workspac": [187, 188, 492, 493, 543, 570, 575, 576, 577], "default_workspac": [187, 188], "resume_from": [187, 188, 493], "tensorboard": [187, 188, 485, 493, 503, 541, 565], "set_random_se": [187, 188, 493], "set_workspac": [187, 188, 493], "set_resume_from": [187, 188, 493], "set_tensorboard": [187, 188, 493], "directori": [187, 188, 203, 204, 245, 246, 336, 473, 488, 490, 492, 493, 524, 529, 532, 555, 557, 559, 560, 566, 568, 591], "histori": [187, 188, 492, 493, 562, 566, 593], "nc_workspac": [187, 188, 565, 566], "datetim": [187, 188], "now": [187, 188, 218, 259, 499, 500, 505, 524, 529, 553, 583, 592, 593], "strftime": [187, 188], "d_": [187, 188], "resum": [187, 188, 191, 192, 232, 233, 304, 310, 312, 359, 360, 362, 363, 367, 368, 370], "flag": [187, 188, 268, 321, 526], "visual": [187, 188, 502, 553, 562, 589, 591, 593, 594], "displai": [187, 188, 315, 316, 373, 374, 493, 562, 565], "2022": [187, 188, 538, 581, 587, 590], "workspace_path": [187, 188], "accuracycriterion": [187, 188, 541, 593], "higher_is_bett": [187, 188, 327, 358, 593, 595], "rel": [187, 188, 338, 541, 565, 583, 593, 595, 596], "tolerable_loss": [187, 188, 541, 593], "higher": [187, 188, 191, 192, 232, 233, 281, 328, 358, 482, 499, 526, 527, 531, 540, 565, 581, 584, 589], "accept": [187, 188, 377, 497, 520, 522, 523, 564, 587], "accuracy_criterion": [187, 188, 338, 541, 566, 579, 583, 593, 595], "warmup": [187, 188, 520, 541, 583], "inter_num_of_thread": [187, 188, 353, 357, 541, 583], "intra_num_of_thread": [187, 188, 353, 357, 541, 583], "benchmark": [187, 188, 221, 266, 303, 319, 338, 493, 502, 510, 543, 545, 549, 553, 556, 562, 565, 593, 594, 595, 596], "onnxrt_trt_ep": [187, 188, 542, 584], "onnxrt_cuda_ep": [187, 188, 542, 584], "inter": [187, 188], "intra": [187, 188], "quantizationconfig": 187, "approach": [187, 188, 277, 278, 280, 499, 500, 502, 521, 524, 527, 536, 541, 550, 562, 565, 573, 575, 576, 577, 581, 582, 583, 585, 587, 593, 595], "post_training_static_qu": [187, 524, 541, 583, 593], "calibration_sampling_s": [187, 188, 541, 567], "op_type_dict": [187, 188, 502, 505, 583, 584, 587, 593], "op_name_dict": [187, 188, 526, 541, 565, 567, 584, 593], "strategy_kwarg": [187, 188, 589, 593], "timeout": [187, 188, 541, 583, 593, 595], "max_trial": [187, 188, 541, 593], "quant_level": [187, 188, 565, 587, 590, 593], "posttrainingquantconfig": [187, 188, 358, 499, 502, 505, 523, 526, 531, 534, 540, 541, 543, 564, 565, 566, 567, 584, 585, 586, 587, 589, 590, 593], "quantizationawaretrainingconfig": [187, 188, 482, 499, 528, 531, 541, 584, 586, 593], "cv": [187, 188, 581], "object_detect": [187, 188, 270, 323], "recommendation_system": [187, 188], "explicitli": [187, 188, 535, 581], "overrid": [187, 188, 493, 522], "quantiztaion": [187, 188], "smooth_quant_arg": [187, 188, 584, 590], "gemm_to_matmul": [187, 188, 584], "graph_optimization_level": [187, 188, 583, 584], "disable_al": [187, 188, 583], "enable_bas": [187, 188], "enable_extend": [187, 188], "enable_al": [187, 188], "first_conv_or_matmul_quant": [187, 188, 584], "last_conv_or_matmul_quant": [187, 188, 584], "pre_post_process_quant": [187, 188, 584], "postprocess": [187, 188, 215, 218, 222, 259, 327, 358, 485, 503, 541, 591, 592], "dedic": [187, 188], "quant_format": [187, 188, 264, 531, 565], "constraint": [187, 188, 265, 302, 541, 581, 589, 593, 595], "conv1": [187, 188, 584, 595], "tuning_strategi": [187, 188], "guarante": [187, 188, 541], "models": [187, 188, 338, 541, 579, 583], "footprint": [187, 188, 265, 289, 294, 302, 338, 528, 541, 579, 581, 583, 585], "earli": [187, 188, 541, 584, 593, 595], "stop": [187, 188, 541, 593, 594, 595], "field": [187, 188, 204, 246, 270, 323, 499, 503, 505, 529, 541, 544, 589, 593, 595], "exit": [187, 188, 305, 359, 361, 541, 570, 575, 576, 577, 595], "excluded_precis": [187, 188, 586], "exclud": [187, 188, 503, 521, 586], "conserv": [187, 188, 366], "use_distributed_tun": 187, "weightpruningconfig": [187, 188, 541, 580, 581], "pruning_config": [187, 188, 541, 581], "pruning_typ": [187, 188, 541, 581], "pruning_scop": [187, 188, 541, 581], "98": [187, 188, 541, 581, 583, 596], "sparsity_decay_typ": [187, 188, 541, 581], "exp": [187, 188, 541, 544, 581], "pruning_op_typ": [187, 188, 541, 581], "link": [187, 188, 202, 244, 327, 358, 521, 524, 531, 555, 559, 562, 587, 596], "90": [187, 188, 539, 585, 595, 596], "magnitude_progress": [187, 188], "snip_progress": [187, 188], "snip_momentum_progress": [187, 188], "most": [187, 188, 274, 327, 526, 541, 542, 581, 584, 587, 590, 593, 596], "feasibl": [187, 188], "situat": [187, 188, 529, 581], "unstructur": [187, 188, 293, 536, 581, 596], "8x1": [187, 188], "channelx1": [187, 188, 581], "1xchannel": [187, 188, 581], "itrex": [187, 188, 590], "start": [187, 188, 218, 259, 270, 323, 363, 537, 567, 582, 592, 593, 594, 597], "togeth": [187, 188, 218, 259, 527, 537, 549, 582, 591, 592], "sort": [187, 188, 309, 367, 526, 565, 587, 593], "sinc": [187, 188, 265, 267, 289, 294, 302, 320, 527, 531, 537, 540, 556, 562, 567, 580, 587, 588], "lead": [187, 188, 522, 527, 541, 542, 567, 581, 587, 590], "increas": [187, 188, 525, 536, 544, 545, 562, 567, 587, 593], "cube": [187, 188, 581], "6": [187, 188, 533, 544, 584, 590, 593, 596], "update_config": [187, 188], "10": [187, 188, 204, 246, 306, 362, 502, 520, 524, 531, 537, 539, 541, 564, 565, 581, 583, 592, 593, 596], "knowledgedistillationlossconfig": [187, 188, 527, 528, 541, 580], "hyperparamet": [187, 188, 315, 589, 590, 593], "entropi": [187, 188, 521, 593], "groundtruth": [187, 188, 270, 323], "label": [187, 188, 191, 192, 202, 204, 205, 206, 207, 210, 214, 218, 223, 232, 233, 244, 246, 247, 248, 249, 252, 256, 259, 267, 269, 274, 320, 322, 327, 328, 358, 472, 482, 499, 523, 524, 526, 540, 541, 584, 592], "sum": [187, 188, 274, 327, 526, 527], "distillationconfig": [187, 188, 482, 527, 528, 541, 580], "prepare_compress": [187, 188, 482, 499, 527, 528, 541, 580, 581, 584], "criterion_conf": [187, 188], "d_conf": [187, 188, 528, 541, 580], "compression_manag": [187, 188, 482, 499, 527, 528, 541, 580, 581, 584], "learning_r": [187, 188, 541, 583, 595], "featur": [187, 188, 202, 203, 214, 218, 244, 245, 256, 259, 498, 502, 520, 523, 525, 527, 541, 542, 543, 545, 549, 550, 553, 562, 564, 568, 581, 582, 588, 592], "distil_loss": [187, 188, 541], "lr": [187, 188, 527, 529, 541], "instead": [188, 201, 243, 493, 548, 550, 553, 568, 581, 587], "notat": [188, 493], "ni_workload_nam": 188, "onnxrt_dnnl_ep": [188, 542, 584], "onnxrt_dml_ep": [188, 584], "tuningcriterion": [188, 541, 579, 589, 593], "tuning_criterion": [188, 541, 579, 589, 593], "npu": [188, 584], "xpu": [188, 553, 584], "ptq": [188, 358, 499, 526, 529, 536, 541, 567, 584, 590, 591, 593], "tri": [188, 522, 593], "meet": [188, 194, 303, 305, 359, 361, 499, 504, 579, 582, 583, 584, 587, 591, 593], "bayesian": [188, 282, 308, 366, 500, 581, 583], "mse_v2": [188, 308, 366], "hawq_v2": [188, 366], "exhaust": [188, 282, 308, 366, 583], "docstr": [188, 377], "workload": [188, 490, 493, 564, 582], "insight": [188, 490, 502, 526, 582, 588, 593, 594], "copi": [188, 298, 493, 523, 568], "deepcopi": 188, "model_origin": [188, 358, 586], "qat_op_name_dict": 188, "low_memory_usag": 188, "hpoconfig": 188, "search_spac": [188, 277, 280, 281, 282], "xgb": 188, "min_train_sampl": 188, "42": [188, 282, 539, 596], "grid": [188, 282, 500, 581], "bo": 188, "intermediatelayersknowledgedistillationlossconfig": [188, 527], "relationship": [188, 564], "student_layer_nam": 188, "student_layer_output_process": 188, "teacher_layer_nam": 188, "teacher_layer_output_process": 188, "desir": [188, 214, 218, 256, 259, 504, 505, 581, 590, 592], "serv": [188, 336, 473, 570, 575, 576, 577], "numer": [188, 274, 327, 505, 542, 544, 582, 584, 587], "abbrevi": 188, "layer_nam": [188, 581], "l1": 188, "selfknowledgedistillationlossconfig": [188, 527, 541], "student1_layer_name1": 188, "teacher_layer_name1": 188, "student2_layer_name1": 188, "student1_layer_name2": 188, "teacher_layer_name2": 188, "student2_layer_name2": 188, "soft": 188, "l2": [188, 581], "hard": [188, 523, 526], "resblock": 188, "deepst": 188, "02": [188, 596], "mixedprecisionconfig": [188, 328, 377, 541, 542], "mixedprecis": [188, 275, 541], "won": [188, 584, 587], "work": [188, 265, 302, 501, 504, 522, 523, 527, 557, 560, 568, 586, 587, 588, 590, 591], "mix_precis": [188, 319, 377, 541, 542], "converted_model": [188, 328, 541, 542], "exportconfig": 188, "14": [188, 263, 264, 502, 531, 537, 577, 596], "dynamic_ax": [188, 264, 531], "qlinear": [188, 204, 211, 246, 253, 274, 327, 503, 552], "ax": [188, 264], "onnxqlinear2qdqconfig": 188, "onnxqlinear2qdq": 188, "torch2onnxconfig": [188, 531], "torch2onnx": [188, 261], "qdq_op_fp32_bia": 188, "qdq_op_int32_bia": 188, "qdq_op_fp32_bias_qdq": 188, "resnet50": [188, 502, 526, 529, 531, 542, 545, 549, 581, 584, 589, 596], "int8_onnx_config": [188, 531], "randn": [188, 531], "224": [188, 214, 256, 502, 524, 529, 531, 534, 541, 545, 564, 592, 595], "batch_siz": [188, 193, 195, 198, 199, 200, 201, 202, 203, 221, 234, 236, 240, 241, 242, 243, 244, 245, 264, 472, 500, 523, 524, 529, 531, 535, 541, 545, 584], "tf2onnxconfig": [188, 531], "tf2onnx": [188, 261], "output_graph": 188, "nasconfig": [188, 278, 280, 500], "search_algorithm": [188, 279, 500], "dyna": [188, 279, 500, 536, 583], "na": [188, 266, 332, 536, 539, 596], "sigopt": [190, 231, 582], "tpe": [190, 231], "sigopttunestrategi": [191, 232], "q_dataload": [191, 192, 232, 233, 304, 306, 309, 310, 312, 359, 360, 362, 363, 367, 368, 370, 535, 593], "q_func": [191, 192, 232, 233, 304, 306, 309, 310, 312, 359, 360, 362, 363, 367, 368, 370, 503, 504, 541, 593], "eval_metr": [191, 192, 328, 358, 359, 360, 362, 363, 367, 368, 370, 482, 540, 564, 584], "q_hook": [191, 192, 232, 233, 304, 306, 309, 310, 312, 359, 360, 362, 363, 367, 368, 370], "hpo": [191, 232, 581], "mandatori": [191, 192, 232, 233, 358, 541, 595], "yield": [191, 192, 200, 221, 232, 233, 242, 306, 328, 358, 362, 377, 472, 482, 523, 584, 593], "_": [191, 192, 232, 233, 358, 499, 500, 502, 503, 504, 521, 526, 527, 529, 531, 533, 541, 542, 543, 545, 551, 555, 557, 559, 560, 567, 570, 571, 579, 581, 584, 587, 588, 589, 590, 591, 593, 595], "well": [191, 192, 232, 233, 328, 358, 482, 500, 502, 522, 524, 544, 581, 584, 588, 590, 595], "taken": [191, 192, 232, 233, 328, 358, 482, 584], "reserv": [191, 192, 232, 233], "abl": [191, 192, 232, 233, 328, 358, 482, 553, 562, 584], "tuner": [191, 192, 232, 233, 265, 302, 328, 358, 482, 584], "scalar": [191, 192, 232, 233, 328, 358, 482, 540, 584, 593], "pseudo": [191, 192, 232, 233, 358, 482, 587, 591], "someth": [191, 192, 204, 232, 233, 246, 358, 482], "fefin": [192, 233], "tpetunestrategi": [192, 233], "basedatalod": [193, 234, 472], "basedataload": [193, 197, 199, 234, 239, 241, 472], "last_batch": [193, 195, 198, 199, 201, 221, 234, 236, 240, 241, 243, 472, 523], "rollov": [193, 195, 198, 199, 201, 221, 234, 236, 240, 241, 243, 472, 523], "collate_fn": [193, 195, 196, 198, 199, 201, 221, 234, 236, 237, 240, 241, 243, 472, 523, 524], "sampler": [193, 195, 198, 199, 201, 221, 234, 236, 238, 240, 241, 243, 315, 373, 472, 523, 529], "batch_sampl": [193, 195, 198, 199, 201, 221, 234, 236, 240, 241, 243, 472, 523], "num_work": [193, 195, 198, 199, 201, 221, 234, 236, 240, 241, 243, 472, 523, 541, 584], "pin_memori": [193, 195, 198, 199, 201, 221, 234, 236, 240, 241, 243, 472, 523], "shuffl": [193, 195, 198, 199, 201, 221, 234, 236, 240, 241, 243, 472, 523, 541, 584], "_generate_dataload": [193, 234, 472], "check_dataload": 194, "default_col": [195, 236, 472], "outer": [195, 236, 472], "defaultdataload": [195, 201, 236, 243], "style": [196, 209, 237, 251, 377, 522, 524, 535], "drop_last": [196, 200, 237, 242, 472], "iterablefetch": [196, 237, 472], "indexfetch": [196, 237, 472], "mxnetdataload": [197, 239], "onnxrtbertdataload": [198, 240], "variant": [198, 240], "onnxrtdataload": [198, 240, 352], "pytorchdataload": [199, 241], "data_sourc": [200, 242, 485], "__iter__": [200, 204, 242, 246, 523, 524, 541], "matter": [200, 242, 586], "iterablesampl": [200, 242, 472], "squential": [200, 242], "your": [200, 202, 242, 244, 498, 502, 522, 523, 524, 526, 529, 538, 541, 545, 548, 549, 550, 555, 556, 557, 559, 560, 562, 564, 568, 570, 575, 576, 577, 581, 582, 589, 591, 593, 594], "clear": [200, 242, 503, 533, 540, 541], "iterabledataset": [200, 204, 242, 246], "try": [200, 242, 336, 473, 499, 502, 526, 565, 581, 584, 590, 593], "indexdataset": [200, 242], "__getitem__": [200, 204, 218, 242, 246, 259, 523, 524, 541], "__len__": [200, 204, 242, 246, 524], "sequentialsampl": [200, 242, 472], "sequenti": [200, 242, 303, 305, 359, 361, 472, 593], "batchsampl": [200, 242, 472], "tfdatadataload": [201, 243], "tensorflow1": [201, 243], "coupl": [201, 243], "satisfi": [201, 243, 526, 537, 568], "tf1": [201, 243, 543], "although": [201, 243, 589], "tensorflowbertdataload": [201, 243], "tensorflowmodelzoobertdataload": [201, 243], "zoo": [201, 218, 243, 259, 502, 530, 534, 596], "tensorflowdataload": [201, 243, 356], "pytorchbertdataset": [202, 244], "model_typ": [202, 244, 493, 524], "tensordataset": [202, 244, 524], "repo": [202, 244, 496, 498, 524, 530, 555, 557, 559, 560, 597], "todo": [202, 205, 244, 247, 270, 316, 323, 374, 472], "easi": [202, 244, 302, 531, 541, 565, 569, 582, 584, 587, 589], "squad": [202, 218, 244, 259, 271, 272, 274, 324, 325, 327, 524, 540, 581, 592, 596], "distilbert": [202, 244, 524, 542, 582, 596], "xlnet": [202, 244, 524], "xlm": [202, 244, 524, 596], "101": [202, 244, 274, 327, 540, 571, 590, 596], "2043": [202, 244], "2001": [202, 244], "onnxrtbertdataset": [202, 244], "data_dir": [202, 244, 524], "model_name_or_path": [202, 244, 524, 541, 550, 551, 566, 573, 576, 577, 585], "max_seq_length": [202, 218, 244, 259, 524, 592], "do_lower_cas": [202, 217, 218, 244, 258, 259, 524, 592], "mrpc": [202, 244, 274, 327, 524, 540, 550, 573, 576, 577, 581, 593, 596], "dynamic_length": [202, 244, 524], "shortcut": [202, 244, 524], "token": [202, 215, 218, 244, 257, 259, 267, 268, 320, 321, 488, 502, 524, 540, 541, 564, 565, 587, 589, 590, 592, 593], "longer": [202, 218, 244, 259, 524, 592], "truncat": [202, 218, 244, 259, 524, 592], "shorter": [202, 218, 244, 259, 524, 592], "lowercas": [202, 244, 524], "choic": [202, 244, 503, 524, 540, 568, 590], "qqp": [202, 244, 524, 540, 596], "qnli": [202, 244, 524, 540, 596], "rte": [202, 244, 524, 540, 596], "st": [202, 244, 524, 540], "cola": [202, 244, 524, 540, 596], "mnli": [202, 244, 524, 540, 596], "wnli": [202, 244, 524, 540], "mobilebert": [202, 244, 524, 527], "roberta": [202, 244, 524, 596], "uncas": [202, 218, 244, 259, 524, 592, 596], "load_and_cache_exampl": [202, 244], "cach": [202, 244, 532, 584, 587], "convert_examples_to_featur": [202, 218, 244, 259], "max_length": [202, 244], "label_list": [202, 244, 274, 327], "output_mod": [202, 244], "pad_token": [202, 244], "pad_token_segment_id": [202, 244], "mask_padding_with_zero": [202, 244], "inputfeatur": [202, 218, 244, 259], "properti": [202, 244, 376, 538], "input_id": [202, 218, 244, 259, 541], "vocabulari": [202, 217, 218, 244, 258, 259, 592], "attention_mask": [202, 244, 541], "usual": [202, 244, 504, 526, 527, 567, 580, 581, 584, 585, 590], "NOT": [202, 244, 533], "token_type_id": [202, 244, 541], "segment": [202, 244, 268, 270, 321, 323, 498], "portion": [202, 244], "regress": [202, 244, 498, 526], "seq_length": [202, 244], "tensorflowbertdataset": [202, 244], "label_fil": [202, 218, 244, 259, 524, 592], "tfrecord": [202, 203, 204, 244, 245, 246, 524], "guid": [202, 244, 499, 502, 522, 524, 527, 537, 545, 553, 562, 597], "parsedecodebert": [202, 244], "tensorflowmodelzoobertdataset": [202, 203, 244, 245], "num_cor": [202, 203, 207, 244, 245, 249, 524], "28": [202, 203, 207, 244, 245, 249, 524, 596], "coco": [203, 210, 245, 252, 270, 274, 323, 327, 540, 581], "parsedecodecoco": [203, 245], "cocorecorddataset": [203, 245], "interleav": [203, 245, 524], "parallel": [203, 245, 353, 357, 524, 541, 569, 572, 593], "cocoraw": [203, 245, 524], "img_dir": [203, 245, 524], "val2017": [203, 245, 524], "anno_dir": [203, 245, 524], "annot": [203, 245, 270, 323, 377, 504, 505, 524, 540, 581, 593], "instances_val2017": [203, 245, 524], "jpg": [203, 207, 209, 245, 249, 251, 502, 524], "imag": [203, 204, 207, 209, 214, 218, 245, 246, 249, 251, 256, 259, 270, 323, 502, 524, 529, 531, 581, 583, 590, 591, 592, 596], "coconpi": [203, 245, 524], "npy_dir": [203, 245, 524], "npy": [203, 245, 524], "tensorflowdataset": [204, 246], "pytorchdataset": [204, 246], "mxnetdataset": [204, 246], "onnxrtqldataset": [204, 246], "onnxrtitdataset": [204, 246], "IT": [204, 211, 246, 253, 582], "pytorchmxnetwrapdataset": [204, 246], "datafunc": [204, 246], "pytorchmxnetwrapfunct": [204, 218, 246, 259], "framework_dataset": [204, 246], "convent": [204, 246, 270, 323, 498, 527, 544], "imageclassifi": [204, 246], "choos": [204, 246, 488, 536, 550, 582, 588, 590, 593, 595], "tensorflow_itex": [204, 207, 209, 211, 246, 249, 251, 253, 523, 583], "onnxrt_qdq": [204, 211, 246, 253, 583], "onnxrt_qlinearop": [204, 211, 218, 246, 253, 259, 583], "onnxrt_integerop": [204, 211, 218, 246, 253, 259, 583], "pytorch_ipex": [204, 211, 246, 253, 541, 583, 595], "pytorch_fx": [204, 211, 246, 253, 541, 583], "dataset_registri": [204, 246], "dataset_typ": [204, 246], "dataset_format": [204, 246], "data_format": [204, 214, 246, 256], "raw_imag": [204, 246], "overwrit": [204, 246, 555, 559], "download_url": [204, 246], "url": [204, 246, 498, 538, 573, 574, 581], "filenam": [204, 246, 493, 524, 568], "md5": [204, 246], "address": [204, 246, 497, 522, 542, 564, 567, 570, 582], "gen_bar_updat": [204, 246], "check_integr": [204, 246], "fpath": [204, 246], "checksum": [204, 246], "calculate_md5": [204, 246], "chunk_siz": [204, 246], "cifar10": [204, 246, 524], "cifar100": [204, 246, 524], "databas": [204, 246, 570], "www": [204, 246, 524, 596], "toronto": [204, 246, 524], "kriz": [204, 246, 524], "cifar": [204, 246, 524, 596], "tar": [204, 246, 524, 526, 557, 560], "gz": [204, 246, 524, 526, 557, 560], "manual": [204, 246, 524, 545, 551, 553, 556, 570, 575, 576, 577, 581], "subset": [204, 207, 246, 249, 524, 567], "internet": [204, 246, 524, 564], "again": [204, 246, 524, 565, 567, 586], "pytorchcifar10": [204, 246], "mxnetcifar10": [204, 246], "tensorflowcifar10": [204, 246], "pytorchcifar100": [204, 246], "mxnetcifar100": [204, 246], "tensorflowcifar100": [204, 246], "mnist": [204, 246, 524, 529], "nation": [204, 246, 497], "institut": [204, 246], "standard": [204, 218, 246, 259, 498, 504, 522, 526, 531, 540, 592, 593], "technologi": [204, 246, 539, 541, 544], "fashionmnist": [204, 246, 524], "npz": [204, 246, 524], "idx1": [204, 246, 524], "ubyt": [204, 246, 524], "idx3": [204, 246, 524], "t10k": [204, 246, 524], "pytorchmnist": [204, 246], "mxnetmnist": [204, 246], "tensorflowmnist": [204, 246], "pytorchfashionmnist": [204, 246], "mxnetfashionmnist": [204, 246], "tensorflowfashionmnist": [204, 246], "imagefold": [204, 246, 524, 529, 541], "expect": [204, 246, 497, 498, 532, 539, 562, 584, 587, 593], "subfold": [204, 246, 565], "belong": [204, 246, 332, 584], "class_1": [204, 246, 524], "xxx": [204, 246, 524, 541], "png": [204, 246, 524], "xxy": [204, 246, 524], "xxz": [204, 246, 524], "class_n": [204, 246, 524], "123": [204, 246, 524, 592], "nsdf3": [204, 246, 524], "asd932_": [204, 246, 524], "categori": [204, 246, 269, 322, 520, 524, 552], "mxnetimagefold": [204, 246], "tensorflowtfrecorddataset": [204, 246], "tensorflowimagerecord": [204, 246], "imagenet": [204, 207, 214, 246, 249, 256, 500, 526, 541, 551, 567, 581, 591, 592, 595, 596], "000": [204, 246, 502, 524], "001": [204, 246, 524, 529, 590, 595], "099": [204, 246, 524], "tensorflowvocrecord": [204, 246], "pascal": [204, 246], "voc": [204, 246, 274, 327], "2012": [204, 246], "00000": [204, 246], "00004": [204, 246], "00001": [204, 246], "00003": [204, 246], "dummydataset": [205, 206, 247, 248, 472], "127": [205, 206, 247, 248, 472, 524, 584, 590], "float32": [205, 206, 218, 247, 248, 259, 270, 323, 472, 488, 503, 520, 524, 541, 584, 587, 590, 592], "rang": [205, 206, 218, 247, 248, 259, 377, 472, 482, 488, 502, 503, 505, 521, 524, 526, 527, 528, 529, 541, 544, 565, 567, 580, 581, 584, 587, 590, 592], "stand_norm": [205, 206, 247, 248, 472, 524], "dummy_v2": [206, 248, 472, 524], "sparse_dummy_v2": [206, 248, 524], "label_shap": [206, 248, 472, 524], "sparsedummydataset": [206, 248], "dense_shap": [206, 248, 524], "sparse_ratio": [206, 248, 524], "imagenetraw": [207, 249, 524], "data_path": [207, 249, 524], "image_list": [207, 249, 524], "img1": [207, 249, 524], "img2": [207, 249, 524], "imgx": [207, 249, 524], "val_map": [207, 249, 524], "txt": [207, 249, 524, 526, 537, 564, 566, 567, 569, 570], "pytorchimagenetraw": [207, 249], "mxnetimagenetraw": [207, 249], "tensorflowimagenetraw": [207, 249], "inteltensorflow": [207, 209, 249, 251, 537], "tensorflowimagenetdataset": [207, 249], "onnxrtimagenetdataset": [207, 249], "bert_dataset": [208, 250], "coco_dataset": [208, 250], "dummy_dataset": [208, 250], "dummy_dataset_v2": [208, 250], "imagenet_dataset": [208, 250], "style_transfer_dataset": [208, 250], "styletransferdataset": [209, 251], "content_fold": [209, 251, 524], "style_fold": [209, 251, 524], "crop_ratio": [209, 251, 524], "resize_shap": [209, 251, 524], "256": [209, 214, 251, 256, 524, 529, 541, 592], "image_format": [209, 251, 524], "holder": [209, 251, 524], "labelbalancecocorecordfilt": [210, 252], "balanc": [210, 252, 544, 587, 590], "labelbalancecocorawfilt": [210, 252], "tensorflowfilt": [211, 253], "onnxrtqlfilt": [211, 253], "onnxrtitfilt": [211, 253], "pytorchfilt": [211, 253], "mxnetfilt": [211, 253], "filter_registri": [211, 253], "filter_typ": [211, 253], "__call__": [211, 253], "coco_filt": [212, 254], "quantizedinput": [214, 256, 592], "labelshift": [214, 256, 592], "label_shift": [214, 256, 592], "parsedecodeimagenet": [214, 256, 592], "proto": [214, 218, 256, 259, 592], "parsedecodeimagenettransform": [214, 256], "tensorflowtransposelastchannel": 214, "tensorflowshiftrescal": 214, "rescal": [214, 218, 259, 592], "tensorflowresizecropimagenettransform": [214, 256], "random_crop": [214, 256, 592], "resize_sid": [214, 256, 592], "resize_method": [214, 256], "bilinear": [214, 218, 256, 259, 592], "random_flip_left_right": [214, 256, 592], "mean_valu": [214, 256, 592], "channels_last": [214, 256, 545], "subpixel": [214, 256], "rgb": [214, 256], "seri": [214, 256, 502, 537, 541, 592], "applic": [214, 256, 505, 531, 545, 562, 564, 570, 571, 575, 576, 582, 587, 590, 591, 592, 594], "crop": [214, 218, 256, 259, 524, 592], "flip": [214, 218, 256, 259, 592], "left": [214, 218, 256, 259, 556, 562, 590, 592], "std": [214, 218, 256, 259, 541, 592], "bilinearimagenettransform": [214, 256], "central_fract": [214, 256, 592], "875": [214, 256, 592], "fraction": [214, 256, 592], "onnxbilinearimagenettransform": [214, 256], "onnxresizecropimagenettransform": [214, 256], "std_valu": [214, 256], "229": [214, 256, 541], "225": [214, 256, 541, 596], "resizewithaspectratio": [214, 256], "87": [214, 256, 596], "inter_pol": [214, 256], "cv2": [214, 256], "inter_area": [214, 256], "aspect": [214, 218, 256, 259, 592], "imagenet_transform": [215, 257], "postprocess_cl": [216, 226, 541], "user_postprocess": [216, 226], "convert_to_unicod": [217, 258], "unicod": [217, 258], "assum": [217, 258, 270, 281, 323, 503, 533, 562], "load_vocab": [217, 258], "vocab_fil": [217, 218, 258, 259, 592], "convert_by_vocab": [217, 258], "vocab": [217, 258], "whitespace_token": [217, 258], "whitespac": [217, 258, 272, 325], "clean": [217, 258, 541], "piec": [217, 258, 267, 320, 540, 587], "fulltoken": [217, 258], "tokenzi": [217, 258], "basictoken": [217, 258], "punctuat": [217, 258, 267, 272, 320, 325], "lower": [217, 218, 258, 259, 272, 325, 363, 528, 544, 581, 582, 584, 590, 592, 593], "wordpiecetoken": [217, 258], "unk_token": [217, 258], "unk": [217, 258], "max_input_chars_per_word": [217, 258], "200": [217, 258, 499, 571, 593], "wordpiec": [217, 218, 258, 259, 592], "concat_gener": [218, 259], "inc": [218, 259, 497, 502, 504, 539, 545, 552, 562, 564, 569, 582, 583, 588, 593], "tensorflowtransform": [218, 259], "mxnettransform": [218, 259], "pytorchtransform": [218, 259], "onnxrtqltransform": [218, 259], "onnxrtittransform": [218, 259], "transform_registri": [218, 259], "transform_typ": [218, 259], "basetransform": [218, 259], "tensorflowwrapfunct": [218, 259], "transform_func": [218, 259], "pytorchmxnettransform": [218, 259], "get_torchvision_map": [218, 259], "torchvis": [218, 259, 502, 530, 534, 545, 551, 565], "composetransform": [218, 259], "transform_list": [218, 259, 592], "compos": [218, 259, 485, 592], "croptoboundingbox": [218, 259, 592], "offset_height": [218, 259, 592], "offset_width": [218, 259, 592], "target_height": [218, 259, 592], "target_width": [218, 259, 592], "box": [218, 259, 270, 274, 323, 327, 499, 540, 545, 556, 562, 591, 592, 593], "coordin": [218, 259, 306, 362, 569, 592, 593], "top": [218, 259, 265, 274, 289, 294, 302, 327, 498, 540, 562, 565, 567, 592], "corner": [218, 259, 498, 503, 505, 592], "horizont": [218, 259, 592], "mxnetcroptoboundingbox": [218, 259], "onnxrtcroptoboundingbox": [218, 259], "tensorflowcroptoboundingbox": [218, 259], "resizewithratio": [218, 259, 592], "min_dim": [218, 259, 592], "800": [218, 259, 592], "max_dim": [218, 259, 592], "1365": [218, 259, 592], "constant_valu": [218, 259], "longest": [218, 259, 592], "side": [218, 259, 524, 556, 592], "exce": [218, 259, 587, 592], "tensorflowresizewithratio": [218, 259], "perm": [218, 259, 592], "permut": [218, 259, 592], "tensorflowtranspos": [218, 259], "mxnettranspos": [218, 259], "pytorchtranspos": [218, 259], "randomverticalflip": [218, 259, 592], "randomli": [218, 259, 282, 306, 362, 500, 590, 592, 593], "tensorflowrandomverticalflip": [218, 259], "randomhorizontalflip": [218, 259, 541, 592], "tensorflowrandomhorizontalflip": [218, 259], "toarrai": [218, 259, 592], "pil": [218, 259, 592], "casttftransform": [218, 259], "castonnxtransform": [218, 259], "castpytorchtransform": [218, 259], "centercroptftransform": [218, 259], "center": [218, 259, 501, 502, 537, 592, 593], "paddedcentercroptransform": [218, 259], "crop_pad": [218, 259], "resizetftransform": [218, 259], "bicub": [218, 259, 592], "resizepytorchtransform": [218, 259], "randomcroptftransform": [218, 259], "randomresizedcroppytorchtransform": [218, 259], "08": [218, 259, 539, 592, 596], "randomresizedcropmxnettransform": [218, 259], "randomresizedcroptftransform": [218, 259], "normalizetftransform": [218, 259], "deviat": [218, 259, 526, 592], "broadcast": [218, 259, 529, 592], "rescalekeraspretraintransform": [218, 259], "rescaletftransform": [218, 259], "rescaletransform": [218, 259], "alignimagechanneltransform": [218, 259], "dim": [218, 259, 590, 592], "align": [218, 259, 497, 587, 592], "must": [218, 259, 270, 323, 498, 499, 504, 520, 523, 537, 584, 592], "pytorchalignimagechannel": [218, 259], "tondarraytransform": [218, 259], "resizemxnettransform": [218, 259], "resizetransform": [218, 259], "cropresizetftransform": [218, 259], "boundari": [218, 259, 592], "area": [218, 259, 270, 323, 540, 544, 592], "pytorchcropresizetransform": [218, 259], "mxnetcropresizetransform": [218, 259], "cropresizetransform": [218, 259], "centercroptransform": [218, 259], "mxnetnormalizetransform": [218, 259], "pytorchnormalizetransform": [218, 259], "normalizetransform": [218, 259], "randomcroptransform": [218, 259], "randomresizedcroptransform": [218, 259], "get_final_text": [218, 259], "pred_text": [218, 259], "orig_text": [218, 259], "project": [218, 259, 496, 497, 498, 568, 582, 589, 593, 597], "squadexampl": [218, 259], "qas_id": [218, 259], "question_text": [218, 259], "doc_token": [218, 259], "orig_answer_text": [218, 259], "start_posit": [218, 259], "end_posit": [218, 259], "is_imposs": [218, 259], "simpl": [218, 259, 537, 541, 581, 589, 590, 593], "answer": [218, 259, 271, 272, 324, 325, 497, 567, 581, 592, 596], "posit": [218, 259, 497, 540, 545, 570, 575, 576, 577], "unique_id": [218, 259], "example_index": [218, 259], "doc_span_index": [218, 259], "token_to_orig_map": [218, 259], "token_is_max_context": [218, 259], "input_mask": [218, 259, 541], "segment_id": [218, 259, 541], "read_squad_exampl": [218, 259], "input_fil": [218, 259], "doc_strid": [218, 259, 592], "max_query_length": [218, 259, 592], "output_fn": [218, 259], "inputbatch": [218, 259], "collecttransform": [218, 259], "10833": [218, 259], "tfsquadv1posttransform": [218, 259], "n_best_siz": [218, 259, 592], "20": [218, 259, 567, 570, 575, 576, 577, 581, 592, 595, 596], "384": [218, 259, 592], "64": [218, 259, 500, 539, 587, 590, 592, 596], "max_answer_length": [218, 259, 592], "30": [218, 259, 530, 534, 536, 592, 596], "nbest_predict": [218, 259, 592], "question": [218, 259, 271, 272, 324, 325, 497, 498, 502, 503, 537, 545, 569, 581, 590, 592, 596], "anoth": [218, 259, 267, 276, 320, 493, 526, 527, 555, 559, 592, 593], "long": [218, 259, 522, 532, 587, 592], "document": [218, 259, 377, 504, 505, 510, 529, 539, 542, 547, 557, 560, 561, 568, 569, 571, 581, 588, 592, 594], "chunk": [218, 259, 592], "tfmodelzoocollecttransform": [218, 259], "tfsquadv1modelzooposttransform": [218, 259], "squadv1": [218, 259, 592], "parsedecodevoctransform": [218, 259], "conf_fname_or_obj": [219, 228, 260, 265, 275, 276, 277, 278, 280, 289, 294, 302], "unnecessari": [219, 541], "setter": 221, "calib_dataload": [221, 303, 358, 499, 502, 523, 524, 526, 534, 535, 540, 541, 564, 565, 584, 585, 586, 587], "reason": [221, 497, 504, 523, 567, 587, 591, 593], "know": [221, 522, 529, 588], "torch_util": [222, 502, 585, 590], "metric_cl": [223, 327, 358, 541], "user_metr": [223, 327, 358], "alwai": [223, 270, 323, 327, 358, 526, 540, 541, 567, 587], "recommend": [223, 327, 502, 503, 524, 533, 553, 556, 561, 563, 581, 583, 593], "set_backend": 224, "base_dataload": 238, "default_dataload": 238, "fetcher": 238, "mxnet_dataload": 238, "onnxrt_dataload": [238, 352], "pytorch_dataload": 238, "tensorflow_dataload": [238, 356], "tensorflowimagefold": 246, "qlinear2qdq": 261, "qlinearop": [262, 526, 536, 553, 584, 596], "check_model": 262, "onnx_qlinear_to_qdq": 262, "input_name_to_nod": 262, "tf_to_fp32_onnx": 263, "tf_to_int8_onnx": 263, "int8_model": [263, 264, 503], "get_node_map": 264, "fp32_onnx_path": 264, "module_node_map": 264, "get_quantizable_onnx_op": 264, "quantize_nod": 264, "dynamic_quant_export": 264, "pt_fp32_model": 264, "pt_int8_model": 264, "weight_typ": 264, "s8": 264, "static_quant_export": 264, "_quantiz": 264, "torch_to_fp32_onnx": 264, "do_constant_fold": 264, "torch_to_int8_onnx": 264, "achiev": [265, 302, 531, 539, 541, 565, 580, 581, 582, 584, 590, 591, 593], "across": [265, 275, 302, 328, 525, 541, 544, 569, 572, 581, 585, 590, 593], "variou": [265, 275, 302, 328, 505, 536, 544, 545, 572, 581, 583, 585], "dl": [265, 275, 289, 294, 302, 328, 526, 535, 549, 562, 582, 596], "bring": [265, 302, 556, 569, 590], "vari": [265, 289, 294, 302, 567, 581, 590, 596], "roc": [265, 274, 289, 294, 302, 327], "flexibl": [265, 289, 294, 302, 502, 527, 569, 581, 587], "via": [265, 289, 294, 302, 497, 502, 529, 536, 541, 545, 562, 581, 582], "graph_optimization_conf": 265, "popular": [266, 319, 495, 502, 503, 504, 521, 527, 530, 531, 534, 539, 541, 581, 584, 587, 593, 594], "compress": [266, 289, 294, 319, 338, 482, 488, 495, 502, 510, 527, 536, 541, 562, 564, 579, 580, 581, 582, 584, 590, 594, 596], "techniqu": [266, 319, 495, 502, 536, 541, 545, 564, 580, 581, 582, 583, 584, 594, 595, 596], "pruner_legaci": 266, "pruning_recip": 266, "graph_optim": 266, "mixed_precis": [266, 328, 541], "model_convers": 266, "pruning_v2": 266, "unicoderegex": [267, 320], "hoc": [267, 320], "hack": [267, 320], "recogn": [267, 320, 593], "nondigit_punct_r": [267, 320], "compil": [267, 320, 541], "express": [267, 320, 497], "preced": [267, 320, 590, 593], "digit": [267, 320, 493, 582], "punct_nondigit_r": [267, 320], "symbol_r": [267, 320], "bleu_token": [267, 320], "mose": [267, 320], "smt": [267, 320], "mosesdecod": [267, 320], "mteval": [267, 320], "v14": [267, 320], "pl": [267, 320], "l954": [267, 320], "l983": [267, 320], "bilingu": [267, 320], "understudi": [267, 320], "qualiti": [267, 320, 522], "machin": [267, 320, 531, 537, 548, 562, 564, 570, 582, 590, 591], "translat": [267, 268, 320, 321, 544, 581, 593], "natur": [267, 320, 531], "approxim": [267, 268, 320, 321, 504, 540, 587], "glue": [267, 274, 320, 327, 524, 540, 541, 551], "word": [267, 320, 522, 540, 581, 587, 596], "ngram": [267, 320, 540], "breviti": [267, 268, 320, 321, 540], "penalti": [267, 268, 320, 321, 540], "doe": [267, 320, 376, 522, 523, 524, 540, 541, 587, 588, 592], "beam": [267, 320, 540], "bleu": [268, 273, 321, 326, 540, 581], "tensor2tensor": [268, 321], "bleu_hook": [268, 321], "compute_bleu": [268, 321], "reference_corpu": [268, 321], "translation_corpu": [268, 321], "max_ord": [268, 321], "use_bp": [268, 321], "against": [268, 321], "gram": [268, 321], "bleu_scor": [268, 321], "third": [270, 323, 498, 538], "parti": [270, 323, 498, 538, 584], "pycocotool": [270, 323, 532, 537], "noth": [270, 323, 593], "thu": [270, 323, 541, 581, 584], "cannot": [270, 323, 499, 522, 532, 587, 591], "jonathanhuang": [270, 323], "image_id": [270, 323, 540], "invok": [270, 323, 504], "groundtruth_dict": [270, 323], "exportgroundtruthtococo": [270, 323], "groundtruth_boxes_list": [270, 323], "groundtruth_classes_list": [270, 323], "max_num_class": [270, 323], "output_path": [270, 323], "detections_list": [270, 323], "exportdetectionstococo": [270, 323], "detection_boxes_list": [270, 323], "detection_scores_list": [270, 323], "detection_classes_list": [270, 323], "cocowrapp": [270, 323], "loadannot": [270, 323], "cocoevalwrapp": [270, 323], "agnostic_mod": [270, 323], "computemetr": [270, 323], "detection_typ": [270, 323], "bbox": [270, 323, 499, 540], "hold": [270, 306, 323, 362, 524], "iou_typ": [270, 323], "iou_thr": [270, 274, 323, 327, 540], "map_point": [270, 274, 323, 327, 540], "cocoev": [270, 323], "mscoco": [270, 323], "Then": [270, 323, 504, 526, 555, 557, 559, 560, 567, 590, 593], "exportsingleimagegroundtruthtococo": [270, 323], "next_annotation_id": [270, 323], "category_id_set": [270, 323], "groundtruth_box": [270, 323], "groundtruth_class": [270, 323], "groundtruth_mask": [270, 323], "groundtruth_is_crowd": [270, 323], "ingest": [270, 323], "here": [270, 323, 377, 504, 524, 529, 530, 531, 533, 534, 539, 540, 550, 557, 560, 562, 565, 568, 570, 584, 588, 589, 590, 596], "exportsingleimagedetectionstococo": [270, 323], "uniqu": [270, 303, 323, 584], "assign": [270, 323, 493, 529, 583, 593], "num_gt_box": [270, 323], "num_detect": [270, 274, 323, 327, 540, 541, 595], "image_height": [270, 323], "image_width": [270, 323], "detection_mask": [270, 323], "crowd": [270, 323], "insid": [270, 323, 527, 528, 563, 581, 585, 593], "exportsingleimagedetectionboxestococo": [270, 323], "detection_box": [270, 323, 541, 595], "detection_scor": [270, 323, 541, 595], "detection_class": [270, 323, 541, 595], "exporsingleimagedetectionboxestococo": [270, 323], "exportsingleimagedetectionmaskstococo": [270, 323], "allenai": [271, 272, 324, 325], "bi": [271, 272, 324, 325], "att": [271, 272, 324, 325], "flow": [271, 272, 324, 325, 499, 500, 541], "f1_score": [271, 272, 324, 325], "ground_truth": [271, 272, 324, 325], "f1": [271, 273, 274, 324, 326, 327, 529, 540, 541, 565, 589, 596], "ground": [271, 272, 324, 325], "truth": [271, 272, 324, 325], "metric_max_over_ground_truth": [271, 272, 324, 325], "metric_fn": [271, 272, 324, 325], "exact_match_scor": [271, 324], "exact": [271, 324], "articl": [271, 272, 324, 325], "paragraph": [271, 272, 324, 325], "qa": [271, 272, 324, 325, 502], "normalize_answ": [272, 325], "newlin": [272, 325, 493], "tab": [272, 325, 562, 591], "harmon": [272, 274, 325, 327], "recal": [272, 274, 325, 327], "answer_start": [272, 325], "177": [272, 325, 596], "denver": [272, 325], "bronco": [272, 325], "nfl": [272, 325], "afc": [272, 325], "super": [272, 325, 500], "bowl": [272, 325], "50": [272, 325, 500, 504, 567, 581, 590, 596], "56be4db0acb8001400a502ec": [272, 325], "form": [272, 325, 526, 527, 562], "percentag": [272, 325, 521, 587, 595], "bleu_util": [273, 326], "coco_label_map": [273, 326], "coco_tool": [273, 326], "evaluate_squad": [273, 326], "tensorflowmetr": [274, 327], "maintain": [274, 327, 497, 498, 522, 543, 545, 557, 560, 564, 569, 570, 581, 587, 588], "pytorchmetr": [274, 327], "mxnetmetr": [274, 327], "onnxrtqlmetr": [274, 327], "onnxrtitmetr": [274, 327], "metric_registri": [274, 327], "metric_typ": [274, 327], "decorator_metr": [274, 327], "basemetr": [274, 327, 358], "single_output": [274, 327], "hvd": [274, 327, 529], "wrappytorchmetr": [274, 327], "wrapmxnetmetr": [274, 327], "wraponnxrtmetr": [274, 327], "proport": [274, 327], "pred_list": [274, 327], "pytorchloss": [274, 327], "mae": [274, 327, 540], "compare_label": [274, 327, 358, 540], "actual": [274, 327, 529], "rmse": [274, 327, 540, 593], "squar": [274, 309, 327, 367, 526, 540, 567, 593], "tensorflowtopk": [274, 327], "k": [274, 327, 358, 540, 564, 581], "among": [274, 327, 544, 556, 590], "outcom": [274, 327], "num_correct": [274, 327], "num_sampl": [274, 327], "generaltopk": [274, 327], "cocomapv2": [274, 327, 540], "anno_path": [274, 327, 540], "map_kei": [274, 327], "detectionboxes_precis": [274, 327], "output_index_map": [274, 327, 540], "tensorflowmap": [274, 327], "tensorflowcocomap": [274, 327], "tensorflowvocmap": [274, 327], "squadf1": [274, 327, 540], "miou": [274, 327], "num_class": [274, 327], "21": [274, 327, 550, 551, 573, 576, 577, 582, 590, 596], "iou": [274, 327], "intersect": [274, 327, 503, 540], "union": [274, 327, 482, 540, 573], "onnxrtglu": [274, 327], "dlrm": [274, 327], "modelconvers": 276, "typic": [276, 303, 500, 502, 528, 530, 534, 567, 581, 596], "basicna": 277, "model_build": [277, 280], "conf_fnam": 277, "basic_na": 279, "nas_util": 279, "nasbas": [280, 500], "nas_registri": 281, "nas_method": 281, "create_search_space_pool": 281, "idx": [281, 524], "enumer": [281, 482, 503, 527, 528, 529, 541, 544, 580, 581, 591], "find_pareto_front": 281, "pareto": [281, 500], "front": [281, 500], "n_point": 281, "n_metric": 281, "n_pareto_point": 281, "gridsearch": 282, "whole": [282, 505, 564, 584, 596], "randomsearch": 282, "bayesianoptimizationsearch": 282, "pruner": [283, 284, 285, 286, 287, 289, 294, 295, 297, 300, 541, 581, 595], "gradientsensitivityprun": 283, "pytorchmodel": [283, 284, 286, 287, 288, 337], "overwritten": [283, 284, 286, 287, 288, 550], "grouplassoprun": 284, "legaci": 285, "gradient_sensit": 285, "group_lasso": 285, "basicmagnitudeprun": 286, "patternlockprun": [287, 299], "pruner_registri": 288, "clase": 288, "pruningconf": [289, 294], "tfpruningcallback": [289, 294], "input_model": [289, 294, 543, 565, 566, 567, 591], "callback": [289, 294, 482, 485, 499, 541, 580, 581, 584], "pure": [289, 294, 581], "tile_pattern": 291, "pattern_registri": 292, "pattern_typ": 292, "patternbas": 292, "mask_shap": [292, 293], "is_contigu": 292, "tile": [293, 522], "tilepatternbas": 293, "tilepattern_1x1": 293, "1x1": [293, 527, 541, 581], "tilepattern_2x2": 293, "2x2": [293, 590], "tilepattern_1x16": 293, "1x16": 293, "tilepattern_4x1": 293, "tilepattern_1x2": 293, "1x2": [293, 590], "logger": [295, 483, 486, 493], "prune_util": 295, "patternnxm": 297, "patternninm": 297, "reset_non_value_to_default": 298, "parse_not_to_prun": 298, "update_frequency_on_step": [299, 583], "max_sparsity_ratio_per_lay": [299, 583], "magnitudeprun": 299, "snipprun": 299, "snipmomentumprun": 299, "moreoev": 299, "quantconf": 302, "separ": [303, 497, 522, 535, 538, 570, 572, 580, 583], "opt_model": [303, 541], "fulli": [303, 541, 570, 584, 590], "train_func": [303, 482, 529, 541, 584], "automixedprecisiontunestrategi": [304, 360], "basictunestrategi": [305, 361], "stage": [305, 310, 359, 361, 368, 527, 581, 591, 593], "polici": [305, 309, 359, 361, 367, 497, 502, 595, 597], "bayesiantunestrategi": [306, 362], "acq_max": [306, 362], "ac": [306, 362], "gp": [306, 362], "y_max": [306, 362], "n_warmup": [306, 362], "10000": [306, 362, 581], "n_iter": [306, 362], "acquisit": [306, 362], "gaussian": [306, 362, 593], "relev": [306, 362, 504, 505, 522, 567, 581], "acq": [306, 362], "randomst": [306, 362], "scipi": [306, 362], "x_max": [306, 362], "targetspac": [306, 362], "pbound": [306, 362], "9527": [306, 362, 541, 595], "bayesianoptim": [306, 362], "exhaustivetunestrategi": [307, 364], "auto_mixed_precis": [308, 366], "msetunestrategi": [309, 367], "mse_v2tunestrategi": [310, 368], "revert": [310, 318, 368, 376, 593], "randomtunestrategi": [311, 369], "strategy_registri": [312, 370, 593], "tunestrategi": [312, 370, 593], "tuning_sampl": [314, 372], "tuning_spac": [314, 315, 317, 372, 373, 375], "tuning_struct": [314, 315, 316, 372, 373, 374], "tuningsamplerregistri": 315, "tuningsampl": [315, 373], "tuningord": [315, 373], "Not": [315, 316, 373, 374, 493, 500, 522], "tuningspac": [315, 316, 373, 374], "tuning_order_lst": [315, 373], "initial_op_tuning_cfg": [315, 373], "modelwisetuningsampl": [315, 373], "tuning_items_prior": [315, 373], "op_dtype_dict": [315, 373], "optuningconfig": [315, 316, 317, 373, 374, 375], "optypewisetuningsampl": [315, 373], "opwisetuningsampl": [315, 373], "fallbacktuningsampl": [315, 373], "op_dtyp": [315, 373], "accumul": [315, 373, 544, 593], "skip_first": [315, 373], "smoothquantsampl": [315, 373], "tuningitem": [316, 374], "item_typ": [316, 374], "pattern_to_intern": [316, 374], "default_dtyp": [316, 374], "pattern_to_path": [316, 374], "quant_mode_from_pattern": [316, 374], "internal_pattern": [316, 374], "initial_tuning_cfg_with_quant_mod": [316, 374], "op_name_typ": [316, 374], "step1": [316, 374], "step2": [316, 374], "complet": [316, 374, 503, 504, 581, 584, 593, 595, 596], "step3": [316, 374], "step4": [316, 374], "step5": [316, 374], "op_quant_mod": [317, 375], "ordereddefaultdict": [318, 376], "extract_data_typ": [318, 376], "data_typ": [318, 376], "sign": [318, 376, 498, 502, 505, 521, 564, 582, 584, 587, 589], "reverted_data_typ": [318, 376], "signed_flag": [318, 376], "get_adaptor_nam": [318, 376], "experiment": [319, 500, 524, 528, 529, 531, 537, 541, 581, 583, 584, 588, 592], "sub_class": [327, 358], "register_customer_metr": 327, "topk": [327, 358, 529, 540, 541, 564, 584], "frozen": [328, 336, 358, 473, 543], "savedmodel": [328, 336, 358, 473], "onnx_ml_pb2": [328, 543], "hybirdblock": [328, 358], "basemodel": [329, 473], "plai": [329, 473, 582, 587, 590], "role": [329, 473, 587, 590], "base_model": 330, "keras_model": 330, "mxnet_model": 330, "nets_factori": 330, "onnx_model": [330, 339, 340, 352, 565], "tensorflow_model": [330, 356, 567], "torch_model": 330, "kerasmodel": [331, 473], "get_model_fwk_nam": 332, "fwk": 332, "mxnetmodel": 333, "net": [334, 474, 502], "factori": [334, 474], "tfslimnetsfactori": [334, 474], "get_model_typ": [336, 473], "validate_graph_nod": [336, 473], "validate_and_inference_input_output": [336, 473], "graph_sess": [336, 473], "graph_def_sess": [336, 473], "frozen_pb_sess": [336, 473], "load_saved_model": [336, 473], "saved_model_tag": [336, 473], "signatur": [336, 473], "metagraphdef": [336, 473], "try_loading_kera": [336, 473], "keras_sess": [336, 473], "slim_sess": [336, 473], "checkpoint_sess": [336, 473], "estimator_sess": [336, 473], "saved_model_sess": [336, 473], "tensorflowbasemodel": [336, 356, 473], "tensorflowsavedmodelmodel": [336, 473], "tensorflowllmmodel": [336, 473], "exceed": [336, 473], "2gb": [336, 473], "tensorflowqatmodel": [336, 473], "tensorflowcheckpointmodel": [336, 473], "tensorflowmodel": [336, 473], "pytorchbasemodel": 337, "pytorchfxmodel": 337, "ipexmodel": 337, "driven": [338, 502, 541, 562, 579, 591], "objective_registri": 338, "objective_custom_registri": 338, "obj_cl": 338, "eural_compressor": 338, "objective_cl": 338, "user_object": 338, "__class__": 338, "__name__": 338, "objective_cfg": 338, "deep_get": 338, "usr_cfg": 338, "deep_set": 338, "user_obj_cfg": 338, "easili": [338, 503, 546, 550, 562, 579, 590], "peak": [338, 579], "multiobject": 338, "metric_criterion": 338, "metric_weight": 338, "obj_criterion": 338, "obj_weight": 338, "is_measur": 338, "calibrationdataread": [339, 340], "pathlib": 340, "parserfactori": 343, "onnxrtparserfactori": 344, "onnxprofilingpars": 345, "respons": [345, 346, 349, 575, 576, 577, 584], "profilingpars": 346, "profilingresult": 347, "total_execution_tim": 347, "accelerator_execution_tim": 347, "cpu_execution_tim": 347, "op_run": 347, "op_defin": 347, "tensorflowparserfactori": 348, "tensorflowprofilingpars": 349, "profilerfactori": [350, 351, 355], "create_onnx_config": 353, "ort": 353, "sessionopt": 353, "delete_assign": 357, "create_tf_config": 357, "tf_modul": 357, "configproto": 357, "set_eager_execut": 357, "entir": [358, 482, 499, 504, 505, 521, 569, 581], "autotunestrategi": 359, "conservativetunestrategi": 363, "o0": [363, 593], "who": [363, 497], "hawq_v2tunestrategi": 365, "made": [365, 503, 584, 588, 593], "impact": [365, 581, 588, 593], "tunestrategymeta": 370, "metaclass": 370, "lowerbitssampl": 373, "blockfallbacktuningsampl": 373, "op_block_lst": 373, "target_dtyp": 373, "alpha_list": 373, "weightonlyquantsampl": 373, "quantopt": 376, "quant_typ": 376, "quant_opt": 376, "preprocess_user_cfg": 376, "op_user_cfg": 376, "op_user_cfg_modifi": 376, "build_slave_faker_model": 376, "slave": [376, 593], "virtual": [376, 582], "classregist": 376, "fun": 377, "attribute1": 377, "module_debug_level1": 377, "debug": [377, 489, 526, 555, 559, 563, 593, 594], "function1": 377, "param1": 377, "param2": 377, "parameter1": 377, "parameter2": 377, "function2": 377, "pep": [377, 522], "484": [377, 596], "output_model": [377, 541, 565, 567, 591], "function3": 377, "section": [377, 505, 522, 526, 527, 528, 562, 565, 568, 581, 583, 587, 595], "restructuredtext": 377, "liter": 377, "generator1": 377, "example_gener": 377, "exampleclass": 377, "param3": 377, "public": [377, 497, 557, 560], "attr1": 377, "attr2": 377, "attr5": 377, "tensorflowconfig": 380, "tensorflowconfigconvert": 380, "quant_config": [380, 544], "staticquantconfig": 380, "algo": [380, 485], "dummydatasetv2": 472, "half": [479, 480, 542, 553], "halfprecisionconvert": 479, "configs_map": 479, "halfprecisionmodulewrapp": 480, "loop": [482, 499, 500, 504, 505, 533, 572, 589, 593], "compressionmanag": 482, "deal": 482, "pruningconfig": 482, "orchestr": [482, 502, 536, 594], "on_train_begin": [482, 499, 527, 528, 541, 580, 581, 584], "train_loop": [482, 541, 580], "on_epoch_begin": [482, 485, 527, 528, 541, 580], "on_step_begin": [482, 485, 527, 528, 541, 580, 581], "on_after_compute_loss": [482, 527, 528, 541, 580], "backward": [482, 527, 528, 529, 541, 580, 581, 584, 588], "on_before_optimizer_step": [482, 527, 528, 541, 580, 581], "on_step_end": [482, 485, 527, 528, 541, 580], "on_epoch_end": [482, 485, 527, 528, 541, 580], "on_train_end": [482, 527, 528, 541, 580, 581, 584], "path_to_sav": 482, "manag": [482, 485, 541, 545, 546, 556], "top1": [482, 540, 564, 581, 584, 596], "callbacks_list": 482, "layerhistogramcollector": 483, "layer_tensor": 483, "include_lay": 483, "get_func_from_config": 485, "func_dict": 485, "get_preprocess": 485, "get_metr": 485, "get_postprocess": 485, "get_algorithm": 485, "create_dataset": 485, "cfg_preprocess": 485, "cfg_filter": 485, "create_dataload": 485, "dataloader_cfg": 485, "create_eval_func": 485, "postprocess_cfg": 485, "fp32_baselin": [485, 503], "baselin": [485, 589, 590, 591], "create_train_func": 485, "train_cfg": 485, "Their": 485, "auxiliari": 486, "collect_layer_histogram": 486, "create_obj_from_config": 486, "kl_diverg": 486, "load_huggingfac": [486, 541], "neural_insights_util": 486, "weights_detail": 486, "pretrain": [488, 545, 551], "optimizedmodel": 488, "from_pretrain": [488, 502, 541], "save_for_huggingface_upstream": [488, 541], "export_compressed_model": [488, 587], "saved_dir": [488, 587], "use_optimum_format": [488, 587], "enable_full_rang": [488, 585, 587], "compression_dtyp": [488, 587], "int32": [488, 524, 587], "compression_dim": [488, 587], "scale_dtyp": [488, 587], "comoress": 488, "msg": [489, 571, 575, 576], "fatal": 489, "warn": [489, 522], "alia": [489, 493, 547, 552], "register_neural_insights_workload": 490, "workload_loc": [490, 493], "workload_mod": 490, "workload_nam": 490, "uuid": 490, "update_neural_insights_workload": 490, "workload_uuid": 490, "update_neural_insights_workload_accuracy_data": 490, "baseline_accuraci": 490, "optimized_accuraci": 490, "get_model_path": 490, "is_int8_model": 492, "load_weight_onli": 492, "checkpoint_dir": 492, "layer_wis": [492, 585], "history_cfg": 492, "best_configur": 492, "best_model_weight": 492, "snapshot": [492, 566], "recover_model_from_json": 492, "json_file_path": 492, "cfg_from_fil": 493, "yaml_fil": [493, 524, 529], "lazyimport": 493, "lazi": 493, "till": [493, 593], "time_limit": 493, "get_siz": 493, "seen": [493, 503], "compute_spars": 493, "fault_tolerant_fil": 493, "equal_dict": 493, "d2": 493, "compare_kei": 493, "ignore_kei": 493, "ignor": [493, 521, 524, 587, 590, 593], "cpuinfo": 493, "dump_elapsed_tim": [493, 503], "customized_msg": 493, "elaps": 493, "combine_histogram": 493, "old_hist": 493, "old": [493, 541, 588], "get_tensor_histogram": 493, "get_all_fp32_data": 493, "get_tuning_histori": 493, "tuning_history_path": 493, "num": 493, "offlin": [493, 497, 541, 584, 590], "str2arrai": 493, "dequantize_weight": 493, "weight_tensor": 493, "min_filter_tensor": 493, "max_filter_tensor": 493, "scale_info": 493, "captureoutputtofil": 493, "tmp_file_path": 493, "stream": [493, 596], "sy": [493, 522, 548], "stderr": 493, "captur": 493, "statist": [493, 494], "header": [493, 532], "field_nam": 493, "output_handl": 493, "printer": 493, "global_st": 493, "load_data_from_pkl": 493, "pkl": [493, 566], "dump_data_to_loc": 493, "show_memory_info": 493, "hint": 493, "dump_class_attr": 493, "compare_object": 493, "obj1": 493, "obj2": 493, "ignore_attr": 493, "comparison": [493, 587, 588, 591], "alias_param": 493, "param_nam": 493, "param_alia": 493, "alias": [493, 522], "print_tabl": 493, "column_map": 493, "table_entri": 493, "titl": [493, 538, 563, 593], "insert_newlin": 493, "prettyt": 493, "column": [493, 587, 590], "handler": [493, 593], "row": [493, 526, 565, 590], "decim": 493, "get_tensors_info": 493, "get_weights_detail": 493, "weightdetail": 493, "dump_tabl": 493, "file_typ": 493, "csv": [493, 500, 565, 566], "dump_table_to_csv": 493, "get_number_of_socket": 493, "platform": [493, 502, 536, 545, 553, 572, 582, 584], "opentri": 493, "activation_min": 493, "activation_max": 493, "print_op_list": 493, "get_op_list": 493, "minmax_file_path": 493, "input_model_tensor": 493, "optimized_model_tensor": 493, "activation_min_max": 493, "calculate_ms": 493, "mse_metric_gap": 493, "fp32_tensor": 493, "dequantize_tensor": 493, "euclidean": [493, 527], "distanc": [493, 527], "check_key_exist": 493, "weightsdetail": 494, "input_tensor_data": 494, "optimized_tensor_data": 494, "weightsstatist": 494, "welcom": [496, 497, 498, 502, 564, 571, 597], "interest": [497, 502, 564, 591], "foster": 497, "particip": [497, 572], "commun": [497, 564], "harass": 497, "experi": [497, 545, 567, 589, 590, 593], "everyon": 497, "regardless": 497, "ag": 497, "bodi": 497, "ethnic": 497, "sex": 497, "characterist": 497, "gender": 497, "educ": 497, "socio": 497, "econom": 497, "person": [497, 582], "race": 497, "religion": 497, "sexual": 497, "orient": 497, "contribut": [497, 502, 581], "inclus": 497, "Being": 497, "respect": [497, 533, 581, 590, 595], "viewpoint": 497, "gracefulli": 497, "focus": [497, 503, 544], "empathi": 497, "toward": [497, 527], "member": [497, 503], "unaccept": 497, "imageri": 497, "unwelcom": 497, "troll": 497, "insult": 497, "derogatori": 497, "polit": 497, "attack": 497, "privat": 497, "publish": [497, 538, 539, 542, 563, 590], "electron": 497, "explicit": 497, "permiss": 497, "inappropri": 497, "profession": 497, "clarifi": 497, "appropri": [497, 521, 590], "fair": 497, "action": [497, 557, 560], "edit": 497, "reject": 497, "commit": [497, 498], "wiki": 497, "issu": [497, 498, 501, 502, 537, 565, 567, 584, 591], "ban": 497, "temporarili": 497, "deem": 497, "threaten": 497, "offens": 497, "harm": 497, "mail": 497, "social": [497, 582], "media": [497, 582], "account": [497, 589, 593], "appoint": 497, "onlin": [497, 589], "event": [497, 591], "abus": 497, "report": [497, 498, 502, 572, 589], "contact": [497, 588, 589], "complaint": 497, "review": [497, 498, 502, 582], "investig": [497, 522, 567], "circumst": [497, 583], "oblig": [497, 568], "confidenti": [497, 564], "regard": [497, 586], "incid": 497, "good": [497, 584, 593], "faith": 497, "repercuss": 497, "leadership": 497, "adapt": [497, 504, 524, 544, 553, 582], "faq": [497, 502], "page": [497, 498, 564, 567, 568], "send": [498, 504], "view": [498, 502, 530, 553, 562, 568, 588], "star": 498, "repositori": [498, 557, 560], "button": [498, 536, 556, 562], "fork": [498, 557, 560], "clone": [498, 526, 537, 555, 559, 564, 566, 567, 569, 570], "pc": 498, "git": [498, 526, 532, 537, 564, 566, 567, 569, 570], "modif": [498, 503, 533, 550, 569], "checkout": 498, "my": 498, "push": [498, 544, 581, 587, 590], "cover": [498, 531, 535, 582], "would": [498, 541, 566, 581, 584, 590], "adopt": [498, 545, 581, 582, 590], "certif": [498, 564], "agre": 498, "pr": [498, 523, 540, 557, 560, 588], "At": [498, 504, 544, 568, 572, 593], "approv": 498, "solv": [498, 584, 588], "licens": 498, "azur": [498, 502, 582], "devop": 498, "ci": 498, "cloud": [498, 502, 544, 572, 582], "deploi": [498, 527, 541, 568, 572, 587, 593], "e16": 498, "v5": 498, "scan": [498, 502], "pylint": 498, "bandit": 498, "copyright": [498, 538], "docstyl": 498, "spellcheck": 498, "dco": 498, "pytest": 498, "No": [498, 522, 532, 541, 570, 571, 582], "failur": [498, 499], "fault": 498, "coverag": 498, "runtim": [498, 502, 503, 504, 506, 523, 526, 530, 533, 536, 542, 544, 547, 552, 553, 583, 587, 588, 593], "submit": [498, 569, 572, 582], "bug": [498, 502], "intend": 498, "safe": 498, "collabor": [498, 502, 547, 553], "adher": 498, "toolkit": [499, 537, 545, 553, 582, 594], "tracer": 499, "resolv": [499, 501], "floatfunct": 499, "cat": [499, 531, 548, 575, 576, 577], "done": [499, 527, 528, 546, 562, 571, 575, 576, 581, 584], "10004": [499, 500, 503, 523, 527, 528, 529, 533, 536, 542, 544, 580, 583, 585, 587, 595], "neural_compressor": [499, 500, 502, 505, 520, 522, 523, 524, 526, 527, 528, 529, 531, 534, 535, 540, 541, 542, 543, 544, 564, 565, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 593, 595], "eval": [499, 522, 523, 526, 545, 584, 591], "conduct": [499, 541, 550, 562, 593, 594], "imper": 499, "therefor": [499, 541, 565, 567, 581, 584, 585, 588, 590], "lot": [499, 567, 590], "As": [499, 504, 523, 527, 540, 541, 556, 567, 581, 587, 593], "successfulli": [499, 502, 529, 571, 575, 576, 577, 582], "suggest": [499, 522, 589], "traceabl": 499, "proxi": 499, "tutori": [499, 553, 582, 594], "prototyp": 499, "html": [499, 502, 504, 521, 529, 536, 557, 560, 563, 565, 571, 575, 584], "highlight": 499, "untrac": 499, "ssd": [499, 531, 596], "resnet34": [499, 596], "r34": 499, "bboxes_labels_scor": 499, "prob": 499, "45": [499, 539, 596], "max_output": 499, "zip": [499, 571, 575, 576], "dbox": 499, "dlabel": 499, "dscore": 499, "decode_singl": 499, "autom": [500, 545, 562, 563, 582, 590], "artifici": 500, "ann": 500, "par": [500, 572], "outperform": 500, "hand": 500, "propos": [500, 503, 527, 542, 587, 590], "potenti": [500, 526], "procedur": [500, 581, 593], "lie": [500, 521], "predictor": 500, "shown": [500, 523, 526, 527, 540, 541, 544, 556, 565, 567, 579, 580, 581, 585, 590, 593], "figur": [500, 555, 556, 559, 585], "popul": 500, "inner": 500, "evolutionari": 500, "cycl": 500, "until": [500, 504, 593], "conclud": 500, "met": [500, 533, 584, 591], "yet": [500, 557, 560, 563, 570, 584], "simplest": [500, 521, 548], "launcher": [500, 502, 527, 528, 553, 594], "agent": 500, "nsga2": 500, "supernet": 500, "ofa_mbv3_d234_e346_k357_w1": 500, "acc": [500, 539, 572, 581, 591, 596], "mac": [500, 563], "num_ev": 500, "250": [500, 581], "results_csv_path": 500, "search_result": 500, "dataset_path": 500, "ilsvrc2012": 500, "aim": [500, 502, 539, 545, 581, 590, 593, 594], "mobilenetv3": 500, "lt": [500, 524], "wmt": 500, "en": 500, "de": 500, "guidelin": [501, 502], "mainstream": [502, 594], "deep": [502, 503, 504, 523, 536, 537, 541, 542, 544, 545, 547, 550, 551, 553, 556, 562, 582, 584, 593, 594], "learn": [502, 503, 504, 523, 524, 531, 535, 536, 537, 541, 542, 544, 545, 547, 550, 551, 553, 556, 557, 560, 562, 581, 582, 584, 590, 591, 593, 594], "workflow": [502, 504, 505, 526, 527, 531, 537, 542, 544, 557, 560, 564, 591, 594], "particular": [502, 581, 587], "wide": [502, 530, 542, 581, 584], "hardwar": [502, 503, 527, 536, 541, 544, 562, 581, 582, 583], "xeon": [502, 537, 538, 539, 542, 582, 584, 586, 596], "scalabl": [502, 537, 539, 542, 582, 584, 586], "processor": [502, 539, 542, 570, 582, 584, 586], "flex": [502, 537], "amd": [502, 537, 596], "arm": [502, 536, 537, 596], "nvidia": [502, 521, 536, 537, 596], "llama2": 502, "falcon": [502, 539, 581, 590, 596], "gpt": [502, 539, 566, 581, 590, 596], "j": [502, 539, 566, 581, 590, 596], "bloom": [502, 539, 581, 590, 596], "broad": [502, 536, 551, 594], "stabl": [502, 537, 581, 582], "diffus": [502, 582], "vision": [502, 531, 549, 590], "coder": [502, 536, 546, 547, 550, 553, 556, 569, 573, 582], "marketplac": [502, 563, 582], "googl": [502, 522, 542, 582], "amazon": [502, 545, 553], "web": [502, 564, 570, 575, 576, 577, 591], "servic": [502, 562, 569, 582], "softwar": [502, 538, 581, 582, 588], "alibaba": [502, 552, 559, 560, 582], "tencent": [502, 582], "taco": [502, 582], "oliv": [502, 582], "ai": [502, 544, 545, 582, 586, 594], "ecosystem": [502, 582], "lightn": [502, 552], "2024": [502, 596], "03": [502, 596], "sota": [502, 582], "autoround": [502, 539], "gaudi2": 502, "pip": [502, 526, 529, 532, 534, 537, 547, 550, 555, 557, 559, 560, 564, 565, 566, 567, 588], "34": [502, 539, 577, 596], "program": [502, 529, 538, 545, 562], "demonstr": [502, 530, 544, 545, 575, 576, 577, 591], "gauid2": 502, "docker": 502, "gaudi": 502, "stack": 502, "setup": [502, 526, 533, 537, 557, 560, 564, 566, 567, 569, 570, 581], "habana": 502, "habana_visible_devic": 502, "ompi_mca_btl_vader_single_copy_mechan": 502, "cap": 502, "sys_nic": 502, "host": [502, 529, 570, 572, 575, 576, 577], "ipc": 502, "vault": 502, "ubuntu22": 502, "04": [502, 537, 539, 596], "habanalab": 502, "latest": [502, 537, 582, 588], "login": [502, 557, 560, 589], "exec": 502, "container_id": 502, "bash": [502, 567, 591], "optimum": [502, 552, 553, 565, 587], "upgrad": [502, 541], "auto_round": 502, "automodel": 502, "autotoken": [502, 541], "get_dataload": 502, "eleutherai": [502, 539, 566, 590, 596], "neo": [502, 596], "125m": [502, 590], "trust_remote_cod": 502, "seqlen": 502, "woq_conf": 502, "quantized_model": [502, 571, 575, 576], "int4": [502, 539, 584, 596], "resnet18": [502, 542, 547, 596], "static_quant_conf": 502, "overview": [502, 593], "jupyterlab": [502, 545, 551, 553, 555, 559, 594], "studio": [502, 553, 562, 572, 594], "topic": 502, "fp4": [502, 544, 587], "nf4": [502, 587], "fp8": [502, 544, 582], "innov": [502, 553, 582], "blog": [502, 582], "llama": [502, 539, 581, 582, 585, 587, 590, 596], "oct": [502, 582], "2023": [502, 544, 577, 581, 587, 590], "emnlp": [502, 582], "teq": [502, 582, 585, 587], "trainabl": [502, 582, 587], "sep": [502, 582], "releas": [502, 537, 551, 553, 555, 559, 561, 573, 576, 577, 597], "legal": [502, 597], "request": [502, 570, 571, 572, 575, 576, 577, 584], "ask": [502, 537], "email": 502, "research": [502, 538, 590, 596], "idea": [502, 564, 581, 590, 593], "discord": 502, "join": [502, 565, 570, 575, 576], "technic": 502, "discuss": 502, "wechat": [502, 582], "img": 502, "bridg": [503, 504, 536], "vanilla": [503, 504, 536], "adaptor_registri": 503, "abcadaptor": 503, "__init__": [503, 522, 523, 524, 540, 593], "query_fw_cap": [503, 505], "query_fused_pattern": 503, "he": 503, "besid": [503, 527, 567, 587], "describ": [503, 505, 522, 526, 533, 564, 591], "past": [503, 587], "mainten": 503, "difficult": [503, 590], "abil": [503, 504, 524, 533, 544, 590], "fragment": 503, "scenario": [503, 520, 527, 541, 581, 587], "granular": [503, 504, 505, 533, 536, 544, 548, 584, 590, 595], "semant": [503, 533], "querybackendcap": [503, 504], "mla": [503, 542, 584], "becom": [503, 531, 581, 587], "explor": [503, 544], "onnxrt_qlinearopsadaptor": 503, "inspect_tensor": 503, "op_list": [503, 591], "iteration_list": 503, "inspect_typ": 503, "save_to_disk": 503, "quantization_cfg": 503, "set_tensor": 503, "tensor_dict": 503, "diagnosis_help": 503, "fw": 504, "outlin": [504, 505], "instruct": [504, 505, 527, 537, 542, 557, 560, 564, 565, 566, 567, 581, 582, 583, 584, 590, 596], "extend": [504, 505], "accommod": [504, 505], "incorpor": [504, 505, 528, 581, 593], "give": [504, 562, 593], "diagram": [504, 505, 526, 593], "illustr": [504, 505, 528, 593], "sequencediagram": [504, 505, 572], "autonumb": [504, 505], "query_framework_cap": 504, "opwis": 504, "optypewis": 504, "travers": [504, 505, 587, 593], "\u2776": 504, "\u2777": 504, "\u2778": 504, "\u2779": 504, "\u277a": 504, "\u277b": 504, "\u277c": 504, "These": [504, 536, 565], "chapter": 504, "node_op": 504, "confirm": 504, "chosen": [504, 521], "tune_config": 504, "int8_conv_config": 504, "optype_wise_": 504, "per_tensor": [504, 505, 533, 584, 595], "tuning_cfg_to_fw": 504, "Its": [504, 521, 581], "calib_iter": 504, "dispatch": [504, 536, 569, 572], "is_perchannel": 504, "is_asymmetr": 504, "weight_bit": 504, "convert_bf16": 504, "larger": [504, 581, 587, 590], "somewhat": 504, "distort": 504, "line": [504, 522, 529, 536, 545, 550, 551, 570, 591], "explain": [505, 526, 590], "let": [505, 533, 550, 581, 583, 595], "overal": [505, 570, 595], "drive": 505, "uint4": 505, "asymmetr": [505, 584, 587, 593], "kullback": [505, 527], "leibler": [505, 527], "pytorch_cpu": 505, "1_11_capabl": 505, "cap_s8_1_11": 505, "cap_s8_1_11_conv1d": 505, "per_channel_symmetr": 505, "addition": [505, 529, 581, 593], "per_tensor_symmetr": 505, "One": [505, 522, 524, 529, 536, 567, 581, 582, 593], "due": [505, 531, 581, 584, 590, 591], "nativ": 505, "with_arg": 505, "qscheme": 505, "torch_dtyp": 505, "quant_min": 505, "quant_max": 505, "linux": [520, 532, 537, 556, 562], "x86_64": 520, "aarch64": 520, "prove": [521, 587, 590], "benefici": 521, "uniform": [521, 587], "\u03b2": 521, "\u03b1": 521, "fundament": [521, 541], "primari": [521, 593], "focu": [521, 593], "essenti": [521, 532], "remaind": 521, "enhanc": [521, 545, 581, 582, 586], "resolut": 521, "extrem": 521, "still": [521, 541, 568, 582, 584, 586], "retain": 521, "noteworthi": 521, "vanhouck": 521, "vincent": 521, "andrew": 521, "senior": 521, "mark": 521, "mao": 521, "speed": [521, 541, 553, 581, 582, 584, 593], "2011": 521, "szymon": 521, "migacz": 521, "2017": 521, "mckinstri": 521, "jeffrei": 521, "l": [521, 527, 591, 593], "discov": [521, 591], "preprint": [521, 544, 581, 587, 590], "1809": 521, "04191": 521, "2018": 521, "mostli": 522, "overli": 522, "argu": 522, "decis": [522, 540], "prioriti": [522, 573], "sub_modul": 522, "namespac": 522, "pollut": 522, "subprocess": [522, 523], "popen": 522, "statement": 522, "pipe": 522, "long_str": 522, "extran": 522, "pager": 522, "getenv": 522, "readabl": 522, "seem": 522, "worth": [522, 581], "4f": 522, "65421": 522, "sentenc": 522, "register_config": 522, "framework_nam": 522, "algo_nam": 522, "eval_result": 522, "declar": [522, 563], "complex": [522, 541, 542, 581], "typealia": 522, "_lossandgradi": 522, "complextfmap": 522, "xx_func": 522, "ordereddict": 522, "pylanc": 522, "cheeseshopaddress": 522, "chees": 522, "shop": 522, "outofcheeseerror": 522, "crbug": 522, "192795": 522, "cpufreq": [522, 548], "deprec": [522, 557, 560, 588, 592], "facilit": [522, 545], "__all__": 522, "get_all_config_set_from_config_registri": 522, "baseconfig": 522, "composableconfig": 522, "fwk_name": 522, "algorithm_entri": 522, "autotun": 522, "static_qu": 522, "snippet": [522, 536], "register_algo": 522, "rtn_algo_entri": 522, "smooth_quant_entri": 522, "vscode": [522, 561, 563], "settings_recommend": 522, "encount": 523, "consum": 523, "previous": 523, "lack": [523, 532], "faster": [523, 525, 531, 582, 593, 596], "Of": 523, "evenli": 523, "divid": [523, 572, 590, 593], "discard": 523, "throw": 523, "awai": 523, "draw": [523, 589, 593], "pin": [523, 555, 559], "reshuffl": 523, "manner": [523, 527, 543], "newdataload": 523, "customis": [523, 524, 540], "ensp": [524, 592], "imagerecord": [524, 529, 595], "image_nam": 524, "cocorecord": 524, "gt": [524, 590, 592], "int64": 524, "offer": [524, 544], "style_transf": 524, "content": [524, 570, 571, 575, 576, 577], "tfrecorddataset": 524, "labelbal": 524, "300": [524, 581], "16": [524, 537, 575, 587, 596], "helloworld": [524, 542, 592], "aid": 525, "deploy": [525, 545, 562, 582, 585, 590], "infrastructur": 525, "gap": [526, 543], "diagnos": 526, "gui": [526, 536, 567, 581], "termin": [526, 555, 556, 559, 565], "repeat": [526, 593], "durat": [526, 571, 575, 576, 589], "cd": [526, 529, 537, 564, 566, 567, 569, 570, 575, 576, 577], "ilsvr2012": 526, "wget": [526, 532, 534, 564, 567], "caff": 526, "berkeleyvis": 526, "caffe_ilsvrc12": 526, "xvzf": 526, "image_recognit": [526, 567, 591], "resnet50_torchvis": 526, "ptq_static": [526, 566], "resnet50_v1": [526, 529, 541], "dataset_loc": [526, 567, 575, 591], "label_path": 526, "quantiti": 526, "vec": 526, "mu": 526, "frac": [526, 544, 590], "sigma": 526, "var": 526, "happen": 526, "dispers": [526, 565], "rule": [526, 545, 581], "v0": [526, 539, 567, 590, 591], "cg": [526, 567, 591], "conv0": [526, 567, 591], "expens": [527, 541, 593], "power": [527, 541, 544, 556, 582], "mobil": [527, 541, 596], "produc": 527, "logit": 527, "softmax": 527, "kd": 527, "patient": 527, "compact": [527, 541, 548, 581], "agnost": 527, "resourc": [527, 569, 572, 593], "convolut": [527, 582], "ia": 527, "attach": [527, 541, 590], "shallow": 527, "deepest": 527, "deeper": 527, "paper": [527, 581, 587, 590], "10006": [527, 528], "student_output": [527, 528], "student_loss": [527, 528], "training_func_for_nc": [527, 528], "distil_loss_conf": 527, "accordingli": [527, 553, 590], "promis": [528, 541, 581], "huge": [528, 567, 581, 585], "heavi": 528, "light": 528, "booster": 528, "degrad": [528, 581, 593], "novel": [528, 545, 556, 562], "place": [528, 537, 575, 581, 591, 593], "comb": 528, "distillation_criterion": [528, 541, 580], "q_conf": 528, "horovod": 529, "instal": [529, 532, 534, 545, 547, 550, 553, 557, 560, 562, 563, 565, 566, 567, 597], "enable_eager_execut": 529, "yaml_file_path": 529, "pre_process": 529, "simpli": [529, 543, 545, 547, 550, 562, 570], "evaluation_result": 529, "evaluation_time_cost": 529, "partit": [529, 581], "distributedsampl": 529, "train_sampl": 529, "train_dataset": [529, 584], "num_replica": 529, "rank": 529, "train_load": 529, "train_kwarg": 529, "adadelta": 529, "distributedoptim": 529, "named_paramet": 529, "broadcast_paramet": 529, "root_rank": 529, "broadcast_optimizer_st": 529, "set_epoch": 529, "batch_idx": 529, "zero_grad": [529, 541, 581], "nll_loss": 529, "log_interv": 529, "0f": 529, "tloss": 529, "6f": 529, "dry_run": 529, "test_func": 529, "num_of_process": 529, "002": 529, "ssh": [529, 562], "prompt": 529, "readm": [529, 575], "exactli": [529, 546], "recognit": [529, 531, 581, 591], "resizecropimagenet": [529, 592], "realiz": [529, 579, 586, 589], "tow": 529, "node1": [529, 575, 576], "node2": [529, 575, 576], "TO": [529, 547, 567], "your_node1_nam": 529, "your_node2_nam": 529, "resnet50_fp32_pretrained_model": 529, "nc_resnet50_v1": 529, "resnet": [529, 596], "varieti": [530, 583, 593], "10k": [530, 534], "speedup": [530, 536, 584], "2x": [530, 536], "vnni": [530, 536, 583, 584], "exchang": 531, "hope": 531, "inc_model": [531, 543], "fp32_onnx_config": 531, "verifi": [531, 539], "vgg16": [531, 596], "mobilenet": [531, 589, 596], "rcnn": 531, "torchscript": [531, 585, 590], "unsupport": [531, 541, 581], "add_relu": 531, "conv1d_relu": 531, "conv2d_relu": 531, "group_norm": 531, "hardswish": 531, "instance_norm": 531, "layer_norm": 531, "leaky_relu": 531, "sigmoid": 531, "toolchain": [532, 582], "bare": 532, "metal": 532, "sudo": [532, 548], "apt": [532, 537, 548, 556], "python3": 532, "dev": [532, 555, 559], "distutil": 532, "libgl1": 532, "mesa": 532, "glx": 532, "libglib2": 532, "ln": 532, "sf": 532, "usr": 532, "incompat": 532, "88": [532, 589, 596], "80": [532, 539, 585, 591, 596], "pyobject": 532, "reinstal": 532, "libgl": 532, "yum": [532, 537], "opencv": [532, 537, 556], "conda": [532, 537, 548, 556, 575, 576, 577, 588], "13": [532, 537, 539, 564, 588, 590, 596], "pend": [532, 571], "sqlalchemi": 532, "27": [532, 596], "alemb": 532, "forg": [532, 537], "quick": [533, 542, 581, 594, 595], "friendli": [533, 541, 544, 582, 590, 594, 595], "dive": [533, 594], "purpos": [533, 542, 562, 564, 583, 584], "syntax": 533, "go": [533, 557, 560, 568, 583, 587, 592], "up1": 533, "up2": 533, "valid_mixed_precis": 533, "addn": 533, "grappler_optim": 533, "constfold": 533, "arithmet": 533, "debug_stripp": 533, "googleapi": [534, 564, 567], "v1_6": [534, 564, 567], "mobilenet_v1_1": [534, 564, 575], "0_224_frozen": [534, 564, 575], "major": [535, 567, 584, 590], "concept": [535, 589, 594], "rather": [535, 587], "custom_metr": 535, "refin": [535, 581], "420": 536, "geomean": 536, "upload": [536, 557, 560], "click": [536, 545, 546, 553, 556, 562, 567, 582, 591], "qintegerop": [536, 584], "plan": 536, "oneapi": [537, 582, 594], "analyt": [537, 582, 594], "success": [537, 564], "11": [537, 539, 540, 542, 564, 590, 593, 596], "frequent": 537, "pypi": [537, 557, 560], "nightli": 537, "headless": [537, 556], "fastai": 537, "esri": 537, "consolid": 537, "eas": [537, 547, 582], "along": [537, 581, 587], "streamlin": [537, 569, 582], "scienc": 537, "websit": 537, "anaconda": [537, 569, 570], "suit": [537, 563, 591], "formerli": 537, "skylak": 537, "cascad": 537, "lake": [537, 542, 582], "cooper": [537, 542, 582], "ic": [537, 582], "sapphir": [537, 539], "rapid": [537, 539], "hbm": 537, "arctic": 537, "sound": 537, "pont": 537, "vecchio": 537, "cento": [537, 596], "ubuntu": 537, "22": [537, 539, 596], "maco": 537, "ventura": 537, "fortensorflow": 537, "forpytorch": 537, "17": [537, 575], "tf_enable_onednn_opt": 537, "onednn": [537, 542, 584], "newer": 537, "subject": 538, "accompani": [538, 593], "wish": 538, "bibtex": 538, "author": 538, "feng": 538, "tian": 538, "hanwen": 538, "haihao": [538, 581], "shen": [538, 581], "suyu": 538, "chen": 538, "howpublish": 538, "year": 538, "logo": 538, "atom": 538, "phi": 538, "pentium": 538, "vtune": 538, "corpor": 538, "subsidiari": 538, "brand": 538, "claim": 538, "sq": [539, 590], "woq": [539, 544], "4th": [539, 582, 584], "gen": [539, 542, 582, 584, 586], "codenam": [539, 542], "quickli": [539, 593, 594], "6b": [539, 566, 590, 596], "facebook": [539, 568, 590, 596], "3b": [539, 590], "30b": [539, 590, 596], "7b": [539, 590, 596], "13b": [539, 590, 596], "70b": [539, 596], "tiiuae": [539, 590, 596], "40b": 539, "baichuan": 539, "chat": [539, 590, 596], "baichuan2": 539, "bigscienc": [539, 590, 596], "1b7": [539, 590], "databrick": [539, 590, 596], "dolli": [539, 581, 590, 596], "12b": 539, "neox": [539, 596], "20b": [539, 596], "mistralai": 539, "mistral": 539, "thudm": 539, "chatglm2": 539, "wip": 539, "chatglm3": 539, "soon": 539, "lambada_openai": [539, 596], "67": [539, 596], "57": [539, 590, 596], "68": [539, 592, 596], "23": [539, 596], "0098": 539, "0000": [539, 543], "84": [539, 590, 596], "0040": 539, "71": [539, 596], "51": [539, 596], "70": [539, 596], "89": [539, 590, 596], "9913": 539, "53": [539, 596], "0003": [539, 596], "76": [539, 596], "0035": 539, "96": [539, 596], "0043": 539, "59": [539, 590, 596], "9988": 539, "24": [539, 581, 593, 596], "9936": 539, "9963": [539, 596], "46": [539, 596], "47": [539, 596], "0356": 539, "38": [539, 596], "0009": 539, "19": [539, 595, 596], "9968": 539, "35": [539, 581, 596], "9961": [539, 596], "79": [539, 591, 596], "0070": 539, "43": [539, 596], "0018": 539, "72": [539, 590, 596], "25": [539, 581, 596], "9989": 539, "9949": 539, "54": [539, 595, 596], "9940": 539, "58": [539, 576, 596], "0033": 539, "0117": 539, "49": [539, 596], "82": [539, 596], "0046": [539, 596], "0087": 539, "77": [539, 596], "9932": [539, 596], "75": [539, 581, 596], "9997": 539, "0086": [539, 590], "55": [539, 577, 596], "9991": 539, "09": [539, 596], "0057": 539, "97": [539, 541, 596], "0041": 539, "73": [539, 596], "92": [539, 596], "0005": 539, "9942": [539, 596], "9987": 539, "0030": [539, 596], "61": [539, 596], "9962": [539, 596], "9992": 539, "52": [539, 596], "9914": 539, "0023": 539, "9986": 539, "9919": [539, 596], "9977": 539, "94": [539, 592, 596], "0093": 539, "78": [539, 592, 596], "0203": 539, "74": [539, 596], "44": [539, 596], "0237": 539, "0013": 539, "00": [539, 596], "0044": 539, "popularli": 540, "industri": [540, 582], "label_map": 540, "ap": 540, "curv": 540, "turn": [540, 556, 585], "target_boxes_num": 540, "str_label": 540, "int_label": 540, "inturn": 540, "cocomap": 540, "vocmap": 540, "categor": 540, "multiclass": 540, "multilabel": 540, "newmetr": 540, "reset": 540, "reflect": [540, 592], "new_metr": 540, "deliv": [541, 582, 588], "conveni": [541, 569], "veri": [541, 563, 567, 584, 587, 593, 594], "comprehens": [541, 594], "resort": 541, "automodelforsequenceclassif": 541, "val_dataset": [541, 584], "val_dataload": [541, 584], "worker": [541, 572, 575, 576, 577, 584], "ping_memori": [541, 584], "formul": 541, "effort": 541, "written": 541, "onnxrt_integ": [541, 595], "onnxrt_qlinear": [541, 595], "image_tensor": [541, 595], "post_training_dynamic_qu": [541, 583, 593], "1000": [541, 571, 595], "2000": 541, "sampling_s": [541, 595], "model_wis": [541, 595], "op_dict": 541, "op_wis": [541, 591, 595], "sigopt_api_token": [541, 589, 593], "sigopt_project_id": [541, 589, 593], "sigopt_experiment_nam": [541, 589, 593], "demo": 541, "600": [541, 596], "training_arg": 541, "emul": [541, 584], "trainer": [541, 553], "briefli": [541, 590], "maxim": [541, 581, 593], "pruning_func": 541, "num_train_epoch": [541, 581], "train_dataload": [541, 581, 584], "n_gpu": 541, "gradient_accumulation_step": 541, "clip_grad_norm_": 541, "max_grad_norm": 541, "rate": [541, 581, 584], "start_epoch": [541, 583, 595], "end_epoch": [541, 583, 595], "newli": [541, 581], "on_after_optimizer_step": [541, 581], "layer3": [541, 581], "lr_schedul": [541, 581], "weight_decai": [541, 595], "0004": 541, "nesterov": [541, 595], "randomresizedcrop": [541, 592], "totensor": [541, 592], "485": 541, "456": 541, "406": [541, 596], "nepoch": 541, "cnt": 541, "loss_sum": 541, "iter_bar": 541, "desc": 541, "teacher_logit": 541, "train_fun": 541, "training_func": 541, "recent": [541, 542], "growth": [541, 542, 544, 581], "significantli": [541, 542, 565, 567, 581, 593], "bandwidth": [541, 542, 587], "exit_polici": [541, 595], "determinist": 541, "meaning": [541, 580], "reli": [541, 590], "prune_conf": 541, "quantization_aware_training_conf": 541, "aforement": 541, "inset": 541, "p_conf": [541, 580], "ssd_mobilenet_v1": 541, "benchmarkconf": 541, "sixteen": 542, "launch": [542, 563, 568], "3rd": [542, 582, 584, 586], "boost": [542, 546, 562, 581, 582], "x86": 542, "avx512": [542, 584], "vcvtne2ps2bf16": 542, "vcvtneps2bf16": 542, "vdpbf16p": 542, "dot": [542, 584], "fbgemm": [542, 584], "tensorrtexecutionprovid": [542, 584], "cudaexecutionprovid": [542, 584], "dnnlexecutionprovid": [542, 584], "avx512_bf16": 542, "plu": 542, "persist": 543, "brought": [543, 546, 553, 584], "tf2": 543, "h5": 543, "hybridblock": 543, "saved_result": [543, 566, 587], "breakthrough": 544, "emerg": [544, 590], "analysi": [544, 545, 562, 581, 589], "chatbot": [544, 582], "fuel": 544, "nevertheless": 544, "challeng": [544, 585], "explos": 544, "pose": [544, 585], "obstacl": 544, "practic": 544, "promot": 544, "msfp": 544, "mxfp8": 544, "e5m2": 544, "e8m0": 544, "e4m3": 544, "mxfp6": 544, "fp6": 544, "e3m2": 544, "e2m3": 544, "mxfp4": 544, "e2m1": [544, 587], "mxint8": 544, "occupi": 544, "incur": 544, "energi": 544, "cost": [544, 584, 587], "silicon": 544, "seamlessli": [544, 569, 581, 593], "meticul": 544, "craft": 544, "empow": 544, "sacrif": [544, 582], "distinct": 544, "consumpt": [544, 590], "amax": 544, "expon": 544, "floor": 544, "log2": 544, "10005": [544, 585], "mxquantconfig": 544, "w_dtype": 544, "act_dtyp": 544, "user_model": 544, "darvish": 544, "rouhani": 544, "bita": 544, "narrow": 544, "inferenc": 544, "10271": 544, "10281": 544, "ocp": 544, "2310": 544, "10537": 544, "simplifi": [545, 556, 562, 581, 582], "acquir": 545, "heurist": [545, 562], "great": 545, "autocast": 545, "my_model": 545, "no_grad": 545, "memory_format": 545, "112": 545, "rand": [545, 590], "plugin": [545, 563], "aw": [545, 553, 572, 582, 596], "sagemak": [545, 553], "neural_cod": [545, 547, 549, 550, 551, 553], "bench": 545, "superbench": 545, "enjoi": [546, 550, 553], "reload": [546, 563, 565, 568], "modern": [547, 587], "democrat": [547, 582], "programm": [547, 553, 562], "nano_bf16_channels_last": 547, "nano_bf16_ipex_channels_last": 547, "nano_bf16_ipex": 547, "nano_bf16": 547, "nano_fp32_channels_last": 547, "nano_fp32_ipex_channels_last": 547, "nano_fp32_ipex": 547, "nano_gpu_to_cpu": 547, "nano_int8": 547, "nano_jit_bf16_channels_last": 547, "nano_jit_bf16_ipex_channels_last": 547, "nano_jit_bf16_ipex": 547, "nano_jit_bf16": 547, "nano_jit_fp32_channels_last": 547, "nano_jit_fp32_ipex_channels_last": 547, "nano_jit_fp32_ipex": 547, "nano_jit_fp32": 547, "nano_onnxruntime_fp32": 547, "nano_onnxruntime_int8_qlinear": 547, "openvino": 547, "nano_openvino_fp32": 547, "nano_openvino_int8": 547, "bc": [548, 556], "conda_prefix": 548, "echo": 548, "tradit": [548, 581], "libjemalloc": 548, "libiomp5": 548, "home": 548, "lib": 548, "ld_preload": 548, "malloc_conf": 548, "oversize_threshold": 548, "background_thread": 548, "metadata_thp": 548, "dirty_decay_m": 548, "9000000000": 548, "muzzy_decay_m": 548, "kmp_affin": 548, "kmp_blocktim": 548, "dnnl_primitive_cache_capac": 548, "governor": 548, "scaling_governor": 548, "powersav": 548, "tee": 548, "pytorch_jit_script": [549, 552], "pytorch_channels_last": [549, 552], "run_bench": 549, "patch": [549, 562], "patch_path": 549, "your_patch_path": 549, "sweep": 549, "sweep_object": 549, "bench_config": 549, "bench_featur": 549, "sai": 550, "run_glu": [550, 551, 573, 576, 577], "requisit": 550, "task_nam": [550, 551, 573, 576, 577], "do_ev": [550, 551, 566, 573, 576, 577], "remain": 550, "itself": [550, 581], "run_glue_optim": 550, "static_ipex": 550, "auto_qu": 551, "v4": [551, 573, 576, 577, 596], "albert": [551, 596], "sst2": 551, "alexnet": [551, 596], "pytorch_amp": 552, "optimize_for_infer": 552, "pytorch_jit_trac": 552, "pytorch_jit_script_ofi": 552, "pytorch_jit_trace_ofi": 552, "torchdynamo": 552, "pytorch_torchdynamo_jit_script": 552, "pytorch_torchdynamo_jit_trac": 552, "pytorch_torchdynamo_jit_script_ofi": 552, "pytorch_torchdynamo_jit_trace_ofi": 552, "pytorch_inc_bf16": 552, "pytorch_inc_static_quant_fx": 552, "pytorch_inc_static_quant_ipex": 552, "pytorch_inc_static_quant_ipex_xpu": 552, "pytorch_inc_dynamic_qu": 552, "pytorch_ipex_fp32": 552, "pytorch_ipex_bf16": 552, "pytorch_ipex_int8_static_qu": 552, "pytorch_ipex_int8_dynamic_qu": 552, "blade": 552, "disc": 552, "pytorch_aliblad": 552, "pytorch_lightning_bf16_cpu": 552, "tensorflow_amp": 552, "keras_amp": 552, "tensorflow_inc": 552, "keras_inc": 552, "onnx_inc_static_quant_qlinear": 552, "onnx_inc_static_quant_qdq": 552, "onnx_inc_dynamic_qu": 552, "pytorch_inc_huggingface_optimum_stat": 552, "pytorch_inc_huggingface_optimum_dynam": 552, "intel_extension_for_transform": 552, "bigdl": [552, 553], "nano": [552, 553], "nano_": 552, "inc_auto": 552, "delight": 553, "announc": 553, "v": [553, 562, 581, 593, 595], "500": [553, 571], "jupyt": [553, 555, 556, 559], "isa": 553, "adjust": [553, 584, 590], "delta": 553, "acc_delta": 553, "int8_acc": 553, "fp32_acc": 553, "ext": [555, 557, 559, 560, 561], "lab": [555, 556, 557, 559, 560], "nodej": [555, 559], "jlpm": [555, 559], "yarn": [555, 559], "npm": [555, 556, 559], "lieu": [555, 559], "labextens": [555, 556, 559], "typescript": [555, 559], "watch": [555, 559, 568], "immedi": [555, 559, 581], "refresh": [555, 559], "browser": [555, 559, 564, 568], "wait": [555, 559, 562, 572], "rebuilt": [555, 559], "easier": [555, 559, 562, 564, 582], "symlink": [555, 559], "down": 556, "finish": [556, 572], "enter": [556, 562, 570], "blank": 556, "cell": 556, "gain": [556, 580, 582], "mkl": 556, "jemalloc": 556, "pip3": 556, "pyproject": [557, 560], "toml": [557, 560], "twine": [557, 560], "whl": [557, 560], "dist": [557, 560], "sdist": [557, 560], "bdist_wheel": [557, 560], "frontend": [557, 560, 570, 577], "cut": [557, 560], "admin_github_token": [557, 560], "pypi_token": [557, 560], "npm_token": [557, 560], "secret": [557, 560], "panel": [557, 560, 562], "draft": [557, 560], "changelog": [557, 560, 561], "pkg": [557, 560], "bot": [557, 560], "pick": [557, 560, 563], "feedstock": [557, 560], "hatch": 560, "notabl": 561, "daili": 562, "advantag": [562, 581, 583, 593], "remot": 562, "server": [562, 564, 567, 570, 575, 576, 577], "re": [562, 568, 587], "market": 562, "uninstal": 562, "fill": [562, 589, 592, 593], "upper": 562, "sidebar": 562, "hover": 562, "track": [562, 589], "argpars": 562, "pop": [562, 572], "diff": 562, "manifest": 563, "palett": 563, "registercommand": 563, "amodio": 563, "tsl": 563, "matcher": 563, "dbaeumer": 563, "eslint": [563, 568], "press": 563, "f5": 563, "ctrl": 563, "hello": 563, "world": 563, "breakpoint": 563, "consol": [563, 568], "relaunch": 563, "toolbar": 563, "node_modul": 563, "viewlet": 563, "dropdown": 563, "runner": [563, 568], "startup": 563, "bundl": 563, "neural_insight": [564, 566, 567], "tl": 564, "ui": 564, "12": [564, 596], "5000": 564, "338174d13706855fc6924cec7b3a8ae8": 564, "listen": 564, "firewal": 564, "8080": 564, "cert": 564, "path_to_cert": 564, "crt": 564, "path_to_private_kei": 564, "encrypt": 564, "expos": 564, "forfeit": 564, "client": [564, 570, 577], "extern": 564, "threat": 564, "diagnost": 564, "skill": 564, "feel": [564, 568], "layoutlmv3": [565, 596], "seqev": 565, "sentencepiec": 565, "timm": 565, "fvcore": 565, "pillow": 565, "einop": 565, "textdist": 565, "setuptool": 565, "cli": 565, "hypjudi": 565, "finetun": [565, 581, 587], "funsd": [565, 596], "calib_dataset": 565, "incdataset": 565, "eval_dataset": 565, "poor": [565, 591], "9049": 565, "2989": 565, "66": [565, 596], "9631": 565, "glob": 565, "panda": 565, "pd": 565, "set_opt": 565, "max_row": 565, "max_column": 565, "getmtim": 565, "activations_t": 565, "weights_tabl": [565, 566], "read_csv": 565, "nweight": 565, "descend": 565, "sorted_data": 565, "sort_valu": 565, "ascend": 565, "evid": 565, "tip": 565, "8981": 565, "7502": 565, "run_clm": 566, "dataset_nam": 566, "wikitext": [566, 596], "dataset_config_nam": 566, "do_train": 566, "inspect_sav": 566, "inspect_result": 566, "quan": 566, "model_summari": 566, "incept": [567, 596], "v3": [567, 596], "inception_v3": [567, 591], "inceptionv3_fp32_pretrained_model": [567, 591], "prepare_dataset": 567, "sh": [567, 591], "raw_dir": 567, "img_raw": 567, "delet": [567, 581], "run_tun": 567, "nc_inception_v3": 567, "highest": [567, 573, 593], "satisfactori": 567, "webpag": 567, "spike": 567, "bottom": 567, "chart": [567, 584, 589, 591], "concentr": 567, "toler": 567, "But": 567, "bigger": 567, "bootstrap": 568, "localhost": [568, 570, 575, 576], "3000": 568, "lint": 568, "interact": [568, 589], "correctli": 568, "hash": [568, 571], "readi": [568, 581], "aren": 568, "transit": 568, "webpack": 568, "babel": 568, "tweak": 568, "ever": 568, "curat": 568, "suitabl": 568, "middl": [568, 590], "shouldn": 568, "understand": [568, 584, 591, 594], "wouldn": 568, "couldn": 568, "troubleshoot": 568, "effortlessli": 569, "grpc": [569, 570, 574, 575, 576, 578], "queue": 569, "mpi": [569, 570, 593], "neural_solut": [569, 570, 575, 576, 577], "task_monitor_port": [570, 575, 576, 577], "22222": [570, 575, 576, 577], "result_monitor_port": [570, 575, 576, 577], "33333": [570, 575, 576, 577], "restful_api_port": [570, 575, 576, 577], "hostfil": [570, 572, 575, 576, 577], "grpc_api_port": [570, 575, 576, 577], "api_typ": [570, 575, 576, 577], "conda_env": [570, 575, 576, 577], "upload_path": [570, 575, 576, 577], "8000": [570, 575, 576, 577], "monitor": [570, 575, 576, 577], "3333": [570, 575, 576, 577], "2222": [570, 575, 576, 577], "ns_workspac": [570, 575, 576, 577], "hf_model": [570, 574, 576, 577], "curl": [570, 571, 575, 576], "task_id": [570, 575, 576, 577], "usernam": 570, "db": [570, 572], "serve_log": [570, 575, 576, 577], "frontend_grpc": 570, "task_log": 570, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 570, "task_workspac": 570, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 570, "aliv": 570, "properli": 570, "commonli": [570, 581], "hostnam": 570, "breakdown": 570, "ip": 570, "hous": 570, "host1": [570, 575, 576], "host2": [570, 575, 576], "query_id": 570, "oaa": 571, "host_ip": 571, "task_request": [571, 575, 576, 577], "tuning_info": [571, 575], "optimization_result": [571, 575], "result_path": [571, 575, 576], "closur": 571, "404": [571, 581, 596], "health": 571, "healthi": 571, "400": 571, "alloc": 572, "incom": 572, "taskmonitor": 572, "cluster": [572, 575, 576, 593], "tasklaunch": 572, "resultmonitor": 572, "receiv": [572, 589], "p1": 572, "notif": 572, "p2": 572, "p3": 572, "mpirun": [572, 593], "perf": 572, "p4": 572, "four": [572, 591, 596], "classdiagram": 572, "taskdb": 572, "get_statu": 572, "update_statu": 572, "task_collect": 572, "append_task": 572, "get_all_pending_task": 572, "update_task_statu": 572, "task_db": 572, "wait_new_task": 572, "schedule_task": 572, "dispatch_task": 572, "launch_task": 572, "query_task_statu": 572, "node_list": 572, "reserve_resourc": 572, "get_node_statu": 572, "gcp": [572, 582], "script_url": [573, 575, 576, 577], "archiv": 573, "tf_example1": [574, 575, 576], "hf_models_grpc": [574, 577], "00173": 575, "01024": 575, "task_request_distribut": 575, "custom_models_optim": 575, "7602cd63d4c849e7a686a8165a77f69d": [575, 576], "151": 575, "8617": 575, "8213": [575, 596], "number_of_socket": [575, 576], "number_of_thread": [575, 576], "cdf419910f9b4d2a8320d0e420ac1d0a": 576, "optimized_result": 576, "3162": 576, "6488": [576, 596], "06": [577, 595, 596], "d3e10a49326449fb9d0d62f2bfc1cb43": 577, "fastapi": 578, "multi_object": 579, "benefit": 580, "instanti": 580, "neuron": 581, "art": 581, "grown": 581, "unpreced": 581, "increasingli": 581, "crucial": 581, "stand": [581, 593], "shrink": 581, "contextu": 581, "scene": 581, "haven": 581, "color": [581, 585], "lowest": [581, 593], "formula": [581, 590], "emsp": 581, "downstream": 581, "prone": 581, "co": 581, "discourag": 581, "penal": 581, "parameter": 581, "lightweight": 581, "perceptron": 581, "mlp": 581, "valuabl": [581, 591], "basi": 581, "billion": 581, "mpt": [581, 590, 596], "lm": 581, "lamini": [581, 590], "mention": [581, 587], "tend": 581, "exemplifi": 581, "complement": 581, "fortieth": 581, "miss": [581, 584], "pruner2": 581, "few": [581, 582, 590, 593], "lm_head": 581, "yourself": 581, "uncertain": 581, "auto_config": 581, "quit": 581, "straightforward": [581, 587, 590], "carri": 581, "pruning_pattern": 581, "pruning_start": 581, "pruning_end": 581, "sparse_gpt": 581, "embed_out": 581, "card": 581, "hesit": 581, "causal": 581, "clm": 581, "sst": [581, 596], "63": [581, 596], "flan": 581, "t5": 581, "english": 581, "romanian": 581, "381": 581, "yolov5": 581, "2x1": [581, 596], "801": 581, "7895": 581, "signific": [581, 582, 585, 590], "reduct": [581, 585, 595], "xgboost": 581, "namhoon": 581, "lee": 581, "thalaiyasingam": 581, "ajanthan": 581, "philip": 581, "torr": 581, "2019": 581, "zafrir": 581, "ofir": 581, "ariel": 581, "larei": 581, "boudoukh": 581, "mosh": 581, "wasserblat": 581, "2111": 581, "05754": 581, "2021": 581, "kwon": 581, "kim": 581, "mahonei": 581, "hassoun": 581, "keutzer": 581, "gholami": 581, "pp": 581, "24101": 581, "24116": 581, "frantar": [581, 587], "alistarh": 581, "massiv": 581, "2301": 581, "00774": 581, "apr": 582, "medium": 582, "aug": 582, "juli": 582, "onnxcommunitymeetup2023": 582, "june": 582, "msft": 582, "netflix": 582, "mlperf": [582, 596], "5x": 582, "\u96c6\u6210\u82f1\u7279\u5c14": 582, "\u817e\u8baf\u4e91taco": 582, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 582, "mar": 582, "heterogen": 582, "jan": 582, "busi": 582, "amx": 582, "journei": 582, "dec": 582, "mleffici": 582, "deepen": 582, "foundat": 582, "intellig": 582, "vmware": 582, "applianc": 582, "bitnami": 582, "nov": 582, "neurip": 582, "quala": 582, "minilm": [582, 596], "plug": 582, "twitter": 582, "linkedin": 582, "zone": 582, "land": 582, "pat": 582, "keynot": 582, "intelon": 582, "chines": 582, "purif": 582, "jun": 582, "partner": 582, "feb": 582, "joint": 582, "bilibili": 582, "gestalt": 582, "ml": 582, "youtub": 582, "doubl": 582, "abound": 582, "lpot": [582, 588], "nextplatform": 582, "cern": 582, "gan": 582, "3dgan": 582, "iml": 582, "workshop": 582, "asplo": 582, "18": [582, 596], "highli": [582, 587], "intelcaff": 582, "aris": 583, "henc": 583, "onnxrt_qoper": 583, "quant_aware_train": 583, "weight_compress": [583, 595], "initial_spars": [583, 595], "prune_typ": [583, 595], "basic_magnitud": [583, 595], "update_frequ": 583, "prune_domain": 583, "tile_pattern_1x1": 583, "invent": 584, "On": [584, 596], "theoret": [584, 587], "zeropoint": 584, "255": [584, 590], "overflow": 584, "unseen": 584, "enough": 584, "peopl": 584, "mimic": 584, "fact": 584, "ultim": 584, "pain": 584, "lossi": 584, "philosophi": 584, "neither": 584, "nor": 584, "val_load": 584, "avg": 584, "themselv": 584, "dmlexecutionprovid": 584, "meanwhil": 585, "substanti": 585, "greatli": [585, 587], "even": [585, 587, 590], "constrain": 585, "grei": 585, "blue": 585, "rectangl": 585, "w8a8": [585, 587], "rtn_arg": [585, 587], "ouput_dir": 585, "fp32_model_path": 585, "int8_model_path": 585, "ON": 586, "forc": 586, "postposttrainingquantconfig": 586, "bf16wrapper": 586, "retrac": 586, "preval": 587, "grow": 587, "demand": 587, "trade": 587, "bottleneck": 587, "roughli": 587, "speak": 587, "capac": [587, 589], "flop": 587, "famou": 587, "approx": 587, "bmm": 587, "100x": 587, "excel": 587, "stai": [587, 590], "quantif": [587, 590], "think": 587, "intuit": [587, 590], "uniformli": 587, "qlora": 587, "invers": 587, "restor": 587, "protect": 587, "inspir": 587, "c_": 587, "normalfloat": 587, "bnb": 587, "805": 587, "005": 587, "return_int": 587, "group_dim": 587, "awq_arg": 587, "91": [587, 590, 596], "gptq_arg": 587, "stabil": 587, "nsampl": 587, "pad_max_length": 587, "use_max_length": 587, "static_group": 587, "mitig": 587, "weightonlylinear": 587, "date": 587, "sym_full_rang": 587, "qweight_config_path": 587, "gptq_config_path": 587, "gptq_config": 587, "use_full_length": 587, "n_block": 587, "compressed_model": 587, "omit": 587, "rtn_g32asym": 587, "gptq_g32asym": 587, "gptq_g32asym_disable_last_matmul": 587, "gptq_g128asym": 587, "awq_g32asym": 587, "xiao": [587, 590], "guangxuan": [587, 590], "2211": [587, 590], "10438": [587, 590], "wei": [587, 590], "xiui": [587, 590], "suppress": [587, 590], "2209": [587, 590, 596], "13325": [587, 590], "lin": 587, "ji": 587, "2306": 587, "00978": 587, "elia": 587, "2210": 587, "17323": 587, "dettmer": 587, "tim": 587, "2305": 587, "14314": 587, "site": 588, "inspect": [588, 591], "sed": 588, "your_script": 588, "backbon": 589, "sigopt_experiment_id": 589, "nc": [589, 593], "suffici": 589, "ordinari": 589, "latenc": [589, 593], "8266": 589, "8372": 589, "2132": 589, "83": [589, 590, 596], "7495": 589, "8299": 589, "8294": 589, "85": [589, 590, 596], "0837": 589, "8291": 589, "4469": 589, "gigant": 590, "systemat": 590, "migrat": [590, 594], "difficulti": 590, "mathemat": 590, "allevi": 590, "coarsest": 590, "finer": [590, 593], "matric": 590, "similarli": 590, "finest": 590, "why": [590, 591], "suppos": 590, "6839": 590, "4741": 590, "7451": 590, "9301": 590, "1742": 590, "6835": 590, "q_min": 590, "q_max": 590, "q_x": 590, "clamp_": 590, "round_": 590, "w_q": 590, "00296431384049356": 590, "172": [590, 596], "192": 590, "w_dq": 590, "2220": 590, "1510": 590, "2420": 590, "2570": 590, "0500": 590, "1890": 590, "mseloss": 590, "1983354538679123": 590, "6848": 590, "4743": 590, "7440": 590, "9308": 590, "1749": 590, "385297635664756e": 590, "07": [590, 595, 596], "affect": 590, "quantize_per_channel": 590, "x_tmp": 590, "detach": 590, "keepdim": 590, "dequantize_per_channel": 590, "0029": [590, 596], "0036": 590, "162": [590, 596], "48": [590, 596], "93": [590, 596], "207": [590, 596], "139": [590, 596], "6837": 590, "4734": 590, "1751": 590, "6821": 590, "637690492221736e": 590, "6376e": 590, "3852e": 590, "cdot": 590, "quantize_per_tensor_absmax": 590, "n_bit": 590, "div_": 590, "0806": 590, "7589": 590, "6038": 590, "3815": 590, "5040": 590, "7174": 590, "5444": 590, "5826": 590, "7772": 590, "5555": 590, "3740": 590, "3253": 590, "0698": 590, "1381": 590, "5972": [590, 596], "0737": 590, "8298": 590, "6883": 590, "2991": 590, "1601": 590, "6506": 590, "8246": 590, "3924": 590, "3845": 590, "8768": 590, "w_scale": 590, "x_q": 590, "x_scale": 590, "120": 590, "0059755356051027775": 590, "119": 590, "006533813662827015": 590, "y_q": 590, "17509": 590, "7608": 590, "4055": 590, "16599": 590, "21020": 590, "10016": 590, "9860": 590, "22444": 590, "y_dq": 590, "6836": 590, "2970": 590, "1583": 590, "6481": 590, "8207": 590, "3911": 590, "3850": 590, "8763": 590, "though": 590, "simplic": 590, "denot": 590, "fp1": 590, "fp2": 590, "subsect": [590, 595], "x1": [590, 593], "x2": [590, 593], "herebi": 590, "optdecoderlay": 590, "blockwis": 590, "waq": 590, "torchsmoothqu": 590, "auto_alpha_arg": 590, "overhead": 590, "hardtanh": 590, "t5norm": 590, "llamanorm": 590, "groupnorm": 590, "lambada": 590, "openai": 590, "sweet": 590, "spot": 590, "region": 590, "560m": 590, "354": 590, "3542": 590, "4634": 590, "4936": 590, "518": 590, "5185": 590, "7b1": [590, 596], "5764": [590, 596], "5977": 590, "bloomz": [590, 596], "3947": 590, "3930": 590, "4828": 590, "4906": 590, "5018": 590, "4980": 590, "5593": [590, 596], "5552": 590, "379": 590, "3757": 590, "350m": 590, "4516": 590, "4533": 590, "5789": 590, "5742": 590, "6365": 590, "6404": 590, "6769": [590, 596], "6804": [590, 596], "6872": 590, "6814": 590, "7149": 590, "7128": 590, "66b": 590, "7398": 590, "7326": 590, "7361": [590, 596], "7357": 590, "7627": [590, 596], "7590": 590, "7759": [590, 596], "7840": 590, "65b": 590, "7908": 590, "7957": 590, "7392": [590, 596], "7335": 590, "7058": [590, 596], "6994": 590, "7677": [590, 596], "7615": [590, 596], "6831": [590, 596], "mbzuai": 590, "124m": 590, "3804": 590, "3887": 590, "774m": 590, "5048": 590, "5057": 590, "5b": 590, "5443": [590, 596], "5436": 590, "mosaicml": [590, 596], "655": [590, 596], "6499": 590, "stabilityai": 590, "stablelm": 590, "4172": 590, "4149": 590, "togethercomput": 590, "redpajama": 590, "incit": 590, "6542": 590, "6735": 590, "6718": 590, "6740": [590, 596], "6569": 590, "6621": 590, "7143": 590, "7221": 590, "6895": 590, "6953": [590, 596], "6866": [590, 596], "6297": 590, "6247": 590, "6437": [590, 596], "6392": 590, "7332": 590, "7632": 590, "asterisk": 590, "consider": 590, "arang": 590, "tolist": 590, "default_alpha": 590, "alpha_min": 590, "alpha_max": 590, "alpha_step": 590, "step_siz": 590, "shared_criterion": 590, "do_blockwis": 590, "jason": 590, "transact": 590, "yvinec": 590, "edouard": 590, "proceed": 590, "cvf": 590, "winter": 590, "instrument": 591, "writer": 591, "_pre_eval_hook": 591, "_post_eval_hook": 591, "submodul": 591, "whitelist": 591, "_recordingobserv": 591, "output_tensors_dict": 591, "current_it": 591, "get_tensor_valu": 591, "_observer_forward_hook": 591, "activation_post_process": 591, "_add_observer_": 591, "named_children": 591, "leaf": 591, "add_modul": 591, "register_forward_hook": 591, "dump_tim": 591, "summarywrit": 591, "_acc": 591, "tune_": 591, "add_graph": 591, "get_observer_dict": 591, "observer_dict": 591, "is_quant": 591, "add_histogram": 591, "shell": 591, "bind_al": 591, "logdir_spec": 591, "tune_0_acc0": 591, "tune_1": 591, "tune_1_acc0": 591, "baseline_acc_0": 591, "776": 591, "tune_1_acc_0": 591, "095": 591, "runs_v3": 591, "run_tuning_dump_tensor": 591, "inceptionv3": 591, "run_quant": 591, "topologi": 591, "nc_inceptionv3": 591, "inceptionv3_dump_tensor": 591, "eightbit": 591, "disappear": 591, "centercrop": 592, "randomcrop": 592, "cropres": 592, "decodeimag": 592, "jpeg": 592, "encodejp": 592, "alignimagechannel": 592, "116": 592, "103": [592, 596], "017": 592, "bilinearimagenet": [592, 595], "topilimag": 592, "padding_mod": 592, "border": 592, "pixel": 592, "edg": 592, "colorjitt": 592, "bright": 592, "satur": 592, "hue": 592, "jitter": 592, "tondarrai": 592, "o1": 593, "human": 593, "aggress": 593, "classic": 593, "flowchart": 593, "htmllabel": 593, "td": 593, "classdef": 593, "itemstyl": 593, "cce5ff": 593, "stroke": 593, "99ccff": 593, "s1": 593, "s2": 593, "s3": 593, "s4": 593, "s5": 593, "s6": 593, "s7": 593, "nbsp": [593, 596], "subgraphstyl": 593, "ffffff": 593, "attempt": 593, "post_training_auto_qu": 593, "trial": 593, "increment": 593, "ii": 593, "spent": 593, "hawq_v2_loss": 593, "model_loss": 593, "black": 593, "compli": 593, "posterior": 593, "short": 593, "loglevel": 593, "endlessli": 593, "perspect": 593, "smbo": 593, "appl": 593, "surrog": 593, "quantil": 593, "densiti": 593, "parzen": 593, "greatest": 593, "hour": 593, "dai": 593, "next_tune_cfg": 593, "overridden": 593, "replic": 593, "replica": 593, "fed": 593, "synchron": 593, "number_of_process": 593, "run_cmd": 593, "abctunestrategi": 593, "familiar": 594, "notebook": 594, "introduct": 594, "organ": 595, "logic": 595, "mobilenet_v1": 595, "40": [595, 596], "beta_1": 595, "beta_2": 595, "epsilon": 595, "sparsecategoricalcrossentropi": 595, "sum_over_batch_s": 595, "from_logit": 595, "1x": 596, "platinum": 596, "8480": 596, "8ghz": 596, "56": 596, "ht": 596, "turbo": 596, "256gb": 596, "16x16gb": 596, "ddr5": 596, "4800": 596, "mt": 596, "bio": 596, "3a14": 596, "tel2p1": 596, "microcod": 596, "0x2b0001b0": 596, "gcc": 596, "20210514": 596, "red": 596, "hat": 596, "visit": 596, "1s4c14ins1bsthroughput": 596, "sec": 596, "1720": 596, "582": 596, "95x": 596, "1517": 596, "570": 596, "65": 596, "66x": 596, "resnet101": 596, "41": 596, "1058": 596, "382": 596, "77x": 596, "69": 596, "2080": 596, "951": 596, "19x": 596, "1587": 596, "863": 596, "37": 596, "84x": 596, "1052": 596, "434": 596, "42x": 596, "707": 596, "234": 596, "02x": 596, "320": 596, "179": 596, "79x": 596, "4312": 596, "1512": 596, "85x": 596, "2287": 596, "1406": 596, "63x": 596, "1367": 596, "59x": 596, "vgg19": 596, "1244": 596, "176": 596, "04x": 596, "resnetv2": 596, "780": 596, "34x": 596, "494": 596, "329": 596, "50x": 596, "152": 596, "349": 596, "235": 596, "48x": 596, "densenet": 596, "161": 596, "29": 596, "282": 596, "223": 596, "26x": 596, "1284": 596, "756": 596, "70x": 596, "1280": 596, "530": 596, "cnn": 596, "39": 596, "26": 596, "178": 596, "13x": 596, "yolov3": 596, "249": 596, "64x": 596, "28x": 596, "36": 596, "05x": 596, "86": 596, "390": 596, "212": 596, "83x": 596, "vit": 596, "81": 596, "230": 596, "142": 596, "62x": 596, "1989": 596, "31x": 596, "1165": 596, "303": 596, "953": 596, "302": 596, "15x": 596, "resnest50": 596, "365": 596, "21x": 596, "resnext101_32x8d": 596, "548": 596, "104": 596, "27x": 596, "efficientnet_b0": 596, "636": 596, "62": 596, "566": 596, "12x": 596, "efficientnet_b3": 596, "471": 596, "358": 596, "32x": 596, "peleenet": 596, "790": 596, "504": 596, "57x": 596, "yolo": 596, "137": 596, "88x": 596, "175": 596, "23x": 596, "camembert": 596, "393": 596, "174": 596, "783": 596, "344": 596, "684": 596, "99x": 596, "312": 596, "155": 596, "60": 596, "01x": 596, "funnel": 596, "281": 596, "395": 596, "173": 596, "373": 596, "405": 596, "30x": 596, "stsb": 596, "396": 596, "136": 596, "377": 596, "17x": 596, "391": 596, "25x": 596, "135": 596, "61x": 596, "117": 596, "93x": 596, "lvwerra": 596, "pegasu": 596, "samsum": 596, "1981": 596, "598": 596, "1095": 596, "298": 596, "67x": 596, "549": 596, "29x": 596, "375": 596, "hellaswag": 596, "winogrand": 596, "piqa": 596, "word_perplex": 596, "4954": 596, "6409": 596, "7541": 596, "6434": 596, "8816": 596, "gptqw4g128asym": 596, "679": 596, "4895": 596, "6433": 596, "7476": 596, "6399": 596, "9945": 596, "0999": 596, "gptqw4g32asym": 596, "6829": 596, "4923": 596, "6401": 596, "7486": 596, "6410": 596, "0141": 596, "gptqw4g128sym": 596, "685": 596, "4907": 596, "6361": 596, "7443": 596, "6390": 596, "1498": 596, "gptqw4g32sym": 596, "6911": 596, "4899": 596, "6448": 596, "7497": 596, "6439": 596, "0008": 596, "0927": 596, "5049": 596, "6543": 596, "7628": 596, "6497": 596, "2862": 596, "4984": 596, "6535": 596, "7568": 596, "6473": 596, "4193": 596, "6885": 596, "4973": 596, "753": 596, "6455": 596, "9935": 596, "4607": 596, "decapoda": 596, "5642": 596, "6709": 596, "7835": 596, "6887": 596, "4202": 596, "7244": 596, "5603": 596, "6614": 596, "6824": 596, "9909": 596, "5881": 596, "5911": 596, "7009": 596, "7878": 596, "7106": 596, "7518": 596, "5843": 596, "6961": 596, "7911": 596, "4319": 596, "7572": 596, "5898": 596, "7056": 596, "7894": 596, "7105": 596, "9998": 596, "3429": 596, "7596": 596, "5841": 596, "6977": 596, "7905": 596, "7080": 596, "4916": 596, "6266": 596, "7277": 596, "8096": 596, "7350": 596, "2384": 596, "778": 596, "624": 596, "7269": 596, "8047": 596, "7334": 596, "9979": 596, "4237": 596, "7706": 596, "6239": 596, "7285": 596, "8058": 596, "7322": 596, "4697": 596, "7836": 596, "6195": 596, "7337": 596, "9983": 596, "5604": 596, "5732": 596, "648": 596, "7715": 596, "6746": 596, "7107": 596, "6982": 596, "5637": 596, "6527": 596, "7704": 596, "6713": 596, "9950": 596, "9702": 596, "5682": 596, "6575": 596, "7758": 596, "6742": 596, "9994": 596, "9317": 596, "567": 596, "6902": 596, "7353": 596, "6622": 596, "7829": 596, "6862": 596, "9635": 596, "7246": 596, "5617": 596, "6756": 596, "7797": 596, "6854": 596, "9931": 596, "2799": 596, "7312": 596, "6059": 596, "7103": 596, "7077": 596, "2213": 596, "7273": 596, "6018": 596, "7088": 596, "7742": 596, "7030": 596, "9934": 596, "2538": 596, "083": 596, "7283": 596, "6053": 596, "7024": 596, "7764": 596, "7031": 596, "1889": 596, "374": 596, "727": 596, "5997": 596, "7018": 596, "9916": 596, "2504": 596, "497": 596, "7122": 596, "8984": 596, "5933": 596, "689": 596, "7851": 596, "7075": 596, "1556": 596, "448": 596, "7675": 596, "5934": 596, "7856": 596, "7111": 596, "9984": 596, "1514": 596, "927": 596, "7566": 596, "5899": 596, "7032": 596, "9953": 596, "1374": 596, "728": 596, "4628": 596, "6456": 596, "6029": 596, "6438": 596, "5799": 596, "4542": 596, "6004": 596, "9957": 596, "0626": 596, "4789": 596, "6134": 596, "7432": 596, "5525": 596, "4731": 596, "6504": 596, "7617": 596, "6094": 596, "7828": 596, "5098": 596, "7622": 596, "6505": 596, "3242": 596, "6878": 596, "5058": 596, "6393": 596, "7633": 596, "6491": 596, "9978": 596, "5514": 596, "6864": 596, "5084": 596, "6519": 596, "6509": 596, "0006": 596, "4728": 596, "6876": 596, "5045": 596, "6474": 596, "9952": 596, "6379": 596, "5282": 596, "614": 596, "7448": 596, "6312": 596, "6377": 596, "5228": 596, "5991": 596, "6261": 596, "4096": 596, "6224": 596, "4271": 596, "577": 596, "722": 596, "5871": 596, "9359": 596, "6123": 596, "4227": 596, "5738": 596, "7203": 596, "5823": 596, "9917": 596, "3377": 596, "615": 596, "4259": 596, "5714": 596, "7247": 596, "9951": 596, "2083": 596, "6154": 596, "4208": 596, "5777": 596, "7198": 596, "5834": 596, "9937": 596, "3121": 596, "7233": 596, "5359": 596, "7753": 596, "195": 596, "7186": 596, "5328": 596, "7699": 596, "6687": 596, "9922": 596, "3463": 596, "7268": 596, "533": 596, "659": 596, "6726": 596, "2897": 596, "5718": 596, "6859": 596, "7927": 596, "6890": 596, "9324": 596, "7006": 596, "5655": 596, "6803": 596, "7965": 596, "6857": 596, "1515": 596, "5752": 596, "6748": 596, "7845": 596, "6724": 596, "5951": 596, "6472": 596, "5716": 596, "6685": 596, "784": 596, "6678": 596, "8539": 596, "6918": 596, "5819": 596, "678": 596, "6861": 596, "8863": 596, "5765": 596, "6827": 596, "7873": 596, "6832": 596, "9958": 596, "1451": 596, "storywrit": 596, "693": 596, "5477": 596, "663": 596, "6719": 596, "9125": 596, "6661": 596, "7813": 596, "6693": 596, "1137": 596, "rw": 596, "6604": 596, "5419": 596, "6598": 596, "6594": 596, "7616": 596, "6484": 596, "5369": 596, "7807": 596, "6559": 596, "9947": 596, "9411": 596, "6571": 596, "5398": 596, "6582": 596, "6579": 596, "8809": 596, "652": 596, "535": 596, "7682": 596, "6532": 596, "9906": 596, "0048": 596, "5177": 596, "6669": 596, "7824": 596, "5053": 596, "6301": 596, "5142": 596, "6654": 596, "6483": 596, "9933": 596, "8146": 596, "517": 596, "9941": 596, "1666": 596, "734": 596, "1658": 596, "1495": 596, "733": 596, "1661": 596, "732": 596, "1713": 596, "767": 596, "1747": 596, "770": 596, "7519": 596, "4430": 596, "4413": 596, "72x": 596, "7190": 596, "4019": 596, "613": 596, "170": 596, "611": 596, "186": 596, "619": 596, "184": 596, "36x": 596, "623": 596, "5711": 596, "2584": 596, "6136": 596, "2630": 596, "33x": 596, "shufflenet": 596, "6820": 596, "3686": 596, "googlenet": 596, "1971": 596, "1120": 596, "76x": 596, "1838": 596, "1142": 596, "squeezenet": 596, "10163": 596, "5771": 596, "10339": 596, "6002": 596, "caffenet": 596, "2805": 596, "1077": 596, "60x": 596, "4351": 596, "822": 596, "2169": 596, "893": 596, "43x": 596, "2232": 596, "841": 596, "65x": 596, "zfnet": 596, "921": 596, "525": 596, "75x": 596, "925": 596, "534": 596, "73x": 596, "1862": 596, "1161": 596, "1956": 596, "1262": 596, "55x": 596, "efficientnet": 596, "2793": 596, "1383": 596, "beit": 596, "206": 596, "91x": 596, "duc": 596, "74x": 596, "ultra": 596, "8780": 596, "1920": 596, "emot": 596, "ferplu": 596, "6360": 596, "3067": 596, "07x": 596, "arcfac": 596, "449": 596, "511": 596, "222": 596, "18x": 596, "integerop": 596, "635": 596, "1324": 596, "244": 596, "47x": 596, "440": 596, "214": 596, "06x": 596, "715": 596, "201": 596, "03x": 596, "714": 596, "213": 596, "339": 596, "58x": 596, "215": 596, "89x": 596, "712": 596, "217": 596, "l12": 596, "h384": 596, "1209": 596, "588": 596, "1268": 596, "16x": 596, "1253": 596, "399": 596, "14x": 596, "l6": 596, "1139": 596, "94x": 596, "2365": 596, "08x": 596, "718": 596, "35x": 596, "electra": 596, "discrimin": 596, "1951": 596, "71x": 596, "2198": 596, "1129": 596, "mini": 596, "5814": 596, "3388": 596, "6396": 596, "3445": 596, "86x": 596, "bart": 596, "126": 596, "spanbert": 596, "multilingu": 596, "82x": 596, "118": 596, "46x": 596, "layoutlmv2": 596, "perplex": 596, "2788": 596, "7002": 596, "4124": 596, "9921": 596, "3950": 596, "9892": 596, "9163": 596, "7240": 596, "9902": 596, "0438": 596, "7634": 596, "1186": 596, "9944": 596, "1276": 596, "7543": 596, "6181": 596, "rtnw4g32asym": 596, "6496": 596, "9967": 596, "7964": 596, "6612": 596, "rtnw4g32sym": 596, "7941": 596, "7243": 596, "9971": 596, "taskdataset": 596, "accuracyspars": 596, "ratiospars": 596, "commentsbalancedor": 596, "unbalanc": 596, "answeringsquad": 596, "87f1": 596, "momentumunbalanc": 596, "momentumbalanc": 596, "90f1": 596, "59f1": 596, "23f1": 596, "classificationmrpc": 596, "52f1": 596, "26f1": 596, "classificationsst": 596, "61accuraci": 596, "recognitionimagenet": 596, "95top1": 596, "v5s6": 596, "detectioncoco": 596, "ap0": 596, "6ap0": 596, "584": 596, "34f1": 596, "lassounbalanc": 596, "classificationmnli": 596, "mm": 596, "allbalanc": 596, "32accuraci": 596, "sensitivitybalanc": 596, "classificationqqp": 596, "classificationqnli": 596, "54accuraci": 596, "em": 596, "mobilenetv2": 596, "wideresnet40": 596, "9522": 596, "8178": 596, "0213": 596, "8235": 596, "027": 596, "5494": 596, "7153": 596, "5540": 596, "5523": 596, "vgg": 596, "bn": 596, "7022": 596, "7415": 596, "7025": 596, "6739": 596, "7399": 596, "6845": 596, "0106": 596, "blendcnn": 596, "7034": 596, "8382": 596, "bilstm": 596, "8314": 596, "9403": 596, "9048": 596, "0734": 596, "7323": 596, "8256": 596, "8084": 596, "8814": 596, "7442": 596, "8371": 596, "0119": 596, "0115": 596, "tinybert": 596, "8018": 596, "8044": 596, "8363": 596, "8411": 596, "8025": 596, "8074": 596, "0007": 596, "8626": 596, "9091": 596, "8782": 596, "8684": 596, "8259": 596, "0058": 596, "distilroberta": 596, "6057": 596, "6187": 596, "0130": 596, "c6i": 596, "2xlarg": 596, "c6a": 596, "c6g": 596, "a100cuda": 596, "executionprovid": 596}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [319, 0, 0, "-", "neural_compressor"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "mxnet_utils"], [5, 0, 0, "-", "ox_utils"], [33, 0, 0, "-", "tensorflow"], [97, 0, 0, "-", "tf_utils"], [137, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.mxnet_utils": [[2, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, 1, 1, "", "CalibCollector"], [2, 1, 1, "", "CalibData"], [2, 1, 1, "", "CollectorBase"], [2, 1, 1, "", "DataIterLoader"], [2, 1, 1, "", "DataLoaderWrap"], [2, 1, 1, "", "NameCollector"], [2, 1, 1, "", "OpType"], [2, 1, 1, "", "TensorCollector"], [2, 2, 1, "", "amp_convert"], [2, 2, 1, "", "calib_model"], [2, 2, 1, "", "check_mx_version"], [2, 2, 1, "", "combine_capabilities"], [2, 2, 1, "", "create_data_example"], [2, 2, 1, "", "distribute_calib_tensors"], [2, 2, 1, "", "ensure_list"], [2, 2, 1, "", "fuse"], [2, 2, 1, "", "get_framework_name"], [2, 2, 1, "", "is_model_quantized"], [2, 2, 1, "", "isiterable"], [2, 2, 1, "", "make_module"], [2, 2, 1, "", "make_nc_model"], [2, 2, 1, "", "make_symbol_block"], [2, 2, 1, "", "ndarray_to_device"], [2, 2, 1, "", "parse_tune_config"], [2, 2, 1, "", "prepare_dataloader"], [2, 2, 1, "", "prepare_model"], [2, 2, 1, "", "prepare_model_data"], [2, 2, 1, "", "quantize_sym_model"], [2, 2, 1, "", "query_quantizable_nodes"], [2, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.ox_utils": [[3, 0, 0, "-", "calibration"], [4, 0, 0, "-", "calibrator"], [17, 0, 0, "-", "operators"], [29, 0, 0, "-", "quantizer"], [30, 0, 0, "-", "smooth_quant"], [31, 0, 0, "-", "util"], [32, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, 1, 1, "", "CalibratorBase"], [4, 1, 1, "", "HistogramCollector"], [4, 1, 1, "", "KLCalibrator"], [4, 1, 1, "", "MinMaxCalibrator"], [4, 1, 1, "", "PercentileCalibrator"], [4, 2, 1, "", "calib_registry"], [4, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[6, 0, 0, "-", "activation"], [7, 0, 0, "-", "argmax"], [8, 0, 0, "-", "attention"], [9, 0, 0, "-", "binary_op"], [10, 0, 0, "-", "concat"], [11, 0, 0, "-", "conv"], [12, 0, 0, "-", "direct_q8"], [13, 0, 0, "-", "embed_layernorm"], [14, 0, 0, "-", "gather"], [15, 0, 0, "-", "gavgpool"], [16, 0, 0, "-", "gemm"], [18, 0, 0, "-", "lstm"], [19, 0, 0, "-", "matmul"], [20, 0, 0, "-", "maxpool"], [21, 0, 0, "-", "norm"], [22, 0, 0, "-", "ops"], [23, 0, 0, "-", "pad"], [24, 0, 0, "-", "pooling"], [25, 0, 0, "-", "reduce"], [26, 0, 0, "-", "resize"], [27, 0, 0, "-", "split"], [28, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, 1, 1, "", "ActivationOperator"], [6, 1, 1, "", "Float16ActivationOperator"], [6, 1, 1, "", "QActivationOperator"], [6, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, 1, 1, "", "ArgMaxOperator"], [7, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, 1, 1, "", "AttentionOperator"], [8, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, 1, 1, "", "BinaryDirect8BitOperator"], [9, 1, 1, "", "BinaryOperator"], [9, 1, 1, "", "Float16BinaryOperator"], [9, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, 1, 1, "", "ConcatOperator"], [10, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, 1, 1, "", "ConvOperator"], [11, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, 1, 1, "", "Direct8BitOperator"], [12, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, 1, 1, "", "EmbedLayerNormalizationOperator"], [13, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, 1, 1, "", "GatherOperator"], [14, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, 1, 1, "", "GlobalAveragePoolOperator"], [15, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, 1, 1, "", "GemmOperator"], [16, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, 1, 1, "", "FusedMatMulOperator"], [19, 1, 1, "", "MatMulOperator"], [19, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, 1, 1, "", "MaxPoolOperator"], [20, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, 1, 1, "", "BatchNormalizationOperator"], [21, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, 1, 1, "", "Operator"], [22, 1, 1, "", "QOperator"], [22, 2, 1, "", "op_registry"], [22, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, 1, 1, "", "PadOperator"], [23, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, 1, 1, "", "PoolOperator"], [24, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, 1, 1, "", "ReduceMinMaxOperator"], [25, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, 1, 1, "", "QResizeOperator"], [26, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, 1, 1, "", "QSplitOperator"], [27, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, 1, 1, "", "UnaryDirect8BitOperator"], [28, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, 1, 1, "", "ORTSmoothQuant"], [30, 2, 1, "", "get_quant_dequant_output"], [30, 2, 1, "", "make_sub_graph"], [30, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[31, 1, 1, "", "QuantFormat"], [31, 1, 1, "", "QuantType"], [31, 1, 1, "", "QuantizationMode"], [31, 1, 1, "", "QuantizedInitializer"], [31, 1, 1, "", "QuantizedValue"], [31, 1, 1, "", "QuantizedValueType"], [31, 1, 1, "", "ValueInfo"], [31, 2, 1, "", "attribute_to_kwarg"], [31, 2, 1, "", "calculate_scale_zp"], [31, 2, 1, "", "cast_tensor"], [31, 2, 1, "", "collate_preds"], [31, 2, 1, "", "dequantize_data"], [31, 2, 1, "", "dequantize_data_with_scale_zero"], [31, 2, 1, "", "dtype_to_name"], [31, 2, 1, "", "find_by_name"], [31, 2, 1, "", "float_to_bfloat16"], [31, 2, 1, "", "float_to_float16"], [31, 2, 1, "", "get_node_original_name"], [31, 2, 1, "", "infer_shapes"], [31, 2, 1, "", "is_B_transposed"], [31, 2, 1, "", "make_dquant_node"], [31, 2, 1, "", "make_quant_node"], [31, 2, 1, "", "quantize_data"], [31, 2, 1, "", "quantize_data_per_channel"], [31, 2, 1, "", "quantize_data_with_scale_zero"], [31, 2, 1, "", "quantize_nparray"], [31, 2, 1, "", "remove_init_from_model_input"], [31, 2, 1, "", "simple_progress_bar"], [31, 2, 1, "", "split_shared_bias"], [31, 2, 1, "", "to_numpy"], [31, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, 2, 1, "", "apply_awq_clip"], [32, 2, 1, "", "apply_awq_scale"], [32, 2, 1, "", "awq_quantize"], [32, 2, 1, "", "get_blob_size"], [32, 2, 1, "", "get_weight_scale"], [32, 2, 1, "", "gptq"], [32, 2, 1, "", "gptq_quantize"], [32, 2, 1, "", "make_matmul_weight_only_node"], [32, 2, 1, "", "pad_tensor"], [32, 2, 1, "", "prepare_inputs"], [32, 2, 1, "", "qdq_tensor"], [32, 2, 1, "", "quant_tensor"], [32, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.tensorflow": [[33, 1, 1, "", "TensorFlowAdaptor"], [33, 1, 1, "", "TensorflowQuery"], [33, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[34, 0, 0, "-", "graph_converter"], [35, 0, 0, "-", "graph_converter_without_calib"], [73, 0, 0, "-", "graph_rewriter"], [96, 0, 0, "-", "graph_util"], [98, 0, 0, "-", "quantize_graph"], [125, 0, 0, "-", "quantize_graph_common"], [126, 0, 0, "-", "smooth_quant_calibration"], [127, 0, 0, "-", "smooth_quant_scaler"], [128, 0, 0, "-", "tf2onnx_converter"], [131, 0, 0, "-", "transform_graph"], [134, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[38, 0, 0, "-", "bf16"], [62, 0, 0, "-", "generic"], [72, 0, 0, "-", "graph_base"], [81, 0, 0, "-", "int8"], [87, 0, 0, "-", "onnx"], [92, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[36, 0, 0, "-", "bf16_convert"], [37, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[39, 0, 0, "-", "convert_add_to_biasadd"], [40, 0, 0, "-", "convert_layout"], [41, 0, 0, "-", "convert_leakyrelu"], [42, 0, 0, "-", "convert_nan_to_random"], [43, 0, 0, "-", "convert_placeholder_to_const"], [44, 0, 0, "-", "dilated_contraction"], [45, 0, 0, "-", "dummy_biasadd"], [46, 0, 0, "-", "expanddims_optimizer"], [47, 0, 0, "-", "fetch_weight_from_reshape"], [48, 0, 0, "-", "fold_batch_norm"], [49, 0, 0, "-", "fold_constant"], [50, 0, 0, "-", "fuse_biasadd_add"], [51, 0, 0, "-", "fuse_column_wise_mul"], [52, 0, 0, "-", "fuse_conv_with_math"], [53, 0, 0, "-", "fuse_decomposed_bn"], [54, 0, 0, "-", "fuse_decomposed_in"], [55, 0, 0, "-", "fuse_gelu"], [56, 0, 0, "-", "fuse_layer_norm"], [57, 0, 0, "-", "fuse_pad_with_conv"], [58, 0, 0, "-", "fuse_pad_with_fp32_conv"], [59, 0, 0, "-", "fuse_reshape_transpose"], [60, 0, 0, "-", "graph_cse_optimizer"], [61, 0, 0, "-", "grappler_pass"], [63, 0, 0, "-", "insert_print_node"], [64, 0, 0, "-", "move_squeeze_after_relu"], [65, 0, 0, "-", "pre_optimize"], [66, 0, 0, "-", "remove_training_nodes"], [67, 0, 0, "-", "rename_batch_norm"], [68, 0, 0, "-", "split_shared_input"], [69, 0, 0, "-", "strip_equivalent_nodes"], [70, 0, 0, "-", "strip_unused_nodes"], [71, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, 1, 1, "", "FuseDecomposedBNOptimizer"], [53, 2, 1, "", "bypass_reshape"], [53, 2, 1, "", "get_const_dim_count"], [53, 2, 1, "", "node_from_map"], [53, 2, 1, "", "node_name_from_input"], [53, 2, 1, "", "valid_reshape_inputs"], [53, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, 1, 1, "", "FuseDecomposedINOptimizer"], [54, 2, 1, "", "bypass_reshape"], [54, 2, 1, "", "get_const_dim_count"], [54, 2, 1, "", "node_from_map"], [54, 2, 1, "", "node_name_from_input"], [54, 2, 1, "", "valid_reshape_inputs"], [54, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, 1, 1, "", "FuseLayerNormOptimizer"], [56, 2, 1, "", "node_from_map"], [56, 2, 1, "", "node_name_from_input"], [56, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[74, 0, 0, "-", "freeze_fake_quant"], [75, 0, 0, "-", "freeze_value"], [76, 0, 0, "-", "freeze_value_without_calib"], [77, 0, 0, "-", "fuse_conv_redundant_dequantize"], [78, 0, 0, "-", "fuse_conv_requantize"], [79, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [80, 0, 0, "-", "fuse_matmul_requantize"], [82, 0, 0, "-", "meta_op_optimizer"], [83, 0, 0, "-", "post_hostconst_converter"], [84, 0, 0, "-", "post_quantized_op_cse"], [85, 0, 0, "-", "rnn_convert"], [86, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [80, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [80, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[88, 0, 0, "-", "onnx_graph"], [89, 0, 0, "-", "onnx_node"], [90, 0, 0, "-", "onnx_schema"], [91, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, 1, 1, "", "OnnxOpSchema"], [90, 2, 1, "", "get_max_supported_opset_version"], [90, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, 1, 1, "", "SeqType"], [91, 2, 1, "", "add_port_to_name"], [91, 2, 1, "", "are_shapes_equal"], [91, 2, 1, "", "assert_error"], [91, 2, 1, "", "compute_const_folding_using_tf"], [91, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [91, 2, 1, "", "find_opset"], [91, 2, 1, "", "get_index_from_strided_slice_of_shape"], [91, 2, 1, "", "get_subgraphs_from_onnx"], [91, 2, 1, "", "get_tensorflow_node_attr"], [91, 2, 1, "", "get_tensorflow_node_shape_attr"], [91, 2, 1, "", "get_tensorflow_tensor_data"], [91, 2, 1, "", "get_tensorflow_tensor_shape"], [91, 2, 1, "", "infer_onnx_shape_dtype"], [91, 2, 1, "", "initialize_name_counter"], [91, 2, 1, "", "is_list_or_tuple"], [91, 2, 1, "", "is_onnx_domain"], [91, 2, 1, "", "make_onnx_inputs_outputs"], [91, 2, 1, "", "make_onnx_shape"], [91, 2, 1, "", "map_numpy_to_onnx_dtype"], [91, 2, 1, "", "map_onnx_to_numpy_type"], [91, 2, 1, "", "map_tensorflow_dtype"], [91, 2, 1, "", "read_tensorflow_node_attrs"], [91, 2, 1, "", "save_protobuf"], [91, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[93, 0, 0, "-", "insert_qdq_pattern"], [94, 0, 0, "-", "merge_duplicated_qdq"], [95, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, 1, 1, "", "GraphAnalyzer"], [96, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[100, 0, 0, "-", "qat"], [116, 0, 0, "-", "qdq"], [118, 0, 0, "-", "quantize_graph_base"], [119, 0, 0, "-", "quantize_graph_bn"], [120, 0, 0, "-", "quantize_graph_concatv2"], [121, 0, 0, "-", "quantize_graph_conv"], [122, 0, 0, "-", "quantize_graph_for_intel_cpu"], [123, 0, 0, "-", "quantize_graph_matmul"], [124, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[99, 0, 0, "-", "fake_quantize"], [101, 0, 0, "-", "quantize_config"], [102, 0, 0, "-", "quantize_helper"], [103, 0, 0, "-", "quantize_layers"], [108, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, 1, 1, "", "FakeQuantize"], [99, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, 2, 1, "", "init_quantize_config"], [102, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[104, 0, 0, "-", "optimize_layer"], [105, 0, 0, "-", "quantize_layer_add"], [106, 0, 0, "-", "quantize_layer_base"], [107, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, 1, 1, "", "QuantizeWrapper"], [108, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[109, 0, 0, "-", "fuse_qdq_bn"], [110, 0, 0, "-", "fuse_qdq_concatv2"], [111, 0, 0, "-", "fuse_qdq_conv"], [112, 0, 0, "-", "fuse_qdq_deconv"], [113, 0, 0, "-", "fuse_qdq_in"], [114, 0, 0, "-", "fuse_qdq_matmul"], [115, 0, 0, "-", "fuse_qdq_pooling"], [117, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, 1, 1, "", "QuantizeGraphBase"], [118, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, 1, 1, "", "SmoothQuantCalibration"], [126, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, 1, 1, "", "SmoothQuantScaler"], [127, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[129, 0, 0, "-", "bias_correction"], [130, 0, 0, "-", "graph_transform_base"], [132, 0, 0, "-", "insert_logging"], [133, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[134, 2, 1, "", "apply_inlining"], [134, 2, 1, "", "collate_tf_preds"], [134, 2, 1, "", "construct_function_from_graph_def"], [134, 2, 1, "", "disable_random"], [134, 2, 1, "", "fix_ref_type_of_graph_def"], [134, 2, 1, "", "generate_feed_dict"], [134, 2, 1, "", "get_estimator_graph"], [134, 2, 1, "", "get_graph_def"], [134, 2, 1, "", "get_input_output_node_names"], [134, 2, 1, "", "get_model_input_shape"], [134, 2, 1, "", "get_tensor_by_name"], [134, 2, 1, "", "get_tensor_val_from_graph_node"], [134, 2, 1, "", "get_weight_from_input_tensor"], [134, 2, 1, "", "int8_node_name_reverse"], [134, 2, 1, "", "is_ckpt_format"], [134, 2, 1, "", "is_saved_model_format"], [134, 2, 1, "", "iterator_sess_run"], [134, 2, 1, "", "parse_saved_model"], [134, 2, 1, "", "read_graph"], [134, 2, 1, "", "reconstruct_saved_model"], [134, 2, 1, "", "strip_equivalent_nodes"], [134, 2, 1, "", "strip_unused_nodes"], [134, 2, 1, "", "tf_diagnosis_helper"], [134, 2, 1, "", "version1_eq_version2"], [134, 2, 1, "", "version1_gt_version2"], [134, 2, 1, "", "version1_gte_version2"], [134, 2, 1, "", "version1_lt_version2"], [134, 2, 1, "", "version1_lte_version2"], [134, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[135, 0, 0, "-", "bf16_convert"], [136, 0, 0, "-", "hawq_metric"], [138, 0, 0, "-", "layer_wise_quant"], [143, 0, 0, "-", "model_wrapper"], [144, 0, 0, "-", "pattern_detector"], [145, 0, 0, "-", "symbolic_trace"], [146, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, 1, 1, "", "BF16ModuleWrapper"], [135, 2, 1, "", "Convert"], [135, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, 1, 1, "", "HessianTrace"], [136, 1, 1, "", "Node_collector"], [136, 2, 1, "", "compare_weights"], [136, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[139, 0, 0, "-", "modified_pickle"], [140, 0, 0, "-", "quantize"], [141, 0, 0, "-", "torch_load"], [142, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, 3, 1, "", "PickleError"], [139, 3, 1, "", "PicklingError"], [139, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, 2, 1, "", "dowload_hf_model"], [142, 2, 1, "", "get_children"], [142, 2, 1, "", "get_module"], [142, 2, 1, "", "get_named_children"], [142, 2, 1, "", "get_super_module_by_name"], [142, 2, 1, "", "load_empty_model"], [142, 2, 1, "", "load_layer_wise_quantized_model"], [142, 2, 1, "", "load_tensor"], [142, 2, 1, "", "load_tensor_from_shard"], [142, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, 1, 1, "", "FakeAffineTensorQuantFunction"], [143, 1, 1, "", "MulLinear"], [143, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, 2, 1, "", "symbolic_trace"], [145, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[146, 2, 1, "", "append_attr"], [146, 2, 1, "", "auto_copy"], [146, 2, 1, "", "calculate_quant_min_max"], [146, 2, 1, "", "calibration"], [146, 2, 1, "", "check_cfg_and_qconfig"], [146, 2, 1, "", "collate_torch_preds"], [146, 2, 1, "", "collect_weight_info"], [146, 2, 1, "", "fetch_module"], [146, 2, 1, "", "forward_wrapper"], [146, 2, 1, "", "generate_activation_observer"], [146, 2, 1, "", "get_absorb_layers"], [146, 2, 1, "", "get_block_prefix"], [146, 2, 1, "", "get_depth"], [146, 2, 1, "", "get_dict_at_depth"], [146, 2, 1, "", "get_element_under_depth"], [146, 2, 1, "", "get_embedding_contiguous"], [146, 2, 1, "", "get_example_input"], [146, 2, 1, "", "get_fallback_order"], [146, 2, 1, "", "get_hidden_states"], [146, 2, 1, "", "get_module_input_output"], [146, 2, 1, "", "get_mse_order_per_fp32"], [146, 2, 1, "", "get_mse_order_per_int8"], [146, 2, 1, "", "get_op_type_by_name"], [146, 2, 1, "", "get_quantizable_ops_from_cfgs"], [146, 2, 1, "", "get_torch_version"], [146, 2, 1, "", "input2tuple"], [146, 2, 1, "", "is_fused_module"], [146, 2, 1, "", "match_datatype_pattern"], [146, 2, 1, "", "move_input_device"], [146, 2, 1, "", "paser_cfgs"], [146, 2, 1, "", "set_module"], [146, 2, 1, "", "simple_inference"], [146, 2, 1, "", "update_sq_scale"]], "neural_compressor": [[149, 0, 0, "-", "algorithm"], [152, 0, 0, "-", "benchmark"], [188, 0, 0, "-", "config"], [189, 0, 0, "-", "contrib"], [213, 0, 0, "-", "data"], [266, 0, 0, "-", "experimental"], [326, 0, 0, "-", "metric"], [328, 0, 0, "-", "mix_precision"], [330, 0, 0, "-", "model"], [338, 0, 0, "-", "objective"], [342, 0, 0, "-", "profiling"], [358, 0, 0, "-", "quantization"], [366, 0, 0, "-", "strategy"], [482, 0, 0, "-", "training"], [486, 0, 0, "-", "utils"], [495, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[147, 0, 0, "-", "algorithm"], [148, 0, 0, "-", "fast_bias_correction"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[147, 1, 1, "", "ALGORITHMS"], [147, 1, 1, "", "Algorithm"], [147, 1, 1, "", "AlgorithmScheduler"], [147, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[148, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[150, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[151, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[152, 2, 1, "", "benchmark_with_raw_cmd"], [152, 2, 1, "", "call_one"], [152, 2, 1, "", "config_instance"], [152, 2, 1, "", "fit"], [152, 2, 1, "", "generate_prefix"], [152, 2, 1, "", "get_architecture"], [152, 2, 1, "", "get_bounded_threads"], [152, 2, 1, "", "get_core_ids"], [152, 2, 1, "", "get_physical_ids"], [152, 2, 1, "", "get_threads"], [152, 2, 1, "", "get_threads_per_core"], [152, 2, 1, "", "profile"], [152, 2, 1, "", "run_instance"], [152, 2, 1, "", "set_all_env_var"], [152, 2, 1, "", "set_env_var"], [152, 2, 1, "", "summary_benchmark"]], "neural_compressor.common.utils": [[153, 0, 0, "-", "logger"]], "neural_compressor.common.utils.logger": [[153, 1, 1, "", "Logger"], [153, 1, 1, "", "TuningLogger"]], "neural_compressor.compression": [[154, 0, 0, "-", "callbacks"], [156, 0, 0, "-", "distillation"], [159, 0, 0, "-", "hpo"], [162, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[154, 1, 1, "", "BaseCallbacks"], [154, 1, 1, "", "DistillationCallbacks"], [154, 1, 1, "", "PruningCallbacks"], [154, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[154, 4, 1, "", "_epoch_ran"], [154, 4, 1, "", "best_model"], [154, 4, 1, "", "best_score"], [154, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[155, 0, 0, "-", "criterions"], [157, 0, 0, "-", "optimizers"], [158, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[155, 1, 1, "", "Criterions"], [155, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [155, 1, 1, "", "KnowledgeDistillationFramework"], [155, 1, 1, "", "KnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchCriterions"], [155, 1, 1, "", "PyTorchCrossEntropyLoss"], [155, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [155, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "SelfKnowledgeDistillationLoss"], [155, 1, 1, "", "TensorFlowCrossEntropyLoss"], [155, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [155, 1, 1, "", "TensorflowCriterions"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [155, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [155, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[157, 1, 1, "", "Optimizers"], [157, 1, 1, "", "PyTorchOptimizers"], [157, 1, 1, "", "PyTorchSGD"], [157, 1, 1, "", "TensorFlowAdam"], [157, 1, 1, "", "TensorFlowAdamW"], [157, 1, 1, "", "TensorFlowSGD"], [157, 1, 1, "", "TensorflowOptimizers"], [157, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[158, 2, 1, "", "get_activation"], [158, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[160, 0, 0, "-", "sa_optimizer"]], "neural_compressor.compression.pruner": [[161, 0, 0, "-", "criteria"], [164, 0, 0, "-", "model_slim"], [168, 0, 0, "-", "patterns"], [162, 2, 1, "", "prepare_pruning"], [175, 0, 0, "-", "pruners"], [180, 0, 0, "-", "pruning"], [181, 0, 0, "-", "regs"], [162, 2, 1, "", "save"], [182, 0, 0, "-", "schedulers"], [183, 0, 0, "-", "tf_criteria"], [184, 0, 0, "-", "utils"], [185, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[161, 1, 1, "", "BlockMaskCriterion"], [161, 1, 1, "", "GradientCriterion"], [161, 1, 1, "", "MagnitudeCriterion"], [161, 1, 1, "", "PruningCriterion"], [161, 1, 1, "", "RetrainFreeCriterion"], [161, 1, 1, "", "SnipCriterion"], [161, 1, 1, "", "SnipMomentumCriterion"], [161, 2, 1, "", "get_criterion"], [161, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[161, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[163, 0, 0, "-", "auto_slim"], [165, 0, 0, "-", "pattern_analyzer"], [166, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, 2, 1, "", "generate_ffn2_pruning_config"], [163, 2, 1, "", "generate_mha_pruning_config"], [163, 2, 1, "", "model_slim"], [163, 2, 1, "", "model_slim_ffn2"], [163, 2, 1, "", "model_slim_mha"], [163, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, 1, 1, "", "ClassifierHeadSearcher"], [165, 1, 1, "", "ClassifierHeadSearcherTF"], [165, 1, 1, "", "JitBasicSearcher"], [165, 1, 1, "", "Linear2LinearSearcher"], [165, 1, 1, "", "RecipeSearcher"], [165, 1, 1, "", "SelfMHASearcher"], [165, 2, 1, "", "get_attributes"], [165, 2, 1, "", "get_common_module"], [165, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "static_graph"], [165, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[165, 4, 1, "", "current_pattern"], [165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "static_graph"], [165, 4, 1, "", "target_layers"], [165, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[165, 4, 1, "", "model"], [165, 4, 1, "", "recipe"], [165, 4, 1, "", "searching_results"], [165, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[165, 4, 1, "", "device"], [165, 4, 1, "", "flatten_static_graph"], [165, 4, 1, "", "model"], [165, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, 1, 1, "", "LinearCompression"], [166, 1, 1, "", "LinearCompressionIterator"], [166, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[166, 4, 1, "", "device"], [166, 4, 1, "", "layer_1"], [166, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[166, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[167, 0, 0, "-", "base"], [168, 2, 1, "", "get_pattern"], [169, 0, 0, "-", "mha"], [170, 0, 0, "-", "ninm"], [171, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[167, 1, 1, "", "BasePattern"], [167, 1, 1, "", "KerasBasePattern"], [167, 1, 1, "", "PytorchBasePattern"], [167, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[167, 4, 1, "", "config"], [167, 4, 1, "", "invalid_layers"], [167, 4, 1, "", "is_global"], [167, 4, 1, "", "keep_mask_layers"], [167, 4, 1, "", "max_sparsity_ratio_per_op"], [167, 4, 1, "", "min_sparsity_ratio_per_op"], [167, 4, 1, "", "modules"], [167, 4, 1, "", "pattern"], [167, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[169, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[169, 4, 1, "", "M"], [169, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[170, 4, 1, "", "M"], [170, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, 1, 1, "", "KerasPatternNxM"], [171, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[171, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[171, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[172, 0, 0, "-", "base"], [173, 0, 0, "-", "basic"], [174, 0, 0, "-", "block_mask"], [175, 2, 1, "", "get_pruner"], [176, 0, 0, "-", "mha"], [175, 2, 1, "", "parse_valid_pruner_types"], [177, 0, 0, "-", "pattern_lock"], [178, 0, 0, "-", "progressive"], [179, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[172, 1, 1, "", "BasePruner"], [172, 1, 1, "", "KerasBasePruner"], [172, 1, 1, "", "PytorchBasePruner"], [172, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[172, 4, 1, "", "config"], [172, 4, 1, "", "current_sparsity_ratio"], [172, 4, 1, "", "end_step"], [172, 4, 1, "", "global_step"], [172, 4, 1, "", "masks"], [172, 4, 1, "", "max_sparsity_ratio_per_op"], [172, 4, 1, "", "modules"], [172, 4, 1, "", "pattern"], [172, 4, 1, "", "pruning_frequency"], [172, 4, 1, "", "scheduler"], [172, 4, 1, "", "scores"], [172, 4, 1, "", "start_step"], [172, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[173, 1, 1, "", "KerasBasicPruner"], [173, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[173, 4, 1, "", "criterion"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "reg"], [173, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[173, 4, 1, "", "criterion"], [173, 4, 1, "", "pattern"], [173, 4, 1, "", "reg"], [173, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[174, 4, 1, "", "criterion"], [174, 4, 1, "", "pattern"], [174, 4, 1, "", "reg"], [174, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[176, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[176, 4, 1, "", "head_masks"], [176, 4, 1, "", "linear_layers"], [176, 4, 1, "", "mha_compressions"], [176, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[179, 4, 1, "", "criterion"], [179, 4, 1, "", "pattern"], [179, 4, 1, "", "reg"], [179, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[180, 1, 1, "", "BasePruning"], [180, 1, 1, "", "BasicPruning"], [180, 1, 1, "", "RetrainFreePruning"], [180, 1, 1, "", "SparseGPTPruning"], [180, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[180, 4, 1, "", "config_file_path"], [180, 4, 1, "", "model"], [180, 4, 1, "", "pruner_info"], [180, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[181, 1, 1, "", "BaseReg"], [181, 1, 1, "", "GroupLasso"], [181, 2, 1, "", "get_reg"], [181, 2, 1, "", "get_reg_type"], [181, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[181, 4, 1, "", "alpha"], [181, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[182, 1, 1, "", "IterativeScheduler"], [182, 1, 1, "", "OneshotScheduler"], [182, 1, 1, "", "PruningScheduler"], [182, 2, 1, "", "get_scheduler"], [182, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[182, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[183, 1, 1, "", "MagnitudeCriterion"], [183, 1, 1, "", "PruningCriterion"], [183, 2, 1, "", "get_tf_criterion"], [183, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[184, 2, 1, "", "check_config"], [184, 2, 1, "", "check_key_validity"], [184, 2, 1, "", "collect_layer_inputs"], [184, 2, 1, "", "generate_pruner_config"], [184, 2, 1, "", "get_layers"], [184, 2, 1, "", "get_sparsity_ratio"], [184, 2, 1, "", "get_sparsity_ratio_tf"], [184, 2, 1, "", "parse_last_linear"], [184, 2, 1, "", "parse_last_linear_tf"], [184, 2, 1, "", "parse_to_prune"], [184, 2, 1, "", "parse_to_prune_tf"], [184, 2, 1, "", "process_and_check_config"], [184, 2, 1, "", "process_config"], [184, 2, 1, "", "process_weight_config"], [184, 2, 1, "", "process_yaml_config"], [184, 2, 1, "", "reset_none_to_default"], [184, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[186, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.wanda.utils": [[186, 2, 1, "", "find_layers"]], "neural_compressor.conf": [[187, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.pythonic_config": [[187, 1, 1, "", "AccuracyCriterion"], [187, 1, 1, "", "BenchmarkConfig"], [187, 1, 1, "", "DistillationConfig"], [187, 1, 1, "", "KnowledgeDistillationLossConfig"], [187, 1, 1, "", "Options"], [187, 1, 1, "", "QuantizationConfig"], [187, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[188, 1, 1, "", "AccuracyCriterion"], [188, 1, 1, "", "BenchmarkConfig"], [188, 1, 1, "", "DistillationConfig"], [188, 1, 1, "", "DotDict"], [188, 1, 1, "", "ExportConfig"], [188, 1, 1, "", "HPOConfig"], [188, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [188, 1, 1, "", "Keras"], [188, 1, 1, "", "KnowledgeDistillationLossConfig"], [188, 1, 1, "", "MXNet"], [188, 1, 1, "", "MixedPrecisionConfig"], [188, 1, 1, "", "NASConfig"], [188, 1, 1, "", "ONNX"], [188, 1, 1, "", "ONNXQlinear2QDQConfig"], [188, 1, 1, "", "Options"], [188, 1, 1, "", "PostTrainingQuantConfig"], [188, 1, 1, "", "PyTorch"], [188, 1, 1, "", "QuantizationAwareTrainingConfig"], [188, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [188, 1, 1, "", "TF2ONNXConfig"], [188, 1, 1, "", "TensorFlow"], [188, 1, 1, "", "Torch2ONNXConfig"], [188, 1, 1, "", "TuningCriterion"], [188, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[190, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[191, 0, 0, "-", "sigopt"], [192, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[191, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[192, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data.dataloaders": [[193, 0, 0, "-", "base_dataloader"], [194, 0, 0, "-", "dataloader"], [195, 0, 0, "-", "default_dataloader"], [196, 0, 0, "-", "fetcher"], [197, 0, 0, "-", "mxnet_dataloader"], [198, 0, 0, "-", "onnxrt_dataloader"], [199, 0, 0, "-", "pytorch_dataloader"], [200, 0, 0, "-", "sampler"], [201, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[193, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[194, 1, 1, "", "DataLoader"], [194, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[195, 1, 1, "", "DefaultDataLoader"], [195, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[196, 1, 1, "", "Fetcher"], [196, 1, 1, "", "IndexFetcher"], [196, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[197, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[198, 1, 1, "", "ONNXRTBertDataLoader"], [198, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[199, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[200, 1, 1, "", "BatchSampler"], [200, 1, 1, "", "IterableSampler"], [200, 1, 1, "", "Sampler"], [200, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[201, 1, 1, "", "TFDataDataLoader"], [201, 1, 1, "", "TensorflowBertDataLoader"], [201, 1, 1, "", "TensorflowDataLoader"], [201, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data": [[208, 0, 0, "-", "datasets"], [212, 0, 0, "-", "filters"], [215, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[202, 0, 0, "-", "bert_dataset"], [203, 0, 0, "-", "coco_dataset"], [204, 0, 0, "-", "dataset"], [205, 0, 0, "-", "dummy_dataset"], [206, 0, 0, "-", "dummy_dataset_v2"], [207, 0, 0, "-", "imagenet_dataset"], [209, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[202, 1, 1, "", "InputFeatures"], [202, 1, 1, "", "ONNXRTBertDataset"], [202, 1, 1, "", "ParseDecodeBert"], [202, 1, 1, "", "PytorchBertDataset"], [202, 1, 1, "", "TensorflowBertDataset"], [202, 1, 1, "", "TensorflowModelZooBertDataset"], [202, 2, 1, "", "convert_examples_to_features"], [202, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[203, 1, 1, "", "COCONpy"], [203, 1, 1, "", "COCORaw"], [203, 1, 1, "", "COCORecordDataset"], [203, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[204, 1, 1, "", "CIFAR10"], [204, 1, 1, "", "CIFAR100"], [204, 1, 1, "", "Dataset"], [204, 1, 1, "", "Datasets"], [204, 1, 1, "", "FashionMNIST"], [204, 1, 1, "", "ImageFolder"], [204, 1, 1, "", "IterableDataset"], [204, 1, 1, "", "MNIST"], [204, 1, 1, "", "MXNetCIFAR10"], [204, 1, 1, "", "MXNetCIFAR100"], [204, 1, 1, "", "MXNetDatasets"], [204, 1, 1, "", "MXNetFashionMNIST"], [204, 1, 1, "", "MXNetImageFolder"], [204, 1, 1, "", "MXNetMNIST"], [204, 1, 1, "", "ONNXRTITDatasets"], [204, 1, 1, "", "ONNXRTQLDatasets"], [204, 1, 1, "", "PyTorchDatasets"], [204, 1, 1, "", "PytorchCIFAR10"], [204, 1, 1, "", "PytorchCIFAR100"], [204, 1, 1, "", "PytorchFashionMNIST"], [204, 1, 1, "", "PytorchMNIST"], [204, 1, 1, "", "PytorchMxnetWrapDataset"], [204, 1, 1, "", "PytorchMxnetWrapFunction"], [204, 1, 1, "", "Tensorflow"], [204, 1, 1, "", "TensorflowCIFAR10"], [204, 1, 1, "", "TensorflowCIFAR100"], [204, 1, 1, "", "TensorflowDatasets"], [204, 1, 1, "", "TensorflowFashionMNIST"], [204, 1, 1, "", "TensorflowImageRecord"], [204, 1, 1, "", "TensorflowMNIST"], [204, 1, 1, "", "TensorflowTFRecordDataset"], [204, 1, 1, "", "TensorflowVOCRecord"], [204, 2, 1, "", "calculate_md5"], [204, 2, 1, "", "check_integrity"], [204, 2, 1, "", "dataset_registry"], [204, 2, 1, "", "download_url"], [204, 5, 1, "", "framework_datasets"], [204, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[205, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[206, 1, 1, "", "DummyDataset"], [206, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[207, 1, 1, "", "ImagenetRaw"], [207, 1, 1, "", "MXNetImagenetRaw"], [207, 1, 1, "", "ONNXRTImagenetDataset"], [207, 1, 1, "", "PytorchImagenetRaw"], [207, 1, 1, "", "TensorflowImagenetDataset"], [207, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[209, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[210, 0, 0, "-", "coco_filter"], [211, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[210, 1, 1, "", "LabelBalanceCOCORawFilter"], [210, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[211, 1, 1, "", "FILTERS"], [211, 1, 1, "", "Filter"], [211, 1, 1, "", "MXNetFilters"], [211, 1, 1, "", "ONNXRTITFilters"], [211, 1, 1, "", "ONNXRTQLFilters"], [211, 1, 1, "", "PyTorchFilters"], [211, 1, 1, "", "TensorflowFilters"], [211, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[214, 0, 0, "-", "imagenet_transform"], [216, 0, 0, "-", "postprocess"], [217, 0, 0, "-", "tokenization"], [218, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[214, 1, 1, "", "BilinearImagenetTransform"], [214, 1, 1, "", "LabelShift"], [214, 1, 1, "", "ONNXResizeCropImagenetTransform"], [214, 1, 1, "", "OnnxBilinearImagenetTransform"], [214, 1, 1, "", "ParseDecodeImagenet"], [214, 1, 1, "", "ParseDecodeImagenetTransform"], [214, 1, 1, "", "QuantizedInput"], [214, 1, 1, "", "ResizeWithAspectRatio"], [214, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [214, 1, 1, "", "TensorflowShiftRescale"], [214, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[216, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[217, 1, 1, "", "BasicTokenizer"], [217, 1, 1, "", "FullTokenizer"], [217, 1, 1, "", "WordpieceTokenizer"], [217, 2, 1, "", "convert_by_vocab"], [217, 2, 1, "", "convert_to_unicode"], [217, 2, 1, "", "load_vocab"], [217, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[218, 1, 1, "", "AlignImageChannelTransform"], [218, 1, 1, "", "BaseTransform"], [218, 1, 1, "", "CastONNXTransform"], [218, 1, 1, "", "CastPyTorchTransform"], [218, 1, 1, "", "CastTFTransform"], [218, 1, 1, "", "CenterCropTFTransform"], [218, 1, 1, "", "CenterCropTransform"], [218, 1, 1, "", "CollectTransform"], [218, 1, 1, "", "ComposeTransform"], [218, 1, 1, "", "CropResizeTFTransform"], [218, 1, 1, "", "CropResizeTransform"], [218, 1, 1, "", "CropToBoundingBox"], [218, 1, 1, "", "InputFeatures"], [218, 1, 1, "", "MXNetCropResizeTransform"], [218, 1, 1, "", "MXNetCropToBoundingBox"], [218, 1, 1, "", "MXNetNormalizeTransform"], [218, 1, 1, "", "MXNetTransforms"], [218, 1, 1, "", "MXNetTranspose"], [218, 1, 1, "", "NormalizeTFTransform"], [218, 1, 1, "", "NormalizeTransform"], [218, 1, 1, "", "ONNXRTCropToBoundingBox"], [218, 1, 1, "", "ONNXRTITTransforms"], [218, 1, 1, "", "ONNXRTQLTransforms"], [218, 1, 1, "", "PaddedCenterCropTransform"], [218, 1, 1, "", "ParseDecodeVocTransform"], [218, 1, 1, "", "PyTorchAlignImageChannel"], [218, 1, 1, "", "PyTorchCropResizeTransform"], [218, 1, 1, "", "PyTorchNormalizeTransform"], [218, 1, 1, "", "PyTorchTransforms"], [218, 1, 1, "", "PyTorchTranspose"], [218, 1, 1, "", "PytorchMxnetTransform"], [218, 1, 1, "", "PytorchMxnetWrapFunction"], [218, 1, 1, "", "RandomCropTFTransform"], [218, 1, 1, "", "RandomCropTransform"], [218, 1, 1, "", "RandomHorizontalFlip"], [218, 1, 1, "", "RandomResizedCropMXNetTransform"], [218, 1, 1, "", "RandomResizedCropPytorchTransform"], [218, 1, 1, "", "RandomResizedCropTFTransform"], [218, 1, 1, "", "RandomResizedCropTransform"], [218, 1, 1, "", "RandomVerticalFlip"], [218, 1, 1, "", "RescaleKerasPretrainTransform"], [218, 1, 1, "", "RescaleTFTransform"], [218, 1, 1, "", "RescaleTransform"], [218, 1, 1, "", "ResizeMXNetTransform"], [218, 1, 1, "", "ResizePytorchTransform"], [218, 1, 1, "", "ResizeTFTransform"], [218, 1, 1, "", "ResizeTransform"], [218, 1, 1, "", "ResizeWithRatio"], [218, 1, 1, "", "SquadExample"], [218, 1, 1, "", "TFModelZooCollectTransform"], [218, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [218, 1, 1, "", "TFSquadV1PostTransform"], [218, 1, 1, "", "TRANSFORMS"], [218, 1, 1, "", "TensorflowCropToBoundingBox"], [218, 1, 1, "", "TensorflowRandomHorizontalFlip"], [218, 1, 1, "", "TensorflowRandomVerticalFlip"], [218, 1, 1, "", "TensorflowResizeWithRatio"], [218, 1, 1, "", "TensorflowTransform"], [218, 1, 1, "", "TensorflowTransforms"], [218, 1, 1, "", "TensorflowTranspose"], [218, 1, 1, "", "TensorflowWrapFunction"], [218, 1, 1, "", "ToArray"], [218, 1, 1, "", "ToNDArrayTransform"], [218, 1, 1, "", "Transforms"], [218, 1, 1, "", "Transpose"], [218, 2, 1, "", "convert_examples_to_features"], [218, 2, 1, "", "get_final_text"], [218, 2, 1, "", "get_torchvision_map"], [218, 2, 1, "", "read_squad_examples"], [218, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[219, 0, 0, "-", "benchmark"], [222, 0, 0, "-", "common"], [228, 0, 0, "-", "component"], [229, 0, 0, "-", "compression"], [230, 0, 0, "-", "contrib"], [255, 0, 0, "-", "data"], [260, 0, 0, "-", "distillation"], [261, 0, 0, "-", "export"], [265, 0, 0, "-", "graph_optimization"], [273, 0, 0, "-", "metric"], [275, 0, 0, "-", "mixed_precision"], [276, 0, 0, "-", "model_conversion"], [279, 0, 0, "-", "nas"], [285, 0, 0, "-", "pruner_legacy"], [289, 0, 0, "-", "pruning"], [290, 0, 0, "-", "pruning_recipes"], [294, 0, 0, "-", "pruning_v2"], [295, 0, 0, "-", "pytorch_pruner"], [302, 0, 0, "-", "quantization"], [303, 0, 0, "-", "scheduler"], [308, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[219, 1, 1, "", "Benchmark"], [219, 2, 1, "", "get_architecture"], [219, 2, 1, "", "get_bounded_threads"], [219, 2, 1, "", "get_core_ids"], [219, 2, 1, "", "get_physical_ids"], [219, 2, 1, "", "get_threads"], [219, 2, 1, "", "get_threads_per_core"], [219, 2, 1, "", "set_all_env_var"], [219, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[220, 0, 0, "-", "criterion"], [221, 0, 0, "-", "dataloader"], [223, 0, 0, "-", "metric"], [224, 0, 0, "-", "model"], [225, 0, 0, "-", "optimizer"], [226, 0, 0, "-", "postprocess"], [227, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[220, 1, 1, "", "Criterions"], [220, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [220, 1, 1, "", "KnowledgeDistillationFramework"], [220, 1, 1, "", "KnowledgeDistillationLoss"], [220, 1, 1, "", "PyTorchCriterions"], [220, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [220, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [220, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [220, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [220, 1, 1, "", "SelfKnowledgeDistillationLoss"], [220, 1, 1, "", "TensorflowCriterions"], [220, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [220, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[221, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[223, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[224, 1, 1, "", "Model"], [224, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[225, 1, 1, "", "Optimizers"], [225, 1, 1, "", "PyTorchOptimizers"], [225, 1, 1, "", "PyTorchSGD"], [225, 1, 1, "", "TensorFlowAdamW"], [225, 1, 1, "", "TensorFlowSGD"], [225, 1, 1, "", "TensorflowOptimizers"], [225, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[226, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[227, 2, 1, "", "get_activation"], [227, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[228, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[231, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[232, 0, 0, "-", "sigopt"], [233, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[238, 0, 0, "-", "dataloaders"], [250, 0, 0, "-", "datasets"], [254, 0, 0, "-", "filters"], [257, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[234, 0, 0, "-", "base_dataloader"], [235, 0, 0, "-", "dataloader"], [236, 0, 0, "-", "default_dataloader"], [237, 0, 0, "-", "fetcher"], [239, 0, 0, "-", "mxnet_dataloader"], [240, 0, 0, "-", "onnxrt_dataloader"], [241, 0, 0, "-", "pytorch_dataloader"], [242, 0, 0, "-", "sampler"], [243, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, 1, 1, "", "DefaultDataLoader"], [236, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, 1, 1, "", "Fetcher"], [237, 1, 1, "", "IndexFetcher"], [237, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, 1, 1, "", "ONNXRTBertDataLoader"], [240, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, 1, 1, "", "BatchSampler"], [242, 1, 1, "", "IterableSampler"], [242, 1, 1, "", "Sampler"], [242, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, 1, 1, "", "TFDataDataLoader"], [243, 1, 1, "", "TensorflowBertDataLoader"], [243, 1, 1, "", "TensorflowDataLoader"], [243, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[244, 0, 0, "-", "bert_dataset"], [245, 0, 0, "-", "coco_dataset"], [246, 0, 0, "-", "dataset"], [247, 0, 0, "-", "dummy_dataset"], [248, 0, 0, "-", "dummy_dataset_v2"], [249, 0, 0, "-", "imagenet_dataset"], [251, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, 1, 1, "", "InputFeatures"], [244, 1, 1, "", "ONNXRTBertDataset"], [244, 1, 1, "", "ParseDecodeBert"], [244, 1, 1, "", "PytorchBertDataset"], [244, 1, 1, "", "TensorflowBertDataset"], [244, 1, 1, "", "TensorflowModelZooBertDataset"], [244, 2, 1, "", "convert_examples_to_features"], [244, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, 1, 1, "", "COCONpy"], [245, 1, 1, "", "COCORaw"], [245, 1, 1, "", "COCORecordDataset"], [245, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[246, 1, 1, "", "CIFAR10"], [246, 1, 1, "", "CIFAR100"], [246, 1, 1, "", "Dataset"], [246, 1, 1, "", "Datasets"], [246, 1, 1, "", "FashionMNIST"], [246, 1, 1, "", "ImageFolder"], [246, 1, 1, "", "IterableDataset"], [246, 1, 1, "", "MNIST"], [246, 1, 1, "", "MXNetCIFAR10"], [246, 1, 1, "", "MXNetCIFAR100"], [246, 1, 1, "", "MXNetDatasets"], [246, 1, 1, "", "MXNetFashionMNIST"], [246, 1, 1, "", "MXNetImageFolder"], [246, 1, 1, "", "MXNetMNIST"], [246, 1, 1, "", "ONNXRTITDatasets"], [246, 1, 1, "", "ONNXRTQLDatasets"], [246, 1, 1, "", "PyTorchDatasets"], [246, 1, 1, "", "PytorchCIFAR10"], [246, 1, 1, "", "PytorchCIFAR100"], [246, 1, 1, "", "PytorchFashionMNIST"], [246, 1, 1, "", "PytorchMNIST"], [246, 1, 1, "", "PytorchMxnetWrapDataset"], [246, 1, 1, "", "PytorchMxnetWrapFunction"], [246, 1, 1, "", "TensorflowCIFAR10"], [246, 1, 1, "", "TensorflowCIFAR100"], [246, 1, 1, "", "TensorflowDatasets"], [246, 1, 1, "", "TensorflowFashionMNIST"], [246, 1, 1, "", "TensorflowImageFolder"], [246, 1, 1, "", "TensorflowImageRecord"], [246, 1, 1, "", "TensorflowMNIST"], [246, 1, 1, "", "TensorflowTFRecordDataset"], [246, 1, 1, "", "TensorflowVOCRecord"], [246, 2, 1, "", "calculate_md5"], [246, 2, 1, "", "check_integrity"], [246, 2, 1, "", "dataset_registry"], [246, 2, 1, "", "download_url"], [246, 5, 1, "", "framework_datasets"], [246, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, 1, 1, "", "DummyDataset"], [248, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, 1, 1, "", "ImagenetRaw"], [249, 1, 1, "", "MXNetImagenetRaw"], [249, 1, 1, "", "ONNXRTImagenetDataset"], [249, 1, 1, "", "PytorchImagenetRaw"], [249, 1, 1, "", "TensorflowImagenetDataset"], [249, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[252, 0, 0, "-", "coco_filter"], [253, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, 1, 1, "", "LabelBalanceCOCORawFilter"], [252, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[253, 1, 1, "", "FILTERS"], [253, 1, 1, "", "Filter"], [253, 1, 1, "", "MXNetFilters"], [253, 1, 1, "", "ONNXRTITFilters"], [253, 1, 1, "", "ONNXRTQLFilters"], [253, 1, 1, "", "PyTorchFilters"], [253, 1, 1, "", "TensorflowFilters"], [253, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[256, 0, 0, "-", "imagenet_transform"], [258, 0, 0, "-", "tokenization"], [259, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, 1, 1, "", "BilinearImagenetTransform"], [256, 1, 1, "", "LabelShift"], [256, 1, 1, "", "ONNXResizeCropImagenetTransform"], [256, 1, 1, "", "OnnxBilinearImagenetTransform"], [256, 1, 1, "", "ParseDecodeImagenet"], [256, 1, 1, "", "ParseDecodeImagenetTransform"], [256, 1, 1, "", "QuantizedInput"], [256, 1, 1, "", "ResizeWithAspectRatio"], [256, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, 1, 1, "", "BasicTokenizer"], [258, 1, 1, "", "FullTokenizer"], [258, 1, 1, "", "WordpieceTokenizer"], [258, 2, 1, "", "convert_by_vocab"], [258, 2, 1, "", "convert_to_unicode"], [258, 2, 1, "", "load_vocab"], [258, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[259, 1, 1, "", "AlignImageChannelTransform"], [259, 1, 1, "", "BaseTransform"], [259, 1, 1, "", "CastONNXTransform"], [259, 1, 1, "", "CastPyTorchTransform"], [259, 1, 1, "", "CastTFTransform"], [259, 1, 1, "", "CenterCropTFTransform"], [259, 1, 1, "", "CenterCropTransform"], [259, 1, 1, "", "CollectTransform"], [259, 1, 1, "", "ComposeTransform"], [259, 1, 1, "", "CropResizeTFTransform"], [259, 1, 1, "", "CropResizeTransform"], [259, 1, 1, "", "CropToBoundingBox"], [259, 1, 1, "", "InputFeatures"], [259, 1, 1, "", "MXNetCropResizeTransform"], [259, 1, 1, "", "MXNetCropToBoundingBox"], [259, 1, 1, "", "MXNetNormalizeTransform"], [259, 1, 1, "", "MXNetTransforms"], [259, 1, 1, "", "MXNetTranspose"], [259, 1, 1, "", "NormalizeTFTransform"], [259, 1, 1, "", "NormalizeTransform"], [259, 1, 1, "", "ONNXRTCropToBoundingBox"], [259, 1, 1, "", "ONNXRTITTransforms"], [259, 1, 1, "", "ONNXRTQLTransforms"], [259, 1, 1, "", "PaddedCenterCropTransform"], [259, 1, 1, "", "ParseDecodeVocTransform"], [259, 1, 1, "", "PyTorchAlignImageChannel"], [259, 1, 1, "", "PyTorchCropResizeTransform"], [259, 1, 1, "", "PyTorchNormalizeTransform"], [259, 1, 1, "", "PyTorchTransforms"], [259, 1, 1, "", "PyTorchTranspose"], [259, 1, 1, "", "PytorchMxnetTransform"], [259, 1, 1, "", "PytorchMxnetWrapFunction"], [259, 1, 1, "", "RandomCropTFTransform"], [259, 1, 1, "", "RandomCropTransform"], [259, 1, 1, "", "RandomHorizontalFlip"], [259, 1, 1, "", "RandomResizedCropMXNetTransform"], [259, 1, 1, "", "RandomResizedCropPytorchTransform"], [259, 1, 1, "", "RandomResizedCropTFTransform"], [259, 1, 1, "", "RandomResizedCropTransform"], [259, 1, 1, "", "RandomVerticalFlip"], [259, 1, 1, "", "RescaleKerasPretrainTransform"], [259, 1, 1, "", "RescaleTFTransform"], [259, 1, 1, "", "RescaleTransform"], [259, 1, 1, "", "ResizeMXNetTransform"], [259, 1, 1, "", "ResizePytorchTransform"], [259, 1, 1, "", "ResizeTFTransform"], [259, 1, 1, "", "ResizeTransform"], [259, 1, 1, "", "ResizeWithRatio"], [259, 1, 1, "", "SquadExample"], [259, 1, 1, "", "TFModelZooCollectTransform"], [259, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [259, 1, 1, "", "TFSquadV1PostTransform"], [259, 1, 1, "", "TRANSFORMS"], [259, 1, 1, "", "TensorflowCropToBoundingBox"], [259, 1, 1, "", "TensorflowRandomHorizontalFlip"], [259, 1, 1, "", "TensorflowRandomVerticalFlip"], [259, 1, 1, "", "TensorflowResizeWithRatio"], [259, 1, 1, "", "TensorflowTransform"], [259, 1, 1, "", "TensorflowTransforms"], [259, 1, 1, "", "TensorflowTranspose"], [259, 1, 1, "", "TensorflowWrapFunction"], [259, 1, 1, "", "ToArray"], [259, 1, 1, "", "ToNDArrayTransform"], [259, 1, 1, "", "Transforms"], [259, 1, 1, "", "Transpose"], [259, 2, 1, "", "convert_examples_to_features"], [259, 2, 1, "", "get_final_text"], [259, 2, 1, "", "get_torchvision_map"], [259, 2, 1, "", "read_squad_examples"], [259, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[260, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[260, 4, 1, "", "_epoch_ran"], [260, 4, 1, "", "best_model"], [260, 4, 1, "", "best_score"], [260, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[262, 0, 0, "-", "qlinear2qdq"], [263, 0, 0, "-", "tf2onnx"], [264, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, 2, 1, "", "check_model"], [262, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, 2, 1, "", "tf_to_fp32_onnx"], [263, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[264, 2, 1, "", "dynamic_quant_export"], [264, 2, 1, "", "get_node_mapping"], [264, 2, 1, "", "get_quantizable_onnx_ops"], [264, 2, 1, "", "static_quant_export"], [264, 2, 1, "", "torch_to_fp32_onnx"], [264, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[265, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[267, 0, 0, "-", "bleu"], [268, 0, 0, "-", "bleu_util"], [269, 0, 0, "-", "coco_label_map"], [270, 0, 0, "-", "coco_tools"], [271, 0, 0, "-", "evaluate_squad"], [272, 0, 0, "-", "f1"], [274, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[267, 1, 1, "", "BLEU"], [267, 1, 1, "", "UnicodeRegex"], [267, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[267, 4, 1, "", "labels"], [267, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[267, 4, 1, "", "nondigit_punct_re"], [267, 4, 1, "", "punct_nondigit_re"], [267, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[268, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[270, 1, 1, "", "COCOEvalWrapper"], [270, 1, 1, "", "COCOWrapper"], [270, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [270, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [270, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[270, 4, 1, "", "dataset"], [270, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, 2, 1, "", "evaluate"], [271, 2, 1, "", "exact_match_score"], [271, 2, 1, "", "f1_score"], [271, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, 2, 1, "", "evaluate"], [272, 2, 1, "", "f1_score"], [272, 2, 1, "", "metric_max_over_ground_truths"], [272, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[274, 1, 1, "", "Accuracy"], [274, 1, 1, "", "BaseMetric"], [274, 1, 1, "", "COCOmAPv2"], [274, 1, 1, "", "F1"], [274, 1, 1, "", "GeneralTopK"], [274, 1, 1, "", "Loss"], [274, 1, 1, "", "MAE"], [274, 1, 1, "", "METRICS"], [274, 1, 1, "", "MSE"], [274, 1, 1, "", "MXNetMetrics"], [274, 1, 1, "", "ONNXRTGLUE"], [274, 1, 1, "", "ONNXRTITMetrics"], [274, 1, 1, "", "ONNXRTQLMetrics"], [274, 1, 1, "", "PyTorchLoss"], [274, 1, 1, "", "PyTorchMetrics"], [274, 1, 1, "", "RMSE"], [274, 1, 1, "", "ROC"], [274, 1, 1, "", "SquadF1"], [274, 1, 1, "", "TensorflowCOCOMAP"], [274, 1, 1, "", "TensorflowMAP"], [274, 1, 1, "", "TensorflowMetrics"], [274, 1, 1, "", "TensorflowTopK"], [274, 1, 1, "", "TensorflowVOCMAP"], [274, 1, 1, "", "WrapMXNetMetric"], [274, 1, 1, "", "WrapONNXRTMetric"], [274, 1, 1, "", "WrapPyTorchMetric"], [274, 1, 1, "", "mIOU"], [274, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[274, 4, 1, "", "label_list"], [274, 4, 1, "", "pred_list"], [274, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[274, 4, 1, "", "k"], [274, 4, 1, "", "num_correct"], [274, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[274, 4, 1, "", "sample"], [274, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[274, 4, 1, "", "compare_label"], [274, 4, 1, "", "label_list"], [274, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[274, 4, 1, "", "compare_label"], [274, 4, 1, "", "label_list"], [274, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[274, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[274, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[274, 4, 1, "", "k"], [274, 4, 1, "", "num_correct"], [274, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[275, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[276, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[277, 0, 0, "-", "basic_nas"], [278, 0, 0, "-", "dynas"], [280, 0, 0, "-", "nas"], [281, 0, 0, "-", "nas_utils"], [282, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[277, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[278, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[280, 1, 1, "", "NAS"], [280, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[281, 2, 1, "", "create_search_space_pool"], [281, 2, 1, "", "find_pareto_front"], [281, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[282, 1, 1, "", "BayesianOptimizationSearcher"], [282, 1, 1, "", "GridSearcher"], [282, 1, 1, "", "RandomSearcher"], [282, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[283, 0, 0, "-", "gradient_sensitivity"], [284, 0, 0, "-", "group_lasso"], [286, 0, 0, "-", "magnitude"], [287, 0, 0, "-", "pattern_lock"], [288, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, 1, 1, "", "Pruner"], [288, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[289, 1, 1, "", "Pruning"], [289, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[289, 4, 1, "", "conf"], [289, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[291, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[292, 0, 0, "-", "pattern"], [293, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, 1, 1, "", "PATTERNS"], [292, 1, 1, "", "PatternBase"], [292, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[292, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, 1, 1, "", "TilePatternBase"], [293, 1, 1, "", "TilePattern_1x1"], [293, 1, 1, "", "TilePattern_1x16"], [293, 1, 1, "", "TilePattern_1x2"], [293, 1, 1, "", "TilePattern_2x2"], [293, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[294, 1, 1, "", "Pruning"], [294, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[294, 4, 1, "", "conf"], [294, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[296, 0, 0, "-", "logger"], [297, 0, 0, "-", "patterns"], [298, 0, 0, "-", "prune_utils"], [299, 0, 0, "-", "pruner"], [300, 0, 0, "-", "pruning"], [301, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, 1, 1, "", "Pattern"], [297, 1, 1, "", "PatternNInM"], [297, 1, 1, "", "PatternNxM"], [297, 2, 1, "", "get_pattern"], [297, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[297, 4, 1, "", "is_global"], [297, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[297, 4, 1, "", "M"], [297, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[297, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, 2, 1, "", "check_config"], [298, 2, 1, "", "parse_not_to_prune"], [298, 2, 1, "", "parse_to_prune"], [298, 2, 1, "", "process_and_check_config"], [298, 2, 1, "", "process_config"], [298, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, 1, 1, "", "MagnitudePruner"], [299, 1, 1, "", "PatternLockPruner"], [299, 1, 1, "", "Pruner"], [299, 1, 1, "", "SnipMomentumPruner"], [299, 1, 1, "", "SnipPruner"], [299, 2, 1, "", "get_pruner"], [299, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[299, 4, 1, "", "config"], [299, 4, 1, "", "current_sparsity_ratio"], [299, 4, 1, "", "end_step"], [299, 4, 1, "", "global_step"], [299, 4, 1, "", "masks"], [299, 4, 1, "", "max_sparsity_ratio_per_layer"], [299, 4, 1, "", "modules"], [299, 4, 1, "", "pattern"], [299, 4, 1, "", "scheduler"], [299, 4, 1, "", "scores"], [299, 4, 1, "", "start_step"], [299, 4, 1, "", "target_sparsity_ratio"], [299, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[300, 4, 1, "", "config_file_path"], [300, 4, 1, "", "model"], [300, 4, 1, "", "pruner_info"], [300, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, 1, 1, "", "IterativeScheduler"], [301, 1, 1, "", "OneshotScheduler"], [301, 1, 1, "", "Scheduler"], [301, 2, 1, "", "get_scheduler"], [301, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[301, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[302, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[303, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[304, 0, 0, "-", "auto_mixed_precision"], [305, 0, 0, "-", "basic"], [306, 0, 0, "-", "bayesian"], [307, 0, 0, "-", "exhaustive"], [309, 0, 0, "-", "mse"], [310, 0, 0, "-", "mse_v2"], [311, 0, 0, "-", "random"], [312, 0, 0, "-", "strategy"], [314, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[305, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[306, 1, 1, "", "BayesianOptimization"], [306, 1, 1, "", "BayesianTuneStrategy"], [306, 1, 1, "", "TargetSpace"], [306, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[307, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[309, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[310, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[311, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[312, 1, 1, "", "TuneStrategy"], [312, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[313, 0, 0, "-", "constant"], [315, 0, 0, "-", "tuning_sampler"], [316, 0, 0, "-", "tuning_space"], [317, 0, 0, "-", "tuning_structs"], [318, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, 1, 1, "", "FallbackTuningSampler"], [315, 1, 1, "", "ModelWiseTuningSampler"], [315, 1, 1, "", "OpTypeWiseTuningSampler"], [315, 1, 1, "", "OpWiseTuningSampler"], [315, 1, 1, "", "SmoothQuantSampler"], [315, 1, 1, "", "TuningOrder"], [315, 1, 1, "", "TuningSampler"], [315, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, 1, 1, "", "TuningItem"], [316, 1, 1, "", "TuningSpace"], [316, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [316, 2, 1, "", "pattern_to_internal"], [316, 2, 1, "", "pattern_to_path"], [316, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[318, 1, 1, "", "OrderedDefaultDict"], [318, 2, 1, "", "extract_data_type"], [318, 2, 1, "", "get_adaptor_name"], [318, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[320, 0, 0, "-", "bleu"], [321, 0, 0, "-", "bleu_util"], [322, 0, 0, "-", "coco_label_map"], [323, 0, 0, "-", "coco_tools"], [324, 0, 0, "-", "evaluate_squad"], [325, 0, 0, "-", "f1"], [327, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[320, 1, 1, "", "BLEU"], [320, 1, 1, "", "UnicodeRegex"], [320, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[320, 4, 1, "", "labels"], [320, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[320, 4, 1, "", "nondigit_punct_re"], [320, 4, 1, "", "punct_nondigit_re"], [320, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[321, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[323, 1, 1, "", "COCOEvalWrapper"], [323, 1, 1, "", "COCOWrapper"], [323, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [323, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [323, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[323, 4, 1, "", "dataset"], [323, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[324, 2, 1, "", "evaluate"], [324, 2, 1, "", "exact_match_score"], [324, 2, 1, "", "f1_score"], [324, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[325, 2, 1, "", "evaluate"], [325, 2, 1, "", "f1_score"], [325, 2, 1, "", "metric_max_over_ground_truths"], [325, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[327, 1, 1, "", "Accuracy"], [327, 1, 1, "", "BaseMetric"], [327, 1, 1, "", "COCOmAPv2"], [327, 1, 1, "", "F1"], [327, 1, 1, "", "GeneralTopK"], [327, 1, 1, "", "Loss"], [327, 1, 1, "", "MAE"], [327, 1, 1, "", "METRICS"], [327, 1, 1, "", "MSE"], [327, 1, 1, "", "MXNetMetrics"], [327, 1, 1, "", "Metric"], [327, 1, 1, "", "ONNXRTGLUE"], [327, 1, 1, "", "ONNXRTITMetrics"], [327, 1, 1, "", "ONNXRTQLMetrics"], [327, 1, 1, "", "PyTorchLoss"], [327, 1, 1, "", "PyTorchMetrics"], [327, 1, 1, "", "RMSE"], [327, 1, 1, "", "ROC"], [327, 1, 1, "", "SquadF1"], [327, 1, 1, "", "TensorflowCOCOMAP"], [327, 1, 1, "", "TensorflowMAP"], [327, 1, 1, "", "TensorflowMetrics"], [327, 1, 1, "", "TensorflowTopK"], [327, 1, 1, "", "TensorflowVOCMAP"], [327, 1, 1, "", "WrapMXNetMetric"], [327, 1, 1, "", "WrapONNXRTMetric"], [327, 1, 1, "", "WrapPyTorchMetric"], [327, 1, 1, "", "mIOU"], [327, 2, 1, "", "metric_registry"], [327, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[327, 4, 1, "", "label_list"], [327, 4, 1, "", "pred_list"], [327, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[327, 4, 1, "", "k"], [327, 4, 1, "", "num_correct"], [327, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[327, 4, 1, "", "sample"], [327, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[327, 4, 1, "", "compare_label"], [327, 4, 1, "", "label_list"], [327, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[327, 4, 1, "", "compare_label"], [327, 4, 1, "", "label_list"], [327, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[327, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[327, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[327, 4, 1, "", "k"], [327, 4, 1, "", "num_correct"], [327, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[328, 2, 1, "", "fit"]], "neural_compressor.model": [[329, 0, 0, "-", "base_model"], [331, 0, 0, "-", "keras_model"], [332, 0, 0, "-", "model"], [333, 0, 0, "-", "mxnet_model"], [334, 0, 0, "-", "nets_factory"], [335, 0, 0, "-", "onnx_model"], [336, 0, 0, "-", "tensorflow_model"], [337, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[329, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[331, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[332, 1, 1, "", "Model"], [332, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[333, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[334, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[335, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[336, 1, 1, "", "TensorflowBaseModel"], [336, 1, 1, "", "TensorflowCheckpointModel"], [336, 1, 1, "", "TensorflowLLMModel"], [336, 1, 1, "", "TensorflowModel"], [336, 1, 1, "", "TensorflowQATModel"], [336, 1, 1, "", "TensorflowSavedModelModel"], [336, 2, 1, "", "checkpoint_session"], [336, 2, 1, "", "estimator_session"], [336, 2, 1, "", "frozen_pb_session"], [336, 2, 1, "", "get_model_type"], [336, 2, 1, "", "graph_def_session"], [336, 2, 1, "", "graph_session"], [336, 2, 1, "", "keras_session"], [336, 2, 1, "", "load_saved_model"], [336, 2, 1, "", "saved_model_session"], [336, 2, 1, "", "slim_session"], [336, 2, 1, "", "try_loading_keras"], [336, 2, 1, "", "validate_and_inference_input_output"], [336, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[337, 1, 1, "", "IPEXModel"], [337, 1, 1, "", "PyTorchBaseModel"], [337, 1, 1, "", "PyTorchFXModel"], [337, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[338, 1, 1, "", "Accuracy"], [338, 1, 1, "", "Footprint"], [338, 1, 1, "", "ModelSize"], [338, 1, 1, "", "MultiObjective"], [338, 1, 1, "", "Objective"], [338, 1, 1, "", "Performance"], [338, 2, 1, "", "objective_custom_registry"], [338, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt.algorithms.smoother": [[339, 0, 0, "-", "calibrator"], [340, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[339, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[340, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.utils": [[341, 0, 0, "-", "onnx_model"]], "neural_compressor.onnxrt.utils.onnx_model": [[341, 1, 1, "", "ONNXModel"]], "neural_compressor.profiling.parser": [[343, 0, 0, "-", "factory"], [346, 0, 0, "-", "parser"], [347, 0, 0, "-", "result"]], "neural_compressor.profiling.parser.factory": [[343, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[344, 0, 0, "-", "factory"], [345, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[344, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[345, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[346, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[347, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[348, 0, 0, "-", "factory"], [349, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[348, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[350, 0, 0, "-", "factory"], [354, 0, 0, "-", "profiler"]], "neural_compressor.profiling.profiler.factory": [[350, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[351, 0, 0, "-", "factory"], [352, 0, 0, "-", "profiler"], [353, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[354, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[355, 0, 0, "-", "factory"], [356, 0, 0, "-", "profiler"], [357, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, 2, 1, "", "create_tf_config"], [357, 2, 1, "", "delete_assign"], [357, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[358, 2, 1, "", "fit"]], "neural_compressor.strategy": [[359, 0, 0, "-", "auto"], [360, 0, 0, "-", "auto_mixed_precision"], [361, 0, 0, "-", "basic"], [362, 0, 0, "-", "bayesian"], [363, 0, 0, "-", "conservative"], [364, 0, 0, "-", "exhaustive"], [365, 0, 0, "-", "hawq_v2"], [367, 0, 0, "-", "mse"], [368, 0, 0, "-", "mse_v2"], [369, 0, 0, "-", "random"], [370, 0, 0, "-", "strategy"], [372, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[359, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[360, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[361, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[362, 1, 1, "", "BayesianOptimization"], [362, 1, 1, "", "BayesianTuneStrategy"], [362, 1, 1, "", "TargetSpace"], [362, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[363, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[364, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[365, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[367, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[368, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[369, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[370, 1, 1, "", "TuneStrategy"], [370, 1, 1, "", "TuneStrategyMeta"], [370, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[371, 0, 0, "-", "constant"], [373, 0, 0, "-", "tuning_sampler"], [374, 0, 0, "-", "tuning_space"], [375, 0, 0, "-", "tuning_structs"], [376, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, 1, 1, "", "BlockFallbackTuningSampler"], [373, 1, 1, "", "FallbackTuningSampler"], [373, 1, 1, "", "LowerBitsSampler"], [373, 1, 1, "", "ModelWiseTuningSampler"], [373, 1, 1, "", "OpTypeWiseTuningSampler"], [373, 1, 1, "", "OpWiseTuningSampler"], [373, 1, 1, "", "SmoothQuantSampler"], [373, 1, 1, "", "TuningOrder"], [373, 1, 1, "", "TuningSampler"], [373, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[374, 1, 1, "", "TuningItem"], [374, 1, 1, "", "TuningSpace"], [374, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [374, 2, 1, "", "pattern_to_internal"], [374, 2, 1, "", "pattern_to_path"], [374, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[375, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[376, 1, 1, "", "ClassRegister"], [376, 1, 1, "", "OrderedDefaultDict"], [376, 1, 1, "", "QuantOptions"], [376, 1, 1, "", "QuantType"], [376, 2, 1, "", "build_slave_faker_model"], [376, 2, 1, "", "extract_data_type"], [376, 2, 1, "", "get_adaptor_name"], [376, 2, 1, "", "preprocess_user_cfg"], [376, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[377, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[377, 1, 1, "", "ExampleClass"], [377, 4, 1, "", "attribute1"], [377, 2, 1, "", "function1"], [377, 2, 1, "", "function2"], [377, 2, 1, "", "function3"], [377, 2, 1, "", "generator1"], [377, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[377, 4, 1, "", "attr1"], [377, 4, 1, "", "attr2"], [377, 4, 1, "", "attr5"]], "neural_compressor.tensorflow.algorithms.smoother": [[378, 0, 0, "-", "calibration"], [379, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[378, 1, 1, "", "SmoothQuantCalibration"], [378, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[379, 1, 1, "", "SmoothQuantScaler"], [379, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[380, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[380, 1, 1, "", "TensorFlowAdaptor"], [380, 1, 1, "", "TensorFlowConfig"], [380, 1, 1, "", "TensorflowConfigConverter"], [380, 1, 1, "", "TensorflowQuery"], [380, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.quantization.utils": [[381, 0, 0, "-", "graph_converter"], [382, 0, 0, "-", "graph_converter_without_calib"], [437, 0, 0, "-", "graph_util"], [438, 0, 0, "-", "quantize_graph"], [465, 0, 0, "-", "quantize_graph_common"], [468, 0, 0, "-", "transform_graph"], [471, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[381, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[382, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[385, 0, 0, "-", "bf16"], [409, 0, 0, "-", "generic"], [419, 0, 0, "-", "graph_base"], [427, 0, 0, "-", "int8"], [433, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[383, 0, 0, "-", "bf16_convert"], [384, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[383, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[384, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[386, 0, 0, "-", "convert_add_to_biasadd"], [387, 0, 0, "-", "convert_layout"], [388, 0, 0, "-", "convert_leakyrelu"], [389, 0, 0, "-", "convert_nan_to_random"], [390, 0, 0, "-", "convert_placeholder_to_const"], [391, 0, 0, "-", "dilated_contraction"], [392, 0, 0, "-", "dummy_biasadd"], [393, 0, 0, "-", "expanddims_optimizer"], [394, 0, 0, "-", "fetch_weight_from_reshape"], [395, 0, 0, "-", "fold_batch_norm"], [396, 0, 0, "-", "fold_constant"], [397, 0, 0, "-", "fuse_biasadd_add"], [398, 0, 0, "-", "fuse_column_wise_mul"], [399, 0, 0, "-", "fuse_conv_with_math"], [400, 0, 0, "-", "fuse_decomposed_bn"], [401, 0, 0, "-", "fuse_decomposed_in"], [402, 0, 0, "-", "fuse_gelu"], [403, 0, 0, "-", "fuse_layer_norm"], [404, 0, 0, "-", "fuse_pad_with_conv"], [405, 0, 0, "-", "fuse_pad_with_fp32_conv"], [406, 0, 0, "-", "fuse_reshape_transpose"], [407, 0, 0, "-", "graph_cse_optimizer"], [408, 0, 0, "-", "grappler_pass"], [410, 0, 0, "-", "insert_print_node"], [411, 0, 0, "-", "move_squeeze_after_relu"], [412, 0, 0, "-", "pre_optimize"], [413, 0, 0, "-", "remove_training_nodes"], [414, 0, 0, "-", "rename_batch_norm"], [415, 0, 0, "-", "split_shared_input"], [416, 0, 0, "-", "strip_equivalent_nodes"], [417, 0, 0, "-", "strip_unused_nodes"], [418, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[386, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[387, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[388, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[389, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[390, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[391, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[392, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[393, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[394, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[395, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[396, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[397, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[398, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[399, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[400, 1, 1, "", "FuseDecomposedBNOptimizer"], [400, 2, 1, "", "bypass_reshape"], [400, 2, 1, "", "get_const_dim_count"], [400, 2, 1, "", "node_from_map"], [400, 2, 1, "", "node_name_from_input"], [400, 2, 1, "", "valid_reshape_inputs"], [400, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[401, 1, 1, "", "FuseDecomposedINOptimizer"], [401, 2, 1, "", "bypass_reshape"], [401, 2, 1, "", "get_const_dim_count"], [401, 2, 1, "", "node_from_map"], [401, 2, 1, "", "node_name_from_input"], [401, 2, 1, "", "valid_reshape_inputs"], [401, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[402, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[403, 1, 1, "", "FuseLayerNormOptimizer"], [403, 2, 1, "", "node_from_map"], [403, 2, 1, "", "node_name_from_input"], [403, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[404, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[405, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[406, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[407, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[408, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[410, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[411, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[412, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[413, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[414, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[415, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[416, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[417, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[418, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[419, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[420, 0, 0, "-", "freeze_fake_quant"], [421, 0, 0, "-", "freeze_value"], [422, 0, 0, "-", "freeze_value_without_calib"], [423, 0, 0, "-", "fuse_conv_redundant_dequantize"], [424, 0, 0, "-", "fuse_conv_requantize"], [425, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [426, 0, 0, "-", "fuse_matmul_requantize"], [428, 0, 0, "-", "meta_op_optimizer"], [429, 0, 0, "-", "post_hostconst_converter"], [430, 0, 0, "-", "post_quantized_op_cse"], [431, 0, 0, "-", "rnn_convert"], [432, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[420, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[421, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[422, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[423, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[424, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[425, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[426, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [426, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [426, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [426, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[428, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[429, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[430, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[431, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[432, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[434, 0, 0, "-", "insert_qdq_pattern"], [435, 0, 0, "-", "merge_duplicated_qdq"], [436, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[434, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[435, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[436, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[437, 1, 1, "", "GraphAnalyzer"], [437, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[440, 0, 0, "-", "qat"], [456, 0, 0, "-", "qdq"], [458, 0, 0, "-", "quantize_graph_base"], [459, 0, 0, "-", "quantize_graph_bn"], [460, 0, 0, "-", "quantize_graph_concatv2"], [461, 0, 0, "-", "quantize_graph_conv"], [462, 0, 0, "-", "quantize_graph_for_intel_cpu"], [463, 0, 0, "-", "quantize_graph_matmul"], [464, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[439, 0, 0, "-", "fake_quantize"], [441, 0, 0, "-", "quantize_config"], [442, 0, 0, "-", "quantize_helper"], [443, 0, 0, "-", "quantize_layers"], [448, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[439, 1, 1, "", "FakeQuantize"], [439, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[441, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[442, 2, 1, "", "init_quantize_config"], [442, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[444, 0, 0, "-", "optimize_layer"], [445, 0, 0, "-", "quantize_layer_add"], [446, 0, 0, "-", "quantize_layer_base"], [447, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[444, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[445, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[446, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[447, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[448, 1, 1, "", "QuantizeWrapper"], [448, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[449, 0, 0, "-", "fuse_qdq_bn"], [450, 0, 0, "-", "fuse_qdq_concatv2"], [451, 0, 0, "-", "fuse_qdq_conv"], [452, 0, 0, "-", "fuse_qdq_deconv"], [453, 0, 0, "-", "fuse_qdq_in"], [454, 0, 0, "-", "fuse_qdq_matmul"], [455, 0, 0, "-", "fuse_qdq_pooling"], [457, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[449, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[450, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[451, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[452, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[453, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[454, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[455, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[457, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[458, 1, 1, "", "QuantizeGraphBase"], [458, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[459, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[460, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[461, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[462, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[463, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[464, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[465, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[466, 0, 0, "-", "bias_correction"], [467, 0, 0, "-", "graph_transform_base"], [469, 0, 0, "-", "insert_logging"], [470, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[466, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[467, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[469, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[470, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[471, 2, 1, "", "apply_inlining"], [471, 2, 1, "", "collate_tf_preds"], [471, 2, 1, "", "construct_function_from_graph_def"], [471, 2, 1, "", "fix_ref_type_of_graph_def"], [471, 2, 1, "", "generate_feed_dict"], [471, 2, 1, "", "get_estimator_graph"], [471, 2, 1, "", "get_graph_def"], [471, 2, 1, "", "get_input_output_node_names"], [471, 2, 1, "", "get_model_input_shape"], [471, 2, 1, "", "get_tensor_by_name"], [471, 2, 1, "", "get_tensor_val_from_graph_node"], [471, 2, 1, "", "get_weight_from_input_tensor"], [471, 2, 1, "", "int8_node_name_reverse"], [471, 2, 1, "", "is_ckpt_format"], [471, 2, 1, "", "is_saved_model_format"], [471, 2, 1, "", "iterator_sess_run"], [471, 2, 1, "", "parse_saved_model"], [471, 2, 1, "", "read_graph"], [471, 2, 1, "", "reconstruct_saved_model"], [471, 2, 1, "", "strip_equivalent_nodes"], [471, 2, 1, "", "strip_unused_nodes"], [471, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[472, 0, 0, "-", "data"], [473, 0, 0, "-", "model_wrappers"], [474, 0, 0, "-", "nets_factory"]], "neural_compressor.tensorflow.utils.data": [[472, 1, 1, "", "BaseDataLoader"], [472, 1, 1, "", "BatchSampler"], [472, 1, 1, "", "DummyDataset"], [472, 1, 1, "", "DummyDatasetV2"], [472, 1, 1, "", "IndexFetcher"], [472, 1, 1, "", "IterableFetcher"], [472, 1, 1, "", "IterableSampler"], [472, 1, 1, "", "SequentialSampler"], [472, 2, 1, "", "default_collate"]], "neural_compressor.tensorflow.utils.model_wrappers": [[473, 1, 1, "", "BaseModel"], [473, 1, 1, "", "KerasModel"], [473, 1, 1, "", "TensorflowBaseModel"], [473, 1, 1, "", "TensorflowCheckpointModel"], [473, 1, 1, "", "TensorflowLLMModel"], [473, 1, 1, "", "TensorflowModel"], [473, 1, 1, "", "TensorflowQATModel"], [473, 1, 1, "", "TensorflowSavedModelModel"], [473, 2, 1, "", "checkpoint_session"], [473, 2, 1, "", "estimator_session"], [473, 2, 1, "", "frozen_pb_session"], [473, 2, 1, "", "get_model_type"], [473, 2, 1, "", "graph_def_session"], [473, 2, 1, "", "graph_session"], [473, 2, 1, "", "keras_session"], [473, 2, 1, "", "load_saved_model"], [473, 2, 1, "", "saved_model_session"], [473, 2, 1, "", "slim_session"], [473, 2, 1, "", "try_loading_keras"], [473, 2, 1, "", "validate_and_inference_input_output"], [473, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[474, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.torch.algorithms": [[475, 0, 0, "-", "layer_wise"]], "neural_compressor.torch.algorithms.layer_wise": [[476, 0, 0, "-", "load"], [477, 0, 0, "-", "modified_pickle"], [478, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[476, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[477, 3, 1, "", "PickleError"], [477, 3, 1, "", "PicklingError"], [477, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[478, 2, 1, "", "dowload_hf_model"], [478, 2, 1, "", "get_children"], [478, 2, 1, "", "get_module"], [478, 2, 1, "", "get_named_children"], [478, 2, 1, "", "get_super_module_by_name"], [478, 2, 1, "", "load_empty_model"], [478, 2, 1, "", "load_layer_wise_quantized_model"], [478, 2, 1, "", "load_tensor"], [478, 2, 1, "", "load_tensor_from_shard"], [478, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.mix_precision": [[479, 0, 0, "-", "half_precision_convert"], [480, 0, 0, "-", "module_wrappers"]], "neural_compressor.torch.algorithms.mix_precision.half_precision_convert": [[479, 1, 1, "", "HalfPrecisionConverter"]], "neural_compressor.torch.algorithms.mix_precision.module_wrappers": [[480, 1, 1, "", "HalfPrecisionModuleWrapper"]], "neural_compressor.torch.algorithms.weight_only": [[481, 0, 0, "-", "modules"]], "neural_compressor.torch.algorithms.weight_only.modules": [[481, 1, 1, "", "FakeAffineTensorQuantFunction"], [481, 1, 1, "", "MulLinear"], [481, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.training": [[482, 1, 1, "", "CallBacks"], [482, 1, 1, "", "CompressionManager"], [482, 2, 1, "", "fit"], [482, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[483, 0, 0, "-", "collect_layer_histogram"], [484, 0, 0, "-", "constant"], [485, 0, 0, "-", "create_obj_from_config"], [487, 0, 0, "-", "kl_divergence"], [488, 0, 0, "-", "load_huggingface"], [489, 0, 0, "-", "logger"], [490, 0, 0, "-", "neural_insights_utils"], [491, 0, 0, "-", "options"], [492, 0, 0, "-", "pytorch"], [493, 0, 0, "-", "utility"], [494, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[483, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[485, 2, 1, "", "create_dataloader"], [485, 2, 1, "", "create_dataset"], [485, 2, 1, "", "create_eval_func"], [485, 2, 1, "", "create_train_func"], [485, 2, 1, "", "get_algorithm"], [485, 2, 1, "", "get_func_from_config"], [485, 2, 1, "", "get_metrics"], [485, 2, 1, "", "get_postprocess"], [485, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[487, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[488, 1, 1, "", "OptimizedModel"], [488, 2, 1, "", "export_compressed_model"], [488, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[489, 1, 1, "", "Logger"], [489, 2, 1, "", "debug"], [489, 2, 1, "", "error"], [489, 2, 1, "", "fatal"], [489, 2, 1, "", "info"], [489, 2, 1, "", "log"], [489, 2, 1, "", "warn"], [489, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[490, 2, 1, "", "get_model_path"], [490, 2, 1, "", "register_neural_insights_workload"], [490, 2, 1, "", "update_neural_insights_workload"], [490, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[491, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[492, 2, 1, "", "is_int8_model"], [492, 2, 1, "", "load"], [492, 2, 1, "", "load_weight_only"], [492, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[493, 1, 1, "", "CaptureOutputToFile"], [493, 1, 1, "", "CpuInfo"], [493, 2, 1, "", "Dequantize"], [493, 1, 1, "", "DotDict"], [493, 1, 1, "", "GLOBAL_STATE"], [493, 1, 1, "", "LazyImport"], [493, 1, 1, "", "MODE"], [493, 1, 1, "", "OpEntry"], [493, 1, 1, "", "Statistics"], [493, 2, 1, "", "alias_param"], [493, 2, 1, "", "calculate_mse"], [493, 2, 1, "", "check_key_exist"], [493, 2, 1, "", "combine_histogram"], [493, 2, 1, "", "compare_objects"], [493, 2, 1, "", "compute_sparsity"], [493, 2, 1, "", "dequantize_weight"], [493, 2, 1, "", "dump_class_attrs"], [493, 2, 1, "", "dump_data_to_local"], [493, 2, 1, "", "dump_elapsed_time"], [493, 2, 1, "", "dump_table"], [493, 2, 1, "", "dump_table_to_csv"], [493, 2, 1, "", "equal_dicts"], [493, 2, 1, "", "fault_tolerant_file"], [493, 2, 1, "", "get_all_fp32_data"], [493, 2, 1, "", "get_number_of_sockets"], [493, 2, 1, "", "get_op_list"], [493, 2, 1, "", "get_size"], [493, 2, 1, "", "get_tensor_histogram"], [493, 2, 1, "", "get_tensors_info"], [493, 2, 1, "", "get_tuning_history"], [493, 2, 1, "", "get_weights_details"], [493, 2, 1, "", "load_data_from_pkl"], [493, 2, 1, "", "mse_metric_gap"], [493, 2, 1, "", "print_op_list"], [493, 2, 1, "", "print_table"], [493, 2, 1, "", "recover"], [493, 2, 1, "", "set_random_seed"], [493, 2, 1, "", "set_resume_from"], [493, 2, 1, "", "set_tensorboard"], [493, 2, 1, "", "set_workspace"], [493, 2, 1, "", "show_memory_info"], [493, 2, 1, "", "singleton"], [493, 2, 1, "", "str2array"], [493, 2, 1, "", "time_limit"], [493, 2, 1, "", "version1_eq_version2"], [493, 2, 1, "", "version1_gt_version2"], [493, 2, 1, "", "version1_gte_version2"], [493, 2, 1, "", "version1_lt_version2"], [493, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[494, 1, 1, "", "WeightsDetails"], [494, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 174], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 503, 504, 506], "mxnet_util": [1, 2], "submodul": [1, 5, 17, 38, 62, 73, 81, 87, 92, 97, 98, 100, 103, 116, 131, 137, 138, 149, 156, 159, 162, 164, 168, 175, 185, 190, 208, 212, 215, 222, 231, 238, 250, 254, 257, 261, 266, 273, 279, 285, 291, 295, 308, 314, 319, 326, 330, 366, 372, 385, 409, 427, 433, 438, 440, 443, 456, 468, 475, 486], "util": [2, 31, 134, 142, 146, 153, 158, 184, 186, 313, 314, 315, 316, 317, 318, 341, 353, 357, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 508], "class": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 140, 143, 144, 147, 148, 150, 151, 153, 154, 155, 157, 161, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 265, 267, 270, 274, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 320, 323, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 479, 480, 481, 482, 483, 487, 488, 489, 491, 493, 494, 503, 572], "function": [2, 4, 22, 30, 31, 32, 53, 54, 56, 90, 91, 102, 104, 134, 135, 136, 141, 142, 145, 146, 147, 152, 155, 157, 158, 161, 162, 163, 165, 167, 168, 172, 175, 180, 181, 182, 183, 184, 186, 194, 195, 202, 204, 211, 217, 218, 219, 220, 224, 225, 227, 236, 244, 246, 253, 258, 259, 262, 263, 264, 267, 268, 270, 271, 272, 274, 281, 288, 292, 297, 298, 299, 301, 306, 312, 316, 318, 320, 321, 323, 324, 325, 327, 328, 332, 336, 338, 353, 357, 358, 362, 370, 374, 376, 377, 400, 401, 403, 442, 444, 471, 472, 473, 476, 478, 482, 485, 488, 489, 490, 492, 493, 529], "modul": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 161, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 258, 259, 260, 262, 263, 264, 265, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 318, 320, 321, 323, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 494], "contentox_util": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "calibr": [3, 4, 339, 378, 504, 521], "subpackag": [5, 73, 97, 98, 100, 137, 162, 189, 213, 230, 255, 266, 290, 308, 319, 366, 438, 440], "oper": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 504, 505], "activ": [6, 565], "argmax": 7, "attent": 8, "binary_op": 9, "concat": 10, "conv": 11, "direct_q8": 12, "embed_layernorm": 13, "gather": 14, "gavgpool": 15, "gemm": 16, "lstm": 18, "matmul": [19, 590], "maxpool": 20, "norm": 21, "op": [22, 531], "pad": 23, "pool": 24, "reduc": 25, "resiz": 26, "split": [27, 568], "unary_op": 28, "quantiz": [29, 140, 302, 358, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 499, 502, 504, 505, 517, 521, 526, 528, 531, 534, 537, 539, 541, 542, 544, 551, 562, 564, 565, 566, 567, 575, 576, 577, 583, 584, 585, 586, 587, 590, 596], "smooth_quant": [30, 150], "weight_onli": [32, 481], "tensorflow": [33, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 524, 529, 531, 540, 584, 586, 591, 592, 596], "tf_util": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "graph_convert": [34, 381], "graph_converter_without_calib": [35, 382], "graph_rewrit": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436], "bf16": [36, 37, 38, 383, 384, 385, 542], "bf16_convert": [36, 135, 383], "dequantize_cast_optim": [37, 384], "gener": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 504], "convert_add_to_biasadd": [39, 386], "convert_layout": [40, 387], "convert_leakyrelu": [41, 388], "convert_nan_to_random": [42, 389], "convert_placeholder_to_const": [43, 390], "dilated_contract": [44, 391], "dummy_biasadd": [45, 392], "expanddims_optim": [46, 393], "fetch_weight_from_reshap": [47, 394], "fold_batch_norm": [48, 395], "fold_const": [49, 396], "fuse_biasadd_add": [50, 397], "fuse_column_wise_mul": [51, 398], "fuse_conv_with_math": [52, 399], "fuse_decomposed_bn": [53, 400], "fuse_decomposed_in": [54, 401], "fuse_gelu": [55, 402], "fuse_layer_norm": [56, 403], "fuse_pad_with_conv": [57, 404], "fuse_pad_with_fp32_conv": [58, 405], "fuse_reshape_transpos": [59, 406], "graph_cse_optim": [60, 407], "grappler_pass": [61, 408], "insert_print_nod": [63, 410], "move_squeeze_after_relu": [64, 411], "pre_optim": [65, 412], "remove_training_nod": [66, 413], "rename_batch_norm": [67, 414], "split_shared_input": [68, 415], "strip_equivalent_nod": [69, 416], "strip_unused_nod": [70, 417], "switch_optim": [71, 418], "graph_bas": [72, 419], "int8": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 531, 596], "freeze_fake_qu": [74, 420], "freeze_valu": [75, 421], "freeze_value_without_calib": [76, 422], "fuse_conv_redundant_dequant": [77, 423], "fuse_conv_requant": [78, 424], "fuse_matmul_redundant_dequant": [79, 425], "fuse_matmul_requant": [80, 426], "meta_op_optim": [82, 428], "post_hostconst_convert": [83, 429], "post_quantized_op_cs": [84, 430], "rnn_convert": [85, 431], "scale_propag": [86, 432], "onnx": [87, 88, 89, 90, 91, 507, 537, 584, 585, 596], "onnx_graph": 88, "onnx_nod": 89, "onnx_schema": 90, "tf2onnx_util": 91, "qdq": [92, 93, 94, 95, 109, 110, 111, 112, 113, 114, 115, 116, 117, 433, 434, 435, 436, 449, 450, 451, 452, 453, 454, 455, 456, 457, 596], "insert_qdq_pattern": [93, 434], "merge_duplicated_qdq": [94, 435], "share_qdq_y_pattern": [95, 436], "graph_util": [96, 437], "quantize_graph": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "qat": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 596], "fake_quant": [99, 439], "quantize_config": [101, 441], "quantize_help": [102, 442], "quantize_lay": [103, 104, 105, 106, 107, 443, 444, 445, 446, 447], "optimize_lay": [104, 444], "quantize_layer_add": [105, 445], "quantize_layer_bas": [106, 446], "quantize_layer_bn": [107, 447], "quantize_wrapp": [108, 448], "fuse_qdq_bn": [109, 449], "fuse_qdq_concatv2": [110, 450], "fuse_qdq_conv": [111, 451], "fuse_qdq_deconv": [112, 452], "fuse_qdq_in": [113, 453], "fuse_qdq_matmul": [114, 454], "fuse_qdq_pool": [115, 455], "optimize_qdq": [117, 457], "quantize_graph_bas": [118, 458], "quantize_graph_bn": [119, 459], "quantize_graph_concatv2": [120, 460], "quantize_graph_conv": [121, 461], "quantize_graph_for_intel_cpu": [122, 462], "quantize_graph_matmul": [123, 463], "quantize_graph_pool": [124, 464], "quantize_graph_common": [125, 465], "smooth_quant_calibr": 126, "smooth_quant_scal": 127, "tf2onnx_convert": 128, "transform_graph": [129, 130, 131, 132, 133, 466, 467, 468, 469, 470], "bias_correct": [129, 466], "graph_transform_bas": [130, 467], "insert_log": [132, 469], "rerange_quantized_concat": [133, 470], "torch_util": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 227], "hawq_metr": 136, "layer_wise_qu": [138, 139, 140, 141, 142], "modified_pickl": [139, 477], "except": [139, 477], "torch_load": 141, "model_wrapp": [143, 473], "pattern_detector": 144, "symbolic_trac": 145, "algorithm": [147, 148, 149, 150, 151, 339, 340, 378, 379, 380, 475, 476, 477, 478, 479, 480, 481, 521, 587, 590, 593], "fast_bias_correct": 148, "weight_correct": 151, "benchmark": [152, 219, 511, 520, 526, 541, 583], "common": [153, 220, 221, 222, 223, 224, 225, 226, 227, 499, 532], "logger": [153, 296, 489, 522], "compress": [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 229, 512, 587], "callback": 154, "distil": [155, 156, 157, 158, 260, 527, 528, 541, 583, 596], "criterion": [155, 220], "optim": [157, 225, 552, 562, 572, 575, 576, 577, 580, 581, 594], "hpo": [159, 160], "sa_optim": 160, "pruner": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 288, 299], "criteria": [161, 498, 581, 593], "packag": [162, 168, 175, 555, 557, 559, 560], "model_slim": [163, 164, 165, 166], "auto_slim": 163, "pattern_analyz": 165, "weight_slim": 166, "pattern": [167, 168, 169, 170, 171, 291, 292, 293, 297, 581], "base": [167, 172, 537, 571, 594], "mha": [169, 176], "ninm": 170, "nxm": 171, "basic": [173, 305, 361, 500, 593], "pattern_lock": [177, 287], "progress": [178, 568], "retrain_fre": 179, "prune": [180, 289, 300, 541, 581, 583, 596], "reg": 181, "schedul": [182, 301, 303, 581], "tf_criteria": 183, "wanda": [185, 186], "conf": 187, "pythonic_config": 187, "config": [188, 513, 524, 579], "contrib": [189, 190, 191, 192, 230, 231, 232, 233], "strategi": [190, 191, 192, 231, 232, 233, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 518, 589, 593], "sigopt": [191, 232, 589, 593], "tpe": [192, 233, 593], "data": [193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 472, 504, 505, 526, 530, 566], "dataload": [193, 194, 195, 196, 197, 198, 199, 200, 201, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 523, 524], "base_dataload": [193, 234], "default_dataload": [195, 236], "fetcher": [196, 237], "mxnet_dataload": [197, 239], "onnxrt_dataload": [198, 240], "pytorch_dataload": [199, 241], "sampler": [200, 242], "tensorflow_dataload": [201, 243], "dataset": [202, 203, 204, 205, 206, 207, 208, 209, 244, 245, 246, 247, 248, 249, 250, 251, 524, 526, 535, 567], "bert_dataset": [202, 244], "coco_dataset": [203, 245], "attribut": [204, 246, 377, 497], "dummy_dataset": [205, 247], "dummy_dataset_v2": [206, 248], "imagenet_dataset": [207, 249], "style_transfer_dataset": [209, 251], "filter": [210, 211, 212, 252, 253, 254], "coco_filt": [210, 252], "transform": [214, 215, 216, 217, 218, 256, 257, 258, 259, 535, 592], "imagenet_transform": [214, 256], "postprocess": [216, 226], "token": [217, 258], "experiment": [219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318], "metric": [223, 267, 268, 269, 270, 271, 272, 273, 274, 320, 321, 322, 323, 324, 325, 326, 327, 535, 540], "model": [224, 329, 330, 331, 332, 333, 334, 335, 336, 337, 504, 515, 531, 534, 537, 539, 541, 543, 544, 551, 565, 566, 567, 575, 576, 577, 581, 585, 587, 590, 596], "compon": 228, "export": [261, 262, 263, 264, 531, 587], "qlinear2qdq": 262, "tf2onnx": 263, "torch2onnx": 264, "graph_optim": 265, "bleu": [267, 320], "bleu_util": [268, 321], "coco_label_map": [269, 322], "coco_tool": [270, 323], "evaluate_squad": [271, 324], "f1": [272, 325], "mixed_precis": 275, "model_convers": 276, "na": [277, 278, 279, 280, 281, 282, 500, 583], "basic_na": 277, "dyna": 278, "nas_util": 281, "search_algorithm": 282, "pruner_legaci": [283, 284, 285, 286, 287, 288], "gradient_sensit": 283, "group_lasso": 284, "magnitud": 286, "pruning_recip": [290, 291, 292, 293], "tile_pattern": 293, "pruning_v2": 294, "pytorch_prun": [295, 296, 297, 298, 299, 300, 301], "prune_util": 298, "auto_mixed_precis": [304, 360], "bayesian": [306, 362, 593], "exhaust": [307, 364, 593], "mse": [309, 367, 593], "mse_v2": [310, 368, 593], "random": [311, 369, 593], "constant": [313, 371, 484], "tuning_sampl": [315, 373], "tuning_spac": [316, 374], "tuning_struct": [317, 375], "mix_precis": [328, 479, 480], "base_model": 329, "keras_model": 331, "mxnet_model": 333, "nets_factori": [334, 474], "onnx_model": [335, 341], "tensorflow_model": 336, "torch_model": 337, "object": [338, 516, 575, 576, 577, 579], "onnxrt": [339, 340, 341, 524, 540, 592], "smoother": [339, 340, 378, 379], "core": 340, "profil": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 526], "parser": [343, 344, 345, 346, 347, 348, 349], "factori": [343, 344, 348, 350, 351, 355], "onnx_pars": [344, 345], "result": [347, 565, 567, 575, 576, 577], "tensorflow_pars": [348, 349], "onnxrt_profil": [351, 352, 353], "tensorflow_profil": [355, 356, 357], "auto": [359, 556, 562, 586, 590, 593], "conserv": [363, 593], "hawq_v2": [365, 593], "templat": [377, 498], "api_doc_exampl": 377, "scaler": 379, "static_qu": 380, "torch": [475, 476, 477, 478, 479, 480, 481, 508, 596], "layer_wis": [475, 476, 477, 478], "load": 476, "half_precision_convert": 479, "module_wrapp": 480, "train": [482, 499, 519, 529, 541, 581, 584], "collect_layer_histogram": 483, "create_obj_from_config": 485, "kl_diverg": 487, "load_huggingfac": 488, "neural_insights_util": 490, "option": [491, 529, 550], "pytorch": [492, 524, 529, 531, 540, 566, 584, 585, 586, 591, 592, 596], "weights_detail": 494, "version": 495, "intel": [496, 502, 523, 526, 536, 537, 540, 541, 548, 556, 562, 597], "neural": [496, 499, 500, 502, 523, 526, 536, 537, 540, 541, 545, 549, 551, 556, 562, 564, 565, 566, 567, 569, 570, 571, 575, 576, 577, 581, 589, 594, 597], "compressor": [496, 499, 502, 523, 526, 536, 537, 540, 541, 556, 562, 589, 597], "document": [496, 502, 509, 597], "section": [496, 597], "contributor": [497, 498], "coven": [497, 498], "code": [497, 498, 500, 522, 541, 563, 568, 587, 594], "conduct": [497, 498], "our": [497, 590], "pledg": 497, "standard": 497, "respons": [497, 571], "scope": [497, 581], "enforc": 497, "contribut": [498, 555, 559], "guidelin": 498, "creat": [498, 568], "pull": 498, "request": [498, 542, 573], "step": [498, 564, 565, 566, 567], "checklist": 498, "accept": 498, "statu": [498, 570, 571], "check": 498, "overview": [498, 572, 594], "support": [498, 499, 500, 503, 505, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 536, 537, 540, 542, 543, 544, 546, 547, 551, 552, 579, 580, 581, 583, 584, 585, 587, 590, 591, 592, 595], "fx": 499, "introduct": [499, 500, 503, 504, 505, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 536, 540, 542, 543, 544, 562, 565, 566, 567, 579, 580, 581, 583, 584, 585, 587, 589, 590, 591, 592, 593, 595], "mode": [499, 596], "matrix": [499, 500, 503, 520, 521, 523, 524, 526, 527, 528, 529, 531, 533, 536, 540, 542, 543, 544, 547, 579, 580, 581, 583, 584, 585, 587, 590, 591, 595], "get": [499, 500, 502, 503, 520, 523, 524, 526, 527, 528, 529, 533, 534, 540, 542, 544, 545, 556, 563, 564, 568, 569, 570, 571, 579, 580, 581, 583, 584, 591, 595], "start": [499, 500, 502, 503, 520, 523, 524, 526, 527, 528, 529, 533, 534, 540, 542, 544, 545, 546, 550, 556, 564, 568, 569, 570, 575, 576, 577, 579, 580, 581, 583, 584, 591, 595], "post": [499, 541, 571, 584], "static": [499, 502, 584], "dynam": [499, 500, 584], "awar": [499, 541, 581, 584], "exampl": [499, 500, 503, 509, 520, 523, 524, 526, 527, 528, 529, 530, 531, 540, 541, 542, 543, 544, 547, 551, 564, 565, 566, 567, 569, 574, 575, 576, 577, 579, 580, 581, 584, 585, 587, 590, 591, 596], "note": [499, 588], "detail": 499, "problem": 499, "architectur": [500, 525, 536, 537], "search": [500, 562], "api": [500, 503, 504, 509, 510, 520, 523, 524, 527, 528, 529, 534, 535, 540, 542, 544, 545, 549, 563, 564, 571, 577, 579, 580, 581, 583, 594], "usag": [500, 551, 562, 571, 590, 591, 593], "1": [500, 529, 532, 535, 541, 562, 569, 570, 582, 596], "python": [500, 523, 534, 540, 545, 549, 550, 557, 560, 564, 583, 594], "yaml": [500, 504, 524, 529, 533, 595], "2": [500, 529, 532, 535, 541, 562, 569, 570, 596], "onli": [500, 502, 587], "advanc": [500, 568, 594], "custom": [500, 523, 540, 575, 593], "secur": [501, 529], "polici": [501, 593], "report": 501, "vulner": 501, "what": [502, 545, 563, 569], "": [502, 537, 563, 569], "new": [502, 503, 505, 557, 560, 593], "instal": [502, 526, 537, 546, 548, 555, 556, 559, 564, 569, 570], "from": [502, 504, 537, 541, 564, 569, 570], "pypi": [502, 551, 564], "weight": [502, 565, 566, 567, 587], "llm": [502, 539], "non": 502, "select": [502, 556], "public": [502, 522, 582], "event": [502, 582], "addit": 502, "commun": 502, "work": [503, 569, 584], "flow": [503, 584], "queri": [503, 570, 575, 576, 577], "background": [503, 522, 562], "ad": 503, "backend": [503, 584], "capabl": [503, 587], "implement": [503, 504], "onnxrtadaptor": 503, "how": [504, 505, 526, 565, 566, 567, 569], "add": [504, 570], "an": [504, 575, 576, 577], "list": [504, 530, 574, 592], "need": 504, "design": [504, 525, 572, 593], "framework": [504, 523, 524, 531, 533, 543, 544, 583, 585, 587, 590], "query_fw_cap": 504, "accord": [504, 505], "tune_cfg": 504, "prepar": [504, 526, 565, 566, 567, 589], "fp32": [504, 531], "graph": 504, "run": [504, 526, 563, 565, 566, 567, 568], "sampl": [504, 534], "iter": 504, "calcul": 504, "rang": 504, "type": [505, 522, 581], "like": 505, "int4": 505, "few": 505, "line": 505, "chang": [505, 535, 561, 563, 588], "defin": [505, 529], "abil": 505, "specif": [505, 524], "invok": 505, "kernel": 505, "tune": [505, 584, 587, 590, 593], "configur": [505, 529, 533, 568, 583, 589, 595], "us": [505, 523, 540, 569, 570, 590], "summari": [505, 565], "runtim": [507, 537, 584, 585, 596], "mix": [514, 541, 542, 586], "precis": [514, 541, 542, 586], "refer": [521, 522, 544, 581, 584, 587, 590], "inc": 522, "convent": 522, "rule": [522, 584], "import": 522, "string": 522, "annot": 522, "comment": 522, "todo": 522, "intern": 522, "interfac": 522, "folder": [522, 563], "structur": 522, "recommend": 522, "v": [522, 563], "set": [522, 526, 548, 562], "json": 522, "build": [523, 532, 540, 568, 569, 570], "mxnet": [524, 540, 584, 592], "file": [524, 533, 595], "user": [524, 529, 535, 583, 587, 594, 595], "workflow": [525, 572], "diagnosi": [526, 564], "featur": [526, 529, 533, 536, 551, 552, 556, 583, 584, 591, 595], "modifi": 526, "script": [526, 568], "see": 526, "do": [526, 545], "paramet": [526, 571], "descript": [526, 571, 573], "suggest": 526, "fallback": 526, "knowledg": [527, 596], "intermedi": 527, "layer": [527, 585, 590], "self": 527, "distribut": [529, 551, 593], "infer": 529, "evalu": 529, "pure": 529, "horovodrun": 529, "execut": 529, "releas": [530, 557, 560, 588], "appendix": 531, "frequent": 532, "ask": 532, "question": 532, "issu": [532, 588], "3": [532, 546, 562], "4": [532, 553, 562, 582], "quick": [534, 550], "valid": [534, 537, 590, 596], "incompat": [535, 588], "between": 535, "v1": 535, "face": [535, 576, 577], "built": [535, 537, 540], "infrastructur": 536, "prerequisit": [537, 569, 570], "binari": 537, "sourc": [537, 564, 566, 567, 569, 570], "ai": 537, "kit": 537, "system": 537, "requir": [537, 555, 559, 565, 566, 567, 575], "hardwar": [537, 542, 596], "environ": [537, 548], "cpu": [537, 548, 596], "64": 537, "compat": 537, "processor": 537, "gpu": 537, "xe": 537, "multipl": [537, 579, 596], "vendor": 537, "through": [537, 590, 596], "softwar": [537, 542], "legal": 538, "inform": 538, "licens": 538, "citat": 538, "trademark": 538, "recip": [539, 584], "larg": [539, 581], "languag": [539, 581], "accuraci": [539, 542, 565, 567, 584, 593], "migrat": 541, "x": 541, "orchestr": [541, 580], "fp16": 542, "dure": [542, 586], "driven": 542, "microsc": 544, "coder": [545, 549, 551, 562, 594], "we": 545, "offer": 545, "jupyt": [545, 546, 557, 560], "lab": [545, 546], "extens": [545, 555, 556, 559, 562, 563, 572], "launcher": [545, 550], "contact": [545, 569], "aw": 546, "amazon": 546, "sagemak": 546, "For": 546, "studio": 546, "notebook": 546, "instanc": 546, "guid": [546, 594], "bigdl": 547, "nano": 547, "platform": [548, 589], "best": [548, 556], "perform": [548, 589], "mkl": 548, "openmp": 548, "jemalloc": 548, "numa": 548, "control": 548, "variabl": 548, "frequenc": 548, "govern": 548, "enabl": [549, 556, 562], "bench": 549, "superbench": 549, "argument": 550, "v0": 553, "highlight": 553, "other": 553, "changelog": [554, 558], "neural_compressor_ext_lab": [555, 557], "uninstal": [555, 559], "develop": [555, 559], "jupyterlab": 556, "Or": 556, "let": 556, "u": 556, "help": 556, "you": 556, "pre": 556, "requisit": 556, "make": [557, 560, 563, 568], "manual": [557, 560], "npm": [557, 560, 568], "autom": [557, 560], "publish": [557, 560], "conda": [557, 560], "forg": [557, 560], "neural_compressor_ext_lab_alibaba": [559, 560], "log": [561, 570, 571], "unreleas": 561, "vscode": 562, "open": [562, 567], "icon": 562, "5": 562, "welcom": 563, "your": 563, "setup": 563, "up": 563, "straight": 563, "awai": 563, "explor": 563, "test": [563, 568], "go": 563, "further": 563, "insight": [564, 565, 566, 567], "tensor": [564, 590], "dump": [564, 566], "research": 564, "collabor": 564, "debug": [565, 567], "analyz": [565, 567, 568], "histogram": 567, "react": 568, "app": 568, "avail": 568, "eject": 568, "learn": [568, 569], "more": [568, 569], "bundl": 568, "size": 568, "web": 568, "deploy": [568, 581], "fail": 568, "minifi": 568, "solut": [569, 570, 571, 575, 576, 577], "why": 569, "doe": 569, "method": [569, 570], "pip": [569, 570], "end": [569, 575, 576, 577], "servic": [570, 572, 575, 576, 577], "submit": [570, 571, 575, 576, 577], "task": [570, 571, 573, 575, 576, 577], "stop": [570, 575, 576, 577], "inspect": 570, "manag": [570, 575, 576], "resourc": [570, 575, 576], "node": 570, "state": 570, "cluster": [570, 571], "remov": 570, "url": 571, "endpoint": 571, "task_id": 571, "websocket": 571, "screen": 571, "ping": 571, "download": [571, 575, 576], "doc": 572, "wip": 572, "oaa": 572, "definit": 572, "diagram": 572, "hug": [576, 577], "grpc": 577, "client": 578, "singl": 579, "One": 580, "shot": 580, "network": 581, "sparsiti": 581, "decai": 581, "regular": 581, "retrain": 581, "free": 581, "spars": 581, "hyperparamet": 581, "full": 582, "80": 582, "2024": 582, "2023": 582, "25": 582, "2022": 582, "35": 582, "2021": 582, "15": [582, 596], "2018": 582, "2020": 582, "style": 583, "access": 583, "fundament": [584, 590], "scheme": 584, "ipex": 584, "approach": 584, "With": 584, "without": 584, "specifi": 584, "devic": 584, "wise": 585, "lwq": 585, "turn": 586, "off": 586, "woq": [587, 596], "known": 588, "benefit": 589, "comparison": 589, "differ": 589, "smooth": 590, "quant": 590, "per": 590, "channel": 590, "limit": 590, "smoothquant": 590, "enhanc": 590, "alpha": 590, "engin": 590, "fix": 590, "determin": 590, "entir": 590, "each": 590, "block": 590, "tensorboard": 591, "space": 593, "exit": 593, "process": 593, "zero": 594, "topic": 594, "innov": 594, "product": 594, "0": 596, "ptq": 596, "17": 596}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils"]], "Submodules": [[1, "submodules"], [5, "submodules"], [17, "submodules"], [38, "submodules"], [62, "submodules"], [73, "submodules"], [81, "submodules"], [87, "submodules"], [92, "submodules"], [97, "submodules"], [98, "submodules"], [100, "submodules"], [103, "submodules"], [116, "submodules"], [131, "submodules"], [137, "submodules"], [138, "submodules"], [149, "submodules"], [156, "submodules"], [159, "submodules"], [162, "submodules"], [164, "submodules"], [168, "submodules"], [175, "submodules"], [185, "submodules"], [190, "submodules"], [208, "submodules"], [212, "submodules"], [215, "submodules"], [222, "submodules"], [231, "submodules"], [238, "submodules"], [250, "submodules"], [254, "submodules"], [257, "submodules"], [261, "submodules"], [266, "submodules"], [273, "submodules"], [279, "submodules"], [285, "submodules"], [291, "submodules"], [295, "submodules"], [308, "submodules"], [314, "submodules"], [319, "submodules"], [326, "submodules"], [330, "submodules"], [366, "submodules"], [372, "submodules"], [385, "submodules"], [409, "submodules"], [427, "submodules"], [433, "submodules"], [438, "submodules"], [440, "submodules"], [443, "submodules"], [456, "submodules"], [468, "submodules"], [475, "submodules"], [486, "submodules"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util"]], "Classes": [[2, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [99, "classes"], [101, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [132, "classes"], [133, "classes"], [135, "classes"], [136, "classes"], [140, "classes"], [143, "classes"], [144, "classes"], [147, "classes"], [148, "classes"], [150, "classes"], [151, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [187, "classes"], [188, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [214, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [236, "classes"], [237, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [256, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [265, "classes"], [267, "classes"], [270, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [297, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [323, "classes"], [327, "classes"], [329, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [418, "classes"], [419, "classes"], [420, "classes"], [421, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [439, "classes"], [441, "classes"], [445, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [450, "classes"], [451, "classes"], [452, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [457, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [491, "classes"], [493, "classes"], [494, "classes"]], "Functions": [[2, "functions"], [4, "functions"], [22, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [53, "functions"], [54, "functions"], [56, "functions"], [90, "functions"], [91, "functions"], [102, "functions"], [104, "functions"], [134, "functions"], [135, "functions"], [136, "functions"], [141, "functions"], [142, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [152, "functions"], [155, "functions"], [157, "functions"], [158, "functions"], [161, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [167, "functions"], [168, "functions"], [172, "functions"], [175, "functions"], [180, "functions"], [181, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [186, "functions"], [194, "functions"], [195, "functions"], [202, "functions"], [204, "functions"], [211, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [224, "functions"], [225, "functions"], [227, "functions"], [236, "functions"], [244, "functions"], [246, "functions"], [253, "functions"], [258, "functions"], [259, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [274, "functions"], [281, "functions"], [288, "functions"], [292, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [301, "functions"], [306, "functions"], [312, "functions"], [316, "functions"], [318, "functions"], [320, "functions"], [321, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [327, "functions"], [328, "functions"], [332, "functions"], [336, "functions"], [338, "functions"], [353, "functions"], [357, "functions"], [358, "functions"], [362, "functions"], [370, "functions"], [374, "functions"], [376, "functions"], [377, "functions"], [400, "functions"], [401, "functions"], [403, "functions"], [442, "functions"], [444, "functions"], [471, "functions"], [472, "functions"], [473, "functions"], [476, "functions"], [478, "functions"], [482, "functions"], [485, "functions"], [488, "functions"], [489, "functions"], [490, "functions"], [492, "functions"], [493, "functions"]], "Module Contents": [[2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [163, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [214, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [439, "module-contents"], [441, "module-contents"], [442, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils"]], "Subpackages": [[5, "subpackages"], [73, "subpackages"], [97, "subpackages"], [98, "subpackages"], [100, "subpackages"], [137, "subpackages"], [162, "subpackages"], [189, "subpackages"], [213, "subpackages"], [230, "subpackages"], [255, "subpackages"], [266, "subpackages"], [290, "subpackages"], [308, "subpackages"], [319, "subpackages"], [366, "subpackages"], [438, "subpackages"], [440, "subpackages"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "Exceptions": [[139, "exceptions"], [477, "exceptions"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[146, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[146, "id3"]], "neural_compressor.algorithm.algorithm": [[147, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[148, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[149, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[150, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[151, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[152, "module-neural_compressor.benchmark"]], "neural_compressor.common.utils.logger": [[153, "module-neural_compressor.common.utils.logger"]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[157, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[158, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[159, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[160, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "Package Contents": [[162, "package-contents"], [168, "package-contents"], [175, "package-contents"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[167, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[169, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[172, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[173, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[176, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruning": [[180, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[181, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[182, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[183, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[184, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[185, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[186, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.conf.pythonic_config": [[187, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[188, "module-neural_compressor.config"]], "neural_compressor.contrib": [[189, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[190, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[191, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[192, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[193, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[194, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[195, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[196, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[197, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[198, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[199, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[200, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[201, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[202, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[203, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[204, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[204, "attributes"], [246, "attributes"], [377, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[205, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[206, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[207, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[208, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[209, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[210, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[211, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[212, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[213, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[214, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[215, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[216, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[217, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[218, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[219, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[220, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[221, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[222, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[223, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[224, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[225, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[226, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[227, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[228, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[229, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[230, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[231, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[264, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[285, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[289, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[290, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[294, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[296, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[302, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[303, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[305, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[306, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[307, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[308, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[309, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[310, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[311, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[312, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[313, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[314, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[318, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[319, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[320, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[321, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[322, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[323, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[324, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[325, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[326, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[327, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[328, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[329, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[330, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[331, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[332, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[333, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[334, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[335, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[336, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[337, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[338, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[339, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[340, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.utils.onnx_model": [[341, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.profiling": [[342, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[343, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[344, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[345, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[346, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[347, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[350, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[358, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[359, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[360, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[361, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[362, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[363, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[364, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[365, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[366, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[367, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[368, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[369, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[370, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[371, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[372, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[374, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[375, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[376, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[377, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[378, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[379, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[380, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[381, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[382, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[383, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[434, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[435, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[436, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[437, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[438, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[453, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[454, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[455, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[456, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[457, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[458, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[459, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[460, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[461, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[462, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[463, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[464, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[465, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[466, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[467, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[468, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[469, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[470, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[471, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.data": [[472, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils.model_wrappers": [[473, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[474, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.torch.algorithms.layer_wise": [[475, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[476, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[477, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[478, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.mix_precision.half_precision_convert": [[479, "module-neural_compressor.torch.algorithms.mix_precision.half_precision_convert"]], "neural_compressor.torch.algorithms.mix_precision.module_wrappers": [[480, "module-neural_compressor.torch.algorithms.mix_precision.module_wrappers"]], "neural_compressor.torch.algorithms.weight_only.modules": [[481, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.training": [[482, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[483, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[484, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[485, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[486, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[487, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[488, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[489, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[490, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[491, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[492, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[493, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[494, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[495, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[496, "intel-neural-compressor-documentation"], [597, "intel-neural-compressor-documentation"]], "Sections": [[496, "sections"], [597, "sections"]], "Contributor Covenant Code of Conduct": [[497, "contributor-covenant-code-of-conduct"], [498, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[497, "our-pledge"]], "Our Standards": [[497, "our-standards"]], "Our Responsibilities": [[497, "our-responsibilities"]], "Scope": [[497, "scope"]], "Enforcement": [[497, "enforcement"]], "Attribution": [[497, "attribution"]], "Contribution Guidelines": [[498, "contribution-guidelines"]], "Create Pull Request": [[498, "create-pull-request"]], "Step-by-Step guidelines": [[498, "step-by-step-guidelines"]], "Pull Request Checklist": [[498, "pull-request-checklist"]], "Pull Request Template": [[498, "pull-request-template"]], "Pull Request Acceptance Criteria": [[498, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[498, "pull-request-status-checks-overview"]], "Support": [[498, "support"]], "FX": [[499, "fx"]], "Introduction": [[499, "introduction"], [500, "introduction"], [503, "introduction"], [504, "introduction"], [505, "introduction"], [520, "introduction"], [521, "introduction"], [523, "introduction"], [524, "introduction"], [527, "introduction"], [528, "introduction"], [529, "introduction"], [531, "introduction"], [533, "introduction"], [536, "introduction"], [540, "introduction"], [542, "introduction"], [543, "introduction"], [544, "introduction"], [565, "introduction"], [566, "introduction"], [567, "introduction"], [579, "introduction"], [580, "introduction"], [581, "introduction"], [583, "introduction"], [585, "introduction"], [587, "introduction"], [589, "introduction"], [590, "introduction"], [591, "introduction"], [592, "introduction"], [593, "introduction"], [595, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[499, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[499, "get-started"], [526, "get-started"], [569, "get-started"], [584, "get-started"]], "Post Training Static Quantization": [[499, "post-training-static-quantization"], [584, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[499, "post-training-dynamic-quantization"], [584, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[499, "quantization-aware-training"]], "Examples": [[499, "examples"], [500, "examples"], [520, "examples"], [523, "examples"], [524, "examples"], [527, "examples"], [528, "examples"], [529, "examples"], [530, "examples"], [531, "examples"], [541, "examples"], [542, "examples"], [543, "examples"], [544, "examples"], [580, "examples"], [581, "examples"], [584, "examples"], [585, "examples"], [587, "examples"], [591, "examples"]], "Note": [[499, "note"]], "Details": [[499, "details"]], "Common Problem": [[499, "common-problem"]], "Dynamic Quantization": [[499, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[499, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[500, "neural-architecture-search"]], "Basic NAS": [[500, "basic-nas"]], "Dynamic NAS": [[500, "dynamic-nas"]], "NAS Support Matrix": [[500, "nas-support-matrix"]], "Get Started with NAS API": [[500, "get-started-with-nas-api"]], "Basic Usage": [[500, "basic-usage"]], "1. Python code + YAML": [[500, "python-code-yaml"]], "2. Python code only": [[500, "python-code-only"]], "Advanced Usage (Custom NAS)": [[500, "advanced-usage-custom-nas"]], "Security Policy": [[501, "security-policy"]], "Report a Vulnerability": [[501, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[502, "intel-neural-compressor"], [562, "intel-neural-compressor"]], "What\u2019s New": [[502, "what-s-new"]], "Installation": [[502, "installation"], [537, "installation"], [537, "id1"], [556, "installation"], [564, "installation"], [569, "installation"]], "Install from pypi": [[502, "install-from-pypi"], [564, "install-from-pypi"]], "Getting Started": [[502, "getting-started"], [534, "getting-started"], [564, "getting-started"]], "Weight-Only Quantization (LLMs)": [[502, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[502, "static-quantization-non-llms"]], "Documentation": [[502, "documentation"]], "Selected Publications/Events": [[502, "selected-publications-events"]], "Additional Content": [[502, "additional-content"]], "Communication": [[502, "communication"]], "Adaptor": [[503, "adaptor"], [506, "adaptor"]], "Adaptor Support Matrix": [[503, "adaptor-support-matrix"]], "Working Flow": [[503, "working-flow"], [584, "working-flow"]], "Get Started with Adaptor API": [[503, "get-started-with-adaptor-api"]], "Query API": [[503, "query-api"]], "Background": [[503, "background"], [522, "background"]], "Query API Introduction": [[503, "query-api-introduction"]], "Example of Adding a New Backend Support": [[503, "example-of-adding-a-new-backend-support"]], "Capability": [[503, "capability"]], "Implement ONNXRTAdaptor Class": [[503, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[504, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[504, "api-list-that-need-to-implement"]], "Design the framework YAML": [[504, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[504, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[504, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[504, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[504, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[504, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[505, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[505, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[505, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[505, "use-the-new-data-type"]], "Summary": [[505, "summary"]], "ONNX Runtime": [[507, "onnx-runtime"]], "Torch Utils": [[508, "torch-utils"]], "API Document Example": [[509, "api-document-example"]], "APIs": [[510, "apis"]], "Benchmark": [[511, "benchmark"], [541, "benchmark"], [583, "benchmark"]], "Compression": [[512, "compression"]], "Config": [[513, "config"]], "Mix Precision": [[514, "mix-precision"], [541, "mix-precision"]], "Model": [[515, "model"], [543, "model"], [565, "model"], [567, "model"]], "Objective": [[516, "objective"], [575, "objective"], [576, "objective"], [577, "objective"], [579, "objective"]], "Quantization": [[517, "quantization"], [583, "quantization"], [584, "quantization"]], "Strategy": [[518, "strategy"]], "Training": [[519, "training"]], "Benchmarking": [[520, "benchmarking"]], "Benchmark Support Matrix": [[520, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[520, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[521, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[521, "calibration-algorithms"]], "Support Matrix": [[521, "support-matrix"], [547, "support-matrix"]], "Reference": [[521, "reference"], [522, "reference"], [544, "reference"], [581, "reference"], [584, "reference"], [587, "reference"], [590, "reference"]], "INC Coding Conventions": [[522, "inc-coding-conventions"]], "Rules": [[522, "rules"]], "Imports": [[522, "imports"]], "Strings": [[522, "strings"]], "Logger": [[522, "logger"]], "Type Annotations": [[522, "type-annotations"]], "Comments": [[522, "comments"]], "TODO Comments": [[522, "todo-comments"]], "Public and Internal Interfaces": [[522, "public-and-internal-interfaces"]], "Folder structure": [[522, "folder-structure"]], "Recommend VS Code settings.json": [[522, "recommend-vs-code-settings-json"]], "DataLoader": [[523, "dataloader"]], "Supported Framework Dataloader Matrix": [[523, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[523, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[523, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[523, "build-custom-dataloader-with-python-api"]], "Dataset": [[524, "dataset"]], "Supported Framework Dataset Matrix": [[524, "supported-framework-dataset-matrix"]], "TensorFlow": [[524, "tensorflow"], [540, "tensorflow"], [592, "tensorflow"]], "PyTorch": [[524, "pytorch"], [540, "pytorch"], [586, "pytorch"]], "MXNet": [[524, "mxnet"], [540, "mxnet"], [592, "mxnet"]], "ONNXRT": [[524, "onnxrt"], [540, "onnxrt"], [592, "onnxrt"]], "Get start with Dataset API": [[524, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[524, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[524, "user-specific-dataset"]], "Design": [[525, "design"], [593, "design"], [593, "id1"], [593, "id3"], [593, "id5"], [593, "id7"], [593, "id9"], [593, "id11"], [593, "id13"], [593, "id15"], [593, "id17"], [593, "id19"], [593, "id21"]], "Architecture": [[525, "architecture"], [536, "architecture"]], "Workflow": [[525, "workflow"]], "Diagnosis": [[526, "diagnosis"]], "Diagnosis Introduction": [[526, "diagnosis-introduction"]], "Supported Feature Matrix": [[526, "supported-feature-matrix"], [529, "supported-feature-matrix"], [533, "supported-feature-matrix"], [536, "supported-feature-matrix"], [583, "supported-feature-matrix"], [584, "supported-feature-matrix"], [591, "supported-feature-matrix"], [595, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[526, "install-intel-neural-compressor"]], "Modify script": [[526, "modify-script"]], "Quantization diagnosis": [[526, "quantization-diagnosis"]], "Benchmark diagnosis": [[526, "benchmark-diagnosis"]], "Example": [[526, "example"], [540, "example"], [547, "example"], [551, "example"], [579, "example"]], "Prepare dataset": [[526, "prepare-dataset"]], "Run quantization script": [[526, "run-quantization-script"]], "Run benchmark script": [[526, "run-benchmark-script"]], "See quantization data": [[526, "see-quantization-data"]], "How to do diagnosis": [[526, "how-to-do-diagnosis"]], "Parameter description": [[526, "parameter-description"]], "Diagnosis suggestions": [[526, "diagnosis-suggestions"]], "Fallback setting example": [[526, "fallback-setting-example"]], "See profiling data": [[526, "see-profiling-data"]], "Distillation": [[527, "distillation"], [541, "distillation"], [583, "distillation"]], "Knowledge Distillation": [[527, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[527, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[527, "self-distillation"]], "Distillation Support Matrix": [[527, "distillation-support-matrix"]], "Get Started with Distillation API": [[527, "get-started-with-distillation-api"]], "Distillation for Quantization": [[528, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[528, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[528, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[529, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[529, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[529, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[529, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[529, "horovodrun-execution"]], "Security": [[529, "security"]], "PyTorch Examples:": [[529, "pytorch-examples"]], "TensorFlow Examples:": [[529, "tensorflow-examples"]], "Example List": [[530, "example-list"]], "Release Data": [[530, "release-data"]], "Export": [[531, "export"]], "Supported Framework Model Matrix": [[531, "supported-framework-model-matrix"], [543, "supported-framework-model-matrix"], [544, "supported-framework-model-matrix"], [585, "supported-framework-model-matrix"], [587, "supported-framework-model-matrix"]], "PyTorch Model": [[531, "pytorch-model"]], "FP32 Model Export": [[531, "fp32-model-export"], [531, "id1"]], "INT8 Model Export": [[531, "int8-model-export"], [531, "id2"]], "Tensorflow Model": [[531, "tensorflow-model"]], "Appendix": [[531, "appendix"]], "Supported quantized ops": [[531, "supported-quantized-ops"]], "Frequently Asked Questions": [[532, "frequently-asked-questions"]], "Common Build Issues": [[532, "common-build-issues"]], "Issue 1:": [[532, "issue-1"]], "Issue 2:": [[532, "issue-2"]], "Issue 3:": [[532, "issue-3"]], "Issue 4:": [[532, "issue-4"]], "Framework YAML Configuration Files": [[533, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[533, "get-started-with-framework-yaml-files"]], "Quick Samples": [[534, "quick-samples"]], "Quantization with Python API": [[534, "quantization-with-python-api"], [564, "quantization-with-python-api"]], "Validated Models": [[534, "validated-models"], [590, "validated-models"], [596, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[535, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[535, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[535, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[536, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[537, "prerequisites"], [569, "prerequisites"], [570, "prerequisites"]], "Install from Binary": [[537, "install-from-binary"]], "Install from Source": [[537, "install-from-source"], [564, "install-from-source"]], "Install from AI Kit": [[537, "install-from-ai-kit"]], "System Requirements": [[537, "system-requirements"]], "Validated Hardware Environment": [[537, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[537, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[537, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[537, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[537, "validated-software-environment"]], "Legal Information": [[538, "legal-information"]], "License": [[538, "license"]], "Citation": [[538, "citation"]], "Trademarks": [[538, "trademarks"]], "LLMs Quantization Recipes": [[539, "llms-quantization-recipes"]], "Large Language Models Recipes": [[539, "large-language-models-recipes"]], "Large Language Models Accuracy": [[539, "large-language-models-accuracy"]], "Metrics": [[540, "metrics"]], "Supported Built-in Metric Matrix": [[540, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[540, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[540, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[540, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[541, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[541, "model-quantization"]], "Post-training Quantization": [[541, "post-training-quantization"]], "Quantization Aware Training": [[541, "quantization-aware-training"], [584, "quantization-aware-training"], [584, "id1"]], "Pruning": [[541, "pruning"], [581, "pruning"], [583, "pruning"]], "Orchestration": [[541, "orchestration"]], "Mixed Precision": [[542, "mixed-precision"]], "Mixed Precision Support Matrix": [[542, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[542, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[542, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[542, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[542, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[542, "get-started-with-mixed-precision-api"]], "Microscaling Quantization": [[544, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[544, "get-started-with-microscaling-quantization-api"]], "Neural Coder": [[545, "neural-coder"], [562, "neural-coder"], [562, "id1"]], "What do we offer?": [[545, "what-do-we-offer"]], "Getting Started!": [[545, "getting-started"], [556, "getting-started"]], "Jupyter Lab Extension": [[545, "jupyter-lab-extension"]], "Python Launcher": [[545, "python-launcher"], [550, "python-launcher"]], "Python API": [[545, "python-api"]], "Contact": [[545, "contact"], [569, "contact"]], "AWS Amazon SageMaker Support": [[546, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[546, "start-jupyter-lab-3"]], "For SageMaker Studio": [[546, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[546, "for-sagemaker-notebook-instance"]], "Installation Guide": [[546, "installation-guide"]], "BigDL Nano Support": [[547, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[548, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[548, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[548, "install-numa-controller"]], "Environment Variables": [[548, "environment-variables"]], "Frequency Governers": [[548, "frequency-governers"]], "Neural Coder as Python API": [[549, "neural-coder-as-python-api"]], "Enable": [[549, "enable"]], "Bench": [[549, "bench"]], "SuperBench": [[549, "superbench"]], "Quick-Start": [[550, "quick-start"]], "Launcher Arguments (Optional)": [[550, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[551, "neural-coder-for-quantization"]], "Features Supported": [[551, "features-supported"]], "Models Supported": [[551, "models-supported"]], "Usage": [[551, "usage"], [571, "usage"], [571, "id2"], [571, "id6"], [571, "id9"], [571, "id16"], [571, "id19"], [571, "id22"], [571, "id25"], [590, "usage"], [591, "usage"], [591, "id1"], [593, "usage"], [593, "id2"], [593, "id4"], [593, "id6"], [593, "id8"], [593, "id10"], [593, "id12"], [593, "id14"], [593, "id16"], [593, "id18"], [593, "id20"], [593, "id22"]], "PyPI distribution:": [[551, "pypi-distribution"]], "Supported Optimization Features": [[552, "supported-optimization-features"]], "v0.4": [[553, "v0-4"]], "Highlights": [[553, "highlights"]], "Others": [[553, "others"]], "Changelog": [[554, "changelog"], [558, "changelog"]], "neural_compressor_ext_lab": [[555, "neural-compressor-ext-lab"]], "Requirements": [[555, "requirements"], [559, "requirements"], [565, "requirements"], [566, "requirements"], [567, "requirements"], [575, "requirements"]], "Install": [[555, "install"]], "Uninstall": [[555, "uninstall"]], "Contributing": [[555, "contributing"], [559, "contributing"]], "Development install": [[555, "development-install"], [559, "development-install"]], "Development uninstall": [[555, "development-uninstall"], [559, "development-uninstall"]], "Packaging the extension": [[555, "packaging-the-extension"], [559, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[556, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[556, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[556, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[556, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[557, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[557, "manual-release"], [560, "manual-release"]], "Python package": [[557, "python-package"], [560, "python-package"]], "NPM package": [[557, "npm-package"], [560, "npm-package"]], "Automated releases with the Jupyter Releaser": [[557, "automated-releases-with-the-jupyter-releaser"], [560, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[557, "publishing-to-conda-forge"], [560, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[559, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[560, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[561, "change-log"]], "[Unreleased]": [[561, "unreleased"]], "Background Introduction": [[562, "background-introduction"]], "Neural Coder Extension in VSCode": [[562, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[562, "neural-coder-extension-usage"]], "1. Open": [[562, "open"]], "2. Search": [[562, "search"]], "3. Setting": [[562, "setting"]], "4. Icon": [[562, "icon"]], "5. optimization (quantization)": [[562, "optimization-quantization"]], "5.1 Enable": [[562, "enable"]], "5.2 Auto": [[562, "auto"]], "Welcome to your VS Code Extension": [[563, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[563, "what-s-in-the-folder"]], "Setup": [[563, "setup"]], "Get up and running straight away": [[563, "get-up-and-running-straight-away"]], "Make changes": [[563, "make-changes"]], "Explore the API": [[563, "explore-the-api"]], "Run tests": [[563, "run-tests"]], "Go further": [[563, "go-further"]], "Neural Insights": [[564, "neural-insights"]], "Start the Neural Insights": [[564, "start-the-neural-insights"]], "Tensor dump examples": [[564, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[564, "step-by-step-diagnosis-example"]], "Research Collaborations": [[564, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[565, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [567, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[565, "preparation"], [566, "preparation"], [567, "preparation"], [589, "preparation"]], "Running the quantization": [[565, "running-the-quantization"], [566, "running-the-quantization"], [567, "running-the-quantization"]], "Analyzing the result of quantization": [[565, "analyzing-the-result-of-quantization"], [567, "analyzing-the-result-of-quantization"]], "Weights summary": [[565, "weights-summary"]], "Activations summary": [[565, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[566, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[566, "source"], [567, "source"]], "Prepare the dataset": [[567, "prepare-the-dataset"]], "Analyzing weight histograms": [[567, "analyzing-weight-histograms"]], "Open Neural Insights": [[567, "open-neural-insights"]], "Getting Started with Create React App": [[568, "getting-started-with-create-react-app"]], "Available Scripts": [[568, "available-scripts"]], "npm start": [[568, "npm-start"]], "npm test": [[568, "npm-test"]], "npm run build": [[568, "npm-run-build"]], "npm run eject": [[568, "npm-run-eject"]], "Learn More": [[568, "learn-more"], [569, "learn-more"]], "Code Splitting": [[568, "code-splitting"]], "Analyzing the Bundle Size": [[568, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[568, "making-a-progressive-web-app"]], "Advanced Configuration": [[568, "advanced-configuration"]], "Deployment": [[568, "deployment"]], "npm run build fails to minify": [[568, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[569, "what-s-neural-solution"]], "Why Neural Solution?": [[569, "why-neural-solution"]], "How does Neural Solution Work?": [[569, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[569, "method-1-using-pip"]], "Method 2. Building from source:": [[569, "method-2-building-from-source"]], "End-to-end examples": [[569, "end-to-end-examples"]], "Get started": [[570, "get-started"]], "Install Neural Solution": [[570, "install-neural-solution"]], "Method 1. Using pip": [[570, "method-1-using-pip"]], "Method 2. Building from source": [[570, "method-2-building-from-source"]], "Start service": [[570, "start-service"]], "Submit task": [[570, "submit-task"]], "Query task status": [[570, "query-task-status"]], "Stop service": [[570, "stop-service"]], "Inspect logs": [[570, "inspect-logs"]], "Manage resource": [[570, "manage-resource"], [575, "manage-resource"], [576, "manage-resource"]], "Node States": [[570, "node-states"]], "Query cluster": [[570, "query-cluster"]], "Add node": [[570, "add-node"]], "Remove node": [[570, "remove-node"]], "Neural Solution API": [[571, "neural-solution-api"]], "Base URL": [[571, "base-url"]], "Endpoints": [[571, "endpoints"]], "GET /": [[571, "get"]], "Description": [[571, "description"], [571, "id1"], [571, "id4"], [571, "id8"], [571, "id12"], [571, "id15"], [571, "id18"], [571, "id21"], [571, "id24"]], "Responses": [[571, "responses"], [571, "id3"], [571, "id7"], [571, "id11"], [571, "id14"], [571, "id17"], [571, "id20"], [571, "id23"], [571, "id26"]], "POST /task/submit": [[571, "post-task-submit"]], "Parameters": [[571, "parameters"], [571, "id5"], [571, "id10"], [571, "id13"]], "GET /task/status/{task_id}": [[571, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[571, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[571, "websocket-task-screen-task-id"]], "GET /ping": [[571, "get-ping"]], "GET /cluster": [[571, "get-cluster"]], "GET /download/{task_id}": [[571, "get-download-task-id"]], "GET /description": [[571, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[572, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[572, "contents"]], "Overview": [[572, "overview"], [594, "overview"]], "Workflow of OaaS": [[572, "workflow-of-oaas"]], "Class definition diagram": [[572, "class-definition-diagram"]], "Extensibility": [[572, "extensibility"]], "Task request description": [[573, "task-request-description"]], "Examples List": [[574, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[575, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[575, "start-the-neural-solution-service"], [576, "start-the-neural-solution-service"], [577, "start-the-neural-solution-service"]], "Submit optimization task": [[575, "submit-optimization-task"], [576, "submit-optimization-task"], [577, "submit-optimization-task"]], "Query optimization result": [[575, "query-optimization-result"], [576, "query-optimization-result"], [577, "query-optimization-result"]], "Download optimized model": [[575, "download-optimized-model"], [576, "download-optimized-model"]], "Stop the service": [[575, "stop-the-service"], [576, "stop-the-service"], [577, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[576, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[577, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[578, "client"]], "Single Objective": [[579, "single-objective"]], "Multiple Objectives": [[579, "multiple-objectives"]], "Objective Support Matrix": [[579, "objective-support-matrix"]], "Get Started with Objective API": [[579, "get-started-with-objective-api"]], "Config Single Objective": [[579, "config-single-objective"]], "Config Multiple Objectives": [[579, "config-multiple-objectives"]], "Optimization Orchestration": [[580, "optimization-orchestration"]], "One-shot": [[580, "one-shot"]], "Orchestration Support Matrix": [[580, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[580, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[581, "neural-network-pruning"]], "Pruning Patterns": [[581, "pruning-patterns"]], "Pruning Criteria": [[581, "pruning-criteria"]], "Pruning Types": [[581, "pruning-types"]], "Pruning Schedules": [[581, "pruning-schedules"]], "Pruning Scope": [[581, "pruning-scope"]], "Sparsity Decay Types": [[581, "sparsity-decay-types"]], "Regularization": [[581, "regularization"]], "Large Language Model Pruning": [[581, "large-language-model-pruning"]], "Pruning Support Matrix": [[581, "pruning-support-matrix"]], "Get Started with Pruning API": [[581, "get-started-with-pruning-api"]], "Training-aware pruning API": [[581, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[581, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[581, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[581, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (80)": [[582, "full-publications-events-80"]], "2024 (1)": [[582, "id1"]], "2023 (25)": [[582, "id2"]], "2022 (35)": [[582, "id3"]], "2021 (15)": [[582, "id4"]], "2018 - 2020 (4)": [[582, "id5"]], "Pythonic Style Access for Configurations": [[583, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[583, "pythonic-api-for-user-configurations"], [583, "id1"]], "Pythonic API for Framework Configurations": [[583, "pythonic-api-for-framework-configurations"], [583, "id2"]], "Get Started with Pythonic API for Configurations": [[583, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[583, "nas"]], "Quantization Introduction": [[584, "quantization-introduction"]], "Quantization Fundamentals": [[584, "quantization-fundamentals"], [590, "quantization-fundamentals"]], "Quantization Support Matrix": [[584, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[584, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[584, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[584, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[584, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[584, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[584, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[584, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[584, "post-training-quantization"]], "Specify Quantization Rules": [[584, "specify-quantization-rules"]], "Specify Quantization Recipes": [[584, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[584, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[585, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[585, "pytorch-framework-example"]], "ONNX Runtime framework example": [[585, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[586, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[586, "tensorflow"]], "Weight Only Quantization (WOQ)": [[587, "weight-only-quantization-woq"]], "Quantization Capability": [[587, "quantization-capability"]], "Export Compressed Model": [[587, "export-compressed-model"]], "User Code Example": [[587, "user-code-example"]], "WOQ Algorithms Tuning": [[587, "woq-algorithms-tuning"]], "User code example": [[587, "id1"]], "Release": [[588, "release"]], "Release Notes": [[588, "release-notes"]], "Known Issues": [[588, "known-issues"]], "Incompatible Changes": [[588, "incompatible-changes"]], "SigOpt Strategy": [[589, "sigopt-strategy"]], "SigOpt Platform": [[589, "sigopt-platform"]], "Neural Compressor Configuration": [[589, "neural-compressor-configuration"]], "Performance": [[589, "performance"]], "Benefit of SigOpt Strategy": [[589, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[589, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[590, "smooth-quant"]], "Per-tensor & Per-channel": [[590, "per-tensor-per-channel"]], "Per-tensor example": [[590, "per-tensor-example"]], "Per-channel example": [[590, "per-channel-example"]], "Matmul quantization example": [[590, "matmul-quantization-example"]], "Per-channel limitation": [[590, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[590, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[590, "smoothquant"]], "Our enhancement:": [[590, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[590, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[590, "engineering"]], "Using a fixed alpha": [[590, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[590, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[590, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[590, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[590, "supported-framework-matrix"]], "TensorBoard": [[591, "tensorboard"]], "Get Started with TensorBoard": [[591, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[591, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[591, "tensorflow-tensorboard"]], "PyTorch Examples": [[591, "pytorch-examples"]], "TensorFlow Examples": [[591, "tensorflow-examples"]], "Transform": [[592, "transform"]], "Transform Support List": [[592, "transform-support-list"]], "Pytorch": [[592, "pytorch"]], "Tuning Strategies": [[593, "tuning-strategies"]], "Strategy Design": [[593, "strategy-design"]], "Tuning Space": [[593, "tuning-space"]], "Exit Policy": [[593, "exit-policy"]], "Accuracy Criteria": [[593, "accuracy-criteria"]], "Tuning Process": [[593, "tuning-process"]], "Tuning Algorithms": [[593, "tuning-algorithms"]], "Auto": [[593, "auto"]], "Conservative Tuning": [[593, "conservative-tuning"]], "Basic": [[593, "basic"]], "MSE": [[593, "mse"]], "MSE_V2": [[593, "mse-v2"]], "HAWQ_V2": [[593, "hawq-v2"]], "Bayesian": [[593, "bayesian"]], "Exhaustive": [[593, "exhaustive"]], "Random": [[593, "random"]], "SigOpt": [[593, "sigopt"]], "TPE": [[593, "tpe"]], "Distributed Tuning": [[593, "distributed-tuning"]], "Customize a New Tuning Strategy": [[593, "customize-a-new-tuning-strategy"]], "User Guide": [[594, "user-guide"]], "Python-based APIs": [[594, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[594, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[594, "advanced-topics"]], "Innovations for Productivity": [[594, "innovations-for-productivity"]], "User YAML Configuration Files": [[595, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[595, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[596, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[596, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[596, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[596, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[596, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[596, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[596, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[596, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[596, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[596, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.mxnet_utils"], [2, "module-neural_compressor.adaptor.mxnet_utils.util"], [3, "module-neural_compressor.adaptor.ox_utils.calibration"], [4, "module-neural_compressor.adaptor.ox_utils.calibrator"], [5, "module-neural_compressor.adaptor.ox_utils"], [6, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [7, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [8, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [10, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [11, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [14, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [16, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [17, "module-neural_compressor.adaptor.ox_utils.operators"], [18, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [19, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [21, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [22, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [23, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [24, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [25, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [26, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [27, "module-neural_compressor.adaptor.ox_utils.operators.split"], [28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [29, "module-neural_compressor.adaptor.ox_utils.quantizer"], [30, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [31, "module-neural_compressor.adaptor.ox_utils.util"], [32, "module-neural_compressor.adaptor.ox_utils.weight_only"], [33, "module-neural_compressor.adaptor.tensorflow"], [34, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [96, "module-neural_compressor.adaptor.tf_utils.graph_util"], [97, "module-neural_compressor.adaptor.tf_utils"], [98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [131, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [134, "module-neural_compressor.adaptor.tf_utils.util"], [135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [137, "module-neural_compressor.adaptor.torch_utils"], [138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [143, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [144, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [146, "module-neural_compressor.adaptor.torch_utils.util"], [147, "module-neural_compressor.algorithm.algorithm"], [148, "module-neural_compressor.algorithm.fast_bias_correction"], [149, "module-neural_compressor.algorithm"], [150, "module-neural_compressor.algorithm.smooth_quant"], [151, "module-neural_compressor.algorithm.weight_correction"], [152, "module-neural_compressor.benchmark"], [153, "module-neural_compressor.common.utils.logger"], [154, "module-neural_compressor.compression.callbacks"], [155, "module-neural_compressor.compression.distillation.criterions"], [156, "module-neural_compressor.compression.distillation"], [157, "module-neural_compressor.compression.distillation.optimizers"], [158, "module-neural_compressor.compression.distillation.utility"], [159, "module-neural_compressor.compression.hpo"], [160, "module-neural_compressor.compression.hpo.sa_optimizer"], [161, "module-neural_compressor.compression.pruner.criteria"], [162, "module-neural_compressor.compression.pruner"], [163, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [164, "module-neural_compressor.compression.pruner.model_slim"], [165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [167, "module-neural_compressor.compression.pruner.patterns.base"], [168, "module-neural_compressor.compression.pruner.patterns"], [169, "module-neural_compressor.compression.pruner.patterns.mha"], [170, "module-neural_compressor.compression.pruner.patterns.ninm"], [171, "module-neural_compressor.compression.pruner.patterns.nxm"], [172, "module-neural_compressor.compression.pruner.pruners.base"], [173, "module-neural_compressor.compression.pruner.pruners.basic"], [174, "module-neural_compressor.compression.pruner.pruners.block_mask"], [175, "module-neural_compressor.compression.pruner.pruners"], [176, "module-neural_compressor.compression.pruner.pruners.mha"], [177, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [178, "module-neural_compressor.compression.pruner.pruners.progressive"], [179, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [180, "module-neural_compressor.compression.pruner.pruning"], [181, "module-neural_compressor.compression.pruner.regs"], [182, "module-neural_compressor.compression.pruner.schedulers"], [183, "module-neural_compressor.compression.pruner.tf_criteria"], [184, "module-neural_compressor.compression.pruner.utils"], [185, "module-neural_compressor.compression.pruner.wanda"], [186, "module-neural_compressor.compression.pruner.wanda.utils"], [187, "module-neural_compressor.conf.pythonic_config"], [188, "module-neural_compressor.config"], [189, "module-neural_compressor.contrib"], [190, "module-neural_compressor.contrib.strategy"], [191, "module-neural_compressor.contrib.strategy.sigopt"], [192, "module-neural_compressor.contrib.strategy.tpe"], [193, "module-neural_compressor.data.dataloaders.base_dataloader"], [194, "module-neural_compressor.data.dataloaders.dataloader"], [195, "module-neural_compressor.data.dataloaders.default_dataloader"], [196, "module-neural_compressor.data.dataloaders.fetcher"], [197, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [198, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [199, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [200, "module-neural_compressor.data.dataloaders.sampler"], [201, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [202, "module-neural_compressor.data.datasets.bert_dataset"], [203, "module-neural_compressor.data.datasets.coco_dataset"], [204, "module-neural_compressor.data.datasets.dataset"], [205, "module-neural_compressor.data.datasets.dummy_dataset"], [206, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [207, "module-neural_compressor.data.datasets.imagenet_dataset"], [208, "module-neural_compressor.data.datasets"], [209, "module-neural_compressor.data.datasets.style_transfer_dataset"], [210, "module-neural_compressor.data.filters.coco_filter"], [211, "module-neural_compressor.data.filters.filter"], [212, "module-neural_compressor.data.filters"], [213, "module-neural_compressor.data"], [214, "module-neural_compressor.data.transforms.imagenet_transform"], [215, "module-neural_compressor.data.transforms"], [216, "module-neural_compressor.data.transforms.postprocess"], [217, "module-neural_compressor.data.transforms.tokenization"], [218, "module-neural_compressor.data.transforms.transform"], [219, "module-neural_compressor.experimental.benchmark"], [220, "module-neural_compressor.experimental.common.criterion"], [221, "module-neural_compressor.experimental.common.dataloader"], [222, "module-neural_compressor.experimental.common"], [223, "module-neural_compressor.experimental.common.metric"], [224, "module-neural_compressor.experimental.common.model"], [225, "module-neural_compressor.experimental.common.optimizer"], [226, "module-neural_compressor.experimental.common.postprocess"], [227, "module-neural_compressor.experimental.common.torch_utils"], [228, "module-neural_compressor.experimental.component"], [229, "module-neural_compressor.experimental.compression"], [230, "module-neural_compressor.experimental.contrib"], [231, "module-neural_compressor.experimental.contrib.strategy"], [232, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [233, "module-neural_compressor.experimental.contrib.strategy.tpe"], [234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [237, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [238, "module-neural_compressor.experimental.data.dataloaders"], [239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [242, "module-neural_compressor.experimental.data.dataloaders.sampler"], [243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [244, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [245, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [246, "module-neural_compressor.experimental.data.datasets.dataset"], [247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [250, "module-neural_compressor.experimental.data.datasets"], [251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [252, "module-neural_compressor.experimental.data.filters.coco_filter"], [253, "module-neural_compressor.experimental.data.filters.filter"], [254, "module-neural_compressor.experimental.data.filters"], [255, "module-neural_compressor.experimental.data"], [256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [257, "module-neural_compressor.experimental.data.transforms"], [258, "module-neural_compressor.experimental.data.transforms.tokenization"], [259, "module-neural_compressor.experimental.data.transforms.transform"], [260, "module-neural_compressor.experimental.distillation"], [261, "module-neural_compressor.experimental.export"], [262, "module-neural_compressor.experimental.export.qlinear2qdq"], [263, "module-neural_compressor.experimental.export.tf2onnx"], [264, "module-neural_compressor.experimental.export.torch2onnx"], [265, "module-neural_compressor.experimental.graph_optimization"], [266, "module-neural_compressor.experimental"], [267, "module-neural_compressor.experimental.metric.bleu"], [268, "module-neural_compressor.experimental.metric.bleu_util"], [269, "module-neural_compressor.experimental.metric.coco_label_map"], [270, "module-neural_compressor.experimental.metric.coco_tools"], [271, "module-neural_compressor.experimental.metric.evaluate_squad"], [272, "module-neural_compressor.experimental.metric.f1"], [273, "module-neural_compressor.experimental.metric"], [274, "module-neural_compressor.experimental.metric.metric"], [275, "module-neural_compressor.experimental.mixed_precision"], [276, "module-neural_compressor.experimental.model_conversion"], [277, "module-neural_compressor.experimental.nas.basic_nas"], [278, "module-neural_compressor.experimental.nas.dynas"], [279, "module-neural_compressor.experimental.nas"], [280, "module-neural_compressor.experimental.nas.nas"], [281, "module-neural_compressor.experimental.nas.nas_utils"], [282, "module-neural_compressor.experimental.nas.search_algorithms"], [283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [285, "module-neural_compressor.experimental.pruner_legacy"], [286, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [288, "module-neural_compressor.experimental.pruner_legacy.pruner"], [289, "module-neural_compressor.experimental.pruning"], [290, "module-neural_compressor.experimental.pruning_recipes"], [291, "module-neural_compressor.experimental.pruning_recipes.patterns"], [292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [294, "module-neural_compressor.experimental.pruning_v2"], [295, "module-neural_compressor.experimental.pytorch_pruner"], [296, "module-neural_compressor.experimental.pytorch_pruner.logger"], [297, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [299, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [300, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [302, "module-neural_compressor.experimental.quantization"], [303, "module-neural_compressor.experimental.scheduler"], [304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [305, "module-neural_compressor.experimental.strategy.basic"], [306, "module-neural_compressor.experimental.strategy.bayesian"], [307, "module-neural_compressor.experimental.strategy.exhaustive"], [308, "module-neural_compressor.experimental.strategy"], [309, "module-neural_compressor.experimental.strategy.mse"], [310, "module-neural_compressor.experimental.strategy.mse_v2"], [311, "module-neural_compressor.experimental.strategy.random"], [312, "module-neural_compressor.experimental.strategy.strategy"], [313, "module-neural_compressor.experimental.strategy.utils.constant"], [314, "module-neural_compressor.experimental.strategy.utils"], [315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [316, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [318, "module-neural_compressor.experimental.strategy.utils.utility"], [319, "module-neural_compressor"], [320, "module-neural_compressor.metric.bleu"], [321, "module-neural_compressor.metric.bleu_util"], [322, "module-neural_compressor.metric.coco_label_map"], [323, "module-neural_compressor.metric.coco_tools"], [324, "module-neural_compressor.metric.evaluate_squad"], [325, "module-neural_compressor.metric.f1"], [326, "module-neural_compressor.metric"], [327, "module-neural_compressor.metric.metric"], [328, "module-neural_compressor.mix_precision"], [329, "module-neural_compressor.model.base_model"], [330, "module-neural_compressor.model"], [331, "module-neural_compressor.model.keras_model"], [332, "module-neural_compressor.model.model"], [333, "module-neural_compressor.model.mxnet_model"], [334, "module-neural_compressor.model.nets_factory"], [335, "module-neural_compressor.model.onnx_model"], [336, "module-neural_compressor.model.tensorflow_model"], [337, "module-neural_compressor.model.torch_model"], [338, "module-neural_compressor.objective"], [339, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [340, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [341, "module-neural_compressor.onnxrt.utils.onnx_model"], [342, "module-neural_compressor.profiling"], [343, "module-neural_compressor.profiling.parser.factory"], [344, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [345, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [346, "module-neural_compressor.profiling.parser.parser"], [347, "module-neural_compressor.profiling.parser.result"], [348, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [350, "module-neural_compressor.profiling.profiler.factory"], [351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [354, "module-neural_compressor.profiling.profiler.profiler"], [355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [358, "module-neural_compressor.quantization"], [359, "module-neural_compressor.strategy.auto"], [360, "module-neural_compressor.strategy.auto_mixed_precision"], [361, "module-neural_compressor.strategy.basic"], [362, "module-neural_compressor.strategy.bayesian"], [363, "module-neural_compressor.strategy.conservative"], [364, "module-neural_compressor.strategy.exhaustive"], [365, "module-neural_compressor.strategy.hawq_v2"], [366, "module-neural_compressor.strategy"], [367, "module-neural_compressor.strategy.mse"], [368, "module-neural_compressor.strategy.mse_v2"], [369, "module-neural_compressor.strategy.random"], [370, "module-neural_compressor.strategy.strategy"], [371, "module-neural_compressor.strategy.utils.constant"], [372, "module-neural_compressor.strategy.utils"], [373, "module-neural_compressor.strategy.utils.tuning_sampler"], [374, "module-neural_compressor.strategy.utils.tuning_space"], [375, "module-neural_compressor.strategy.utils.tuning_structs"], [376, "module-neural_compressor.strategy.utils.utility"], [377, "module-neural_compressor.template.api_doc_example"], [378, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [379, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [380, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [381, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [382, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"], [383, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"], [423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"], [432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [434, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [435, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [436, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [437, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [438, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"], [440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"], [441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"], [442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"], [443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"], [444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"], [445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"], [449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [453, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [454, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [455, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [456, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [457, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [458, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [459, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [460, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [461, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [462, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [463, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [464, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [465, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [466, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [467, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [468, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [469, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [470, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [471, "module-neural_compressor.tensorflow.quantization.utils.utility"], [472, "module-neural_compressor.tensorflow.utils.data"], [473, "module-neural_compressor.tensorflow.utils.model_wrappers"], [474, "module-neural_compressor.tensorflow.utils.nets_factory"], [475, "module-neural_compressor.torch.algorithms.layer_wise"], [476, "module-neural_compressor.torch.algorithms.layer_wise.load"], [477, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [478, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [479, "module-neural_compressor.torch.algorithms.mix_precision.half_precision_convert"], [480, "module-neural_compressor.torch.algorithms.mix_precision.module_wrappers"], [481, "module-neural_compressor.torch.algorithms.weight_only.modules"], [482, "module-neural_compressor.training"], [483, "module-neural_compressor.utils.collect_layer_histogram"], [484, "module-neural_compressor.utils.constant"], [485, "module-neural_compressor.utils.create_obj_from_config"], [486, "module-neural_compressor.utils"], [487, "module-neural_compressor.utils.kl_divergence"], [488, "module-neural_compressor.utils.load_huggingface"], [489, "module-neural_compressor.utils.logger"], [490, "module-neural_compressor.utils.neural_insights_utils"], [491, "module-neural_compressor.utils.options"], [492, "module-neural_compressor.utils.pytorch"], [493, "module-neural_compressor.utils.utility"], [494, "module-neural_compressor.utils.weights_details"], [495, "module-neural_compressor.version"]], "neural_compressor.adaptor.mxnet_utils": [[1, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[2, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[2, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[3, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[3, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[4, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[4, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[5, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[6, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[6, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[7, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[7, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[8, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[8, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[9, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[9, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[10, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[10, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[11, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[11, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[12, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[12, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[13, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[13, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[14, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[14, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[15, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[15, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[16, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[16, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[17, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[18, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[18, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[19, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[19, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[20, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[20, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[21, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[21, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[22, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[22, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[23, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[23, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[24, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[24, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[25, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[25, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[26, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[26, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[27, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[27, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[28, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[28, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[29, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[29, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[30, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[30, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[31, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[31, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[32, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[32, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[33, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[33, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[34, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[34, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[35, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[35, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[36, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[36, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[37, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[37, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[38, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[39, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[39, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[40, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[40, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[41, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[41, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[42, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[42, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[43, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[43, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[96, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[96, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[97, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[98, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[99, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[99, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[100, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[101, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[101, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[102, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[102, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[103, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[104, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[104, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[105, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[105, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[106, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[126, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[126, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[127, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[127, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[128, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[128, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[129, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[129, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[130, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[130, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[131, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[132, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[132, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[133, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[133, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[134, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[134, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[135, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[135, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[136, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[136, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[137, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[138, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [477, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [477, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[139, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [477, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[139, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[140, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[140, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[141, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[141, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[142, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[142, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[143, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[143, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[144, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[144, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[145, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[145, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[145, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[146, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[146, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[147, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[147, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[148, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[148, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[149, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[150, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[150, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[151, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[151, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[152, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[152, "neural_compressor.benchmark.summary_benchmark"]], "logger (class in neural_compressor.common.utils.logger)": [[153, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[153, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[153, "module-neural_compressor.common.utils.logger"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[157, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[157, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[158, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[158, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[158, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[159, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[160, "module-neural_compressor.compression.hpo.sa_optimizer"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[162, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[162, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[163, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[163, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[164, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[165, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[165, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[166, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[167, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[167, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[167, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[168, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[168, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[169, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[169, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[170, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[170, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[171, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[171, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[171, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[172, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[172, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[173, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[173, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[174, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[174, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[175, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[175, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[176, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[177, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[177, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[178, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[178, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[179, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[179, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[180, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[180, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[180, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[181, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[181, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[181, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[182, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[182, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[182, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[183, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[183, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[183, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[183, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[184, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[184, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[185, "module-neural_compressor.compression.pruner.wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[186, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[186, "module-neural_compressor.compression.pruner.wanda.utils"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[187, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[187, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[188, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[188, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[188, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[188, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[188, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[188, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[188, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[188, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[188, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[188, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[188, "module-neural_compressor.config"]], "neural_compressor.contrib": [[189, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[190, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[191, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[191, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[192, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[192, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[193, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[193, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[194, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[194, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[194, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[195, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[195, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[195, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[196, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[196, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[196, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[196, "module-neural_compressor.data.dataloaders.fetcher"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[197, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[197, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[198, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[198, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[198, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[199, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[199, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[200, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[200, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[201, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[201, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[202, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[202, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[203, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[203, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[204, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[204, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[205, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[205, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[206, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[206, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[206, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[207, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[207, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[208, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[209, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[209, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[210, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[210, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[210, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[211, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[211, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[212, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[213, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[214, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[214, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[215, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[216, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[216, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[217, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[217, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TRANSFORMS"], [218, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[218, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[218, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[219, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[219, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[220, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[220, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[221, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[221, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[222, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[223, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[223, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[224, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[224, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[224, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[225, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[225, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[226, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[226, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[227, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[227, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[227, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[228, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[228, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[229, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[230, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[231, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[232, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[232, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[233, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[233, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[237, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[237, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[238, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[241, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[242, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[242, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[244, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[244, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[245, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[245, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[246, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[246, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[247, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[249, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[250, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[251, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[252, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[252, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[253, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[253, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[254, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[255, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[256, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[256, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[257, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[258, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[258, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [259, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[259, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[259, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[260, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[260, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[260, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[261, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[262, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[262, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[263, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[263, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[263, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[264, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[264, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[265, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[265, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[266, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[267, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[267, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[267, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[267, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[267, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[268, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[268, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[269, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[270, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[270, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[270, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[271, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[271, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[272, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[272, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[273, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[274, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[274, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[274, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[274, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[274, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[274, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[274, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[274, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[274, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[274, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[275, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[275, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[276, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[276, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[277, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[277, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[278, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[278, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[279, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[280, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[280, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[281, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[281, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[282, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[282, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[283, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[283, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[284, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[284, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[285, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[286, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[286, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[287, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[287, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[288, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[288, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[288, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[289, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[289, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[289, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[290, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[293, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[293, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[294, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[294, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[294, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[294, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[294, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[296, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[297, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[297, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[298, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[298, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[300, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[301, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[301, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[302, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[302, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[303, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[303, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[304, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[304, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[305, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[305, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[306, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[306, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[307, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[307, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[308, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[309, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[309, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[310, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[310, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[311, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[311, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[312, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[312, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[312, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[313, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[314, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[315, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[316, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[317, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[317, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[318, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[318, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[319, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[320, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[320, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[320, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[320, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[320, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[321, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[321, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[322, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[323, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[323, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[323, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[324, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[324, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[325, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[325, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[326, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[327, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[327, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[327, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[327, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[327, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[327, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[327, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[327, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[327, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[327, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[327, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[327, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[327, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[327, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[327, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[327, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[328, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[328, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[329, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[329, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[330, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[331, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[331, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[332, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[332, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[332, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[333, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[333, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[334, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[334, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[335, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[335, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[336, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[336, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[337, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[337, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[338, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[338, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[338, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[338, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[338, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[338, "neural_compressor.objective.objective_registry"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[339, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[339, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[340, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[340, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[341, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[341, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.profiling": [[342, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[343, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[343, "module-neural_compressor.profiling.parser.factory"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[344, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[344, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[345, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[345, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[346, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[346, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[347, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[347, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[348, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[349, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[349, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[350, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[350, "module-neural_compressor.profiling.profiler.factory"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[351, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[352, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[353, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[354, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[354, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[355, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[355, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[357, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[358, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[358, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[359, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[359, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[360, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[360, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[361, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[361, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[362, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[362, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[363, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[363, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[364, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[364, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[365, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[365, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[366, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[367, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[367, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[368, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[368, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[369, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[369, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[370, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[370, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[371, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[372, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[373, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[373, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[374, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[374, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[375, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[375, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[376, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[376, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[377, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[377, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[377, "module-neural_compressor.template.api_doc_example"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[378, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[378, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[378, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[379, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[379, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[379, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[380, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[380, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[381, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[381, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[382, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[382, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[383, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[383, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[384, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[384, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[385, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[386, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[386, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[387, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[387, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[388, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[388, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[389, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[389, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[390, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[390, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[391, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[391, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[392, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[392, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[393, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[393, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[394, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[394, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[395, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[395, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[396, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[396, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[397, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[397, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[398, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[398, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[399, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[399, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[400, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[400, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[401, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[401, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[402, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[402, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[403, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[403, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[403, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[403, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[403, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[404, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[404, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[405, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[405, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[406, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[406, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[407, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[407, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[408, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[408, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[409, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[410, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[410, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[411, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[411, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[412, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[412, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[413, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[413, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[414, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[414, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[415, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[415, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[416, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[416, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[417, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[417, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[418, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[418, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[419, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[419, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[420, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[420, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[421, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[421, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[422, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[422, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[423, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[423, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[424, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[424, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[425, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[425, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[426, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[426, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[426, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[426, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[426, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[427, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[428, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[428, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[429, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[429, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[430, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[430, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[431, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[431, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[432, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[432, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[433, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[434, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[434, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[435, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[435, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[436, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[436, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[437, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[437, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[437, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[438, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[439, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[439, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[439, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[440, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[441, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[441, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[442, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[442, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[442, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[443, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[444, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[444, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[445, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[445, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[446, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[446, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[447, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[447, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[448, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[448, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[448, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[449, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[449, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[450, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[450, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[451, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[451, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[452, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[452, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[453, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[453, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[454, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[454, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[455, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[455, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[456, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[457, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[457, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[458, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[458, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[458, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[459, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[459, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[460, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[460, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[461, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[461, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[462, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[462, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[463, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[463, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[464, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[464, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[465, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[465, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[466, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[466, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[467, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[467, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[468, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[469, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[469, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[470, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[470, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[471, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[471, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "batchsampler (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.BatchSampler"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "indexfetcher (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.IndexFetcher"]], "iterablefetcher (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.IterableFetcher"]], "iterablesampler (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.IterableSampler"]], "sequentialsampler (class in neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.SequentialSampler"]], "default_collate() (in module neural_compressor.tensorflow.utils.data)": [[472, "neural_compressor.tensorflow.utils.data.default_collate"]], "neural_compressor.tensorflow.utils.data": [[472, "module-neural_compressor.tensorflow.utils.data"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[473, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "try_loading_keras() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[473, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[474, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[474, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.torch.algorithms.layer_wise": [[475, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[476, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[476, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[477, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[478, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[478, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "halfprecisionconverter (class in neural_compressor.torch.algorithms.mix_precision.half_precision_convert)": [[479, "neural_compressor.torch.algorithms.mix_precision.half_precision_convert.HalfPrecisionConverter"]], "neural_compressor.torch.algorithms.mix_precision.half_precision_convert": [[479, "module-neural_compressor.torch.algorithms.mix_precision.half_precision_convert"]], "halfprecisionmodulewrapper (class in neural_compressor.torch.algorithms.mix_precision.module_wrappers)": [[480, "neural_compressor.torch.algorithms.mix_precision.module_wrappers.HalfPrecisionModuleWrapper"]], "neural_compressor.torch.algorithms.mix_precision.module_wrappers": [[480, "module-neural_compressor.torch.algorithms.mix_precision.module_wrappers"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[481, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[481, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[481, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[481, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "callbacks (class in neural_compressor.training)": [[482, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[482, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[482, "neural_compressor.training.fit"]], "neural_compressor.training": [[482, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[482, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[483, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[483, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[484, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[485, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[485, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[486, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[487, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[487, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[488, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[488, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[488, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[488, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[489, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[489, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[490, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[490, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[491, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[491, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[492, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[492, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[493, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[493, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[494, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[494, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[494, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[495, "module-neural_compressor.version"]]}})