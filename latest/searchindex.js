Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["block_mask", "neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor.experimental.benchmark", "neural_compressor.experimental.common.criterion", "neural_compressor.experimental.common.dataloader", "neural_compressor.experimental.common", "neural_compressor.experimental.common.metric", "neural_compressor.experimental.common.model", "neural_compressor.experimental.common.optimizer", "neural_compressor.experimental.common.postprocess", "neural_compressor.experimental.common.torch_utils", "neural_compressor.experimental.component", "neural_compressor.experimental.compression", "neural_compressor.experimental.contrib", "neural_compressor.experimental.contrib.strategy", "neural_compressor.experimental.contrib.strategy.sigopt", "neural_compressor.experimental.contrib.strategy.tpe", "neural_compressor.experimental.data.dataloaders.base_dataloader", "neural_compressor.experimental.data.dataloaders.dataloader", "neural_compressor.experimental.data.dataloaders.default_dataloader", "neural_compressor.experimental.data.dataloaders.fetcher", "neural_compressor.experimental.data.dataloaders", "neural_compressor.experimental.data.dataloaders.mxnet_dataloader", "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader", "neural_compressor.experimental.data.dataloaders.pytorch_dataloader", "neural_compressor.experimental.data.dataloaders.sampler", "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader", "neural_compressor.experimental.data.datasets.bert_dataset", "neural_compressor.experimental.data.datasets.coco_dataset", "neural_compressor.experimental.data.datasets.dataset", "neural_compressor.experimental.data.datasets.dummy_dataset", "neural_compressor.experimental.data.datasets.dummy_dataset_v2", "neural_compressor.experimental.data.datasets.imagenet_dataset", "neural_compressor.experimental.data.datasets", "neural_compressor.experimental.data.datasets.style_transfer_dataset", "neural_compressor.experimental.data.filters.coco_filter", "neural_compressor.experimental.data.filters.filter", "neural_compressor.experimental.data.filters", "neural_compressor.experimental.data", "neural_compressor.experimental.data.transforms.imagenet_transform", "neural_compressor.experimental.data.transforms", "neural_compressor.experimental.data.transforms.tokenization", "neural_compressor.experimental.data.transforms.transform", "neural_compressor.experimental.distillation", "neural_compressor.experimental.export", "neural_compressor.experimental.export.qlinear2qdq", "neural_compressor.experimental.export.tf2onnx", "neural_compressor.experimental.export.torch2onnx", "neural_compressor.experimental.graph_optimization", "neural_compressor.experimental", "neural_compressor.experimental.metric.bleu", "neural_compressor.experimental.metric.bleu_util", "neural_compressor.experimental.metric.coco_label_map", "neural_compressor.experimental.metric.coco_tools", "neural_compressor.experimental.metric.evaluate_squad", "neural_compressor.experimental.metric.f1", "neural_compressor.experimental.metric", "neural_compressor.experimental.metric.metric", "neural_compressor.experimental.mixed_precision", "neural_compressor.experimental.model_conversion", "neural_compressor.experimental.nas.basic_nas", "neural_compressor.experimental.nas.dynas", "neural_compressor.experimental.nas", "neural_compressor.experimental.nas.nas", "neural_compressor.experimental.nas.nas_utils", "neural_compressor.experimental.nas.search_algorithms", "neural_compressor.experimental.pruner_legacy.gradient_sensitivity", "neural_compressor.experimental.pruner_legacy.group_lasso", "neural_compressor.experimental.pruner_legacy", "neural_compressor.experimental.pruner_legacy.magnitude", "neural_compressor.experimental.pruner_legacy.pattern_lock", "neural_compressor.experimental.pruner_legacy.pruner", "neural_compressor.experimental.pruning", "neural_compressor.experimental.pruning_recipes", "neural_compressor.experimental.pruning_recipes.patterns", "neural_compressor.experimental.pruning_recipes.patterns.pattern", "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern", "neural_compressor.experimental.pruning_v2", "neural_compressor.experimental.pytorch_pruner", "neural_compressor.experimental.pytorch_pruner.logger", "neural_compressor.experimental.pytorch_pruner.patterns", "neural_compressor.experimental.pytorch_pruner.prune_utils", "neural_compressor.experimental.pytorch_pruner.pruner", "neural_compressor.experimental.pytorch_pruner.pruning", "neural_compressor.experimental.pytorch_pruner.scheduler", "neural_compressor.experimental.quantization", "neural_compressor.experimental.scheduler", "neural_compressor.experimental.strategy.auto_mixed_precision", "neural_compressor.experimental.strategy.basic", "neural_compressor.experimental.strategy.bayesian", "neural_compressor.experimental.strategy.exhaustive", "neural_compressor.experimental.strategy", "neural_compressor.experimental.strategy.mse", "neural_compressor.experimental.strategy.mse_v2", "neural_compressor.experimental.strategy.random", "neural_compressor.experimental.strategy.strategy", "neural_compressor.experimental.strategy.utils.constant", "neural_compressor.experimental.strategy.utils", "neural_compressor.experimental.strategy.utils.tuning_sampler", "neural_compressor.experimental.strategy.utils.tuning_space", "neural_compressor.experimental.strategy.utils.tuning_structs", "neural_compressor.experimental.strategy.utils.utility", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.neural_insights_utils", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 107, 148, 184, 188, 235, 243, 278, 280, 286, 292], "mask": [0, 12, 54, 80, 109, 133, 280, 295], "regist": [1, 14, 21, 28, 30, 35, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 168, 177, 199, 202, 221, 223, 228, 239, 240, 262, 278, 289, 292], "algorithm_registri": 1, "algorithm_typ": 1, "locat": [1, 28, 69, 187, 192, 228, 247, 254, 258, 261, 269, 283, 287, 291, 294], "sourc": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 198, 201, 237, 240, 254, 256, 258, 259, 261, 281], "decor": [1, 28, 35, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 180, 198, 199, 202, 292], "all": [1, 3, 6, 7, 14, 21, 28, 29, 35, 38, 44, 52, 56, 63, 69, 74, 77, 80, 82, 84, 91, 98, 102, 103, 107, 113, 122, 125, 130, 133, 135, 137, 139, 148, 162, 168, 172, 180, 186, 189, 192, 193, 194, 196, 197, 201, 202, 203, 204, 221, 222, 223, 228, 232, 236, 240, 244, 252, 255, 256, 259, 260, 261, 262, 263, 266, 267, 269, 270, 274, 275, 276, 279, 280, 281, 283, 285, 286, 289, 291, 292], "subclass": [1, 14, 21, 28, 35, 49, 53, 56, 63, 69, 84, 91, 98, 102, 107, 109, 111, 122, 125, 137, 148, 162, 202], "paramet": [1, 6, 7, 10, 11, 12, 14, 21, 24, 28, 30, 35, 42, 43, 53, 54, 56, 63, 66, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 184, 186, 187, 188, 191, 192, 194, 198, 203, 222, 223, 226, 228, 235, 239, 240, 243, 255, 261, 262, 263, 264, 269, 274, 275, 280, 283, 284, 286, 288, 289, 291, 292, 294], "cl": [1, 14, 21, 28, 30, 35, 56, 63, 69, 91, 98, 102, 107, 109, 111, 122, 137, 148, 162, 180, 221], "The": [1, 6, 7, 10, 11, 12, 13, 14, 15, 16, 20, 21, 28, 30, 33, 35, 38, 42, 43, 44, 54, 55, 56, 57, 58, 62, 63, 69, 70, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122, 126, 128, 130, 131, 132, 134, 135, 137, 138, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 166, 168, 169, 170, 172, 174, 175, 179, 180, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 202, 203, 204, 205, 207, 211, 214, 217, 219, 220, 221, 222, 223, 225, 226, 228, 230, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 246, 247, 249, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "str": [1, 7, 12, 13, 14, 21, 24, 28, 30, 34, 35, 54, 55, 56, 63, 66, 69, 73, 74, 77, 78, 80, 82, 84, 91, 102, 125, 128, 130, 131, 133, 135, 137, 165, 168, 172, 175, 177, 180, 181, 188, 189, 192, 221, 222, 223, 239, 272, 282, 290, 291], "registr": [1, 14, 21, 28, 56, 63, 69, 102], "name": [1, 6, 7, 12, 13, 14, 17, 21, 26, 28, 29, 33, 36, 37, 54, 55, 56, 59, 63, 69, 72, 73, 74, 79, 84, 102, 107, 109, 111, 126, 128, 132, 137, 142, 146, 148, 150, 166, 168, 170, 172, 177, 180, 184, 187, 188, 190, 197, 198, 204, 221, 223, 225, 228, 230, 232, 237, 239, 240, 242, 243, 247, 254, 258, 262, 263, 269, 280, 283, 287, 288, 290, 292, 294, 295], "call": [1, 80, 109, 133, 192, 194, 198, 199, 202, 222, 234, 250, 252, 262, 280, 283, 289, 290, 291], "return": [1, 6, 10, 11, 14, 21, 24, 28, 29, 30, 35, 42, 43, 56, 63, 66, 69, 74, 77, 78, 80, 81, 82, 84, 90, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 177, 179, 180, 185, 189, 190, 193, 194, 198, 199, 203, 204, 222, 223, 228, 239, 242, 274, 275, 276, 278, 280, 283, 286, 289, 290, 292], "type": [1, 7, 12, 14, 21, 28, 30, 35, 52, 54, 56, 63, 69, 74, 77, 78, 80, 84, 91, 98, 102, 107, 109, 111, 116, 122, 126, 128, 130, 131, 133, 137, 146, 148, 154, 155, 162, 166, 168, 179, 180, 184, 185, 186, 187, 188, 189, 190, 192, 202, 203, 223, 225, 228, 230, 232, 235, 240, 241, 243, 262, 264, 269, 270, 274, 275, 283, 284, 286, 288, 291, 292, 293, 294], "build": [1, 2, 4, 5, 87, 90, 141, 143, 145, 146, 147, 192, 202, 203, 204, 236, 242, 254, 256, 258, 259, 262, 281, 292], "dict": [1, 6, 7, 10, 11, 29, 35, 42, 43, 53, 72, 74, 79, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 119, 125, 128, 132, 133, 134, 135, 137, 138, 146, 150, 165, 168, 169, 170, 172, 179, 180, 188, 189, 190, 198, 203, 221, 230, 239, 280, 282, 283, 289, 290, 292], "algorithmschedul": 1, "conf": [1, 6, 7, 10, 11, 29, 42, 43, 86, 93, 94, 96, 97, 98, 99, 104, 114, 116, 119, 120, 122, 126, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 198, 199, 201, 204, 219, 226, 233, 234, 240, 241, 242, 263, 265, 266, 279, 283, 284, 285, 286, 288, 289, 292], "control": [1, 7, 198, 240, 267, 280, 292], "differ": [1, 5, 7, 14, 28, 30, 47, 56, 69, 75, 84, 90, 92, 101, 112, 137, 146, 148, 174, 188, 192, 194, 196, 198, 199, 203, 222, 223, 225, 226, 228, 229, 234, 235, 239, 240, 242, 254, 258, 263, 266, 269, 278, 280, 283, 286, 289, 290, 291, 292], "phase": [1, 192, 194, 199, 240, 280, 283, 285, 292], "base": [1, 7, 12, 14, 21, 28, 38, 44, 47, 52, 54, 56, 63, 69, 84, 90, 92, 98, 99, 102, 104, 109, 119, 122, 126, 137, 139, 146, 147, 148, 159, 162, 166, 183, 185, 186, 188, 189, 193, 194, 199, 201, 202, 203, 204, 221, 223, 227, 228, 232, 240, 241, 249, 250, 252, 261, 264, 269, 272, 275, 276, 280, 281, 283, 286, 288, 289, 290, 292, 295], "fastbiascorrect": [2, 5], "threshold": [2, 170, 174, 239], "2": [2, 4, 6, 7, 13, 29, 55, 80, 82, 84, 109, 116, 133, 135, 137, 148, 154, 180, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 198, 201, 202, 220, 222, 223, 225, 226, 232, 235, 236, 237, 238, 239, 241, 243, 265, 271, 272, 274, 275, 276, 278, 280, 281, 283, 284, 286, 287, 288, 289, 291, 292, 293], "0": [2, 4, 7, 12, 15, 16, 19, 24, 28, 30, 31, 44, 46, 50, 51, 53, 54, 57, 58, 61, 66, 69, 74, 75, 84, 91, 99, 104, 112, 137, 148, 150, 155, 175, 184, 185, 186, 188, 191, 193, 194, 198, 201, 221, 222, 223, 226, 228, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 247, 249, 254, 258, 264, 274, 275, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294], "channel_axi": [2, 5], "1": [2, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 24, 28, 29, 30, 31, 44, 46, 50, 51, 53, 54, 55, 57, 58, 61, 62, 66, 69, 75, 80, 81, 82, 84, 99, 104, 109, 112, 113, 133, 134, 135, 137, 148, 150, 168, 172, 175, 180, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 201, 202, 204, 220, 222, 223, 225, 226, 230, 232, 233, 236, 238, 239, 241, 243, 245, 247, 263, 264, 271, 272, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294], "fetch": [3, 47, 203, 223, 274, 275, 276], "file": [3, 7, 10, 11, 12, 13, 14, 17, 27, 28, 34, 37, 42, 43, 54, 55, 56, 59, 68, 69, 70, 75, 80, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 133, 138, 148, 150, 179, 180, 188, 197, 199, 202, 203, 204, 228, 231, 234, 237, 239, 240, 242, 247, 256, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 274, 275, 276, 278, 282, 283, 286, 290, 291], "init": [3, 223, 239, 292], "fast_bias_correct": [3, 7, 283], "smooth_quant": [3, 7, 221, 283, 289], "weight_correct": [3, 7, 283], "smoothquant": [4, 186, 188, 189, 191, 194, 201, 238, 281, 286, 293], "alpha": [4, 194, 221, 283, 292], "5": [4, 7, 16, 24, 30, 58, 66, 84, 137, 150, 186, 188, 191, 194, 202, 223, 230, 232, 236, 239, 240, 266, 271, 274, 275, 280, 282, 283, 286, 289, 291, 292, 294, 295], "fake": [4, 168, 188, 194, 240, 283, 286, 289], "input": [4, 7, 10, 11, 12, 13, 14, 16, 24, 27, 28, 33, 42, 43, 54, 55, 56, 58, 66, 68, 69, 72, 73, 74, 137, 138, 142, 146, 150, 169, 175, 177, 179, 180, 183, 187, 188, 189, 194, 199, 202, 203, 219, 220, 222, 223, 225, 226, 227, 228, 230, 232, 234, 239, 240, 241, 242, 244, 249, 280, 282, 283, 286, 289, 290, 291, 294], "channel": [4, 5, 7, 24, 28, 66, 69, 107, 175, 184, 186, 188, 201, 202, 204, 235, 236, 243, 244, 246, 251, 266, 280, 286, 291, 295], "quantiz": [4, 6, 7, 10, 11, 24, 31, 38, 42, 43, 66, 74, 75, 76, 86, 113, 119, 125, 129, 155, 157, 159, 168, 169, 170, 174, 175, 179, 180, 185, 191, 193, 202, 209, 221, 222, 223, 228, 229, 232, 234, 235, 239, 242, 244, 249, 251, 252, 255, 268, 270, 271, 273, 279, 281, 287, 290, 291, 292, 293, 294], "more": [4, 28, 69, 107, 184, 185, 186, 188, 189, 192, 194, 199, 200, 201, 203, 220, 221, 223, 226, 228, 230, 233, 235, 236, 238, 240, 241, 243, 244, 252, 256, 259, 264, 269, 278, 279, 280, 285, 286, 289, 292, 293, 295], "detail": [4, 28, 69, 180, 181, 185, 186, 189, 190, 191, 192, 194, 196, 201, 203, 204, 220, 221, 226, 232, 233, 234, 238, 239, 240, 241, 244, 252, 261, 269, 270, 280, 286, 287, 288, 289, 290, 292, 293], "pleas": [4, 7, 12, 13, 14, 17, 54, 55, 56, 59, 107, 109, 110, 137, 150, 186, 187, 188, 189, 190, 191, 194, 198, 199, 200, 201, 202, 219, 220, 223, 227, 228, 230, 236, 238, 239, 241, 244, 245, 249, 252, 268, 269, 270, 280, 283, 285, 286, 287, 288, 289, 292, 293], "refer": [4, 7, 12, 54, 77, 78, 84, 107, 109, 110, 130, 131, 137, 150, 186, 187, 189, 190, 191, 192, 198, 201, 202, 203, 219, 222, 223, 225, 227, 228, 230, 234, 236, 237, 239, 240, 241, 244, 249, 252, 263, 264, 266, 268, 269, 270, 278, 282, 284, 287, 291, 292], "accur": [4, 187, 188, 194, 280, 286, 289], "effici": [4, 187, 188, 194, 199, 201, 220, 222, 226, 244, 269, 279, 280, 281, 286, 289, 292], "post": [4, 7, 10, 11, 42, 43, 150, 184, 186, 187, 188, 189, 191, 193, 194, 196, 201, 202, 203, 225, 227, 228, 230, 235, 236, 243, 244, 250, 261, 271, 280, 281, 284, 286, 289, 290, 292], "train": [4, 7, 10, 11, 12, 14, 28, 38, 42, 43, 54, 56, 69, 70, 86, 109, 129, 150, 172, 184, 185, 186, 187, 188, 189, 191, 193, 199, 201, 202, 203, 209, 223, 225, 226, 227, 230, 235, 241, 243, 244, 250, 261, 266, 274, 279, 281, 284, 286, 288, 289, 292, 294], "larg": [4, 184, 186, 188, 189, 191, 192, 194, 201, 222, 226, 240, 243, 281, 284, 286, 289, 295], "languag": [4, 77, 130, 184, 186, 188, 189, 191, 192, 194, 196, 201, 230, 243, 265, 281, 284, 286, 289], "model": [4, 6, 7, 10, 11, 12, 14, 28, 29, 32, 33, 42, 43, 50, 53, 54, 56, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 90, 93, 94, 96, 97, 98, 99, 104, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 122, 129, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 168, 169, 175, 177, 179, 180, 182, 183, 184, 185, 188, 189, 190, 191, 192, 194, 197, 198, 199, 201, 202, 204, 209, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 234, 235, 237, 239, 241, 244, 249, 251, 252, 255, 261, 263, 268, 270, 271, 272, 273, 278, 279, 281, 283, 287, 288, 290, 291, 292, 293, 294], "spiq": [4, 194, 289], "data": [4, 7, 10, 11, 29, 31, 42, 43, 74, 76, 116, 126, 128, 129, 138, 150, 154, 166, 168, 169, 172, 177, 180, 183, 184, 185, 187, 188, 189, 192, 194, 201, 202, 220, 222, 223, 228, 232, 233, 236, 239, 240, 241, 243, 263, 264, 266, 269, 274, 275, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293], "free": [4, 10, 11, 42, 43, 150, 186, 191, 194, 196, 250, 255, 263, 271, 278, 288, 289], "per": [4, 6, 7, 29, 174, 184, 186, 188, 202, 204, 222, 243, 269, 280, 285, 286, 295], "static": [4, 7, 74, 126, 150, 166, 188, 189, 202, 203, 204, 225, 230, 235, 240, 244, 249, 250, 251, 252, 255, 261, 264, 272, 274, 275, 276, 284, 289, 292, 295], "For": [4, 7, 14, 28, 56, 69, 81, 82, 84, 107, 110, 134, 135, 137, 138, 150, 186, 189, 190, 191, 194, 196, 198, 200, 202, 204, 226, 227, 228, 230, 232, 235, 244, 246, 247, 249, 252, 263, 264, 269, 280, 285, 286, 289, 290, 292, 294, 295], "torch": [4, 7, 74, 138, 150, 175, 179, 183, 184, 185, 186, 187, 188, 193, 194, 198, 201, 204, 205, 226, 228, 230, 240, 241, 242, 243, 244, 249, 252, 264, 283, 286, 289, 290], "backend": [4, 7, 8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 34, 35, 40, 41, 45, 46, 48, 50, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 120, 138, 139, 140, 142, 160, 185, 188, 189, 198, 204, 225, 228, 234, 235, 240, 241, 250, 269, 274, 275, 276, 282, 286, 291, 292, 294], "we": [4, 5, 6, 7, 29, 31, 53, 77, 80, 130, 133, 157, 183, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 202, 203, 204, 221, 222, 225, 228, 230, 232, 238, 239, 240, 248, 249, 252, 256, 259, 261, 262, 264, 267, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293], "onli": [4, 5, 6, 7, 12, 29, 31, 35, 54, 74, 86, 107, 109, 120, 150, 160, 168, 180, 185, 189, 193, 202, 203, 204, 219, 220, 221, 222, 225, 226, 228, 231, 232, 238, 240, 241, 249, 262, 280, 281, 282, 283, 284, 289, 290, 292, 293, 294], "handl": [4, 176, 198, 200, 221, 222, 269, 289], "layer": [4, 7, 30, 37, 107, 108, 170, 172, 180, 186, 187, 188, 194, 201, 202, 203, 204, 227, 235, 264, 280, 286, 287, 293], "whose": [4, 108, 146, 234, 289, 292], "smooth": [4, 7, 125, 189, 221, 280, 292], "scale": [4, 5, 24, 28, 66, 69, 183, 184, 186, 187, 188, 192, 194, 243, 283, 286, 288, 289, 291, 292], "could": [4, 10, 11, 14, 42, 43, 56, 113, 138, 150, 169, 185, 187, 188, 190, 192, 194, 196, 198, 227, 240, 279, 280, 283, 286, 289, 293], "absorb": [4, 188, 286], "support": [4, 7, 10, 11, 12, 14, 21, 24, 28, 30, 31, 32, 35, 42, 43, 53, 54, 56, 63, 66, 69, 76, 84, 86, 91, 107, 109, 113, 120, 126, 129, 137, 138, 142, 148, 150, 160, 166, 169, 172, 174, 175, 180, 182, 183, 187, 190, 193, 194, 201, 203, 221, 238, 240, 244, 249, 252, 255, 261, 268, 269, 272, 281, 285, 288, 292, 293], "other": [4, 53, 82, 135, 146, 184, 189, 192, 194, 196, 198, 203, 204, 221, 225, 232, 235, 237, 240, 242, 243, 264, 278, 280, 283, 289, 291, 292, 295], "later": [4, 183, 185, 221, 268, 269, 290], "onnx": [4, 7, 50, 72, 73, 74, 138, 145, 178, 197, 201, 202, 203, 205, 222, 225, 229, 230, 232, 233, 235, 241, 242, 243, 246, 251, 252, 264, 281, 282, 286, 287, 289, 292], "insert": [4, 187, 188, 189, 191, 194, 198, 203, 222, 235, 240, 244, 280, 283, 285, 286, 289, 290], "mul": [4, 188, 230, 286, 289], "befor": [4, 7, 12, 54, 107, 109, 111, 188, 194, 197, 204, 222, 223, 226, 227, 228, 231, 232, 236, 240, 256, 259, 265, 266, 283, 286, 288, 290, 292], "conv": [4, 7, 198, 203, 204, 240, 280, 282, 283, 292], "linear": [4, 7, 107, 186, 187, 188, 194, 198, 226, 230, 240, 280, 286, 289, 292], "op": [4, 7, 74, 119, 126, 127, 155, 157, 159, 166, 167, 168, 174, 180, 185, 186, 194, 201, 202, 203, 204, 225, 232, 240, 241, 265, 266, 280, 283, 285, 287, 289, 290, 292, 294], "fuse": [4, 198, 289, 290], "kernel": [4, 7, 188, 202, 203, 292], "futur": [4, 10, 11, 31, 42, 43, 189, 235, 238, 240, 252, 274, 275, 276, 293], "weightcorrect": 5, "ep": [5, 241], "1e": [5, 194, 289, 294], "05": [5, 7, 84, 137, 239, 289, 295], "correct": [5, 7, 80, 81, 82, 84, 108, 133, 134, 135, 137, 196, 244], "int8": [5, 6, 7, 24, 66, 72, 73, 74, 126, 128, 166, 168, 179, 180, 184, 186, 188, 189, 190, 192, 194, 197, 198, 201, 202, 203, 204, 219, 223, 227, 232, 238, 240, 241, 243, 246, 249, 251, 252, 255, 261, 264, 266, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 294], "weight": [5, 7, 74, 107, 109, 126, 137, 150, 157, 166, 168, 180, 181, 183, 186, 187, 189, 190, 191, 192, 193, 202, 203, 204, 220, 225, 227, 232, 234, 238, 240, 263, 274, 278, 280, 281, 282, 283, 284, 289, 290, 292, 293, 294], "distribut": [5, 7, 31, 44, 46, 47, 50, 51, 52, 53, 174, 188, 192, 194, 201, 203, 222, 226, 236, 256, 259, 263, 266, 274, 281, 283, 286, 287, 289, 293, 295], "close": [5, 220, 270], "fp32": [5, 7, 10, 11, 42, 43, 73, 74, 84, 119, 126, 137, 155, 159, 166, 172, 175, 179, 180, 185, 186, 187, 188, 190, 192, 194, 197, 202, 204, 225, 232, 233, 238, 239, 240, 241, 251, 263, 264, 265, 266, 282, 283, 285, 286, 287, 288, 289, 290, 292, 294, 295], "r": [5, 186, 187, 188, 190, 192, 194, 225, 236, 262, 263, 265, 266, 268, 269, 283, 295], "w_int8": 5, "u": [5, 244, 263, 268], "w_fp32": 5, "i": [5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 21, 24, 28, 29, 31, 35, 37, 38, 42, 43, 44, 52, 53, 54, 55, 56, 57, 58, 61, 63, 66, 69, 77, 80, 82, 84, 86, 91, 99, 104, 108, 109, 113, 120, 130, 133, 135, 137, 138, 148, 150, 155, 160, 168, 169, 175, 179, 180, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 211, 214, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295], "varianc": [5, 225], "ratio": [5, 7, 24, 28, 66, 69, 109, 223, 238, 240, 264, 280, 291, 295], "between": [5, 7, 28, 69, 81, 84, 134, 137, 180, 184, 188, 189, 192, 194, 198, 202, 203, 204, 220, 225, 226, 235, 239, 240, 243, 252, 283, 286, 287, 288, 289, 291, 292], "wise": [5, 7, 116, 119, 154, 155, 159, 188, 201, 203, 235, 266, 280, 286, 289, 290, 292, 293, 294], "": [5, 7, 14, 27, 28, 29, 31, 33, 53, 56, 68, 69, 82, 107, 109, 135, 137, 138, 142, 150, 177, 180, 183, 185, 186, 187, 188, 190, 192, 194, 196, 197, 199, 203, 204, 221, 225, 226, 228, 230, 232, 235, 240, 241, 249, 252, 254, 258, 261, 264, 266, 269, 279, 280, 281, 282, 283, 286, 287, 288, 289, 292, 293, 294, 295], "equal": [5, 180, 184, 243, 280, 286], "minim": [5, 116, 154, 187, 188, 192, 194, 203, 204, 220, 226, 229, 239, 240, 254, 258, 280, 283, 292], "round": [5, 183, 188, 189, 194, 201, 281, 283, 286, 289], "scale_c": 5, "shift": [5, 24, 66, 262, 291], "notic": [5, 29, 185, 188, 237, 241, 264, 287], "can": [5, 7, 10, 11, 14, 28, 29, 31, 42, 43, 53, 56, 69, 80, 82, 84, 107, 109, 111, 133, 135, 137, 138, 148, 150, 169, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 219, 221, 222, 223, 225, 226, 227, 228, 230, 232, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 262, 264, 266, 267, 268, 269, 271, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295], "chang": [5, 7, 109, 111, 157, 180, 189, 197, 203, 222, 228, 231, 237, 240, 244, 254, 255, 258, 261, 267, 280, 290, 291, 292], "first": [5, 7, 12, 54, 80, 126, 133, 155, 166, 180, 184, 185, 188, 194, 198, 199, 201, 202, 203, 204, 223, 225, 236, 241, 243, 246, 255, 256, 259, 262, 264, 265, 266, 282, 283, 285, 286, 288, 289, 290, 292, 294], "an": [5, 7, 14, 28, 32, 37, 47, 52, 56, 69, 76, 77, 81, 82, 90, 91, 113, 129, 130, 134, 135, 138, 150, 169, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 220, 222, 223, 224, 225, 230, 238, 239, 240, 241, 243, 244, 248, 249, 252, 261, 264, 265, 266, 269, 272, 278, 280, 281, 283, 286, 288, 289, 290, 291, 292], "empir": 5, "solut": [5, 186, 188, 191, 194, 201, 202, 203, 231, 246, 250, 255, 281, 286, 287, 289, 292, 293], "make": [5, 52, 107, 109, 111, 180, 186, 188, 191, 194, 196, 202, 203, 219, 221, 222, 232, 239, 240, 249, 254, 258, 261, 263, 280, 283, 284, 285, 286, 288, 289, 292], "thi": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 31, 37, 38, 42, 43, 53, 54, 55, 56, 57, 58, 59, 61, 69, 77, 80, 81, 82, 84, 93, 94, 96, 97, 98, 99, 104, 107, 109, 111, 112, 113, 116, 119, 130, 133, 134, 135, 137, 138, 148, 150, 154, 159, 168, 169, 179, 180, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 203, 204, 220, 221, 222, 223, 226, 227, 228, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 244, 246, 247, 249, 250, 252, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 274, 275, 276, 280, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293], "don": [5, 7, 186, 187, 198, 267, 280, 292], "t": [5, 7, 28, 31, 69, 82, 135, 185, 186, 187, 192, 198, 202, 221, 225, 226, 228, 240, 241, 262, 267, 280, 283, 286, 292, 294], "min": [5, 7, 180, 184, 188, 192, 194, 225, 243, 264, 266, 280, 283, 286, 289, 291, 292], "max": [5, 7, 28, 69, 81, 82, 116, 134, 135, 154, 180, 184, 188, 192, 194, 201, 225, 236, 240, 243, 264, 266, 280, 283, 286, 289, 291, 292], "valu": [5, 6, 7, 10, 11, 12, 15, 16, 24, 28, 29, 42, 43, 54, 57, 58, 66, 69, 80, 84, 108, 116, 119, 126, 133, 137, 138, 150, 154, 159, 166, 168, 169, 170, 172, 180, 183, 184, 185, 186, 188, 191, 192, 194, 198, 203, 204, 220, 223, 225, 232, 239, 240, 241, 243, 247, 264, 266, 272, 278, 280, 282, 283, 286, 287, 289, 291, 292, 294], "us": [6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 27, 28, 29, 30, 35, 42, 43, 52, 53, 54, 55, 56, 57, 58, 61, 68, 69, 73, 74, 75, 77, 78, 80, 84, 85, 86, 91, 98, 99, 102, 104, 107, 109, 110, 111, 112, 113, 116, 119, 122, 125, 126, 130, 131, 133, 137, 148, 150, 154, 157, 159, 162, 166, 168, 169, 170, 171, 172, 173, 175, 180, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203, 219, 220, 221, 223, 225, 226, 227, 228, 230, 232, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 248, 249, 252, 254, 256, 258, 259, 261, 263, 264, 265, 266, 267, 274, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295], "evalu": [6, 10, 11, 12, 29, 42, 43, 54, 70, 77, 80, 81, 82, 84, 86, 130, 133, 134, 135, 137, 138, 148, 150, 169, 172, 189, 191, 192, 193, 194, 199, 202, 203, 221, 223, 226, 227, 234, 235, 238, 239, 240, 241, 244, 250, 252, 255, 261, 278, 280, 283, 288, 289, 290, 292, 294], "perform": [6, 7, 12, 24, 29, 54, 66, 75, 99, 104, 112, 119, 137, 148, 150, 155, 159, 183, 185, 187, 188, 190, 192, 193, 194, 197, 198, 199, 202, 203, 219, 223, 224, 225, 227, 229, 230, 235, 236, 239, 240, 241, 242, 244, 246, 250, 252, 255, 261, 267, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 292, 294, 295], "set_env_var": [6, 29], "env_var": [6, 29], "overwrite_exist": [6, 29], "fals": [6, 7, 12, 14, 24, 28, 29, 30, 31, 37, 44, 46, 50, 51, 53, 54, 56, 66, 69, 80, 84, 133, 137, 148, 150, 172, 175, 179, 180, 186, 188, 190, 192, 193, 202, 203, 222, 223, 232, 239, 240, 254, 258, 264, 272, 275, 276, 282, 283, 286, 289, 290, 291, 292, 294], "set": [6, 7, 10, 11, 12, 14, 17, 28, 29, 34, 35, 42, 43, 44, 54, 56, 59, 69, 80, 86, 99, 104, 108, 113, 133, 137, 138, 146, 150, 169, 177, 180, 185, 186, 188, 189, 190, 191, 193, 194, 196, 199, 201, 203, 219, 222, 223, 226, 228, 230, 232, 234, 235, 236, 239, 240, 241, 244, 246, 248, 262, 263, 264, 265, 266, 267, 271, 274, 280, 282, 283, 286, 288, 289, 292, 294], "specifi": [6, 7, 10, 11, 28, 29, 42, 43, 69, 75, 80, 84, 86, 87, 90, 99, 104, 112, 113, 133, 137, 138, 150, 169, 179, 180, 194, 203, 204, 228, 232, 239, 240, 249, 263, 269, 273, 274, 275, 276, 278, 280, 282, 286, 291, 292, 294], "environ": [6, 29, 189, 196, 201, 219, 254, 258, 261, 269, 272, 274, 275, 276, 292], "variabl": [6, 7, 14, 29, 56, 116, 154, 168, 236, 280, 292], "new": [6, 14, 28, 29, 44, 56, 69, 108, 148, 185, 186, 187, 188, 194, 197, 203, 228, 240, 241, 255, 261, 262, 263, 264, 270, 271, 274, 275, 280, 281, 283, 286, 287, 288, 291, 293, 294], "env": [6, 29, 231, 274, 275, 276], "two": [6, 14, 19, 29, 56, 61, 80, 107, 111, 113, 120, 133, 160, 180, 184, 185, 187, 188, 191, 193, 194, 197, 198, 199, 221, 222, 223, 226, 228, 230, 232, 240, 241, 243, 268, 269, 271, 280, 283, 285, 286, 288, 289, 292, 294], "case": [6, 7, 27, 28, 29, 53, 68, 69, 75, 99, 104, 112, 148, 188, 192, 194, 204, 221, 222, 226, 227, 228, 232, 234, 239, 245, 249, 261, 262, 263, 266, 272, 275, 276, 278, 280, 281, 283, 286, 287, 289, 291, 293, 294, 295], "exist": [6, 29, 146, 180, 185, 189, 230, 239, 248, 292], "alreadi": [6, 14, 27, 29, 56, 68, 185, 189, 202, 223, 235, 256, 259, 263, 272, 292], "param": [6, 29, 35, 44, 84, 116, 137, 154, 180, 202, 242, 292], "true": [6, 7, 12, 14, 15, 27, 28, 29, 52, 54, 56, 57, 68, 69, 74, 78, 84, 102, 125, 131, 137, 148, 150, 165, 172, 175, 179, 180, 183, 186, 187, 188, 189, 190, 192, 193, 194, 201, 203, 222, 223, 225, 228, 232, 239, 240, 244, 247, 248, 263, 264, 265, 266, 272, 274, 282, 283, 284, 286, 289, 290, 291, 292, 294], "set_all_env_var": [6, 29], "configur": [6, 7, 10, 11, 14, 17, 29, 34, 42, 43, 56, 59, 70, 74, 75, 86, 87, 88, 90, 99, 104, 108, 112, 113, 119, 137, 138, 148, 150, 159, 168, 169, 171, 172, 178, 179, 193, 198, 199, 202, 203, 223, 225, 240, 248, 262, 269, 274, 275, 276, 278, 280, 283, 286, 287, 289, 291, 292, 295], "neural": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 99, 104, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 157, 158, 164, 177, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 202, 203, 204, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 241, 242, 243, 245, 246, 249, 251, 252, 254, 256, 258, 259, 260, 272, 278, 279, 281, 283, 286, 287, 289, 290, 291, 292, 294, 295], "compressor": [6, 7, 24, 25, 28, 29, 32, 35, 38, 66, 67, 69, 71, 76, 83, 84, 86, 107, 110, 112, 113, 118, 124, 129, 136, 137, 138, 142, 149, 150, 158, 164, 177, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 199, 202, 203, 204, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 241, 242, 243, 244, 245, 249, 251, 252, 254, 256, 258, 259, 260, 263, 264, 265, 266, 268, 269, 276, 278, 279, 280, 281, 283, 286, 287, 289, 290, 291, 292, 293, 294, 295], "physic": [6, 29, 196, 219, 269], "core": [6, 7, 29, 197, 219, 237, 254, 258, 269, 295], "get_architectur": [6, 29], "get": [6, 7, 28, 29, 35, 37, 47, 69, 74, 107, 109, 111, 119, 126, 128, 137, 146, 150, 159, 166, 168, 172, 175, 177, 180, 186, 189, 194, 203, 220, 231, 235, 236, 238, 240, 247, 264, 266, 274, 275, 281, 286, 289, 292, 293, 296], "architectur": [6, 29, 87, 90, 185, 188, 194, 201, 219, 226, 240, 268, 280, 281, 286, 293], "system": [6, 29, 180, 184, 219, 243, 247, 280, 295], "get_threads_per_cor": [6, 29], "thread": [6, 7, 29, 222, 271], "get_thread": [6, 29], "list": [6, 7, 10, 11, 12, 24, 28, 29, 42, 43, 47, 54, 66, 69, 73, 74, 77, 78, 80, 81, 82, 84, 91, 99, 104, 107, 110, 125, 130, 131, 133, 134, 135, 137, 138, 146, 150, 165, 169, 170, 180, 186, 191, 192, 198, 201, 202, 223, 230, 232, 236, 238, 240, 244, 249, 251, 254, 255, 258, 266, 269, 271, 272, 278, 280, 282, 283, 285, 289, 290, 292], "get_physical_id": [6, 29], "socket": [6, 29, 180, 269, 271, 295], "get_core_id": [6, 29], "id": [6, 27, 29, 68, 77, 79, 80, 81, 82, 130, 132, 133, 134, 135, 201, 239, 269, 270, 274, 275, 276, 288, 292], "get_bounded_thread": [6, 29], "core_id": [6, 29], "bind": [6, 29], "instanc": [6, 7, 10, 11, 29, 42, 43, 81, 82, 84, 87, 90, 93, 94, 96, 97, 98, 116, 128, 134, 135, 137, 138, 150, 154, 168, 169, 177, 180, 188, 196, 197, 198, 202, 219, 240, 246, 252, 286, 292, 294, 295], "run_inst": 6, "b_dataload": [6, 7, 219, 240], "none": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 28, 29, 30, 31, 38, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 69, 70, 73, 74, 75, 80, 84, 85, 86, 87, 90, 99, 104, 108, 112, 114, 116, 119, 120, 122, 126, 133, 137, 138, 148, 150, 151, 152, 154, 155, 159, 160, 162, 166, 169, 170, 172, 175, 177, 179, 180, 184, 188, 189, 192, 201, 202, 203, 222, 223, 239, 243, 264, 283, 286, 290, 291, 292], "b_func": [6, 219], "run": [6, 7, 10, 11, 27, 29, 42, 43, 53, 68, 108, 109, 116, 138, 150, 154, 169, 188, 189, 192, 194, 201, 202, 219, 228, 231, 232, 240, 244, 246, 248, 249, 250, 252, 254, 255, 256, 258, 259, 261, 269, 270, 271, 272, 274, 275, 276, 281, 283, 286, 287, 288, 290, 292, 294], "object": [6, 7, 10, 11, 12, 13, 14, 28, 29, 31, 42, 43, 44, 54, 55, 56, 69, 70, 75, 80, 88, 90, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 112, 116, 129, 133, 137, 138, 146, 147, 150, 154, 168, 169, 172, 179, 180, 187, 192, 198, 199, 203, 209, 219, 221, 222, 223, 231, 239, 240, 242, 279, 280, 282, 283, 291, 292, 293, 295], "benchmarkconfig": [6, 7, 219, 225, 240], "contain": [6, 7, 10, 11, 12, 13, 14, 42, 43, 54, 55, 56, 70, 74, 75, 80, 81, 82, 86, 99, 102, 104, 107, 108, 109, 110, 111, 112, 133, 134, 135, 138, 150, 169, 172, 179, 188, 192, 201, 220, 223, 226, 235, 239, 262, 269, 274, 275, 276, 280, 286, 290, 292, 293], "accuraci": [6, 7, 10, 11, 42, 43, 70, 75, 84, 99, 104, 112, 137, 138, 148, 150, 155, 169, 177, 184, 186, 187, 188, 192, 193, 198, 201, 203, 204, 220, 222, 223, 225, 227, 228, 229, 230, 239, 240, 243, 252, 261, 263, 270, 271, 274, 275, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 293, 294, 295], "goal": [6, 70, 75, 99, 104, 112, 138, 150, 193, 194, 203, 222, 279, 283, 292], "tune": [6, 7, 10, 11, 12, 14, 42, 43, 54, 56, 75, 112, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 138, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 180, 185, 186, 187, 188, 189, 193, 202, 203, 220, 221, 222, 223, 225, 228, 235, 237, 240, 241, 261, 265, 268, 270, 271, 278, 280, 281, 285, 287, 288, 290, 294], "prefer": [6, 75, 112, 150, 188, 194, 280, 286], "calibr": [6, 7, 10, 11, 42, 43, 75, 112, 150, 174, 187, 188, 189, 192, 194, 202, 204, 223, 234, 235, 280, 283, 286, 292, 293, 294], "space": [6, 7, 10, 11, 42, 43, 75, 82, 87, 90, 91, 92, 112, 116, 119, 126, 135, 138, 150, 154, 159, 166, 189, 193, 194, 196, 197, 199, 202, 203, 204, 221, 280, 283, 289, 294], "etc": [6, 27, 68, 70, 75, 82, 99, 104, 112, 135, 138, 150, 179, 201, 226, 235, 263, 267, 280, 288, 292], "dataload": [6, 10, 11, 12, 23, 32, 42, 43, 54, 65, 70, 99, 104, 113, 150, 169, 172, 192, 198, 201, 202, 203, 225, 226, 227, 228, 233, 234, 240, 241, 263, 264, 279, 280, 283, 284, 285, 286, 289, 290, 291, 293, 294], "framework": [6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 30, 31, 35, 40, 41, 45, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 67, 69, 75, 84, 85, 112, 120, 126, 137, 138, 139, 140, 142, 160, 166, 172, 185, 187, 192, 193, 194, 201, 202, 204, 220, 221, 225, 228, 229, 233, 234, 235, 236, 239, 240, 241, 263, 264, 280, 281, 283, 287, 290, 291, 292, 293, 294, 295], "custom": [6, 7, 113, 137, 148, 179, 189, 193, 194, 219, 226, 227, 244, 267, 268, 269, 273, 275, 276, 280, 281, 286, 288], "If": [6, 7, 10, 11, 14, 28, 42, 43, 56, 69, 108, 138, 150, 169, 189, 192, 194, 197, 198, 203, 219, 221, 222, 223, 228, 236, 237, 239, 240, 247, 255, 256, 259, 261, 267, 272, 278, 280, 283, 286, 288, 289, 290, 291, 292], "user": [6, 7, 10, 11, 14, 17, 21, 28, 29, 35, 42, 43, 56, 59, 63, 69, 75, 99, 104, 110, 112, 113, 137, 138, 148, 150, 155, 168, 169, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 209, 219, 221, 222, 226, 227, 230, 232, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 255, 261, 268, 269, 270, 271, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 287, 289, 290, 291, 292, 296], "pass": [6, 137, 150, 179, 180, 188, 194, 197, 198, 202, 219, 223, 226, 227, 228, 234, 239, 240, 262, 269, 280, 282, 283, 285, 289, 294], "need": [6, 7, 10, 11, 14, 21, 28, 31, 33, 34, 42, 43, 44, 52, 53, 56, 63, 69, 74, 113, 119, 137, 138, 148, 150, 159, 169, 179, 180, 188, 191, 193, 194, 198, 202, 221, 222, 223, 225, 226, 228, 235, 240, 244, 246, 247, 250, 254, 255, 256, 258, 259, 261, 262, 263, 264, 265, 266, 268, 272, 274, 280, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294], "generate_prefix": 6, "core_list": 6, "gener": [6, 10, 11, 14, 15, 16, 17, 28, 42, 43, 44, 53, 56, 57, 58, 59, 69, 77, 85, 116, 130, 138, 150, 154, 169, 184, 185, 186, 188, 189, 190, 194, 197, 198, 202, 204, 222, 226, 239, 240, 241, 243, 244, 249, 254, 256, 258, 259, 261, 263, 264, 278, 280, 281, 283, 285, 286, 289, 290, 291, 292], "command": [6, 29, 169, 225, 228, 244, 246, 249, 254, 258, 262, 263, 265, 266, 267, 269], "prefix": [6, 244, 249, 290], "numactl": [6, 231, 247, 255], "index": [6, 7, 14, 47, 52, 56, 91, 180, 194, 223, 239, 262, 266, 286, 289], "bound": [6, 28, 69, 80, 116, 133, 154, 239, 291], "specif": [6, 7, 12, 13, 14, 15, 19, 21, 35, 54, 55, 56, 57, 61, 63, 93, 94, 96, 97, 98, 137, 150, 177, 184, 185, 187, 188, 192, 196, 199, 202, 203, 220, 221, 222, 225, 226, 232, 234, 238, 239, 240, 241, 242, 243, 244, 248, 249, 251, 255, 261, 263, 269, 278, 280, 282, 286, 292, 294], "call_on": 6, "cmd": 6, "log_fil": 6, "execut": [6, 7, 109, 113, 115, 150, 151, 153, 169, 172, 179, 180, 187, 188, 194, 225, 226, 227, 240, 241, 246, 247, 254, 255, 261, 262, 263, 264, 268, 271, 279, 280, 283, 286, 288, 292, 295], "one": [6, 28, 38, 69, 77, 80, 84, 86, 107, 110, 111, 130, 133, 137, 185, 188, 189, 192, 193, 194, 199, 202, 220, 226, 227, 228, 232, 235, 236, 239, 240, 241, 244, 245, 249, 250, 252, 254, 255, 258, 261, 262, 263, 266, 267, 268, 269, 271, 278, 279, 280, 282, 283, 284, 286, 287, 289, 291, 292], "dump": [6, 74, 180, 192, 194, 197, 266, 283, 287, 290], "log": [6, 176, 198, 252, 274, 275, 276, 288, 290, 292], "window": [6, 219, 236, 261, 262], "config_inst": 6, "raw_cmd": 6, "multi": [6, 80, 133, 137, 150, 199, 222, 223, 235, 240, 278, 280, 283, 292], "trigger": [6, 109], "sub": [6, 29, 199, 221, 292], "process": [6, 7, 10, 11, 12, 13, 14, 24, 28, 29, 42, 43, 54, 55, 56, 66, 69, 107, 109, 111, 115, 116, 138, 150, 151, 153, 154, 169, 179, 180, 183, 184, 187, 191, 192, 193, 194, 199, 202, 203, 204, 220, 222, 223, 226, 227, 228, 230, 240, 243, 245, 266, 268, 269, 271, 279, 280, 283, 284, 286, 289, 290, 291, 294], "raw": [6, 13, 17, 20, 55, 59, 62, 119, 159, 239, 265, 292], "summary_benchmark": 6, "summari": [6, 169, 225, 256, 259, 290, 295], "profil": [6, 7, 129], "benchmark_with_raw_cmd": 6, "string": [6, 7, 14, 30, 35, 56, 70, 75, 77, 80, 86, 87, 88, 90, 91, 99, 104, 107, 108, 109, 110, 111, 112, 130, 133, 142, 146, 172, 177, 180, 192, 239, 291], "exampl": [6, 7, 12, 13, 14, 24, 28, 54, 55, 56, 66, 69, 80, 81, 82, 84, 110, 133, 134, 135, 137, 138, 148, 150, 168, 169, 179, 180, 186, 192, 193, 196, 201, 203, 204, 209, 234, 235, 244, 247, 248, 249, 252, 269, 272, 285, 287, 291, 292, 293, 296], "accord": [6, 7, 12, 13, 14, 28, 54, 55, 56, 69, 119, 157, 159, 172, 192, 193, 194, 199, 202, 223, 228, 264, 269, 274, 275, 276, 280, 285, 289, 291, 292], "config": [6, 10, 11, 12, 42, 43, 54, 93, 94, 96, 97, 98, 99, 104, 107, 108, 109, 110, 111, 126, 127, 129, 138, 166, 167, 168, 169, 172, 179, 180, 183, 185, 187, 188, 189, 190, 199, 201, 203, 204, 209, 219, 221, 222, 225, 226, 227, 228, 230, 233, 235, 239, 240, 241, 242, 263, 264, 279, 280, 282, 283, 285, 286, 288, 290, 292], "from": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 30, 31, 34, 42, 43, 44, 47, 51, 54, 55, 56, 57, 58, 59, 61, 66, 70, 72, 73, 74, 77, 80, 81, 82, 86, 91, 107, 108, 109, 111, 126, 128, 130, 133, 134, 135, 138, 146, 148, 150, 166, 168, 169, 172, 175, 179, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 204, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 235, 238, 239, 241, 242, 243, 244, 248, 249, 250, 252, 262, 264, 266, 267, 271, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "import": [6, 7, 86, 138, 148, 150, 169, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 204, 219, 222, 223, 225, 226, 227, 228, 230, 233, 239, 240, 241, 242, 243, 244, 248, 250, 263, 264, 272, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293], "fit_with_raw_cmd": 6, "iter": [6, 7, 10, 11, 14, 15, 31, 42, 43, 47, 52, 56, 57, 109, 111, 138, 150, 169, 172, 188, 192, 193, 198, 199, 202, 219, 222, 223, 240, 280, 282, 283, 289, 290, 292, 294], "100": [6, 7, 14, 56, 192, 194, 219, 223, 228, 234, 236, 240, 266, 282, 283, 291, 292, 294, 295], "cores_per_inst": [6, 7, 219, 240, 282], "4": [6, 7, 21, 24, 28, 63, 66, 69, 77, 78, 80, 130, 131, 133, 168, 183, 184, 186, 187, 188, 194, 196, 201, 202, 204, 219, 228, 229, 232, 235, 236, 239, 240, 243, 249, 269, 271, 275, 280, 283, 286, 289, 291, 292, 295], "num_of_inst": [6, 7, 219, 240, 282], "7": [6, 7, 148, 186, 188, 191, 194, 204, 219, 231, 232, 240, 280, 283, 287, 289, 292, 295], "test": [6, 7, 28, 69, 197, 201, 225, 236, 269, 274, 295], "py": [6, 7, 78, 80, 81, 82, 109, 131, 133, 134, 135, 190, 198, 202, 221, 225, 228, 236, 240, 246, 248, 249, 250, 256, 259, 263, 265, 266, 268, 269, 271, 272, 274, 275, 276, 283, 287, 290], "fit": [6, 7, 116, 138, 150, 154, 169, 198, 201, 219, 222, 223, 225, 228, 233, 234, 239, 240, 241, 242, 263, 264, 280, 283, 284, 285, 286], "pb": [6, 7, 138, 146, 150, 192, 219, 228, 233, 240, 242, 263, 266, 274, 290, 295], "eval_dataload": [6, 7, 10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 219, 234, 239, 240, 263, 283, 284, 292], "x": [7, 28, 53, 69, 116, 154, 193, 194, 220, 221, 225, 228, 241, 242, 269, 270, 274, 275, 277, 283, 284, 289, 290, 291, 293], "dotdict": [7, 148, 180], "access": [7, 175, 180, 256, 259, 263], "yaml": [7, 10, 11, 12, 14, 29, 42, 43, 54, 56, 70, 75, 86, 87, 88, 90, 99, 104, 112, 113, 179, 180, 202, 204, 234, 239, 240, 278, 282, 290, 291], "attribut": [7, 180, 202, 222, 232, 234, 240, 282, 294], "instead": [7, 53, 180, 187, 247, 249, 252, 267, 280, 286], "dictionari": [7, 27, 68, 80, 87, 90, 92, 133, 180], "notat": [7, 180], "option": [7, 10, 11, 12, 28, 42, 43, 54, 69, 73, 74, 80, 86, 107, 113, 126, 133, 137, 138, 150, 166, 168, 169, 173, 175, 180, 188, 189, 192, 194, 203, 204, 221, 222, 223, 232, 236, 240, 255, 269, 272, 274, 275, 276, 280, 283, 286, 288, 289, 291, 292, 294], "random_se": [7, 116, 154, 240, 294], "1978": 7, "workspac": [7, 179, 180, 242, 269, 274, 275, 276], "default_workspac": 7, "resume_from": [7, 180], "tensorboard": [7, 172, 180, 202, 240, 264], "global": [7, 93, 94, 96, 97, 98, 107, 168, 180, 188, 190, 198, 240, 280, 282, 292], "creat": [7, 12, 14, 31, 44, 54, 56, 80, 90, 91, 126, 133, 166, 168, 172, 194, 196, 199, 202, 223, 242, 254, 256, 258, 259, 262, 274, 275, 276, 280, 283, 288, 290, 292, 293], "you": [7, 12, 52, 54, 109, 137, 150, 197, 198, 203, 221, 222, 223, 225, 228, 236, 237, 239, 241, 244, 246, 247, 249, 254, 258, 261, 262, 263, 264, 265, 266, 267, 269, 280, 283, 286, 287, 288, 289, 290, 293], "want": [7, 12, 52, 54, 109, 155, 169, 198, 202, 222, 223, 228, 240, 249, 261, 262, 269, 278, 283, 286, 288, 290, 292], "should": [7, 10, 11, 12, 14, 28, 33, 42, 43, 52, 54, 56, 69, 74, 78, 131, 137, 138, 150, 169, 180, 187, 189, 190, 191, 192, 194, 198, 199, 202, 203, 204, 223, 226, 228, 239, 240, 247, 256, 259, 261, 263, 264, 278, 280, 283, 286, 291, 292, 294], "function": [7, 10, 11, 13, 42, 43, 55, 87, 90, 99, 104, 173, 185, 187, 188, 189, 192, 194, 197, 198, 199, 202, 203, 204, 219, 222, 226, 227, 230, 234, 235, 236, 238, 239, 240, 241, 252, 262, 268, 269, 280, 283, 286, 287, 288, 289, 290, 292, 293], "util": [7, 37, 78, 108, 118, 129, 131, 158, 192, 203, 204, 205, 220, 221, 228, 240, 244, 264, 280, 283, 292, 293], "set_random_se": [7, 180], "seed": [7, 92, 180, 188, 240, 294], "int": [7, 12, 13, 24, 28, 53, 54, 55, 66, 69, 73, 74, 78, 80, 84, 91, 131, 133, 137, 168, 175, 180, 188, 192, 201, 221, 222, 223, 239, 240, 272, 282, 286, 291], "set_workspac": [7, 180], "set_resume_from": [7, 180], "set_tensorboard": [7, 180], "bool": [7, 12, 14, 24, 28, 54, 56, 66, 69, 74, 78, 84, 107, 125, 131, 137, 165, 175, 179, 180, 188, 189, 222, 223, 239, 272, 282, 291], "random": [7, 24, 28, 66, 69, 92, 116, 118, 154, 158, 180, 188, 199, 240, 280, 282, 291, 294], "default": [7, 10, 11, 12, 13, 14, 24, 28, 42, 43, 46, 54, 55, 56, 66, 69, 73, 74, 77, 86, 108, 128, 130, 137, 146, 168, 172, 175, 180, 184, 185, 186, 188, 189, 192, 193, 198, 202, 221, 222, 223, 232, 235, 236, 239, 240, 241, 243, 249, 252, 254, 258, 266, 269, 274, 275, 276, 278, 280, 282, 283, 285, 286, 288, 289, 291, 292, 294], "directori": [7, 13, 14, 55, 56, 146, 175, 177, 179, 180, 223, 228, 231, 254, 256, 258, 259, 265, 267, 290], "where": [7, 80, 84, 133, 137, 168, 180, 194, 204, 220, 225, 226, 254, 258, 262, 289, 290], "intermedi": [7, 30, 194, 198, 235, 283], "histori": [7, 179, 180, 261, 265, 292], "ar": [7, 12, 28, 54, 69, 80, 84, 91, 107, 108, 109, 113, 115, 116, 133, 137, 151, 153, 154, 168, 172, 179, 180, 183, 184, 185, 187, 188, 189, 191, 192, 194, 196, 197, 198, 199, 202, 203, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 249, 252, 255, 261, 263, 264, 266, 267, 268, 269, 272, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "store": [7, 14, 56, 102, 109, 234], "nc_workspac": [7, 264, 265], "format": [7, 12, 13, 14, 54, 55, 56, 74, 80, 86, 126, 133, 166, 175, 184, 185, 187, 192, 194, 201, 203, 204, 221, 223, 228, 230, 239, 240, 241, 242, 243, 244, 266, 269, 281, 283, 286, 287], "datetim": 7, "now": [7, 28, 69, 198, 199, 204, 223, 228, 252, 282, 291, 292], "strftime": 7, "y": [7, 28, 69, 116, 154, 194, 221, 225, 231, 247, 289, 291], "m": [7, 107, 197, 226, 236, 244, 246, 249, 252, 256, 259, 269, 280, 295], "d_": 7, "h": [7, 28, 69, 228, 269, 270, 274, 275, 276, 291], "resum": [7, 10, 11, 42, 43, 114, 120, 122, 151, 152, 154, 155, 159, 160, 162], "wa": [7, 184, 186, 202, 240, 243, 266, 267, 270, 281, 292], "automat": [7, 14, 17, 24, 56, 59, 66, 75, 85, 112, 189, 192, 198, 201, 219, 223, 235, 240, 241, 244, 246, 249, 250, 252, 254, 255, 256, 258, 259, 261, 268, 271, 279, 280, 283, 289, 291, 292], "save": [7, 14, 56, 73, 74, 113, 146, 150, 169, 170, 175, 180, 189, 190, 194, 198, 202, 234, 240, 241, 242, 245, 249, 254, 258, 264, 269, 274, 275, 276, 279, 283, 284, 286, 289], "dure": [7, 107, 111, 148, 180, 186, 187, 189, 192, 194, 203, 225, 240, 242, 268, 278, 279, 280, 283, 289, 290, 294], "last": [7, 185, 186, 188, 222, 241, 244, 246, 251, 255, 283, 286, 289], "flag": [7, 78, 131, 225], "indic": [7, 12, 47, 52, 54, 70, 80, 91, 133, 192, 198, 222, 231, 264, 269, 290], "whether": [7, 12, 24, 28, 52, 54, 66, 69, 78, 80, 84, 107, 131, 133, 137, 172, 175, 179, 180, 188, 202, 223, 239, 283, 286, 289, 291], "each": [7, 14, 17, 24, 28, 52, 56, 59, 66, 69, 78, 80, 81, 82, 119, 131, 133, 134, 135, 159, 180, 188, 191, 194, 197, 202, 203, 204, 221, 223, 225, 226, 227, 232, 240, 246, 252, 255, 261, 269, 271, 278, 280, 284, 286, 288, 290, 291, 292, 293], "visual": [7, 201, 252, 261, 288, 290, 292, 293], "displai": [7, 125, 126, 165, 166, 180, 261, 264], "2022": [7, 188, 194, 237, 280, 286, 289], "workspace_path": 7, "output": [7, 10, 11, 33, 37, 42, 43, 73, 74, 77, 107, 130, 137, 138, 146, 150, 169, 175, 176, 180, 188, 189, 190, 194, 198, 202, 203, 226, 227, 228, 230, 232, 234, 239, 240, 242, 252, 261, 262, 264, 269, 270, 274, 275, 276, 279, 280, 282, 283, 286, 287, 289, 290, 291, 292, 294], "devic": [7, 175, 185, 188, 189, 194, 201, 203, 222, 226, 240, 241, 244, 247, 252, 261, 280, 282, 284, 286], "cpu": [7, 175, 180, 185, 187, 192, 201, 203, 219, 220, 235, 240, 241, 244, 246, 252, 261, 269, 281, 282, 283, 284, 285, 286, 290], "warmup": [7, 219, 240, 282], "model_nam": [7, 201], "inter_num_of_thread": [7, 240, 282], "intra_num_of_thread": [7, 240, 282], "diagnosi": [7, 240, 264, 265, 266, 281, 287, 293], "ni_workload_nam": 7, "benchmark": [7, 31, 76, 113, 129, 148, 180, 201, 209, 242, 244, 248, 252, 255, 261, 264, 292, 293, 294, 295], "A": [7, 14, 28, 31, 33, 34, 56, 69, 70, 77, 80, 81, 82, 84, 87, 90, 91, 92, 99, 102, 104, 107, 108, 109, 110, 111, 116, 130, 133, 134, 135, 137, 138, 142, 146, 154, 169, 180, 186, 188, 189, 194, 197, 201, 203, 221, 222, 223, 229, 232, 239, 240, 242, 254, 255, 258, 261, 269, 280, 281, 283, 286, 289, 291, 292, 294], "empti": [7, 189, 247, 284], "includ": [7, 12, 14, 21, 28, 30, 54, 56, 63, 69, 75, 85, 107, 112, 180, 188, 189, 192, 193, 196, 202, 203, 204, 222, 223, 225, 236, 237, 238, 239, 240, 244, 247, 250, 255, 267, 271, 274, 275, 276, 280, 283, 285, 286, 290, 292], "itex": [7, 73, 192, 241, 283, 289], "ipex": [7, 179, 185, 186, 235, 238, 240, 241, 246, 250, 251, 289], "onnxrt_trt_ep": [7, 241, 283], "onnxrt_cuda_ep": [7, 241, 283], "onnxrt_dnnl_ep": [7, 241, 283], "onnxrt_dml_ep": [7, 283], "number": [7, 13, 24, 28, 52, 55, 66, 69, 81, 82, 84, 107, 116, 134, 135, 137, 154, 172, 180, 183, 188, 193, 194, 219, 222, 223, 228, 239, 269, 271, 280, 283, 286, 288, 289, 291, 292], "inter": 7, "oper": [7, 24, 66, 107, 183, 185, 186, 187, 188, 190, 191, 194, 198, 219, 222, 225, 230, 261, 267, 280, 283, 286, 289, 291, 292], "intra": 7, "accuracycriterion": [7, 240, 292], "higher_is_bett": [7, 137, 150, 292, 294], "criterion": [7, 32, 35, 226, 227, 240, 280, 283, 289, 292, 294], "rel": [7, 148, 240, 264, 282, 292, 294, 295], "tolerable_loss": [7, 193, 240, 292], "01": [7, 188, 238, 240, 282, 286, 292, 294, 295], "metric": [7, 10, 11, 32, 42, 43, 70, 75, 76, 91, 99, 104, 112, 113, 129, 138, 150, 169, 172, 191, 199, 202, 203, 223, 225, 228, 240, 241, 263, 283, 288, 289, 290, 292, 293, 294, 295], "higher": [7, 10, 11, 42, 43, 91, 138, 150, 169, 194, 198, 225, 226, 230, 239, 264, 280, 283, 286, 288], "better": [7, 10, 11, 42, 43, 91, 138, 150, 169, 185, 188, 194, 221, 227, 239, 241, 280, 281, 283, 286, 288, 289, 292], "loss": [7, 30, 75, 84, 99, 104, 112, 137, 169, 185, 187, 188, 192, 194, 220, 225, 226, 227, 228, 229, 238, 239, 240, 241, 252, 264, 266, 279, 280, 281, 283, 286, 289, 292, 294], "absolut": [7, 84, 137, 184, 194, 239, 240, 243, 280, 283, 292], "float": [7, 12, 24, 54, 66, 78, 80, 81, 82, 109, 131, 133, 134, 135, 165, 177, 180, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 221, 223, 239, 243, 282, 283, 289, 291], "how": [7, 28, 69, 70, 107, 187, 188, 189, 190, 191, 192, 194, 197, 198, 200, 202, 222, 223, 226, 227, 228, 234, 239, 240, 255, 256, 259, 260, 261, 263, 274, 275, 276, 280, 281, 283, 289, 291, 292, 293, 294], "much": [7, 28, 69, 70, 194, 226, 255, 289, 291], "accept": [7, 193, 196, 219, 221, 222, 263, 286], "accuracy_criterion": [7, 148, 240, 265, 278, 282, 292, 294], "avail": [7, 142, 185, 188, 189, 201, 205, 207, 211, 214, 217, 221, 229, 231, 233, 235, 254, 258, 263, 268, 269, 270, 274, 275, 276, 280, 292, 295], "tuningcriterion": [7, 240, 278, 288, 292], "strategi": [7, 8, 14, 40, 56, 76, 129, 193, 194, 201, 202, 203, 204, 209, 220, 221, 222, 228, 235, 240, 249, 261, 266, 281, 282, 283, 285, 286, 287, 293, 294], "basic": [7, 27, 68, 87, 107, 118, 122, 125, 158, 162, 165, 169, 184, 235, 236, 240, 243, 263, 282, 288], "strategy_kwarg": [7, 288, 292], "timeout": [7, 240, 282, 292, 294], "max_trial": [7, 185, 193, 240, 292], "doc": [7, 107, 125, 126, 137, 150, 165, 166, 180, 239, 240, 256, 259, 267], "tuning_strategi": 7, "md": [7, 107, 137, 150], "constraint": [7, 75, 112, 240, 280, 288, 292, 294], "guarante": [7, 240], "models": [7, 148, 240, 278, 282], "footprint": [7, 75, 99, 104, 112, 148, 227, 240, 278, 280, 282, 284], "second": [7, 12, 54, 155, 180, 188, 194, 225, 240, 254, 258, 262, 274, 275, 286, 289, 292, 294], "which": [7, 12, 13, 14, 24, 29, 54, 55, 56, 66, 77, 82, 91, 93, 94, 96, 97, 98, 102, 107, 108, 109, 111, 116, 130, 135, 137, 142, 148, 150, 154, 180, 185, 187, 188, 189, 190, 192, 193, 194, 196, 198, 199, 201, 202, 203, 204, 220, 222, 223, 225, 226, 228, 231, 232, 235, 239, 240, 241, 242, 245, 249, 252, 255, 261, 262, 263, 266, 269, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294], "mean": [7, 24, 28, 66, 69, 82, 84, 107, 119, 135, 137, 159, 188, 190, 194, 198, 203, 204, 222, 225, 228, 232, 239, 240, 247, 266, 280, 283, 284, 286, 289, 291, 292, 294, 295], "earli": [7, 194, 240, 283, 292, 294], "stop": [7, 193, 240, 292, 293, 294], "time": [7, 28, 69, 84, 116, 137, 148, 154, 180, 187, 188, 189, 191, 193, 194, 203, 222, 225, 228, 231, 240, 249, 251, 254, 258, 261, 262, 267, 270, 274, 275, 278, 280, 281, 283, 286, 288, 289, 290, 291, 292], "combin": [7, 10, 11, 24, 38, 42, 43, 66, 138, 150, 169, 180, 188, 191, 198, 202, 235, 240, 279, 281, 283, 285, 286, 291, 292], "field": [7, 14, 56, 80, 133, 184, 198, 202, 204, 228, 240, 243, 288, 292, 294], "decid": [7, 78, 109, 131, 192, 202, 203, 240, 283, 287, 292], "when": [7, 12, 13, 21, 28, 54, 55, 63, 69, 78, 108, 109, 131, 150, 169, 187, 188, 192, 193, 194, 196, 199, 203, 221, 222, 223, 240, 252, 254, 255, 258, 262, 263, 266, 267, 268, 270, 274, 280, 283, 286, 289, 291, 292], "exit": [7, 115, 151, 153, 193, 240, 269, 274, 275, 276, 294], "tuning_criterion": [7, 240, 278, 288, 292], "posttrainingquantconfig": [7, 150, 198, 201, 204, 222, 225, 230, 233, 239, 240, 242, 263, 264, 265, 266, 283, 284, 285, 286, 288, 289, 292], "domain": [7, 280, 292], "auto": [7, 114, 152, 158, 180, 186, 188, 189, 198, 220, 244, 247, 249, 251, 252, 280, 283, 286], "recip": [7, 75, 112, 184, 193, 201, 240, 243, 284, 286, 289, 292], "quant_format": [7, 74, 230, 264], "approach": [7, 87, 88, 90, 187, 194, 198, 199, 201, 220, 223, 226, 235, 240, 249, 261, 264, 272, 274, 275, 276, 280, 281, 282, 284, 286, 292, 294], "calibration_sampling_s": [7, 240, 266], "op_type_dict": [7, 187, 201, 204, 282, 283, 286, 292], "op_name_dict": [7, 187, 225, 240, 264, 266, 283, 292], "reduce_rang": [7, 204, 282], "example_input": [7, 74, 179, 183, 186, 187, 188, 189, 230], "excluded_precis": [7, 285], "quant_level": [7, 264, 286, 289, 292], "gpu": [7, 188, 192, 201, 219, 235, 240, 241, 246, 252, 261, 282, 283, 284], "npu": [7, 283], "xpu": [7, 192, 252, 283], "cv": [7, 189, 192, 280], "object_detect": [7, 80, 133], "nlp": [7, 110, 189, 192, 194, 249, 265, 280, 283], "recommendation_system": 7, "adaptor": [7, 128, 168, 172, 201, 204, 235, 284, 285, 287, 289, 290, 293], "explicitli": [7, 187, 234, 280], "overrid": [7, 180, 221], "detect": [7, 80, 84, 133, 137, 142, 189, 197, 198, 244, 251, 252, 280, 292], "quantiztaion": 7, "below": [7, 113, 137, 150, 184, 186, 188, 189, 192, 193, 194, 197, 198, 201, 202, 203, 204, 222, 225, 226, 228, 234, 239, 243, 244, 246, 254, 255, 258, 261, 264, 269, 278, 279, 280, 282, 283, 286, 288, 289, 290, 292, 293], "do": [7, 12, 53, 54, 70, 74, 77, 80, 110, 130, 133, 179, 196, 203, 221, 223, 228, 232, 235, 239, 240, 256, 259, 280, 285, 287, 289, 292], "quant": [7, 126, 166, 188, 194, 198, 221, 238, 240, 283], "smooth_quant_arg": [7, 283, 289], "layer_wise_qu": [7, 284], "fast": [7, 188, 192, 280, 281, 286], "bia": [7, 286, 290], "gemm_to_matmul": [7, 283], "convert": [7, 12, 24, 27, 28, 54, 66, 68, 69, 73, 80, 86, 108, 126, 133, 166, 183, 184, 185, 186, 187, 188, 189, 191, 194, 198, 203, 240, 241, 246, 283, 285, 286, 289, 291, 292], "gemm": 7, "matmul": [7, 107, 232, 264, 286, 292], "add": [7, 12, 14, 35, 54, 56, 108, 126, 166, 180, 186, 197, 198, 201, 204, 222, 223, 228, 230, 232, 239, 240, 256, 259, 263, 264, 271, 274, 275, 288, 289, 290, 292, 293], "valid": [7, 14, 56, 80, 108, 109, 133, 146, 199, 201, 202, 223, 225, 226, 229, 232, 235, 237, 240, 252, 266, 280, 283, 286, 287], "graph_optimization_level": [7, 282, 283], "disable_al": [7, 282], "enable_bas": 7, "enable_extend": 7, "enable_al": 7, "first_conv_or_matmul_quant": [7, 283], "last_conv_or_matmul_quant": [7, 283], "pre_post_process_quant": [7, 283], "preprocess": [7, 12, 28, 54, 69, 168, 172, 228, 291], "postprocess": [7, 25, 28, 32, 69, 137, 150, 172, 202, 240, 290, 291], "add_qdq_pair_to_weight": [7, 283], "qdq": [7, 72, 73, 74, 191, 202, 225, 230, 235, 251, 252, 283, 287, 289], "pair": [7, 185, 187, 203, 222, 240, 241, 287], "optypes_to_exclude_output_qu": [7, 283], "optyp": [7, 72, 203], "dedicated_qdq_pair": [7, 283], "dedic": 7, "qoper": [7, 230, 264], "requir": [7, 113, 146, 185, 187, 188, 192, 194, 198, 202, 203, 219, 220, 222, 225, 227, 228, 232, 240, 241, 242, 245, 255, 261, 263, 268, 269, 272, 275, 276, 280, 283, 286, 287, 288, 289, 290, 292, 294], "onnxruntim": [7, 14, 21, 50, 56, 63, 85, 202, 220, 222, 235, 236, 241, 264, 282], "tensorflow": [7, 12, 13, 14, 17, 19, 21, 28, 35, 53, 54, 55, 56, 59, 61, 63, 69, 73, 74, 75, 78, 80, 84, 85, 86, 112, 120, 131, 133, 137, 138, 146, 150, 160, 180, 191, 197, 199, 201, 202, 203, 220, 221, 222, 225, 226, 227, 229, 232, 233, 235, 236, 240, 241, 242, 243, 251, 252, 263, 266, 280, 281, 282, 288, 289, 292, 294], "method": [7, 12, 14, 21, 28, 31, 47, 52, 53, 54, 56, 63, 69, 90, 91, 92, 126, 166, 168, 172, 173, 175, 176, 188, 189, 190, 192, 194, 198, 199, 201, 220, 221, 222, 223, 225, 226, 227, 239, 240, 279, 280, 283, 285, 286, 289, 291, 292], "dynam": [7, 44, 74, 126, 166, 188, 189, 202, 222, 226, 230, 235, 240, 244, 249, 250, 251, 252, 255, 261, 281, 292, 295], "weight_onli": [7, 179, 184, 201, 221, 243, 284, 286], "ptq": [7, 150, 186, 187, 191, 192, 198, 225, 228, 235, 240, 266, 283, 289, 290, 292], "both": [7, 187, 188, 190, 194, 196, 199, 202, 227, 240, 245, 264, 266, 268, 280, 282, 283, 286, 289, 292], "tri": [7, 221, 292], "meet": [7, 113, 115, 151, 153, 188, 190, 192, 193, 194, 198, 203, 278, 281, 282, 283, 286, 290, 292], "criteria": [7, 75, 99, 104, 107, 109, 112, 193, 198, 261, 289], "bayesian": [7, 92, 118, 158, 199, 280, 282], "mse": [7, 84, 118, 137, 150, 158, 180, 188, 194, 225, 239, 266, 282, 286, 287], "mse_v2": [7, 118, 158], "hawq_v2": [7, 158], "exhaust": [7, 92, 118, 158, 282], "els": [7, 52, 148, 177, 249, 286, 290], "sampl": [7, 12, 13, 14, 24, 28, 47, 52, 54, 55, 56, 66, 69, 84, 91, 116, 137, 154, 188, 192, 193, 194, 199, 222, 223, 229, 235, 262, 283, 286, 289, 291, 292, 294, 295], "advanc": [7, 184, 185, 188, 190, 192, 194, 196, 201, 203, 209, 238, 243, 280, 283, 286, 294], "reduc": [7, 185, 186, 187, 188, 191, 192, 194, 202, 220, 227, 240, 241, 261, 262, 280, 281, 283, 284, 285, 286, 289, 292, 294], "dtype": [7, 15, 16, 24, 28, 57, 58, 66, 69, 175, 185, 188, 194, 201, 203, 204, 223, 225, 230, 232, 244, 266, 282, 283, 286, 289, 290, 291, 294], "activ": [7, 37, 126, 166, 168, 183, 186, 187, 188, 191, 192, 194, 202, 203, 204, 220, 225, 227, 232, 240, 262, 263, 266, 274, 275, 276, 282, 283, 286, 289, 290, 294], "layer1": [7, 240, 280, 283], "conv1": [7, 190, 283, 294], "bit": [7, 168, 183, 184, 185, 188, 194, 201, 204, 220, 227, 241, 243, 281, 283, 286, 289], "precis": [7, 10, 11, 42, 43, 75, 82, 84, 85, 112, 114, 126, 135, 137, 138, 148, 152, 155, 166, 180, 184, 187, 188, 192, 193, 194, 201, 202, 203, 209, 219, 220, 227, 228, 232, 235, 243, 244, 250, 251, 252, 281, 282, 283, 286, 289, 292, 293], "exclud": [7, 202, 220, 285], "enabl": [7, 109, 185, 187, 188, 203, 204, 228, 236, 241, 244, 246, 249, 250, 252, 263, 265, 266, 268, 271, 280, 281, 289, 292], "mix": [7, 114, 126, 138, 152, 166, 201, 202, 209, 235, 244, 250, 251, 252, 293], "bf16": [7, 126, 166, 202, 203, 232, 240, 246, 251, 255, 261, 285, 292, 295], "disabl": [7, 196, 261, 266, 285, 286, 289], "conserv": [7, 158], "In": [7, 38, 53, 80, 107, 109, 133, 148, 188, 189, 192, 194, 196, 198, 199, 201, 202, 203, 222, 223, 225, 226, 227, 228, 239, 240, 251, 254, 255, 258, 264, 265, 266, 267, 274, 275, 276, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292, 293], "docstr": 7, "workload": [7, 177, 180, 263, 281], "insight": [7, 177, 201, 225, 281, 287, 292, 293], "quantizationawaretrainingconfig": [7, 169, 198, 227, 230, 240, 283, 285, 292], "awar": [7, 38, 86, 107, 157, 169, 188, 189, 193, 202, 203, 204, 220, 227, 228, 230, 235, 261, 271, 279, 281, 286, 292], "qat": [7, 86, 146, 227, 228, 235, 240, 283], "copi": [7, 108, 180, 222, 267], "deepcopi": 7, "model_origin": [7, 150, 285], "qat_op_name_dict": 7, "compression_manag": [7, 169, 198, 226, 227, 240, 279, 280, 283], "prepare_compress": [7, 169, 198, 226, 227, 240, 279, 280, 283], "weightpruningconfig": [7, 240, 279, 280], "pruning_config": [7, 240, 280], "target_spars": [7, 240, 280, 282, 294], "9": [7, 186, 198, 236, 240, 280, 282, 289, 292, 294, 295], "pruning_typ": [7, 240, 280], "snip_momentum": [7, 240, 280], "pattern": [7, 14, 56, 97, 98, 100, 105, 109, 126, 166, 183, 187, 191, 202, 221, 223, 232, 235, 240, 262, 279, 282, 289, 292, 295], "4x1": [7, 103, 240, 280, 295], "op_nam": [7, 127, 167, 180, 181, 187, 203, 240, 280, 290], "excluded_op_nam": [7, 240, 280], "start_step": [7, 109, 240, 280, 282], "end_step": [7, 109, 240, 280, 282], "pruning_scop": [7, 240, 280], "pruning_frequ": [7, 240, 280], "min_sparsity_ratio_per_op": [7, 240, 280], "max_sparsity_ratio_per_op": [7, 240, 280], "98": [7, 240, 280, 282, 295], "sparsity_decay_typ": [7, 240, 280], "exp": [7, 184, 240, 243, 280], "pruning_op_typ": [7, 240, 280], "low_memory_usag": 7, "kwarg": [7, 14, 26, 28, 33, 36, 56, 69, 125, 127, 137, 138, 139, 141, 143, 145, 146, 147, 150, 165, 167, 169, 175, 176, 179, 180, 222], "prune": [7, 38, 39, 76, 93, 94, 96, 97, 98, 102, 104, 105, 107, 108, 109, 111, 113, 180, 201, 228, 229, 232, 233, 235, 279, 281, 293, 294], "defin": [7, 10, 11, 42, 43, 87, 88, 90, 91, 92, 99, 104, 107, 108, 109, 111, 138, 150, 169, 179, 190, 192, 193, 194, 196, 199, 202, 203, 222, 223, 226, 227, 232, 235, 239, 240, 262, 279, 280, 283, 286, 288, 289, 290, 292, 294], "singl": [7, 12, 28, 47, 54, 69, 80, 109, 111, 133, 137, 150, 198, 223, 225, 236, 267, 280, 284, 289], "sequenc": [7, 12, 27, 28, 54, 68, 69, 78, 82, 107, 131, 135, 188, 194, 202, 223, 232, 280, 286, 291], "local": [7, 107, 180, 188, 190, 254, 258, 263, 270, 271, 280, 288], "link": [7, 12, 54, 137, 150, 189, 220, 223, 230, 254, 258, 261, 286, 295], "out": [7, 12, 13, 14, 54, 55, 56, 75, 107, 112, 188, 190, 192, 194, 197, 198, 201, 223, 244, 249, 254, 255, 256, 258, 259, 261, 267, 280, 282, 283, 286], "By": [7, 77, 130, 188, 203, 204, 239, 242, 254, 255, 258, 280, 281, 286, 292], "correspond": [7, 12, 54, 77, 80, 84, 130, 133, 137, 172, 180, 189, 194, 202, 232, 240, 280, 282, 283, 288, 292], "sparsiti": [7, 109, 111, 180, 188, 201, 223, 235, 240, 293, 295], "reach": [7, 111, 197, 222, 263, 280, 292], "after": [7, 12, 24, 28, 31, 54, 66, 69, 109, 155, 175, 180, 183, 187, 188, 191, 194, 199, 201, 203, 223, 225, 226, 227, 230, 235, 239, 240, 254, 255, 258, 262, 266, 278, 279, 280, 283, 285, 286, 288, 289, 290, 291, 292], "90": [7, 238, 284, 294, 295], "magnitud": [7, 84, 95, 137, 235, 280], "snip": [7, 109, 235, 280, 295], "magnitude_progress": 7, "snip_progress": 7, "snip_momentum_progress": 7, "pattern_lock": [7, 95], "most": [7, 84, 137, 185, 188, 192, 194, 225, 240, 241, 280, 283, 286, 289, 292, 295], "feasibl": 7, "under": [7, 14, 56, 175, 179, 193, 197, 199, 201, 223, 237, 239, 240, 244, 249, 250, 261, 269, 279, 280, 281, 284, 286, 290, 292], "situat": [7, 228, 280], "structur": [7, 109, 127, 167, 180, 189, 194, 235, 260, 262, 265, 274, 280, 281, 283, 290, 293, 295], "unstructur": [7, 103, 235, 280, 295], "nxm": [7, 103, 107, 280], "e": [7, 188, 194, 196, 197, 201, 226, 229, 233, 244, 249, 250, 254, 258, 280, 286, 289, 292], "g": [7, 188, 194, 197, 226, 229, 233, 244, 249, 280, 286, 287, 289, 292], "8x1": 7, "channelx1": [7, 280], "1xchannel": [7, 280], "n": [7, 13, 28, 55, 69, 78, 107, 131, 188, 194, 204, 221, 223, 225, 226, 269, 280, 283, 289, 291], "directli": [7, 53, 80, 84, 108, 133, 137, 190, 201, 239, 240, 248, 280, 282, 283, 290], "our": [7, 184, 199, 201, 230, 240, 243, 262, 263, 266, 288, 293], "itrex": [7, 186, 289], "some": [7, 12, 54, 108, 188, 194, 203, 204, 221, 223, 225, 230, 236, 239, 240, 263, 264, 265, 266, 269, 278, 280, 283, 285, 286, 289, 290, 292, 293], "step": [7, 107, 109, 111, 169, 183, 186, 187, 188, 194, 203, 204, 225, 226, 227, 228, 240, 256, 259, 261, 274, 275, 276, 279, 280, 282, 285, 286, 288, 289, 290, 292], "start": [7, 28, 69, 80, 133, 155, 236, 266, 281, 291, 292, 293, 296], "integ": [7, 70, 80, 84, 91, 107, 109, 133, 137, 186, 188, 191, 194, 202, 204, 220, 283, 286, 289, 292], "end": [7, 12, 27, 28, 54, 68, 69, 109, 115, 151, 153, 202, 203, 204, 226, 227, 232, 236, 240, 255, 271, 278, 280, 286, 290, 291, 292], "determin": [7, 174, 183, 187, 193, 196, 198, 220, 280, 283], "score": [7, 77, 78, 80, 81, 82, 84, 109, 130, 131, 133, 134, 135, 137, 157, 172, 198, 239, 264, 278, 280, 288, 292], "gather": [7, 107], "togeth": [7, 28, 69, 226, 236, 248, 281, 290, 291], "sort": [7, 119, 159, 188, 225, 264, 286, 292], "sinc": [7, 75, 77, 99, 104, 112, 130, 188, 194, 226, 230, 236, 239, 255, 261, 266, 279, 286, 287], "lead": [7, 185, 188, 192, 194, 221, 226, 240, 241, 266, 280, 286, 289], "less": [7, 180, 219, 226, 240, 268, 280], "frequenc": [7, 70, 109, 240, 280, 294], "minimum": [7, 184, 204, 220, 225, 240, 243, 252, 280, 289, 292], "restrict": [7, 280, 288], "everi": [7, 107, 109, 188, 202, 222, 249, 254, 258, 284, 286, 292], "maximum": [7, 12, 28, 54, 69, 78, 109, 116, 131, 146, 154, 188, 194, 204, 220, 223, 225, 240, 280, 283, 289, 291], "schedul": [7, 76, 105, 109, 188, 240, 268, 269, 271, 279], "increas": [7, 184, 188, 224, 235, 243, 244, 261, 266, 286, 292], "cube": [7, 280], "current": [7, 86, 93, 94, 96, 97, 98, 107, 109, 116, 120, 154, 160, 180, 187, 189, 193, 198, 199, 202, 204, 220, 221, 228, 232, 240, 244, 248, 261, 269, 278, 280, 283, 286, 289, 292], "local_config": [7, 93, 94, 96, 97, 98], "6": [7, 184, 186, 188, 191, 194, 232, 243, 283, 289, 292, 295], "queri": [7, 194, 203, 204, 271, 283], "kei": [7, 91, 108, 146, 170, 172, 180, 188, 194, 201, 203, 263, 264, 270, 281, 286, 290, 292], "self": [7, 148, 189, 202, 203, 222, 223, 235, 239, 263, 288, 290, 292], "attent": [7, 12, 54, 196, 226, 280], "dens": [7, 111, 264, 280, 295], "8": [7, 27, 68, 183, 184, 186, 188, 194, 198, 203, 220, 221, 232, 236, 243, 268, 269, 280, 281, 286, 289, 292, 295], "update_config": 7, "10": [7, 14, 56, 116, 154, 193, 201, 219, 223, 230, 236, 238, 240, 263, 264, 280, 282, 291, 292, 295], "hpoconfig": 7, "search_spac": [7, 87, 90, 91, 92], "searcher": [7, 92], "xgb": 7, "loss_typ": [7, 30, 240, 294], "reg": 7, "min_train_sampl": 7, "42": [7, 92, 188, 238, 295], "hyperparamet": [7, 125, 194, 288, 289, 292], "optim": [7, 32, 38, 75, 92, 112, 116, 154, 169, 170, 177, 180, 187, 188, 191, 192, 193, 194, 199, 201, 219, 221, 225, 226, 227, 228, 232, 233, 235, 236, 238, 240, 242, 244, 246, 248, 249, 252, 255, 263, 266, 267, 268, 270, 272, 281, 282, 283, 285, 286, 288, 289, 290, 292, 294], "search": [7, 10, 11, 42, 43, 75, 77, 87, 90, 91, 92, 112, 116, 130, 154, 180, 188, 189, 191, 201, 221, 235, 239, 244, 245, 255, 280, 281, 286, 289, 290, 292, 293], "algorithm": [7, 77, 84, 92, 129, 130, 137, 172, 174, 188, 189, 192, 193, 194, 199, 201, 202, 203, 204, 221, 226, 227, 232, 235, 238, 250, 255, 280, 283, 290, 294], "grid": [7, 92, 199, 280], "bo": 7, "knowledgedistillationlossconfig": [7, 226, 227, 240, 279], "temperatur": [7, 30, 240, 294], "ce": [7, 30, 240, 294], "loss_weight": [7, 30, 240, 294], "knowledg": [7, 30, 70, 191, 227, 229, 233, 235, 240, 242, 294], "distil": [7, 30, 37, 38, 76, 201, 229, 233, 235, 279, 293, 294], "entropi": [7, 220, 292], "probabl": [7, 174, 188, 194, 286], "length": [7, 12, 28, 54, 69, 80, 133, 188, 194, 223, 239, 281, 283, 286, 291], "item": [7, 27, 68, 108, 126, 166, 194, 220, 228, 280, 289, 292], "student": [7, 12, 37, 54, 70, 223, 226, 227, 295], "groundtruth": [7, 80, 133], "label": [7, 10, 11, 12, 14, 15, 16, 17, 20, 24, 28, 33, 42, 43, 54, 56, 57, 58, 59, 62, 66, 69, 77, 79, 84, 130, 132, 137, 138, 150, 169, 192, 198, 222, 223, 225, 239, 240, 283, 291], "teacher": [7, 70, 226, 227, 240, 295], "kl": [7, 170, 174, 203, 204, 220, 232, 240, 292, 294], "sum": [7, 84, 137, 225, 226], "multipli": [7, 183, 184, 188, 243, 286], "distillationconfig": [7, 169, 226, 227, 240, 279], "criterion_conf": 7, "d_conf": [7, 227, 240, 279], "teacher_model": [7, 30, 226, 227, 240], "intermediatelayersknowledgedistillationlossconfig": [7, 226], "layer_map": [7, 30, 226], "add_origin_loss": [7, 30], "map": [7, 28, 69, 72, 74, 75, 79, 81, 82, 84, 99, 104, 109, 112, 132, 134, 135, 137, 188, 194, 221, 223, 228, 239, 240, 254, 258, 266, 280, 283, 286], "relationship": [7, 263], "student_layer_nam": 7, "student_layer_output_process": 7, "teacher_layer_nam": 7, "teacher_layer_output_process": 7, "bert": [7, 12, 28, 50, 53, 54, 69, 201, 223, 226, 239, 241, 249, 272, 275, 276, 280, 291, 295], "desir": [7, 24, 28, 66, 69, 186, 203, 204, 280, 289, 291], "its": [7, 14, 28, 50, 56, 69, 72, 78, 79, 109, 116, 131, 132, 154, 188, 193, 194, 196, 223, 226, 237, 239, 241, 252, 254, 258, 261, 262, 280, 286, 288, 291, 292], "either": [7, 80, 133, 187, 192, 193, 194, 245, 249, 269, 279, 282, 283], "take": [7, 10, 11, 28, 33, 42, 43, 47, 69, 107, 116, 137, 138, 150, 154, 169, 188, 192, 196, 198, 199, 222, 225, 226, 232, 240, 261, 280, 283, 285, 286, 291, 292, 294], "serv": [7, 146, 194, 269, 274, 275, 276], "tupl": [7, 10, 11, 24, 28, 42, 43, 66, 69, 74, 125, 138, 150, 165, 169, 179, 189, 192, 203, 221, 223, 239, 240, 283, 291], "numer": [7, 84, 137, 184, 185, 188, 192, 204, 241, 243, 281, 283, 286], "abbrevi": 7, "same": [7, 12, 28, 54, 69, 80, 133, 180, 184, 188, 193, 194, 202, 204, 219, 222, 223, 226, 228, 232, 240, 243, 245, 249, 254, 258, 280, 282, 283, 286, 289, 290, 291, 292], "further": [7, 185, 194, 196, 201, 241, 242, 244, 246, 255, 261, 283], "layer_nam": [7, 280], "student_model": [7, 30, 240], "l1": 7, "len": [7, 28, 69, 223, 228, 291], "origin": [7, 12, 28, 29, 54, 69, 93, 94, 96, 97, 98, 108, 109, 128, 155, 168, 175, 180, 188, 189, 190, 192, 194, 197, 223, 249, 280, 283, 286, 291, 292, 294], "selfknowledgedistillationlossconfig": [7, 226, 240], "like": [7, 10, 11, 14, 42, 43, 44, 56, 75, 84, 109, 112, 113, 137, 146, 150, 169, 188, 192, 194, 197, 198, 199, 202, 203, 225, 226, 227, 235, 249, 264, 266, 279, 280, 283, 286, 287, 289, 292], "student1_layer_name1": 7, "teacher_layer_name1": 7, "student2_layer_name1": 7, "student1_layer_name2": 7, "teacher_layer_name2": 7, "student2_layer_name2": 7, "calcul": [7, 15, 16, 57, 58, 81, 82, 107, 109, 119, 134, 135, 159, 170, 180, 186, 188, 192, 194, 220, 223, 239, 240, 252, 264, 278, 280, 283, 286, 288, 289, 292, 294], "soft": 7, "l2": [7, 280], "hard": [7, 222, 225], "resblock": 7, "featur": [7, 12, 13, 24, 28, 54, 55, 66, 69, 185, 190, 194, 197, 201, 219, 222, 224, 226, 240, 241, 242, 244, 248, 249, 252, 261, 263, 267, 280, 281, 287, 291], "deepst": 7, "fc": [7, 280], "3": [7, 14, 28, 56, 69, 80, 133, 180, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 201, 220, 221, 222, 223, 226, 228, 230, 232, 233, 236, 239, 240, 241, 243, 244, 248, 252, 254, 258, 263, 268, 269, 271, 272, 274, 278, 280, 282, 283, 286, 287, 288, 289, 291, 292, 295], "02": [7, 295], "nn": [7, 74, 138, 150, 175, 179, 188, 189, 194, 198, 226, 240, 242, 286, 289, 290], "crossentropyloss": [7, 226, 240], "sgd": [7, 35, 226, 240, 282, 294], "lr": [7, 188, 226, 228, 240], "0001": [7, 226, 240, 282], "learning_r": [7, 240, 282, 294], "callabl": [7, 82, 135, 169, 189, 192, 221, 222], "altern": [7, 150], "distil_loss": [7, 240], "mixedprecisionconfig": [7, 138, 240, 241], "mixedprecis": [7, 85, 240], "target": [7, 108, 111, 116, 154, 175, 189, 223, 228, 240, 280, 290, 291, 292, 294], "convers": [7, 86, 185, 186, 194, 197, 202, 203, 240, 241, 283, 285, 289], "fp16": [7, 126, 166, 194, 283], "fallback": [7, 119, 120, 157, 159, 160, 185, 186, 187, 230, 241, 264, 285, 292], "won": [7, 283, 286], "work": [7, 75, 112, 189, 194, 200, 203, 221, 222, 226, 256, 259, 267, 285, 286, 287, 289, 290], "tensor": [7, 28, 69, 72, 74, 107, 109, 119, 146, 159, 175, 179, 180, 183, 184, 189, 192, 198, 204, 221, 222, 223, 225, 243, 280, 283, 287, 290, 291, 292], "trace": [7, 74, 157, 187, 189, 198, 251, 292], "mix_precis": [7, 129, 240, 241], "converted_model": [7, 138, 240, 241], "exportconfig": 7, "opset_vers": [7, 73, 74, 230], "14": [7, 73, 74, 201, 230, 236, 276, 295], "input_nam": [7, 73, 74, 146, 230], "output_nam": [7, 73, 74, 146, 230], "dynamic_ax": [7, 74, 230], "common": [7, 26, 76, 86, 90, 91, 92, 172, 186, 190, 191, 192, 196, 221, 223, 227, 228, 230, 234, 236, 240, 283, 289], "export": [7, 76, 80, 133, 183, 187, 201, 233, 247, 262, 264, 290, 293], "select": [7, 12, 54, 175, 188, 194, 198, 199, 220, 235, 236, 261, 280, 283, 286, 290, 292], "opset": [7, 73, 74, 230], "version": [7, 73, 74, 129, 186, 196, 198, 202, 221, 232, 236, 237, 240, 254, 256, 258, 259, 281, 289, 292, 293], "qlinear": [7, 14, 21, 56, 63, 84, 137, 202, 251], "ax": [7, 74], "inform": [7, 10, 11, 31, 33, 34, 42, 43, 107, 109, 110, 111, 113, 137, 180, 184, 186, 188, 192, 196, 197, 200, 201, 202, 203, 204, 205, 207, 211, 214, 217, 220, 221, 226, 232, 240, 242, 243, 256, 259, 262, 263, 266, 267, 269, 270, 274, 275, 280, 285, 286, 287, 289, 290, 294, 295, 296], "onnxqlinear2qdqconfig": 7, "onnxqlinear2qdq": 7, "torch2onnxconfig": [7, 230], "torch2onnx": [7, 71], "qdq_op_fp32_bia": 7, "qdq_op_int32_bia": 7, "qdq_op_fp32_bias_qdq": 7, "resnet50": [7, 190, 201, 225, 228, 230, 241, 244, 248, 280, 283, 288, 295], "int8_onnx_config": [7, 230], "randn": [7, 230], "224": [7, 24, 66, 201, 223, 228, 230, 233, 240, 244, 263, 291, 294], "batch_siz": [7, 12, 13, 31, 44, 46, 50, 51, 52, 53, 54, 55, 74, 199, 222, 223, 228, 230, 234, 240, 244, 283], "q_model": [7, 86, 150, 183, 186, 187, 191, 193, 198, 222, 223, 225, 228, 230, 233, 234, 239, 240, 242, 263, 264, 283, 284, 285, 286], "tf2onnxconfig": [7, 230], "tf2onnx": [7, 71], "axi": 7, "addit": [7, 169, 188, 203, 204, 226, 255, 263, 269, 286, 287, 292], "keyword": 7, "argument": [7, 189, 192, 193, 199, 225, 265, 266, 269, 272, 274, 275, 276, 286], "output_graph": 7, "nasconfig": [7, 88, 90, 199], "search_algorithm": [7, 89, 199], "dyna": [7, 89, 199, 235, 282], "na": [7, 76, 142, 235, 238, 295], "mxnet": [7, 14, 17, 21, 28, 49, 53, 56, 59, 63, 69, 75, 84, 112, 137, 138, 143, 150, 197, 201, 202, 203, 220, 222, 229, 232, 235, 240, 241, 242, 282, 292, 294], "kera": [7, 14, 21, 35, 56, 63, 141, 146, 190, 192, 203, 222, 228, 242, 251, 252], "pytorch": [7, 12, 14, 17, 21, 28, 30, 35, 37, 53, 54, 56, 59, 63, 69, 74, 75, 84, 85, 105, 107, 110, 112, 120, 137, 138, 147, 150, 160, 173, 180, 184, 189, 197, 198, 199, 201, 202, 203, 204, 220, 221, 222, 226, 227, 229, 232, 235, 236, 238, 240, 241, 242, 243, 244, 246, 249, 250, 251, 252, 261, 263, 272, 275, 276, 280, 281, 282, 286, 287, 289, 292, 294], "built": [8, 9, 12, 13, 18, 20, 22, 23, 24, 25, 28, 33, 35, 40, 41, 45, 48, 50, 54, 55, 60, 62, 64, 65, 66, 67, 69, 113, 137, 140, 148, 150, 169, 193, 199, 202, 223, 228, 240, 254, 258, 278, 283, 288, 291, 292, 294], "multipl": [8, 9, 12, 13, 15, 16, 17, 18, 19, 23, 25, 28, 35, 40, 41, 45, 46, 48, 54, 55, 57, 58, 59, 60, 61, 65, 67, 69, 85, 138, 139, 140, 142, 148, 192, 219, 223, 230, 240, 268, 271, 279, 280, 288, 289, 292], "sigopt": [9, 41, 281], "tpe": [9, 41], "provid": [10, 11, 28, 42, 43, 69, 75, 80, 99, 104, 112, 113, 133, 138, 150, 169, 173, 175, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 199, 201, 202, 203, 204, 219, 222, 225, 227, 228, 229, 235, 236, 238, 239, 240, 241, 242, 244, 248, 252, 255, 261, 262, 263, 269, 270, 280, 282, 283, 286, 289, 290, 292, 293, 294, 295], "sigopttunestrategi": [10, 42], "q_dataload": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 234, 292], "q_func": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162, 202, 203, 240, 292], "eval_func": [10, 11, 42, 43, 113, 114, 116, 119, 120, 122, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 198, 222, 223, 225, 226, 227, 228, 240, 264, 283, 284, 285, 286, 292, 294], "eval_metr": [10, 11, 138, 150, 151, 152, 154, 155, 159, 160, 162, 169, 239, 263, 283], "q_hook": [10, 11, 42, 43, 114, 116, 119, 120, 122, 151, 152, 154, 155, 159, 160, 162], "hpo": [10, 42, 280], "low": [10, 11, 15, 16, 42, 43, 57, 58, 75, 85, 112, 138, 185, 188, 193, 194, 202, 203, 219, 220, 223, 228, 240, 241, 266, 281, 283, 286, 289, 292], "initi": [10, 11, 12, 30, 42, 43, 51, 54, 108, 109, 126, 150, 166, 169, 192, 194, 199, 204, 223, 239, 260, 280, 283, 289, 292], "loader": [10, 11, 42, 43, 138, 150, 169, 175, 222, 283], "mandatori": [10, 11, 42, 43, 150, 240, 294], "It": [10, 11, 37, 42, 43, 82, 84, 91, 107, 112, 119, 135, 137, 138, 150, 155, 159, 169, 184, 187, 188, 189, 190, 192, 193, 194, 202, 203, 204, 220, 225, 226, 240, 243, 247, 250, 255, 261, 262, 263, 264, 266, 267, 269, 280, 283, 286, 287, 288, 292, 294], "yield": [10, 11, 31, 42, 43, 52, 116, 138, 150, 154, 169, 194, 222, 283, 292], "dataset": [10, 11, 23, 31, 42, 43, 44, 46, 47, 50, 51, 52, 53, 65, 80, 81, 82, 84, 113, 133, 134, 135, 137, 138, 150, 169, 172, 186, 188, 190, 191, 192, 194, 199, 201, 202, 203, 222, 228, 233, 239, 240, 249, 263, 264, 274, 280, 283, 286, 287, 289, 292, 294, 295], "_": [10, 11, 42, 43, 150, 185, 186, 188, 189, 192, 194, 198, 199, 201, 202, 203, 220, 225, 226, 228, 230, 232, 240, 241, 242, 244, 250, 254, 256, 258, 259, 266, 269, 270, 278, 280, 283, 286, 287, 288, 289, 290, 292, 294], "depend": [10, 11, 29, 42, 43, 138, 150, 169, 197, 231, 232, 267, 282, 283, 292], "implement": [10, 11, 12, 14, 42, 43, 49, 52, 53, 54, 56, 77, 130, 138, 148, 150, 157, 169, 188, 204, 222, 223, 239, 240, 252, 262, 280, 283, 286, 287, 290, 292, 294], "well": [10, 11, 42, 43, 138, 150, 169, 184, 194, 199, 201, 221, 223, 243, 280, 283, 287, 289, 294], "taken": [10, 11, 42, 43, 138, 150, 169, 283], "reserv": [10, 11, 42, 43], "abl": [10, 11, 42, 43, 138, 150, 169, 192, 194, 252, 261, 283], "pre": [10, 11, 12, 42, 43, 54, 138, 150, 169, 187, 188, 193, 194, 221, 223, 226, 227, 240, 249, 266, 280, 281, 283, 286, 290, 292], "through": [10, 11, 42, 43, 137, 138, 150, 187, 188, 189, 194, 201, 219, 232, 234, 235, 239, 247, 268, 278, 279, 280, 282, 283, 286], "tuner": [10, 11, 42, 43, 75, 112, 138, 150, 169, 283], "encapsul": [10, 11, 42, 43, 138, 150, 169, 242], "scalar": [10, 11, 42, 43, 138, 150, 169, 239, 283, 292], "pseudo": [10, 11, 42, 43, 150, 169, 188, 286, 290], "code": [10, 11, 29, 42, 43, 86, 110, 113, 150, 169, 188, 190, 198, 201, 202, 203, 204, 223, 226, 227, 228, 234, 235, 237, 239, 244, 246, 248, 249, 250, 252, 255, 261, 265, 266, 268, 269, 270, 278, 279, 280, 281, 282, 283, 288, 289, 290, 291], "someth": [10, 11, 14, 42, 43, 56, 150, 169], "def": [10, 11, 42, 43, 150, 169, 185, 186, 189, 190, 192, 193, 194, 198, 202, 221, 222, 223, 226, 227, 228, 239, 240, 283, 289, 290, 292], "fefin": [11, 43], "tpetunestrategi": [11, 43], "pytorchbertdataset": [12, 54], "task": [12, 19, 54, 61, 84, 137, 186, 188, 194, 223, 226, 227, 230, 235, 239, 240, 264, 268, 271, 280, 284, 286, 289, 295], "model_typ": [12, 54, 180, 223], "transform": [12, 13, 14, 15, 16, 17, 19, 21, 23, 54, 55, 56, 57, 58, 59, 61, 63, 65, 186, 187, 188, 191, 194, 198, 199, 201, 220, 223, 226, 227, 228, 229, 233, 238, 240, 244, 249, 250, 251, 252, 264, 272, 275, 276, 280, 281, 285, 286, 289, 290, 292, 294], "filter": [12, 13, 14, 15, 16, 17, 19, 23, 54, 55, 56, 57, 58, 59, 61, 65, 180, 204, 223, 235, 280, 290], "construct": [12, 15, 16, 19, 26, 31, 33, 34, 36, 54, 57, 58, 61, 137, 142, 146, 168, 172, 193, 196, 203, 204, 223, 228, 280, 292], "tensordataset": [12, 54, 223], "full": [12, 13, 14, 54, 55, 56, 175, 180, 188, 201, 220, 223, 225, 231, 237, 262, 267, 280, 286, 287], "repo": [12, 54, 195, 197, 223, 229, 254, 256, 258, 259, 296], "http": [12, 14, 54, 56, 77, 78, 80, 81, 82, 107, 109, 110, 130, 131, 133, 134, 135, 137, 150, 188, 198, 223, 225, 233, 236, 237, 240, 250, 256, 259, 263, 265, 266, 267, 268, 269, 272, 274, 275, 276, 280, 287], "github": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 188, 197, 201, 223, 225, 229, 236, 237, 240, 250, 256, 259, 263, 265, 266, 267, 268, 269, 272, 275, 276, 287], "com": [12, 54, 77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 196, 221, 223, 225, 233, 236, 237, 240, 244, 250, 263, 265, 266, 268, 269, 272, 275, 276, 287, 288, 295], "huggingfac": [12, 54, 175, 184, 223, 229, 233, 243, 249, 250, 251, 252, 272, 273, 275, 276, 289, 295], "your": [12, 52, 54, 187, 197, 201, 221, 222, 223, 225, 228, 237, 240, 244, 247, 248, 249, 254, 255, 256, 258, 259, 261, 263, 267, 269, 274, 275, 276, 280, 281, 288, 290, 292, 293], "todo": [12, 15, 54, 57, 80, 126, 133, 166], "easi": [12, 54, 112, 187, 189, 192, 230, 240, 264, 268, 281, 283, 286, 288], "ad": [12, 54, 77, 116, 130, 154, 183, 185, 188, 203, 204, 225, 241, 244, 249, 252, 256, 259, 269, 280, 286, 290], "load": [12, 27, 28, 54, 68, 69, 138, 146, 150, 179, 180, 192, 203, 222, 254, 258, 262, 264, 282, 283, 284, 289], "arg": [12, 13, 14, 54, 55, 56, 107, 116, 154, 175, 176, 184, 188, 189, 223, 228, 240, 243, 250, 280, 283, 286, 289, 290, 291], "classifi": [12, 54, 84, 137, 223, 226], "squad": [12, 28, 54, 69, 81, 82, 84, 134, 135, 137, 223, 239, 280, 291, 295], "distilbert": [12, 54, 223, 241, 281, 295], "xlnet": [12, 54, 223], "xlm": [12, 54, 223, 295], "condit": [12, 13, 14, 28, 54, 55, 56, 69, 115, 151, 153, 193, 223, 237, 291, 292], "101": [12, 54, 84, 137, 194, 239, 270, 289, 295], "2043": [12, 54], "2001": [12, 54], "onnxrtbertdataset": [12, 54], "data_dir": [12, 54, 223], "model_name_or_path": [12, 54, 223, 240, 249, 250, 265, 272, 275, 276, 284], "max_seq_length": [12, 28, 54, 69, 223, 291], "128": [12, 15, 16, 28, 54, 57, 58, 69, 188, 193, 194, 223, 240, 283, 286, 291, 295], "do_lower_cas": [12, 27, 28, 54, 68, 69, 223, 291], "mrpc": [12, 54, 84, 137, 223, 239, 249, 272, 275, 276, 280, 292, 295], "dynamic_length": [12, 54, 223], "onnxrt": [12, 14, 21, 28, 54, 56, 63, 69, 84, 137, 178, 202, 225, 241, 263, 283, 295], "dir": [12, 54, 175, 179, 223, 231, 234], "path": [12, 13, 14, 28, 54, 55, 56, 69, 70, 73, 74, 75, 86, 87, 88, 90, 99, 104, 108, 110, 112, 113, 126, 138, 146, 150, 166, 175, 177, 180, 187, 188, 189, 198, 199, 202, 223, 225, 228, 234, 239, 240, 241, 242, 247, 250, 261, 264, 266, 269, 274, 275, 276, 279, 286, 291, 294], "shortcut": [12, 54, 223], "token": [12, 25, 28, 54, 67, 69, 77, 78, 130, 131, 175, 186, 188, 194, 201, 223, 239, 240, 263, 264, 286, 288, 289, 291, 292], "longer": [12, 28, 54, 69, 223, 291], "than": [12, 28, 54, 69, 180, 184, 188, 194, 199, 201, 219, 223, 234, 243, 266, 274, 278, 279, 280, 283, 286, 288, 291, 292], "truncat": [12, 28, 54, 69, 223, 291], "shorter": [12, 28, 54, 69, 223, 291], "pad": [12, 28, 54, 69, 223, 291], "lowercas": [12, 54, 223], "fine": [12, 54, 189, 221, 223, 247, 280, 281, 283], "choic": [12, 54, 188, 192, 194, 202, 223, 239, 267, 289], "qqp": [12, 54, 223, 239, 295], "qnli": [12, 54, 223, 239, 295], "rte": [12, 54, 223, 239, 295], "st": [12, 54, 223, 239], "b": [12, 54, 180, 188, 194, 197, 220, 223, 239, 280, 286, 289, 292], "cola": [12, 54, 223, 239, 295], "mnli": [12, 54, 223, 239, 295], "wnli": [12, 54, 223, 239], "mobilebert": [12, 54, 223, 226], "roberta": [12, 54, 223, 295], "fix": [12, 54, 109, 188, 222, 223, 248, 280, 283, 286, 292], "uncas": [12, 28, 54, 69, 223, 291, 295], "load_and_cache_exampl": [12, 54], "cach": [12, 54, 188, 194, 231, 283, 286], "helper": [12, 13, 14, 27, 54, 55, 56, 68, 72, 73, 74, 146, 178], "convert_examples_to_featur": [12, 28, 54, 69], "max_length": [12, 54], "label_list": [12, 54, 84, 137], "output_mod": [12, 54], "classif": [12, 28, 54, 69, 84, 110, 137, 226, 230, 239, 250, 264, 272, 275, 276, 280, 281], "pad_token": [12, 54], "pad_token_segment_id": [12, 54], "mask_padding_with_zero": [12, 54], "inputfeatur": [12, 28, 54, 69], "properti": [12, 54, 168, 237], "input_id": [12, 28, 54, 69, 240], "vocabulari": [12, 27, 28, 54, 68, 69, 291], "attention_mask": [12, 54, 240], "avoid": [12, 54, 198, 221, 290], "usual": [12, 54, 192, 194, 203, 225, 226, 266, 279, 280, 283, 284, 289], "NOT": [12, 54, 232], "token_type_id": [12, 54, 240], "segment": [12, 54, 78, 80, 131, 133, 197], "portion": [12, 54], "them": [12, 54, 188, 194, 198, 204, 222, 225, 230, 232, 234, 264, 267, 279, 280, 286, 292], "problem": [12, 54, 84, 137, 185, 239, 241, 262], "regress": [12, 54, 197, 225], "seq_length": [12, 54], "tensorflowbertdataset": [12, 54], "root": [12, 13, 14, 17, 54, 55, 56, 59, 84, 137, 223, 228, 239, 240, 294], "label_fil": [12, 28, 54, 69, 223, 291], "tfrecord": [12, 13, 14, 54, 55, 56, 223], "guid": [12, 54, 192, 198, 201, 221, 223, 226, 236, 244, 252, 261, 296], "parsedecodebert": [12, 54], "tensorflowmodelzoobertdataset": [12, 13, 54, 55], "pars": [12, 13, 24, 28, 54, 55, 66, 69, 203, 204, 291], "num_cor": [12, 13, 17, 54, 55, 59, 223], "28": [12, 13, 17, 54, 55, 59, 223, 295], "three": [12, 54, 115, 151, 153, 185, 189, 193, 194, 198, 202, 203, 220, 236, 241, 255, 269, 279, 283, 285, 288, 289, 290], "tf": [12, 13, 14, 28, 53, 54, 55, 56, 69, 144, 146, 190, 192, 221, 228, 236, 242, 281, 285, 291], "record": [12, 13, 14, 20, 30, 37, 54, 55, 56, 62, 180, 193, 223, 266, 286, 288, 290, 292], "resiz": [12, 13, 24, 28, 54, 55, 66, 69, 223, 291], "coco": [13, 20, 55, 62, 80, 84, 133, 137, 239, 280], "parsedecodecoco": [13, 55], "cocorecorddataset": [13, 55], "interleav": [13, 55, 223], "parallel": [13, 55, 223, 240, 268, 271, 292], "cocoraw": [13, 55, 223], "img_dir": [13, 55, 223], "val2017": [13, 55, 223], "anno_dir": [13, 55, 223], "annot": [13, 55, 80, 133, 203, 204, 223, 239, 280, 292], "instances_val2017": [13, 55, 223], "json": [13, 28, 55, 69, 179, 188, 223, 242, 262, 269, 270, 274, 275, 276, 286, 291], "arrang": [13, 14, 17, 55, 56, 59, 223, 280], "wai": [13, 14, 17, 55, 56, 59, 146, 188, 191, 194, 199, 204, 222, 223, 225, 239, 240, 244, 247, 262, 263, 267, 268, 269, 279, 280, 283, 286, 289, 292, 294], "jpg": [13, 17, 19, 55, 59, 61, 201, 223], "imag": [13, 14, 17, 19, 24, 28, 55, 56, 59, 61, 66, 69, 80, 133, 194, 201, 223, 228, 230, 280, 282, 289, 290, 291, 295], "coconpi": [13, 55, 223], "npy_dir": [13, 55, 223], "npy": [13, 55, 223], "tensorflowdataset": [14, 56], "pytorchdataset": [14, 56], "mxnetdataset": [14, 56], "onnxrtqldataset": [14, 56], "onnxrtitdataset": [14, 56], "IT": [14, 21, 56, 63, 281], "pytorchmxnetwrapdataset": [14, 56], "datafunc": [14, 56], "pytorchmxnetwrapfunct": [14, 28, 56, 69], "framework_dataset": [14, 56], "convent": [14, 56, 80, 133, 184, 197, 226, 243], "imageclassifi": [14, 56], "choos": [14, 56, 175, 189, 194, 235, 249, 281, 287, 289, 292, 294], "tensorflow_itex": [14, 17, 19, 21, 56, 59, 61, 63, 222, 282], "onnxrt_qdq": [14, 21, 56, 63, 282], "onnxrt_qlinearop": [14, 21, 28, 56, 63, 69, 282], "onnxrt_integerop": [14, 21, 28, 56, 63, 69, 282], "pytorch_ipex": [14, 21, 56, 63, 240, 282, 294], "pytorch_fx": [14, 21, 56, 63, 240, 282], "dataset_registri": [14, 56], "dataset_typ": [14, 56], "dataset_format": [14, 56], "data_format": [14, 24, 56, 66], "eg": [14, 56, 223, 282], "raw_imag": [14, 56], "overwrit": [14, 56, 254, 258], "__getitem__": [14, 28, 52, 56, 69, 222, 223, 240], "__len__": [14, 52, 56, 223], "size": [14, 20, 24, 28, 46, 47, 53, 56, 62, 66, 69, 107, 146, 148, 180, 184, 187, 188, 194, 196, 203, 222, 223, 228, 231, 240, 243, 261, 262, 278, 280, 283, 284, 286, 289, 291, 294, 295], "iterabledataset": [14, 52, 56], "also": [14, 28, 53, 56, 69, 77, 130, 137, 148, 150, 188, 189, 190, 191, 194, 197, 199, 202, 203, 204, 222, 225, 229, 233, 235, 239, 240, 244, 249, 254, 255, 258, 261, 262, 263, 266, 267, 278, 280, 281, 283, 285, 286, 289, 292], "__iter__": [14, 52, 56, 222, 223, 240], "over": [14, 56, 84, 137, 203, 229, 233, 235, 239, 252, 261, 267, 271, 280, 282, 289, 292], "download_url": [14, 56], "url": [14, 56, 197, 237, 272, 273, 280], "filenam": [14, 56, 180, 223, 267], "md5": [14, 56], "download": [14, 56, 223, 225, 236, 266, 272, 287], "address": [14, 56, 185, 193, 196, 221, 241, 263, 266, 269, 281], "gen_bar_updat": [14, 56], "progress": [14, 56, 255, 261, 263, 280, 283], "bar": [14, 56, 261, 281], "check_integr": [14, 56], "fpath": [14, 56], "check": [14, 56, 72, 108, 179, 180, 192, 201, 225, 228, 236, 245, 247, 249, 256, 259, 260, 264, 267, 270, 271, 287], "checksum": [14, 56], "calculate_md5": [14, 56], "chunk_siz": [14, 56], "1024": [14, 56, 247], "cifar10": [14, 56, 223], "cifar100": [14, 56, 223], "databas": [14, 56, 269], "extract": [14, 56, 128, 168, 223], "otherwis": [14, 28, 56, 69, 180, 188, 196, 203, 223, 256, 259, 282, 286, 291], "www": [14, 56, 223, 295], "c": [14, 56, 180, 188, 194, 223, 231, 236, 286, 292], "toronto": [14, 56, 223], "edu": [14, 56, 223], "kriz": [14, 56, 223], "cifar": [14, 56, 223, 295], "python": [14, 32, 56, 76, 129, 180, 182, 198, 201, 221, 223, 225, 228, 231, 236, 240, 246, 252, 255, 261, 265, 266, 268, 269, 271, 274, 276, 280, 281, 291], "tar": [14, 56, 223, 225, 256, 259], "gz": [14, 56, 223, 225, 256, 259], "manual": [14, 56, 223, 244, 250, 252, 255, 269, 274, 275, 276, 280], "subset": [14, 17, 56, 59, 223, 266], "internet": [14, 56, 223, 263], "put": [14, 56, 223, 226], "again": [14, 56, 223, 264, 266, 285], "pytorchcifar10": [14, 56], "mxnetcifar10": [14, 56], "tensorflowcifar10": [14, 56], "pytorchcifar100": [14, 56], "mxnetcifar100": [14, 56], "tensorflowcifar100": [14, 56], "mnist": [14, 56, 223, 228], "modifi": [14, 56, 168, 198, 204, 228, 232, 265, 266, 280, 294], "nation": [14, 56, 196], "institut": [14, 56], "standard": [14, 28, 56, 69, 197, 203, 221, 225, 230, 239, 291, 292], "technologi": [14, 56, 184, 238, 240, 243], "fashionmnist": [14, 56, 223], "npz": [14, 56, 223], "idx1": [14, 56, 223], "ubyt": [14, 56, 223], "idx3": [14, 56, 223], "t10k": [14, 56, 223], "pytorchmnist": [14, 56], "mxnetmnist": [14, 56], "tensorflowmnist": [14, 56], "pytorchfashionmnist": [14, 56], "mxnetfashionmnist": [14, 56], "tensorflowfashionmnist": [14, 56], "imagefold": [14, 56, 223, 228, 240], "expect": [14, 56, 188, 190, 194, 196, 197, 231, 238, 261, 283, 286, 292], "folder": [14, 19, 56, 61, 138, 150, 179, 188, 189, 223, 249, 254, 258, 267, 274, 275, 276, 286, 290], "subfold": [14, 56, 264], "repres": [14, 19, 56, 61, 80, 82, 84, 133, 135, 137, 187, 192, 194, 196, 204, 220, 223, 230, 269, 280, 283, 284, 292], "belong": [14, 56, 142, 283], "class_1": [14, 56, 223], "xxx": [14, 56, 223, 240], "png": [14, 56, 223], "xxy": [14, 56, 223], "xxz": [14, 56, 223], "class_n": [14, 56, 223], "123": [14, 56, 223, 291], "nsdf3": [14, 56, 223], "asd932_": [14, 56, 223], "categori": [14, 56, 79, 132, 219, 223, 251], "mxnetimagefold": [14, 56], "tensorflowtfrecorddataset": [14, 56], "tensorflowimagerecord": [14, 56], "imagenet": [14, 17, 24, 56, 59, 66, 190, 199, 225, 240, 250, 266, 280, 290, 291, 294, 295], "000": [14, 56, 201, 223], "001": [14, 56, 194, 223, 228, 289, 294], "099": [14, 56, 223], "follow": [14, 56, 77, 80, 130, 133, 184, 185, 186, 191, 194, 196, 197, 198, 199, 201, 202, 203, 204, 221, 222, 223, 226, 227, 228, 232, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 254, 258, 263, 265, 266, 269, 274, 279, 280, 282, 283, 286, 289, 290, 292], "tensorflowvocrecord": [14, 56], "pascal": [14, 56], "voc": [14, 56, 84, 137], "2012": [14, 56], "val": [14, 17, 56, 59, 108, 225, 240, 266], "00000": [14, 56], "00004": [14, 56], "00001": [14, 56], "00003": [14, 56], "dummi": [15, 16, 57, 58, 84, 137, 192, 201, 223, 233, 239, 240, 263], "dummydataset": [15, 16, 57, 58, 192], "shape": [15, 16, 24, 28, 57, 58, 66, 69, 80, 133, 188, 192, 194, 201, 223, 232, 233, 240, 263, 264, 286, 289, 291], "high": [15, 16, 57, 58, 192, 223, 225, 236, 266, 281, 292], "127": [15, 16, 57, 58, 194, 223, 283, 289], "float32": [15, 16, 28, 57, 58, 69, 80, 133, 175, 188, 194, 202, 219, 223, 240, 283, 286, 289, 291], "rang": [15, 16, 28, 57, 58, 69, 169, 175, 183, 184, 185, 188, 189, 192, 194, 201, 202, 204, 220, 223, 225, 226, 227, 228, 240, 243, 264, 266, 279, 280, 283, 286, 289, 291], "stand_norm": [15, 16, 57, 58, 223], "real": [15, 31, 57, 194, 203, 220, 228, 263, 270, 281, 283], "dummy_v2": [16, 58, 223], "sparse_dummy_v2": [16, 58, 223], "input_shap": [16, 58, 223], "label_shap": [16, 58, 223], "sparsedummydataset": [16, 58], "dense_shap": [16, 58, 223], "sparse_ratio": [16, 58, 223], "imagenetraw": [17, 59, 223], "data_path": [17, 59, 223], "image_list": [17, 59, 223], "img1": [17, 59, 223], "img2": [17, 59, 223], "imgx": [17, 59, 223], "read": [17, 28, 59, 69, 108, 223, 285, 288], "val_map": [17, 59, 223], "txt": [17, 59, 223, 225, 236, 263, 265, 266, 268, 269], "pytorchimagenetraw": [17, 59], "mxnetimagenetraw": [17, 59], "tensorflowimagenetraw": [17, 59], "inteltensorflow": [17, 19, 59, 61, 236], "tensorflowimagenetdataset": [17, 59], "onnxrtimagenetdataset": [17, 59], "class": [18, 60, 91, 138, 150, 188, 189, 190, 192, 193, 198, 199, 203, 221, 222, 223, 226, 239, 240, 252, 278, 279, 283, 287, 290, 292, 294], "bert_dataset": [18, 60], "coco_dataset": [18, 60], "dummy_dataset": [18, 60], "dummy_dataset_v2": [18, 60], "imagenet_dataset": [18, 60], "style_transfer_dataset": [18, 60], "style": [19, 47, 61, 221, 223, 234], "transfer": [19, 61, 70, 194, 223, 226, 227, 240, 289], "styletransferdataset": [19, 61], "content_fold": [19, 61, 223], "style_fold": [19, 61, 223], "crop_ratio": [19, 61, 223], "resize_shap": [19, 61, 223], "256": [19, 24, 61, 66, 223, 228, 240, 291], "image_format": [19, 61, 223], "holder": [19, 61, 223], "labelbalancecocorecordfilt": [20, 62], "balanc": [20, 62, 184, 186, 188, 192, 194, 243, 286, 289], "labelbalancecocorawfilt": [20, 62], "tensorflowfilt": [21, 63], "onnxrtqlfilt": [21, 63], "mode": [21, 63, 80, 126, 133, 146, 166, 177, 179, 180, 188, 189, 202, 203, 225, 235, 254, 258, 266, 267, 283, 285, 286, 292], "onnxrtitfilt": [21, 63], "pytorchfilt": [21, 63], "mxnetfilt": [21, 63], "filter_registri": [21, 63], "filter_typ": [21, 63], "__call__": [21, 63], "write": [21, 63, 180, 228, 234, 240, 244, 290], "coco_filt": [22, 64], "quantizedinput": [24, 66, 291], "uint8": [24, 66, 80, 128, 133, 168, 192, 194, 202, 223, 232, 282, 283, 291, 294], "point": [24, 66, 81, 82, 91, 116, 134, 135, 154, 180, 183, 184, 185, 186, 187, 188, 191, 194, 239, 243, 261, 266, 267, 283, 286, 289, 291, 292], "labelshift": [24, 66, 291], "label_shift": [24, 66, 291], "parsedecodeimagenet": [24, 66, 291], "proto": [24, 28, 66, 69, 291], "parsedecodeimagenettransform": [24, 66], "decod": [24, 66, 77, 130, 239, 291], "v1": [24, 66, 81, 82, 84, 134, 135, 137, 146, 186, 228, 230, 231, 239, 242, 265, 280, 287, 288, 289, 295], "tensorflowtransposelastchannel": 24, "transpos": [24, 28, 69, 73, 107, 286, 291], "nhwc": 24, "nchw": 24, "tensorflowshiftrescal": 24, "rescal": [24, 28, 69, 291], "tensorflowresizecropimagenettransform": [24, 66], "height": [24, 28, 66, 69, 107, 228, 291, 294], "width": [24, 28, 66, 69, 107, 194, 220, 228, 280, 283, 291, 294], "random_crop": [24, 66, 291], "resize_sid": [24, 66, 291], "resize_method": [24, 66], "bilinear": [24, 28, 66, 69, 291], "random_flip_left_right": [24, 66, 291], "mean_valu": [24, 66, 291], "channels_last": [24, 66, 244], "subpixel": [24, 66], "rgb": [24, 66], "seri": [24, 66, 201, 236, 240, 291], "applic": [24, 66, 188, 190, 194, 204, 230, 244, 261, 263, 269, 270, 274, 275, 281, 286, 289, 290, 291, 293], "result": [24, 28, 66, 69, 77, 80, 81, 82, 84, 130, 133, 134, 135, 137, 150, 157, 169, 179, 180, 183, 186, 188, 191, 193, 194, 196, 199, 201, 222, 225, 226, 228, 235, 237, 239, 240, 249, 250, 261, 262, 265, 269, 270, 271, 272, 278, 280, 281, 283, 286, 288, 289, 290, 291, 292, 293, 295], "crop": [24, 28, 66, 69, 223, 291], "flip": [24, 28, 66, 69, 291], "left": [24, 28, 66, 69, 194, 255, 261, 289, 291], "right": [24, 66, 80, 133, 194, 196, 197, 198, 261, 267, 289, 291], "std": [24, 28, 66, 69, 240, 291], "bilinearimagenettransform": [24, 66], "central_fract": [24, 66, 291], "875": [24, 66, 291], "fraction": [24, 66, 291], "onnxbilinearimagenettransform": [24, 66], "onnxresizecropimagenettransform": [24, 66], "std_valu": [24, 66], "229": [24, 66, 240], "225": [24, 66, 240, 295], "resizewithaspectratio": [24, 66], "87": [24, 66, 295], "inter_pol": [24, 66], "cv2": [24, 66], "inter_area": [24, 66], "aspect": [24, 28, 66, 69, 291], "imagenet_transform": [25, 67], "postprocess_cl": [26, 36, 240], "user_postprocess": [26, 36], "just": [26, 28, 31, 33, 34, 36, 44, 69, 148, 187, 192, 194, 199, 240, 251, 255, 261, 269, 279, 283, 289, 291, 292], "collect": [26, 28, 31, 33, 34, 36, 69, 82, 84, 135, 137, 170, 180, 192, 194, 203, 283, 290, 292], "info": [26, 31, 36, 107, 142, 175, 176, 180, 198, 221, 225, 242, 271, 276], "convert_to_unicod": [27, 68], "text": [27, 28, 68, 69, 77, 82, 110, 130, 135, 184, 186, 188, 194, 230, 237, 243, 250, 272, 275, 276, 280, 281, 286, 289, 291, 295], "unicod": [27, 68], "assum": [27, 68, 80, 91, 133, 202, 232, 261], "utf": [27, 68], "load_vocab": [27, 68], "vocab_fil": [27, 28, 68, 69, 291], "convert_by_vocab": [27, 68], "vocab": [27, 68], "whitespace_token": [27, 68], "whitespac": [27, 68, 82, 135], "clean": [27, 68, 240], "split": [27, 28, 68, 69, 194, 198, 284, 286, 289, 291], "piec": [27, 68, 77, 130, 188, 194, 239, 286], "fulltoken": [27, 68], "tokenzi": [27, 68], "basictoken": [27, 68], "punctuat": [27, 68, 77, 82, 130, 135], "lower": [27, 28, 68, 69, 82, 135, 155, 183, 184, 187, 192, 194, 227, 243, 280, 281, 283, 289, 291, 292], "wordpiecetoken": [27, 68], "unk_token": [27, 68], "unk": [27, 68], "max_input_chars_per_word": [27, 68], "200": [27, 68, 188, 198, 270, 292], "wordpiec": [27, 28, 68, 69, 291], "concat_gener": [28, 69], "inc": [28, 69, 192, 193, 196, 201, 203, 238, 244, 251, 261, 263, 268, 281, 282, 287, 292], "abstract": [28, 69, 70, 75, 112, 202, 204, 234], "own": [28, 52, 69, 148, 194, 199, 203, 222, 223, 235, 239, 263, 267, 278, 286, 288, 293], "inherit": [28, 30, 38, 51, 69, 109, 111, 199, 202, 203, 223], "tensorflowtransform": [28, 69], "mxnettransform": [28, 69], "pytorchtransform": [28, 69], "onnxrtqltransform": [28, 69], "onnxrtittransform": [28, 69], "transform_registri": [28, 69], "transform_typ": [28, 69], "basetransform": [28, 69], "tensorflowwrapfunct": [28, 69], "transform_func": [28, 69], "wrapper": [28, 30, 31, 33, 34, 53, 69, 80, 84, 133, 137, 142, 146, 192, 285], "pytorchmxnettransform": [28, 69], "get_torchvision_map": [28, 69], "interpol": [28, 69, 239, 280, 291], "torchvis": [28, 69, 201, 229, 233, 244, 250, 264], "composetransform": [28, 69], "transform_list": [28, 69, 291], "compos": [28, 69, 172, 291], "sever": [28, 69, 111, 113, 184, 185, 194, 199, 225, 226, 227, 235, 240, 241, 243, 254, 258, 269, 280, 282, 284, 289, 291, 292, 294], "croptoboundingbox": [28, 69, 291], "offset_height": [28, 69, 291], "offset_width": [28, 69, 291], "target_height": [28, 69, 291], "target_width": [28, 69, 291], "box": [28, 69, 80, 84, 133, 137, 198, 239, 244, 255, 261, 290, 291, 292], "vertic": [28, 69, 107, 291], "coordin": [28, 69, 116, 154, 268, 291, 292], "top": [28, 69, 75, 84, 99, 104, 112, 137, 197, 239, 261, 264, 266, 291], "corner": [28, 69, 197, 202, 204, 291], "horizont": [28, 69, 291], "mxnetcroptoboundingbox": [28, 69], "onnxrtcroptoboundingbox": [28, 69], "tensorflowcroptoboundingbox": [28, 69], "resizewithratio": [28, 69, 291], "min_dim": [28, 69, 291], "800": [28, 69, 291], "max_dim": [28, 69, 291], "1365": [28, 69, 291], "constant_valu": [28, 69], "np": [28, 69, 116, 154, 228, 271, 289, 291, 292], "arrai": [28, 69, 80, 91, 133, 180, 291], "smaller": [28, 69, 184, 226, 240, 243, 280, 291], "dimens": [28, 46, 69, 188, 223, 226, 286, 291], "ensur": [28, 69, 116, 154, 187, 190, 228, 283, 291], "longest": [28, 69, 291], "side": [28, 69, 223, 255, 291], "doesn": [28, 69, 185, 192, 202, 228, 240, 241, 262, 294], "exce": [28, 69, 286, 291], "zero": [28, 69, 109, 180, 184, 187, 188, 194, 201, 243, 266, 280, 283, 286, 289, 291, 292], "so": [28, 69, 168, 184, 188, 189, 192, 194, 198, 202, 225, 231, 235, 241, 243, 247, 249, 265, 266, 267, 283, 285, 286, 289, 290, 291, 293], "tensorflowresizewithratio": [28, 69], "perm": [28, 69, 291], "permut": [28, 69, 291], "tensorflowtranspos": [28, 69], "mxnettranspos": [28, 69], "pytorchtranspos": [28, 69], "randomverticalflip": [28, 69, 291], "given": [28, 69, 80, 133, 150, 189, 193, 199, 204, 280, 289, 291], "randomli": [28, 69, 92, 116, 154, 194, 199, 289, 291, 292], "tensorflowrandomverticalflip": [28, 69], "randomhorizontalflip": [28, 69, 240, 291], "tensorflowrandomhorizontalflip": [28, 69], "toarrai": [28, 69, 291], "pil": [28, 69, 291], "ndarrai": [28, 69, 170, 231, 291], "numpi": [28, 69, 80, 91, 133, 231, 289, 291], "casttftransform": [28, 69], "castonnxtransform": [28, 69], "castpytorchtransform": [28, 69], "centercroptftransform": [28, 69], "center": [28, 69, 200, 201, 236, 291, 292], "paddedcentercroptransform": [28, 69], "crop_pad": [28, 69], "resizetftransform": [28, 69], "nearest": [28, 69, 188, 189, 194, 286, 291], "bicub": [28, 69, 291], "resizepytorchtransform": [28, 69], "randomcroptftransform": [28, 69], "randomresizedcroppytorchtransform": [28, 69], "08": [28, 69, 238, 291, 295], "randomresizedcropmxnettransform": [28, 69], "randomresizedcroptftransform": [28, 69], "normalizetftransform": [28, 69], "normal": [28, 69, 82, 135, 188, 194, 240, 270, 278, 286, 289, 291], "deviat": [28, 69, 225, 291], "broadcast": [28, 69, 228, 291], "rescalekeraspretraintransform": [28, 69], "rescaletftransform": [28, 69], "rescaletransform": [28, 69], "alignimagechanneltransform": [28, 69], "dim": [28, 69, 188, 194, 289, 291], "align": [28, 69, 196, 286, 291], "w": [28, 69, 186, 194, 280, 289, 291], "must": [28, 69, 80, 133, 197, 198, 203, 219, 222, 236, 283, 291], "pytorchalignimagechannel": [28, 69], "tondarraytransform": [28, 69], "resizemxnettransform": [28, 69], "resizetransform": [28, 69], "cropresizetftransform": [28, 69], "boundari": [28, 69, 291], "area": [28, 69, 80, 133, 184, 239, 243, 291], "pytorchcropresizetransform": [28, 69], "mxnetcropresizetransform": [28, 69], "cropresizetransform": [28, 69], "centercroptransform": [28, 69], "mxnetnormalizetransform": [28, 69], "pytorchnormalizetransform": [28, 69], "normalizetransform": [28, 69], "randomcroptransform": [28, 69], "randomresizedcroptransform": [28, 69], "get_final_text": [28, 69], "pred_text": [28, 69], "orig_text": [28, 69], "project": [28, 69, 195, 196, 197, 267, 281, 288, 292, 296], "predict": [28, 33, 69, 77, 81, 82, 84, 130, 134, 135, 137, 150, 188, 194, 199, 226, 239, 252, 286, 289, 290, 291], "back": [28, 34, 69, 225, 261, 267], "squadexampl": [28, 69], "qas_id": [28, 69], "question_text": [28, 69], "doc_token": [28, 69], "orig_answer_text": [28, 69], "start_posit": [28, 69], "end_posit": [28, 69], "is_imposs": [28, 69], "simpl": [28, 69, 192, 194, 236, 240, 280, 288, 289, 292], "without": [28, 69, 109, 128, 168, 184, 194, 196, 226, 228, 240, 243, 252, 263, 266, 280, 281, 282, 283, 292, 293], "answer": [28, 69, 81, 82, 134, 135, 196, 266, 280, 291, 295], "posit": [28, 69, 196, 239, 244, 269, 274, 275, 276], "unique_id": [28, 69], "example_index": [28, 69], "doc_span_index": [28, 69], "token_to_orig_map": [28, 69], "token_is_max_context": [28, 69], "input_mask": [28, 69, 240], "segment_id": [28, 69, 240], "read_squad_exampl": [28, 69], "input_fil": [28, 69], "doc_strid": [28, 69, 291], "max_query_length": [28, 69, 291], "output_fn": [28, 69], "inputbatch": [28, 69], "collecttransform": [28, 69], "10833": [28, 69], "tfsquadv1posttransform": [28, 69], "n_best_siz": [28, 69, 291], "20": [28, 69, 266, 269, 274, 275, 276, 280, 291, 294, 295], "384": [28, 69, 291], "64": [28, 69, 185, 193, 194, 199, 238, 286, 289, 291, 295], "max_answer_length": [28, 69, 291], "30": [28, 69, 229, 233, 235, 291, 295], "total": [28, 69, 84, 109, 137, 188, 223, 225, 280, 286, 291, 295], "best": [28, 69, 70, 75, 112, 119, 159, 188, 189, 190, 191, 193, 196, 199, 201, 221, 236, 244, 250, 261, 267, 278, 283, 286, 289, 291, 292], "nbest_predict": [28, 69, 291], "question": [28, 69, 81, 82, 134, 135, 194, 196, 197, 201, 202, 236, 244, 268, 280, 289, 291, 295], "becaus": [28, 69, 107, 191, 194, 198, 266, 283, 289, 291, 292], "anoth": [28, 69, 77, 86, 130, 180, 225, 226, 254, 258, 291, 292], "up": [28, 69, 108, 194, 201, 228, 229, 232, 235, 252, 256, 259, 261, 280, 281, 282, 283, 288, 291, 292, 294], "long": [28, 69, 188, 221, 231, 286, 291], "document": [28, 69, 185, 190, 191, 194, 203, 204, 209, 228, 238, 241, 246, 256, 259, 260, 267, 268, 270, 280, 287, 291, 293], "chunk": [28, 69, 291], "stride": [28, 69, 291], "tfmodelzoocollecttransform": [28, 69], "zoo": [28, 53, 69, 201, 229, 233, 295], "tfsquadv1modelzooposttransform": [28, 69], "squadv1": [28, 69, 291], "see": [28, 69, 77, 130, 188, 194, 196, 197, 198, 200, 221, 237, 240, 254, 255, 258, 261, 262, 266, 267, 286, 289, 290, 292], "parsedecodevoctransform": [28, 69], "measur": [29, 138, 174, 188, 192, 194, 199, 202, 219, 225, 226, 239, 240, 286, 290, 292], "conf_fname_or_obj": [29, 38, 70, 75, 85, 86, 87, 88, 90, 99, 104, 112], "thei": [29, 196, 221, 226, 232, 240, 249, 264, 267, 278], "ha": [29, 77, 107, 109, 130, 185, 190, 192, 194, 197, 199, 202, 203, 204, 222, 230, 235, 240, 241, 247, 261, 266, 267, 269, 272, 280, 282, 283, 285, 288, 289, 292], "possibl": [29, 225, 263, 279, 280, 284, 285, 292], "unnecessari": [29, 240], "critet": 30, "tensorflowcrossentropyloss": 30, "pytorchcrossentropyloss": 30, "tensorflowknowledgedistillationloss": 30, "pytorchknowledgedistillationloss": [30, 240], "pytorchintermediatelayersknowledgedistillationloss": 30, "tensorflowcriterion": 30, "pytorchcriterion": 30, "integr": [30, 189, 192, 194, 202, 240, 262, 263, 268, 286], "criterion_registri": 30, "criterion_typ": 30, "registry_criterion": 30, "knowledgedistillationframework": 30, "knowledgedistillationloss": [30, 240, 294], "pytorchknowledgedistillationlosswrapp": 30, "param_dict": [30, 35], "wrap": [30, 80, 133, 198, 228, 256, 259], "tensorflowknowledgedistillationlossextern": 30, "intermediatelayersknowledgedistillationloss": 30, "pytorchintermediatelayersknowledgedistillationlosswrapp": 30, "selfknowledgedistillationloss": 30, "selfknowledg": 30, "collate_fn": [31, 44, 46, 47, 50, 51, 53, 222, 223], "last_batch": [31, 44, 46, 50, 51, 53, 222], "rollov": [31, 44, 46, 50, 51, 53, 222], "sampler": [31, 44, 46, 48, 50, 51, 53, 125, 165, 188, 193, 222, 228], "batch_sampl": [31, 44, 46, 50, 51, 53, 222], "num_work": [31, 44, 46, 50, 51, 53, 222, 240, 283], "pin_memori": [31, 44, 46, 50, 51, 53, 222], "shuffl": [31, 44, 46, 50, 51, 53, 222, 240, 283], "batch": [31, 44, 46, 47, 52, 53, 169, 188, 222, 226, 227, 240, 279, 280, 283, 289, 291, 292, 295], "setter": 31, "calib_dataload": [31, 113, 150, 190, 191, 192, 193, 198, 201, 222, 223, 225, 233, 234, 239, 240, 263, 264, 283, 284, 285, 286], "reason": [31, 188, 194, 196, 203, 222, 266, 286, 290, 292], "have": [31, 52, 77, 80, 107, 109, 130, 133, 137, 150, 168, 184, 185, 186, 188, 193, 194, 196, 197, 203, 204, 221, 222, 223, 225, 228, 232, 237, 239, 240, 241, 243, 244, 261, 264, 267, 269, 274, 275, 276, 278, 280, 283, 284, 286, 289, 292, 293], "know": [31, 221, 228, 287], "known": [31, 116, 154, 184, 240, 243, 280, 283, 290, 292], "intel": [32, 35, 71, 76, 83, 84, 107, 110, 118, 124, 129, 136, 137, 149, 150, 158, 164, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 202, 203, 204, 220, 223, 224, 226, 227, 229, 230, 232, 233, 237, 238, 241, 242, 244, 249, 251, 252, 263, 264, 265, 266, 268, 269, 278, 279, 280, 281, 283, 285, 286, 287, 289, 290, 292, 293, 294, 295], "open": [32, 76, 129, 172, 182, 196, 201, 230, 231, 240, 256, 259, 262, 263, 267, 268, 269, 281], "librari": [32, 76, 129, 182, 185, 192, 201, 236, 240, 241, 246, 255, 261, 281, 283], "torch_util": [32, 201, 284, 289], "metric_cl": [33, 137, 150, 240], "user_metr": [33, 137, 150], "alwai": [33, 80, 133, 137, 150, 193, 225, 239, 240, 266, 286], "recommend": [33, 137, 201, 202, 223, 232, 252, 255, 260, 262, 280, 282, 292], "design": [33, 38, 53, 137, 155, 187, 189, 192, 199, 201, 240, 249, 252, 280, 283, 293], "set_backend": 34, "tensorflowoptim": 35, "onc": [35, 111, 115, 151, 153, 203, 204, 222, 261, 267, 280, 281, 292, 295], "pytorchoptim": 35, "main": [35, 110, 188, 189, 190, 192, 194, 198, 222, 225, 228, 240, 248, 250, 262, 271, 280, 283, 286], "entri": [35, 75, 113, 180, 189, 221, 237], "optimizer_registri": 35, "optimizer_typ": 35, "cross": [35, 84, 137, 234, 292], "tensorflowsgd": 35, "tensorflowadamw": 35, "tensorflow_addon": 35, "adamw": 35, "pytorchsgd": 35, "record_output": 37, "output_process": 37, "help": [37, 86, 193, 194, 221, 238, 242, 244, 250, 261, 269, 274, 275, 276, 286, 292, 293], "get_activ": 37, "hook": [37, 38, 99, 104, 172, 226, 227, 240, 280, 289, 290], "mainli": [38, 111, 194, 201, 240, 280, 283], "shot": [38, 109, 111, 188, 192, 199, 235, 240, 280, 281, 286], "appli": [38, 78, 131, 184, 187, 191, 192, 193, 194, 196, 203, 204, 240, 243, 244, 246, 252, 261, 265, 266, 271, 279, 280, 283, 285, 288, 289, 292, 293, 294], "api": [39, 75, 80, 112, 125, 126, 133, 137, 150, 165, 166, 180, 186, 188, 193, 194, 198, 201, 205, 207, 211, 214, 217, 225, 230, 235, 236, 240, 246, 250, 251, 252, 268, 269, 273, 287, 288, 292, 296], "basedatalod": 44, "basedataload": [44, 49, 51], "_generate_dataload": 44, "default_col": 46, "merg": [46, 126, 166, 256, 259, 290, 292], "outer": 46, "defaultdataload": [46, 53], "definit": [47, 52], "drop_last": [47, 52], "iterablefetch": 47, "next": [47, 188, 194, 199, 203, 204, 222, 282, 286, 292], "indexfetch": 47, "base_dataload": 48, "default_dataload": 48, "fetcher": 48, "mxnet_dataload": 48, "onnxrt_dataload": 48, "pytorch_dataload": 48, "tensorflow_dataload": 48, "mxnetdataload": 49, "onnxrtbertdataload": 50, "variant": 50, "onnxrtdataload": 50, "pytorchdataload": 51, "data_sourc": [52, 172], "matter": [52, 285], "iterablesampl": 52, "squential": 52, "clear": [52, 202, 232, 239, 240], "what": [52, 137, 150, 169, 192, 196, 281], "try": [52, 146, 192, 194, 198, 201, 225, 264, 280, 283, 289, 292], "indexdataset": 52, "intern": [52, 126, 166, 222, 223, 239, 280], "element": [52, 80, 107, 133, 180, 184, 188, 194, 223, 235, 239, 243, 280, 286, 289], "retriev": [52, 280], "act": [52, 188, 196], "placehold": [52, 221], "sequentialsampl": 52, "sequenti": [52, 113, 115, 151, 153, 193, 292], "batchsampl": 52, "tfdatadataload": 53, "tensorflow1": 53, "coupl": 53, "graph": [53, 75, 139, 146, 183, 187, 194, 198, 202, 223, 226, 228, 234, 242, 244, 263, 266, 283, 284, 285, 290], "feed_dict": 53, "session": [53, 146, 240, 290], "satisfi": [53, 225, 236, 267], "usag": [53, 80, 86, 113, 133, 189, 190, 194, 203, 223, 228, 229, 244, 252, 263, 269, 274, 275, 276, 278, 282, 286, 291], "feed": [53, 226, 280], "tf1": [53, 242], "although": [53, 288], "obj": [53, 70, 75, 86, 87, 88, 90, 99, 104, 108, 112, 138, 148, 150, 169, 172, 180], "tensorflowbertdataload": 53, "tensorflowmodelzoobertdataload": 53, "tensorflowdataload": 53, "tensorflowimagefold": 56, "deriv": [70, 107, 109, 111], "compon": [70, 76, 113, 193, 198, 221, 225, 228, 236, 237, 244, 261, 269, 279, 280], "pipelin": [70, 87, 88, 113, 197, 227, 240, 279], "distillation_conf": 70, "relat": [70, 80, 99, 104, 107, 133, 168, 172, 204, 244, 268, 269, 280, 286, 294], "_epoch_ran": 70, "epoch": [70, 109, 169, 222, 226, 227, 228, 240, 279, 280, 294], "ran": 70, "eval_frequ": 70, "term": [70, 189, 192, 197, 220, 226, 237, 239, 278, 279, 292], "best_scor": 70, "best_model": [70, 179, 185, 190, 191, 192, 193, 286], "found": [70, 185, 201, 221, 226, 238, 241, 249, 266, 270, 289, 292, 295], "qlinear2qdq": 71, "qlinearop": [72, 225, 235, 252, 283, 295], "check_model": 72, "modelproto": [72, 138, 242], "onnx_qlinear_to_qdq": 72, "input_name_to_nod": 72, "destin": [72, 86], "node": [72, 74, 146, 202, 225, 228, 264, 268, 271, 274, 275, 276, 284, 290, 292, 295], "tf_to_fp32_onnx": 73, "graph_def": [73, 138, 146, 150], "save_path": [73, 74, 202, 242], "inputs_as_nchw": 73, "tool": [73, 180, 194, 201, 202, 240, 254, 258, 264, 267, 268, 269, 280, 281, 283], "tf_to_int8_onnx": 73, "int8_model": [73, 74, 202], "get_node_map": 74, "fp32_model": [74, 180, 186, 187, 191, 192, 202, 284, 286], "fp32_onnx_path": 74, "module_node_map": 74, "get_quantizable_onnx_op": 74, "quantize_nod": 74, "dynamic_quant_export": 74, "pt_fp32_model": 74, "pt_int8_model": 74, "q_config": [74, 202], "weight_typ": 74, "s8": 74, "static_quant_export": 74, "_quantiz": 74, "torch_to_fp32_onnx": 74, "do_constant_fold": 74, "verbos": [74, 116, 154], "constant": [74, 116, 124, 154, 164, 173, 221, 222, 232, 264, 291], "fold": [74, 186, 188, 232, 286, 289], "torch_to_int8_onnx": 74, "infer": [75, 112, 146, 148, 150, 169, 185, 186, 187, 188, 191, 192, 194, 201, 202, 203, 220, 226, 227, 240, 241, 261, 278, 280, 281, 283, 286, 289, 290, 292], "achiev": [75, 112, 186, 187, 188, 189, 190, 193, 194, 230, 238, 240, 264, 279, 280, 281, 283, 289, 290, 292], "within": [75, 80, 112, 133, 146, 185, 196, 198, 204, 220, 241, 254, 258, 261, 269, 280, 281, 286, 289, 292], "across": [75, 85, 112, 138, 184, 193, 224, 240, 243, 268, 271, 280, 284, 289, 292], "variou": [75, 85, 112, 138, 184, 187, 189, 192, 204, 235, 243, 244, 271, 280, 282, 284], "dl": [75, 85, 99, 104, 112, 138, 225, 234, 248, 261, 281, 295], "bring": [75, 112, 194, 255, 268, 289], "unifi": [75, 112, 202, 203, 204, 222, 234, 235, 239, 240, 242], "vari": [75, 99, 104, 112, 266, 280, 289, 295], "roc": [75, 84, 99, 104, 112, 137], "memori": [75, 99, 104, 112, 148, 180, 184, 185, 186, 188, 191, 194, 220, 222, 227, 240, 241, 243, 244, 278, 280, 283, 284, 286, 289, 292, 295], "flexibl": [75, 99, 104, 112, 188, 192, 201, 226, 268, 280, 286], "interfac": [75, 99, 104, 112, 113, 172, 185, 187, 189, 192, 194, 235, 240, 252, 270, 283, 287], "via": [75, 99, 104, 112, 188, 194, 196, 201, 228, 235, 240, 244, 261, 280, 281], "graph_optimization_conf": 75, "popular": [76, 129, 182, 189, 193, 194, 201, 202, 203, 220, 226, 229, 230, 233, 238, 240, 280, 283, 286, 292, 293], "compress": [76, 99, 104, 129, 148, 169, 175, 182, 186, 188, 189, 191, 193, 194, 201, 209, 226, 235, 240, 261, 263, 278, 279, 280, 281, 283, 289, 293, 295], "techniqu": [76, 129, 182, 187, 192, 193, 194, 201, 235, 240, 244, 263, 279, 280, 281, 282, 283, 293, 294, 295], "contrib": [76, 129], "pruner_legaci": 76, "pruning_recip": 76, "pytorch_prun": 76, "graph_optim": 76, "mixed_precis": [76, 138, 240], "model_convers": 76, "pruning_v2": 76, "script": [77, 78, 81, 82, 130, 131, 134, 135, 197, 201, 228, 235, 244, 248, 251, 252, 255, 272, 274, 281], "unicoderegex": [77, 130], "hoc": [77, 130], "hack": [77, 130], "recogn": [77, 130, 292], "symbol": [77, 130, 138, 150, 198, 242], "nondigit_punct_r": [77, 130], "compil": [77, 130, 183, 187, 240], "regular": [77, 108, 130], "express": [77, 130, 196], "preced": [77, 130, 194, 289, 292], "digit": [77, 130, 180, 281], "punct_nondigit_r": [77, 130], "symbol_r": [77, 130], "bleu_token": [77, 130], "offici": [77, 81, 82, 130, 134, 135, 196, 289], "mose": [77, 130], "smt": [77, 130], "mosesdecod": [77, 130], "blob": [77, 78, 81, 82, 107, 130, 131, 134, 135, 137, 150, 240, 250, 272, 275, 276], "master": [77, 78, 81, 82, 107, 110, 130, 131, 134, 135, 137, 150, 240, 292], "mteval": [77, 130], "v14": [77, 130], "pl": [77, 130], "l954": [77, 130], "l983": [77, 130], "comput": [77, 78, 81, 82, 84, 130, 131, 134, 135, 137, 169, 180, 184, 185, 187, 188, 194, 220, 222, 227, 230, 239, 240, 241, 243, 244, 255, 264, 280, 281, 283, 286, 289, 292], "bilingu": [77, 130], "understudi": [77, 130], "qualiti": [77, 130, 221], "been": [77, 107, 109, 130, 185, 188, 192, 194, 199, 204, 221, 226, 240, 241, 261, 286, 289], "machin": [77, 130, 188, 230, 236, 247, 261, 263, 269, 281, 289, 290], "translat": [77, 78, 130, 131, 184, 243, 280, 292], "natur": [77, 130, 188, 230], "approxim": [77, 78, 130, 131, 188, 203, 239, 286], "glue": [77, 84, 130, 137, 223, 239, 240, 250], "word": [77, 130, 188, 194, 221, 239, 280, 286, 295], "ngram": [77, 130, 239], "order": [77, 78, 113, 116, 119, 128, 130, 131, 154, 159, 168, 188, 193, 194, 198, 225, 239, 264, 282, 286, 289, 290, 292], "breviti": [77, 78, 130, 131, 239], "penalti": [77, 78, 130, 131, 239], "doe": [77, 130, 168, 187, 188, 221, 222, 223, 239, 240, 286, 287, 291], "beam": [77, 130, 239], "bleu": [78, 83, 131, 136, 239, 280], "tensor2tensor": [78, 131], "bleu_hook": [78, 131], "compute_bleu": [78, 131], "reference_corpu": [78, 131], "translation_corpu": [78, 131], "max_ord": [78, 131], "use_bp": [78, 131], "against": [78, 131], "gram": [78, 131], "bleu_scor": [78, 131], "third": [80, 133, 197, 237], "parti": [80, 133, 194, 197, 237, 283], "pycocotool": [80, 133, 231, 236], "note": [80, 120, 133, 160, 183, 186, 187, 188, 191, 194, 199, 201, 203, 204, 221, 222, 225, 228, 230, 232, 236, 238, 240, 246, 249, 254, 258, 261, 263, 267, 269, 271, 280, 283, 286, 289, 290, 292, 293, 294], "noth": [80, 133, 292], "thu": [80, 133, 194, 240, 280, 283], "cannot": [80, 133, 188, 198, 221, 231, 286, 290], "slim": [80, 133, 144, 146, 242, 280], "jonathanhuang": [80, 133], "image_id": [80, 133, 239], "encod": [80, 133, 264, 291], "invok": [80, 133, 203], "groundtruth_dict": [80, 133], "exportgroundtruthtococo": [80, 133], "groundtruth_boxes_list": [80, 133], "groundtruth_classes_list": [80, 133], "max_num_class": [80, 133], "output_path": [80, 133], "detections_list": [80, 133], "exportdetectionstococo": [80, 133], "detection_boxes_list": [80, 133], "detection_scores_list": [80, 133], "detection_classes_list": [80, 133], "cocowrapp": [80, 133], "loadannot": [80, 133], "cocoevalwrapp": [80, 133], "agnostic_mod": [80, 133], "computemetr": [80, 133], "ani": [80, 82, 125, 133, 135, 165, 177, 180, 189, 192, 196, 201, 204, 221, 228, 244, 249, 262, 263, 267, 268, 280, 288, 292], "detection_typ": [80, 133], "bbox": [80, 133, 198, 239], "hold": [80, 116, 133, 154, 223], "being": [80, 133, 204, 269], "iou_typ": [80, 133], "iou_thr": [80, 84, 133, 137, 239], "map_point": [80, 84, 133, 137, 239], "cocoev": [80, 133], "To": [80, 133, 148, 184, 185, 186, 187, 188, 191, 193, 194, 197, 201, 203, 204, 221, 223, 225, 228, 241, 243, 245, 248, 254, 256, 258, 259, 263, 267, 280, 282, 285, 286, 287, 289, 292, 294], "mscoco": [80, 133], "org": [80, 109, 133, 198, 225, 236, 256, 259, 280], "Then": [80, 133, 194, 203, 225, 254, 256, 258, 259, 266, 289, 292], "exportsingleimagegroundtruthtococo": [80, 133], "next_annotation_id": [80, 133], "category_id_set": [80, 133], "groundtruth_box": [80, 133], "groundtruth_class": [80, 133], "groundtruth_mask": [80, 133], "groundtruth_is_crowd": [80, 133], "ingest": [80, 133], "here": [80, 133, 186, 187, 191, 192, 194, 203, 223, 228, 229, 230, 232, 233, 238, 239, 249, 256, 259, 261, 264, 267, 269, 283, 287, 288, 289, 295], "match": [80, 81, 133, 134, 187, 201, 226, 262, 286], "ones": [80, 133, 280], "exportsingleimagedetectionstococo": [80, 133], "associ": [80, 133], "uniqu": [80, 113, 133, 194, 283], "identifi": [80, 133, 146, 193, 269, 280, 286], "assign": [80, 133, 180, 228, 282, 292], "continu": [80, 107, 133, 199, 238, 240, 262, 280, 293], "drop": [80, 108, 133, 185, 186, 188, 194, 197, 240, 241, 255, 280, 286, 289, 295], "num_gt_box": [80, 133], "num_detect": [80, 84, 133, 137, 239, 240, 294], "image_height": [80, 133], "image_width": [80, 133], "detection_mask": [80, 133], "crowd": [80, 133], "rais": [80, 107, 108, 109, 133, 138, 201, 221, 263, 280, 281], "valueerror": [80, 133, 231], "insid": [80, 133, 226, 227, 262, 280, 284, 292], "exportsingleimagedetectionboxestococo": [80, 133], "detection_box": [80, 133, 240, 294], "detection_scor": [80, 133, 240, 294], "detection_class": [80, 133, 240, 294], "exporsingleimagedetectionboxestococo": [80, 133], "exportsingleimagedetectionmaskstococo": [80, 133], "allenai": [81, 82, 134, 135], "bi": [81, 82, 134, 135], "att": [81, 82, 134, 135], "flow": [81, 82, 134, 135, 194, 198, 199, 240], "f1_score": [81, 82, 134, 135], "ground_truth": [81, 82, 134, 135], "f1": [81, 83, 84, 134, 136, 137, 228, 239, 240, 264, 288, 295], "ground": [81, 82, 134, 135], "truth": [81, 82, 134, 135], "metric_max_over_ground_truth": [81, 82, 134, 135], "metric_fn": [81, 82, 134, 135], "exact_match_scor": [81, 134], "exact": [81, 134], "averag": [81, 82, 84, 134, 135, 137, 188, 239, 240, 286, 292, 295], "articl": [81, 82, 134, 135], "paragraph": [81, 82, 134, 135], "qa": [81, 82, 134, 135, 201], "normalize_answ": [82, 135], "remov": [82, 135, 196, 240, 254, 258, 267, 274, 275, 280, 290], "extra": [82, 135, 188, 240, 286], "replac": [82, 135, 183, 184, 187, 221, 228, 240, 243, 252, 287], "newlin": [82, 135, 180], "tab": [82, 135, 261, 290], "abc": [82, 135, 202, 290, 292], "harmon": [82, 84, 135, 137], "recal": [82, 84, 135, 137], "equat": [82, 84, 135, 137, 194, 283, 289], "answer_start": [82, 135], "177": [82, 135, 295], "denver": [82, 135], "bronco": [82, 135], "nfl": [82, 135], "team": [82, 135, 196, 285], "afc": [82, 135], "super": [82, 135, 199], "bowl": [82, 135], "50": [82, 135, 194, 199, 203, 266, 280, 289, 295], "56be4db0acb8001400a502ec": [82, 135], "form": [82, 135, 225, 226, 261], "percentag": [82, 135, 188, 220, 286, 294], "bleu_util": [83, 136], "coco_label_map": [83, 136], "coco_tool": [83, 136], "evaluate_squad": [83, 136], "tensorflowmetr": [84, 137], "maintain": [84, 137, 187, 188, 192, 194, 196, 197, 221, 242, 244, 256, 259, 263, 268, 269, 280, 286, 287], "pytorchmetr": [84, 137], "mxnetmetr": [84, 137], "onnxrtqlmetr": [84, 137], "onnxrtitmetr": [84, 137], "metric_registri": [84, 137], "metric_typ": [84, 137], "decorator_metr": [84, 137], "basemetr": [84, 137, 150], "single_output": [84, 137], "hvd": [84, 137, 228], "wrappytorchmetr": [84, 137], "wrapmxnetmetr": [84, 137], "wraponnxrtmetr": [84, 137], "binari": [84, 137, 231, 239, 256, 259, 287], "proport": [84, 137], "were": [84, 137, 247, 280], "pred_list": [84, 137], "pytorchloss": [84, 137], "print": [84, 137, 180, 194, 228, 239, 240, 263, 264, 280, 289, 292], "mae": [84, 137, 239], "compare_label": [84, 137, 150, 239], "error": [84, 119, 137, 159, 176, 188, 194, 225, 239, 245, 266, 267, 270, 286, 289, 292], "actual": [84, 137, 187, 228], "compar": [84, 137, 180, 184, 187, 188, 193, 194, 227, 239, 243, 264, 280, 283, 286, 288, 290, 292], "pred": [84, 137, 239], "rmse": [84, 137, 239, 292], "squar": [84, 119, 137, 159, 188, 225, 239, 266, 292], "estim": [84, 137, 146, 292], "tensorflowtopk": [84, 137], "k": [84, 137, 150, 239, 263, 280], "among": [84, 137, 184, 194, 243, 255, 289], "outcom": [84, 137], "consid": [84, 137, 196, 220, 221, 226, 262, 292], "find": [84, 91, 116, 137, 154, 180, 193, 202, 225, 238, 247, 254, 258, 261, 262, 264, 266, 280, 286, 288, 289, 290, 292], "num_correct": [84, 137], "num_sampl": [84, 137], "generaltopk": [84, 137], "cocomapv2": [84, 137, 239], "anno_path": [84, 137, 239], "95": [84, 137, 239, 295], "map_kei": [84, 137], "detectionboxes_precis": [84, 137], "output_index_map": [84, 137, 239], "tensorflowmap": [84, 137], "tensorflowcocomap": [84, 137], "tensorflowvocmap": [84, 137], "squadf1": [84, 137, 239], "miou": [84, 137], "num_class": [84, 137], "21": [84, 137, 194, 249, 250, 272, 275, 276, 281, 289, 295], "iou": [84, 137], "intersect": [84, 137, 202, 239], "union": [84, 137, 169, 192, 239, 272], "onnxrtglu": [84, 137], "dlrm": [84, 137], "modelconvers": 86, "typic": [86, 113, 199, 201, 227, 229, 233, 266, 280, 295], "saved_model": [86, 192, 284], "basicna": 87, "model_build": [87, 90], "conf_fnam": 87, "modul": [89, 95, 105, 106, 185, 188, 189, 193, 198, 221, 222, 226, 235, 239, 240, 242, 280, 282, 285, 286, 290, 293], "basic_na": 89, "nas_util": 89, "nasbas": [90, 199], "nas_registri": 91, "nas_method": 91, "create_search_space_pool": 91, "idx": [91, 223], "enumer": [91, 169, 184, 202, 226, 227, 228, 240, 243, 279, 280, 290], "find_pareto_front": 91, "pareto": [91, 199], "front": [91, 199], "n_point": 91, "n_metric": 91, "n_pareto_point": 91, "gridsearch": 92, "whole": [92, 183, 194, 204, 263, 283, 295], "randomsearch": 92, "bayesianoptimizationsearch": 92, "gradient": [93, 188, 194, 201, 235, 240, 280, 281, 295], "sensit": [93, 109, 235, 280], "pruner": [93, 94, 95, 96, 97, 99, 104, 105, 107, 110, 240, 280, 294], "gradientsensitivityprun": 93, "global_config": [93, 94, 96, 97, 98], "pytorchmodel": [93, 94, 96, 97, 98, 147], "mai": [93, 94, 96, 97, 98, 185, 188, 191, 194, 196, 197, 203, 220, 221, 225, 230, 231, 237, 241, 254, 258, 264, 267, 269, 281, 283, 286, 289, 292], "overwritten": [93, 94, 96, 97, 98, 249], "group": [94, 188, 194, 201, 235, 280, 286, 290, 291, 292, 295], "lasso": [94, 235, 280], "grouplassoprun": 94, "legaci": 95, "gradient_sensit": 95, "group_lasso": 95, "basicmagnitudeprun": 96, "lock": [97, 98, 235, 279, 280], "patternlockprun": [97, 109], "pruner_registri": 98, "clase": 98, "pruningconf": [99, 104], "tfpruningcallback": [99, 104], "nc_model": [99, 104], "input_model": [99, 104, 242, 264, 265, 266, 290], "callback": [99, 104, 169, 172, 198, 240, 279, 280, 283], "pure": [99, 104, 280], "tile_pattern": 101, "pattern_registri": 102, "pattern_typ": 102, "patternbas": 102, "mask_shap": [102, 103], "is_contigu": 102, "tile": [103, 221], "tilepatternbas": 103, "parent": [103, 109, 111, 290], "tilepattern_1x1": 103, "1x1": [103, 226, 240, 280], "tilepattern_2x2": 103, "2x2": [103, 194, 289], "tilepattern_1x16": 103, "1x16": 103, "tilepattern_4x1": 103, "tilepattern_1x2": 103, "1x2": [103, 194, 289], "logger": [105, 170, 173, 180], "prune_util": 105, "register_pattern": 107, "registri": [107, 109, 111, 199], "sure": [107, 109, 111, 219, 263], "get_pattern": 107, "assertionerror": [107, 108, 109, 138], "unit": [107, 197, 269, 280], "part": [107, 109, 185, 194, 198, 236, 241, 256, 259, 269, 271, 280, 284, 289, 293], "is_glob": 107, "contrast": [107, 291], "individu": [107, 194, 196, 269, 280, 289], "patternnxm": 107, "kept": 107, "block_siz": [107, 286], "direct": [107, 189, 280], "hidden": [107, 202], "patternninm": 107, "check_config": 108, "prune_config": 108, "everyth": [108, 249], "reset_non_value_to_default": 108, "undefin": 108, "process_and_check_config": 108, "non": [108, 180, 188, 198, 225, 286, 292], "process_config": 108, "obtain": [108, 194, 198, 203, 269, 280, 288, 289, 292], "parse_to_prun": 108, "keep": [108, 155, 198, 202, 221, 260, 261, 287], "parse_not_to_prun": 108, "register_prun": 109, "get_prun": 109, "module_nam": [109, 180], "begin": [109, 187, 221, 222, 226, 227, 240, 280, 292], "current_sparsity_ratio": 109, "global_step": 109, "update_frequency_on_step": [109, 282], "target_sparsity_ratio": 109, "final": [109, 187, 194, 203, 240, 247, 278, 280, 283, 287, 292], "max_sparsity_ratio_per_lay": [109, 282], "magnitudeprun": 109, "snipprun": 109, "network": [109, 157, 184, 194, 199, 220, 226, 227, 230, 240, 243, 263, 281, 283, 289, 292], "connect": [109, 261, 263, 270, 280, 288], "arxiv": [109, 184, 188, 194, 201, 220, 243, 280, 281, 286, 289], "ab": [109, 192, 194, 280, 283, 289], "1810": 109, "02340": 109, "snipmomentumprun": 109, "moreoev": 109, "updat": [109, 137, 150, 177, 188, 231, 238, 239, 240, 247, 252, 255, 271, 280, 286, 289, 292, 293], "momentum": [109, 235, 240, 280, 294], "while": [109, 116, 154, 185, 187, 188, 192, 194, 202, 203, 223, 229, 235, 241, 244, 249, 261, 263, 280, 282, 283, 286, 289], "spars": [109, 223, 281], "least": [110, 197, 240, 280, 292], "templat": [110, 240, 280], "tree": [110, 126, 166, 269], "huggingface_model": [110, 265], "eager": [110, 183, 187, 188, 189, 201, 228, 235, 283, 285, 290], "config_file_path": 110, "pruner_info": 110, "register_schedul": 111, "get_schedul": 111, "gradual": [111, 280], "oneshotschedul": 111, "iterativeschedul": 111, "quantconf": 112, "separ": [113, 196, 221, 234, 237, 269, 271, 279, 282], "append": [113, 116, 154, 198, 227, 240, 279], "There": [113, 115, 151, 153, 183, 187, 191, 194, 221, 225, 226, 232, 235, 240, 244, 266, 268, 269, 286, 289, 292, 294], "opt_model": [113, 183, 187, 240], "fulli": [113, 190, 240, 269, 283, 289], "train_func": [113, 169, 228, 240, 283], "automixedprecisiontunestrategi": [114, 152], "basictunestrategi": [115, 153], "stage": [115, 120, 151, 153, 160, 226, 280, 290, 292], "polici": [115, 119, 151, 153, 159, 193, 196, 201, 294, 296], "bayesiantunestrategi": [116, 154], "acq_max": [116, 154], "ac": [116, 154], "gp": [116, 154], "y_max": [116, 154], "n_warmup": [116, 154], "10000": [116, 154, 280], "n_iter": [116, 154], "acquisit": [116, 154], "gaussian": [116, 154, 292], "relev": [116, 154, 203, 204, 221, 266, 280], "limit": [116, 154, 180, 184, 188, 189, 192, 201, 225, 226, 238, 243, 283, 286, 287, 290], "acq": [116, 154], "randomst": [116, 154], "scipi": [116, 154], "x_max": [116, 154], "targetspac": [116, 154], "pbound": [116, 154], "9527": [116, 154, 240, 294], "allow": [116, 154, 185, 187, 188, 193, 226, 228, 239, 240, 241, 263, 268, 280, 282, 286, 289, 292, 294], "duplic": [116, 154], "bayesianoptim": [116, 154], "exhaustivetunestrategi": [117, 156], "auto_mixed_precis": [118, 158], "msetunestrategi": [119, 159], "those": [119, 159, 180, 187, 192, 194, 225, 226, 227, 234, 240, 241, 279, 280, 283, 292], "mse_v2tunestrategi": [120, 160], "revert": [120, 128, 160, 168, 292], "fx": [120, 160, 183, 185, 187, 235, 241, 250, 251, 265, 281, 283, 285], "randomtunestrategi": [121, 161], "strategy_registri": [122, 162, 292], "tunestrategi": [122, 162, 292], "tuning_sampl": [124, 164], "tuning_spac": [124, 125, 127, 164, 165, 167], "tuning_struct": [124, 125, 126, 164, 165, 166], "tuningsamplerregistri": 125, "tuningsampl": [125, 165], "tuningord": [125, 165], "Not": [125, 126, 165, 166, 180, 199, 221], "tuningspac": [125, 126, 165, 166], "tuning_order_lst": [125, 165], "initial_op_tuning_cfg": [125, 165], "modelwisetuningsampl": [125, 165], "tuning_items_prior": [125, 165], "op_dtype_dict": [125, 165], "optuningconfig": [125, 126, 127, 165, 166, 167], "optypewisetuningsampl": [125, 165], "opwisetuningsampl": [125, 165], "fallbacktuningsampl": [125, 165], "op_dtyp": [125, 165], "accumul": [125, 165, 184, 188, 243, 292], "skip_first": [125, 165], "smoothquantsampl": [125, 165], "tuningitem": [126, 166], "item_typ": [126, 166], "capabl": [126, 166, 185, 188, 194, 203, 204, 219, 232, 240, 241, 252, 263, 268, 280, 282, 283, 292, 294], "pattern_to_intern": [126, 166], "default_dtyp": [126, 166], "pattern_to_path": [126, 166], "quant_mode_from_pattern": [126, 166], "internal_pattern": [126, 166], "initial_tuning_cfg_with_quant_mod": [126, 166], "op_name_typ": [126, 166], "quant_mod": [126, 166, 203, 204], "cfg": [126, 166, 172, 203, 204], "step1": [126, 166], "step2": [126, 166], "complet": [126, 166, 202, 203, 280, 283, 292, 294, 295], "step3": [126, 166], "step4": [126, 166], "step5": [126, 166], "op_typ": [127, 167, 186, 187], "op_quant_mod": [127, 167], "ordereddefaultdict": [128, 168], "extract_data_typ": [128, 168], "data_typ": [128, 168], "sign": [128, 168, 188, 194, 197, 201, 204, 220, 263, 281, 283, 286, 288], "unsign": [128, 168, 204, 286], "reverted_data_typ": [128, 168], "signed_flag": [128, 168], "get_adaptor_nam": [128, 168], "experiment": [129, 199, 223, 227, 228, 230, 236, 240, 280, 282, 283, 287, 291], "sub_class": [137, 150], "register_customer_metr": 137, "mani": [137, 150, 188, 192, 194, 221, 222, 236, 286, 292, 294], "tell": [137, 150, 282], "topk": [137, 150, 228, 239, 240, 263, 283], "matrix": [137, 150, 191, 194, 201, 252, 293], "frozen": [138, 146, 150, 242], "ckpt": [138, 146, 150, 295], "savedmodel": [138, 146, 150], "onnx_ml_pb2": [138, 242], "gluon": [138, 150, 242], "hybirdblock": [138, 150], "basemodel": [139, 192], "plai": [139, 188, 194, 281, 286, 289], "role": [139, 188, 194, 286, 289], "base_model": 140, "keras_model": 140, "mxnet_model": 140, "nets_factori": 140, "onnx_model": [140, 264], "tensorflow_model": [140, 266], "torch_model": 140, "kerasmodel": 141, "get_model_fwk_nam": 142, "fwk": 142, "mxnetmodel": 143, "net": [144, 201], "factori": 144, "tfslimnetsfactori": 144, "onnxmodel": 145, "get_model_typ": 146, "validate_graph_nod": 146, "node_nam": [146, 203], "compat": [146, 197, 228, 242, 256, 259, 261, 280, 287], "graphdef": [146, 242], "validate_and_inference_input_output": 146, "input_tensor_nam": 146, "output_tensor_nam": 146, "graph_sess": 146, "sess": 146, "graph_def_sess": 146, "frozen_pb_sess": 146, "load_saved_model": 146, "saved_model_tag": 146, "signatur": 146, "tag": [146, 194, 289, 290], "metagraphdef": 146, "analyz": [146, 288, 289, 290], "input_tensor": 146, "output_tensor": 146, "try_loading_kera": 146, "keras_sess": 146, "slim_sess": 146, "checkpoint_sess": 146, "estimator_sess": 146, "input_fn": 146, "saved_model_sess": 146, "tensorflowbasemodel": 146, "tensorflowsavedmodelmodel": 146, "tensorflowllmmodel": 146, "exceed": 146, "protobuf": [146, 264], "2gb": 146, "tensorflowqatmodel": 146, "tensorflowcheckpointmodel": 146, "checkpoint": [146, 179, 242], "tensorflowmodel": 146, "pytorchbasemodel": 147, "pytorchfxmodel": 147, "ipexmodel": 147, "driven": [148, 201, 240, 261, 278, 290], "develop": [148, 184, 185, 197, 198, 221, 236, 240, 241, 243, 244, 250, 261, 267, 280, 281, 285, 288], "objective_registri": 148, "objective_custom_registri": 148, "obj_cl": 148, "eural_compressor": 148, "objective_cl": 148, "user_object": 148, "__class__": 148, "__name__": 148, "objective_cfg": 148, "deep_get": 148, "usr_cfg": 148, "deep_set": 148, "user_obj_cfg": 148, "With": [148, 192, 194, 198, 202, 204, 222, 240, 249, 254, 258, 262, 268, 278, 280, 281, 283, 288, 289, 292, 295], "easili": [148, 193, 194, 202, 245, 249, 261, 278, 289], "special": [148, 189, 198, 222, 239, 240, 278, 280, 286, 293], "peak": [148, 278], "multiobject": 148, "metric_criterion": 148, "metric_weight": 148, "obj_criterion": 148, "obj_weight": 148, "is_measur": 148, "calib_func": [150, 285], "entir": [150, 169, 186, 191, 198, 203, 204, 220, 268, 280], "autotunestrategi": 151, "level": [155, 176, 184, 194, 196, 243, 271, 289, 292], "conservativetunestrategi": 155, "o0": [155, 292], "who": [155, 196], "hawq_v2tunestrategi": 157, "hawq": [157, 292], "v2": [157, 186, 222, 228, 230, 231, 236, 238, 250, 287, 289, 292, 293, 295], "hessian": [157, 188, 286, 292], "made": [157, 194, 202, 283, 287, 292], "small": [157, 188, 194, 199, 266, 267, 280, 286, 292, 295], "impact": [157, 280, 287, 292], "tunestrategymeta": 162, "metaclass": 162, "lowerbitssampl": 165, "blockfallbacktuningsampl": 165, "op_block_lst": 165, "target_dtyp": 165, "alpha_list": 165, "weightonlyquantsampl": 165, "quanttyp": 168, "quantopt": 168, "quant_typ": 168, "quant_opt": 168, "preprocess_user_cfg": 168, "op_user_cfg": 168, "op_user_cfg_modifi": 168, "group_siz": [168, 188, 193, 286], "32": [168, 184, 185, 192, 193, 228, 234, 243, 286, 295], "build_slave_faker_model": 168, "slave": [168, 292], "virtual": [168, 281], "classregist": 168, "loop": [169, 198, 199, 203, 204, 232, 271, 288, 292], "compressionmanag": 169, "deal": 169, "pruningconfig": 169, "orchestr": [169, 201, 235, 293], "on_train_begin": [169, 198, 226, 227, 240, 279, 280, 283], "train_loop": [169, 240, 279], "on_epoch_begin": [169, 172, 226, 227, 240, 279], "on_step_begin": [169, 172, 226, 227, 240, 279, 280], "on_after_compute_loss": [169, 226, 227, 240, 279], "backward": [169, 194, 226, 227, 228, 240, 279, 280, 283, 287], "on_before_optimizer_step": [169, 226, 227, 240, 279, 280], "on_step_end": [169, 172, 226, 227, 240, 279], "on_epoch_end": [169, 172, 226, 227, 240, 279], "on_train_end": [169, 226, 227, 240, 279, 280, 283], "path_to_sav": 169, "manag": [169, 172, 240, 244, 245, 255], "top1": [169, 239, 263, 280, 283, 295], "callbacks_list": 169, "layerhistogramcollector": 170, "histogram": [170, 180, 263, 290], "num_bin": 170, "8001": [170, 269, 274, 275, 276], "layer_tensor": 170, "include_lay": 170, "collector": 170, "diverg": [170, 174, 204, 220, 226, 292], "get_func_from_config": 172, "func_dict": 172, "get_preprocess": 172, "get_metr": 172, "get_postprocess": 172, "get_algorithm": 172, "algo": 172, "create_dataset": 172, "cfg_preprocess": 172, "cfg_filter": 172, "create_dataload": 172, "dataloader_cfg": 172, "create_eval_func": 172, "postprocess_cfg": 172, "fp32_baselin": [172, 202], "baselin": [172, 193, 288, 289, 290], "create_train_func": 172, "train_cfg": 172, "Their": 172, "auxiliari": 173, "collect_layer_histogram": 173, "create_obj_from_config": 173, "kl_diverg": 173, "load_huggingfac": [173, 240], "neural_insights_util": 173, "weights_detail": 173, "pretrain": [175, 244, 250], "optimizedmodel": 175, "from_pretrain": [175, 201, 240], "save_for_huggingface_upstream": [175, 240], "output_dir": [175, 189, 240, 249, 250, 265, 266, 272, 275, 276], "export_compressed_model": [175, 286], "saved_dir": [175, 286], "use_optimum_format": [175, 286], "enable_full_rang": [175, 284, 286], "compression_dtyp": [175, 286], "int32": [175, 188, 223, 286], "compression_dim": [175, 286], "scale_dtyp": [175, 286], "_type_": 175, "leverag": [175, 183, 187, 190, 193, 194, 199, 201, 226, 230, 244, 261, 279, 283, 286, 292], "symmetr": [175, 192, 204, 283, 286, 291, 292], "comoress": 175, "float16": [175, 188, 223, 286], "msg": [176, 270, 274, 275], "debug": [176, 225, 254, 258, 262, 292, 293], "fatal": 176, "warn": [176, 221], "alia": [176, 180, 246, 251], "register_neural_insights_workload": 177, "workload_loc": [177, 180], "workload_mod": 177, "workload_nam": 177, "uuid": 177, "update_neural_insights_workload": 177, "workload_uuid": 177, "statu": [177, 189, 196, 222, 243, 271, 274, 275, 276, 278, 280], "update_neural_insights_workload_accuracy_data": 177, "baseline_accuraci": 177, "optimized_accuraci": 177, "get_model_path": 177, "is_int8_model": 179, "load_weight_onli": 179, "checkpoint_dir": 179, "layer_wis": [179, 284], "qconfig": [179, 188, 286, 290], "pt": [179, 188, 236, 242, 265, 281, 283, 285, 286], "history_cfg": 179, "best_configur": 179, "best_model_weight": 179, "snapshot": [179, 265], "recover_model_from_json": 179, "json_file_path": 179, "recov": [179, 180, 202, 227], "cfg_from_fil": 180, "yaml_fil": [180, 223, 228], "version1_lt_version2": 180, "version1": 180, "version2": 180, "version1_gt_version2": 180, "greater": [180, 192, 274, 280, 292], "version1_eq_version2": 180, "version1_gte_version2": 180, "version1_lte_version2": 180, "lazyimport": 180, "lazi": 180, "till": [180, 292], "singleton": 180, "time_limit": 180, "context": [180, 188, 194, 282, 286], "get_siz": 180, "seen": [180, 202], "recurs": 180, "compute_spars": 180, "fault_tolerant_fil": 180, "temporari": [180, 196], "equal_dict": 180, "d1": 180, "d2": 180, "compare_kei": 180, "ignore_kei": 180, "except": [180, 221, 267, 283, 284], "ignor": [180, 188, 194, 220, 223, 286, 289, 292], "cpuinfo": 180, "dump_elapsed_tim": [180, 202], "customized_msg": 180, "elaps": 180, "combine_histogram": 180, "old_hist": 180, "arr": 180, "old": [180, 186, 240, 287], "get_tensor_histogram": 180, "tensor_data": [180, 181], "bin": [180, 231], "2048": [180, 188, 201, 286], "get_all_fp32_data": 180, "get_tuning_histori": 180, "tuning_history_path": 180, "num": 180, "offlin": [180, 186, 191, 192, 194, 196, 240, 283, 289], "str2arrai": 180, "dequantize_weight": 180, "weight_tensor": 180, "min_filter_tensor": 180, "max_filter_tensor": 180, "dequant": [180, 194, 198, 203, 289, 290], "scale_info": 180, "captureoutputtofil": 180, "tmp_file_path": 180, "stream": [180, 295], "sy": [180, 221, 247], "stderr": 180, "captur": [180, 187, 188], "statist": [180, 181], "header": [180, 231], "field_nam": 180, "output_handl": 180, "printer": 180, "global_st": 180, "load_data_from_pkl": 180, "pkl": [180, 265], "dump_data_to_loc": 180, "show_memory_info": 180, "hint": 180, "show": [180, 184, 194, 196, 226, 228, 240, 243, 247, 262, 263, 264, 266, 269, 274, 275, 276, 289, 292, 293], "dump_class_attr": 180, "compare_object": 180, "obj1": 180, "obj2": 180, "ignore_attr": 180, "comparison": [180, 286, 287, 290], "alias_param": 180, "param_nam": 180, "param_alia": 180, "alias": [180, 221], "print_tabl": 180, "column_map": 180, "table_entri": 180, "titl": [180, 237, 262, 292], "insert_newlin": 180, "tabl": [180, 184, 204, 225, 230, 243, 264, 266, 295], "prettyt": 180, "column": [180, 188, 194, 286, 289], "func": [180, 283, 294], "handler": [180, 292], "row": [180, 194, 225, 264, 289], "decim": 180, "get_tensors_info": 180, "about": [180, 196, 221, 222, 240, 266, 267, 280, 285, 292, 293, 295], "get_weights_detail": 180, "weightdetail": 180, "dump_tabl": 180, "filepath": [180, 221], "file_typ": 180, "csv": [180, 199, 264, 265], "extens": [180, 185, 186, 187, 189, 194, 199, 201, 202, 221, 232, 235, 236, 238, 240, 241, 242, 245, 250, 251, 252, 256, 259, 260, 264, 280, 281, 283, 286, 289, 292, 293, 294], "dump_table_to_csv": 180, "get_number_of_socket": 180, "platform": [180, 194, 201, 235, 244, 252, 271, 281, 283], "opentri": 180, "activation_min": 180, "activation_max": 180, "print_op_list": 180, "get_op_list": 180, "minmax_file_path": 180, "input_model_tensor": 180, "optimized_model_tensor": 180, "activation_min_max": 180, "calculate_ms": 180, "mse_metric_gap": 180, "fp32_tensor": 180, "dequantize_tensor": 180, "euclidean": [180, 226], "distanc": [180, 226], "check_key_exist": 180, "weightsdetail": 181, "input_tensor_data": 181, "optimized_tensor_data": 181, "weightsstatist": 181, "bitwidth": 183, "factor": [183, 186, 188, 192, 194, 286, 289, 295], "observ": [183, 187, 188, 189, 204, 286, 288, 290, 292], "runtim": [183, 194, 197, 201, 202, 203, 205, 222, 225, 229, 232, 235, 241, 243, 246, 251, 252, 282, 286, 287, 292], "w8a8": [183, 187, 188, 194, 284, 286], "x86inductorquant": 183, "four": [183, 187, 193, 271, 290, 295], "prepar": [183, 184, 186, 187, 188, 189, 192, 194, 198, 223, 228, 233, 263, 274, 275, 276, 280, 283], "neural_compressor": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 199, 201, 204, 219, 221, 222, 223, 225, 226, 227, 228, 230, 233, 234, 239, 240, 241, 242, 243, 263, 264, 278, 279, 280, 282, 283, 284, 285, 287, 288, 289, 291, 292, 294], "dynamicquantconfig": 183, "userfloatmodel": [183, 187], "exported_model": [183, 187], "quant_config": [183, 184, 186, 187, 188, 189, 190, 191, 192, 243], "prepared_model": [183, 186, 187], "q": [183, 187, 189, 194, 286, 289], "dq": [183, 187, 189, 194, 289], "_inductor": [183, 187], "freez": [183, 187, 244, 280], "set_loc": [183, 186, 187, 188, 190], "releas": [183, 187, 201, 236, 250, 252, 254, 258, 260, 272, 275, 276, 296], "breakthrough": [184, 243], "emerg": [184, 243, 289], "analysi": [184, 243, 244, 261, 280, 288], "chatbot": [184, 243, 281], "fuel": [184, 243], "llm": [184, 186, 188, 191, 194, 243, 280, 281, 284, 286, 289], "nevertheless": [184, 243], "power": [184, 192, 226, 240, 243, 255, 281], "come": [184, 238, 243, 292], "challeng": [184, 243, 284], "explos": [184, 243], "growth": [184, 185, 240, 241, 243, 280], "pose": [184, 243, 284], "obstacl": [184, 243], "practic": [184, 243], "preserv": [184, 188, 220, 243, 280, 286], "ai": [184, 201, 243, 244, 281, 285, 293], "mx": [184, 189, 243], "promot": [184, 188, 243], "microsoft": [184, 201, 202, 243], "msfp": [184, 243], "mxfp8": [184, 243], "fp8": [184, 189, 201, 243, 281], "e5m2": [184, 243], "e8m0": [184, 243], "e4m3": [184, 243], "mxfp6": [184, 243], "fp6": [184, 243], "e3m2": [184, 243], "e2m3": [184, 243], "mxfp4": [184, 243], "fp4": [184, 188, 201, 243, 286], "e2m1": [184, 188, 243, 286], "mxint8": [184, 243], "At": [184, 197, 203, 243, 267, 271, 292], "equival": [184, 186, 188, 191, 194, 201, 243, 281, 286, 289], "demonstr": [184, 193, 201, 229, 243, 244, 274, 275, 276, 290], "abil": [184, 202, 203, 223, 232, 243, 289], "occupi": [184, 243], "incur": [184, 243], "energi": [184, 243], "cost": [184, 188, 194, 243, 283, 286], "silicon": [184, 243], "seamlessli": [184, 243, 268, 280, 292], "offer": [184, 192, 223, 243], "meticul": [184, 243], "craft": [184, 243], "empow": [184, 243], "sacrif": [184, 243, 281], "workflow": [184, 201, 203, 204, 225, 226, 230, 236, 241, 243, 256, 259, 263, 290, 293], "shown": [184, 186, 194, 199, 222, 225, 226, 239, 240, 243, 255, 264, 266, 278, 279, 280, 284, 289, 292], "explor": [184, 202, 243], "focus": [184, 188, 192, 196, 202, 243], "distinct": [184, 243], "hardwar": [184, 187, 201, 202, 226, 235, 240, 243, 261, 280, 281, 282], "friendli": [184, 194, 232, 240, 243, 281, 289, 293, 294], "adapt": [184, 196, 203, 223, 243, 252, 281], "granular": [184, 194, 202, 203, 204, 232, 235, 243, 247, 283, 289, 294], "fall": [184, 243], "consumpt": [184, 194, 243, 289], "frac": [184, 194, 225, 243, 289], "amax": [184, 243], "blocksiz": [184, 243], "expon": [184, 243], "floor": [184, 243], "log2": [184, 243], "represent": [184, 188, 194, 196, 198, 220, 227, 243, 280, 283], "rmin": [184, 192, 194, 243, 283], "mxquantconfig": [184, 243], "w_dtype": [184, 186, 187, 243], "act_dtyp": [184, 186, 187, 190, 243], "woq": [184, 238, 243], "user_model": [184, 243], "darvish": [184, 243], "rouhani": [184, 243], "bita": [184, 243], "et": [184, 188, 194, 220, 243, 286, 289], "al": [184, 188, 194, 220, 243, 286, 289], "push": [184, 188, 194, 197, 243, 280, 286, 289], "narrow": [184, 243], "inferenc": [184, 243], "cloud": [184, 197, 201, 243, 271, 281], "33": [184, 238, 243, 295], "2020": [184, 243], "10271": [184, 243], "10281": [184, 243], "ocp": [184, 243], "deep": [184, 185, 192, 194, 201, 202, 203, 222, 235, 236, 240, 241, 243, 244, 246, 249, 250, 252, 255, 261, 281, 283, 292, 293], "learn": [184, 185, 188, 192, 194, 201, 202, 203, 222, 223, 230, 234, 235, 236, 240, 241, 243, 244, 246, 249, 250, 252, 255, 256, 259, 261, 280, 281, 283, 289, 290, 292, 293], "preprint": [184, 188, 194, 220, 243, 280, 286, 289], "2310": [184, 243], "10537": [184, 243], "2023": [184, 188, 194, 201, 243, 276, 280, 286, 289], "recent": [185, 240, 241], "complex": [185, 221, 240, 241, 280], "significantli": [185, 188, 240, 241, 264, 266, 280, 292], "propos": [185, 188, 194, 199, 202, 226, 241, 286, 289], "googl": [185, 201, 221, 241, 281], "bfloat16": [185, 241, 244, 252, 285], "ieee": [185, 194, 241, 289], "half": [185, 188, 241, 252], "wide": [185, 188, 194, 201, 229, 241, 280, 283], "sixteen": [185, 241], "bandwidth": [185, 188, 194, 240, 241, 286], "3rd": [185, 194, 241, 281, 283, 285], "gen": [185, 194, 238, 241, 281, 283, 285], "xeon": [185, 194, 201, 236, 237, 238, 241, 281, 283, 285, 295], "scalabl": [185, 192, 194, 201, 236, 238, 241, 281, 283, 285], "processor": [185, 194, 201, 238, 241, 269, 281, 283, 285], "codenam": [185, 238, 241], "cooper": [185, 236, 241, 281], "lake": [185, 236, 241, 281], "boost": [185, 201, 241, 245, 261, 280, 281], "purpos": [185, 186, 187, 188, 190, 232, 241, 261, 263, 282, 283], "x86": [185, 241], "instruct": [185, 186, 194, 203, 204, 226, 236, 241, 256, 259, 263, 264, 265, 266, 280, 281, 282, 283, 289, 295], "avx512": [185, 194, 241, 283], "vcvtne2ps2bf16": [185, 241], "vcvtneps2bf16": [185, 241], "vdpbf16p": [185, 241], "dot": [185, 194, 241, 283], "product": [185, 194, 201, 235, 241, 244, 245, 261, 267, 281, 283, 288, 292], "publish": [185, 196, 237, 238, 241, 262, 289], "4th": [185, 194, 238, 281, 283], "isa": [185, 252], "vector": 185, "512": [185, 188], "avx": 185, "16": [185, 223, 236, 274, 286, 295], "754": 185, "complement": [185, 280], "fbgemm": [185, 241, 283], "10004": [185, 188, 189, 198, 199, 202, 222, 226, 227, 228, 232, 235, 241, 243, 279, 282, 284, 286, 294], "avx512_bf16": [185, 241], "11": [185, 194, 236, 238, 239, 241, 263, 289, 292, 295], "avx512_fp16": 185, "eval_fn": [185, 189, 190, 191, 192, 193], "eval_arg": [185, 189, 190, 192], "mixprecisionconfig": 185, "tuningconfig": [185, 189, 190, 191, 192, 193], "eval_acc_fn": [185, 190, 192], "acc": [185, 190, 199, 238, 271, 280, 290, 295], "might": [185, 198, 221, 263, 292], "custom_tune_config": [185, 190, 191, 192, 193], "config_set": [185, 190, 191, 192, 193], "build_torch_model": 185, "tune_config": [185, 189, 190, 191, 192, 193, 203], "acceler": [186, 188, 191, 194, 201, 226, 240, 244, 252, 261, 264, 268, 280, 281, 285, 286, 289, 292], "gigant": [186, 191, 289], "systemat": [186, 191, 289], "outlier": [186, 188, 191, 194, 203, 220, 225, 266, 286, 289], "quantif": [186, 188, 191, 286, 289], "difficult": [186, 191, 193, 194, 202, 289], "migrat": [186, 191, 194, 289, 293], "difficulti": [186, 191, 194, 289], "mathemat": [186, 191, 194, 289], "smoothquantconfig": [186, 191, 192], "run_fn": [186, 187, 188, 189], "descript": [186, 198, 203, 204, 222, 269, 273, 289], "stai": [186, 188, 189, 286, 289], "abov": [186, 187, 188, 190, 194, 202, 203, 204, 226, 263, 264, 266, 269, 280, 283, 289, 292], "lambada": [186, 289], "openai": [186, 289], "sweet": [186, 289], "spot": [186, 289], "region": [186, 289], "paper": [186, 188, 194, 226, 280, 286, 289], "bigscienc": [186, 238, 289, 295], "bloom": [186, 194, 201, 238, 280, 289, 295], "560m": [186, 289], "354": [186, 289], "3542": [186, 289], "1b7": [186, 238, 289], "4634": [186, 289], "4936": [186, 289], "3b": [186, 238, 289], "518": [186, 289], "5185": [186, 289], "7b1": [186, 289, 295], "5764": [186, 289, 295], "5977": [186, 289], "bloomz": [186, 289, 295], "3947": [186, 289], "3930": [186, 289], "4828": [186, 289], "4906": [186, 289], "5018": [186, 289], "4980": [186, 289], "5593": [186, 289, 295], "5552": [186, 289], "facebook": [186, 238, 267, 289, 295], "opt": [186, 194, 201, 238, 249, 280, 289, 292, 295], "125m": [186, 201, 289], "379": [186, 289], "3757": [186, 289], "350m": [186, 289], "4516": [186, 289], "4533": [186, 289], "5789": [186, 289], "5742": [186, 289], "7b": [186, 238, 289, 295], "6365": [186, 289], "6404": [186, 289], "6769": [186, 289, 295], "6804": [186, 289, 295], "13b": [186, 238, 289, 295], "6872": [186, 289], "6814": [186, 289], "30b": [186, 238, 289, 295], "7149": [186, 289], "7128": [186, 289], "66b": [186, 289], "7398": [186, 289], "7326": [186, 289], "llama": [186, 201, 238, 280, 281, 284, 286, 289, 295], "7361": [186, 289, 295], "7357": [186, 289], "7627": [186, 289, 295], "7590": [186, 289], "7759": [186, 289, 295], "7840": [186, 289], "65b": [186, 289], "7908": [186, 289], "7957": [186, 289], "eleutherai": [186, 201, 238, 265, 289, 295], "gpt": [186, 201, 238, 265, 280, 289, 295], "j": [186, 194, 201, 238, 265, 280, 289, 295], "6b": [186, 238, 265, 289, 295], "6831": [186, 289, 295], "6821": [186, 194, 289], "mbzuai": [186, 289], "lamini": [186, 280, 289], "124m": [186, 289], "3804": [186, 289], "3887": [186, 289], "774m": [186, 289], "5048": [186, 289], "5057": [186, 289], "5b": [186, 289], "5443": [186, 289, 295], "5436": [186, 289], "mosaicml": [186, 289, 295], "mpt": [186, 280, 289, 295], "chat": [186, 238, 289, 295], "655": [186, 289, 295], "6499": [186, 289], "stabilityai": [186, 289], "stablelm": [186, 289], "4172": [186, 289], "4149": [186, 289], "togethercomput": [186, 289], "redpajama": [186, 289], "incit": [186, 289], "6542": [186, 289], "6735": [186, 289], "6718": [186, 289], "6740": [186, 289, 295], "6569": [186, 289], "6621": [186, 289], "v0": [186, 225, 238, 266, 289, 290], "7143": [186, 289], "7221": [186, 289], "6895": [186, 289], "6953": [186, 289, 295], "databrick": [186, 238, 289, 295], "dolli": [186, 238, 280, 289, 295], "6866": [186, 289, 295], "6297": [186, 289], "6247": [186, 289], "tiiuae": [186, 238, 289, 295], "falcon": [186, 201, 238, 280, 289, 295], "6437": [186, 289, 295], "6392": [186, 289], "asterisk": [186, 289], "gt": [186, 188, 223, 289, 291], "retrain": [187, 227], "involv": 187, "improv": [187, 188, 194, 197, 220, 221, 240, 244, 261, 262, 264, 280, 281, 283, 285, 286, 292, 293, 295], "philosophi": [187, 192, 283], "request": [187, 201, 269, 270, 271, 274, 275, 276, 283], "would": [187, 194, 197, 240, 265, 280, 283, 289], "appropri": [187, 193, 194, 196, 220, 289], "crucial": [187, 280], "occur": 187, "jit": [187, 244, 246, 251, 289, 290], "effect": [187, 188, 202, 280, 281], "intel_extension_for_pytorch": 187, "staticquantconfig": [187, 190, 191, 192, 193], "act_sym": [187, 190, 192, 193], "act_algo": 187, "minmax": [187, 188, 203, 204, 220, 232, 283, 294], "program": [187, 201, 228, 237, 244, 261], "fc1": 187, "dynamo": [187, 189], "qd": 187, "As": [188, 194, 198, 203, 222, 226, 239, 240, 255, 266, 280, 286, 292], "becom": [188, 194, 202, 230, 280, 286], "preval": [188, 194, 286], "grow": [188, 194, 286], "demand": [188, 194, 286], "modern": [188, 194, 246, 286], "trade": [188, 194, 286], "off": [188, 194, 197, 286], "bottleneck": [188, 194, 286], "deploi": [188, 193, 194, 197, 226, 240, 267, 271, 286, 292], "roughli": [188, 194, 286], "speak": [188, 194, 286], "move": [188, 194, 198, 267, 282, 286, 287], "count": [188, 194, 199, 223, 286], "p": [188, 194, 201, 262, 263, 286], "theoret": [188, 194, 283, 286], "capac": [188, 194, 286, 288], "flop": [188, 194, 286], "forward": [188, 194, 203, 240, 263, 280, 282, 283, 286, 289, 290], "f": [188, 194, 221, 226, 228, 283, 286, 289], "famou": [188, 194, 286], "scenario": [188, 189, 194, 202, 219, 226, 240, 280, 286], "approx": [188, 194, 286], "bmm": [188, 194, 286], "past": [188, 194, 202, 286], "howev": [188, 194, 267, 280, 286, 289], "100x": [188, 194, 286], "besid": [188, 194, 202, 226, 266, 286], "mention": [188, 194, 280, 286], "caus": [188, 194, 203, 222, 245, 264, 266, 280, 286], "straightforward": [188, 192, 194, 280, 286, 289], "larger": [188, 194, 203, 280, 286, 289], "introduc": [188, 194, 202, 203, 204, 232, 240, 283, 286, 287, 289, 293], "think": [188, 286], "veri": [188, 194, 240, 262, 266, 283, 286, 292, 293], "intuit": [188, 194, 286, 289], "uniformli": [188, 286], "qlora": [188, 194, 286], "uniform": [188, 220, 286], "nf4": [188, 201, 286], "prove": [188, 194, 220, 286, 289], "highli": [188, 281, 286], "invers": [188, 286], "share": [188, 194, 231, 232, 286, 289, 292], "restor": [188, 286], "tailor": 188, "consist": [188, 197, 198, 221, 269, 289, 292], "deliv": [188, 240, 281, 287], "often": [188, 222, 226, 266, 279, 280], "outperform": [188, 199], "signround": 188, "protect": [188, 286], "salient": [188, 280, 286], "greatli": [188, 284, 286], "big": [188, 225, 286], "trainabl": [188, 201, 281, 286], "inspir": [188, 286], "rather": [188, 234, 286], "addition": [188, 204, 228, 280, 292], "incorpor": [188, 203, 204, 227, 280, 292], "l": [188, 220, 226, 290, 292], "norm": 188, "hyper": [188, 294], "laplacian": 188, "heavi": [188, 227], "tail": 188, "nuanc": 188, "weightonlyqu": 188, "sym": [188, 203, 204, 232, 283, 286, 294], "doubl": [188, 281], "along": [188, 236, 280, 286], "normalfloat": [188, 286], "bnb": [188, 286], "comment": [188, 196, 203, 223, 239, 240, 286, 291], "state": [188, 204, 247, 280], "model_path": [188, 225, 274], "rtnconfig": [188, 193], "diagon": [188, 286], "rearrang": [188, 280, 286], "percdamp": [188, 286], "stabil": [188, 286], "mitig": [188, 286], "actord": [188, 286], "gptqconfig": [188, 193], "rate": [188, 194, 240, 280, 283], "mem": 188, "seqlen": [188, 201], "rand": [188, 194, 244, 289], "gap": [188, 225, 242], "autoroundconfig": 188, "clip": [188, 194, 286, 289], "awqconfig": 188, "teqconfig": 188, "train_fn": 188, "skip": [188, 290, 292], "lm": [188, 280], "head": [188, 280], "hqqconfig": 188, "use_sym": [188, 193], "lm_head": [188, 280, 286], "lm_head_config": 188, "quantit": 188, "weightonlylinear": [188, 286], "storag": [188, 194, 233, 239, 263, 266, 286, 289], "date": [188, 286], "saved_result": [188, 189, 242, 265, 286], "orig_model": 188, "yourmodel": 188, "loaded_model": 188, "original_model": 188, "xiao": [188, 194, 286, 289], "guangxuan": [188, 194, 286, 289], "2211": [188, 194, 286, 289], "10438": [188, 194, 286, 289], "wei": [188, 194, 286, 289], "xiui": [188, 194, 286, 289], "suppress": [188, 194, 286, 289], "2209": [188, 194, 286, 289, 295], "13325": [188, 194, 286, 289], "lin": [188, 194, 286], "ji": [188, 194, 286], "2306": [188, 194, 286], "00978": [188, 194, 286], "frantar": [188, 194, 280, 286], "elia": [188, 194, 286], "2210": [188, 194, 286], "17323": [188, 194, 286], "cheng": [188, 194], "wenhua": [188, 194], "descent": [188, 194, 201, 281], "2309": [188, 194], "05516": [188, 194], "badri": 188, "hicham": 188, "shaji": 188, "appu": 188, "quadrat": 188, "onlin": [188, 196, 288], "mobiusml": 188, "io": [188, 267], "blog": [188, 201, 281], "dettmer": [188, 194, 286], "tim": [188, 194, 286], "finetun": [188, 194, 264, 280, 286], "2305": [188, 194, 286], "14314": [188, 194, 286], "grain": [189, 280, 281, 292], "comprehens": [189, 192, 240, 293], "varieti": [189, 193, 229, 282, 292], "classic": [189, 292], "latest": [189, 201, 236, 281, 287], "research": [189, 201, 237, 289, 295], "simul": [189, 204], "emul": [189, 194, 240, 283], "eas": [189, 192, 236, 246, 281], "commit": [189, 192, 196, 197], "extend": [189, 203, 204], "hand": [189, 192, 199], "reus": 189, "conveni": [189, 240, 268], "discuss": [189, 201], "far": 189, "still": [189, 191, 194, 220, 240, 267, 281, 283, 285], "reli": [189, 240, 289], "plan": [189, 235], "agnost": [189, 226], "arbitrari": [189, 240, 279], "deploy": [189, 224, 244, 261, 281, 284, 289], "One": [189, 204, 221, 223, 228, 235, 266, 280, 281, 292], "scope": [189, 197, 203, 240], "baseconfig": [189, 192, 221], "inplac": 189, "monitor": [189, 269, 274, 275, 276], "place": [189, 227, 236, 274, 280, 290, 292], "run_arg": 189, "_description_": 189, "renam": [189, 287], "previou": [189, 194, 203, 204, 240, 280, 287, 289, 290, 292, 293, 295], "orig_sav": 189, "suggest": [189, 198, 221, 288], "rtn": [189, 194, 221, 284, 286], "gptq": [189, 194, 221, 238, 284, 286], "awq": [189, 194, 284, 286], "autoround": [189, 194, 201, 238], "teq": [189, 201, 281, 284, 286], "hqq": 189, "trane": 189, "torchdynamo": [189, 251], "pytorchdynamo": 189, "logic": [189, 294], "torchimport": 189, "fundament": [190, 191, 220, 240], "respons": [190, 274, 275, 276, 283], "val_dataset": [190, 240, 283], "val_dataload": [190, 240, 283], "mydataload": [190, 192, 193], "quantize_model": [190, 191, 192, 194], "qmodel": [190, 192], "good": [190, 196, 283, 292], "base_tun": [190, 192], "autotun": [190, 191, 192, 194, 221], "weight_sym": [190, 192, 193], "static_qu": [190, 221], "weight_dtyp": 190, "weight_granular": 190, "per_tensor": [190, 203, 204, 232, 283, 294], "act_granular": 190, "from_dict": 190, "conv2d_config": 190, "output_graph_def": 191, "sq_config": 191, "static_config": 191, "fusion": [191, 198, 202, 232], "look": [191, 202, 204, 232, 239, 263, 264, 266, 289, 294], "eval_fn_wrapp": 191, "consider": [191, 289], "amount": [191, 289], "experi": [192, 196, 244, 266, 288, 289, 292], "calib_iter": [192, 203], "rule": [192, 225, 244, 280], "partial": [192, 280, 283], "particularli": 192, "critic": [192, 196], "toler": [192, 266], "And": [192, 194, 197, 198, 219, 221, 240, 247, 289], "supplement": 192, "baseline_model": [192, 193], "asymmetr": [192, 204, 283, 286, 292], "onednn": [192, 236, 241, 283], "rmax": [192, 194, 283], "sq": [192, 238, 289], "unseen": [192, 194, 283], "zeropoint": [192, 194, 283], "enough": [192, 194, 283], "unlik": 192, "tradit": [192, 247, 280], "signific": [192, 194, 280, 281, 284, 289], "refin": [192, 234, 280], "instal": [192, 228, 231, 233, 244, 246, 249, 252, 256, 259, 261, 262, 264, 265, 266, 296], "aim": [193, 199, 201, 238, 244, 280, 289, 292, 293], "quickli": [193, 238, 292, 293], "despit": 193, "consum": [193, 222], "certain": [193, 288], "predefin": 193, "primari": [193, 220, 292], "get_woq_tuning_config": 193, "travers": [193, 203, 204, 286, 292], "default_sampl": 193, "trial": [193, 292], "met": [193, 194, 199, 232, 283, 290], "invent": [194, 283], "speed": [194, 220, 240, 252, 280, 281, 283, 292], "int4": [194, 201, 238, 283, 295], "miss": [194, 280, 283], "On": [194, 283, 295], "4x": [194, 199, 283], "speedup": [194, 229, 235, 283], "z": [194, 220, 221, 226, 289], "255": [194, 283, 289], "math": [194, 283], "sometim": [194, 198, 225, 283], "overflow": [194, 283], "issu": [194, 196, 197, 200, 201, 236, 264, 266, 283, 290], "due": [194, 204, 230, 280, 283, 289, 290], "vnni": [194, 229, 235, 282, 283], "solv": [194, 197, 283, 287], "coarsest": [194, 289], "finer": [194, 289, 292], "2d": [194, 289], "matric": [194, 289], "3d": [194, 281, 289], "similarli": [194, 289], "finest": [194, 289], "adopt": [194, 197, 244, 280, 281, 289], "why": [194, 289, 290], "suppos": [194, 289], "6839": [194, 289], "4741": [194, 289], "7451": [194, 289], "9301": [194, 289], "1742": [194, 289], "6835": [194, 289], "formula": [194, 280, 289], "num_bit": [194, 289], "q_min": [194, 289], "q_max": [194, 289], "zp": [194, 289], "q_x": [194, 289], "clamp_": [194, 289], "round_": [194, 289], "w_q": [194, 289], "00296431384049356": [194, 289], "59": [194, 238, 289, 295], "172": [194, 289, 295], "192": [194, 289], "w_dq": [194, 289], "2220": [194, 289], "1510": [194, 289], "2420": [194, 289], "2570": [194, 289], "0500": [194, 289], "1890": [194, 289], "mseloss": [194, 289], "1983354538679123": [194, 289], "6848": [194, 289], "4743": [194, 289], "7440": [194, 289], "9308": [194, 289], "1749": [194, 289], "385297635664756e": [194, 289], "07": [194, 289, 294, 295], "affect": [194, 289], "quantize_per_channel": [194, 289], "x_tmp": [194, 289], "detach": [194, 289], "reshap": [194, 289], "keepdim": [194, 289], "divid": [194, 222, 271, 289, 292], "dequantize_per_channel": [194, 289], "0029": [194, 289, 295], "0036": [194, 289], "162": [194, 289, 295], "48": [194, 289, 295], "72": [194, 238, 289, 295], "93": [194, 289, 295], "207": [194, 289, 295], "139": [194, 289, 295], "6837": [194, 289], "4734": [194, 289], "1751": [194, 289], "637690492221736e": [194, 289], "6376e": [194, 289], "3852e": [194, 289], "cdot": [194, 289], "quantize_per_tensor_absmax": [194, 289], "n_bit": [194, 289], "div_": [194, 289], "0806": [194, 289], "7589": [194, 289], "6038": [194, 289], "3815": [194, 289], "5040": [194, 289], "7174": [194, 289], "5444": [194, 289], "5826": [194, 289], "7772": [194, 289], "5555": [194, 289], "3740": [194, 289], "3253": [194, 289], "0698": [194, 289], "1381": [194, 289], "5972": [194, 289, 295], "0086": [194, 238, 289], "0737": [194, 289], "8298": [194, 289], "6883": [194, 289], "2991": [194, 289], "1601": [194, 289], "6506": [194, 289], "8246": [194, 289], "3924": [194, 289], "3845": [194, 289], "8768": [194, 289], "w_scale": [194, 289], "x_q": [194, 289], "x_scale": [194, 289], "13": [194, 231, 236, 238, 263, 287, 289, 295], "84": [194, 238, 289, 295], "120": [194, 289], "0059755356051027775": [194, 289], "83": [194, 288, 289, 295], "89": [194, 238, 289, 295], "119": [194, 289], "85": [194, 288, 289, 295], "57": [194, 238, 289, 295], "91": [194, 286, 289, 295], "006533813662827015": [194, 289], "y_q": [194, 289], "17509": [194, 289], "7608": [194, 289], "4055": [194, 289], "16599": [194, 289], "21020": [194, 289], "10016": [194, 289], "9860": [194, 289], "22444": [194, 289], "y_dq": [194, 289], "6836": [194, 289], "2970": [194, 289], "1583": [194, 289], "6481": [194, 289], "8207": [194, 289], "3911": [194, 289], "3850": [194, 289], "8763": [194, 289], "major": [194, 234, 266, 283, 289], "peopl": [194, 283], "though": [194, 289], "simplic": [194, 289], "present": [194, 225, 269, 281, 289], "middl": [194, 267, 289], "denot": [194, 289], "fp1": [194, 289], "fp2": [194, 289], "subsect": [194, 289, 294], "explain": [194, 204, 225, 289], "even": [194, 284, 286, 289], "lot": [194, 198, 266, 289], "briefli": [194, 240, 289], "similar": [194, 240, 265, 282, 289, 292, 294], "idea": [194, 201, 263, 280, 289, 292], "attach": [194, 226, 240, 289], "x1": [194, 289, 292], "x2": [194, 289, 292], "layernorm": [194, 289], "excel": [194, 286], "mimic": [194, 283], "done": [194, 198, 226, 227, 245, 261, 270, 274, 275, 280, 283], "adjust": [194, 252, 283, 289], "fact": [194, 283], "ultim": [194, 283], "therefor": [194, 198, 240, 264, 266, 280, 283, 284, 287, 289], "pain": [194, 283], "brought": [194, 242, 245, 252, 283], "lossi": [194, 283], "respect": [194, 196, 232, 280, 289, 294], "chart": [194, 266, 283, 288, 290], "understand": [194, 267, 283, 290, 293], "yvinec": [194, 289], "edouard": [194, 289], "proceed": [194, 289], "cvf": [194, 289], "winter": [194, 289], "confer": [194, 280, 289], "vision": [194, 201, 230, 248, 289], "welcom": [195, 196, 197, 201, 263, 270, 296], "interest": [196, 201, 263, 290], "foster": 196, "particip": [196, 271], "commun": [196, 263], "harass": 196, "everyon": 196, "regardless": 196, "ag": 196, "bodi": 196, "ethnic": 196, "sex": 196, "characterist": 196, "gender": 196, "ident": [196, 226], "educ": 196, "socio": 196, "econom": 196, "person": [196, 281], "appear": [196, 255, 261, 263], "race": 196, "religion": 196, "sexual": 196, "orient": 196, "behavior": [196, 202, 203, 204, 232, 242, 286, 290, 292, 294], "contribut": [196, 201, 280], "inclus": 196, "Being": 196, "viewpoint": 196, "gracefulli": 196, "empathi": 196, "toward": [196, 226], "member": [196, 202], "unaccept": 196, "imageri": 196, "unwelcom": 196, "troll": 196, "insult": 196, "derogatori": 196, "polit": 196, "attack": 196, "public": [196, 256, 259], "privat": 196, "electron": 196, "explicit": 196, "permiss": 196, "inappropri": 196, "profession": 196, "clarifi": 196, "fair": 196, "action": [196, 256, 259], "edit": 196, "reject": 196, "wiki": 196, "ban": 196, "temporarili": 196, "perman": [196, 280], "deem": 196, "threaten": 196, "offens": 196, "harm": 196, "mail": 196, "social": [196, 281], "media": [196, 281], "account": [196, 288, 292], "appoint": 196, "event": [196, 290], "abus": 196, "report": [196, 197, 201, 271, 288], "contact": [196, 287, 288], "complaint": 196, "review": [196, 197, 201, 281], "investig": [196, 221, 266], "necessari": [196, 199, 203, 242, 262, 280, 288, 292], "circumst": [196, 282], "oblig": [196, 267], "confidenti": [196, 263], "regard": [196, 285], "incid": 196, "faith": 196, "face": [196, 201, 209, 244, 248, 268, 270, 281, 287, 295], "repercuss": 196, "leadership": 196, "faq": [196, 201], "page": [196, 197, 263, 266, 267], "send": [197, 203], "view": [197, 201, 229, 252, 261, 267, 287], "star": 197, "repositori": [197, 256, 259], "button": [197, 235, 255, 261], "fork": [197, 256, 259], "clone": [197, 225, 236, 254, 258, 263, 265, 266, 268, 269], "pc": 197, "git": [197, 225, 231, 236, 263, 265, 266, 268, 269], "branch": 197, "modif": [197, 202, 232, 249, 268], "checkout": 197, "my": 197, "messag": [197, 269, 270, 274, 275, 276, 292], "cover": [197, 230, 234, 281], "certif": [197, 263], "agre": 197, "pr": [197, 222, 239, 256, 259, 287], "approv": 197, "licens": 197, "azur": [197, 201, 281], "devop": 197, "ci": 197, "e16": 197, "v5": 197, "scan": [197, 201], "pylint": 197, "bandit": 197, "copyright": [197, 237], "docstyl": 197, "spellcheck": 197, "dco": 197, "pytest": 197, "No": [197, 221, 231, 240, 269, 270, 281], "failur": [197, 198], "fault": 197, "coverag": 197, "submit": [197, 268, 271, 281], "bug": [197, 201], "intend": 197, "safe": 197, "collabor": [197, 201, 246, 252], "adher": 197, "toolkit": [198, 236, 244, 252, 281, 293], "tracer": 198, "graphmodul": [198, 285], "resolv": [198, 200], "floatfunct": 198, "cat": [198, 230, 247, 274, 275, 276], "relu": [198, 232, 289, 290], "batchnorm": [198, 289], "eval": [198, 221, 222, 225, 244, 283, 290], "fail": [198, 222, 230, 270], "conduct": [198, 240, 249, 261, 292, 293], "imper": 198, "successfulli": [198, 201, 228, 270, 274, 275, 276, 281], "traceabl": 198, "proxi": 198, "tutori": [198, 252, 281, 293], "prototyp": 198, "html": [198, 201, 203, 220, 228, 235, 256, 259, 262, 264, 270, 274, 283], "highlight": 198, "untrac": 198, "ssd": [198, 230, 295], "resnet34": [198, 295], "r34": 198, "bboxes_labels_scor": 198, "prob": 198, "45": [198, 238, 295], "max_output": 198, "zip": [198, 270, 274, 275], "squeez": 198, "dbox": 198, "dlabel": 198, "dscore": 198, "decode_singl": 198, "autom": [199, 244, 261, 262, 281, 289], "artifici": 199, "ann": 199, "par": [199, 271], "potenti": [199, 225], "procedur": [199, 280, 292], "lie": [199, 220], "predictor": 199, "figur": [199, 254, 255, 258, 284], "popul": 199, "inner": 199, "evolutionari": 199, "cycl": 199, "until": [199, 203, 292], "conclud": 199, "yet": [199, 256, 259, 262, 269, 283], "simplest": [199, 220, 247], "launcher": [199, 201, 226, 227, 252, 293], "agent": 199, "nsga2": 199, "supernet": 199, "ofa_mbv3_d234_e346_k357_w1": 199, "mac": [199, 262], "num_ev": 199, "250": [199, 280], "results_csv_path": 199, "search_result": 199, "dataset_path": 199, "ilsvrc2012": 199, "mobilenetv3": 199, "lt": [199, 223], "wmt": 199, "en": 199, "de": 199, "guidelin": [200, 201], "mainstream": [201, 293], "particular": [201, 280, 286], "flex": [201, 236], "amd": [201, 236, 295], "arm": [201, 235, 236, 295], "nvidia": [201, 220, 235, 236, 295], "llama2": 201, "broad": [201, 235, 250, 293], "stabl": [201, 236, 280, 281], "diffus": [201, 281], "hub": [201, 229, 233, 252], "hug": [201, 268, 281], "coder": [201, 235, 245, 246, 249, 252, 255, 268, 272, 281], "marketplac": [201, 262, 281], "amazon": [201, 244, 252], "web": [201, 263, 269, 274, 275, 276, 290], "servic": [201, 261, 268, 281], "softwar": [201, 237, 280, 281, 287], "alibaba": [201, 251, 258, 259, 281], "tencent": [201, 281], "taco": [201, 281], "oliv": [201, 281], "ecosystem": [201, 281], "lightn": [201, 251], "2024": [201, 295], "03": [201, 295], "sota": [201, 281], "gaudi2": 201, "pip": [201, 225, 228, 231, 233, 236, 246, 249, 254, 256, 258, 259, 263, 264, 265, 266, 287], "34": [201, 238, 276, 295], "packag": [201, 202, 221, 231, 236, 261, 262, 281, 287, 292], "gauid2": 201, "docker": 201, "gaudi": 201, "stack": 201, "setup": [201, 225, 232, 236, 256, 259, 263, 265, 266, 268, 269, 280], "habana": 201, "habana_visible_devic": 201, "ompi_mca_btl_vader_single_copy_mechan": 201, "cap": 201, "sys_nic": 201, "host": [201, 228, 269, 271, 274, 275, 276], "ipc": 201, "vault": 201, "ubuntu22": 201, "04": [201, 236, 238, 295], "habanalab": 201, "login": [201, 256, 259, 288], "exec": 201, "container_id": 201, "bash": [201, 266, 290], "optimum": [201, 251, 252, 264, 286], "upgrad": [201, 240], "auto_round": 201, "automodel": 201, "autotoken": [201, 240], "get_dataload": 201, "neo": [201, 295], "float_model": 201, "trust_remote_cod": 201, "woq_conf": 201, "quantized_model": [201, 270, 274, 275], "resnet18": [201, 241, 246, 295], "static_quant_conf": 201, "overview": [201, 292], "jupyterlab": [201, 244, 250, 252, 254, 258, 293], "studio": [201, 252, 261, 271, 293], "topic": 201, "innov": [201, 252, 281], "june": [201, 281], "qwen2": [201, 281], "meta": [201, 238, 281, 295], "apr": [201, 281], "emnlp": [201, 281], "sep": [201, 281], "legal": [201, 296], "secur": [201, 263, 281, 296], "ask": [201, 236], "email": 201, "discord": 201, "join": [201, 264, 269, 274, 275], "technic": 201, "wechat": [201, 281], "img": 201, "bridg": [202, 203, 235], "vanilla": [202, 203, 235], "adaptor_registri": 202, "abcadaptor": 202, "__init__": [202, 221, 222, 223, 239, 292], "framework_specific_info": 202, "tune_cfg": [202, 204, 292], "query_fw_cap": [202, 204], "query_fused_pattern": 202, "he": 202, "describ": [202, 204, 221, 225, 232, 263, 290], "mainten": 202, "fragment": 202, "scheme": [202, 203, 204, 222, 232, 252, 286, 292, 294], "semant": [202, 232], "querybackendcap": [202, 203], "tensorflowqueri": 202, "mla": [202, 241, 283], "qtype": 202, "onnxrt_qlinearopsadaptor": 202, "data_load": 202, "inspect_tensor": 202, "op_list": [202, 290], "iteration_list": 202, "inspect_typ": 202, "save_to_disk": 202, "quantization_cfg": 202, "set_tensor": 202, "tensor_dict": 202, "input_graph": 202, "diagnosis_help": 202, "fw": 203, "outlin": [203, 204], "accommod": [203, 204], "give": [203, 261, 292], "diagram": [203, 204, 225, 292], "illustr": [203, 204, 227, 292], "sequencediagram": [203, 204, 271], "autonumb": [203, 204], "query_framework_cap": 203, "opwis": 203, "optypewis": 203, "\u2776": 203, "\u2777": 203, "\u2778": 203, "\u2779": 203, "\u277a": 203, "\u277b": 203, "\u277c": 203, "These": [203, 235, 264], "chapter": 203, "node_op": 203, "confirm": 203, "chosen": [203, 220], "conv2d": [203, 204, 225, 230, 232, 266, 289, 290, 292], "int8_conv_config": 203, "optype_wise_": 203, "per_channel": [203, 204, 232, 283, 294], "tuning_cfg_to_fw": 203, "Its": [203, 220, 280], "quantize_config": 203, "op_wise_config": 203, "dispatch": [203, 235, 268, 271], "is_perchannel": 203, "is_asymmetr": 203, "weight_bit": 203, "bf16_op": [203, 285], "convert_bf16": 203, "got": [203, 231, 290], "subsequ": [203, 244, 261], "calib": 203, "somewhat": 203, "distort": 203, "line": [203, 221, 228, 235, 244, 249, 250, 269, 290], "let": [204, 232, 249, 280, 282, 294], "overal": [204, 269, 286, 294], "drive": 204, "section": [204, 221, 225, 226, 227, 261, 264, 267, 280, 282, 286, 294], "uint4": 204, "asym": [204, 232, 286, 294], "independ": 204, "kullback": [204, 226], "leibler": [204, 226], "pytorch_cpu": 204, "1_11_capabl": 204, "cap_s8_1_11": 204, "conv1d": 204, "cap_s8_1_11_conv1d": 204, "per_channel_symmetr": 204, "per_tensor_symmetr": 204, "nativ": 204, "with_arg": 204, "qscheme": 204, "torch_dtyp": 204, "quant_min": 204, "quant_max": 204, "linux": [219, 231, 236, 255, 261], "x86_64": 219, "aarch64": 219, "benefici": 220, "\u03b2": 220, "\u03b1": 220, "focu": [220, 292], "essenti": [220, 231], "percentil": 220, "remaind": 220, "enhanc": [220, 244, 280, 281, 285], "resolut": 220, "extrem": 220, "retain": 220, "noteworthi": 220, "vanhouck": 220, "vincent": 220, "andrew": 220, "senior": 220, "mark": 220, "mao": 220, "2011": 220, "szymon": 220, "migacz": 220, "tensorrt": [220, 241, 283], "2017": 220, "mckinstri": 220, "jeffrei": 220, "discov": [220, 290], "embed": [220, 280], "1809": 220, "04191": 220, "2018": 220, "mostli": 221, "summar": [221, 226], "conflict": [221, 231], "overli": 221, "argu": 221, "decis": [221, 239], "prioriti": [221, 272], "pep": 221, "o": [221, 236, 246, 264], "sub_modul": 221, "namespac": 221, "pollut": 221, "subprocess": [221, 222], "popen": 221, "statement": 221, "pipe": 221, "long_str": 221, "extran": 221, "__version__": 221, "pager": 221, "getenv": 221, "readabl": 221, "seem": 221, "worth": [221, 280], "4f": 221, "65421": 221, "sentenc": 221, "register_config": 221, "framework_nam": 221, "algo_nam": 221, "eval_result": 221, "declar": [221, 262], "typealia": 221, "_lossandgradi": 221, "complextfmap": 221, "xx_func": 221, "ordereddict": 221, "pylanc": 221, "cheeseshopaddress": 221, "chees": 221, "shop": 221, "outofcheeseerror": 221, "crbug": 221, "192795": 221, "cpufreq": [221, 247], "deprec": [221, 256, 259, 287, 291], "facilit": [221, 244], "__all__": 221, "get_all_config_set_from_config_registri": 221, "composableconfig": 221, "fwk_name": 221, "algorithm_entri": 221, "snippet": [221, 235], "register_algo": 221, "rtn_algo_entri": 221, "smooth_quant_entri": 221, "vscode": [221, 260, 262], "settings_recommend": 221, "encount": 222, "previous": 222, "lack": [222, 231], "faster": [222, 224, 230, 281, 292, 295], "treat": 222, "Of": 222, "evenli": 222, "discard": 222, "throw": 222, "awai": 222, "draw": [222, 288, 292], "pin": [222, 254, 258], "reshuffl": 222, "manner": [222, 226, 242], "newdataload": 222, "input_data": 222, "customis": [222, 223, 239], "ensp": [223, 291], "imagerecord": [223, 228, 294], "image_nam": 223, "cocorecord": 223, "int64": 223, "style_transf": 223, "content": [223, 269, 270, 274, 275, 276], "tfrecorddataset": 223, "post_training_static_qu": [223, 240, 282, 292], "labelbal": 223, "300": [223, 280], "helloworld": [223, 241, 291], "aid": 224, "infrastructur": 224, "diagnos": 225, "gui": [225, 235, 266, 280], "termin": [225, 254, 255, 258, 264], "repeat": [225, 292], "durat": [225, 270, 274, 275, 288], "cd": [225, 228, 236, 263, 265, 266, 268, 269, 274, 275, 276], "ilsvr2012": 225, "wget": [225, 231, 233, 263, 266], "caff": 225, "berkeleyvis": 225, "caffe_ilsvrc12": 225, "xvzf": 225, "image_recognit": [225, 266, 290], "resnet50_torchvis": 225, "ptq_static": [225, 265], "resnet50_v1": [225, 228, 240], "dataset_loc": [225, 266, 274, 290], "label_path": 225, "quantiti": 225, "vec": 225, "mu": 225, "sigma": 225, "sqrt": 225, "var": 225, "happen": 225, "dispers": [225, 264], "trust": [225, 263], "cg": [225, 266, 290], "conv0": [225, 266, 290], "expens": [226, 240, 292], "mobil": [226, 240, 295], "produc": 226, "logit": 226, "softmax": 226, "kd": 226, "d": [226, 234, 262, 264, 270, 280], "patient": 226, "compact": [226, 240, 247, 280], "resourc": [226, 268, 271, 292], "convolut": [226, 281], "ia": 226, "shallow": 226, "depth": [226, 285], "deepest": 226, "deeper": 226, "Will": [226, 235], "10006": [226, 227], "student_output": [226, 227], "student_loss": [226, 227], "training_func_for_nc": [226, 227], "distil_loss_conf": 226, "accordingli": [226, 252, 289], "promis": [227, 240, 280], "huge": [227, 266, 280, 284], "light": 227, "booster": 227, "degrad": [227, 280, 292], "novel": [227, 244, 255, 261], "comb": 227, "distillation_criterion": [227, 240, 279], "q_conf": 227, "horovod": 228, "builtin": 228, "enable_eager_execut": 228, "yaml_file_path": 228, "pre_process": 228, "simpli": [228, 242, 244, 246, 249, 261, 269], "evaluation_result": 228, "evaluation_time_cost": 228, "partit": [228, 280], "distributedsampl": 228, "train_sampl": 228, "train_dataset": [228, 283], "num_replica": 228, "rank": 228, "train_load": 228, "train_kwarg": 228, "adadelta": 228, "distributedoptim": 228, "named_paramet": 228, "broadcast_paramet": 228, "state_dict": [228, 286, 290], "root_rank": 228, "broadcast_optimizer_st": 228, "set_epoch": 228, "batch_idx": 228, "zero_grad": [228, 240, 280], "nll_loss": 228, "log_interv": 228, "0f": 228, "tloss": 228, "6f": 228, "dry_run": 228, "break": [228, 240], "test_func": 228, "num_of_process": 228, "002": 228, "ssh": [228, 261], "prompt": 228, "readm": [228, 274], "exactli": [228, 245], "recognit": [228, 230, 280, 290], "resizecropimagenet": [228, 291], "realiz": [228, 278, 285, 288], "tow": 228, "node1": [228, 274, 275], "node2": [228, 274, 275], "TO": [228, 246, 266], "your_node1_nam": 228, "your_node2_nam": 228, "resnet50_fp32_pretrained_model": 228, "nc_resnet50_v1": 228, "resnet": [228, 295], "10k": [229, 233], "2x": [229, 235], "exchang": 230, "hope": 230, "inc_model": [230, 242], "fp32_onnx_config": 230, "verifi": [230, 238], "vgg16": [230, 295], "mobilenet": [230, 288, 295], "rcnn": 230, "torchscript": [230, 284, 289], "unsupport": [230, 240, 280], "add_relu": 230, "conv1d_relu": 230, "conv2d_relu": 230, "group_norm": 230, "hardswish": 230, "instance_norm": 230, "layer_norm": 230, "leaky_relu": 230, "sigmoid": 230, "toolchain": [231, 281], "bare": 231, "metal": 231, "sudo": [231, 247], "apt": [231, 236, 247, 255], "python3": 231, "dev": [231, 254, 258], "distutil": 231, "libgl1": 231, "mesa": 231, "glx": 231, "libglib2": 231, "ln": 231, "sf": 231, "usr": 231, "incompat": 231, "88": [231, 288, 295], "80": [231, 238, 284, 290, 295], "pyobject": 231, "reinstal": 231, "importerror": 231, "libgl": 231, "yum": [231, 236], "opencv": [231, 236, 255], "conda": [231, 236, 247, 255, 274, 275, 276, 287], "pend": [231, 270], "sqlalchemi": 231, "27": [231, 295], "alemb": 231, "forg": [231, 236], "quick": [232, 241, 280, 293, 294], "dive": [232, 293], "unless": 232, "syntax": 232, "go": [232, 256, 259, 267, 282, 286, 291], "15": [232, 236, 275], "up1": 232, "up2": 232, "valid_mixed_precis": 232, "concatv2": 232, "maxpool": 232, "avgpool": 232, "depthwiseconv2dn": 232, "relu6": 232, "biasadd": 232, "addn": 232, "addv2": 232, "grappler": 232, "grappler_optim": 232, "constfold": 232, "arithmet": 232, "debug_stripp": 232, "googleapi": [233, 263, 266], "v1_6": [233, 263, 266], "mobilenet_v1_1": [233, 263, 274], "0_224_frozen": [233, 263, 274], "concept": [234, 288, 293], "custom_metr": 234, "420": 235, "geomean": 235, "upload": [235, 256, 259], "click": [235, 244, 245, 252, 255, 261, 266, 281, 290], "qintegerop": [235, 283], "oneapi": [236, 281, 293], "analyt": [236, 281, 293], "success": [236, 263], "frequent": 236, "pypi": [236, 256, 259], "nightli": 236, "headless": [236, 255], "fastai": 236, "esri": 236, "consolid": 236, "streamlin": [236, 268, 281], "scienc": 236, "websit": 236, "anaconda": [236, 268, 269], "suit": [236, 262, 290], "formerli": 236, "skylak": 236, "cascad": 236, "ic": [236, 281], "sapphir": [236, 238], "rapid": [236, 238], "hbm": 236, "arctic": 236, "sound": 236, "pont": 236, "vecchio": 236, "cento": [236, 295], "ubuntu": 236, "22": [236, 238, 295], "maco": 236, "ventura": 236, "fortensorflow": 236, "forpytorch": 236, "17": [236, 274], "tf_enable_onednn_opt": 236, "newer": 236, "apach": 237, "subject": 237, "accompani": [237, 292], "wish": 237, "bibtex": 237, "misc": 237, "author": 237, "feng": 237, "tian": 237, "hanwen": 237, "haihao": [237, 280], "shen": [237, 280], "suyu": 237, "chen": 237, "howpublish": 237, "year": 237, "logo": 237, "atom": 237, "phi": 237, "pentium": 237, "vtune": 237, "corpor": 237, "subsidiari": 237, "brand": 237, "claim": 237, "hf": [238, 289, 295], "70b": [238, 295], "40b": 238, "baichuan": 238, "baichuan2": 238, "12b": 238, "neox": [238, 295], "20b": [238, 295], "mistralai": 238, "mistral": 238, "thudm": 238, "chatglm2": 238, "wip": 238, "chatglm3": 238, "soon": 238, "lambada_openai": [238, 295], "67": [238, 295], "68": [238, 291, 295], "23": [238, 295], "0098": 238, "0000": [238, 242], "0040": 238, "71": [238, 295], "51": [238, 295], "70": [238, 295], "9913": 238, "53": [238, 295], "0003": [238, 295], "76": [238, 295], "0035": 238, "96": [238, 295], "0043": 238, "9988": 238, "24": [238, 280, 292, 295], "9936": 238, "9963": [238, 295], "46": [238, 295], "47": [238, 295], "99": [238, 295], "0356": 238, "38": [238, 295], "0009": 238, "19": [238, 294, 295], "9968": 238, "35": [238, 280, 295], "9961": [238, 295], "31": [238, 295], "79": [238, 290, 295], "0070": 238, "43": [238, 295], "0018": 238, "25": [238, 280, 295], "9989": 238, "9949": 238, "54": [238, 294, 295], "9940": 238, "58": [238, 275, 295], "0033": 238, "0117": 238, "49": [238, 295], "82": [238, 295], "0046": [238, 295], "0087": 238, "77": [238, 295], "9932": [238, 295], "75": [238, 280, 295], "9997": 238, "55": [238, 276, 295], "9991": 238, "09": [238, 295], "0057": 238, "97": [238, 240, 295], "0041": 238, "73": [238, 295], "92": [238, 295], "0005": 238, "9942": [238, 295], "9987": 238, "0030": [238, 295], "61": [238, 295], "9962": [238, 295], "9992": 238, "52": [238, 295], "9914": 238, "0023": 238, "9986": 238, "9919": [238, 295], "9977": 238, "94": [238, 291, 295], "0093": 238, "78": [238, 291, 295], "0203": 238, "74": [238, 295], "44": [238, 295], "0237": 238, "0013": 238, "00": [238, 295], "0044": 238, "popularli": 239, "industri": [239, 281], "label_map": 239, "ap": 239, "curv": 239, "turn": [239, 255, 284], "target_boxes_num": 239, "str_label": 239, "int_label": 239, "inturn": 239, "cocomap": 239, "vocmap": 239, "categor": 239, "multiclass": 239, "multilabel": 239, "newmetr": 239, "reset": 239, "reflect": [239, 291], "new_metr": 239, "kind": 240, "resort": 240, "inject": 240, "automodelforsequenceclassif": 240, "worker": [240, 271, 274, 275, 276, 283], "ping_memori": [240, 283], "formul": 240, "effort": 240, "written": 240, "onnxrt_integ": [240, 294], "onnxrt_qlinear": [240, 294], "image_tensor": [240, 294], "post_training_dynamic_qu": [240, 282, 292], "1000": [240, 270, 294], "2000": 240, "sampling_s": [240, 294], "model_wis": [240, 294], "op_dict": 240, "op_wis": [240, 290, 294], "sigopt_api_token": [240, 288, 292], "sigopt_project_id": [240, 288, 292], "sigopt_experiment_nam": [240, 288, 292], "performance_onli": 240, "demo": 240, "600": [240, 295], "training_arg": 240, "trainer": [240, 252], "maxim": [240, 280, 292], "pruning_func": 240, "num_train_epoch": [240, 280], "train_dataload": [240, 280, 283], "n_gpu": 240, "gradient_accumulation_step": 240, "clip_grad_norm_": 240, "max_grad_norm": 240, "start_epoch": [240, 282, 294], "end_epoch": [240, 282, 294], "newli": [240, 280], "on_after_optimizer_step": [240, 280], "layer3": [240, 280], "layer2": [240, 280, 283], "lr_schedul": [240, 280], "weight_decai": [240, 294], "0004": 240, "nesterov": [240, 294], "randomresizedcrop": [240, 291], "totensor": [240, 291], "485": 240, "456": 240, "406": [240, 295], "nepoch": 240, "cnt": 240, "loss_sum": 240, "iter_bar": 240, "tqdm": 240, "desc": 240, "teacher_logit": 240, "train_fun": 240, "training_func": 240, "output_model": [240, 264, 266, 290], "exit_polici": [240, 294], "determinist": 240, "meaning": [240, 279], "prune_conf": 240, "quantization_aware_training_conf": 240, "aforement": 240, "inset": 240, "p_conf": [240, 279], "ssd_mobilenet_v1": 240, "benchmarkconf": 240, "launch": [241, 262, 267], "cpuexecutionprovid": [241, 283], "tensorrtexecutionprovid": [241, 283], "cudaexecutionprovid": [241, 283], "cuda": [241, 244, 246, 280, 283], "dnnlexecutionprovid": [241, 283], "plu": 241, "persist": 242, "tf2": 242, "h5": 242, "hybridblock": 242, "10005": [243, 284], "simplifi": [244, 255, 261, 280, 281], "switch": [244, 290], "acquir": 244, "heurist": [244, 261], "great": 244, "amp": [244, 251, 270, 286], "autocast": 244, "simultan": [244, 268, 279, 282], "my_model": 244, "no_grad": 244, "memory_format": 244, "112": 244, "plugin": [244, 262], "aw": [244, 252, 271, 281, 295], "sagemak": [244, 252], "inlin": [244, 249, 252], "neural_cod": [244, 246, 248, 249, 250, 252], "bench": 244, "superbench": 244, "enjoi": [245, 249, 252], "rebuild": [245, 254, 258], "reload": [245, 262, 264, 267], "democrat": [246, 281], "programm": [246, 252, 261], "nano_bf16_channels_last": 246, "nano_bf16_ipex_channels_last": 246, "nano_bf16_ipex": 246, "nano_bf16": 246, "nano_fp32_channels_last": 246, "nano_fp32_ipex_channels_last": 246, "nano_fp32_ipex": 246, "nano_gpu_to_cpu": 246, "nano_int8": 246, "nano_jit_bf16_channels_last": 246, "nano_jit_bf16_ipex_channels_last": 246, "nano_jit_bf16_ipex": 246, "nano_jit_bf16": 246, "nano_jit_fp32_channels_last": 246, "nano_jit_fp32_ipex_channels_last": 246, "nano_jit_fp32_ipex": 246, "nano_jit_fp32": 246, "nano_onnxruntime_fp32": 246, "nano_onnxruntime_int8_qlinear": 246, "openvino": 246, "nano_openvino_fp32": 246, "nano_openvino_int8": 246, "bc": [247, 255], "conda_prefix": 247, "echo": 247, "libjemalloc": 247, "libiomp5": 247, "home": 247, "lib": 247, "ld_preload": 247, "malloc_conf": 247, "oversize_threshold": 247, "background_thread": 247, "metadata_thp": 247, "dirty_decay_m": 247, "9000000000": 247, "muzzy_decay_m": 247, "kmp_affin": 247, "kmp_blocktim": 247, "dnnl_primitive_cache_capac": 247, "governor": 247, "scaling_governor": 247, "powersav": 247, "tee": 247, "pytorch_jit_script": [248, 251], "pytorch_channels_last": [248, 251], "run_bench": 248, "patch": [248, 261], "patch_path": 248, "your_patch_path": 248, "sweep": 248, "sweep_object": 248, "bench_config": 248, "bench_featur": 248, "sai": 249, "run_glu": [249, 250, 272, 275, 276], "requisit": 249, "task_nam": [249, 250, 272, 275, 276], "do_ev": [249, 250, 265, 272, 275, 276], "remain": 249, "itself": [249, 280], "run_glue_optim": 249, "static_ipex": 249, "stock": [250, 289], "auto_qu": 250, "v4": [250, 272, 275, 276, 295], "albert": [250, 295], "sst2": 250, "alexnet": [250, 295], "pytorch_amp": 251, "optimize_for_infer": 251, "pytorch_jit_trac": 251, "pytorch_jit_script_ofi": 251, "pytorch_jit_trace_ofi": 251, "pytorch_torchdynamo_jit_script": 251, "pytorch_torchdynamo_jit_trac": 251, "pytorch_torchdynamo_jit_script_ofi": 251, "pytorch_torchdynamo_jit_trace_ofi": 251, "pytorch_inc_bf16": 251, "pytorch_inc_static_quant_fx": 251, "pytorch_inc_static_quant_ipex": 251, "pytorch_inc_static_quant_ipex_xpu": 251, "pytorch_inc_dynamic_qu": 251, "pytorch_ipex_fp32": 251, "pytorch_ipex_bf16": 251, "pytorch_ipex_int8_static_qu": 251, "pytorch_ipex_int8_dynamic_qu": 251, "blade": 251, "disc": 251, "pytorch_aliblad": 251, "pytorch_lightning_bf16_cpu": 251, "tensorflow_amp": 251, "keras_amp": 251, "tensorflow_inc": 251, "keras_inc": 251, "onnx_inc_static_quant_qlinear": 251, "onnx_inc_static_quant_qdq": 251, "onnx_inc_dynamic_qu": 251, "pytorch_inc_huggingface_optimum_stat": 251, "pytorch_inc_huggingface_optimum_dynam": 251, "intel_extension_for_transform": 251, "bigdl": [251, 252], "nano": [251, 252], "nano_": 251, "inc_auto": 251, "delight": 252, "announc": 252, "v": [252, 261, 280, 292, 294], "500": [252, 270], "jupyt": [252, 254, 255, 258], "delta": 252, "acc_delta": 252, "int8_acc": 252, "fp32_acc": 252, "ext": [254, 256, 258, 259, 260], "lab": [254, 255, 256, 258, 259], "nodej": [254, 258], "jlpm": [254, 258], "yarn": [254, 258], "npm": [254, 255, 258], "lieu": [254, 258], "labextens": [254, 255, 258], "typescript": [254, 258], "watch": [254, 258, 267], "immedi": [254, 258, 280], "refresh": [254, 258], "browser": [254, 258, 263, 267], "wait": [254, 258, 261, 271], "rebuilt": [254, 258], "easier": [254, 258, 261, 263, 281], "symlink": [254, 258], "down": 255, "finish": [255, 271], "enter": [255, 261, 269], "leav": 255, "blank": 255, "cell": 255, "gain": [255, 279, 281], "mkl": 255, "jemalloc": 255, "pip3": 255, "pyproject": [256, 259], "toml": [256, 259], "twine": [256, 259], "whl": [256, 259], "dist": [256, 259], "sdist": [256, 259], "bdist_wheel": [256, 259], "frontend": [256, 259, 269, 276], "cut": [256, 259], "admin_github_token": [256, 259], "pypi_token": [256, 259], "npm_token": [256, 259], "secret": [256, 259], "panel": [256, 259, 261], "draft": [256, 259], "changelog": [256, 259, 260], "pkg": [256, 259], "bot": [256, 259], "pick": [256, 259, 262], "feedstock": [256, 259], "hatch": 259, "notabl": 260, "daili": 261, "advantag": [261, 280, 282, 292], "remot": 261, "server": [261, 263, 266, 269, 274, 275, 276], "re": [261, 267, 286], "market": 261, "uninstal": 261, "fill": [261, 288, 291, 292], "upper": 261, "sidebar": 261, "hover": 261, "track": [261, 288], "argpars": 261, "pop": [261, 271], "diff": 261, "manifest": 262, "palett": 262, "src": 262, "registercommand": 262, "amodio": 262, "tsl": 262, "matcher": 262, "dbaeumer": 262, "eslint": [262, 267], "press": 262, "f5": 262, "ctrl": 262, "hello": 262, "world": 262, "breakpoint": 262, "consol": [262, 267], "relaunch": 262, "toolbar": 262, "node_modul": 262, "viewlet": 262, "dropdown": 262, "runner": [262, 267], "startup": 262, "bundl": 262, "neural_insight": [263, 265, 266], "tl": 263, "ui": 263, "12": [263, 295], "5000": 263, "338174d13706855fc6924cec7b3a8ae8": 263, "listen": 263, "port": [263, 270], "firewal": 263, "8080": 263, "cert": 263, "path_to_cert": 263, "crt": 263, "path_to_private_kei": 263, "encrypt": 263, "insecur": 263, "expos": 263, "forfeit": 263, "client": [263, 269, 276], "extern": 263, "threat": 263, "diagnost": 263, "skill": 263, "feel": [263, 267], "layoutlmv3": [264, 295], "seqev": 264, "sentencepiec": 264, "timm": 264, "fvcore": 264, "pillow": 264, "einop": 264, "textdist": 264, "setuptool": 264, "cli": 264, "hypjudi": 264, "funsd": [264, 295], "calib_dataset": 264, "incdataset": 264, "eval_dataset": 264, "poor": [264, 290], "9049": 264, "2989": 264, "66": [264, 295], "9631": 264, "glob": 264, "panda": 264, "pd": 264, "set_opt": 264, "max_row": 264, "max_column": 264, "getmtim": 264, "revers": 264, "activations_t": 264, "weights_tabl": [264, 265], "read_csv": 264, "nweight": 264, "descend": 264, "sorted_data": 264, "sort_valu": 264, "ascend": 264, "evid": 264, "tip": 264, "8981": 264, "7502": 264, "run_clm": 265, "dataset_nam": 265, "wikitext": [265, 295], "dataset_config_nam": 265, "do_train": 265, "inspect_sav": 265, "inspect_result": 265, "quan": 265, "model_summari": 265, "incept": [266, 295], "v3": [266, 295], "inception_v3": [266, 290], "inceptionv3_fp32_pretrained_model": [266, 290], "prepare_dataset": 266, "sh": [266, 290], "raw_dir": 266, "img_raw": 266, "delet": [266, 280], "run_tun": 266, "nc_inception_v3": 266, "decreas": [266, 280], "highest": [266, 272, 292], "satisfactori": 266, "webpag": 266, "spike": 266, "bottom": 266, "concentr": 266, "But": 266, "bigger": 266, "bootstrap": 267, "localhost": [267, 269, 274, 275], "3000": 267, "lint": 267, "interact": [267, 288], "correctli": 267, "hash": [267, 270], "readi": [267, 280], "aren": 267, "transit": 267, "webpack": 267, "babel": 267, "tweak": 267, "ever": 267, "curat": 267, "suitabl": 267, "shouldn": 267, "wouldn": 267, "couldn": 267, "troubleshoot": 267, "effortlessli": 268, "rest": [268, 269, 274, 275, 276], "grpc": [268, 269, 273, 274, 275, 277], "queue": 268, "elimin": 268, "mpi": [268, 269, 292], "neural_solut": [268, 269, 274, 275, 276], "task_monitor_port": [269, 274, 275, 276], "22222": [269, 274, 275, 276], "result_monitor_port": [269, 274, 275, 276], "33333": [269, 274, 275, 276], "restful_api_port": [269, 274, 275, 276], "hostfil": [269, 271, 274, 275, 276], "grpc_api_port": [269, 274, 275, 276], "api_typ": [269, 274, 275, 276], "conda_env": [269, 274, 275, 276], "upload_path": [269, 274, 275, 276], "8000": [269, 274, 275, 276], "3333": [269, 274, 275, 276], "2222": [269, 274, 275, 276], "ns_workspac": [269, 274, 275, 276], "hf_model": [269, 273, 275, 276], "curl": [269, 270, 274, 275], "task_id": [269, 274, 275, 276], "usernam": 269, "db": [269, 271], "serve_log": [269, 274, 275, 276], "frontend_grpc": 269, "task_log": 269, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 269, "task_workspac": 269, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 269, "aliv": 269, "properli": 269, "commonli": [269, 280], "hostnam": 269, "breakdown": 269, "ip": 269, "hous": 269, "host1": [269, 274, 275], "host2": [269, 274, 275], "query_id": 269, "oaa": 270, "host_ip": 270, "task_request": [270, 274, 275, 276], "tuning_info": [270, 274], "optimization_result": [270, 274], "result_path": [270, 274, 275], "closur": 270, "404": [270, 280, 295], "health": 270, "healthi": 270, "400": 270, "alloc": 271, "incom": 271, "taskmonitor": 271, "cluster": [271, 274, 275, 292], "tasklaunch": 271, "resultmonitor": 271, "receiv": [271, 288], "p1": 271, "notif": 271, "p2": 271, "p3": 271, "mpirun": [271, 292], "perf": 271, "p4": 271, "classdiagram": 271, "taskdb": 271, "get_statu": 271, "update_statu": 271, "task_collect": 271, "append_task": 271, "get_all_pending_task": 271, "update_task_statu": 271, "task_db": 271, "wait_new_task": 271, "schedule_task": 271, "dispatch_task": 271, "launch_task": 271, "query_task_statu": 271, "node_list": 271, "reserve_resourc": 271, "get_node_statu": 271, "pool": 271, "gcp": [271, 281], "script_url": [272, 274, 275, 276], "archiv": 272, "tf_example1": [273, 274, 275], "hf_models_grpc": [273, 276], "00173": 274, "01024": 274, "task_request_distribut": 274, "custom_models_optim": 274, "7602cd63d4c849e7a686a8165a77f69d": [274, 275], "151": 274, "8617": 274, "8213": [274, 295], "number_of_socket": [274, 275], "number_of_thread": [274, 275], "cdf419910f9b4d2a8320d0e420ac1d0a": 275, "optimized_result": 275, "3162": 275, "6488": [275, 295], "06": [276, 294, 295], "d3e10a49326449fb9d0d62f2bfc1cb43": 276, "fastapi": 277, "multi_object": 278, "benefit": 279, "instanti": 279, "neuron": 280, "art": 280, "grown": 280, "unpreced": 280, "increasingli": 280, "stand": [280, 292], "consecut": 280, "shrink": 280, "influenc": 280, "mechan": [280, 288, 293], "contextu": 280, "scene": 280, "haven": 280, "color": [280, 284], "lowest": [280, 292], "interv": 280, "emsp": 280, "downstream": 280, "prone": 280, "co": 280, "discourag": 280, "penal": 280, "parameter": 280, "coeffici": 280, "sparsegpt": 280, "lightweight": 280, "perceptron": 280, "mlp": 280, "valuabl": [280, 290], "basi": 280, "mha": 280, "billion": 280, "tend": 280, "exemplifi": 280, "fortieth": 280, "pruner2": 280, "prepare_prun": 280, "retrain_fre": 280, "few": [280, 281, 289, 292], "yourself": 280, "uncertain": 280, "parse_auto_slim_config": 280, "auto_config": 280, "ffn2_sparsiti": 280, "mha_spars": 280, "quit": 280, "carri": 280, "pruning_pattern": 280, "pruning_start": 280, "pruning_end": 280, "sparse_gpt": 280, "embed_out": 280, "card": 280, "hesit": 280, "causal": 280, "clm": 280, "sst": [280, 295], "63": [280, 295], "flan": 280, "t5": 280, "english": 280, "romanian": 280, "381": 280, "yolov5": 280, "2x1": [280, 295], "801": 280, "7895": 280, "reduct": [280, 284, 294], "xgboost": 280, "namhoon": 280, "lee": 280, "thalaiyasingam": 280, "ajanthan": 280, "philip": 280, "torr": 280, "2019": 280, "zafrir": 280, "ofir": 280, "ariel": 280, "larei": 280, "boudoukh": 280, "mosh": 280, "wasserblat": 280, "2111": 280, "05754": 280, "2021": 280, "kwon": 280, "kim": 280, "mahonei": 280, "hassoun": 280, "keutzer": 280, "gholami": 280, "pp": 280, "24101": 280, "24116": 280, "alistarh": 280, "massiv": 280, "2301": 280, "00774": 280, "oct": 281, "medium": 281, "aug": 281, "juli": 281, "onnxcommunitymeetup2023": 281, "msft": 281, "netflix": 281, "mlperf": [281, 295], "5x": 281, "\u96c6\u6210\u82f1\u7279\u5c14": 281, "\u817e\u8baf\u4e91taco": 281, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 281, "mar": 281, "heterogen": 281, "jan": 281, "busi": 281, "amx": 281, "journei": 281, "dec": 281, "mleffici": 281, "deepen": 281, "foundat": 281, "intellig": 281, "vmware": 281, "applianc": 281, "bitnami": 281, "nov": 281, "neurip": 281, "quala": 281, "minilm": [281, 295], "plug": 281, "twitter": 281, "linkedin": 281, "zone": 281, "land": 281, "pat": 281, "keynot": 281, "intelon": 281, "chines": 281, "purif": 281, "jun": 281, "partner": 281, "feb": 281, "joint": 281, "bilibili": 281, "gestalt": 281, "ml": 281, "youtub": 281, "reconstruct": 281, "abound": 281, "lpot": [281, 287], "nextplatform": 281, "cern": 281, "gan": 281, "3dgan": 281, "iml": 281, "workshop": 281, "asplo": 281, "18": [281, 295], "intelcaff": 281, "aris": 282, "henc": 282, "onnxrt_qoper": 282, "quant_aware_train": 282, "use_bf16": 282, "weight_compress": [282, 294], "initial_spars": [282, 294], "prune_typ": [282, 294], "basic_magnitud": [282, 294], "update_frequ": 282, "prune_domain": 282, "tile_pattern_1x1": 282, "affin": 283, "neither": 283, "nor": 283, "val_load": 283, "avg": 283, "themselv": 283, "dmlexecutionprovid": 283, "meanwhil": 284, "substanti": 284, "constrain": 284, "grei": 284, "blue": 284, "rectangl": 284, "subgraph": [284, 292], "load_empty_model": 284, "rtn_arg": [284, 286], "lambda": 284, "ouput_dir": 284, "fp32_model_path": 284, "int8_model_path": 284, "ON": 285, "forc": 285, "postposttrainingquantconfig": 285, "datatyp": [285, 292, 295], "cast": [285, 291], "bf16convert": 285, "bf16wrapper": 285, "retrac": 285, "c_": 286, "enable_mse_search": 286, "805": 286, "005": 286, "return_int": 286, "group_dim": 286, "awq_arg": 286, "enable_auto_scal": 286, "gptq_arg": 286, "nsampl": 286, "pad_max_length": 286, "use_max_length": 286, "static_group": 286, "true_sequenti": 286, "slower": 286, "sym_full_rang": 286, "qweight_config_path": 286, "gptq_config_path": 286, "gptq_config": 286, "use_full_length": 286, "n_block": 286, "compressed_model": 286, "seek": 286, "omit": 286, "rtn_g32asym": 286, "gptq_g32asym": 286, "gptq_g32asym_disable_last_matmul": 286, "gptq_g128asym": 286, "awq_g32asym": 286, "site": 287, "assist": 287, "inspect": [287, 290], "sed": 287, "your_script": 287, "backbon": 288, "sigopt_experiment_id": 288, "nc": [288, 292], "suffici": 288, "ordinari": 288, "latenc": [288, 292], "8266": 288, "8372": 288, "2132": 288, "7495": 288, "8299": 288, "8294": 288, "0837": 288, "8291": 288, "4469": 288, "allevi": 289, "herebi": 289, "optdecoderlay": 289, "blockwis": 289, "waq": 289, "torchsmoothqu": 289, "auto_alpha_arg": 289, "overhead": 289, "leakyrelu": 289, "hardtanh": 289, "instancenorm": 289, "t5norm": 289, "llamanorm": 289, "groupnorm": 289, "7392": [289, 295], "7335": 289, "7058": [289, 295], "6994": 289, "7677": [289, 295], "7615": [289, 295], "7332": 289, "7632": 289, "arang": 289, "tolist": 289, "default_alpha": 289, "alpha_min": 289, "alpha_max": 289, "alpha_step": 289, "step_siz": 289, "shared_criterion": 289, "do_blockwis": 289, "jason": 289, "transact": 289, "instrument": 290, "writer": 290, "_pre_eval_hook": 290, "_post_eval_hook": 290, "submodul": 290, "whitelist": 290, "_recordingobserv": 290, "output_tensors_dict": 290, "current_it": 290, "get_tensor_valu": 290, "_observer_forward_hook": 290, "activation_post_process": 290, "_add_observer_": 290, "child": 290, "named_children": 290, "leaf": 290, "add_modul": 290, "register_forward_hook": 290, "dump_tim": 290, "summarywrit": 290, "_acc": 290, "tune_": 290, "add_graph": 290, "get_observer_dict": 290, "observer_dict": 290, "strip": 290, "is_quant": 290, "add_histogram": 290, "shell": 290, "bind_al": 290, "logdir_spec": 290, "tune_0_acc0": 290, "tune_1": 290, "tune_1_acc0": 290, "baseline_acc_0": 290, "776": 290, "tune_1_acc_0": 290, "095": 290, "runs_v3": 290, "run_tuning_dump_tensor": 290, "inceptionv3": 290, "run_quant": 290, "topologi": 290, "nc_inceptionv3": 290, "inceptionv3_dump_tensor": 290, "eightbit": 290, "requant": 290, "disappear": 290, "centercrop": 291, "randomcrop": 291, "cropres": 291, "decodeimag": 291, "jpeg": 291, "encodejp": 291, "alignimagechannel": 291, "116": 291, "103": [291, 295], "017": 291, "bilinearimagenet": [291, 294], "topilimag": 291, "padding_mod": 291, "border": 291, "pixel": 291, "edg": 291, "colorjitt": 291, "bright": 291, "satur": 291, "hue": 291, "jitter": 291, "tondarrai": 291, "o1": 292, "human": 292, "concret": 292, "aggress": 292, "flowchart": 292, "htmllabel": 292, "td": 292, "classdef": 292, "itemstyl": 292, "cce5ff": 292, "stroke": 292, "99ccff": 292, "s1": 292, "s2": 292, "s3": 292, "s4": 292, "s5": 292, "s6": 292, "s7": 292, "nbsp": [292, 295], "subgraphstyl": 292, "ffffff": 292, "attempt": 292, "post_training_auto_qu": 292, "increment": 292, "ii": 292, "confidence_batch": 292, "spent": 292, "hawq_v2_loss": 292, "model_loss": 292, "black": 292, "discret": 292, "compli": 292, "prior": 292, "posterior": 292, "short": 292, "never": 292, "loglevel": 292, "endlessli": 292, "perspect": 292, "smbo": 292, "appl": 292, "surrog": 292, "quantil": 292, "densiti": 292, "parzen": 292, "greatest": 292, "hour": 292, "dai": 292, "next_tune_cfg": 292, "overridden": 292, "replic": 292, "replica": 292, "fed": 292, "synchron": 292, "number_of_process": 292, "run_cmd": 292, "abctunestrategi": 292, "familiar": 293, "notebook": 293, "introduct": 293, "organ": 294, "mobilenet_v1": 294, "40": [294, 295], "adam": 294, "beta_1": 294, "beta_2": 294, "999": 294, "epsilon": 294, "sparsecategoricalcrossentropi": 294, "sum_over_batch_s": 294, "from_logit": 294, "1x": 295, "platinum": 295, "8480": 295, "8ghz": 295, "56": 295, "ht": 295, "turbo": 295, "256gb": 295, "16x16gb": 295, "ddr5": 295, "4800": 295, "mt": 295, "bio": 295, "3a14": 295, "tel2p1": 295, "microcod": 295, "0x2b0001b0": 295, "gcc": 295, "20210514": 295, "red": 295, "hat": 295, "visit": 295, "1s4c14ins1bsthroughput": 295, "sec": 295, "1720": 295, "582": 295, "95x": 295, "1517": 295, "570": 295, "65": 295, "66x": 295, "resnet101": 295, "41": 295, "1058": 295, "382": 295, "77x": 295, "69": 295, "2080": 295, "951": 295, "19x": 295, "1587": 295, "863": 295, "37": 295, "84x": 295, "1052": 295, "434": 295, "42x": 295, "707": 295, "234": 295, "02x": 295, "320": 295, "179": 295, "79x": 295, "4312": 295, "1512": 295, "85x": 295, "2287": 295, "1406": 295, "63x": 295, "1367": 295, "59x": 295, "vgg19": 295, "1244": 295, "176": 295, "04x": 295, "resnetv2": 295, "780": 295, "34x": 295, "494": 295, "329": 295, "50x": 295, "152": 295, "349": 295, "235": 295, "48x": 295, "densenet": 295, "161": 295, "29": 295, "282": 295, "223": 295, "26x": 295, "1284": 295, "756": 295, "70x": 295, "1280": 295, "530": 295, "cnn": 295, "39": 295, "26": 295, "178": 295, "13x": 295, "yolov3": 295, "249": 295, "64x": 295, "28x": 295, "36": 295, "05x": 295, "86": 295, "390": 295, "212": 295, "83x": 295, "vit": 295, "81": 295, "230": 295, "142": 295, "62x": 295, "1989": 295, "31x": 295, "1165": 295, "303": 295, "953": 295, "302": 295, "15x": 295, "resnest50": 295, "365": 295, "21x": 295, "resnext101_32x8d": 295, "548": 295, "104": 295, "27x": 295, "efficientnet_b0": 295, "636": 295, "62": 295, "566": 295, "12x": 295, "efficientnet_b3": 295, "471": 295, "358": 295, "32x": 295, "peleenet": 295, "790": 295, "504": 295, "57x": 295, "yolo": 295, "137": 295, "88x": 295, "175": 295, "23x": 295, "camembert": 295, "393": 295, "174": 295, "783": 295, "344": 295, "684": 295, "99x": 295, "312": 295, "155": 295, "60": 295, "01x": 295, "funnel": 295, "281": 295, "395": 295, "173": 295, "373": 295, "405": 295, "30x": 295, "stsb": 295, "396": 295, "136": 295, "377": 295, "17x": 295, "391": 295, "25x": 295, "135": 295, "61x": 295, "117": 295, "93x": 295, "lvwerra": 295, "pegasu": 295, "samsum": 295, "1981": 295, "598": 295, "1095": 295, "298": 295, "67x": 295, "549": 295, "29x": 295, "375": 295, "hellaswag": 295, "winogrand": 295, "piqa": 295, "word_perplex": 295, "4954": 295, "6409": 295, "7541": 295, "6434": 295, "8816": 295, "gptqw4g128asym": 295, "679": 295, "4895": 295, "6433": 295, "7476": 295, "6399": 295, "9945": 295, "0999": 295, "gptqw4g32asym": 295, "6829": 295, "4923": 295, "6401": 295, "7486": 295, "6410": 295, "0141": 295, "gptqw4g128sym": 295, "685": 295, "4907": 295, "6361": 295, "7443": 295, "6390": 295, "1498": 295, "gptqw4g32sym": 295, "6911": 295, "4899": 295, "6448": 295, "7497": 295, "6439": 295, "0008": 295, "0927": 295, "5049": 295, "6543": 295, "7628": 295, "6497": 295, "2862": 295, "4984": 295, "6535": 295, "7568": 295, "6473": 295, "4193": 295, "6885": 295, "4973": 295, "753": 295, "6455": 295, "9935": 295, "4607": 295, "decapoda": 295, "5642": 295, "6709": 295, "7835": 295, "6887": 295, "4202": 295, "7244": 295, "5603": 295, "6614": 295, "6824": 295, "9909": 295, "5881": 295, "5911": 295, "7009": 295, "7878": 295, "7106": 295, "7518": 295, "5843": 295, "6961": 295, "7911": 295, "4319": 295, "7572": 295, "5898": 295, "7056": 295, "7894": 295, "7105": 295, "9998": 295, "3429": 295, "7596": 295, "5841": 295, "6977": 295, "7905": 295, "7080": 295, "4916": 295, "6266": 295, "7277": 295, "8096": 295, "7350": 295, "2384": 295, "778": 295, "624": 295, "7269": 295, "8047": 295, "7334": 295, "9979": 295, "4237": 295, "7706": 295, "6239": 295, "7285": 295, "8058": 295, "7322": 295, "4697": 295, "7836": 295, "6195": 295, "7337": 295, "9983": 295, "5604": 295, "5732": 295, "648": 295, "7715": 295, "6746": 295, "7107": 295, "6982": 295, "5637": 295, "6527": 295, "7704": 295, "6713": 295, "9950": 295, "9702": 295, "5682": 295, "6575": 295, "7758": 295, "6742": 295, "9994": 295, "9317": 295, "567": 295, "6902": 295, "7353": 295, "6622": 295, "7829": 295, "6862": 295, "9635": 295, "7246": 295, "5617": 295, "6756": 295, "7797": 295, "6854": 295, "9931": 295, "2799": 295, "7312": 295, "6059": 295, "7103": 295, "7077": 295, "2213": 295, "7273": 295, "6018": 295, "7088": 295, "7742": 295, "7030": 295, "9934": 295, "2538": 295, "083": 295, "7283": 295, "6053": 295, "7024": 295, "7764": 295, "7031": 295, "1889": 295, "374": 295, "727": 295, "5997": 295, "7018": 295, "9916": 295, "2504": 295, "497": 295, "7122": 295, "8984": 295, "5933": 295, "689": 295, "7851": 295, "7075": 295, "1556": 295, "448": 295, "7675": 295, "5934": 295, "7856": 295, "7111": 295, "9984": 295, "1514": 295, "927": 295, "7566": 295, "5899": 295, "7032": 295, "9953": 295, "1374": 295, "728": 295, "4628": 295, "6456": 295, "6029": 295, "6438": 295, "5799": 295, "4542": 295, "6004": 295, "9957": 295, "0626": 295, "4789": 295, "6134": 295, "7432": 295, "5525": 295, "4731": 295, "6504": 295, "7617": 295, "6094": 295, "7828": 295, "5098": 295, "7622": 295, "6505": 295, "3242": 295, "6878": 295, "5058": 295, "6393": 295, "7633": 295, "6491": 295, "9978": 295, "5514": 295, "6864": 295, "5084": 295, "6519": 295, "6509": 295, "0006": 295, "4728": 295, "6876": 295, "5045": 295, "6474": 295, "9952": 295, "6379": 295, "5282": 295, "614": 295, "7448": 295, "6312": 295, "6377": 295, "5228": 295, "5991": 295, "6261": 295, "4096": 295, "6224": 295, "4271": 295, "577": 295, "722": 295, "5871": 295, "9359": 295, "6123": 295, "4227": 295, "5738": 295, "7203": 295, "5823": 295, "9917": 295, "3377": 295, "615": 295, "4259": 295, "5714": 295, "7247": 295, "9951": 295, "2083": 295, "6154": 295, "4208": 295, "5777": 295, "7198": 295, "5834": 295, "9937": 295, "3121": 295, "7233": 295, "5359": 295, "7753": 295, "195": 295, "7186": 295, "5328": 295, "7699": 295, "6687": 295, "9922": 295, "3463": 295, "7268": 295, "533": 295, "659": 295, "6726": 295, "2897": 295, "5718": 295, "6859": 295, "7927": 295, "6890": 295, "9324": 295, "7006": 295, "5655": 295, "6803": 295, "7965": 295, "6857": 295, "1515": 295, "5752": 295, "6748": 295, "7845": 295, "6724": 295, "5951": 295, "6472": 295, "5716": 295, "6685": 295, "784": 295, "6678": 295, "8539": 295, "6918": 295, "5819": 295, "678": 295, "6861": 295, "8863": 295, "5765": 295, "6827": 295, "7873": 295, "6832": 295, "9958": 295, "1451": 295, "storywrit": 295, "693": 295, "5477": 295, "663": 295, "6719": 295, "9125": 295, "6661": 295, "7813": 295, "6693": 295, "1137": 295, "rw": 295, "6604": 295, "5419": 295, "6598": 295, "6594": 295, "7616": 295, "6484": 295, "5369": 295, "7807": 295, "6559": 295, "9947": 295, "9411": 295, "6571": 295, "5398": 295, "6582": 295, "6579": 295, "8809": 295, "652": 295, "535": 295, "7682": 295, "6532": 295, "9906": 295, "0048": 295, "5177": 295, "6669": 295, "7824": 295, "5053": 295, "6301": 295, "5142": 295, "6654": 295, "6483": 295, "9933": 295, "8146": 295, "517": 295, "9941": 295, "1666": 295, "734": 295, "1658": 295, "1495": 295, "733": 295, "1661": 295, "732": 295, "1713": 295, "767": 295, "1747": 295, "770": 295, "7519": 295, "4430": 295, "4413": 295, "72x": 295, "7190": 295, "4019": 295, "613": 295, "170": 295, "611": 295, "186": 295, "619": 295, "184": 295, "36x": 295, "623": 295, "5711": 295, "2584": 295, "6136": 295, "2630": 295, "33x": 295, "shufflenet": 295, "6820": 295, "3686": 295, "googlenet": 295, "1971": 295, "1120": 295, "76x": 295, "1838": 295, "1142": 295, "squeezenet": 295, "10163": 295, "5771": 295, "10339": 295, "6002": 295, "caffenet": 295, "2805": 295, "1077": 295, "60x": 295, "4351": 295, "822": 295, "2169": 295, "893": 295, "43x": 295, "2232": 295, "841": 295, "65x": 295, "zfnet": 295, "921": 295, "525": 295, "75x": 295, "925": 295, "534": 295, "73x": 295, "1862": 295, "1161": 295, "1956": 295, "1262": 295, "55x": 295, "efficientnet": 295, "2793": 295, "1383": 295, "beit": 295, "206": 295, "91x": 295, "duc": 295, "74x": 295, "ultra": 295, "8780": 295, "1920": 295, "emot": 295, "ferplu": 295, "6360": 295, "3067": 295, "07x": 295, "arcfac": 295, "449": 295, "511": 295, "484": 295, "222": 295, "18x": 295, "integerop": 295, "635": 295, "1324": 295, "244": 295, "47x": 295, "440": 295, "214": 295, "06x": 295, "715": 295, "201": 295, "03x": 295, "714": 295, "213": 295, "339": 295, "58x": 295, "215": 295, "89x": 295, "712": 295, "217": 295, "l12": 295, "h384": 295, "1209": 295, "588": 295, "1268": 295, "16x": 295, "1253": 295, "399": 295, "14x": 295, "l6": 295, "1139": 295, "94x": 295, "2365": 295, "08x": 295, "718": 295, "35x": 295, "electra": 295, "discrimin": 295, "1951": 295, "71x": 295, "2198": 295, "1129": 295, "mini": 295, "5814": 295, "3388": 295, "6396": 295, "3445": 295, "86x": 295, "bart": 295, "126": 295, "spanbert": 295, "multilingu": 295, "82x": 295, "118": 295, "46x": 295, "layoutlmv2": 295, "perplex": 295, "2788": 295, "7002": 295, "4124": 295, "9921": 295, "3950": 295, "9892": 295, "9163": 295, "7240": 295, "9902": 295, "0438": 295, "7634": 295, "1186": 295, "9944": 295, "1276": 295, "7543": 295, "6181": 295, "rtnw4g32asym": 295, "6496": 295, "9967": 295, "7964": 295, "6612": 295, "rtnw4g32sym": 295, "7941": 295, "7243": 295, "9971": 295, "taskdataset": 295, "accuracyspars": 295, "ratiospars": 295, "commentsbalancedor": 295, "unbalanc": 295, "answeringsquad": 295, "87f1": 295, "momentumunbalanc": 295, "momentumbalanc": 295, "90f1": 295, "59f1": 295, "23f1": 295, "classificationmrpc": 295, "52f1": 295, "26f1": 295, "classificationsst": 295, "61accuraci": 295, "recognitionimagenet": 295, "95top1": 295, "v5s6": 295, "detectioncoco": 295, "ap0": 295, "6ap0": 295, "584": 295, "34f1": 295, "lassounbalanc": 295, "classificationmnli": 295, "mm": 295, "allbalanc": 295, "32accuraci": 295, "sensitivitybalanc": 295, "classificationqqp": 295, "classificationqnli": 295, "54accuraci": 295, "em": 295, "mobilenetv2": 295, "wideresnet40": 295, "9522": 295, "8178": 295, "0213": 295, "8235": 295, "027": 295, "5494": 295, "7153": 295, "5540": 295, "5523": 295, "vgg": 295, "bn": 295, "7022": 295, "7415": 295, "7025": 295, "6739": 295, "7399": 295, "6845": 295, "0106": 295, "blendcnn": 295, "7034": 295, "8382": 295, "bilstm": 295, "8314": 295, "9403": 295, "9048": 295, "0734": 295, "7323": 295, "8256": 295, "8084": 295, "8814": 295, "7442": 295, "8371": 295, "0119": 295, "0115": 295, "tinybert": 295, "8018": 295, "8044": 295, "8363": 295, "8411": 295, "8025": 295, "8074": 295, "0007": 295, "8626": 295, "9091": 295, "8782": 295, "8684": 295, "8259": 295, "0058": 295, "distilroberta": 295, "6057": 295, "6187": 295, "0130": 295, "c6i": 295, "2xlarg": 295, "c6a": 295, "c6g": 295, "a100cuda": 295, "executionprovid": 295}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [129, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[3, 0, 0, "-", "algorithm"], [6, 0, 0, "-", "benchmark"], [7, 0, 0, "-", "config"], [8, 0, 0, "-", "contrib"], [23, 0, 0, "-", "data"], [76, 0, 0, "-", "experimental"], [136, 0, 0, "-", "metric"], [138, 0, 0, "-", "mix_precision"], [140, 0, 0, "-", "model"], [148, 0, 0, "-", "objective"], [149, 0, 0, "-", "profiling"], [150, 0, 0, "-", "quantization"], [158, 0, 0, "-", "strategy"], [169, 0, 0, "-", "training"], [173, 0, 0, "-", "utils"], [182, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[1, 0, 0, "-", "algorithm"], [2, 0, 0, "-", "fast_bias_correction"], [4, 0, 0, "-", "smooth_quant"], [5, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[1, 1, 1, "", "ALGORITHMS"], [1, 1, 1, "", "Algorithm"], [1, 1, 1, "", "AlgorithmScheduler"], [1, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[2, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[4, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[5, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[6, 2, 1, "", "benchmark_with_raw_cmd"], [6, 2, 1, "", "call_one"], [6, 2, 1, "", "config_instance"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "generate_prefix"], [6, 2, 1, "", "get_architecture"], [6, 2, 1, "", "get_bounded_threads"], [6, 2, 1, "", "get_core_ids"], [6, 2, 1, "", "get_physical_ids"], [6, 2, 1, "", "get_threads"], [6, 2, 1, "", "get_threads_per_core"], [6, 2, 1, "", "profile"], [6, 2, 1, "", "run_instance"], [6, 2, 1, "", "set_all_env_var"], [6, 2, 1, "", "set_env_var"], [6, 2, 1, "", "summary_benchmark"]], "neural_compressor.config": [[7, 1, 1, "", "AccuracyCriterion"], [7, 1, 1, "", "BenchmarkConfig"], [7, 1, 1, "", "DistillationConfig"], [7, 1, 1, "", "DotDict"], [7, 1, 1, "", "ExportConfig"], [7, 1, 1, "", "HPOConfig"], [7, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [7, 1, 1, "", "Keras"], [7, 1, 1, "", "KnowledgeDistillationLossConfig"], [7, 1, 1, "", "MXNet"], [7, 1, 1, "", "MixedPrecisionConfig"], [7, 1, 1, "", "NASConfig"], [7, 1, 1, "", "ONNX"], [7, 1, 1, "", "ONNXQlinear2QDQConfig"], [7, 1, 1, "", "Options"], [7, 1, 1, "", "PostTrainingQuantConfig"], [7, 1, 1, "", "PyTorch"], [7, 1, 1, "", "QuantizationAwareTrainingConfig"], [7, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [7, 1, 1, "", "TF2ONNXConfig"], [7, 1, 1, "", "TensorFlow"], [7, 1, 1, "", "Torch2ONNXConfig"], [7, 1, 1, "", "TuningCriterion"], [7, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[9, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[10, 0, 0, "-", "sigopt"], [11, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[10, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[18, 0, 0, "-", "datasets"], [22, 0, 0, "-", "filters"], [25, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[12, 0, 0, "-", "bert_dataset"], [13, 0, 0, "-", "coco_dataset"], [14, 0, 0, "-", "dataset"], [15, 0, 0, "-", "dummy_dataset"], [16, 0, 0, "-", "dummy_dataset_v2"], [17, 0, 0, "-", "imagenet_dataset"], [19, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[12, 1, 1, "", "InputFeatures"], [12, 1, 1, "", "ONNXRTBertDataset"], [12, 1, 1, "", "ParseDecodeBert"], [12, 1, 1, "", "PytorchBertDataset"], [12, 1, 1, "", "TensorflowBertDataset"], [12, 1, 1, "", "TensorflowModelZooBertDataset"], [12, 2, 1, "", "convert_examples_to_features"], [12, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[13, 1, 1, "", "COCONpy"], [13, 1, 1, "", "COCORaw"], [13, 1, 1, "", "COCORecordDataset"], [13, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[14, 1, 1, "", "CIFAR10"], [14, 1, 1, "", "CIFAR100"], [14, 1, 1, "", "Dataset"], [14, 1, 1, "", "Datasets"], [14, 1, 1, "", "FashionMNIST"], [14, 1, 1, "", "ImageFolder"], [14, 1, 1, "", "IterableDataset"], [14, 1, 1, "", "MNIST"], [14, 1, 1, "", "MXNetCIFAR10"], [14, 1, 1, "", "MXNetCIFAR100"], [14, 1, 1, "", "MXNetDatasets"], [14, 1, 1, "", "MXNetFashionMNIST"], [14, 1, 1, "", "MXNetImageFolder"], [14, 1, 1, "", "MXNetMNIST"], [14, 1, 1, "", "ONNXRTITDatasets"], [14, 1, 1, "", "ONNXRTQLDatasets"], [14, 1, 1, "", "PyTorchDatasets"], [14, 1, 1, "", "PytorchCIFAR10"], [14, 1, 1, "", "PytorchCIFAR100"], [14, 1, 1, "", "PytorchFashionMNIST"], [14, 1, 1, "", "PytorchMNIST"], [14, 1, 1, "", "PytorchMxnetWrapDataset"], [14, 1, 1, "", "PytorchMxnetWrapFunction"], [14, 1, 1, "", "Tensorflow"], [14, 1, 1, "", "TensorflowCIFAR10"], [14, 1, 1, "", "TensorflowCIFAR100"], [14, 1, 1, "", "TensorflowDatasets"], [14, 1, 1, "", "TensorflowFashionMNIST"], [14, 1, 1, "", "TensorflowImageRecord"], [14, 1, 1, "", "TensorflowMNIST"], [14, 1, 1, "", "TensorflowTFRecordDataset"], [14, 1, 1, "", "TensorflowVOCRecord"], [14, 2, 1, "", "calculate_md5"], [14, 2, 1, "", "check_integrity"], [14, 2, 1, "", "dataset_registry"], [14, 2, 1, "", "download_url"], [14, 3, 1, "", "framework_datasets"], [14, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[15, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, 1, 1, "", "DummyDataset"], [16, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, 1, 1, "", "ImagenetRaw"], [17, 1, 1, "", "MXNetImagenetRaw"], [17, 1, 1, "", "ONNXRTImagenetDataset"], [17, 1, 1, "", "PytorchImagenetRaw"], [17, 1, 1, "", "TensorflowImagenetDataset"], [17, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[20, 0, 0, "-", "coco_filter"], [21, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[20, 1, 1, "", "LabelBalanceCOCORawFilter"], [20, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[21, 1, 1, "", "FILTERS"], [21, 1, 1, "", "Filter"], [21, 1, 1, "", "MXNetFilters"], [21, 1, 1, "", "ONNXRTITFilters"], [21, 1, 1, "", "ONNXRTQLFilters"], [21, 1, 1, "", "PyTorchFilters"], [21, 1, 1, "", "TensorflowFilters"], [21, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[24, 0, 0, "-", "imagenet_transform"], [26, 0, 0, "-", "postprocess"], [27, 0, 0, "-", "tokenization"], [28, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[24, 1, 1, "", "BilinearImagenetTransform"], [24, 1, 1, "", "LabelShift"], [24, 1, 1, "", "ONNXResizeCropImagenetTransform"], [24, 1, 1, "", "OnnxBilinearImagenetTransform"], [24, 1, 1, "", "ParseDecodeImagenet"], [24, 1, 1, "", "ParseDecodeImagenetTransform"], [24, 1, 1, "", "QuantizedInput"], [24, 1, 1, "", "ResizeWithAspectRatio"], [24, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [24, 1, 1, "", "TensorflowShiftRescale"], [24, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[26, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, 1, 1, "", "BasicTokenizer"], [27, 1, 1, "", "FullTokenizer"], [27, 1, 1, "", "WordpieceTokenizer"], [27, 2, 1, "", "convert_by_vocab"], [27, 2, 1, "", "convert_to_unicode"], [27, 2, 1, "", "load_vocab"], [27, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[28, 1, 1, "", "AlignImageChannelTransform"], [28, 1, 1, "", "BaseTransform"], [28, 1, 1, "", "CastONNXTransform"], [28, 1, 1, "", "CastPyTorchTransform"], [28, 1, 1, "", "CastTFTransform"], [28, 1, 1, "", "CenterCropTFTransform"], [28, 1, 1, "", "CenterCropTransform"], [28, 1, 1, "", "CollectTransform"], [28, 1, 1, "", "ComposeTransform"], [28, 1, 1, "", "CropResizeTFTransform"], [28, 1, 1, "", "CropResizeTransform"], [28, 1, 1, "", "CropToBoundingBox"], [28, 1, 1, "", "InputFeatures"], [28, 1, 1, "", "MXNetCropResizeTransform"], [28, 1, 1, "", "MXNetCropToBoundingBox"], [28, 1, 1, "", "MXNetNormalizeTransform"], [28, 1, 1, "", "MXNetTransforms"], [28, 1, 1, "", "MXNetTranspose"], [28, 1, 1, "", "NormalizeTFTransform"], [28, 1, 1, "", "NormalizeTransform"], [28, 1, 1, "", "ONNXRTCropToBoundingBox"], [28, 1, 1, "", "ONNXRTITTransforms"], [28, 1, 1, "", "ONNXRTQLTransforms"], [28, 1, 1, "", "PaddedCenterCropTransform"], [28, 1, 1, "", "ParseDecodeVocTransform"], [28, 1, 1, "", "PyTorchAlignImageChannel"], [28, 1, 1, "", "PyTorchCropResizeTransform"], [28, 1, 1, "", "PyTorchNormalizeTransform"], [28, 1, 1, "", "PyTorchTransforms"], [28, 1, 1, "", "PyTorchTranspose"], [28, 1, 1, "", "PytorchMxnetTransform"], [28, 1, 1, "", "PytorchMxnetWrapFunction"], [28, 1, 1, "", "RandomCropTFTransform"], [28, 1, 1, "", "RandomCropTransform"], [28, 1, 1, "", "RandomHorizontalFlip"], [28, 1, 1, "", "RandomResizedCropMXNetTransform"], [28, 1, 1, "", "RandomResizedCropPytorchTransform"], [28, 1, 1, "", "RandomResizedCropTFTransform"], [28, 1, 1, "", "RandomResizedCropTransform"], [28, 1, 1, "", "RandomVerticalFlip"], [28, 1, 1, "", "RescaleKerasPretrainTransform"], [28, 1, 1, "", "RescaleTFTransform"], [28, 1, 1, "", "RescaleTransform"], [28, 1, 1, "", "ResizeMXNetTransform"], [28, 1, 1, "", "ResizePytorchTransform"], [28, 1, 1, "", "ResizeTFTransform"], [28, 1, 1, "", "ResizeTransform"], [28, 1, 1, "", "ResizeWithRatio"], [28, 1, 1, "", "SquadExample"], [28, 1, 1, "", "TFModelZooCollectTransform"], [28, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [28, 1, 1, "", "TFSquadV1PostTransform"], [28, 1, 1, "", "TRANSFORMS"], [28, 1, 1, "", "TensorflowCropToBoundingBox"], [28, 1, 1, "", "TensorflowRandomHorizontalFlip"], [28, 1, 1, "", "TensorflowRandomVerticalFlip"], [28, 1, 1, "", "TensorflowResizeWithRatio"], [28, 1, 1, "", "TensorflowTransform"], [28, 1, 1, "", "TensorflowTransforms"], [28, 1, 1, "", "TensorflowTranspose"], [28, 1, 1, "", "TensorflowWrapFunction"], [28, 1, 1, "", "ToArray"], [28, 1, 1, "", "ToNDArrayTransform"], [28, 1, 1, "", "Transforms"], [28, 1, 1, "", "Transpose"], [28, 2, 1, "", "convert_examples_to_features"], [28, 2, 1, "", "get_final_text"], [28, 2, 1, "", "get_torchvision_map"], [28, 2, 1, "", "read_squad_examples"], [28, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[29, 0, 0, "-", "benchmark"], [32, 0, 0, "-", "common"], [38, 0, 0, "-", "component"], [39, 0, 0, "-", "compression"], [40, 0, 0, "-", "contrib"], [65, 0, 0, "-", "data"], [70, 0, 0, "-", "distillation"], [71, 0, 0, "-", "export"], [75, 0, 0, "-", "graph_optimization"], [83, 0, 0, "-", "metric"], [85, 0, 0, "-", "mixed_precision"], [86, 0, 0, "-", "model_conversion"], [89, 0, 0, "-", "nas"], [95, 0, 0, "-", "pruner_legacy"], [99, 0, 0, "-", "pruning"], [100, 0, 0, "-", "pruning_recipes"], [104, 0, 0, "-", "pruning_v2"], [105, 0, 0, "-", "pytorch_pruner"], [112, 0, 0, "-", "quantization"], [113, 0, 0, "-", "scheduler"], [118, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[29, 1, 1, "", "Benchmark"], [29, 2, 1, "", "get_architecture"], [29, 2, 1, "", "get_bounded_threads"], [29, 2, 1, "", "get_core_ids"], [29, 2, 1, "", "get_physical_ids"], [29, 2, 1, "", "get_threads"], [29, 2, 1, "", "get_threads_per_core"], [29, 2, 1, "", "set_all_env_var"], [29, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[30, 0, 0, "-", "criterion"], [31, 0, 0, "-", "dataloader"], [33, 0, 0, "-", "metric"], [34, 0, 0, "-", "model"], [35, 0, 0, "-", "optimizer"], [36, 0, 0, "-", "postprocess"], [37, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[30, 1, 1, "", "Criterions"], [30, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "KnowledgeDistillationFramework"], [30, 1, 1, "", "KnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchCriterions"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [30, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [30, 1, 1, "", "SelfKnowledgeDistillationLoss"], [30, 1, 1, "", "TensorflowCriterions"], [30, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [30, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[31, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[33, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[34, 1, 1, "", "Model"], [34, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[35, 1, 1, "", "Optimizers"], [35, 1, 1, "", "PyTorchOptimizers"], [35, 1, 1, "", "PyTorchSGD"], [35, 1, 1, "", "TensorFlowAdamW"], [35, 1, 1, "", "TensorFlowSGD"], [35, 1, 1, "", "TensorflowOptimizers"], [35, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[36, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, 2, 1, "", "get_activation"], [37, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[38, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[41, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[42, 0, 0, "-", "sigopt"], [43, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[48, 0, 0, "-", "dataloaders"], [60, 0, 0, "-", "datasets"], [64, 0, 0, "-", "filters"], [67, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[44, 0, 0, "-", "base_dataloader"], [45, 0, 0, "-", "dataloader"], [46, 0, 0, "-", "default_dataloader"], [47, 0, 0, "-", "fetcher"], [49, 0, 0, "-", "mxnet_dataloader"], [50, 0, 0, "-", "onnxrt_dataloader"], [51, 0, 0, "-", "pytorch_dataloader"], [52, 0, 0, "-", "sampler"], [53, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, 1, 1, "", "DefaultDataLoader"], [46, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, 1, 1, "", "Fetcher"], [47, 1, 1, "", "IndexFetcher"], [47, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, 1, 1, "", "ONNXRTBertDataLoader"], [50, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, 1, 1, "", "BatchSampler"], [52, 1, 1, "", "IterableSampler"], [52, 1, 1, "", "Sampler"], [52, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, 1, 1, "", "TFDataDataLoader"], [53, 1, 1, "", "TensorflowBertDataLoader"], [53, 1, 1, "", "TensorflowDataLoader"], [53, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[54, 0, 0, "-", "bert_dataset"], [55, 0, 0, "-", "coco_dataset"], [56, 0, 0, "-", "dataset"], [57, 0, 0, "-", "dummy_dataset"], [58, 0, 0, "-", "dummy_dataset_v2"], [59, 0, 0, "-", "imagenet_dataset"], [61, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, 1, 1, "", "InputFeatures"], [54, 1, 1, "", "ONNXRTBertDataset"], [54, 1, 1, "", "ParseDecodeBert"], [54, 1, 1, "", "PytorchBertDataset"], [54, 1, 1, "", "TensorflowBertDataset"], [54, 1, 1, "", "TensorflowModelZooBertDataset"], [54, 2, 1, "", "convert_examples_to_features"], [54, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, 1, 1, "", "COCONpy"], [55, 1, 1, "", "COCORaw"], [55, 1, 1, "", "COCORecordDataset"], [55, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[56, 1, 1, "", "CIFAR10"], [56, 1, 1, "", "CIFAR100"], [56, 1, 1, "", "Dataset"], [56, 1, 1, "", "Datasets"], [56, 1, 1, "", "FashionMNIST"], [56, 1, 1, "", "ImageFolder"], [56, 1, 1, "", "IterableDataset"], [56, 1, 1, "", "MNIST"], [56, 1, 1, "", "MXNetCIFAR10"], [56, 1, 1, "", "MXNetCIFAR100"], [56, 1, 1, "", "MXNetDatasets"], [56, 1, 1, "", "MXNetFashionMNIST"], [56, 1, 1, "", "MXNetImageFolder"], [56, 1, 1, "", "MXNetMNIST"], [56, 1, 1, "", "ONNXRTITDatasets"], [56, 1, 1, "", "ONNXRTQLDatasets"], [56, 1, 1, "", "PyTorchDatasets"], [56, 1, 1, "", "PytorchCIFAR10"], [56, 1, 1, "", "PytorchCIFAR100"], [56, 1, 1, "", "PytorchFashionMNIST"], [56, 1, 1, "", "PytorchMNIST"], [56, 1, 1, "", "PytorchMxnetWrapDataset"], [56, 1, 1, "", "PytorchMxnetWrapFunction"], [56, 1, 1, "", "TensorflowCIFAR10"], [56, 1, 1, "", "TensorflowCIFAR100"], [56, 1, 1, "", "TensorflowDatasets"], [56, 1, 1, "", "TensorflowFashionMNIST"], [56, 1, 1, "", "TensorflowImageFolder"], [56, 1, 1, "", "TensorflowImageRecord"], [56, 1, 1, "", "TensorflowMNIST"], [56, 1, 1, "", "TensorflowTFRecordDataset"], [56, 1, 1, "", "TensorflowVOCRecord"], [56, 2, 1, "", "calculate_md5"], [56, 2, 1, "", "check_integrity"], [56, 2, 1, "", "dataset_registry"], [56, 2, 1, "", "download_url"], [56, 3, 1, "", "framework_datasets"], [56, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, 1, 1, "", "DummyDataset"], [58, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, 1, 1, "", "ImagenetRaw"], [59, 1, 1, "", "MXNetImagenetRaw"], [59, 1, 1, "", "ONNXRTImagenetDataset"], [59, 1, 1, "", "PytorchImagenetRaw"], [59, 1, 1, "", "TensorflowImagenetDataset"], [59, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[62, 0, 0, "-", "coco_filter"], [63, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, 1, 1, "", "LabelBalanceCOCORawFilter"], [62, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[63, 1, 1, "", "FILTERS"], [63, 1, 1, "", "Filter"], [63, 1, 1, "", "MXNetFilters"], [63, 1, 1, "", "ONNXRTITFilters"], [63, 1, 1, "", "ONNXRTQLFilters"], [63, 1, 1, "", "PyTorchFilters"], [63, 1, 1, "", "TensorflowFilters"], [63, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[66, 0, 0, "-", "imagenet_transform"], [68, 0, 0, "-", "tokenization"], [69, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, 1, 1, "", "BilinearImagenetTransform"], [66, 1, 1, "", "LabelShift"], [66, 1, 1, "", "ONNXResizeCropImagenetTransform"], [66, 1, 1, "", "OnnxBilinearImagenetTransform"], [66, 1, 1, "", "ParseDecodeImagenet"], [66, 1, 1, "", "ParseDecodeImagenetTransform"], [66, 1, 1, "", "QuantizedInput"], [66, 1, 1, "", "ResizeWithAspectRatio"], [66, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, 1, 1, "", "BasicTokenizer"], [68, 1, 1, "", "FullTokenizer"], [68, 1, 1, "", "WordpieceTokenizer"], [68, 2, 1, "", "convert_by_vocab"], [68, 2, 1, "", "convert_to_unicode"], [68, 2, 1, "", "load_vocab"], [68, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[69, 1, 1, "", "AlignImageChannelTransform"], [69, 1, 1, "", "BaseTransform"], [69, 1, 1, "", "CastONNXTransform"], [69, 1, 1, "", "CastPyTorchTransform"], [69, 1, 1, "", "CastTFTransform"], [69, 1, 1, "", "CenterCropTFTransform"], [69, 1, 1, "", "CenterCropTransform"], [69, 1, 1, "", "CollectTransform"], [69, 1, 1, "", "ComposeTransform"], [69, 1, 1, "", "CropResizeTFTransform"], [69, 1, 1, "", "CropResizeTransform"], [69, 1, 1, "", "CropToBoundingBox"], [69, 1, 1, "", "InputFeatures"], [69, 1, 1, "", "MXNetCropResizeTransform"], [69, 1, 1, "", "MXNetCropToBoundingBox"], [69, 1, 1, "", "MXNetNormalizeTransform"], [69, 1, 1, "", "MXNetTransforms"], [69, 1, 1, "", "MXNetTranspose"], [69, 1, 1, "", "NormalizeTFTransform"], [69, 1, 1, "", "NormalizeTransform"], [69, 1, 1, "", "ONNXRTCropToBoundingBox"], [69, 1, 1, "", "ONNXRTITTransforms"], [69, 1, 1, "", "ONNXRTQLTransforms"], [69, 1, 1, "", "PaddedCenterCropTransform"], [69, 1, 1, "", "ParseDecodeVocTransform"], [69, 1, 1, "", "PyTorchAlignImageChannel"], [69, 1, 1, "", "PyTorchCropResizeTransform"], [69, 1, 1, "", "PyTorchNormalizeTransform"], [69, 1, 1, "", "PyTorchTransforms"], [69, 1, 1, "", "PyTorchTranspose"], [69, 1, 1, "", "PytorchMxnetTransform"], [69, 1, 1, "", "PytorchMxnetWrapFunction"], [69, 1, 1, "", "RandomCropTFTransform"], [69, 1, 1, "", "RandomCropTransform"], [69, 1, 1, "", "RandomHorizontalFlip"], [69, 1, 1, "", "RandomResizedCropMXNetTransform"], [69, 1, 1, "", "RandomResizedCropPytorchTransform"], [69, 1, 1, "", "RandomResizedCropTFTransform"], [69, 1, 1, "", "RandomResizedCropTransform"], [69, 1, 1, "", "RandomVerticalFlip"], [69, 1, 1, "", "RescaleKerasPretrainTransform"], [69, 1, 1, "", "RescaleTFTransform"], [69, 1, 1, "", "RescaleTransform"], [69, 1, 1, "", "ResizeMXNetTransform"], [69, 1, 1, "", "ResizePytorchTransform"], [69, 1, 1, "", "ResizeTFTransform"], [69, 1, 1, "", "ResizeTransform"], [69, 1, 1, "", "ResizeWithRatio"], [69, 1, 1, "", "SquadExample"], [69, 1, 1, "", "TFModelZooCollectTransform"], [69, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [69, 1, 1, "", "TFSquadV1PostTransform"], [69, 1, 1, "", "TRANSFORMS"], [69, 1, 1, "", "TensorflowCropToBoundingBox"], [69, 1, 1, "", "TensorflowRandomHorizontalFlip"], [69, 1, 1, "", "TensorflowRandomVerticalFlip"], [69, 1, 1, "", "TensorflowResizeWithRatio"], [69, 1, 1, "", "TensorflowTransform"], [69, 1, 1, "", "TensorflowTransforms"], [69, 1, 1, "", "TensorflowTranspose"], [69, 1, 1, "", "TensorflowWrapFunction"], [69, 1, 1, "", "ToArray"], [69, 1, 1, "", "ToNDArrayTransform"], [69, 1, 1, "", "Transforms"], [69, 1, 1, "", "Transpose"], [69, 2, 1, "", "convert_examples_to_features"], [69, 2, 1, "", "get_final_text"], [69, 2, 1, "", "get_torchvision_map"], [69, 2, 1, "", "read_squad_examples"], [69, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[70, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[70, 4, 1, "", "_epoch_ran"], [70, 4, 1, "", "best_model"], [70, 4, 1, "", "best_score"], [70, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[72, 0, 0, "-", "qlinear2qdq"], [73, 0, 0, "-", "tf2onnx"], [74, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, 2, 1, "", "check_model"], [72, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, 2, 1, "", "tf_to_fp32_onnx"], [73, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, 2, 1, "", "dynamic_quant_export"], [74, 2, 1, "", "get_node_mapping"], [74, 2, 1, "", "get_quantizable_onnx_ops"], [74, 2, 1, "", "static_quant_export"], [74, 2, 1, "", "torch_to_fp32_onnx"], [74, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[75, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[77, 0, 0, "-", "bleu"], [78, 0, 0, "-", "bleu_util"], [79, 0, 0, "-", "coco_label_map"], [80, 0, 0, "-", "coco_tools"], [81, 0, 0, "-", "evaluate_squad"], [82, 0, 0, "-", "f1"], [84, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[77, 1, 1, "", "BLEU"], [77, 1, 1, "", "UnicodeRegex"], [77, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[77, 4, 1, "", "labels"], [77, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[77, 4, 1, "", "nondigit_punct_re"], [77, 4, 1, "", "punct_nondigit_re"], [77, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[78, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[80, 1, 1, "", "COCOEvalWrapper"], [80, 1, 1, "", "COCOWrapper"], [80, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [80, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [80, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[80, 4, 1, "", "dataset"], [80, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, 2, 1, "", "evaluate"], [81, 2, 1, "", "exact_match_score"], [81, 2, 1, "", "f1_score"], [81, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, 2, 1, "", "evaluate"], [82, 2, 1, "", "f1_score"], [82, 2, 1, "", "metric_max_over_ground_truths"], [82, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[84, 1, 1, "", "Accuracy"], [84, 1, 1, "", "BaseMetric"], [84, 1, 1, "", "COCOmAPv2"], [84, 1, 1, "", "F1"], [84, 1, 1, "", "GeneralTopK"], [84, 1, 1, "", "Loss"], [84, 1, 1, "", "MAE"], [84, 1, 1, "", "METRICS"], [84, 1, 1, "", "MSE"], [84, 1, 1, "", "MXNetMetrics"], [84, 1, 1, "", "ONNXRTGLUE"], [84, 1, 1, "", "ONNXRTITMetrics"], [84, 1, 1, "", "ONNXRTQLMetrics"], [84, 1, 1, "", "PyTorchLoss"], [84, 1, 1, "", "PyTorchMetrics"], [84, 1, 1, "", "RMSE"], [84, 1, 1, "", "ROC"], [84, 1, 1, "", "SquadF1"], [84, 1, 1, "", "TensorflowCOCOMAP"], [84, 1, 1, "", "TensorflowMAP"], [84, 1, 1, "", "TensorflowMetrics"], [84, 1, 1, "", "TensorflowTopK"], [84, 1, 1, "", "TensorflowVOCMAP"], [84, 1, 1, "", "WrapMXNetMetric"], [84, 1, 1, "", "WrapONNXRTMetric"], [84, 1, 1, "", "WrapPyTorchMetric"], [84, 1, 1, "", "mIOU"], [84, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"], [84, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[84, 4, 1, "", "sample"], [84, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[84, 4, 1, "", "compare_label"], [84, 4, 1, "", "label_list"], [84, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[84, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[84, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[84, 4, 1, "", "k"], [84, 4, 1, "", "num_correct"], [84, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[85, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[86, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[87, 0, 0, "-", "basic_nas"], [88, 0, 0, "-", "dynas"], [90, 0, 0, "-", "nas"], [91, 0, 0, "-", "nas_utils"], [92, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[87, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[88, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[90, 1, 1, "", "NAS"], [90, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[91, 2, 1, "", "create_search_space_pool"], [91, 2, 1, "", "find_pareto_front"], [91, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[92, 1, 1, "", "BayesianOptimizationSearcher"], [92, 1, 1, "", "GridSearcher"], [92, 1, 1, "", "RandomSearcher"], [92, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[93, 0, 0, "-", "gradient_sensitivity"], [94, 0, 0, "-", "group_lasso"], [96, 0, 0, "-", "magnitude"], [97, 0, 0, "-", "pattern_lock"], [98, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, 1, 1, "", "Pruner"], [98, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[99, 1, 1, "", "Pruning"], [99, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[99, 4, 1, "", "conf"], [99, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[101, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[102, 0, 0, "-", "pattern"], [103, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, 1, 1, "", "PATTERNS"], [102, 1, 1, "", "PatternBase"], [102, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[102, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, 1, 1, "", "TilePatternBase"], [103, 1, 1, "", "TilePattern_1x1"], [103, 1, 1, "", "TilePattern_1x16"], [103, 1, 1, "", "TilePattern_1x2"], [103, 1, 1, "", "TilePattern_2x2"], [103, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[104, 1, 1, "", "Pruning"], [104, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[104, 4, 1, "", "conf"], [104, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[106, 0, 0, "-", "logger"], [107, 0, 0, "-", "patterns"], [108, 0, 0, "-", "prune_utils"], [109, 0, 0, "-", "pruner"], [110, 0, 0, "-", "pruning"], [111, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, 1, 1, "", "Pattern"], [107, 1, 1, "", "PatternNInM"], [107, 1, 1, "", "PatternNxM"], [107, 2, 1, "", "get_pattern"], [107, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[107, 4, 1, "", "is_global"], [107, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[107, 4, 1, "", "M"], [107, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[107, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, 2, 1, "", "check_config"], [108, 2, 1, "", "parse_not_to_prune"], [108, 2, 1, "", "parse_to_prune"], [108, 2, 1, "", "process_and_check_config"], [108, 2, 1, "", "process_config"], [108, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, 1, 1, "", "MagnitudePruner"], [109, 1, 1, "", "PatternLockPruner"], [109, 1, 1, "", "Pruner"], [109, 1, 1, "", "SnipMomentumPruner"], [109, 1, 1, "", "SnipPruner"], [109, 2, 1, "", "get_pruner"], [109, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[109, 4, 1, "", "config"], [109, 4, 1, "", "current_sparsity_ratio"], [109, 4, 1, "", "end_step"], [109, 4, 1, "", "global_step"], [109, 4, 1, "", "masks"], [109, 4, 1, "", "max_sparsity_ratio_per_layer"], [109, 4, 1, "", "modules"], [109, 4, 1, "", "pattern"], [109, 4, 1, "", "scheduler"], [109, 4, 1, "", "scores"], [109, 4, 1, "", "start_step"], [109, 4, 1, "", "target_sparsity_ratio"], [109, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[110, 4, 1, "", "config_file_path"], [110, 4, 1, "", "model"], [110, 4, 1, "", "pruner_info"], [110, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, 1, 1, "", "IterativeScheduler"], [111, 1, 1, "", "OneshotScheduler"], [111, 1, 1, "", "Scheduler"], [111, 2, 1, "", "get_scheduler"], [111, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[111, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[112, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[113, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[114, 0, 0, "-", "auto_mixed_precision"], [115, 0, 0, "-", "basic"], [116, 0, 0, "-", "bayesian"], [117, 0, 0, "-", "exhaustive"], [119, 0, 0, "-", "mse"], [120, 0, 0, "-", "mse_v2"], [121, 0, 0, "-", "random"], [122, 0, 0, "-", "strategy"], [124, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[116, 1, 1, "", "BayesianOptimization"], [116, 1, 1, "", "BayesianTuneStrategy"], [116, 1, 1, "", "TargetSpace"], [116, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[117, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, 1, 1, "", "TuneStrategy"], [122, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[123, 0, 0, "-", "constant"], [125, 0, 0, "-", "tuning_sampler"], [126, 0, 0, "-", "tuning_space"], [127, 0, 0, "-", "tuning_structs"], [128, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, 1, 1, "", "FallbackTuningSampler"], [125, 1, 1, "", "ModelWiseTuningSampler"], [125, 1, 1, "", "OpTypeWiseTuningSampler"], [125, 1, 1, "", "OpWiseTuningSampler"], [125, 1, 1, "", "SmoothQuantSampler"], [125, 1, 1, "", "TuningOrder"], [125, 1, 1, "", "TuningSampler"], [125, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, 1, 1, "", "TuningItem"], [126, 1, 1, "", "TuningSpace"], [126, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [126, 2, 1, "", "pattern_to_internal"], [126, 2, 1, "", "pattern_to_path"], [126, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[128, 1, 1, "", "OrderedDefaultDict"], [128, 2, 1, "", "extract_data_type"], [128, 2, 1, "", "get_adaptor_name"], [128, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[130, 0, 0, "-", "bleu"], [131, 0, 0, "-", "bleu_util"], [132, 0, 0, "-", "coco_label_map"], [133, 0, 0, "-", "coco_tools"], [134, 0, 0, "-", "evaluate_squad"], [135, 0, 0, "-", "f1"], [137, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[130, 1, 1, "", "BLEU"], [130, 1, 1, "", "UnicodeRegex"], [130, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[130, 4, 1, "", "labels"], [130, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[130, 4, 1, "", "nondigit_punct_re"], [130, 4, 1, "", "punct_nondigit_re"], [130, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[131, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[133, 1, 1, "", "COCOEvalWrapper"], [133, 1, 1, "", "COCOWrapper"], [133, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [133, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [133, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[133, 4, 1, "", "dataset"], [133, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[134, 2, 1, "", "evaluate"], [134, 2, 1, "", "exact_match_score"], [134, 2, 1, "", "f1_score"], [134, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, 2, 1, "", "evaluate"], [135, 2, 1, "", "f1_score"], [135, 2, 1, "", "metric_max_over_ground_truths"], [135, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[137, 1, 1, "", "Accuracy"], [137, 1, 1, "", "BaseMetric"], [137, 1, 1, "", "COCOmAPv2"], [137, 1, 1, "", "F1"], [137, 1, 1, "", "GeneralTopK"], [137, 1, 1, "", "Loss"], [137, 1, 1, "", "MAE"], [137, 1, 1, "", "METRICS"], [137, 1, 1, "", "MSE"], [137, 1, 1, "", "MXNetMetrics"], [137, 1, 1, "", "Metric"], [137, 1, 1, "", "ONNXRTGLUE"], [137, 1, 1, "", "ONNXRTITMetrics"], [137, 1, 1, "", "ONNXRTQLMetrics"], [137, 1, 1, "", "PyTorchLoss"], [137, 1, 1, "", "PyTorchMetrics"], [137, 1, 1, "", "RMSE"], [137, 1, 1, "", "ROC"], [137, 1, 1, "", "SquadF1"], [137, 1, 1, "", "TensorflowCOCOMAP"], [137, 1, 1, "", "TensorflowMAP"], [137, 1, 1, "", "TensorflowMetrics"], [137, 1, 1, "", "TensorflowTopK"], [137, 1, 1, "", "TensorflowVOCMAP"], [137, 1, 1, "", "WrapMXNetMetric"], [137, 1, 1, "", "WrapONNXRTMetric"], [137, 1, 1, "", "WrapPyTorchMetric"], [137, 1, 1, "", "mIOU"], [137, 2, 1, "", "metric_registry"], [137, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"], [137, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[137, 4, 1, "", "sample"], [137, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[137, 4, 1, "", "compare_label"], [137, 4, 1, "", "label_list"], [137, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[137, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[137, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[137, 4, 1, "", "k"], [137, 4, 1, "", "num_correct"], [137, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[138, 2, 1, "", "fit"]], "neural_compressor.model": [[139, 0, 0, "-", "base_model"], [141, 0, 0, "-", "keras_model"], [142, 0, 0, "-", "model"], [143, 0, 0, "-", "mxnet_model"], [144, 0, 0, "-", "nets_factory"], [145, 0, 0, "-", "onnx_model"], [146, 0, 0, "-", "tensorflow_model"], [147, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[139, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[141, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[142, 1, 1, "", "Model"], [142, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[143, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[144, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[145, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[146, 1, 1, "", "TensorflowBaseModel"], [146, 1, 1, "", "TensorflowCheckpointModel"], [146, 1, 1, "", "TensorflowLLMModel"], [146, 1, 1, "", "TensorflowModel"], [146, 1, 1, "", "TensorflowQATModel"], [146, 1, 1, "", "TensorflowSavedModelModel"], [146, 2, 1, "", "checkpoint_session"], [146, 2, 1, "", "estimator_session"], [146, 2, 1, "", "frozen_pb_session"], [146, 2, 1, "", "get_model_type"], [146, 2, 1, "", "graph_def_session"], [146, 2, 1, "", "graph_session"], [146, 2, 1, "", "keras_session"], [146, 2, 1, "", "load_saved_model"], [146, 2, 1, "", "saved_model_session"], [146, 2, 1, "", "slim_session"], [146, 2, 1, "", "try_loading_keras"], [146, 2, 1, "", "validate_and_inference_input_output"], [146, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[147, 1, 1, "", "IPEXModel"], [147, 1, 1, "", "PyTorchBaseModel"], [147, 1, 1, "", "PyTorchFXModel"], [147, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[148, 1, 1, "", "Accuracy"], [148, 1, 1, "", "Footprint"], [148, 1, 1, "", "ModelSize"], [148, 1, 1, "", "MultiObjective"], [148, 1, 1, "", "Objective"], [148, 1, 1, "", "Performance"], [148, 2, 1, "", "objective_custom_registry"], [148, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[150, 2, 1, "", "fit"]], "neural_compressor.strategy": [[151, 0, 0, "-", "auto"], [152, 0, 0, "-", "auto_mixed_precision"], [153, 0, 0, "-", "basic"], [154, 0, 0, "-", "bayesian"], [155, 0, 0, "-", "conservative"], [156, 0, 0, "-", "exhaustive"], [157, 0, 0, "-", "hawq_v2"], [159, 0, 0, "-", "mse"], [160, 0, 0, "-", "mse_v2"], [161, 0, 0, "-", "random"], [162, 0, 0, "-", "strategy"], [164, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[151, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[153, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[154, 1, 1, "", "BayesianOptimization"], [154, 1, 1, "", "BayesianTuneStrategy"], [154, 1, 1, "", "TargetSpace"], [154, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[155, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[159, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[161, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[162, 1, 1, "", "TuneStrategy"], [162, 1, 1, "", "TuneStrategyMeta"], [162, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[163, 0, 0, "-", "constant"], [165, 0, 0, "-", "tuning_sampler"], [166, 0, 0, "-", "tuning_space"], [167, 0, 0, "-", "tuning_structs"], [168, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, 1, 1, "", "BlockFallbackTuningSampler"], [165, 1, 1, "", "FallbackTuningSampler"], [165, 1, 1, "", "LowerBitsSampler"], [165, 1, 1, "", "ModelWiseTuningSampler"], [165, 1, 1, "", "OpTypeWiseTuningSampler"], [165, 1, 1, "", "OpWiseTuningSampler"], [165, 1, 1, "", "SmoothQuantSampler"], [165, 1, 1, "", "TuningOrder"], [165, 1, 1, "", "TuningSampler"], [165, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, 1, 1, "", "TuningItem"], [166, 1, 1, "", "TuningSpace"], [166, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [166, 2, 1, "", "pattern_to_internal"], [166, 2, 1, "", "pattern_to_path"], [166, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[167, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[168, 1, 1, "", "ClassRegister"], [168, 1, 1, "", "OrderedDefaultDict"], [168, 1, 1, "", "QuantOptions"], [168, 1, 1, "", "QuantType"], [168, 2, 1, "", "build_slave_faker_model"], [168, 2, 1, "", "extract_data_type"], [168, 2, 1, "", "get_adaptor_name"], [168, 2, 1, "", "preprocess_user_cfg"], [168, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[169, 1, 1, "", "CallBacks"], [169, 1, 1, "", "CompressionManager"], [169, 2, 1, "", "fit"], [169, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[170, 0, 0, "-", "collect_layer_histogram"], [171, 0, 0, "-", "constant"], [172, 0, 0, "-", "create_obj_from_config"], [174, 0, 0, "-", "kl_divergence"], [175, 0, 0, "-", "load_huggingface"], [176, 0, 0, "-", "logger"], [177, 0, 0, "-", "neural_insights_utils"], [178, 0, 0, "-", "options"], [179, 0, 0, "-", "pytorch"], [180, 0, 0, "-", "utility"], [181, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[170, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[172, 2, 1, "", "create_dataloader"], [172, 2, 1, "", "create_dataset"], [172, 2, 1, "", "create_eval_func"], [172, 2, 1, "", "create_train_func"], [172, 2, 1, "", "get_algorithm"], [172, 2, 1, "", "get_func_from_config"], [172, 2, 1, "", "get_metrics"], [172, 2, 1, "", "get_postprocess"], [172, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[174, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[175, 1, 1, "", "OptimizedModel"], [175, 2, 1, "", "export_compressed_model"], [175, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[176, 1, 1, "", "Logger"], [176, 2, 1, "", "debug"], [176, 2, 1, "", "error"], [176, 2, 1, "", "fatal"], [176, 2, 1, "", "info"], [176, 2, 1, "", "log"], [176, 2, 1, "", "warn"], [176, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[177, 2, 1, "", "get_model_path"], [177, 2, 1, "", "register_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload"], [177, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[179, 2, 1, "", "is_int8_model"], [179, 2, 1, "", "load"], [179, 2, 1, "", "load_weight_only"], [179, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[180, 1, 1, "", "CaptureOutputToFile"], [180, 1, 1, "", "CpuInfo"], [180, 2, 1, "", "Dequantize"], [180, 1, 1, "", "DotDict"], [180, 1, 1, "", "GLOBAL_STATE"], [180, 1, 1, "", "LazyImport"], [180, 1, 1, "", "MODE"], [180, 1, 1, "", "OpEntry"], [180, 1, 1, "", "Statistics"], [180, 2, 1, "", "alias_param"], [180, 2, 1, "", "calculate_mse"], [180, 2, 1, "", "check_key_exist"], [180, 2, 1, "", "combine_histogram"], [180, 2, 1, "", "compare_objects"], [180, 2, 1, "", "compute_sparsity"], [180, 2, 1, "", "dequantize_weight"], [180, 2, 1, "", "dump_class_attrs"], [180, 2, 1, "", "dump_data_to_local"], [180, 2, 1, "", "dump_elapsed_time"], [180, 2, 1, "", "dump_table"], [180, 2, 1, "", "dump_table_to_csv"], [180, 2, 1, "", "equal_dicts"], [180, 2, 1, "", "fault_tolerant_file"], [180, 2, 1, "", "get_all_fp32_data"], [180, 2, 1, "", "get_number_of_sockets"], [180, 2, 1, "", "get_op_list"], [180, 2, 1, "", "get_size"], [180, 2, 1, "", "get_tensor_histogram"], [180, 2, 1, "", "get_tensors_info"], [180, 2, 1, "", "get_tuning_history"], [180, 2, 1, "", "get_weights_details"], [180, 2, 1, "", "load_data_from_pkl"], [180, 2, 1, "", "mse_metric_gap"], [180, 2, 1, "", "print_op_list"], [180, 2, 1, "", "print_table"], [180, 2, 1, "", "recover"], [180, 2, 1, "", "set_random_seed"], [180, 2, 1, "", "set_resume_from"], [180, 2, 1, "", "set_tensorboard"], [180, 2, 1, "", "set_workspace"], [180, 2, 1, "", "show_memory_info"], [180, 2, 1, "", "singleton"], [180, 2, 1, "", "str2array"], [180, 2, 1, "", "time_limit"], [180, 2, 1, "", "version1_eq_version2"], [180, 2, 1, "", "version1_gt_version2"], [180, 2, 1, "", "version1_gte_version2"], [180, 2, 1, "", "version1_lt_version2"], [180, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[181, 1, 1, "", "WeightsDetails"], [181, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:data", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "data", "Python data"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182], "algorithm": [1, 2, 3, 4, 5, 220, 286, 289, 292], "class": [1, 2, 4, 5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 75, 77, 80, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 176, 178, 180, 181, 202, 271], "function": [1, 6, 12, 14, 21, 27, 28, 29, 30, 34, 35, 37, 46, 54, 56, 63, 68, 69, 72, 73, 74, 77, 78, 80, 81, 82, 84, 91, 98, 102, 107, 108, 109, 111, 116, 122, 126, 128, 130, 131, 133, 134, 135, 137, 138, 142, 146, 148, 150, 154, 162, 166, 168, 169, 172, 175, 176, 177, 179, 180, 228], "modul": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181], "content": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 125, 126, 127, 128, 130, 131, 133, 134, 135, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 201, 271], "fast_bias_correct": 2, "submodul": [3, 9, 18, 22, 25, 32, 41, 48, 60, 64, 67, 71, 76, 83, 89, 95, 101, 105, 118, 124, 129, 136, 140, 158, 164, 173], "smooth_quant": 4, "weight_correct": 5, "benchmark": [6, 29, 210, 219, 225, 240, 282], "config": [7, 212, 223, 278], "contrib": [8, 9, 10, 11, 40, 41, 42, 43], "subpackag": [8, 23, 40, 65, 76, 100, 118, 129, 158], "strategi": [9, 10, 11, 41, 42, 43, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 217, 288, 292], "sigopt": [10, 42, 288, 292], "tpe": [11, 43, 292], "data": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 203, 204, 225, 229, 265], "dataset": [12, 13, 14, 15, 16, 17, 18, 19, 54, 55, 56, 57, 58, 59, 60, 61, 223, 225, 234, 266], "bert_dataset": [12, 54], "coco_dataset": [13, 55], "attribut": [14, 56, 196], "dummy_dataset": [15, 57], "dummy_dataset_v2": [16, 58], "imagenet_dataset": [17, 59], "style_transfer_dataset": [19, 61], "filter": [20, 21, 22, 62, 63, 64], "coco_filt": [20, 62], "transform": [24, 25, 26, 27, 28, 66, 67, 68, 69, 234, 291], "imagenet_transform": [24, 66], "postprocess": [26, 36], "token": [27, 68], "experiment": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128], "common": [30, 31, 32, 33, 34, 35, 36, 37, 188, 189, 198, 231], "criterion": 30, "dataload": [31, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 222, 223], "metric": [33, 77, 78, 79, 80, 81, 82, 83, 84, 130, 131, 132, 133, 134, 135, 136, 137, 234, 239], "model": [34, 139, 140, 141, 142, 143, 144, 145, 146, 147, 186, 187, 193, 203, 214, 230, 233, 236, 238, 240, 242, 243, 250, 264, 265, 266, 274, 275, 276, 280, 284, 286, 289, 295], "optim": [35, 251, 261, 271, 274, 275, 276, 279, 280, 293], "torch_util": 37, "compon": 38, "compress": [39, 211, 286], "base_dataload": 44, "default_dataload": 46, "fetcher": 47, "mxnet_dataload": 49, "onnxrt_dataload": 50, "pytorch_dataload": 51, "sampler": 52, "tensorflow_dataload": 53, "distil": [70, 226, 227, 240, 282, 295], "export": [71, 72, 73, 74, 230, 286], "qlinear2qdq": 72, "tf2onnx": 73, "torch2onnx": 74, "graph_optim": 75, "bleu": [77, 130], "bleu_util": [78, 131], "coco_label_map": [79, 132], "coco_tool": [80, 133], "evaluate_squad": [81, 134], "f1": [82, 135], "mixed_precis": 85, "model_convers": 86, "na": [87, 88, 89, 90, 91, 92, 199, 282], "basic_na": 87, "dyna": 88, "nas_util": 91, "search_algorithm": 92, "pruner_legaci": [93, 94, 95, 96, 97, 98], "gradient_sensit": 93, "group_lasso": 94, "magnitud": 96, "pattern_lock": 97, "pruner": [98, 109], "prune": [99, 110, 240, 280, 282, 295], "pruning_recip": [100, 101, 102, 103], "pattern": [101, 102, 103, 107, 280], "tile_pattern": 103, "pruning_v2": 104, "pytorch_prun": [105, 106, 107, 108, 109, 110, 111], "logger": [106, 176, 221], "prune_util": 108, "schedul": [111, 113, 280], "quantiz": [112, 150, 183, 184, 186, 187, 188, 189, 190, 192, 194, 198, 201, 203, 204, 216, 220, 225, 227, 230, 233, 236, 238, 240, 241, 243, 250, 261, 263, 264, 265, 266, 274, 275, 276, 282, 283, 284, 285, 286, 289, 295], "auto_mixed_precis": [114, 152], "basic": [115, 153, 199, 292], "bayesian": [116, 154, 292], "exhaust": [117, 156, 292], "mse": [119, 159, 292], "mse_v2": [120, 160, 292], "random": [121, 161, 292], "util": [123, 124, 125, 126, 127, 128, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 207], "constant": [123, 163, 171], "tuning_sampl": [125, 165], "tuning_spac": [126, 166], "tuning_struct": [127, 167], "mix_precis": 138, "base_model": 139, "keras_model": 141, "mxnet_model": 143, "nets_factori": 144, "onnx_model": 145, "tensorflow_model": 146, "torch_model": 147, "object": [148, 215, 274, 275, 276, 278], "profil": [149, 225], "auto": [151, 191, 255, 261, 285, 289, 292], "conserv": [155, 292], "hawq_v2": [157, 292], "train": [169, 192, 194, 198, 218, 228, 240, 280, 283], "collect_layer_histogram": 170, "create_obj_from_config": 172, "kl_diverg": 174, "load_huggingfac": 175, "neural_insights_util": 177, "option": [178, 228, 249], "pytorch": [179, 185, 186, 187, 188, 193, 194, 223, 228, 230, 239, 265, 283, 284, 285, 290, 291, 295], "weights_detail": 181, "version": 182, "dynam": [183, 194, 198, 199, 283], "introduct": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199, 202, 203, 204, 219, 220, 222, 223, 225, 226, 227, 228, 230, 232, 235, 239, 241, 242, 243, 261, 264, 265, 266, 278, 279, 280, 282, 283, 284, 286, 288, 289, 290, 291, 292, 294], "get": [183, 184, 185, 187, 188, 190, 198, 199, 201, 202, 219, 222, 223, 225, 226, 227, 228, 232, 233, 239, 241, 243, 244, 255, 262, 263, 267, 268, 269, 270, 278, 279, 280, 282, 283, 290, 294], "start": [183, 184, 185, 187, 188, 190, 198, 199, 201, 202, 219, 222, 223, 225, 226, 227, 228, 232, 233, 239, 241, 243, 244, 245, 249, 255, 263, 267, 268, 269, 274, 275, 276, 278, 279, 280, 282, 283, 290, 294], "exampl": [183, 184, 185, 187, 188, 190, 191, 194, 198, 199, 202, 208, 219, 222, 223, 225, 226, 227, 228, 229, 230, 239, 240, 241, 242, 243, 246, 250, 263, 264, 265, 266, 268, 273, 274, 275, 276, 278, 279, 280, 283, 284, 286, 289, 290, 295], "microsc": [184, 243], "api": [184, 185, 189, 192, 199, 202, 203, 208, 209, 219, 222, 223, 226, 227, 228, 233, 234, 239, 241, 243, 244, 248, 262, 263, 270, 276, 278, 279, 280, 282, 293], "refer": [184, 188, 194, 220, 221, 243, 280, 283, 286, 289], "mix": [185, 213, 240, 241, 285], "precis": [185, 213, 240, 241, 285], "support": [185, 186, 188, 189, 192, 197, 198, 199, 202, 204, 219, 220, 222, 223, 225, 226, 227, 228, 230, 232, 235, 236, 239, 241, 242, 243, 245, 246, 250, 251, 278, 279, 280, 282, 283, 284, 286, 289, 290, 291, 294], "matrix": [185, 186, 188, 189, 192, 198, 199, 202, 219, 220, 222, 223, 225, 226, 227, 228, 230, 232, 235, 239, 241, 242, 243, 246, 278, 279, 280, 282, 283, 284, 286, 289, 290, 294], "hardwar": [185, 236, 241, 295], "softwar": [185, 236, 241], "request": [185, 197, 241, 272], "bf16": [185, 241], "fp16": [185, 241], "accuraci": [185, 190, 194, 238, 241, 264, 266, 283, 292], "driven": [185, 241], "autotun": [185, 189, 193], "smooth": [186, 191, 192, 194, 289], "usag": [186, 187, 188, 191, 199, 250, 261, 270, 289, 290, 292], "fix": [186, 191, 289], "alpha": [186, 191, 289], "specifi": [186, 187, 188, 190, 283], "rule": [186, 187, 188, 190, 221, 283], "valid": [186, 233, 236, 289, 295], "framework": [186, 203, 222, 223, 230, 232, 242, 243, 282, 284, 286, 289], "static": [187, 192, 194, 198, 201, 283], "ipex": [187, 194, 283], "backend": [187, 192, 202, 283], "sampl": [187, 203, 233], "pt2e": 187, "weight": [188, 194, 201, 264, 265, 266, 286], "onli": [188, 194, 199, 201, 286], "argument": [188, 249], "rtn": 188, "gptq": 188, "autoround": 188, "awq": 188, "teq": 188, "hqq": 188, "save": 188, "load": [188, 189], "torch": [189, 207, 295], "like": [189, 204], "problem": [189, 198], "tensorflow": [190, 192, 193, 194, 223, 228, 230, 239, 283, 285, 290, 291, 295], "without": 190, "awar": [190, 194, 198, 240, 280, 283], "tune": [190, 191, 194, 204, 283, 286, 289, 292], "With": 190, "quant": [191, 289], "us": [191, 204, 222, 239, 268, 269, 289], "determin": [191, 289], "through": [191, 236, 289, 295], "scheme": [192, 194, 283], "approach": [192, 283], "post": [192, 198, 240, 270, 283], "devic": [192, 283], "overview": [193, 197, 271, 293], "how": [193, 203, 204, 225, 264, 265, 266, 268], "work": [193, 202, 268, 283], "fundament": [194, 283, 289], "symmetr": 194, "asymmetr": 194, "per": [194, 289], "tensor": [194, 263, 289], "channel": [194, 289], "matmul": [194, 289], "limit": [194, 289], "intel": [195, 201, 222, 225, 235, 236, 239, 240, 247, 255, 261, 296], "neural": [195, 198, 199, 201, 222, 225, 235, 236, 239, 240, 244, 248, 250, 255, 261, 263, 264, 265, 266, 268, 269, 270, 274, 275, 276, 280, 288, 293, 296], "compressor": [195, 198, 201, 222, 225, 235, 236, 239, 240, 255, 261, 288, 296], "document": [195, 201, 208, 296], "section": [195, 296], "contributor": [196, 197], "coven": [196, 197], "code": [196, 197, 199, 221, 240, 262, 267, 286, 293], "conduct": [196, 197], "our": [196, 289], "pledg": 196, "standard": 196, "respons": [196, 270], "scope": [196, 280], "enforc": 196, "contribut": [197, 254, 258], "guidelin": 197, "creat": [197, 267], "pull": 197, "step": [197, 263, 264, 265, 266], "checklist": 197, "templat": 197, "accept": 197, "criteria": [197, 280, 292], "statu": [197, 269, 270], "check": 197, "fx": 198, "mode": [198, 295], "note": [198, 287], "detail": 198, "architectur": [199, 224, 235, 236], "search": [199, 261], "1": [199, 228, 231, 234, 240, 261, 268, 269, 295], "python": [199, 222, 233, 239, 244, 248, 249, 256, 259, 263, 282, 293], "yaml": [199, 203, 223, 228, 232, 294], "2": [199, 228, 231, 234, 240, 261, 268, 269, 295], "advanc": [199, 267, 293], "custom": [199, 222, 239, 274, 292], "secur": [200, 228], "polici": [200, 292], "report": 200, "vulner": 200, "what": [201, 244, 262, 268], "": [201, 236, 262, 268], "new": [201, 202, 204, 256, 259, 292], "instal": [201, 225, 236, 245, 247, 254, 255, 258, 263, 268, 269], "from": [201, 203, 236, 240, 263, 268, 269], "pypi": [201, 250, 263], "llm": [201, 238], "non": 201, "select": [201, 255], "public": [201, 221, 281], "event": [201, 281], "addit": 201, "commun": 201, "adaptor": [202, 203, 205], "flow": [202, 283], "queri": [202, 269, 274, 275, 276], "background": [202, 221, 261], "ad": 202, "capabl": [202, 286], "implement": [202, 203], "onnxrtadaptor": 202, "add": [203, 269], "an": [203, 274, 275, 276], "list": [203, 229, 273, 291], "need": 203, "design": [203, 224, 271, 292], "query_fw_cap": 203, "accord": [203, 204], "tune_cfg": 203, "prepar": [203, 225, 264, 265, 266, 288], "calibr": [203, 220], "fp32": [203, 230], "graph": 203, "run": [203, 225, 262, 264, 265, 266, 267], "iter": 203, "oper": [203, 204], "calcul": 203, "rang": 203, "gener": 203, "type": [204, 221, 280], "int4": 204, "few": 204, "line": 204, "chang": [204, 234, 260, 262, 287], "defin": [204, 228], "abil": 204, "specif": [204, 223], "invok": 204, "kernel": 204, "configur": [204, 228, 232, 267, 282, 288, 294], "summari": [204, 264], "onnx": [206, 236, 283, 284, 295], "runtim": [206, 236, 283, 284, 295], "inc": 221, "convent": 221, "import": 221, "string": 221, "annot": 221, "comment": 221, "todo": 221, "intern": 221, "interfac": 221, "folder": [221, 262], "structur": 221, "recommend": 221, "v": [221, 262], "set": [221, 225, 247, 261], "json": 221, "build": [222, 231, 239, 267, 268, 269], "mxnet": [223, 239, 283, 291], "onnxrt": [223, 239, 291], "file": [223, 232, 294], "user": [223, 228, 234, 282, 286, 293, 294], "workflow": [224, 271], "diagnosi": [225, 263], "featur": [225, 228, 232, 235, 250, 251, 255, 282, 283, 290, 294], "modifi": 225, "script": [225, 267], "see": 225, "do": [225, 244], "paramet": [225, 270], "descript": [225, 270, 272], "suggest": 225, "fallback": 225, "knowledg": [226, 295], "intermedi": 226, "layer": [226, 284, 289], "self": 226, "distribut": [228, 250, 292], "infer": 228, "evalu": 228, "pure": 228, "horovodrun": 228, "execut": 228, "releas": [229, 256, 259, 287], "int8": [230, 295], "appendix": 230, "op": 230, "frequent": 231, "ask": 231, "question": 231, "issu": [231, 287], "3": [231, 245, 261, 281], "4": [231, 252, 261, 281], "quick": [233, 249], "incompat": [234, 287], "between": 234, "v1": 234, "face": [234, 275, 276], "built": [234, 236, 239], "infrastructur": 235, "prerequisit": [236, 268, 269], "binari": 236, "sourc": [236, 263, 265, 266, 268, 269], "ai": 236, "kit": 236, "system": 236, "requir": [236, 254, 258, 264, 265, 266, 274], "environ": [236, 247], "cpu": [236, 247, 295], "base": [236, 270, 293], "64": 236, "compat": 236, "processor": 236, "gpu": 236, "xe": 236, "multipl": [236, 278, 295], "vendor": 236, "legal": 237, "inform": 237, "licens": 237, "citat": 237, "trademark": 237, "recip": [238, 283], "larg": [238, 280], "languag": [238, 280], "migrat": 240, "x": 240, "orchestr": [240, 279], "dure": [241, 285], "coder": [244, 248, 250, 261, 293], "we": 244, "offer": 244, "jupyt": [244, 245, 256, 259], "lab": [244, 245], "extens": [244, 254, 255, 258, 261, 262, 271], "launcher": [244, 249], "contact": [244, 268], "aw": 245, "amazon": 245, "sagemak": 245, "For": 245, "studio": 245, "notebook": 245, "instanc": 245, "guid": [245, 293], "bigdl": 246, "nano": 246, "platform": [247, 288], "best": [247, 255], "perform": [247, 288], "mkl": 247, "openmp": 247, "jemalloc": 247, "numa": 247, "control": 247, "variabl": 247, "frequenc": 247, "govern": 247, "enabl": [248, 255, 261], "bench": 248, "superbench": 248, "v0": 252, "highlight": 252, "other": 252, "changelog": [253, 257], "neural_compressor_ext_lab": [254, 256], "uninstal": [254, 258], "develop": [254, 258], "packag": [254, 256, 258, 259], "jupyterlab": 255, "Or": 255, "let": 255, "u": 255, "help": 255, "you": 255, "pre": 255, "requisit": 255, "make": [256, 259, 262, 267], "manual": [256, 259], "npm": [256, 259, 267], "autom": [256, 259], "publish": [256, 259], "conda": [256, 259], "forg": [256, 259], "neural_compressor_ext_lab_alibaba": [258, 259], "log": [260, 269, 270], "unreleas": 260, "vscode": 261, "open": [261, 266], "icon": 261, "5": 261, "welcom": 262, "your": 262, "setup": 262, "up": 262, "straight": 262, "awai": 262, "explor": 262, "test": [262, 267], "go": 262, "further": 262, "insight": [263, 264, 265, 266], "dump": [263, 265], "research": 263, "collabor": 263, "debug": [264, 266], "analyz": [264, 266, 267], "result": [264, 266, 274, 275, 276], "activ": 264, "histogram": 266, "react": 267, "app": 267, "avail": 267, "eject": 267, "learn": [267, 268], "more": [267, 268], "split": 267, "bundl": 267, "size": 267, "progress": 267, "web": 267, "deploy": [267, 280], "fail": 267, "minifi": 267, "solut": [268, 269, 270, 274, 275, 276], "why": 268, "doe": 268, "method": [268, 269], "pip": [268, 269], "end": [268, 274, 275, 276], "servic": [269, 271, 274, 275, 276], "submit": [269, 270, 274, 275, 276], "task": [269, 270, 272, 274, 275, 276], "stop": [269, 274, 275, 276], "inspect": 269, "manag": [269, 274, 275], "resourc": [269, 274, 275], "node": 269, "state": 269, "cluster": [269, 270], "remov": 269, "url": 270, "endpoint": 270, "task_id": 270, "websocket": 270, "screen": 270, "ping": 270, "download": [270, 274, 275], "doc": 271, "wip": 271, "oaa": 271, "definit": 271, "diagram": 271, "hug": [275, 276], "grpc": 276, "client": 277, "singl": 278, "One": 279, "shot": 279, "network": 280, "sparsiti": 280, "decai": 280, "regular": 280, "retrain": 280, "free": 280, "spars": 280, "hyperparamet": 280, "full": 281, "82": 281, "2024": 281, "2023": 281, "25": 281, "2022": 281, "35": 281, "2021": 281, "15": [281, 295], "2018": 281, "2020": 281, "style": 282, "access": 282, "wise": 284, "lwq": 284, "turn": 285, "off": 285, "woq": [286, 295], "known": 287, "benefit": 288, "comparison": 288, "differ": 288, "smoothquant": 289, "enhanc": 289, "engin": 289, "entir": 289, "each": 289, "block": 289, "tensorboard": 290, "space": 292, "exit": 292, "process": 292, "zero": 293, "topic": 293, "innov": 293, "product": 293, "0": 295, "ptq": 295, "qat": 295, "17": 295, "qdq": 295}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[1, "classes"], [2, "classes"], [4, "classes"], [5, "classes"], [7, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [24, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [66, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [75, "classes"], [77, "classes"], [80, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [133, "classes"], [137, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [146, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [180, "classes"], [181, "classes"]], "Functions": [[1, "functions"], [6, "functions"], [12, "functions"], [14, "functions"], [21, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [34, "functions"], [35, "functions"], [37, "functions"], [46, "functions"], [54, "functions"], [56, "functions"], [63, "functions"], [68, "functions"], [69, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [77, "functions"], [78, "functions"], [80, "functions"], [81, "functions"], [82, "functions"], [84, "functions"], [91, "functions"], [98, "functions"], [102, "functions"], [107, "functions"], [108, "functions"], [109, "functions"], [111, "functions"], [116, "functions"], [122, "functions"], [126, "functions"], [128, "functions"], [130, "functions"], [131, "functions"], [133, "functions"], [134, "functions"], [135, "functions"], [137, "functions"], [138, "functions"], [142, "functions"], [146, "functions"], [148, "functions"], [150, "functions"], [154, "functions"], [162, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [179, "functions"], [180, "functions"]], "Module Contents": [[1, "module-contents"], [2, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [24, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "Submodules": [[3, "submodules"], [9, "submodules"], [18, "submodules"], [22, "submodules"], [25, "submodules"], [32, "submodules"], [41, "submodules"], [48, "submodules"], [60, "submodules"], [64, "submodules"], [67, "submodules"], [71, "submodules"], [76, "submodules"], [83, "submodules"], [89, "submodules"], [95, "submodules"], [101, "submodules"], [105, "submodules"], [118, "submodules"], [124, "submodules"], [129, "submodules"], [136, "submodules"], [140, "submodules"], [158, "submodules"], [164, "submodules"], [173, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "Subpackages": [[8, "subpackages"], [23, "subpackages"], [40, "subpackages"], [65, "subpackages"], [76, "subpackages"], [100, "subpackages"], [118, "subpackages"], [129, "subpackages"], [158, "subpackages"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[14, "attributes"], [56, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[129, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]], "Dynamic Quantization": [[183, "dynamic-quantization"], [194, "dynamic-quantization"], [198, "dynamic-quantization"]], "Introduction": [[183, "introduction"], [184, "introduction"], [185, "introduction"], [186, "introduction"], [187, "introduction"], [188, "introduction"], [189, "introduction"], [190, "introduction"], [191, "introduction"], [192, "introduction"], [194, "introduction"], [198, "introduction"], [199, "introduction"], [202, "introduction"], [203, "introduction"], [204, "introduction"], [219, "introduction"], [220, "introduction"], [222, "introduction"], [223, "introduction"], [226, "introduction"], [227, "introduction"], [228, "introduction"], [230, "introduction"], [232, "introduction"], [235, "introduction"], [239, "introduction"], [241, "introduction"], [242, "introduction"], [243, "introduction"], [264, "introduction"], [265, "introduction"], [266, "introduction"], [278, "introduction"], [279, "introduction"], [280, "introduction"], [282, "introduction"], [284, "introduction"], [286, "introduction"], [288, "introduction"], [289, "introduction"], [290, "introduction"], [291, "introduction"], [292, "introduction"], [294, "introduction"]], "Getting Started with Dynamic Quantization": [[183, "getting-started-with-dynamic-quantization"]], "Examples": [[183, "examples"], [184, "examples"], [185, "examples"], [188, "examples"], [190, "examples"], [191, "examples"], [198, "examples"], [199, "examples"], [219, "examples"], [222, "examples"], [223, "examples"], [226, "examples"], [227, "examples"], [228, "examples"], [229, "examples"], [230, "examples"], [240, "examples"], [241, "examples"], [242, "examples"], [243, "examples"], [279, "examples"], [280, "examples"], [283, "examples"], [284, "examples"], [286, "examples"], [290, "examples"]], "Microscaling Quantization": [[184, "microscaling-quantization"], [243, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[184, "get-started-with-microscaling-quantization-api"], [243, "get-started-with-microscaling-quantization-api"]], "Reference": [[184, "reference"], [188, "reference"], [194, "reference"], [220, "reference"], [221, "reference"], [243, "reference"], [280, "reference"], [283, "reference"], [286, "reference"], [289, "reference"]], "PyTorch Mixed Precision": [[185, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[185, "mixed-precision-support-matrix"], [241, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[185, "hardware-and-software-requests-for-bf16"], [241, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[185, "hardware-and-software-requests-for-fp16"], [241, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[185, "accuracy-driven-mixed-precision"], [241, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[185, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[186, "pytorch-smooth-quantization"]], "Usage": [[186, "usage"], [188, "usage"], [191, "usage"], [250, "usage"], [270, "usage"], [270, "id2"], [270, "id6"], [270, "id9"], [270, "id16"], [270, "id19"], [270, "id22"], [270, "id25"], [289, "usage"], [290, "usage"], [290, "id1"], [292, "usage"], [292, "id2"], [292, "id4"], [292, "id6"], [292, "id8"], [292, "id10"], [292, "id12"], [292, "id14"], [292, "id16"], [292, "id18"], [292, "id20"], [292, "id22"]], "Fixed Alpha": [[186, "fixed-alpha"]], "Specify Quantization Rules": [[186, "specify-quantization-rules"], [187, "specify-quantization-rules"], [188, "specify-quantization-rules"], [190, "specify-quantization-rules"], [283, "specify-quantization-rules"]], "Validated Models": [[186, "validated-models"], [233, "validated-models"], [289, "validated-models"], [295, "validated-models"]], "Supported Framework Matrix": [[186, "supported-framework-matrix"], [289, "supported-framework-matrix"]], "PyTorch Static Quantization": [[187, "pytorch-static-quantization"]], "Get Started": [[187, "get-started"], [188, "get-started"], [190, "get-started"], [198, "get-started"], [225, "get-started"], [268, "get-started"], [283, "get-started"]], "Static Quantization with IPEX Backend": [[187, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[187, "usage-sample-with-ipex"]], "Model Examples": [[187, "model-examples"]], "Static Quantization with PT2E Backend": [[187, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[187, "usage-sample-with-pt2e"]], "PyTorch Weight Only Quantization": [[188, "pytorch-weight-only-quantization"]], "Supported Matrix": [[188, "supported-matrix"], [189, "supported-matrix"]], "Common arguments": [[188, "common-arguments"]], "RTN": [[188, "rtn"]], "GPTQ": [[188, "gptq"]], "AutoRound": [[188, "autoround"]], "AWQ": [[188, "awq"]], "TEQ": [[188, "teq"]], "HQQ": [[188, "hqq"]], "Saving and Loading": [[188, "saving-and-loading"]], "Torch": [[189, "torch"]], "Torch-like APIs": [[189, "torch-like-apis"]], "Quantization APIs": [[189, "quantization-apis"]], "Autotune API": [[189, "autotune-api"]], "Load API": [[189, "load-api"]], "Common Problems": [[189, "common-problems"]], "TensorFlow Quantization": [[190, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[190, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[190, "with-accuracy-aware-tuning"]], "Smooth Quant": [[191, "smooth-quant"], [289, "smooth-quant"]], "Using a Fixed alpha": [[191, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[191, "determining-the-alpha-through-auto-tuning"], [289, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[192, "tensorflow"], [223, "tensorflow"], [239, "tensorflow"], [291, "tensorflow"]], "API for TensorFlow": [[192, "api-for-tensorflow"]], "Support Matrix": [[192, "support-matrix"], [220, "support-matrix"], [246, "support-matrix"]], "Quantization Scheme": [[192, "quantization-scheme"]], "Quantization Approaches": [[192, "quantization-approaches"], [283, "quantization-approaches"]], "Post Training Static Quantization": [[192, "post-training-static-quantization"], [198, "post-training-static-quantization"], [283, "post-training-static-quantization"]], "Smooth Quantization": [[192, "smooth-quantization"], [194, "smooth-quantization"]], "Backend and Device": [[192, "backend-and-device"]], "AutoTune": [[193, "autotune"]], "Overview": [[193, "overview"], [271, "overview"], [293, "overview"]], "How it Works": [[193, "how-it-works"]], "Working with Autotune": [[193, "working-with-autotune"]], "Working with PyTorch Model": [[193, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[193, "working-with-tensorflow-model"]], "Quantization": [[194, "quantization"], [216, "quantization"], [282, "quantization"], [283, "quantization"]], "Quantization Fundamentals": [[194, "quantization-fundamentals"], [283, "quantization-fundamentals"], [289, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[194, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[194, "quantization-scheme-in-tensorflow"], [283, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[194, "quantization-scheme-in-pytorch"], [283, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[194, "quantization-scheme-in-ipex"], [283, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[194, "per-tensor-per-channel"], [289, "per-tensor-per-channel"]], "Per-tensor example": [[194, "per-tensor-example"], [289, "per-tensor-example"]], "Per-channel example": [[194, "per-channel-example"], [289, "per-channel-example"]], "Matmul quantization example": [[194, "matmul-quantization-example"], [289, "matmul-quantization-example"]], "Static Quantization": [[194, "static-quantization"]], "Per-channel limitation": [[194, "per-channel-limitation"], [289, "per-channel-limitation"]], "Weight Only Quantization": [[194, "weight-only-quantization"]], "Quantization Aware Training": [[194, "quantization-aware-training"], [240, "quantization-aware-training"], [283, "quantization-aware-training"], [283, "id1"]], "Accuracy Aware Tuning": [[194, "accuracy-aware-tuning"], [283, "accuracy-aware-tuning"]], "Intel\u00ae Neural Compressor Documentation": [[195, "intel-neural-compressor-documentation"], [296, "intel-neural-compressor-documentation"]], "Sections": [[195, "sections"], [296, "sections"]], "Contributor Covenant Code of Conduct": [[196, "contributor-covenant-code-of-conduct"], [197, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[196, "our-pledge"]], "Our Standards": [[196, "our-standards"]], "Our Responsibilities": [[196, "our-responsibilities"]], "Scope": [[196, "scope"]], "Enforcement": [[196, "enforcement"]], "Attribution": [[196, "attribution"]], "Contribution Guidelines": [[197, "contribution-guidelines"]], "Create Pull Request": [[197, "create-pull-request"]], "Step-by-Step guidelines": [[197, "step-by-step-guidelines"]], "Pull Request Checklist": [[197, "pull-request-checklist"]], "Pull Request Template": [[197, "pull-request-template"]], "Pull Request Acceptance Criteria": [[197, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[197, "pull-request-status-checks-overview"]], "Support": [[197, "support"]], "FX": [[198, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[198, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[198, "post-training-dynamic-quantization"], [283, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[198, "quantization-aware-training"]], "Note": [[198, "note"]], "Details": [[198, "details"]], "Common Problem": [[198, "common-problem"]], "Static Quantization & Quantization Aware Training": [[198, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[199, "neural-architecture-search"]], "Basic NAS": [[199, "basic-nas"]], "Dynamic NAS": [[199, "dynamic-nas"]], "NAS Support Matrix": [[199, "nas-support-matrix"]], "Get Started with NAS API": [[199, "get-started-with-nas-api"]], "Basic Usage": [[199, "basic-usage"]], "1. Python code + YAML": [[199, "python-code-yaml"]], "2. Python code only": [[199, "python-code-only"]], "Advanced Usage (Custom NAS)": [[199, "advanced-usage-custom-nas"]], "Security Policy": [[200, "security-policy"]], "Report a Vulnerability": [[200, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[201, "intel-neural-compressor"], [261, "intel-neural-compressor"]], "What\u2019s New": [[201, "what-s-new"]], "Installation": [[201, "installation"], [236, "installation"], [236, "id1"], [255, "installation"], [263, "installation"], [268, "installation"]], "Install from pypi": [[201, "install-from-pypi"], [263, "install-from-pypi"]], "Getting Started": [[201, "getting-started"], [233, "getting-started"], [263, "getting-started"]], "Weight-Only Quantization (LLMs)": [[201, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[201, "static-quantization-non-llms"]], "Documentation": [[201, "documentation"]], "Selected Publications/Events": [[201, "selected-publications-events"]], "Additional Content": [[201, "additional-content"]], "Communication": [[201, "communication"]], "Adaptor": [[202, "adaptor"], [205, "adaptor"]], "Adaptor Support Matrix": [[202, "adaptor-support-matrix"]], "Working Flow": [[202, "working-flow"], [283, "working-flow"]], "Get Started with Adaptor API": [[202, "get-started-with-adaptor-api"]], "Query API": [[202, "query-api"]], "Background": [[202, "background"], [221, "background"]], "Query API Introduction": [[202, "query-api-introduction"]], "Example of Adding a New Backend Support": [[202, "example-of-adding-a-new-backend-support"]], "Capability": [[202, "capability"]], "Implement ONNXRTAdaptor Class": [[202, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[203, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[203, "api-list-that-need-to-implement"]], "Design the framework YAML": [[203, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[203, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[203, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[203, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[203, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[203, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[204, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[204, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[204, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[204, "use-the-new-data-type"]], "Summary": [[204, "summary"]], "ONNX Runtime": [[206, "onnx-runtime"]], "Torch Utils": [[207, "torch-utils"]], "API Document Example": [[208, "api-document-example"]], "APIs": [[209, "apis"]], "Benchmark": [[210, "benchmark"], [240, "benchmark"], [282, "benchmark"]], "Compression": [[211, "compression"]], "Config": [[212, "config"]], "Mix Precision": [[213, "mix-precision"], [240, "mix-precision"]], "Model": [[214, "model"], [242, "model"], [264, "model"], [266, "model"]], "Objective": [[215, "objective"], [274, "objective"], [275, "objective"], [276, "objective"], [278, "objective"]], "Strategy": [[217, "strategy"]], "Training": [[218, "training"]], "Benchmarking": [[219, "benchmarking"]], "Benchmark Support Matrix": [[219, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[219, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[220, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[220, "calibration-algorithms"]], "INC Coding Conventions": [[221, "inc-coding-conventions"]], "Rules": [[221, "rules"]], "Imports": [[221, "imports"]], "Strings": [[221, "strings"]], "Logger": [[221, "logger"]], "Type Annotations": [[221, "type-annotations"]], "Comments": [[221, "comments"]], "TODO Comments": [[221, "todo-comments"]], "Public and Internal Interfaces": [[221, "public-and-internal-interfaces"]], "Folder structure": [[221, "folder-structure"]], "Recommend VS Code settings.json": [[221, "recommend-vs-code-settings-json"]], "DataLoader": [[222, "dataloader"]], "Supported Framework Dataloader Matrix": [[222, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[222, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[222, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[222, "build-custom-dataloader-with-python-api"]], "Dataset": [[223, "dataset"]], "Supported Framework Dataset Matrix": [[223, "supported-framework-dataset-matrix"]], "PyTorch": [[223, "pytorch"], [239, "pytorch"], [285, "pytorch"]], "MXNet": [[223, "mxnet"], [239, "mxnet"], [291, "mxnet"]], "ONNXRT": [[223, "onnxrt"], [239, "onnxrt"], [291, "onnxrt"]], "Get start with Dataset API": [[223, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[223, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[223, "user-specific-dataset"]], "Design": [[224, "design"], [292, "design"], [292, "id1"], [292, "id3"], [292, "id5"], [292, "id7"], [292, "id9"], [292, "id11"], [292, "id13"], [292, "id15"], [292, "id17"], [292, "id19"], [292, "id21"]], "Architecture": [[224, "architecture"], [235, "architecture"]], "Workflow": [[224, "workflow"]], "Diagnosis": [[225, "diagnosis"]], "Diagnosis Introduction": [[225, "diagnosis-introduction"]], "Supported Feature Matrix": [[225, "supported-feature-matrix"], [228, "supported-feature-matrix"], [232, "supported-feature-matrix"], [235, "supported-feature-matrix"], [282, "supported-feature-matrix"], [283, "supported-feature-matrix"], [290, "supported-feature-matrix"], [294, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[225, "install-intel-neural-compressor"]], "Modify script": [[225, "modify-script"]], "Quantization diagnosis": [[225, "quantization-diagnosis"]], "Benchmark diagnosis": [[225, "benchmark-diagnosis"]], "Example": [[225, "example"], [239, "example"], [246, "example"], [250, "example"], [278, "example"]], "Prepare dataset": [[225, "prepare-dataset"]], "Run quantization script": [[225, "run-quantization-script"]], "Run benchmark script": [[225, "run-benchmark-script"]], "See quantization data": [[225, "see-quantization-data"]], "How to do diagnosis": [[225, "how-to-do-diagnosis"]], "Parameter description": [[225, "parameter-description"]], "Diagnosis suggestions": [[225, "diagnosis-suggestions"]], "Fallback setting example": [[225, "fallback-setting-example"]], "See profiling data": [[225, "see-profiling-data"]], "Distillation": [[226, "distillation"], [240, "distillation"], [282, "distillation"]], "Knowledge Distillation": [[226, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[226, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[226, "self-distillation"]], "Distillation Support Matrix": [[226, "distillation-support-matrix"]], "Get Started with Distillation API": [[226, "get-started-with-distillation-api"]], "Distillation for Quantization": [[227, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[227, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[227, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[228, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[228, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[228, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[228, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[228, "horovodrun-execution"]], "Security": [[228, "security"]], "PyTorch Examples:": [[228, "pytorch-examples"]], "TensorFlow Examples:": [[228, "tensorflow-examples"]], "Example List": [[229, "example-list"]], "Release Data": [[229, "release-data"]], "Export": [[230, "export"]], "Supported Framework Model Matrix": [[230, "supported-framework-model-matrix"], [242, "supported-framework-model-matrix"], [243, "supported-framework-model-matrix"], [284, "supported-framework-model-matrix"], [286, "supported-framework-model-matrix"]], "PyTorch Model": [[230, "pytorch-model"]], "FP32 Model Export": [[230, "fp32-model-export"], [230, "id1"]], "INT8 Model Export": [[230, "int8-model-export"], [230, "id2"]], "Tensorflow Model": [[230, "tensorflow-model"]], "Appendix": [[230, "appendix"]], "Supported quantized ops": [[230, "supported-quantized-ops"]], "Frequently Asked Questions": [[231, "frequently-asked-questions"]], "Common Build Issues": [[231, "common-build-issues"]], "Issue 1:": [[231, "issue-1"]], "Issue 2:": [[231, "issue-2"]], "Issue 3:": [[231, "issue-3"]], "Issue 4:": [[231, "issue-4"]], "Framework YAML Configuration Files": [[232, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[232, "get-started-with-framework-yaml-files"]], "Quick Samples": [[233, "quick-samples"]], "Quantization with Python API": [[233, "quantization-with-python-api"], [263, "quantization-with-python-api"]], "Incompatible changes between v1.2 and v1.1": [[234, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[234, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[234, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[235, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[236, "prerequisites"], [268, "prerequisites"], [269, "prerequisites"]], "Install from Binary": [[236, "install-from-binary"]], "Install from Source": [[236, "install-from-source"], [263, "install-from-source"]], "Install from AI Kit": [[236, "install-from-ai-kit"]], "System Requirements": [[236, "system-requirements"]], "Validated Hardware Environment": [[236, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[236, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[236, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[236, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[236, "validated-software-environment"]], "Legal Information": [[237, "legal-information"]], "License": [[237, "license"]], "Citation": [[237, "citation"]], "Trademarks": [[237, "trademarks"]], "LLMs Quantization Recipes": [[238, "llms-quantization-recipes"]], "Large Language Models Recipes": [[238, "large-language-models-recipes"]], "Large Language Models Accuracy": [[238, "large-language-models-accuracy"]], "Metrics": [[239, "metrics"]], "Supported Built-in Metric Matrix": [[239, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[239, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[239, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[239, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[240, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[240, "model-quantization"]], "Post-training Quantization": [[240, "post-training-quantization"]], "Pruning": [[240, "pruning"], [280, "pruning"], [282, "pruning"]], "Orchestration": [[240, "orchestration"]], "Mixed Precision": [[241, "mixed-precision"]], "During quantization mixed precision": [[241, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[241, "get-started-with-mixed-precision-api"]], "Neural Coder": [[244, "neural-coder"], [261, "neural-coder"], [261, "id1"]], "What do we offer?": [[244, "what-do-we-offer"]], "Getting Started!": [[244, "getting-started"], [255, "getting-started"]], "Jupyter Lab Extension": [[244, "jupyter-lab-extension"]], "Python Launcher": [[244, "python-launcher"], [249, "python-launcher"]], "Python API": [[244, "python-api"]], "Contact": [[244, "contact"], [268, "contact"]], "AWS Amazon SageMaker Support": [[245, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[245, "start-jupyter-lab-3"]], "For SageMaker Studio": [[245, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[245, "for-sagemaker-notebook-instance"]], "Installation Guide": [[245, "installation-guide"]], "BigDL Nano Support": [[246, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[247, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[247, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[247, "install-numa-controller"]], "Environment Variables": [[247, "environment-variables"]], "Frequency Governers": [[247, "frequency-governers"]], "Neural Coder as Python API": [[248, "neural-coder-as-python-api"]], "Enable": [[248, "enable"]], "Bench": [[248, "bench"]], "SuperBench": [[248, "superbench"]], "Quick-Start": [[249, "quick-start"]], "Launcher Arguments (Optional)": [[249, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[250, "neural-coder-for-quantization"]], "Features Supported": [[250, "features-supported"]], "Models Supported": [[250, "models-supported"]], "PyPI distribution:": [[250, "pypi-distribution"]], "Supported Optimization Features": [[251, "supported-optimization-features"]], "v0.4": [[252, "v0-4"]], "Highlights": [[252, "highlights"]], "Others": [[252, "others"]], "Changelog": [[253, "changelog"], [257, "changelog"]], "neural_compressor_ext_lab": [[254, "neural-compressor-ext-lab"]], "Requirements": [[254, "requirements"], [258, "requirements"], [264, "requirements"], [265, "requirements"], [266, "requirements"], [274, "requirements"]], "Install": [[254, "install"]], "Uninstall": [[254, "uninstall"]], "Contributing": [[254, "contributing"], [258, "contributing"]], "Development install": [[254, "development-install"], [258, "development-install"]], "Development uninstall": [[254, "development-uninstall"], [258, "development-uninstall"]], "Packaging the extension": [[254, "packaging-the-extension"], [258, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[255, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[255, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[255, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[255, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[256, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[256, "manual-release"], [259, "manual-release"]], "Python package": [[256, "python-package"], [259, "python-package"]], "NPM package": [[256, "npm-package"], [259, "npm-package"]], "Automated releases with the Jupyter Releaser": [[256, "automated-releases-with-the-jupyter-releaser"], [259, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[256, "publishing-to-conda-forge"], [259, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[258, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[259, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[260, "change-log"]], "[Unreleased]": [[260, "unreleased"]], "Background Introduction": [[261, "background-introduction"]], "Neural Coder Extension in VSCode": [[261, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[261, "neural-coder-extension-usage"]], "1. Open": [[261, "open"]], "2. Search": [[261, "search"]], "3. Setting": [[261, "setting"]], "4. Icon": [[261, "icon"]], "5. optimization (quantization)": [[261, "optimization-quantization"]], "5.1 Enable": [[261, "enable"]], "5.2 Auto": [[261, "auto"]], "Welcome to your VS Code Extension": [[262, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[262, "what-s-in-the-folder"]], "Setup": [[262, "setup"]], "Get up and running straight away": [[262, "get-up-and-running-straight-away"]], "Make changes": [[262, "make-changes"]], "Explore the API": [[262, "explore-the-api"]], "Run tests": [[262, "run-tests"]], "Go further": [[262, "go-further"]], "Neural Insights": [[263, "neural-insights"]], "Start the Neural Insights": [[263, "start-the-neural-insights"]], "Tensor dump examples": [[263, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[263, "step-by-step-diagnosis-example"]], "Research Collaborations": [[263, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[264, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [266, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[264, "preparation"], [265, "preparation"], [266, "preparation"], [288, "preparation"]], "Running the quantization": [[264, "running-the-quantization"], [265, "running-the-quantization"], [266, "running-the-quantization"]], "Analyzing the result of quantization": [[264, "analyzing-the-result-of-quantization"], [266, "analyzing-the-result-of-quantization"]], "Weights summary": [[264, "weights-summary"]], "Activations summary": [[264, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[265, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[265, "source"], [266, "source"]], "Prepare the dataset": [[266, "prepare-the-dataset"]], "Analyzing weight histograms": [[266, "analyzing-weight-histograms"]], "Open Neural Insights": [[266, "open-neural-insights"]], "Getting Started with Create React App": [[267, "getting-started-with-create-react-app"]], "Available Scripts": [[267, "available-scripts"]], "npm start": [[267, "npm-start"]], "npm test": [[267, "npm-test"]], "npm run build": [[267, "npm-run-build"]], "npm run eject": [[267, "npm-run-eject"]], "Learn More": [[267, "learn-more"], [268, "learn-more"]], "Code Splitting": [[267, "code-splitting"]], "Analyzing the Bundle Size": [[267, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[267, "making-a-progressive-web-app"]], "Advanced Configuration": [[267, "advanced-configuration"]], "Deployment": [[267, "deployment"]], "npm run build fails to minify": [[267, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[268, "what-s-neural-solution"]], "Why Neural Solution?": [[268, "why-neural-solution"]], "How does Neural Solution Work?": [[268, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[268, "method-1-using-pip"]], "Method 2. Building from source:": [[268, "method-2-building-from-source"]], "End-to-end examples": [[268, "end-to-end-examples"]], "Get started": [[269, "get-started"]], "Install Neural Solution": [[269, "install-neural-solution"]], "Method 1. Using pip": [[269, "method-1-using-pip"]], "Method 2. Building from source": [[269, "method-2-building-from-source"]], "Start service": [[269, "start-service"]], "Submit task": [[269, "submit-task"]], "Query task status": [[269, "query-task-status"]], "Stop service": [[269, "stop-service"]], "Inspect logs": [[269, "inspect-logs"]], "Manage resource": [[269, "manage-resource"], [274, "manage-resource"], [275, "manage-resource"]], "Node States": [[269, "node-states"]], "Query cluster": [[269, "query-cluster"]], "Add node": [[269, "add-node"]], "Remove node": [[269, "remove-node"]], "Neural Solution API": [[270, "neural-solution-api"]], "Base URL": [[270, "base-url"]], "Endpoints": [[270, "endpoints"]], "GET /": [[270, "get"]], "Description": [[270, "description"], [270, "id1"], [270, "id4"], [270, "id8"], [270, "id12"], [270, "id15"], [270, "id18"], [270, "id21"], [270, "id24"]], "Responses": [[270, "responses"], [270, "id3"], [270, "id7"], [270, "id11"], [270, "id14"], [270, "id17"], [270, "id20"], [270, "id23"], [270, "id26"]], "POST /task/submit": [[270, "post-task-submit"]], "Parameters": [[270, "parameters"], [270, "id5"], [270, "id10"], [270, "id13"]], "GET /task/status/{task_id}": [[270, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[270, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[270, "websocket-task-screen-task-id"]], "GET /ping": [[270, "get-ping"]], "GET /cluster": [[270, "get-cluster"]], "GET /download/{task_id}": [[270, "get-download-task-id"]], "GET /description": [[270, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[271, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[271, "contents"]], "Workflow of OaaS": [[271, "workflow-of-oaas"]], "Class definition diagram": [[271, "class-definition-diagram"]], "Extensibility": [[271, "extensibility"]], "Task request description": [[272, "task-request-description"]], "Examples List": [[273, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[274, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[274, "start-the-neural-solution-service"], [275, "start-the-neural-solution-service"], [276, "start-the-neural-solution-service"]], "Submit optimization task": [[274, "submit-optimization-task"], [275, "submit-optimization-task"], [276, "submit-optimization-task"]], "Query optimization result": [[274, "query-optimization-result"], [275, "query-optimization-result"], [276, "query-optimization-result"]], "Download optimized model": [[274, "download-optimized-model"], [275, "download-optimized-model"]], "Stop the service": [[274, "stop-the-service"], [275, "stop-the-service"], [276, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[275, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[276, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[277, "client"]], "Single Objective": [[278, "single-objective"]], "Multiple Objectives": [[278, "multiple-objectives"]], "Objective Support Matrix": [[278, "objective-support-matrix"]], "Get Started with Objective API": [[278, "get-started-with-objective-api"]], "Config Single Objective": [[278, "config-single-objective"]], "Config Multiple Objectives": [[278, "config-multiple-objectives"]], "Optimization Orchestration": [[279, "optimization-orchestration"]], "One-shot": [[279, "one-shot"]], "Orchestration Support Matrix": [[279, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[279, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[280, "neural-network-pruning"]], "Pruning Patterns": [[280, "pruning-patterns"]], "Pruning Criteria": [[280, "pruning-criteria"]], "Pruning Types": [[280, "pruning-types"]], "Pruning Schedules": [[280, "pruning-schedules"]], "Pruning Scope": [[280, "pruning-scope"]], "Sparsity Decay Types": [[280, "sparsity-decay-types"]], "Regularization": [[280, "regularization"]], "Large Language Model Pruning": [[280, "large-language-model-pruning"]], "Pruning Support Matrix": [[280, "pruning-support-matrix"]], "Get Started with Pruning API": [[280, "get-started-with-pruning-api"]], "Training-aware pruning API": [[280, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[280, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[280, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[280, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[281, "full-publications-events-82"]], "2024 (3)": [[281, "id1"]], "2023 (25)": [[281, "id2"]], "2022 (35)": [[281, "id3"]], "2021 (15)": [[281, "id4"]], "2018 - 2020 (4)": [[281, "id5"]], "Pythonic Style Access for Configurations": [[282, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[282, "pythonic-api-for-user-configurations"], [282, "id1"]], "Pythonic API for Framework Configurations": [[282, "pythonic-api-for-framework-configurations"], [282, "id2"]], "Get Started with Pythonic API for Configurations": [[282, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[282, "nas"]], "Quantization Introduction": [[283, "quantization-introduction"]], "Quantization Support Matrix": [[283, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[283, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[283, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[283, "post-training-quantization"]], "Specify Quantization Recipes": [[283, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[283, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[284, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[284, "pytorch-framework-example"]], "ONNX Runtime framework example": [[284, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[285, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[285, "tensorflow"]], "Weight Only Quantization (WOQ)": [[286, "weight-only-quantization-woq"]], "Quantization Capability": [[286, "quantization-capability"]], "Export Compressed Model": [[286, "export-compressed-model"]], "User Code Example": [[286, "user-code-example"]], "WOQ Algorithms Tuning": [[286, "woq-algorithms-tuning"]], "User code example": [[286, "id1"]], "Release": [[287, "release"]], "Release Notes": [[287, "release-notes"]], "Known Issues": [[287, "known-issues"]], "Incompatible Changes": [[287, "incompatible-changes"]], "SigOpt Strategy": [[288, "sigopt-strategy"]], "SigOpt Platform": [[288, "sigopt-platform"]], "Neural Compressor Configuration": [[288, "neural-compressor-configuration"]], "Performance": [[288, "performance"]], "Benefit of SigOpt Strategy": [[288, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[288, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[289, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[289, "smoothquant"]], "Our enhancement:": [[289, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[289, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[289, "engineering"]], "Using a fixed alpha": [[289, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[289, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[289, "auto-tune-the-alpha-for-each-layer-block"]], "TensorBoard": [[290, "tensorboard"]], "Get Started with TensorBoard": [[290, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[290, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[290, "tensorflow-tensorboard"]], "PyTorch Examples": [[290, "pytorch-examples"]], "TensorFlow Examples": [[290, "tensorflow-examples"]], "Transform": [[291, "transform"]], "Transform Support List": [[291, "transform-support-list"]], "Pytorch": [[291, "pytorch"]], "Tuning Strategies": [[292, "tuning-strategies"]], "Strategy Design": [[292, "strategy-design"]], "Tuning Space": [[292, "tuning-space"]], "Exit Policy": [[292, "exit-policy"]], "Accuracy Criteria": [[292, "accuracy-criteria"]], "Tuning Process": [[292, "tuning-process"]], "Tuning Algorithms": [[292, "tuning-algorithms"]], "Auto": [[292, "auto"]], "Conservative Tuning": [[292, "conservative-tuning"]], "Basic": [[292, "basic"]], "MSE": [[292, "mse"]], "MSE_V2": [[292, "mse-v2"]], "HAWQ_V2": [[292, "hawq-v2"]], "Bayesian": [[292, "bayesian"]], "Exhaustive": [[292, "exhaustive"]], "Random": [[292, "random"]], "SigOpt": [[292, "sigopt"]], "TPE": [[292, "tpe"]], "Distributed Tuning": [[292, "distributed-tuning"]], "Customize a New Tuning Strategy": [[292, "customize-a-new-tuning-strategy"]], "User Guide": [[293, "user-guide"]], "Python-based APIs": [[293, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[293, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[293, "advanced-topics"]], "Innovations for Productivity": [[293, "innovations-for-productivity"]], "User YAML Configuration Files": [[294, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[294, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[295, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[295, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[295, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[295, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[295, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[295, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[295, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[295, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[295, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[295, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.algorithm.algorithm"], [2, "module-neural_compressor.algorithm.fast_bias_correction"], [3, "module-neural_compressor.algorithm"], [4, "module-neural_compressor.algorithm.smooth_quant"], [5, "module-neural_compressor.algorithm.weight_correction"], [6, "module-neural_compressor.benchmark"], [7, "module-neural_compressor.config"], [8, "module-neural_compressor.contrib"], [9, "module-neural_compressor.contrib.strategy"], [10, "module-neural_compressor.contrib.strategy.sigopt"], [11, "module-neural_compressor.contrib.strategy.tpe"], [12, "module-neural_compressor.data.datasets.bert_dataset"], [13, "module-neural_compressor.data.datasets.coco_dataset"], [14, "module-neural_compressor.data.datasets.dataset"], [15, "module-neural_compressor.data.datasets.dummy_dataset"], [16, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [17, "module-neural_compressor.data.datasets.imagenet_dataset"], [18, "module-neural_compressor.data.datasets"], [19, "module-neural_compressor.data.datasets.style_transfer_dataset"], [20, "module-neural_compressor.data.filters.coco_filter"], [21, "module-neural_compressor.data.filters.filter"], [22, "module-neural_compressor.data.filters"], [23, "module-neural_compressor.data"], [24, "module-neural_compressor.data.transforms.imagenet_transform"], [25, "module-neural_compressor.data.transforms"], [26, "module-neural_compressor.data.transforms.postprocess"], [27, "module-neural_compressor.data.transforms.tokenization"], [28, "module-neural_compressor.data.transforms.transform"], [29, "module-neural_compressor.experimental.benchmark"], [30, "module-neural_compressor.experimental.common.criterion"], [31, "module-neural_compressor.experimental.common.dataloader"], [32, "module-neural_compressor.experimental.common"], [33, "module-neural_compressor.experimental.common.metric"], [34, "module-neural_compressor.experimental.common.model"], [35, "module-neural_compressor.experimental.common.optimizer"], [36, "module-neural_compressor.experimental.common.postprocess"], [37, "module-neural_compressor.experimental.common.torch_utils"], [38, "module-neural_compressor.experimental.component"], [39, "module-neural_compressor.experimental.compression"], [40, "module-neural_compressor.experimental.contrib"], [41, "module-neural_compressor.experimental.contrib.strategy"], [42, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [43, "module-neural_compressor.experimental.contrib.strategy.tpe"], [44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [45, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [47, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [48, "module-neural_compressor.experimental.data.dataloaders"], [49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [52, "module-neural_compressor.experimental.data.dataloaders.sampler"], [53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [54, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [55, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [56, "module-neural_compressor.experimental.data.datasets.dataset"], [57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [60, "module-neural_compressor.experimental.data.datasets"], [61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [62, "module-neural_compressor.experimental.data.filters.coco_filter"], [63, "module-neural_compressor.experimental.data.filters.filter"], [64, "module-neural_compressor.experimental.data.filters"], [65, "module-neural_compressor.experimental.data"], [66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [67, "module-neural_compressor.experimental.data.transforms"], [68, "module-neural_compressor.experimental.data.transforms.tokenization"], [69, "module-neural_compressor.experimental.data.transforms.transform"], [70, "module-neural_compressor.experimental.distillation"], [71, "module-neural_compressor.experimental.export"], [72, "module-neural_compressor.experimental.export.qlinear2qdq"], [73, "module-neural_compressor.experimental.export.tf2onnx"], [74, "module-neural_compressor.experimental.export.torch2onnx"], [75, "module-neural_compressor.experimental.graph_optimization"], [76, "module-neural_compressor.experimental"], [77, "module-neural_compressor.experimental.metric.bleu"], [78, "module-neural_compressor.experimental.metric.bleu_util"], [79, "module-neural_compressor.experimental.metric.coco_label_map"], [80, "module-neural_compressor.experimental.metric.coco_tools"], [81, "module-neural_compressor.experimental.metric.evaluate_squad"], [82, "module-neural_compressor.experimental.metric.f1"], [83, "module-neural_compressor.experimental.metric"], [84, "module-neural_compressor.experimental.metric.metric"], [85, "module-neural_compressor.experimental.mixed_precision"], [86, "module-neural_compressor.experimental.model_conversion"], [87, "module-neural_compressor.experimental.nas.basic_nas"], [88, "module-neural_compressor.experimental.nas.dynas"], [89, "module-neural_compressor.experimental.nas"], [90, "module-neural_compressor.experimental.nas.nas"], [91, "module-neural_compressor.experimental.nas.nas_utils"], [92, "module-neural_compressor.experimental.nas.search_algorithms"], [93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [95, "module-neural_compressor.experimental.pruner_legacy"], [96, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [98, "module-neural_compressor.experimental.pruner_legacy.pruner"], [99, "module-neural_compressor.experimental.pruning"], [100, "module-neural_compressor.experimental.pruning_recipes"], [101, "module-neural_compressor.experimental.pruning_recipes.patterns"], [102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [104, "module-neural_compressor.experimental.pruning_v2"], [105, "module-neural_compressor.experimental.pytorch_pruner"], [106, "module-neural_compressor.experimental.pytorch_pruner.logger"], [107, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [109, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [110, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [112, "module-neural_compressor.experimental.quantization"], [113, "module-neural_compressor.experimental.scheduler"], [114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [115, "module-neural_compressor.experimental.strategy.basic"], [116, "module-neural_compressor.experimental.strategy.bayesian"], [117, "module-neural_compressor.experimental.strategy.exhaustive"], [118, "module-neural_compressor.experimental.strategy"], [119, "module-neural_compressor.experimental.strategy.mse"], [120, "module-neural_compressor.experimental.strategy.mse_v2"], [121, "module-neural_compressor.experimental.strategy.random"], [122, "module-neural_compressor.experimental.strategy.strategy"], [123, "module-neural_compressor.experimental.strategy.utils.constant"], [124, "module-neural_compressor.experimental.strategy.utils"], [125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [126, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [128, "module-neural_compressor.experimental.strategy.utils.utility"], [129, "module-neural_compressor"], [130, "module-neural_compressor.metric.bleu"], [131, "module-neural_compressor.metric.bleu_util"], [132, "module-neural_compressor.metric.coco_label_map"], [133, "module-neural_compressor.metric.coco_tools"], [134, "module-neural_compressor.metric.evaluate_squad"], [135, "module-neural_compressor.metric.f1"], [136, "module-neural_compressor.metric"], [137, "module-neural_compressor.metric.metric"], [138, "module-neural_compressor.mix_precision"], [139, "module-neural_compressor.model.base_model"], [140, "module-neural_compressor.model"], [141, "module-neural_compressor.model.keras_model"], [142, "module-neural_compressor.model.model"], [143, "module-neural_compressor.model.mxnet_model"], [144, "module-neural_compressor.model.nets_factory"], [145, "module-neural_compressor.model.onnx_model"], [146, "module-neural_compressor.model.tensorflow_model"], [147, "module-neural_compressor.model.torch_model"], [148, "module-neural_compressor.objective"], [149, "module-neural_compressor.profiling"], [150, "module-neural_compressor.quantization"], [151, "module-neural_compressor.strategy.auto"], [152, "module-neural_compressor.strategy.auto_mixed_precision"], [153, "module-neural_compressor.strategy.basic"], [154, "module-neural_compressor.strategy.bayesian"], [155, "module-neural_compressor.strategy.conservative"], [156, "module-neural_compressor.strategy.exhaustive"], [157, "module-neural_compressor.strategy.hawq_v2"], [158, "module-neural_compressor.strategy"], [159, "module-neural_compressor.strategy.mse"], [160, "module-neural_compressor.strategy.mse_v2"], [161, "module-neural_compressor.strategy.random"], [162, "module-neural_compressor.strategy.strategy"], [163, "module-neural_compressor.strategy.utils.constant"], [164, "module-neural_compressor.strategy.utils"], [165, "module-neural_compressor.strategy.utils.tuning_sampler"], [166, "module-neural_compressor.strategy.utils.tuning_space"], [167, "module-neural_compressor.strategy.utils.tuning_structs"], [168, "module-neural_compressor.strategy.utils.utility"], [169, "module-neural_compressor.training"], [170, "module-neural_compressor.utils.collect_layer_histogram"], [171, "module-neural_compressor.utils.constant"], [172, "module-neural_compressor.utils.create_obj_from_config"], [173, "module-neural_compressor.utils"], [174, "module-neural_compressor.utils.kl_divergence"], [175, "module-neural_compressor.utils.load_huggingface"], [176, "module-neural_compressor.utils.logger"], [177, "module-neural_compressor.utils.neural_insights_utils"], [178, "module-neural_compressor.utils.options"], [179, "module-neural_compressor.utils.pytorch"], [180, "module-neural_compressor.utils.utility"], [181, "module-neural_compressor.utils.weights_details"], [182, "module-neural_compressor.version"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[1, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[1, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[2, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[2, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[3, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[4, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[4, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[5, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[5, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[6, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[6, "neural_compressor.benchmark.summary_benchmark"]], "accuracycriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[7, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[7, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[7, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[7, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[7, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[7, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[7, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[7, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[7, "module-neural_compressor.config"]], "neural_compressor.contrib": [[8, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[9, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[10, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[10, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[11, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[11, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[12, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[12, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[13, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[13, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[14, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[14, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[15, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[15, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[16, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[16, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[17, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[17, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[18, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[19, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[19, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[20, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[20, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[21, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[21, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[22, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[23, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[24, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[24, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[25, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[26, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[26, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[27, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[27, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TRANSFORMS"], [28, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[28, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[28, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[29, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[29, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[30, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[30, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[31, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[31, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[32, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[33, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[33, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[34, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[34, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[35, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[35, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[36, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[36, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[37, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[37, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[38, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[38, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[39, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[40, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[41, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[42, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[42, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[43, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[43, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[44, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[44, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[45, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[46, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[46, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[47, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[47, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[48, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[49, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[49, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[50, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[50, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[51, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[51, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[52, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[52, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[53, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[53, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[54, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[54, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[55, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[55, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[56, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[56, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[57, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[57, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[58, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[58, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[59, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[59, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[60, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[61, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[61, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[62, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[62, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[63, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[63, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[64, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[65, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[66, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[66, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[67, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[68, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[68, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [69, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[69, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[69, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[70, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[70, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[70, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[71, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[72, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[72, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[73, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[73, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[74, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[74, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[75, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[75, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[76, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[77, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[77, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[77, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[77, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[78, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[78, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[79, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[80, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[80, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[80, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[81, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[81, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[82, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[82, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[83, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[84, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[84, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[84, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[84, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[84, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[84, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[84, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[84, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[84, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[84, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[85, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[85, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[86, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[86, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[87, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[87, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[88, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[88, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[89, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[90, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[90, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[91, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[91, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[92, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[92, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[93, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[93, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[94, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[94, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[95, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[96, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[96, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[97, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[97, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[98, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[98, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[99, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[99, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[99, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[100, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[101, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[102, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[102, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[103, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[103, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[104, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[104, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[104, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[105, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[106, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[107, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[107, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[108, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[108, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[109, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[109, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[110, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[110, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[111, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[111, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[112, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[112, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[113, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[113, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[114, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[114, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[115, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[115, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[116, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[116, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[117, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[117, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[118, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[119, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[119, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[120, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[120, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[121, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[121, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[122, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[122, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[123, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[124, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[125, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[125, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[126, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[126, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[127, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[127, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[128, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[128, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[129, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[130, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[130, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[130, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[130, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[131, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[131, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[132, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[133, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[133, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[133, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[134, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[134, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[135, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[135, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[136, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[137, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[137, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[137, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[137, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[137, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[137, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[137, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[137, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[137, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[137, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[137, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[137, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[137, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[137, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[138, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[138, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[139, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[139, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[140, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[141, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[141, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[142, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[142, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[142, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[143, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[143, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[144, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[144, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[145, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[145, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[146, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[146, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[147, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[147, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[148, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[148, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[148, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[148, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[149, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[150, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[150, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[151, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[151, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[152, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[152, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[153, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[153, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[154, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[154, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[155, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[155, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[156, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[156, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[157, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[157, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[158, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[159, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[159, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[160, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[160, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[161, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[161, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[162, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[162, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[163, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[164, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[165, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[165, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[166, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[166, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[167, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[167, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[168, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[168, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[169, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[169, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[169, "neural_compressor.training.fit"]], "neural_compressor.training": [[169, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[169, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[170, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[170, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[171, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[172, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[172, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[173, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[174, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[174, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[175, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[175, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[176, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[176, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[177, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[177, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[178, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[178, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[179, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[179, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[180, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[180, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[181, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[181, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[182, "module-neural_compressor.version"]]}})