Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/autotune/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/auto_accelerator/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/auto_round/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/autotune/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/static_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/static_quant/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/bitpack/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/config/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/core/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/optimizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/qtensor/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quant_api/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/quantizer/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/hqq/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/teq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/auto_accelerator/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.auto_round</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.tuning_param</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.layers.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.keras.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.static_quant.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.bitpack</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.qtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quant_api</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.hqq.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.auto_accelerator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 150, 167, 171, 172, 197, 208, 211, 216, 222, 342, 383, 391, 394, 446, 583, 584, 599, 670, 712, 714, 720, 726], "mask": [0, 197, 204, 206, 209, 211, 215, 216, 246, 289, 315, 344, 368, 714, 729], "adaptor_registri": [1, 637], "cl": [1, 164, 173, 188, 190, 194, 195, 204, 209, 218, 219, 220, 248, 255, 263, 265, 270, 291, 298, 304, 326, 333, 337, 342, 344, 346, 357, 372, 383, 439, 571, 580, 627, 656], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 190, 191, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 390, 391, 393, 394, 396, 397, 398, 399, 403, 404, 406, 408, 410, 411, 412, 413, 415, 416, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 445, 446, 449, 450, 452, 454, 455, 465, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 578, 579, 580, 582, 583, 584, 585, 587, 594, 596, 597, 598, 599, 600, 605, 606, 607, 610, 611, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 636, 672, 675, 688, 690, 692, 693, 695, 715], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 150, 151, 154, 163, 165, 171, 172, 173, 178, 179, 180, 182, 186, 187, 188, 190, 194, 195, 197, 198, 202, 204, 206, 207, 209, 210, 211, 216, 217, 218, 219, 220, 221, 222, 227, 228, 230, 231, 234, 235, 236, 246, 247, 248, 249, 250, 254, 255, 263, 265, 268, 270, 273, 277, 278, 279, 289, 290, 291, 292, 293, 297, 298, 304, 305, 310, 312, 313, 314, 316, 317, 319, 321, 322, 323, 325, 326, 328, 329, 331, 332, 333, 334, 337, 339, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 361, 363, 365, 366, 367, 369, 370, 372, 373, 381, 383, 396, 397, 404, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 443, 445, 446, 449, 450, 454, 467, 468, 471, 478, 498, 532, 538, 540, 564, 566, 569, 571, 578, 583, 594, 600, 605, 606, 610, 615, 616, 617, 619, 621, 622, 626, 627, 628, 631, 633, 634, 637, 638, 639, 640, 642, 646, 649, 652, 654, 655, 656, 657, 658, 660, 661, 663, 665, 667, 669, 670, 671, 673, 674, 675, 676, 677, 680, 681, 683, 686, 688, 689, 690, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729], "decor": [1, 16, 34, 67, 68, 70, 148, 173, 179, 186, 190, 194, 195, 204, 209, 218, 220, 263, 270, 304, 319, 326, 333, 337, 342, 344, 346, 357, 360, 372, 383, 404, 439, 491, 492, 494, 564, 571, 594, 600, 615, 627, 633, 634, 637, 726], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 150, 151, 154, 158, 163, 165, 171, 172, 178, 188, 190, 194, 195, 197, 202, 204, 209, 213, 214, 218, 220, 221, 224, 228, 230, 231, 234, 235, 244, 245, 246, 247, 248, 249, 250, 253, 262, 263, 264, 265, 270, 277, 278, 287, 288, 289, 290, 291, 292, 293, 296, 303, 304, 308, 309, 310, 312, 313, 315, 319, 320, 321, 326, 333, 334, 337, 339, 342, 344, 345, 346, 347, 348, 351, 354, 357, 360, 361, 365, 366, 368, 372, 383, 390, 391, 393, 394, 404, 421, 426, 427, 431, 434, 436, 439, 443, 445, 446, 452, 454, 455, 471, 472, 473, 494, 535, 566, 571, 578, 582, 583, 584, 597, 599, 600, 610, 611, 615, 616, 617, 618, 619, 620, 622, 627, 631, 632, 633, 634, 637, 638, 654, 655, 656, 658, 660, 661, 662, 663, 665, 667, 669, 671, 672, 675, 676, 677, 678, 679, 680, 682, 683, 686, 688, 690, 692, 693, 695, 697, 698, 699, 700, 701, 708, 709, 710, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 728, 729], "regist": [1, 16, 34, 161, 163, 173, 179, 188, 190, 194, 195, 197, 199, 204, 205, 209, 212, 218, 219, 220, 221, 248, 255, 263, 265, 270, 291, 298, 304, 319, 326, 333, 337, 342, 344, 346, 357, 360, 372, 383, 404, 439, 445, 465, 571, 578, 579, 611, 615, 624, 634, 637, 656, 658, 663, 674, 675, 696, 712, 723, 726], "all": [1, 13, 16, 34, 44, 45, 63, 97, 157, 163, 164, 171, 172, 173, 175, 178, 179, 187, 190, 195, 199, 204, 212, 222, 230, 231, 236, 237, 244, 248, 255, 263, 264, 270, 273, 279, 287, 291, 298, 304, 309, 312, 315, 317, 319, 326, 333, 337, 338, 342, 348, 357, 360, 365, 368, 370, 372, 374, 383, 439, 445, 465, 487, 521, 566, 569, 571, 578, 580, 583, 584, 585, 619, 627, 631, 632, 636, 637, 638, 639, 656, 657, 658, 663, 667, 671, 675, 678, 686, 689, 690, 693, 694, 695, 696, 697, 700, 701, 703, 704, 708, 709, 710, 713, 714, 715, 717, 719, 720, 723, 725, 726], "subclass": [1, 16, 34, 173, 190, 194, 195, 204, 209, 218, 220, 241, 245, 248, 255, 263, 270, 284, 288, 291, 298, 304, 319, 326, 333, 337, 342, 344, 346, 357, 360, 372, 383, 439, 637], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 154, 156, 157, 158, 163, 164, 168, 169, 171, 172, 173, 178, 179, 180, 182, 186, 187, 188, 190, 192, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 230, 231, 234, 235, 245, 246, 248, 255, 259, 263, 265, 270, 277, 278, 288, 289, 291, 298, 301, 304, 305, 307, 308, 309, 310, 312, 313, 315, 316, 317, 319, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 339, 342, 343, 344, 345, 346, 347, 351, 357, 361, 363, 365, 366, 368, 369, 370, 372, 373, 377, 381, 383, 385, 390, 391, 393, 394, 397, 404, 421, 426, 427, 431, 439, 443, 445, 446, 449, 452, 467, 471, 491, 492, 494, 510, 535, 551, 564, 569, 571, 578, 580, 582, 583, 584, 585, 594, 597, 599, 600, 610, 611, 615, 616, 619, 622, 623, 624, 626, 627, 633, 638, 657, 658, 661, 663, 670, 674, 675, 689, 695, 696, 697, 698, 703, 708, 709, 714, 717, 718, 720, 722, 723, 725, 726, 728], "framework_specific_info": [1, 3, 11, 14, 45, 47, 454, 455, 637], "base": [1, 11, 13, 14, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 150, 154, 158, 161, 167, 171, 173, 179, 180, 187, 194, 195, 196, 197, 199, 205, 212, 219, 221, 231, 236, 239, 244, 246, 248, 255, 263, 273, 279, 282, 287, 289, 291, 298, 304, 319, 325, 327, 333, 334, 337, 339, 344, 354, 357, 361, 372, 374, 381, 382, 383, 390, 398, 436, 439, 443, 455, 510, 535, 539, 541, 551, 560, 566, 569, 579, 583, 634, 636, 637, 638, 639, 656, 658, 662, 663, 667, 675, 676, 683, 684, 686, 695, 698, 703, 706, 709, 710, 714, 715, 717, 720, 722, 723, 724, 726, 729], "framework": [1, 3, 11, 13, 14, 45, 154, 178, 179, 188, 190, 199, 205, 209, 212, 216, 217, 218, 232, 233, 237, 238, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 260, 263, 265, 266, 270, 275, 276, 280, 281, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 302, 304, 310, 319, 320, 347, 355, 361, 372, 373, 374, 375, 377, 437, 443, 454, 465, 619, 636, 637, 639, 655, 656, 660, 663, 664, 668, 669, 670, 671, 674, 675, 676, 697, 698, 714, 715, 717, 721, 724, 725, 726, 727, 728, 729], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 150, 157, 160, 162, 164, 168, 172, 176, 188, 191, 200, 202, 203, 204, 208, 213, 222, 225, 226, 230, 231, 265, 272, 342, 343, 385, 391, 393, 454, 455, 535, 536, 537, 538, 540, 541, 571, 577, 580, 585, 597, 617, 619, 627, 636, 637, 638, 639, 662, 670, 698, 714, 720, 721, 727], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 156, 158, 159, 160, 169, 179, 189, 196, 199, 223, 230, 231, 272, 311, 313, 343, 353, 364, 366, 385, 387, 388, 390, 391, 393, 399, 419, 424, 435, 467, 468, 471, 576, 577, 607, 638, 639, 640, 655, 656, 663, 675, 678, 698, 714, 717, 726, 727], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 202, 203, 208, 226, 230, 231, 259, 301, 342, 421, 426, 449, 529, 564, 633, 654, 657, 660, 665, 695, 701, 714, 717, 720, 723, 725, 726], "activ": [2, 17, 29, 44, 141, 155, 171, 172, 191, 230, 231, 272, 361, 390, 443, 445, 452, 584, 637, 638, 639, 655, 660, 662, 667, 675, 696, 697, 700, 708, 709, 710, 716, 717, 720, 723, 724, 728], "argmax": [2, 17, 29], "attent": [2, 17, 29, 167, 200, 202, 213, 230, 231, 246, 289, 583, 631, 661, 714], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147, 563], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 176, 230, 231, 399, 482, 486, 490, 495, 496, 497, 516, 528, 633, 638, 639, 675, 714, 716, 717, 726], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 230, 231, 342], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 230, 231, 399], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 208, 230, 231, 342, 390, 391, 393, 394, 399, 469, 477, 483, 489, 497, 518, 528, 547, 556, 667, 698, 720, 726], "maxpool": [2, 17, 29, 129, 138, 548, 557, 667], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 156, 158, 169, 171, 172, 176, 202, 230, 231, 309, 354, 361, 362, 421, 426, 432, 434, 436, 443, 444, 445, 452, 475, 477, 489, 490, 491, 492, 493, 494, 495, 496, 498, 502, 505, 509, 512, 515, 516, 517, 518, 520, 526, 528, 542, 543, 544, 550, 552, 553, 554, 555, 559, 562, 564, 582, 583, 599, 600, 615, 621, 627, 637, 638, 639, 660, 667, 675, 676, 699, 700, 714, 717, 719, 721, 723, 724, 726, 728], "pad": [2, 17, 29, 44, 71, 72, 246, 263, 289, 304, 394, 495, 496, 658, 725], "pool": [2, 17, 29, 705], "reduc": [2, 17, 29, 230, 231, 637, 655, 662, 675, 676, 695, 696, 714, 715, 717, 718, 719, 720, 723, 726, 728], "resiz": [2, 17, 29, 246, 247, 259, 263, 289, 290, 301, 304, 658, 725], "split": [2, 17, 29, 43, 82, 150, 172, 262, 263, 303, 304, 506, 584, 597, 633, 718, 720, 723, 725], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 171, 172, 178, 230, 231, 234, 235, 277, 278, 310, 347, 385, 388, 389, 390, 391, 394, 396, 397, 427, 451, 467, 471, 473, 513, 514, 582, 584, 599, 610, 621, 637, 639, 658, 669, 670, 714, 717, 720, 726, 727, 728], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 150, 151, 155, 156, 157, 158, 159, 160, 164, 165, 166, 168, 170, 171, 172, 176, 178, 180, 185, 187, 230, 231, 234, 235, 259, 266, 273, 277, 278, 301, 309, 310, 311, 321, 348, 354, 360, 364, 385, 387, 388, 390, 391, 393, 394, 404, 432, 434, 436, 445, 449, 450, 452, 454, 455, 577, 580, 582, 583, 584, 585, 592, 596, 597, 598, 599, 616, 617, 621, 622, 626, 627, 637, 644, 656, 657, 658, 663, 664, 667, 669, 670, 674, 677, 678, 683, 685, 686, 689, 702, 704, 705, 707, 713, 715, 721, 724, 725, 726, 727, 728], "smooth_quant": [2, 17, 162, 171, 175, 230, 231, 364, 656, 717, 723], "weight_onli": [2, 17, 231, 626, 656, 718, 720], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 156, 230, 231, 361, 390, 391, 393, 394, 443, 511, 637, 638, 667, 675, 680, 685, 689, 695, 719, 726, 729], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 157, 171, 178, 182, 202, 222, 234, 235, 236, 245, 248, 249, 250, 251, 263, 277, 278, 279, 288, 291, 292, 293, 294, 304, 312, 320, 351, 365, 373, 399, 422, 427, 431, 446, 465, 469, 472, 473, 511, 541, 564, 566, 585, 607, 616, 632, 633, 637, 639, 657, 661, 674, 675, 676, 678, 683, 688, 690, 692, 693, 695, 697, 698, 712, 714, 715, 717, 719, 720, 723, 724, 725, 726], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 172, 177, 178, 230, 231, 259, 301, 307, 308, 309, 361, 363, 390, 391, 393, 394, 404, 443, 445, 465, 469, 511, 542, 543, 544, 550, 552, 553, 554, 555, 559, 564, 599, 626, 627, 632, 633, 636, 637, 638, 639, 654, 658, 662, 667, 673, 675, 676, 680, 683, 685, 686, 689, 695, 698, 700, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 728], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 176, 230, 231, 242, 285, 307, 308, 309, 373, 380, 385, 388, 390, 391, 393, 394, 396, 397, 403, 404, 421, 625, 632, 636, 637, 638, 640, 657, 660, 664, 665, 667, 668, 670, 676, 677, 680, 685, 686, 698, 715, 716, 720, 721, 723, 726], "qdq": [2, 42, 87, 111, 112, 113, 142, 171, 172, 230, 231, 307, 308, 309, 511, 530, 531, 532, 599, 637, 660, 665, 670, 685, 686, 717, 721, 723], "graph_bas": [2, 87, 111, 511], "quantize_graph": [2, 111, 530], "qat": [2, 111, 112, 169, 231, 321, 381, 530, 531, 569, 662, 663, 670, 675, 717], "quantize_graph_bas": [2, 111, 112, 530, 531], "quantize_graph_bn": [2, 111, 112, 530, 531], "quantize_graph_concatv2": [2, 111, 112, 530, 531], "quantize_graph_conv": [2, 111, 112, 530, 531], "quantize_graph_for_intel_cpu": [2, 111, 112, 530, 531], "quantize_graph_matmul": [2, 111, 112, 530, 531], "quantize_graph_pool": [2, 111, 112, 530, 531], "transform_graph": [2, 111, 530], "bias_correct": [2, 111, 145, 530, 561], "graph_transform_bas": [2, 111, 145, 530, 561], "insert_log": [2, 111, 145, 530, 561], "rerange_quantized_concat": [2, 111, 145, 530, 561], "graph_convert": [2, 111, 530], "graph_converter_without_calib": [2, 111, 530], "graph_util": [2, 111, 530], "quantize_graph_common": [2, 111, 530], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 267, 311, 364, 718, 723], "layer_wise_qu": [2, 159, 231, 385, 399, 718], "modified_pickl": [2, 159, 160, 576, 577], "torch_load": [2, 159, 160], "bf16_convert": [2, 52, 87, 111, 159, 476, 511], "hawq_metr": [2, 159], "model_wrapp": [2, 15, 152, 159, 567], "pattern_detector": [2, 159], "symbolic_trac": [2, 159], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 188, 190, 221, 230, 231, 245, 246, 247, 248, 251, 253, 255, 263, 270, 288, 289, 290, 291, 294, 296, 298, 304, 308, 309, 310, 313, 315, 319, 320, 321, 347, 355, 366, 368, 372, 373, 381, 420, 421, 425, 426, 427, 437, 627, 632, 634, 636, 637, 638, 655, 656, 657, 660, 661, 662, 664, 667, 668, 670, 671, 675, 676, 677, 685, 686, 697, 700, 714, 715, 716, 722, 723, 726, 728], "kerasadaptor": [3, 454], "mxnetadaptor": 11, "do": [11, 14, 154, 157, 187, 218, 230, 231, 245, 246, 288, 289, 305, 309, 312, 315, 345, 365, 368, 585, 626, 631, 638, 656, 658, 663, 667, 670, 674, 675, 690, 693, 714, 719, 721, 723, 726], "inspect": [11, 14, 721, 724], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 150, 151, 154, 158, 163, 164, 171, 172, 197, 199, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 231, 263, 304, 307, 309, 342, 344, 354, 381, 394, 436, 449, 494, 564, 569, 571, 578, 580, 583, 599, 600, 622, 626, 627, 633, 639, 656, 657, 658, 660, 714, 717, 721, 724, 725, 726], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 154, 156, 157, 158, 163, 171, 172, 173, 178, 190, 194, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 228, 230, 231, 234, 235, 245, 264, 270, 277, 278, 288, 307, 309, 314, 315, 316, 317, 319, 322, 325, 326, 327, 334, 337, 339, 342, 343, 344, 345, 346, 351, 354, 360, 363, 367, 368, 369, 370, 372, 373, 381, 385, 390, 391, 393, 397, 399, 427, 442, 445, 446, 455, 465, 468, 469, 535, 564, 569, 571, 578, 583, 584, 585, 597, 599, 605, 606, 616, 617, 619, 626, 627, 633, 638, 656, 665, 674, 714, 716, 717, 723, 724, 726], "specif": [11, 14, 42, 46, 104, 116, 154, 172, 178, 179, 190, 222, 226, 230, 231, 246, 247, 248, 249, 253, 255, 270, 289, 290, 291, 292, 296, 298, 328, 329, 331, 332, 333, 372, 427, 535, 566, 597, 600, 624, 631, 634, 637, 638, 655, 656, 657, 660, 661, 667, 669, 673, 674, 675, 676, 677, 678, 682, 683, 685, 689, 695, 697, 703, 712, 714, 716, 720, 726, 728], "configur": [11, 13, 14, 45, 118, 150, 156, 171, 172, 178, 179, 222, 227, 230, 231, 234, 235, 237, 248, 251, 264, 269, 277, 278, 291, 294, 305, 309, 310, 321, 322, 323, 325, 334, 339, 343, 347, 348, 354, 372, 373, 383, 427, 436, 445, 467, 471, 537, 583, 597, 610, 616, 618, 619, 625, 626, 633, 634, 637, 638, 658, 660, 675, 682, 696, 703, 708, 709, 710, 712, 714, 717, 720, 721, 723, 725, 726, 729], "mxnetqueri": 11, "local_config_fil": [11, 14, 47, 454, 455], "defin": [11, 14, 46, 86, 154, 158, 182, 194, 195, 202, 204, 209, 210, 211, 216, 217, 218, 219, 220, 230, 231, 234, 235, 277, 278, 322, 323, 325, 326, 327, 334, 339, 342, 343, 344, 346, 373, 398, 427, 510, 616, 626, 631, 634, 637, 638, 657, 658, 661, 662, 667, 670, 674, 675, 696, 713, 714, 717, 720, 722, 723, 724, 726, 728], "queri": [11, 13, 14, 47, 148, 171, 202, 213, 230, 231, 454, 455, 564, 583, 638, 639, 705, 717], "interfac": [11, 14, 46, 86, 113, 227, 310, 334, 339, 347, 348, 510, 532, 619, 670, 675, 686, 704, 717, 721], "each": [11, 14, 46, 141, 148, 158, 163, 171, 172, 222, 230, 231, 244, 248, 251, 259, 263, 287, 291, 294, 301, 304, 313, 315, 316, 317, 354, 366, 368, 369, 370, 436, 452, 564, 578, 599, 627, 632, 637, 638, 639, 656, 658, 660, 661, 662, 667, 675, 680, 686, 689, 695, 703, 705, 712, 714, 718, 720, 722, 724, 725, 726, 727], "adapt": [11, 14, 46, 150, 631, 636, 638, 658, 686, 715], "should": [11, 14, 46, 55, 115, 116, 163, 187, 200, 202, 213, 230, 231, 234, 235, 244, 246, 248, 263, 268, 277, 278, 287, 289, 291, 304, 309, 313, 366, 372, 373, 427, 446, 479, 534, 535, 578, 600, 616, 627, 633, 634, 637, 638, 639, 658, 661, 663, 674, 675, 681, 690, 693, 695, 697, 698, 712, 714, 717, 720, 725, 726, 728], "implement": [11, 14, 46, 110, 143, 147, 154, 155, 163, 234, 235, 241, 244, 245, 246, 248, 277, 278, 284, 287, 288, 289, 291, 312, 365, 373, 383, 427, 434, 529, 559, 563, 578, 584, 616, 639, 657, 658, 674, 675, 686, 696, 714, 717, 720, 721, 724, 726, 728], "inherit": [11, 14, 46, 187, 188, 214, 215, 220, 230, 243, 263, 265, 273, 286, 304, 344, 346, 611, 634, 637, 638, 658], "backend": [11, 14, 15, 41, 42, 46, 176, 190, 230, 231, 232, 233, 237, 238, 242, 246, 247, 249, 250, 251, 252, 253, 257, 260, 263, 269, 270, 275, 276, 280, 281, 283, 285, 289, 290, 292, 293, 294, 295, 296, 300, 302, 304, 320, 355, 373, 374, 375, 377, 437, 633, 639, 660, 663, 669, 670, 675, 676, 684, 703, 708, 709, 710, 716, 720, 725, 726, 728], "own": [11, 14, 46, 74, 163, 244, 263, 287, 304, 383, 498, 578, 634, 638, 657, 658, 670, 674, 697, 701, 712, 720, 722, 727], "mxnet": [12, 13, 16, 231, 241, 245, 248, 251, 255, 263, 284, 288, 291, 294, 298, 304, 310, 319, 347, 372, 373, 378, 427, 632, 636, 637, 638, 655, 657, 664, 667, 670, 671, 675, 676, 677, 716, 726, 728], "init": [12, 17, 42, 175, 189, 199, 201, 223, 658, 674, 726], "optyp": [13, 230, 231, 307, 638], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 156, 157, 158, 163, 171, 172, 173, 182, 188, 190, 194, 195, 198, 202, 203, 204, 209, 218, 219, 220, 222, 225, 228, 230, 231, 244, 246, 248, 255, 263, 265, 270, 287, 289, 291, 298, 304, 309, 312, 313, 315, 319, 326, 333, 337, 342, 344, 346, 351, 357, 361, 363, 365, 366, 368, 372, 381, 383, 385, 390, 391, 393, 394, 404, 431, 432, 439, 443, 445, 446, 449, 467, 471, 498, 520, 535, 541, 551, 564, 569, 571, 578, 583, 584, 585, 597, 599, 600, 615, 626, 627, 637, 638, 658, 660, 663, 665, 667, 670, 675, 676, 696, 698, 703, 704, 708, 709, 717, 718, 720, 722, 725, 726, 727, 728], "isiter": 13, "obj": [13, 105, 199, 222, 245, 288, 305, 310, 321, 322, 323, 325, 334, 339, 343, 347, 373, 383, 427, 616, 619, 627], "bool": [13, 42, 43, 44, 141, 148, 150, 151, 154, 157, 163, 169, 171, 172, 186, 198, 204, 230, 231, 246, 248, 259, 263, 289, 291, 301, 304, 309, 313, 319, 342, 360, 366, 372, 390, 391, 393, 399, 404, 442, 446, 452, 465, 469, 564, 578, 584, 585, 597, 599, 600, 607, 610, 622, 626, 627, 657, 658, 674, 706, 716, 725], "check": [13, 44, 67, 68, 105, 148, 150, 171, 172, 222, 237, 248, 291, 307, 343, 404, 491, 492, 564, 571, 584, 626, 627, 636, 660, 663, 671, 679, 681, 683, 690, 693, 694, 698, 701, 704, 705, 721], "whether": [13, 43, 44, 105, 116, 148, 150, 151, 154, 157, 163, 171, 172, 204, 230, 231, 244, 246, 259, 263, 287, 289, 301, 304, 313, 315, 319, 342, 366, 368, 372, 390, 391, 393, 404, 535, 564, 571, 578, 582, 584, 585, 597, 599, 600, 619, 622, 626, 627, 637, 658, 674, 717, 720, 723, 725], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 150, 154, 156, 158, 161, 163, 169, 171, 178, 187, 197, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 227, 228, 230, 231, 234, 235, 236, 246, 247, 248, 263, 264, 266, 277, 278, 279, 289, 290, 291, 304, 305, 310, 315, 323, 325, 328, 329, 331, 332, 333, 334, 339, 342, 343, 344, 345, 346, 347, 351, 364, 368, 372, 373, 381, 382, 421, 426, 427, 431, 445, 498, 510, 535, 551, 564, 566, 569, 571, 578, 579, 583, 587, 599, 615, 616, 619, 626, 627, 633, 634, 638, 644, 654, 656, 657, 658, 666, 674, 675, 677, 713, 714, 716, 717, 725, 726, 727, 729], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 150, 151, 154, 157, 158, 161, 163, 165, 169, 171, 172, 177, 178, 180, 182, 187, 190, 191, 197, 198, 202, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 230, 231, 234, 235, 236, 244, 245, 246, 247, 248, 249, 250, 253, 255, 259, 263, 264, 266, 270, 272, 273, 277, 278, 279, 287, 288, 289, 290, 291, 292, 293, 296, 298, 301, 304, 312, 315, 317, 319, 321, 326, 334, 339, 343, 344, 348, 355, 365, 368, 370, 372, 373, 383, 394, 397, 404, 410, 411, 415, 427, 432, 437, 445, 446, 472, 473, 475, 478, 479, 484, 488, 494, 506, 509, 551, 559, 564, 566, 571, 578, 579, 583, 584, 585, 587, 597, 599, 600, 616, 622, 626, 627, 631, 632, 633, 634, 637, 638, 639, 640, 642, 646, 649, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 688, 689, 690, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729], "iter": [13, 15, 105, 140, 148, 150, 154, 171, 172, 178, 203, 209, 216, 220, 230, 231, 234, 235, 239, 244, 248, 249, 266, 277, 278, 282, 287, 291, 292, 344, 346, 373, 387, 427, 449, 467, 471, 564, 566, 583, 584, 587, 599, 616, 619, 633, 634, 637, 654, 657, 658, 675, 714, 716, 717, 723, 724, 726, 728], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 150, 154, 156, 157, 158, 163, 169, 171, 172, 173, 178, 188, 190, 194, 195, 198, 199, 202, 204, 205, 209, 212, 218, 219, 220, 222, 225, 228, 234, 235, 248, 255, 259, 263, 264, 265, 270, 277, 278, 291, 298, 301, 304, 309, 312, 313, 315, 316, 317, 319, 325, 326, 333, 337, 342, 343, 344, 346, 351, 357, 361, 363, 365, 366, 368, 369, 370, 372, 373, 377, 381, 383, 385, 390, 391, 393, 394, 399, 404, 421, 426, 427, 431, 439, 443, 445, 446, 465, 467, 469, 471, 478, 491, 492, 494, 498, 535, 564, 569, 571, 578, 582, 583, 584, 585, 587, 597, 599, 607, 610, 615, 616, 619, 624, 626, 627, 633, 634, 638, 639, 657, 658, 663, 674, 677, 708, 709, 710, 712, 714, 717, 720, 723, 724, 726], "true": [13, 43, 44, 85, 113, 146, 148, 150, 151, 157, 163, 172, 178, 194, 198, 230, 231, 244, 246, 248, 249, 262, 263, 264, 287, 289, 291, 292, 303, 304, 309, 313, 319, 337, 360, 366, 372, 383, 390, 391, 393, 399, 427, 442, 446, 465, 469, 509, 532, 562, 564, 566, 578, 582, 584, 585, 597, 598, 599, 600, 607, 610, 619, 622, 626, 627, 638, 657, 658, 660, 663, 667, 674, 675, 678, 681, 682, 697, 698, 699, 700, 706, 708, 716, 717, 718, 720, 723, 724, 725, 726, 728], "els": [13, 148, 154, 172, 231, 244, 287, 383, 564, 599, 624, 683, 720, 724], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 150, 151, 154, 155, 157, 162, 163, 169, 171, 172, 178, 188, 191, 224, 230, 231, 236, 238, 243, 245, 246, 248, 259, 263, 264, 265, 266, 272, 279, 281, 286, 288, 289, 291, 301, 304, 315, 319, 368, 372, 383, 391, 393, 399, 404, 427, 446, 455, 469, 472, 473, 495, 496, 513, 516, 523, 532, 550, 555, 559, 562, 563, 564, 566, 578, 584, 585, 597, 599, 607, 619, 622, 626, 627, 637, 638, 657, 658, 667, 674, 675, 688, 692, 698, 706, 709, 710, 716, 717, 720, 723, 724, 725, 726, 728], "boolean": [13, 150], "ensure_list": 13, "x": [13, 55, 74, 150, 157, 203, 230, 231, 245, 263, 288, 304, 351, 431, 446, 479, 498, 585, 655, 656, 660, 663, 676, 677, 703, 704, 708, 709, 711, 717, 718, 723, 724, 725, 727], "ensur": [13, 263, 304, 351, 431, 663, 717, 725], "list": [13, 42, 43, 44, 54, 105, 140, 148, 150, 154, 156, 157, 158, 167, 171, 178, 179, 180, 182, 195, 202, 203, 208, 213, 218, 222, 225, 230, 231, 234, 235, 239, 246, 259, 263, 264, 277, 278, 282, 289, 301, 304, 308, 309, 312, 313, 315, 316, 317, 319, 326, 334, 339, 342, 345, 360, 365, 366, 368, 369, 370, 372, 373, 381, 387, 388, 390, 391, 393, 394, 397, 399, 404, 410, 411, 415, 427, 442, 446, 449, 465, 468, 469, 471, 478, 564, 569, 583, 585, 599, 606, 607, 616, 617, 627, 633, 636, 637, 658, 665, 667, 671, 673, 675, 678, 683, 685, 688, 689, 692, 700, 703, 705, 706, 712, 714, 716, 717, 719, 723, 724, 726], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 151, 154, 156, 166, 168, 169, 170, 171, 172, 176, 202, 203, 222, 230, 231, 234, 235, 246, 247, 248, 250, 259, 262, 263, 268, 277, 278, 289, 290, 291, 293, 301, 303, 304, 307, 308, 309, 372, 373, 377, 381, 388, 394, 397, 427, 452, 478, 484, 488, 491, 492, 494, 495, 496, 498, 506, 507, 509, 510, 528, 529, 535, 541, 564, 566, 569, 583, 596, 597, 598, 599, 600, 615, 616, 622, 624, 626, 627, 634, 637, 638, 654, 655, 657, 658, 660, 661, 662, 663, 665, 667, 669, 674, 675, 676, 677, 678, 683, 714, 716, 717, 720, 723, 724, 725, 728], "check_mx_vers": 13, "version": [13, 54, 104, 150, 154, 166, 171, 202, 231, 308, 309, 364, 478, 596, 631, 633, 637, 656, 667, 671, 672, 675, 688, 690, 692, 693, 715, 723, 726, 727], "str": [13, 42, 43, 44, 140, 150, 151, 156, 158, 163, 164, 167, 168, 169, 171, 172, 173, 179, 182, 186, 188, 190, 199, 202, 225, 230, 231, 246, 247, 248, 255, 259, 263, 265, 269, 270, 289, 290, 291, 298, 301, 304, 308, 309, 312, 313, 315, 317, 319, 326, 337, 360, 363, 365, 366, 368, 370, 372, 385, 387, 388, 390, 391, 393, 394, 396, 397, 399, 404, 412, 420, 422, 425, 426, 442, 445, 446, 449, 465, 468, 469, 471, 571, 578, 580, 583, 597, 599, 600, 605, 607, 611, 615, 619, 622, 624, 627, 628, 656, 657, 658, 674, 706, 716, 724, 725], "mx": 13, "__version__": [13, 161, 579, 656], "combine_cap": 13, "current": [13, 70, 104, 168, 172, 197, 199, 202, 205, 209, 212, 230, 231, 321, 328, 329, 331, 332, 333, 342, 344, 351, 355, 431, 437, 494, 599, 627, 633, 634, 637, 639, 655, 656, 663, 667, 675, 678, 682, 695, 703, 712, 714, 717, 720, 723, 726], "new": [13, 16, 44, 148, 150, 168, 178, 182, 236, 248, 263, 264, 279, 291, 304, 343, 383, 394, 564, 566, 599, 600, 611, 632, 636, 638, 663, 675, 676, 689, 695, 696, 697, 698, 704, 705, 708, 709, 714, 715, 717, 720, 721, 722, 725, 727, 728], "combin": [13, 171, 180, 230, 231, 234, 235, 259, 273, 277, 278, 301, 373, 427, 571, 583, 616, 627, 633, 637, 670, 675, 713, 715, 717, 719, 720, 725, 726], "capabl": [13, 47, 361, 443, 455, 638, 639, 654, 667, 675, 676, 686, 697, 702, 714, 716, 717, 726, 728], "contain": [13, 67, 68, 70, 74, 139, 148, 150, 158, 163, 171, 172, 178, 187, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 230, 231, 234, 235, 246, 247, 248, 277, 278, 289, 290, 291, 305, 309, 310, 315, 316, 317, 321, 334, 337, 339, 342, 343, 344, 345, 346, 347, 368, 369, 370, 373, 427, 491, 492, 494, 498, 558, 564, 578, 584, 616, 619, 626, 655, 658, 661, 670, 674, 696, 703, 708, 709, 710, 714, 720, 724, 726, 727], "make_nc_model": 13, "target": [13, 42, 43, 102, 150, 151, 154, 157, 171, 202, 220, 222, 231, 343, 346, 351, 431, 585, 622, 658, 663, 675, 714, 724, 725, 726, 728], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 151, 156, 171, 202, 230, 231, 246, 259, 262, 263, 289, 301, 303, 304, 308, 315, 321, 343, 361, 368, 443, 446, 449, 454, 455, 472, 473, 474, 477, 478, 479, 480, 481, 490, 498, 510, 523, 524, 550, 555, 633, 638, 675, 676, 680, 717, 719, 720, 723, 725, 726], "symbol": [13, 43, 156, 169, 171, 312, 365, 373, 427, 633, 677], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 150, 151, 154, 155, 156, 157, 158, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 176, 178, 180, 187, 194, 199, 200, 202, 209, 210, 211, 214, 216, 217, 218, 220, 222, 224, 230, 231, 234, 235, 242, 245, 246, 248, 263, 264, 267, 268, 277, 278, 285, 288, 289, 291, 304, 305, 307, 308, 309, 310, 311, 319, 320, 321, 322, 325, 328, 329, 331, 332, 333, 334, 339, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 356, 357, 364, 372, 373, 383, 385, 387, 388, 390, 391, 393, 394, 396, 397, 403, 404, 420, 425, 426, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 445, 446, 449, 452, 467, 468, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 535, 537, 564, 569, 571, 578, 580, 582, 583, 584, 585, 597, 598, 599, 600, 605, 606, 610, 615, 616, 622, 624, 626, 627, 629, 632, 633, 634, 636, 637, 639, 644, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 669, 670, 672, 674, 676, 678, 683, 685, 686, 689, 695, 697, 702, 704, 705, 706, 707, 712, 713, 715, 717, 721, 722, 724, 725, 726, 727, 728], "an": [13, 67, 68, 70, 105, 141, 143, 148, 150, 154, 158, 161, 163, 171, 172, 177, 191, 209, 230, 231, 239, 244, 248, 263, 267, 272, 282, 287, 291, 304, 311, 312, 316, 317, 325, 326, 348, 364, 365, 369, 370, 373, 421, 426, 427, 446, 452, 491, 492, 494, 559, 564, 578, 579, 587, 599, 600, 611, 616, 627, 629, 631, 633, 634, 636, 637, 639, 655, 657, 658, 659, 660, 665, 673, 674, 675, 676, 678, 682, 683, 686, 695, 698, 699, 700, 703, 706, 712, 714, 715, 717, 720, 722, 723, 724, 725, 726], "neural": [13, 158, 178, 187, 190, 204, 205, 206, 207, 218, 230, 231, 258, 259, 260, 263, 264, 267, 270, 273, 301, 302, 304, 306, 311, 318, 319, 321, 334, 339, 342, 345, 347, 348, 353, 359, 364, 371, 372, 373, 377, 405, 427, 434, 435, 441, 568, 624, 629, 632, 637, 638, 639, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 676, 677, 679, 680, 683, 685, 686, 688, 690, 692, 693, 694, 706, 712, 713, 715, 717, 720, 721, 723, 724, 725, 726, 728, 729], "compressor": [13, 178, 187, 190, 206, 207, 218, 230, 231, 258, 259, 260, 263, 264, 267, 270, 273, 301, 302, 304, 306, 311, 318, 319, 321, 342, 345, 347, 348, 353, 359, 364, 371, 372, 373, 377, 405, 427, 435, 441, 568, 624, 629, 632, 634, 637, 638, 639, 654, 655, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 676, 677, 678, 679, 683, 685, 686, 688, 690, 692, 693, 694, 697, 698, 699, 700, 702, 703, 710, 712, 713, 714, 715, 717, 720, 721, 723, 724, 725, 726, 727, 728, 729], "tupl": [13, 105, 148, 171, 195, 231, 234, 235, 259, 263, 277, 278, 301, 304, 309, 360, 373, 394, 427, 442, 564, 583, 587, 605, 616, 626, 638, 656, 658, 674, 675, 717, 725], "symnet": 13, "arg": [13, 54, 105, 150, 171, 172, 246, 247, 248, 289, 290, 291, 342, 351, 385, 396, 431, 446, 478, 585, 599, 605, 622, 623, 658, 663, 675, 684, 714, 717, 720, 723, 724, 725], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 150, 158, 163, 168, 171, 172, 176, 202, 230, 231, 234, 235, 264, 266, 277, 278, 309, 311, 351, 361, 363, 364, 373, 388, 394, 398, 404, 420, 425, 427, 431, 443, 445, 449, 467, 471, 480, 564, 567, 571, 578, 583, 599, 616, 619, 624, 627, 636, 637, 655, 657, 658, 663, 667, 668, 671, 674, 675, 676, 697, 698, 700, 703, 708, 709, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727], "descript": [13, 132, 198, 446, 551, 633, 638, 639, 657, 703, 707, 723], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 169, 171, 176, 482, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 515, 516, 517, 518, 520, 550, 555, 583, 633, 723, 724], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 150, 157, 164, 168, 171, 178, 186, 190, 191, 195, 197, 199, 200, 202, 205, 212, 219, 220, 221, 222, 228, 231, 239, 263, 264, 270, 272, 282, 304, 309, 342, 344, 346, 354, 361, 363, 372, 381, 391, 398, 404, 427, 436, 443, 445, 465, 491, 492, 494, 564, 569, 571, 580, 583, 585, 594, 599, 615, 619, 622, 624, 627, 638, 655, 666, 670, 671, 673, 675, 681, 698, 700, 708, 709, 715, 720, 723, 726, 727, 730], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 156, 157, 158, 163, 164, 168, 169, 171, 172, 173, 178, 179, 180, 182, 191, 194, 195, 197, 202, 204, 209, 212, 213, 218, 219, 220, 221, 222, 225, 228, 230, 231, 246, 247, 248, 251, 255, 261, 263, 264, 268, 271, 272, 289, 290, 291, 294, 298, 304, 307, 308, 309, 314, 319, 337, 342, 344, 346, 361, 363, 367, 372, 377, 381, 383, 397, 404, 427, 443, 445, 449, 478, 491, 492, 494, 529, 535, 564, 569, 571, 578, 580, 583, 585, 599, 611, 615, 617, 619, 624, 627, 632, 633, 639, 656, 658, 660, 663, 665, 667, 672, 674, 675, 677, 681, 688, 692, 696, 697, 703, 714, 717, 721, 722, 724, 726, 728, 729], "context": [13, 600, 627, 716, 720], "prepare_model_data": 13, "nc_model": [13, 334, 339], "data_x": 13, "prepar": [13, 44, 171, 394, 633, 636, 658, 663, 668, 697, 708, 709, 710, 714, 717], "dataload": [13, 15, 42, 44, 140, 141, 150, 155, 157, 158, 168, 171, 172, 178, 199, 200, 202, 218, 222, 224, 234, 235, 246, 257, 267, 277, 278, 289, 300, 305, 311, 334, 339, 348, 364, 387, 388, 397, 420, 425, 427, 449, 452, 566, 584, 585, 598, 599, 616, 619, 633, 636, 637, 638, 660, 661, 662, 663, 668, 669, 675, 676, 697, 698, 713, 714, 717, 718, 719, 720, 723, 724, 725, 727, 728], "need": [13, 42, 105, 109, 151, 168, 172, 178, 182, 202, 218, 231, 234, 235, 236, 244, 245, 248, 255, 263, 266, 268, 269, 277, 278, 279, 287, 288, 291, 298, 304, 309, 348, 354, 372, 373, 383, 388, 427, 436, 528, 566, 584, 616, 626, 627, 633, 637, 656, 657, 658, 660, 661, 663, 670, 675, 678, 680, 681, 684, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 702, 706, 708, 714, 716, 717, 718, 719, 720, 721, 723, 725, 726, 728], "run": [13, 140, 148, 163, 172, 178, 209, 222, 230, 231, 234, 235, 245, 262, 264, 277, 278, 288, 303, 343, 344, 351, 373, 427, 431, 449, 564, 578, 585, 598, 600, 616, 637, 654, 663, 666, 667, 675, 678, 680, 682, 683, 684, 686, 688, 689, 690, 692, 693, 695, 703, 704, 705, 706, 708, 709, 710, 715, 717, 720, 721, 722, 724, 726, 728], "loader": [13, 140, 234, 235, 277, 278, 373, 427, 449, 467, 471, 616, 622, 657, 717], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 161, 182, 230, 231, 236, 246, 248, 266, 279, 289, 291, 315, 325, 326, 361, 368, 397, 421, 426, 443, 445, 446, 566, 579, 611, 619, 631, 634, 637, 658, 677, 688, 690, 692, 693, 696, 708, 709, 710, 714, 717, 722, 724, 726, 727], "exampl": [13, 44, 150, 154, 158, 163, 171, 172, 178, 179, 180, 182, 195, 202, 203, 218, 230, 231, 246, 247, 248, 259, 263, 289, 290, 291, 301, 304, 315, 316, 317, 319, 345, 368, 369, 370, 372, 373, 383, 390, 391, 393, 404, 427, 445, 446, 571, 578, 584, 597, 599, 611, 615, 616, 626, 627, 631, 636, 638, 639, 644, 669, 670, 678, 681, 682, 683, 686, 703, 706, 719, 721, 725, 726, 727, 730], "prepare_dataload": 13, "io": [13, 163, 578, 701], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 263, 304, 491, 492, 494, 617, 666, 725], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 150, 151, 157, 162, 163, 165, 171, 172, 199, 202, 203, 218, 222, 224, 230, 231, 503, 513, 514, 515, 516, 517, 518, 521, 526, 550, 555, 563, 578, 585, 600, 622, 638, 657, 661, 675, 676, 678, 681, 686, 695, 714, 716, 718, 720], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 202, 307, 309, 381, 394, 404, 426, 449, 474, 478, 479, 480, 481, 484, 486, 488, 491, 492, 494, 498, 501, 504, 506, 507, 508, 522, 529, 551, 564, 569, 637, 660, 663, 698, 702, 705, 708, 709, 710, 718, 724, 726, 729], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 150, 164, 171, 225, 263, 304, 315, 368, 427, 491, 492, 494, 535, 564, 580, 587, 599, 615, 634, 639, 714, 723, 725], "map": [13, 43, 105, 148, 163, 171, 231, 263, 304, 307, 309, 310, 314, 316, 317, 319, 334, 339, 344, 347, 367, 369, 370, 372, 564, 578, 656, 658, 663, 674, 675, 688, 692, 700, 714, 717, 720], "quantize_sym_model": 13, "qconfig": [13, 151, 171, 626, 720, 724], "accord": [13, 122, 171, 178, 230, 231, 246, 247, 248, 263, 289, 290, 291, 304, 354, 434, 436, 541, 619, 634, 637, 658, 663, 698, 703, 708, 709, 710, 714, 719, 723, 725, 726], "run_forward": 13, "b_filter": 13, "collector": [13, 158, 617], "none": [13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 150, 154, 155, 157, 158, 162, 163, 164, 165, 166, 168, 170, 171, 172, 178, 179, 180, 182, 186, 187, 188, 195, 197, 199, 200, 202, 206, 218, 222, 224, 226, 227, 228, 230, 231, 234, 235, 236, 238, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 259, 263, 264, 265, 266, 273, 277, 278, 279, 281, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 301, 304, 305, 308, 309, 310, 315, 319, 320, 321, 322, 325, 334, 339, 343, 347, 351, 352, 354, 355, 356, 357, 361, 368, 372, 373, 383, 385, 397, 420, 425, 426, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 443, 446, 454, 455, 465, 467, 468, 469, 471, 472, 473, 487, 513, 529, 535, 564, 566, 571, 578, 580, 583, 584, 585, 594, 596, 598, 599, 600, 606, 607, 610, 616, 617, 619, 622, 624, 626, 627, 637, 638, 657, 658, 674, 698, 717, 720, 724, 725, 726], "pre_batch": 13, "post_batch": 13, "forward": [13, 150, 171, 222, 600, 638, 675, 697, 714, 716, 717, 720, 723, 724], "propag": [13, 100, 524], "filter": [13, 246, 247, 248, 249, 250, 251, 253, 257, 289, 290, 291, 292, 293, 294, 296, 300, 311, 364, 566, 571, 627, 639, 658, 670, 714, 724], "which": [13, 42, 56, 83, 110, 150, 154, 157, 158, 163, 168, 172, 179, 197, 202, 203, 205, 209, 210, 211, 213, 216, 217, 218, 220, 222, 230, 231, 246, 247, 248, 259, 264, 289, 290, 291, 301, 312, 317, 326, 328, 329, 331, 332, 333, 337, 342, 343, 344, 346, 351, 365, 370, 372, 377, 383, 388, 391, 404, 427, 431, 480, 507, 529, 571, 578, 584, 585, 615, 627, 631, 633, 634, 637, 638, 639, 655, 657, 658, 660, 661, 663, 666, 667, 670, 674, 675, 676, 677, 679, 683, 686, 689, 695, 696, 697, 700, 703, 708, 709, 710, 713, 714, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728], "batch": [13, 150, 171, 172, 236, 238, 239, 244, 245, 266, 279, 281, 282, 287, 288, 566, 599, 616, 657, 661, 662, 675, 713, 714, 717, 723, 725, 726, 729], "infer": [13, 43, 105, 140, 151, 171, 172, 202, 310, 347, 381, 383, 404, 427, 449, 569, 583, 584, 599, 600, 616, 637, 638, 655, 661, 662, 675, 676, 695, 712, 714, 715, 717, 720, 723, 724, 726], "collect": [13, 16, 43, 150, 171, 180, 261, 263, 266, 268, 269, 271, 304, 317, 319, 370, 372, 571, 617, 627, 638, 717, 724, 726], "inform": [13, 150, 158, 197, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 231, 234, 235, 266, 268, 269, 277, 278, 342, 344, 345, 346, 348, 372, 387, 627, 631, 632, 635, 636, 637, 638, 639, 640, 642, 646, 649, 652, 655, 656, 661, 667, 675, 677, 690, 693, 696, 697, 700, 701, 703, 704, 708, 709, 714, 719, 720, 721, 723, 724, 728, 729, 730], "dure": [13, 161, 163, 204, 208, 220, 230, 231, 342, 346, 383, 397, 578, 579, 627, 638, 660, 675, 677, 702, 712, 713, 714, 717, 723, 724, 728], "call": [13, 42, 163, 168, 173, 202, 210, 211, 216, 315, 344, 368, 388, 578, 600, 633, 634, 637, 657, 669, 684, 686, 696, 714, 717, 723, 724, 725], "prior": [13, 88, 512, 726], "after": [13, 78, 148, 151, 171, 200, 204, 209, 211, 216, 230, 231, 246, 259, 263, 266, 289, 301, 304, 344, 432, 446, 502, 564, 622, 627, 634, 638, 658, 660, 661, 662, 665, 670, 674, 675, 688, 689, 692, 696, 700, 712, 713, 714, 717, 719, 720, 722, 723, 724, 725, 726], "count": [13, 634, 658, 720], "int": [13, 16, 42, 43, 44, 105, 140, 148, 150, 151, 155, 167, 171, 172, 182, 186, 200, 230, 231, 245, 246, 247, 259, 263, 288, 289, 290, 301, 304, 308, 309, 313, 315, 319, 326, 366, 368, 372, 387, 390, 391, 393, 394, 399, 404, 412, 421, 426, 445, 446, 449, 450, 454, 467, 468, 471, 564, 583, 584, 597, 599, 607, 622, 627, 656, 657, 658, 674, 675, 706, 716, 720, 725], "make_symbol_block": 13, "gluon": [13, 373, 427, 677], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 156, 171, 564, 582, 583, 637, 639, 726], "quantizable_nod": 13, "strategi": [13, 171, 216, 230, 231, 232, 248, 275, 291, 311, 364, 636, 637, 638, 639, 644, 655, 656, 657, 663, 670, 675, 683, 695, 700, 715, 716, 717, 719, 720, 721, 727, 728], "config": [13, 44, 115, 116, 118, 122, 171, 178, 179, 180, 182, 186, 197, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 230, 234, 235, 246, 277, 278, 289, 328, 329, 331, 332, 333, 334, 339, 342, 343, 344, 345, 346, 361, 362, 364, 373, 385, 390, 391, 393, 396, 397, 421, 426, 443, 444, 445, 446, 450, 454, 455, 471, 534, 535, 537, 541, 582, 583, 616, 619, 626, 627, 634, 636, 638, 639, 644, 654, 656, 657, 660, 661, 662, 663, 665, 668, 670, 674, 675, 676, 677, 697, 698, 713, 714, 716, 717, 719, 720, 722, 724, 726], "tune": [13, 45, 150, 172, 178, 179, 180, 185, 230, 231, 234, 235, 246, 248, 277, 278, 289, 291, 310, 347, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 373, 383, 397, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 445, 468, 606, 616, 627, 637, 638, 655, 656, 657, 658, 660, 663, 670, 672, 675, 676, 695, 699, 702, 704, 705, 712, 714, 715, 719, 721, 722, 724, 728], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 150, 151, 154, 163, 164, 168, 171, 172, 178, 180, 182, 187, 188, 195, 197, 199, 205, 206, 207, 208, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 230, 231, 234, 235, 236, 239, 243, 246, 247, 248, 249, 250, 251, 253, 258, 259, 265, 266, 269, 277, 278, 279, 282, 286, 289, 290, 291, 292, 293, 294, 296, 301, 305, 307, 308, 309, 312, 315, 316, 317, 321, 326, 342, 343, 344, 346, 361, 363, 365, 368, 369, 370, 373, 381, 383, 390, 404, 427, 443, 445, 446, 454, 485, 491, 492, 494, 564, 566, 569, 571, 578, 580, 583, 587, 597, 599, 616, 619, 622, 626, 627, 631, 632, 633, 634, 637, 639, 654, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 670, 673, 674, 676, 677, 678, 682, 683, 684, 686, 696, 698, 700, 701, 705, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 177, 230, 231, 236, 238, 239, 243, 244, 245, 266, 279, 281, 282, 286, 287, 288, 390, 559, 566, 621, 636, 638, 657, 661, 671, 690, 693, 697, 700, 708, 715, 717, 720, 721, 723, 727, 729], "depend": [13, 234, 235, 264, 277, 278, 373, 427, 616, 632, 666, 667, 701, 716, 717, 726], "algorithm": [13, 44, 154, 157, 171, 179, 182, 194, 227, 231, 312, 319, 327, 364, 365, 372, 397, 404, 571, 615, 619, 621, 634, 637, 638, 639, 656, 661, 662, 667, 670, 673, 684, 689, 714, 717, 724, 728], "set": [13, 43, 51, 96, 105, 115, 148, 150, 163, 168, 171, 172, 178, 180, 186, 190, 222, 228, 230, 231, 234, 235, 236, 246, 248, 251, 263, 264, 269, 270, 277, 278, 279, 289, 291, 294, 304, 315, 321, 334, 339, 343, 348, 368, 372, 373, 381, 391, 393, 426, 427, 446, 454, 475, 520, 534, 564, 566, 569, 578, 599, 615, 616, 624, 627, 631, 634, 638, 654, 657, 658, 661, 663, 665, 667, 669, 670, 671, 674, 675, 676, 678, 680, 682, 696, 697, 698, 699, 700, 701, 705, 708, 714, 716, 717, 720, 722, 723, 726, 728], "kl": [13, 16, 230, 231, 617, 621, 638, 639, 655, 667, 675, 726, 728], "minmax": [13, 16, 469, 638, 639, 655, 667, 717, 728], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 162], "calibdata": 13, "threshold": [13, 174, 198, 617, 621, 674], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 150, 168, 172, 176, 179, 188, 190, 199, 205, 212, 216, 217, 230, 231, 234, 235, 245, 246, 248, 255, 259, 263, 265, 266, 267, 270, 277, 278, 288, 289, 291, 298, 301, 304, 311, 319, 321, 326, 342, 344, 348, 355, 361, 364, 372, 373, 377, 383, 388, 390, 391, 393, 394, 397, 404, 427, 437, 443, 446, 521, 616, 619, 621, 622, 627, 629, 636, 638, 656, 673, 675, 678, 683, 686, 689, 695, 702, 703, 706, 715, 719, 722, 726, 727], "amp": [13, 150, 172, 678, 685, 704, 720], "wrap": [13, 105, 116, 150, 188, 226, 265, 315, 368, 471, 535, 600, 633, 663, 690, 693], "dataiterload": 13, "data_it": [13, 202], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 617], "8001": [13, 617, 703, 708, 709, 710], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 173, 174, 176, 177, 322, 325, 376, 378, 380, 381, 382, 394, 403, 534, 569, 637, 638, 639, 671, 677, 688, 690, 692, 693, 696, 715, 726], "up": [13, 100, 213, 263, 304, 343, 524, 583, 663, 664, 667, 670, 686, 690, 693, 695, 714, 715, 716, 717, 722, 725, 726, 728], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 637], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 150, 163, 172, 231, 236, 279, 309, 361, 443, 566, 578, 637, 657, 661, 665, 670, 675, 678, 683, 684, 685, 686, 689, 695, 715, 726, 729], "static": [14, 41, 42, 47, 168, 176, 202, 231, 309, 361, 388, 427, 443, 454, 455, 465, 467, 469, 610, 637, 638, 639, 660, 665, 670, 675, 678, 683, 684, 685, 686, 689, 695, 698, 706, 708, 709, 710, 718, 723, 726, 729], "format": [14, 18, 43, 54, 148, 151, 171, 230, 231, 246, 247, 248, 289, 290, 291, 309, 315, 321, 361, 368, 443, 446, 454, 455, 478, 564, 622, 636, 638, 639, 656, 658, 663, 665, 674, 675, 676, 677, 678, 700, 703, 715, 717, 720, 721], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 387, 388, 390, 391, 393, 399, 676, 717], "reduce_rang": [15, 41, 42, 230, 231, 404, 639, 716], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 150, 164, 171, 172, 200, 230, 231, 248, 261, 263, 268, 271, 291, 304, 360, 362, 372, 373, 374, 376, 378, 380, 381, 382, 385, 387, 396, 399, 403, 427, 442, 444, 446, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 556, 557, 569, 580, 585, 597, 599, 605, 616, 622, 623, 626, 627, 657], "augment": 15, "dump": [15, 161, 171, 178, 309, 387, 571, 579, 583, 627, 632, 700, 717, 721, 724], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 150, 157, 172, 571, 585, 607, 627, 720], "percentil": [16, 44, 140, 172, 393, 394, 449, 469, 597, 599, 655], "99": [16, 180, 469, 729], "999": [16, 469, 728], "option": [16, 44, 105, 150, 151, 154, 163, 171, 172, 182, 186, 204, 230, 231, 234, 235, 246, 263, 277, 278, 289, 304, 308, 309, 315, 321, 342, 348, 361, 364, 368, 372, 373, 385, 390, 391, 393, 394, 404, 427, 443, 445, 446, 571, 578, 584, 594, 597, 599, 600, 616, 620, 622, 627, 638, 639, 656, 657, 658, 667, 671, 675, 689, 703, 706, 708, 709, 710, 714, 717, 720, 722, 723, 725, 726, 728], "number": [16, 44, 67, 68, 105, 140, 150, 151, 171, 172, 179, 195, 198, 200, 206, 207, 230, 231, 244, 247, 259, 263, 287, 290, 301, 304, 316, 317, 319, 342, 351, 369, 370, 372, 390, 391, 393, 394, 421, 426, 431, 446, 449, 491, 492, 584, 599, 611, 619, 627, 654, 657, 658, 663, 674, 703, 705, 714, 717, 720, 722, 723, 725, 726], "bin": [16, 163, 164, 571, 578, 580, 627, 666], "histogram": [16, 571, 617, 627, 697, 724], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 150, 163, 171, 177, 178, 180, 195, 197, 202, 203, 213, 221, 222, 228, 230, 231, 234, 235, 246, 249, 250, 259, 263, 264, 277, 278, 289, 292, 293, 301, 304, 315, 319, 343, 351, 354, 361, 368, 372, 373, 391, 404, 427, 431, 436, 443, 445, 446, 480, 491, 492, 494, 513, 514, 559, 564, 566, 578, 583, 587, 600, 616, 617, 619, 627, 633, 638, 639, 655, 658, 660, 667, 674, 675, 676, 681, 698, 700, 706, 712, 714, 716, 717, 720, 721, 723, 725, 726, 728], "default": [16, 44, 97, 148, 150, 151, 154, 163, 171, 172, 179, 180, 182, 186, 198, 222, 228, 230, 231, 234, 235, 238, 246, 247, 248, 259, 263, 277, 278, 281, 289, 290, 291, 301, 304, 308, 309, 312, 321, 343, 363, 365, 372, 381, 385, 390, 391, 393, 394, 399, 404, 445, 465, 469, 521, 564, 569, 571, 578, 584, 594, 597, 599, 600, 607, 610, 619, 622, 627, 633, 637, 656, 657, 658, 667, 670, 671, 674, 675, 676, 683, 686, 688, 692, 700, 703, 708, 709, 710, 712, 714, 716, 717, 719, 720, 722, 723, 725, 726, 728], "float": [16, 43, 44, 140, 141, 150, 154, 158, 172, 180, 198, 204, 209, 219, 222, 230, 231, 246, 259, 289, 301, 313, 315, 316, 317, 344, 366, 368, 369, 370, 391, 394, 399, 442, 446, 449, 452, 469, 582, 597, 599, 607, 610, 611, 624, 627, 656, 658, 674, 716, 717, 723, 725], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 150, 161, 171, 179, 180, 185, 187, 194, 195, 197, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 230, 231, 248, 263, 266, 268, 269, 291, 304, 305, 312, 315, 316, 317, 319, 322, 325, 326, 327, 334, 337, 339, 342, 343, 344, 345, 346, 351, 365, 368, 369, 370, 372, 373, 377, 381, 431, 449, 452, 479, 498, 499, 535, 564, 568, 569, 571, 579, 582, 599, 611, 616, 627, 632, 638, 656, 657, 658, 664, 667, 674, 675, 677, 688, 689, 692, 695, 703, 714, 715, 717, 720, 723, 725, 726, 728], "between": [16, 42, 143, 177, 215, 230, 231, 263, 304, 316, 319, 369, 372, 421, 426, 559, 627, 633, 637, 638, 639, 655, 660, 661, 670, 674, 675, 686, 717, 720, 721, 722, 723, 725, 726], "0": [16, 43, 44, 54, 90, 105, 148, 150, 151, 154, 162, 163, 171, 172, 174, 176, 179, 180, 188, 195, 197, 198, 200, 222, 224, 226, 230, 231, 236, 238, 243, 245, 246, 249, 250, 253, 259, 263, 265, 266, 279, 281, 286, 288, 289, 292, 293, 296, 301, 304, 309, 310, 319, 326, 334, 339, 347, 372, 383, 390, 391, 393, 394, 397, 399, 404, 427, 432, 446, 469, 478, 514, 564, 566, 578, 583, 597, 599, 607, 611, 622, 633, 656, 657, 658, 661, 663, 665, 666, 667, 671, 672, 674, 675, 676, 681, 683, 688, 692, 698, 708, 709, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728], "100": [16, 178, 179, 180, 195, 198, 230, 231, 248, 291, 399, 446, 467, 468, 471, 611, 654, 658, 663, 669, 675, 700, 716, 717, 725, 726, 728, 729], "klcalibr": 16, "128": [16, 44, 150, 155, 157, 171, 172, 224, 246, 249, 250, 263, 289, 292, 293, 304, 391, 399, 566, 584, 585, 599, 658, 675, 717, 720, 725, 729], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 154, 696, 697, 720], "ep": [16, 177, 676], "0001": [16, 195, 230, 231, 661, 675, 716], "smooth": [16, 140, 141, 148, 168, 176, 230, 231, 360, 387, 396, 399, 449, 450, 452, 469, 564, 656, 714, 726], "discret": [16, 195, 726], "mai": [16, 148, 161, 163, 328, 329, 331, 332, 333, 446, 564, 578, 579, 600, 631, 632, 638, 655, 656, 660, 665, 666, 672, 676, 688, 692, 698, 701, 703, 715, 717, 720, 723, 726], "have": [16, 74, 83, 141, 148, 163, 199, 203, 205, 212, 244, 266, 287, 312, 315, 342, 344, 365, 368, 372, 427, 445, 446, 452, 498, 507, 564, 578, 631, 632, 638, 639, 656, 657, 658, 660, 663, 667, 672, 674, 675, 676, 678, 695, 698, 701, 703, 708, 709, 710, 712, 714, 717, 718, 720, 723, 726, 727], "been": [16, 150, 163, 199, 205, 212, 312, 342, 344, 365, 404, 571, 578, 634, 639, 656, 661, 675, 676, 695, 720, 723], "normal": [16, 33, 263, 304, 317, 370, 675, 704, 712, 720, 723, 725], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 150, 151, 154, 163, 166, 168, 171, 172, 174, 176, 177, 178, 180, 188, 195, 197, 198, 210, 211, 213, 230, 231, 236, 238, 243, 245, 246, 247, 249, 250, 253, 254, 259, 263, 264, 265, 266, 279, 281, 286, 288, 289, 290, 292, 293, 296, 297, 301, 304, 310, 315, 316, 317, 319, 334, 339, 344, 347, 348, 368, 369, 370, 372, 383, 388, 390, 391, 393, 394, 397, 404, 427, 445, 446, 450, 479, 498, 513, 528, 532, 562, 564, 566, 571, 578, 583, 584, 596, 597, 599, 607, 619, 622, 627, 631, 633, 636, 637, 639, 655, 657, 658, 660, 661, 665, 667, 668, 671, 673, 674, 676, 679, 681, 697, 698, 705, 706, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728], "replac": [16, 150, 164, 168, 171, 172, 317, 370, 580, 584, 599, 656, 663, 675, 686, 721], "zero": [16, 43, 44, 150, 151, 157, 172, 209, 222, 263, 304, 344, 391, 394, 404, 585, 599, 627, 636, 700, 714, 717, 720, 723, 725, 726], "multipli": [16, 230, 231, 720], "scale": [16, 43, 44, 100, 141, 143, 150, 157, 166, 168, 170, 171, 172, 176, 177, 259, 263, 301, 304, 390, 391, 394, 404, 452, 524, 559, 584, 585, 596, 597, 598, 599, 717, 720, 722, 723, 725, 726], "factor": [16, 141, 154, 452, 720, 723, 729], "take": [16, 204, 231, 234, 235, 239, 263, 268, 277, 278, 282, 304, 342, 351, 372, 373, 427, 431, 616, 631, 633, 634, 657, 660, 661, 667, 675, 695, 714, 717, 719, 720, 725, 726, 728], "correspond": [16, 158, 202, 213, 230, 231, 246, 289, 312, 315, 319, 365, 368, 372, 600, 619, 627, 637, 667, 675, 714, 716, 717, 722, 726], "amount": [16, 723], "off": [16, 67, 68, 70, 491, 492, 494, 632, 720], "non": [16, 343, 627, 633, 660, 720, 726], "ref": [16, 148, 564], "http": [16, 157, 158, 197, 198, 206, 207, 216, 217, 218, 224, 246, 248, 289, 291, 312, 313, 315, 316, 317, 342, 344, 345, 365, 366, 368, 369, 370, 372, 398, 427, 585, 607, 633, 636, 658, 660, 668, 671, 672, 675, 684, 690, 693, 697, 699, 700, 701, 702, 703, 706, 708, 709, 710, 714, 721], "hanj": 16, "c": [16, 74, 248, 291, 498, 627, 658, 666, 671, 720, 726], "illinoi": 16, "edu": [16, 248, 291, 658], "cs412": 16, "bk3": 16, "diverg": [16, 617, 621, 639, 655, 661, 726], "pdf": [16, 198, 224], "github": [16, 158, 206, 207, 218, 246, 289, 312, 313, 316, 317, 342, 345, 365, 366, 369, 370, 372, 398, 427, 632, 636, 658, 660, 664, 671, 672, 675, 684, 690, 693, 697, 699, 700, 701, 702, 703, 706, 709, 710, 721], "com": [16, 158, 206, 207, 218, 246, 289, 312, 313, 316, 317, 342, 345, 365, 366, 369, 370, 372, 398, 427, 631, 636, 656, 658, 660, 668, 671, 672, 675, 678, 684, 697, 699, 700, 702, 703, 706, 709, 710, 721, 722, 729], "apach": [16, 672], "incub": 16, "blob": [16, 158, 206, 207, 312, 313, 316, 317, 342, 365, 366, 369, 370, 372, 398, 427, 675, 684, 706, 709, 710], "master": [16, 206, 207, 218, 312, 313, 316, 317, 342, 345, 365, 366, 369, 370, 372, 427, 675, 726], "python": [16, 75, 148, 161, 163, 248, 267, 291, 311, 364, 398, 446, 499, 564, 571, 578, 579, 627, 629, 633, 656, 658, 660, 663, 666, 671, 675, 680, 686, 689, 695, 699, 700, 702, 703, 705, 708, 710, 714, 715, 725], "contrib": [16, 311, 364], "py": [16, 148, 158, 178, 209, 230, 231, 313, 315, 316, 317, 344, 366, 368, 369, 370, 398, 446, 564, 633, 637, 656, 660, 663, 671, 675, 680, 682, 683, 684, 690, 693, 697, 699, 700, 702, 703, 705, 706, 708, 709, 710, 717, 721, 724], "microsoft": [16, 398, 636, 637], "onnxruntim": [16, 230, 231, 242, 248, 255, 285, 291, 298, 320, 398, 421, 637, 655, 657, 670, 671, 676, 698, 716], "main": [16, 157, 190, 195, 213, 218, 270, 345, 396, 397, 398, 467, 468, 471, 585, 605, 606, 610, 633, 657, 660, 663, 675, 682, 684, 696, 705, 714, 717, 720], "tool": [16, 148, 308, 398, 564, 627, 636, 637, 675, 688, 692, 698, 701, 702, 703, 714, 715, 717], "arrai": [16, 43, 44, 148, 163, 263, 304, 315, 326, 368, 394, 404, 564, 578, 627, 725], "small": [16, 67, 68, 69, 70, 434, 491, 492, 493, 494, 634, 700, 701, 714, 720, 726, 729], "probabl": [16, 230, 231, 621, 720], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 200, 213, 317, 370, 449, 475, 481, 484, 498, 504, 507, 508, 509, 520, 522, 631, 675, 688, 692, 701, 708, 709, 714, 724], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 164, 580], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 154, 163, 188, 209, 234, 235, 243, 246, 265, 277, 278, 286, 289, 343, 344, 361, 394, 427, 443, 535, 564, 578, 587, 616, 634, 639, 658, 674, 694, 714, 717, 723, 726], "qoper": [18, 34, 230, 231, 665, 698], "float16activationoper": 18, "float16": [18, 21, 43, 150, 151, 600, 622, 658, 720], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 319, 372, 564, 666, 674, 690, 693, 721], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 486, 491, 540, 633, 723], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 225, 362, 399, 444, 449, 452, 469, 564, 583], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 171, 309, 637], "mode": [41, 42, 43, 45, 110, 163, 168, 255, 298, 315, 361, 368, 381, 388, 404, 443, 529, 569, 578, 610, 624, 626, 627, 637, 638, 660, 670, 688, 692, 700, 701, 717, 719, 720, 726], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 171, 172, 177, 230, 231, 234, 235, 277, 278, 308, 309, 319, 354, 361, 372, 390, 391, 393, 394, 399, 432, 436, 443, 467, 471, 503, 550, 555, 559, 571, 584, 597, 599, 619, 622, 626, 627, 632, 636, 637, 639, 660, 667, 668, 674, 675, 676, 685, 697, 698, 699, 700, 716, 717, 719, 720, 721, 722, 723, 724, 726, 728, 729], "add_qdq_pair_to_weight": [41, 230, 231, 717], "optypes_to_exclude_output_qu": [41, 230, 231, 717], "dedicated_qdq_pair": [41, 230, 231, 717], "smoothquant": [42, 168, 171, 176, 388, 450, 636, 673, 715, 720, 727], "onnxrt": [42, 43, 44, 246, 248, 255, 263, 289, 291, 298, 304, 319, 372, 420, 625, 637, 660, 676, 697, 717, 729], "get_quant_dequant_output": 42, "input_data": [42, 657], "output_data": 42, "loss": [42, 180, 188, 230, 231, 265, 310, 319, 334, 339, 347, 372, 600, 616, 655, 660, 661, 662, 663, 664, 673, 674, 675, 676, 686, 698, 700, 713, 714, 715, 717, 720, 723, 726, 728], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 150, 151, 171, 172, 191, 202, 203, 208, 222, 228, 230, 231, 234, 235, 268, 272, 277, 278, 308, 309, 312, 342, 365, 372, 373, 381, 394, 427, 475, 478, 483, 498, 522, 529, 564, 569, 571, 583, 597, 599, 600, 616, 622, 623, 627, 633, 637, 638, 661, 662, 663, 665, 667, 669, 674, 675, 677, 686, 695, 696, 698, 703, 704, 708, 709, 710, 713, 714, 716, 717, 720, 721, 723, 724, 725, 726, 728], "numpi": [42, 43, 67, 68, 70, 105, 148, 263, 304, 315, 326, 368, 394, 491, 492, 494, 564, 666, 723, 725], "7": [42, 172, 178, 198, 230, 231, 383, 399, 404, 599, 639, 654, 666, 667, 675, 714, 717, 721, 723, 726, 729], "bit": [42, 44, 150, 155, 171, 172, 230, 231, 390, 391, 393, 394, 404, 445, 584, 597, 599, 607, 639, 655, 662, 676, 715, 717, 720, 723], "execut": [42, 43, 54, 157, 163, 178, 209, 210, 211, 230, 231, 344, 348, 350, 391, 426, 427, 428, 430, 478, 578, 582, 585, 616, 619, 626, 627, 660, 661, 662, 675, 676, 680, 681, 688, 689, 695, 696, 697, 698, 702, 705, 713, 714, 717, 720, 722, 726, 729], "provid": [42, 43, 44, 102, 105, 110, 150, 202, 234, 235, 263, 277, 278, 304, 310, 315, 334, 339, 347, 348, 368, 373, 387, 388, 390, 391, 393, 394, 399, 427, 529, 611, 616, 620, 622, 634, 636, 637, 638, 639, 654, 657, 660, 662, 663, 664, 670, 671, 673, 674, 675, 676, 677, 678, 682, 686, 689, 695, 696, 697, 703, 704, 714, 716, 717, 720, 723, 724, 726, 727, 728, 729], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 231, 308, 309, 665], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 150, 154, 158, 161, 163, 171, 172, 177, 180, 182, 187, 191, 194, 200, 202, 204, 206, 207, 208, 209, 213, 214, 215, 216, 218, 219, 220, 226, 230, 231, 234, 235, 245, 246, 247, 248, 249, 250, 251, 253, 263, 266, 272, 273, 277, 278, 288, 289, 290, 291, 292, 293, 294, 296, 304, 312, 315, 316, 317, 319, 328, 329, 331, 332, 333, 334, 339, 342, 344, 346, 347, 348, 351, 354, 365, 368, 369, 370, 372, 373, 383, 427, 431, 436, 445, 446, 510, 529, 551, 558, 559, 563, 566, 578, 579, 583, 584, 600, 616, 626, 627, 631, 632, 633, 634, 637, 638, 639, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 683, 684, 686, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 708, 709, 710, 714, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727], "quant_dequant_data": 42, "qtype": [42, 43, 404, 637], "3": [42, 44, 148, 150, 151, 163, 180, 198, 211, 231, 248, 263, 291, 304, 315, 368, 390, 391, 393, 394, 399, 446, 564, 578, 627, 633, 634, 636, 655, 656, 657, 658, 661, 663, 665, 667, 668, 671, 674, 675, 676, 678, 682, 686, 688, 692, 697, 702, 703, 705, 706, 708, 712, 714, 716, 717, 720, 721, 722, 723, 725, 726, 729], "scheme": [42, 43, 44, 150, 155, 166, 171, 172, 390, 391, 393, 394, 404, 584, 596, 597, 599, 637, 638, 639, 657, 667, 686, 720, 726, 728], "sym": [42, 43, 44, 150, 151, 172, 404, 584, 597, 599, 638, 639, 667, 717, 720, 728], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 150, 158, 171, 172, 394, 475, 512, 515, 516, 517, 518, 520, 571, 599, 627, 633, 638, 723, 724], "asym": [42, 43, 44, 150, 155, 166, 171, 172, 390, 391, 393, 394, 404, 584, 596, 597, 599, 639, 667, 720, 728], "ortsmoothqu": 42, "fake": [42, 44, 113, 166, 168, 172, 176, 182, 388, 445, 532, 584, 596, 597, 599, 675, 717, 720, 723], "channel": [42, 43, 44, 143, 151, 168, 172, 176, 177, 200, 203, 208, 230, 231, 259, 263, 301, 304, 342, 388, 391, 559, 597, 599, 622, 636, 637, 639, 670, 671, 678, 680, 685, 700, 714, 720, 725, 729], "For": [42, 44, 150, 171, 172, 176, 182, 198, 202, 203, 206, 207, 218, 231, 248, 263, 291, 304, 316, 317, 319, 342, 345, 369, 370, 372, 373, 388, 390, 391, 393, 427, 584, 597, 599, 631, 633, 635, 637, 639, 661, 662, 663, 665, 667, 670, 678, 680, 681, 683, 686, 697, 698, 703, 714, 719, 720, 723, 724, 726, 728, 729], "more": [42, 148, 150, 168, 176, 180, 182, 206, 207, 263, 304, 342, 388, 564, 600, 634, 635, 636, 638, 655, 656, 658, 661, 663, 665, 668, 670, 671, 673, 675, 676, 678, 686, 690, 693, 698, 703, 712, 713, 714, 719, 720, 723, 726, 727, 729], "detail": [42, 154, 168, 176, 179, 180, 202, 263, 304, 388, 627, 628, 631, 636, 638, 639, 655, 656, 661, 667, 668, 669, 673, 674, 675, 676, 678, 686, 695, 703, 704, 714, 720, 721, 722, 723, 724, 726, 727], "pleas": [42, 150, 157, 158, 168, 176, 197, 206, 207, 208, 216, 217, 218, 230, 231, 246, 247, 248, 251, 289, 290, 291, 294, 342, 344, 345, 372, 388, 427, 446, 585, 633, 634, 635, 636, 637, 654, 655, 658, 662, 663, 665, 671, 673, 674, 676, 678, 679, 683, 686, 702, 703, 704, 714, 717, 719, 720, 721, 722, 723, 726, 727], "refer": [42, 150, 157, 158, 168, 176, 197, 206, 207, 208, 216, 217, 218, 222, 230, 231, 246, 289, 312, 313, 319, 342, 344, 345, 365, 366, 372, 388, 427, 446, 585, 633, 637, 638, 654, 657, 658, 660, 662, 663, 665, 669, 671, 672, 674, 675, 676, 678, 683, 686, 697, 698, 700, 702, 703, 704, 712, 716, 718, 721, 725, 726], "accur": [42, 157, 168, 176, 217, 388, 585, 607, 714, 720, 723], "effici": [42, 168, 176, 388, 634, 636, 655, 657, 661, 678, 703, 713, 714, 715, 720, 723, 726], "post": [42, 97, 98, 157, 168, 176, 216, 231, 234, 235, 277, 278, 388, 427, 521, 522, 585, 607, 631, 636, 637, 638, 660, 662, 663, 665, 670, 671, 678, 684, 695, 705, 714, 715, 718, 720, 723, 724, 726], "train": [42, 57, 80, 150, 157, 168, 172, 176, 187, 210, 211, 214, 216, 217, 230, 231, 234, 235, 246, 248, 263, 273, 277, 278, 289, 291, 304, 305, 321, 344, 364, 388, 427, 481, 504, 585, 607, 619, 634, 636, 637, 638, 644, 658, 660, 661, 662, 665, 670, 676, 678, 684, 695, 700, 708, 713, 715, 718, 720, 722, 723, 726, 728], "larg": [42, 43, 168, 176, 217, 388, 636, 657, 661, 673, 675, 715, 718, 720, 723, 729], "languag": [42, 168, 176, 217, 312, 365, 388, 631, 636, 665, 673, 699, 715, 718, 720, 723], "2": [42, 43, 44, 54, 74, 105, 109, 150, 151, 163, 168, 172, 174, 176, 178, 180, 198, 204, 210, 211, 224, 230, 231, 247, 264, 290, 315, 317, 319, 344, 351, 368, 370, 372, 383, 388, 390, 391, 393, 394, 404, 431, 446, 478, 498, 528, 578, 584, 597, 599, 627, 633, 637, 655, 657, 658, 660, 661, 667, 670, 671, 672, 673, 674, 676, 699, 705, 706, 708, 709, 710, 712, 714, 715, 717, 718, 720, 721, 722, 723, 725, 726, 727], "spiq": [42, 168, 176, 388, 723], "free": [42, 168, 176, 216, 234, 235, 277, 278, 388, 427, 631, 684, 689, 697, 705, 712, 722, 723], "per": [42, 43, 44, 168, 172, 176, 178, 230, 231, 264, 388, 391, 394, 599, 600, 621, 637, 639, 657, 703, 714, 719, 720, 729], "we": [42, 43, 67, 68, 70, 74, 86, 143, 151, 163, 168, 176, 177, 178, 180, 202, 206, 213, 230, 231, 245, 264, 266, 288, 312, 315, 365, 368, 388, 398, 404, 434, 491, 492, 494, 498, 510, 559, 578, 631, 633, 637, 638, 639, 656, 657, 660, 663, 665, 667, 673, 674, 675, 682, 683, 686, 690, 693, 695, 696, 698, 701, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 163, 168, 170, 172, 176, 177, 178, 190, 195, 199, 205, 212, 230, 231, 246, 264, 266, 270, 289, 309, 321, 342, 344, 355, 388, 394, 397, 399, 427, 437, 445, 446, 478, 487, 494, 510, 528, 534, 559, 578, 585, 598, 600, 607, 627, 636, 637, 638, 639, 654, 655, 657, 660, 661, 663, 666, 667, 673, 675, 676, 683, 696, 714, 715, 716, 717, 718, 723, 724, 726, 727, 728], "inplac": [42, 168, 388, 582, 597, 610], "mean": [42, 44, 150, 168, 172, 204, 213, 230, 231, 259, 263, 301, 304, 317, 319, 342, 354, 370, 372, 388, 436, 597, 633, 638, 639, 657, 660, 663, 667, 674, 675, 681, 700, 714, 717, 718, 720, 723, 725, 726, 728, 729], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 150, 151, 154, 155, 158, 168, 170, 171, 172, 177, 180, 197, 199, 203, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 230, 231, 309, 342, 344, 361, 372, 388, 390, 391, 393, 394, 397, 399, 404, 427, 434, 443, 445, 449, 452, 484, 485, 541, 559, 564, 571, 584, 585, 598, 599, 600, 607, 627, 628, 636, 637, 638, 639, 655, 660, 662, 667, 669, 673, 675, 697, 708, 712, 714, 715, 716, 717, 718, 723, 724, 726, 727, 728], "chang": [42, 96, 143, 150, 151, 168, 177, 210, 211, 213, 214, 216, 217, 220, 230, 231, 344, 346, 388, 434, 520, 559, 627, 632, 638, 657, 663, 666, 672, 675, 678, 688, 689, 692, 695, 701, 714, 724, 725, 726], "you": [42, 163, 168, 230, 231, 244, 246, 287, 289, 344, 372, 388, 427, 578, 600, 632, 633, 638, 656, 657, 658, 660, 663, 671, 672, 674, 676, 678, 680, 681, 683, 688, 692, 695, 696, 697, 698, 699, 700, 701, 703, 714, 717, 720, 721, 722, 723, 724, 727], "can": [42, 43, 44, 143, 154, 158, 163, 168, 177, 180, 194, 202, 203, 204, 209, 217, 218, 220, 230, 231, 234, 235, 245, 248, 263, 264, 266, 277, 278, 288, 291, 304, 315, 317, 319, 342, 344, 346, 368, 370, 372, 373, 383, 388, 394, 404, 427, 559, 578, 600, 616, 627, 633, 634, 636, 637, 638, 639, 654, 656, 657, 658, 660, 661, 662, 663, 665, 667, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 688, 689, 690, 692, 693, 695, 696, 698, 700, 701, 702, 703, 705, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729], "recov": [42, 168, 388, 626, 627, 637, 662], "helper": [43, 45, 110, 116, 148, 171, 246, 247, 248, 262, 289, 290, 291, 303, 307, 308, 309, 381, 404, 529, 535, 564, 569, 611, 625], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 150, 164, 168, 171, 198, 202, 214, 222, 224, 231, 246, 263, 264, 289, 304, 328, 329, 331, 332, 333, 343, 344, 363, 394, 404, 432, 445, 449, 564, 580, 599, 622, 627, 632, 658, 683, 714, 717, 725, 726, 728], "simple_progress_bar": [43, 404], "total": [43, 209, 263, 304, 319, 344, 372, 404, 658, 660, 714, 720, 725, 729], "progress": [43, 196, 199, 212, 248, 291, 404, 689, 695, 697, 714, 717], "bar": [43, 248, 291, 404, 695, 715], "case": [43, 70, 74, 154, 163, 172, 178, 180, 231, 245, 262, 263, 264, 288, 303, 304, 310, 334, 339, 347, 383, 404, 494, 498, 578, 584, 639, 656, 657, 661, 662, 663, 667, 669, 674, 679, 683, 695, 696, 697, 700, 706, 709, 710, 712, 714, 715, 717, 720, 721, 723, 725, 727, 728, 729], "where": [43, 154, 163, 230, 231, 315, 319, 368, 372, 404, 445, 578, 627, 639, 655, 660, 661, 688, 692, 696, 723, 724], "tqdm": [43, 404, 675], "t": [43, 67, 68, 70, 143, 154, 163, 177, 204, 230, 231, 263, 266, 304, 317, 370, 404, 491, 492, 494, 559, 578, 633, 637, 656, 660, 661, 663, 675, 676, 696, 701, 714, 717, 720, 726, 728], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 151, 230, 231, 249, 250, 259, 263, 292, 293, 301, 304, 394, 566, 597, 599, 600, 607, 622, 638, 639, 658, 660, 665, 667, 678, 700, 716, 717, 720, 723, 724, 725, 728], "its": [43, 60, 96, 148, 158, 202, 211, 214, 216, 222, 231, 242, 248, 263, 285, 291, 304, 307, 313, 314, 344, 351, 366, 367, 431, 484, 520, 564, 631, 658, 661, 672, 674, 676, 686, 688, 692, 695, 696, 714, 720, 722, 725, 726], "string": [43, 45, 116, 148, 150, 157, 161, 163, 178, 186, 188, 190, 194, 195, 202, 204, 209, 218, 219, 220, 222, 227, 230, 231, 248, 265, 270, 291, 305, 310, 312, 315, 321, 322, 323, 325, 326, 334, 339, 342, 343, 344, 345, 346, 347, 365, 368, 377, 381, 404, 535, 564, 569, 571, 578, 579, 585, 594, 619, 624, 627, 674, 725], "represent": [43, 161, 579, 631, 633, 655, 662, 714, 717], "quanttyp": [43, 445], "repres": [43, 204, 208, 209, 218, 219, 222, 248, 253, 291, 296, 315, 317, 319, 368, 370, 372, 390, 391, 393, 394, 631, 639, 655, 658, 665, 703, 714, 717, 718, 726], "make_quant_nod": 43, "axi": [43, 231], "make": [43, 105, 143, 177, 194, 204, 209, 218, 220, 244, 287, 342, 344, 346, 559, 627, 631, 637, 638, 654, 656, 657, 667, 674, 675, 683, 688, 692, 695, 697, 714, 717, 718, 719, 720, 722, 723, 726], "quantizelinear": 43, "make_dquant_nod": 43, "dequantizelinear": 43, "is_b_transpos": [43, 404], "inuput": [43, 404], "b": [43, 74, 150, 154, 172, 246, 289, 404, 498, 627, 632, 655, 658, 674, 714, 720, 723, 726], "transpos": [43, 73, 151, 208, 259, 263, 304, 308, 342, 404, 497, 720, 725], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 150, 172, 394, 452, 506, 522, 528, 584, 597, 599, 666, 667, 720, 723, 726], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 600, 676, 678, 686, 719], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 178, 247, 251, 254, 290, 294, 297, 354, 436, 674, 699, 726], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 158, 171, 180, 259, 263, 301, 304, 312, 315, 316, 317, 319, 365, 368, 369, 370, 372, 407, 427, 434, 564, 583, 616, 626, 627, 631, 634, 636, 657, 660, 661, 663, 670, 672, 674, 675, 683, 684, 695, 696, 699, 703, 704, 705, 706, 712, 714, 715, 717, 720, 722, 723, 724, 725, 726, 727, 729], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 394], "point": [43, 44, 150, 172, 259, 301, 316, 317, 326, 351, 369, 370, 391, 394, 404, 431, 599, 627, 674, 695, 700, 701, 717, 720, 723, 725, 726], "To": [43, 315, 368, 383, 404, 632, 638, 639, 656, 658, 660, 663, 676, 679, 682, 688, 690, 692, 693, 697, 701, 714, 716, 719, 720, 721, 723, 726, 728], "pack": [43, 61, 404, 485], "comput": [43, 44, 105, 150, 154, 158, 171, 312, 313, 316, 317, 319, 365, 366, 369, 370, 372, 390, 391, 393, 394, 404, 600, 616, 627, 655, 657, 662, 665, 674, 675, 676, 678, 689, 698, 714, 715, 717, 720, 723, 726], "linear": [43, 150, 151, 157, 166, 170, 171, 172, 176, 200, 202, 203, 208, 213, 222, 225, 230, 231, 342, 404, 585, 596, 598, 599, 633, 661, 665, 675, 714, 720, 723, 726], "transform": [43, 50, 143, 145, 146, 147, 150, 157, 167, 170, 216, 246, 247, 248, 249, 250, 251, 253, 255, 257, 289, 290, 291, 292, 293, 294, 296, 298, 300, 311, 364, 404, 474, 559, 561, 562, 563, 566, 582, 583, 585, 598, 607, 633, 634, 636, 655, 658, 661, 662, 663, 664, 668, 673, 675, 678, 683, 684, 685, 686, 698, 706, 709, 710, 714, 715, 719, 720, 723, 724, 726, 728, 729], "when": [43, 54, 64, 70, 148, 161, 163, 180, 203, 209, 214, 222, 230, 231, 246, 247, 255, 263, 289, 290, 298, 304, 313, 343, 344, 366, 404, 427, 478, 488, 494, 564, 578, 579, 600, 616, 631, 634, 638, 656, 657, 658, 675, 686, 688, 689, 692, 696, 697, 700, 701, 702, 704, 708, 714, 717, 720, 723, 725, 726], "uint8": [43, 172, 259, 301, 315, 363, 368, 404, 445, 599, 637, 658, 667, 716, 717, 725, 728], "rmin": [43, 404, 717], "rmax": [43, 404, 717], "m": [43, 158, 172, 206, 207, 230, 231, 342, 404, 599, 632, 661, 671, 678, 680, 683, 686, 690, 693, 703, 714, 729], "max": [43, 104, 143, 150, 172, 177, 180, 195, 198, 230, 231, 263, 304, 316, 317, 351, 369, 370, 404, 431, 559, 571, 599, 627, 636, 660, 671, 675, 698, 700, 714, 717, 720, 723, 725, 726], "ab": [43, 157, 172, 197, 216, 217, 344, 404, 585, 599, 607, 714, 717, 723], "np": [43, 263, 304, 351, 394, 431, 663, 705, 723, 725, 726], "calculate_scale_zp": 43, "quantize_rang": [43, 404], "calcul": [43, 60, 171, 197, 206, 222, 231, 249, 250, 292, 293, 316, 317, 342, 344, 354, 369, 370, 436, 484, 566, 617, 627, 655, 658, 674, 675, 686, 698, 712, 714, 717, 720, 722, 723, 726, 728], "quantize_data": [43, 404], "add": [43, 53, 64, 109, 119, 148, 190, 222, 230, 231, 246, 248, 270, 289, 291, 343, 361, 404, 443, 477, 488, 528, 538, 564, 627, 632, 633, 639, 657, 658, 663, 665, 667, 674, 675, 690, 693, 697, 698, 705, 708, 709, 722, 723, 724, 726, 727], "necessari": [43, 218, 404, 631, 634, 638, 677, 696, 714, 722, 726], "intermedi": [43, 158, 188, 230, 231, 265, 404, 633, 670, 717], "full": [43, 150, 151, 172, 246, 247, 248, 289, 290, 291, 404, 622, 627, 636, 655, 658, 660, 666, 672, 696, 701, 714, 720, 721], "equat": [43, 317, 319, 370, 372, 404, 717, 723], "r": [43, 143, 177, 404, 559, 660, 671, 696, 697, 699, 700, 702, 703, 717, 729], "": [43, 44, 105, 143, 148, 163, 177, 202, 203, 204, 208, 209, 210, 211, 214, 216, 217, 222, 225, 227, 228, 230, 231, 245, 248, 262, 263, 264, 266, 268, 288, 291, 303, 304, 317, 342, 344, 370, 372, 373, 377, 391, 404, 427, 559, 564, 571, 578, 587, 599, 600, 624, 627, 631, 632, 634, 638, 639, 656, 660, 661, 663, 665, 667, 670, 675, 676, 683, 686, 688, 692, 695, 698, 700, 703, 713, 714, 715, 716, 717, 720, 721, 722, 723, 726, 727, 728, 729], "q": [43, 44, 107, 109, 131, 404, 526, 528, 550, 720, 723], "z": [43, 404, 655, 656, 661, 723], "real": [43, 249, 266, 292, 404, 566, 638, 655, 663, 697, 704, 715, 717], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 163, 164, 564, 578, 580], "new_dtyp": 43, "cast": [43, 51, 475, 719, 725], "info": [43, 171, 172, 206, 207, 222, 261, 266, 271, 342, 377, 571, 583, 584, 622, 623, 627, 633, 656, 660, 677, 705, 710], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 571, 627], "low": [43, 150, 151, 172, 234, 235, 249, 250, 277, 278, 292, 293, 310, 320, 347, 373, 566, 637, 638, 654, 655, 658, 663, 675, 676, 700, 715, 717, 720, 723, 726], "high": [43, 249, 250, 292, 293, 566, 658, 660, 671, 700, 715, 726], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 171, 202, 213, 228, 231, 507, 564, 600, 627, 637, 657, 667, 669, 675, 716, 728], "make_nod": 43, "find_by_nam": [43, 404], "item_list": [43, 404], "find": [43, 67, 68, 70, 105, 148, 225, 319, 326, 351, 372, 404, 431, 491, 492, 494, 564, 627, 637, 660, 673, 681, 688, 692, 695, 696, 698, 700, 714, 720, 722, 723, 724, 726], "item": [43, 222, 228, 230, 231, 262, 303, 343, 361, 404, 443, 571, 587, 655, 663, 714, 723, 726], "trt_env_setup": 43, "environ": [43, 178, 264, 631, 654, 688, 692, 695, 703, 706, 708, 709, 710, 726], "variabl": [43, 161, 178, 219, 230, 231, 248, 264, 291, 351, 431, 445, 579, 671, 714, 726], "tensorrt": [43, 655, 676, 717], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 729], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 309, 351, 431], "base_dir": 43, "shape": [43, 44, 105, 148, 150, 204, 249, 250, 259, 263, 292, 293, 301, 304, 315, 368, 394, 404, 564, 566, 636, 658, 667, 668, 675, 697, 698, 720, 723, 725], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 150, 155, 166, 171, 172, 390, 391, 393, 394, 445, 584, 596, 597, 599, 607, 720], "has_zp": 44, "blob_siz": 44, "how": [44, 150, 163, 172, 180, 187, 197, 204, 210, 211, 216, 217, 230, 231, 263, 304, 305, 342, 394, 578, 597, 599, 632, 633, 635, 637, 657, 658, 661, 662, 663, 669, 674, 675, 689, 690, 693, 694, 695, 697, 708, 709, 710, 714, 715, 717, 723, 725, 726, 727, 728], "mani": [44, 150, 172, 372, 394, 427, 597, 599, 656, 657, 671, 720, 726, 728], "element": [44, 150, 172, 180, 206, 207, 222, 244, 287, 315, 342, 368, 394, 597, 599, 627, 658, 670, 674, 714, 720, 723], "one": [44, 109, 110, 115, 150, 151, 163, 171, 172, 178, 204, 208, 213, 216, 217, 218, 220, 263, 273, 304, 312, 315, 319, 321, 342, 345, 346, 365, 368, 372, 394, 528, 529, 534, 578, 583, 597, 599, 600, 634, 637, 655, 661, 662, 663, 667, 670, 671, 674, 675, 676, 678, 679, 683, 684, 686, 688, 689, 692, 695, 696, 697, 700, 701, 702, 703, 705, 712, 713, 714, 716, 717, 718, 720, 721, 723, 725, 726], "zp": [44, 150, 172, 394, 597, 599, 723], "make_matmul_weight_only_nod": [44, 394], "weight_shap": [44, 394], "num_bit": [44, 113, 150, 166, 171, 172, 390, 391, 393, 394, 532, 596, 723], "k_block": [44, 394], "q_weight": [44, 394], "accuracy_level": [44, 390, 391, 393, 394, 399], "matmulfpq4": [44, 394], "accuraci": [44, 178, 180, 222, 230, 231, 234, 235, 277, 278, 305, 310, 319, 334, 339, 347, 372, 373, 383, 390, 391, 393, 394, 397, 427, 432, 446, 600, 616, 624, 633, 636, 638, 639, 655, 657, 658, 660, 662, 663, 664, 665, 673, 674, 675, 686, 695, 697, 704, 705, 708, 709, 712, 713, 714, 715, 716, 720, 721, 722, 723, 724, 727, 728, 729], "level": [44, 182, 202, 390, 391, 393, 394, 432, 446, 623, 631, 705, 723, 726], "unset": [44, 390, 391, 393, 394], "jbla": [44, 390, 391, 393, 394], "kernel": [44, 176, 230, 231, 390, 391, 393, 394, 637, 638, 726], "fp16": [44, 172, 231, 361, 390, 391, 393, 394, 443, 717], "4": [44, 54, 150, 151, 155, 166, 171, 172, 178, 198, 204, 213, 230, 231, 255, 258, 259, 263, 298, 301, 304, 312, 313, 315, 365, 366, 368, 390, 391, 393, 394, 397, 399, 445, 446, 478, 584, 596, 597, 599, 607, 631, 637, 639, 654, 663, 664, 667, 670, 671, 674, 675, 683, 703, 705, 709, 714, 717, 720, 723, 725, 726, 729], "matmulnbit": [44, 394], "new_init": [44, 394], "matmul_weight_only_nod": [44, 394], "quant_tensor": [44, 394, 599], "32": [44, 150, 155, 172, 200, 390, 391, 393, 394, 399, 445, 584, 597, 599, 607, 663, 669, 720, 729], "ratio": [44, 143, 177, 204, 209, 222, 230, 231, 259, 263, 301, 304, 344, 393, 394, 559, 658, 675, 698, 714, 725, 729], "group": [44, 150, 151, 154, 172, 219, 329, 390, 391, 393, 394, 599, 636, 670, 714, 720, 724, 725, 726, 729], "clip": [44, 172, 390, 393, 394, 584, 597, 599, 720, 723], "qdq_tensor": [44, 394], "quant": [44, 148, 150, 171, 172, 230, 231, 361, 387, 390, 391, 393, 394, 396, 399, 443, 454, 455, 465, 469, 564, 584, 597, 599, 633, 656, 673, 675, 717], "pad_tensor": [44, 394], "rowi": [44, 394], "so": [44, 105, 263, 304, 394, 445, 633, 637, 660, 666, 670, 676, 681, 683, 699, 700, 701, 717, 719, 720, 723, 724, 725, 727], "divis": [44, 394], "pade": [44, 394], "rtn_quantiz": [44, 172, 393, 597], "weight_config": [44, 150, 151, 155, 157, 170, 172, 385, 390, 391, 393, 584, 585, 597, 598], "round": [44, 143, 150, 172, 177, 393, 399, 559, 597, 607, 636, 715, 717, 720, 723], "nearst": [44, 172, 393], "method": [44, 141, 143, 150, 161, 163, 171, 172, 194, 219, 230, 231, 239, 244, 245, 246, 248, 255, 263, 266, 282, 287, 288, 289, 291, 298, 304, 325, 326, 327, 361, 390, 391, 393, 443, 445, 452, 559, 578, 579, 584, 597, 600, 619, 620, 622, 623, 633, 634, 636, 655, 656, 657, 658, 660, 661, 662, 674, 675, 713, 714, 717, 719, 720, 723, 725, 726], "modelproto": [44, 307, 373, 385, 388, 390, 391, 393, 394, 396, 397, 404, 677], "onnxmodel": [44, 380, 385, 387, 388, 390, 391, 393, 394, 403, 420], "fc2": [44, 171, 172, 390, 391, 393, 584, 597, 599], "rtn": [44, 171, 396, 399, 469, 605, 607, 656, 718, 720], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 150, 166, 170, 187, 213, 215, 273, 313, 366, 390, 391, 393, 396, 467, 532, 545, 546, 547, 550, 552, 556, 564, 596, 598, 605, 631, 638, 639, 675, 678, 680, 686, 695, 699, 700, 705, 713, 714, 717, 719, 722, 723, 726, 727, 728], "salient": [44, 172, 584, 714, 720], "apply_awq_clip": 44, "mse": [44, 171, 172, 230, 231, 311, 319, 353, 364, 372, 391, 399, 427, 435, 584, 627, 660, 674, 700, 716, 720, 721], "prepare_input": [44, 394], "n_sampl": [44, 150, 155, 171, 172, 584, 599], "sampl": [44, 77, 150, 171, 172, 180, 230, 231, 239, 244, 246, 247, 248, 259, 263, 282, 287, 289, 290, 291, 301, 304, 319, 326, 351, 372, 431, 501, 584, 599, 634, 657, 658, 664, 670, 696, 717, 720, 723, 725, 726, 728, 729], "session": [44, 148, 245, 288, 381, 394, 564, 569, 675, 724], "awq_quant": [44, 172, 390, 584], "enable_auto_scal": [44, 172, 390, 399, 720], "enable_mse_search": [44, 172, 390, 399, 720], "awar": [44, 155, 158, 172, 187, 231, 273, 321, 342, 390, 434, 584, 616, 637, 638, 639, 655, 662, 663, 665, 670, 695, 705, 713, 715, 720, 726], "awq": [44, 172, 396, 399, 718, 720], "enabl": [44, 109, 150, 154, 158, 172, 209, 230, 231, 344, 528, 584, 600, 638, 639, 663, 671, 676, 678, 680, 683, 684, 686, 697, 699, 700, 702, 705, 714, 715, 723, 726], "gptq": [44, 172, 396, 399, 607, 656, 718, 720], "w": [44, 157, 263, 304, 585, 714, 723, 725], "h": [44, 230, 231, 263, 304, 663, 703, 704, 708, 709, 710, 725], "blocksiz": [44, 391, 399], "percdamp": [44, 391, 399, 607, 720], "01": [44, 150, 180, 230, 231, 390, 391, 399, 607, 675, 716, 720, 726, 728, 729], "actord": [44, 391, 399, 720], "perchannel": [44, 391, 399], "hessian": [44, 158, 391, 434, 720, 726], "matrix": [44, 372, 427, 636, 686, 727], "percent": 44, "averag": [44, 316, 317, 319, 369, 370, 372, 391, 674, 675, 720, 726, 729], "diagon": [44, 391, 720], "dampen": [44, 154], "rearrang": [44, 216, 391, 714, 720], "consid": [44, 148, 154, 319, 372, 564, 631, 655, 656, 661, 696, 726], "diag": 44, "error": [44, 105, 150, 158, 163, 172, 319, 354, 372, 391, 436, 578, 623, 660, 674, 679, 700, 701, 704, 720, 723, 726], "gptq_quantiz": [44, 172, 391, 585], "get_ops_recurs": 45, "prefix": [45, 148, 156, 163, 164, 169, 171, 178, 564, 578, 580, 599, 678, 683, 724], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 156, 158, 163, 171, 172, 194, 225, 228, 230, 231, 262, 303, 315, 322, 325, 327, 368, 404, 491, 492, 494, 564, 571, 578, 583, 615, 627], "yaml": [45, 222, 228, 231, 234, 235, 246, 248, 264, 277, 278, 289, 291, 305, 310, 321, 322, 323, 325, 334, 339, 347, 348, 454, 626, 627, 637, 639, 669, 674, 675, 712, 716, 724, 725], "file": [45, 105, 148, 161, 163, 164, 171, 175, 191, 218, 222, 227, 230, 231, 234, 235, 246, 247, 248, 251, 262, 263, 269, 272, 277, 278, 289, 290, 291, 294, 303, 304, 305, 310, 315, 321, 322, 323, 325, 334, 339, 343, 345, 347, 348, 368, 373, 383, 410, 411, 415, 427, 564, 571, 578, 579, 580, 626, 627, 632, 634, 637, 638, 639, 663, 666, 669, 672, 674, 675, 677, 681, 690, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 708, 709, 710, 712, 716, 717, 720, 724, 725], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 154, 157, 274, 310, 315, 347, 360, 361, 368, 372, 427, 442, 443, 446, 494, 499, 529, 571, 585, 592, 627, 633, 640, 642, 646, 649, 652, 660, 665, 670, 671, 675, 680, 684, 685, 686, 702, 703, 707, 721, 722, 726, 730], "pytorch_ipexadaptor": 45, "intel": [45, 190, 206, 207, 218, 267, 270, 306, 311, 318, 319, 342, 345, 353, 359, 364, 371, 372, 405, 427, 435, 441, 571, 629, 631, 632, 634, 635, 637, 638, 639, 655, 658, 659, 661, 662, 664, 665, 667, 668, 672, 673, 676, 677, 678, 683, 685, 686, 697, 698, 699, 700, 702, 703, 712, 713, 714, 715, 717, 719, 720, 721, 723, 724, 726, 727, 728], "extens": [45, 161, 163, 571, 578, 579, 627, 634, 636, 637, 667, 670, 671, 673, 675, 676, 677, 679, 684, 685, 686, 690, 693, 694, 698, 714, 715, 717, 720, 723, 726, 727, 728], "ipex": [45, 165, 171, 230, 231, 583, 626, 670, 675, 676, 680, 684, 685, 723], "pytorch_fxadaptor": 45, "fx": [45, 171, 230, 355, 437, 670, 676, 684, 685, 699, 715, 717, 719], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 202, 245, 288, 310, 374, 381, 426, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 536, 549, 551, 555, 558, 559, 561, 562, 563, 564, 569, 633, 637, 658, 661, 663, 669, 677, 678, 697, 700, 717, 718, 719, 724], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 637, 638], "tensorflowadaptor": [47, 455], "stock": [47, 455, 684, 723], "spr": [47, 455], "tensorflow_itexadaptor": [47, 455], "itex": [47, 109, 230, 231, 308, 455, 528, 676, 717, 723], "tensorflowqueri": [47, 455, 637], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 230, 455, 472, 473, 526, 550, 555, 563, 675], "itex_mod": [47, 48, 89, 107, 131, 136, 455, 472, 513, 526, 550, 555], "quant_mod": [47, 361, 443, 455, 638, 639], "graphconvert": [48, 472], "qt_config": [48, 472], "recip": [48, 202, 230, 231, 310, 347, 472, 636, 675, 718, 720, 723, 726], "int8_sequ": [48, 472], "fp32_op": [48, 50, 107, 472, 474, 526], "bf16_op": [48, 50, 107, 472, 474, 526, 638, 719], "data_load": [48, 49, 472, 473, 637], "calib_func": [48, 155, 171, 172, 427, 472, 584, 598, 599, 719], "fake_qu": [48, 88, 107, 131, 136, 472, 512, 526, 550, 555], "qdq_enabl": [48, 472], "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 472, 473, 495, 496, 501, 503, 516, 523, 550, 555, 559], "use_bf16": [48, 49, 230, 472, 473, 716], "without": [49, 90, 148, 198, 214, 263, 304, 344, 363, 445, 473, 514, 564, 631, 661, 663, 675, 686, 697, 700, 714, 715, 716, 726, 727], "graphconverterwithoutcalib": [49, 473], "recover_config": [49, 473], "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 199, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528], "bf16convert": [50, 474, 719], "rerewrit": [51, 475], "dequantizecastoptim": [51, 475], "b16": [51, 475], "dequantize_cast_optim": [52, 87, 111, 476, 511], "biasadd": [53, 59, 64, 66, 109, 477, 483, 488, 490, 528, 667], "convertaddtobiasaddoptim": [53, 477], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 157, 469, 477, 483, 484, 485, 489, 490, 495, 544, 554, 559, 585, 638, 639, 660, 665, 667, 700, 723, 724, 726], "addv2": [53, 69, 477, 493, 667], "layout": [54, 478], "convertlayoutoptim": [54, 478], "convers": [54, 55, 231, 321, 478, 479, 632, 637, 638, 675, 676, 717, 719, 723], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 150, 154, 189, 192, 193, 194, 196, 199, 202, 211, 216, 227, 230, 231, 267, 273, 310, 311, 327, 347, 351, 364, 431, 478, 498, 499, 503, 504, 535, 537, 564, 616, 617, 624, 627, 634, 636, 654, 656, 660, 661, 662, 663, 667, 668, 670, 671, 673, 675, 677, 678, 680, 682, 683, 686, 689, 697, 700, 701, 702, 704, 706, 715, 716, 717, 719, 720, 722, 723, 724, 726, 728], "nchw": [54, 259, 478], "nhwc": [54, 259, 478], "It": [54, 163, 172, 185, 187, 191, 204, 234, 235, 272, 277, 278, 317, 319, 326, 342, 347, 354, 370, 372, 373, 427, 432, 436, 478, 578, 599, 616, 637, 638, 639, 655, 660, 661, 675, 681, 684, 689, 695, 696, 697, 698, 700, 701, 703, 714, 717, 720, 721, 722, 726, 728], "exist": [54, 178, 228, 264, 381, 478, 569, 571, 627, 665, 674, 682, 726], "abov": [54, 478, 637, 638, 639, 661, 697, 698, 700, 703, 714, 717, 723, 726], "graph_def": [54, 140, 141, 148, 308, 373, 381, 426, 427, 449, 452, 478, 564, 569], "leakyrelu": [55, 479, 723], "convertleakyreluoptim": [55, 479], "below": [55, 66, 74, 230, 231, 348, 372, 398, 427, 479, 490, 498, 632, 633, 636, 637, 638, 639, 657, 660, 661, 663, 669, 674, 678, 680, 688, 689, 692, 695, 698, 703, 712, 713, 714, 716, 717, 720, 722, 723, 724, 726, 727], "subgraph": [55, 66, 105, 169, 479, 490, 718, 726], "mul": [55, 65, 66, 69, 172, 176, 479, 489, 490, 493, 584, 665, 720, 723], "maximum": [55, 150, 172, 180, 204, 209, 230, 231, 246, 263, 289, 304, 313, 344, 351, 366, 381, 431, 479, 569, 639, 655, 658, 660, 675, 714, 717, 723, 725], "note": [55, 161, 208, 315, 355, 368, 437, 479, 579, 634, 636, 638, 639, 656, 657, 660, 663, 665, 667, 671, 673, 675, 680, 683, 688, 692, 695, 697, 701, 703, 705, 714, 717, 720, 723, 724, 726, 727, 728], "coeffici": [55, 150, 219, 479, 714], "less": [55, 148, 171, 230, 231, 479, 571, 599, 627, 654, 661, 675, 702, 714], "than": [55, 148, 246, 263, 289, 304, 479, 571, 600, 627, 634, 636, 654, 658, 669, 700, 708, 712, 713, 714, 717, 720, 722, 725, 726], "valid": [55, 67, 68, 105, 185, 209, 212, 222, 230, 231, 248, 291, 315, 343, 344, 368, 381, 479, 491, 492, 569, 634, 636, 637, 658, 660, 661, 664, 667, 670, 672, 675, 686, 700, 714, 717, 720, 721], "nan": [56, 480], "random": [56, 148, 150, 172, 186, 194, 230, 231, 259, 263, 301, 304, 311, 327, 351, 353, 364, 431, 435, 480, 564, 571, 627, 634, 675, 714, 716, 725, 728], "convertnantorandom": [56, 480], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 480, 481, 487, 488, 491, 492, 494, 506, 522], "consist": [56, 63, 480, 487, 632, 633, 656, 703, 723, 726], "placehold": [57, 244, 287, 481, 656], "convertplaceholdertoconst": [57, 481], "dilat": [58, 482], "contract": [58, 482], "dilatedcontract": [58, 482], "spacetobatchnd": [58, 482], "batchtospacend": [58, 482], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 171, 194, 195, 196, 197, 199, 202, 203, 209, 210, 211, 212, 214, 216, 217, 219, 227, 230, 231, 248, 291, 311, 332, 333, 335, 340, 344, 361, 364, 443, 482, 483, 485, 502, 520, 526, 527, 528, 550, 555, 637, 656, 658, 667, 670, 675, 696, 713, 716, 723, 726, 729], "inject": [59, 483, 675], "dummi": [59, 202, 249, 250, 292, 293, 319, 372, 483, 566, 636, 658, 668, 674, 675, 697], "injectdummybiasaddoptim": [59, 483], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 483, 485, 494, 502, 528, 545, 546, 547, 550, 551, 552, 556, 633, 637, 667], "expanddim": [60, 484], "expanddimsoptim": [60, 484], "next": [60, 239, 282, 446, 484, 634, 638, 639, 657, 716, 720, 726], "fetch": [61, 171, 175, 239, 282, 485, 638, 658, 708, 709, 710], "reshap": [61, 67, 68, 73, 485, 491, 492, 497, 723], "fetchweightfromreshapeoptim": [61, 485], "handl": [61, 148, 168, 176, 185, 485, 564, 623, 633, 635, 656, 657, 703, 723], "fold": [62, 63, 171, 172, 309, 399, 469, 486, 487, 584, 598, 599, 667, 720, 723], "foldbatchnormnodesoptim": [62, 486], "graphfoldconstantoptim": [63, 487], "sequenc": [63, 105, 150, 172, 203, 206, 207, 230, 231, 246, 262, 263, 289, 303, 304, 313, 317, 342, 366, 370, 487, 587, 637, 658, 667, 714, 720, 725], "self": [63, 171, 172, 202, 230, 231, 383, 487, 584, 599, 600, 637, 638, 657, 658, 670, 674, 697, 722, 724, 726], "supported_op_typ": [63, 487], "fusebiasaddandaddoptim": [64, 488], "second": [64, 163, 203, 230, 231, 246, 289, 432, 488, 578, 627, 660, 675, 688, 692, 696, 708, 709, 720, 723, 726, 728], "columnwis": [65, 489], "fusecolumnwisemuloptim": [65, 489], "depthwiseconv2dn": [65, 71, 125, 135, 489, 495, 544, 554, 667], "math": [66, 490, 717], "fuseconvwithmathoptim": [66, 490], "elimin": [66, 490, 702], "sub": [66, 171, 178, 202, 264, 490, 583, 634, 656, 726], "realdiv": [66, 69, 490, 493], "decompos": [67, 68, 491, 492], "fusedecomposedbnoptim": [67, 491], "input_graph_def": [67, 68, 70, 491, 492, 494], "node_name_from_input": [67, 68, 70, 491, 492, 494], "node_nam": [67, 68, 70, 148, 381, 412, 491, 492, 494, 564, 569, 638], "strip": [67, 68, 70, 83, 84, 148, 491, 492, 494, 507, 508, 564, 724], "port": [67, 68, 70, 491, 492, 494, 697, 704], "other": [67, 68, 70, 150, 154, 161, 168, 176, 245, 288, 317, 370, 381, 491, 492, 494, 569, 579, 631, 633, 638, 639, 656, 660, 667, 670, 672, 675, 677, 698, 712, 714, 717, 723, 725, 726, 729], "underli": [67, 68, 70, 163, 491, 492, 494, 578], "node_from_map": [67, 68, 70, 491, 492, 494], "node_map": [67, 68, 70, 491, 492, 494], "pull": [67, 68, 70, 491, 492, 494], "def": [67, 68, 70, 180, 234, 235, 277, 278, 404, 427, 446, 491, 492, 494, 571, 600, 615, 616, 633, 637, 656, 657, 658, 661, 662, 663, 674, 675, 717, 723, 724, 726], "entri": [67, 68, 70, 158, 190, 270, 310, 348, 396, 397, 467, 468, 471, 491, 492, 494, 605, 606, 610, 627, 656, 672], "index": [67, 68, 70, 105, 178, 222, 231, 239, 244, 248, 282, 287, 291, 326, 491, 492, 494, 627, 658, 674, 696, 700, 720, 723], "everi": [67, 68, 70, 204, 207, 209, 230, 231, 342, 344, 491, 492, 494, 637, 657, 683, 688, 692, 718, 720, 726], "identifi": [67, 68, 70, 163, 315, 368, 381, 491, 492, 494, 569, 578, 703, 714, 720], "want": [67, 68, 70, 202, 230, 231, 244, 246, 287, 289, 344, 432, 491, 492, 494, 600, 616, 633, 637, 657, 658, 663, 675, 683, 695, 696, 703, 712, 717, 720, 722, 724, 726], "nodedef": [67, 68, 70, 491, 492, 494], "rais": [67, 68, 70, 105, 161, 163, 171, 199, 205, 212, 222, 315, 342, 343, 344, 368, 373, 446, 491, 492, 494, 578, 579, 599, 636, 656, 697, 714, 715], "valueerror": [67, 68, 70, 171, 315, 368, 446, 491, 492, 494, 599, 666], "If": [67, 68, 70, 74, 163, 172, 178, 182, 230, 231, 234, 235, 248, 263, 277, 278, 291, 304, 343, 373, 427, 446, 491, 492, 494, 498, 578, 587, 599, 600, 616, 632, 633, 638, 654, 656, 657, 658, 663, 671, 672, 674, 675, 681, 689, 690, 693, 695, 701, 706, 712, 714, 717, 720, 722, 723, 724, 725, 726], "isn": [67, 68, 70, 491, 492, 494], "present": [67, 68, 70, 491, 492, 494, 660, 703, 715, 723], "values_from_const": [67, 68, 70, 491, 492, 494], "node_def": [67, 68, 70, 491, 492, 494], "extract": [67, 68, 70, 148, 202, 248, 291, 363, 445, 491, 492, 494, 564, 658], "ha": [67, 68, 70, 74, 150, 157, 163, 208, 209, 264, 312, 342, 344, 365, 404, 446, 491, 492, 494, 498, 571, 578, 585, 632, 634, 637, 638, 639, 657, 665, 670, 675, 676, 681, 695, 700, 701, 703, 706, 714, 716, 717, 719, 722, 723, 726], "access": [67, 68, 70, 228, 231, 491, 492, 494, 622, 627, 690, 693, 697], "valid_reshape_input": [67, 68, 491, 492], "reshape_in0_ndef": [67, 68, 491, 492], "reshape_in1_ndef": [67, 68, 491, 492], "ar": [67, 68, 105, 151, 163, 171, 204, 209, 210, 211, 216, 217, 230, 231, 246, 263, 289, 304, 315, 319, 326, 342, 343, 344, 348, 350, 351, 368, 372, 390, 391, 393, 397, 428, 430, 431, 445, 446, 491, 492, 578, 583, 600, 619, 626, 627, 631, 632, 633, 634, 637, 638, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 683, 686, 689, 695, 697, 698, 700, 701, 702, 703, 706, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728], "bypass_reshap": [67, 68, 491, 492], "input_node_map": [67, 68, 491, 492], "input_nam": [67, 68, 102, 142, 231, 308, 309, 491, 492, 665], "get_const_dim_count": [67, 68, 491, 492], "dimens": [67, 68, 105, 150, 238, 263, 281, 304, 491, 492, 658, 661, 720, 725], "instancenorm": [68, 492, 723], "fusedecomposedinoptim": [68, 492], "gelu": [69, 493], "fusegeluoptim": [69, 493], "sqrt": [69, 493, 660], "erf": [69, 493], "layernorm": [70, 494, 723], "fuselayernormoptim": [70, 494], "remap": [70, 163, 494, 578], "smaller": [70, 263, 304, 494, 661, 675, 714, 725], "fusedbatcnormv3": [70, 494], "And": [70, 494, 632, 633, 654, 656, 675, 681, 723], "further": [70, 231, 494, 631, 676, 677, 678, 680, 689, 695, 717], "restrict": [70, 163, 230, 231, 494, 578, 714, 722], "2d": [70, 494, 723], "3d": [70, 494, 715, 723], "kera": [70, 116, 190, 202, 222, 231, 248, 255, 270, 291, 298, 376, 381, 468, 471, 494, 535, 569, 571, 638, 657, 663, 677, 685, 686], "fusepadwithconv2doptim": [71, 495], "excluded_op_nam": [71, 72, 227, 230, 231, 495, 496, 675, 714], "cfg": [71, 72, 171, 227, 361, 443, 495, 496, 583, 619, 638, 639], "itex_qdq_mod": [71, 72, 495, 496], "conv3d": [71, 125, 495, 544], "fusepadwithfp32conv2doptim": [72, 496], "fusetransposereshapeoptim": [73, 497], "cse": [74, 98, 498, 522], "graphcseoptim": [74, 498], "introduc": [74, 498, 637, 638, 639, 667, 675, 717, 720, 721, 723, 727], "ident": [74, 80, 203, 498, 504, 631, 661], "three": [74, 222, 246, 289, 350, 428, 430, 498, 633, 637, 638, 655, 671, 676, 689, 703, 713, 717, 719, 722, 723, 724], "d": [74, 171, 498, 583, 661, 669, 696, 698, 704, 714, 729], "those": [74, 163, 354, 436, 498, 578, 627, 660, 661, 662, 669, 675, 676, 713, 714, 717, 726], "child": [74, 157, 164, 498, 580, 585, 724], "b1": [74, 498], "c1c2": [74, 498], "d1": [74, 498, 627], "c1": [74, 498], "c2": [74, 498], "memori": [74, 150, 151, 171, 172, 310, 334, 339, 347, 383, 385, 498, 599, 627, 655, 657, 662, 675, 676, 678, 712, 714, 717, 718, 720, 723, 726, 729], "bound": [74, 178, 195, 263, 304, 315, 351, 368, 431, 498, 674, 725], "like": [74, 96, 98, 148, 150, 163, 182, 202, 222, 231, 234, 235, 236, 248, 277, 278, 279, 291, 310, 319, 344, 347, 348, 372, 381, 397, 427, 498, 520, 522, 564, 566, 569, 578, 616, 632, 633, 634, 637, 638, 660, 661, 662, 670, 683, 698, 700, 713, 714, 717, 720, 721, 723, 726], "relu": [74, 78, 109, 498, 502, 528, 633, 667, 723, 724], "relu6": [74, 498, 667], "updat": [74, 154, 164, 171, 197, 198, 204, 222, 344, 372, 427, 498, 580, 624, 666, 673, 674, 675, 681, 686, 689, 705, 714, 720, 723, 726, 727], "graphdef": [74, 148, 381, 426, 498, 564, 569, 677], "grappler": [75, 499, 667], "grappleroptim": [75, 499], "input_output_nam": [75, 499], "opt_cfg": [75, 499], "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 156, 166, 170, 188, 199, 245, 263, 265, 266, 268, 269, 288, 304, 315, 319, 368, 372, 377, 381, 449, 499, 541, 568, 569, 596, 598, 719], "leverag": [75, 151, 499, 622, 634, 636, 661, 665, 678, 695, 713, 717, 720, 726], "built": [75, 190, 213, 232, 233, 237, 242, 246, 247, 252, 254, 256, 257, 259, 260, 263, 268, 270, 275, 276, 280, 283, 285, 289, 290, 295, 297, 299, 300, 301, 302, 304, 348, 372, 375, 383, 427, 499, 587, 616, 634, 637, 658, 663, 675, 688, 692, 712, 717, 722, 725, 726, 728], "convert_add_to_biasadd": [76, 87, 111, 500, 511], "convert_layout": [76, 87, 111, 500, 511], "convert_leakyrelu": [76, 87, 111, 500, 511], "convert_nan_to_random": [76, 87, 111, 500, 511], "convert_placeholder_to_const": [76, 87, 111, 500, 511], "dilated_contract": [76, 87, 111, 500, 511], "dummy_biasadd": [76, 87, 111, 500, 511], "expanddims_optim": [76, 87, 111, 500, 511], "fetch_weight_from_reshap": [76, 87, 111, 500, 511], "fold_batch_norm": [76, 87, 111, 500, 511], "fold_const": [76, 87, 111, 500, 511], "fuse_biasadd_add": [76, 87, 111, 500, 511], "fuse_column_wise_mul": [76, 87, 111, 500, 511], "fuse_conv_with_math": [76, 87, 111, 500, 511], "fuse_decomposed_bn": [76, 87, 111, 500, 511], "fuse_decomposed_in": [76, 87, 111, 500, 511], "fuse_gelu": [76, 87, 111, 500, 511], "fuse_layer_norm": [76, 87, 111, 500, 511], "fuse_pad_with_conv": [76, 87, 111, 500, 511], "fuse_pad_with_fp32_conv": [76, 87, 111, 500, 511], "fuse_reshape_transpos": [76, 87, 111, 500, 511], "graph_cse_optim": [76, 87, 111, 500, 511], "grappler_pass": [76, 87, 111, 500, 511], "insert_print_nod": [76, 87, 111, 500, 511], "move_squeeze_after_relu": [76, 87, 111, 500, 511], "pre_optim": [76, 87, 111, 500, 511], "remove_training_nod": [76, 87, 111, 500, 511], "rename_batch_norm": [76, 87, 111, 500, 511], "split_shared_input": [76, 87, 111, 500, 511], "strip_equivalent_nod": [76, 87, 111, 148, 500, 511, 564], "strip_unused_nod": [76, 87, 111, 148, 500, 511, 564], "switch_optim": [76, 87, 111, 500, 511], "insert": [77, 105, 107, 109, 113, 146, 150, 168, 176, 501, 526, 528, 532, 562, 599, 633, 638, 657, 670, 675, 678, 714, 717, 719, 720, 723, 724], "print": [77, 157, 158, 202, 319, 372, 446, 501, 585, 627, 663, 674, 675, 697, 698, 714, 723, 726], "insertprintminmaxnod": [77, 501], "pre_node_nam": [77, 501], "post_node_nam": [77, 501], "pass": [77, 148, 150, 161, 163, 178, 186, 372, 397, 427, 501, 564, 571, 578, 579, 594, 600, 626, 627, 632, 633, 637, 654, 658, 661, 662, 663, 669, 674, 675, 696, 703, 714, 716, 717, 719, 723, 728], "move": [78, 150, 163, 502, 578, 633, 701, 716, 720, 721], "squeez": [78, 502, 633], "movesqueezeafterreluoptim": [78, 502], "match": [78, 102, 163, 202, 315, 316, 368, 369, 502, 578, 661, 696, 720], "pre": [79, 116, 164, 202, 234, 235, 246, 277, 278, 289, 373, 427, 503, 535, 580, 607, 616, 656, 658, 661, 662, 675, 683, 700, 714, 715, 717, 720, 724, 726], "entranc": [79, 195, 237, 503], "preoptim": [79, 503], "removetrainingnodesoptim": [80, 504], "protected_nod": [80, 504], "types_to_splic": [80, 504], "checknumer": [80, 504], "stopgradi": [80, 504], "renam": [81, 505, 721], "fusedbatchnorm": [81, 505], "fusedbatchnormv2": [81, 505], "renamebatchnormoptim": [81, 505], "splitsharedinputoptim": [82, 506], "equival": [83, 170, 507, 598, 636, 715, 720, 723], "stripequivalentnodesoptim": [83, 507], "output_node_nam": [83, 84, 131, 132, 136, 148, 507, 508, 550, 551, 555, 564], "same": [83, 141, 148, 151, 172, 180, 198, 216, 231, 246, 263, 289, 304, 315, 368, 452, 507, 564, 584, 587, 600, 627, 637, 639, 654, 657, 658, 661, 663, 667, 675, 679, 683, 688, 692, 714, 716, 717, 720, 723, 724, 725, 726], "unus": [84, 148, 508, 564], "stripunusednodesoptim": [84, 508], "input_node_nam": [84, 131, 136, 148, 508, 550, 555, 564], "switch": [85, 509, 678, 724], "switchoptim": [85, 509], "condit": [85, 246, 247, 248, 263, 289, 290, 291, 304, 350, 428, 430, 509, 658, 672, 725, 726], "graphrewriterbas": [86, 510], "abstract": [86, 187, 195, 263, 304, 305, 310, 347, 510, 637, 639, 669], "freeze_fake_qu": [87, 95, 111, 511, 519], "freeze_valu": [87, 95, 111, 511, 519], "freeze_value_without_calib": [87, 95, 111, 511, 519], "fuse_conv_redundant_dequant": [87, 95, 111, 511, 519], "fuse_conv_requant": [87, 95, 111, 511, 519], "fuse_matmul_redundant_dequant": [87, 95, 111, 511, 519], "fuse_matmul_requant": [87, 95, 111, 511, 519], "meta_op_optim": [87, 95, 111, 511, 519], "post_hostconst_convert": [87, 95, 111, 511, 519], "post_quantized_op_cs": [87, 95, 111, 511, 519], "rnn_convert": [87, 95, 111, 511, 519], "scale_propag": [87, 95, 111, 511, 519], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111, 511, 525], "merge_duplicated_qdq": [87, 106, 111, 511, 525], "share_qdq_y_pattern": [87, 106, 111, 511, 525], "freez": [88, 89, 90, 148, 512, 513, 514, 564, 678, 714], "fakequ": [88, 512], "freezefakequantopoptim": [88, 512], "follow": [88, 110, 180, 203, 248, 291, 312, 315, 365, 368, 512, 529, 631, 632, 633, 634, 637, 638, 639, 656, 657, 658, 661, 662, 663, 667, 671, 672, 674, 675, 676, 677, 678, 679, 680, 688, 692, 697, 699, 700, 703, 708, 713, 714, 716, 717, 720, 723, 724, 726], "freezevaluetransform": [89, 513], "max_min_data": [89, 90, 513, 514], "postfix": [89, 90, 513, 514], "tensor_data": [89, 513, 571, 627, 628], "th": [89, 90, 513, 514], "gpu": [89, 90, 97, 150, 163, 172, 230, 231, 513, 514, 521, 578, 600, 636, 654, 670, 675, 676, 680, 686, 695, 716, 717, 718], "freezevaluewithoutcalibtransform": [90, 514], "95": [90, 319, 372, 514, 674, 729], "quantizedconv": [91, 92, 515, 516], "quantizeddeconv": [91, 515], "redund": [91, 93, 515, 517], "fuseconvredundantdequantizetransform": [91, 515], "cpu": [91, 92, 93, 94, 150, 151, 157, 162, 163, 165, 171, 230, 231, 515, 516, 517, 518, 571, 578, 585, 600, 622, 627, 636, 638, 654, 655, 670, 675, 676, 678, 680, 686, 695, 703, 715, 716, 717, 718, 719, 720, 724], "_quantizedconv": [91, 515], "_quantizeddeconv": [91, 515], "successor": [91, 92, 93, 94, 515, 516, 517, 518], "requant": [92, 94, 516, 518, 724], "fuseconvrequantizetransform": [92, 516], "quantizedmatmul": [93, 94, 517, 518], "fusematmulredundantdequantizetransform": [93, 517], "_quantizedmatmul": [93, 94, 517, 518], "fusematmulrequantizedequantizetransform": [94, 518], "quantizedmatmulwithbiasanddequant": [94, 518], "fusematmulrequantizetransform": [94, 518], "fusematmulrequantizedequantizenewapitransform": [94, 518], "fusematmulrequantizenewapitransform": [94, 518], "newapi": [94, 518], "meta": [96, 520, 673, 715, 729], "metainfochangingmemopoptim": [96, 520], "metaop": [96, 520], "With": [96, 383, 520, 633, 637, 639, 657, 675, 683, 688, 692, 696, 702, 712, 714, 715, 722, 723, 726, 729], "better": [96, 230, 231, 234, 235, 277, 278, 326, 373, 427, 520, 616, 656, 662, 674, 676, 714, 715, 717, 720, 722, 723, 726], "perform": [96, 140, 150, 154, 178, 219, 230, 231, 246, 258, 259, 264, 289, 301, 310, 334, 339, 347, 354, 372, 383, 427, 432, 436, 449, 450, 520, 600, 632, 633, 634, 637, 638, 654, 658, 659, 660, 662, 664, 665, 670, 671, 674, 675, 676, 677, 678, 680, 684, 686, 689, 695, 701, 712, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 726, 728, 729], "hostconst": [97, 521], "posthostconstconvert": [97, 521], "just": [97, 236, 261, 263, 266, 268, 269, 271, 279, 304, 383, 521, 566, 634, 675, 685, 689, 695, 703, 713, 717, 723, 725, 726], "postcseoptim": [98, 522], "duplic": [98, 108, 351, 431, 522, 527], "quantizev2": [98, 522], "decreas": [98, 522, 700, 714], "size": [98, 150, 172, 180, 206, 207, 238, 239, 245, 248, 254, 259, 263, 281, 282, 288, 291, 297, 301, 304, 342, 381, 383, 390, 391, 393, 522, 569, 599, 627, 631, 638, 657, 658, 663, 666, 675, 695, 696, 712, 714, 717, 718, 720, 723, 725, 728, 729], "rnn": [99, 523], "quantizedrnnconvert": [99, 523], "calibration_data": [99, 107, 523, 526], "rnn_detail": [99, 523], "scalepropagationtransform": [100, 524], "direct": [100, 208, 342, 524, 714], "export": [101, 231, 311, 315, 364, 368, 636, 668, 681, 696, 698, 724, 727], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 231, 308, 309, 665], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 172, 599], "onnxopschema": 104, "domain": [104, 105, 230, 231, 714, 726], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 179, 210, 211, 216, 217, 225, 310, 315, 347, 368, 381, 421, 426, 569, 631, 633, 639, 655, 676, 688, 692, 695, 703, 714, 715, 723, 726], "get_max_supported_opset_vers": 104, "packag": [104, 637, 666, 671, 695, 696, 715, 721, 726], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 562, 632, 703, 704, 708, 709, 710, 726], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 171, 246, 247, 259, 263, 289, 290, 301, 304, 410, 411, 415, 564, 583, 638, 639, 725], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 202, 564], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 163, 251, 263, 294, 304, 343, 564, 578, 658, 719, 722], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 231, 308, 309, 665], "input_shap": [105, 250, 293, 566, 658], "input_dtyp": 105, "sometim": [105, 633, 660, 717], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 150, 154, 218, 262, 263, 303, 304, 312, 317, 345, 365, 370, 665, 672, 684, 706, 709, 710, 714, 715, 720, 723, 725, 729], "datatyp": [105, 171, 719, 726, 729], "save_protobuf": 105, "path": [105, 140, 148, 151, 164, 171, 202, 218, 222, 227, 246, 247, 248, 263, 289, 290, 291, 304, 305, 308, 309, 310, 321, 322, 323, 325, 334, 339, 343, 345, 347, 348, 361, 373, 381, 385, 388, 390, 391, 393, 396, 397, 404, 426, 427, 443, 449, 564, 569, 571, 580, 622, 624, 627, 633, 634, 637, 658, 660, 663, 669, 674, 675, 676, 677, 681, 684, 695, 698, 700, 703, 708, 709, 710, 713, 720, 725, 728], "as_text": 105, "save": [105, 148, 162, 163, 199, 222, 230, 231, 248, 291, 308, 309, 348, 381, 385, 427, 564, 569, 571, 578, 616, 617, 622, 627, 633, 637, 669, 675, 676, 677, 679, 683, 688, 692, 698, 703, 708, 709, 710, 713, 717, 718, 720, 723], "protobuf": [105, 381, 569, 698], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 696], "dest": 105, "equal": [105, 143, 148, 177, 446, 559, 571, 627, 714, 720], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 163, 248, 291, 319, 372, 578, 638, 664, 668, 670, 674, 686, 695, 701, 705, 714, 716, 723, 726], "df": 105, "initialize_name_count": 105, "avoid": [105, 163, 171, 172, 246, 289, 578, 584, 599, 633, 656, 724], "conflict": [105, 656, 666], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 263, 304, 725], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 150, 154, 163, 204, 230, 231, 578, 600, 632, 661, 664, 668, 678, 683, 714, 720, 721, 723, 726], "const_node_valu": 105, "graph_output": 105, "constant": [105, 309, 311, 351, 353, 359, 364, 431, 435, 441, 620, 656, 657, 667, 698, 725], "tf": [105, 116, 141, 148, 202, 222, 245, 246, 247, 248, 263, 288, 289, 290, 291, 304, 379, 381, 452, 469, 471, 535, 564, 568, 569, 570, 571, 656, 663, 671, 677, 715, 719, 725], "generategraphwithqdqpattern": [107, 526], "op_wise_config": [107, 131, 136, 526, 550, 555, 638], "quantized_nod": [107, 526], "llm_weight_minmax": [107, 526], "dq": [107, 109, 131, 526, 528, 550, 723], "pair": [107, 230, 231, 526, 638, 657, 675, 676, 721], "befor": [107, 109, 151, 157, 176, 194, 204, 209, 211, 216, 218, 220, 230, 231, 246, 289, 342, 344, 346, 526, 528, 585, 632, 639, 657, 658, 661, 662, 663, 666, 667, 671, 675, 690, 693, 699, 700, 717, 720, 722, 724, 726], "merg": [108, 238, 281, 361, 443, 527, 690, 693, 724, 726], "mergeduplicatedqdqoptim": [108, 527], "y": [109, 230, 231, 263, 304, 351, 431, 528, 656, 660, 666, 681, 723, 725], "shareqdqforitexypatternoptim": [109, 528], "break": [109, 528, 663, 675], "graphanalyz": [110, 529], "extend_engin": [110, 529], "analyz": [110, 202, 381, 529, 569, 722, 723, 724], "under": [110, 151, 230, 231, 248, 291, 404, 529, 571, 600, 615, 622, 626, 632, 634, 636, 658, 672, 674, 675, 678, 683, 684, 695, 703, 713, 714, 715, 718, 720, 724, 726], "singleton": [110, 529, 571, 627], "specifi": [110, 150, 163, 171, 178, 182, 222, 230, 231, 234, 235, 263, 264, 277, 278, 304, 310, 315, 319, 321, 322, 325, 334, 339, 347, 348, 368, 372, 373, 427, 446, 529, 578, 582, 583, 587, 616, 626, 627, 638, 639, 663, 667, 674, 675, 683, 697, 703, 707, 708, 709, 710, 712, 714, 716, 720, 725, 726, 728], "graphrewriterhelp": [110, 529], "encapsul": [110, 234, 235, 277, 278, 373, 427, 529, 616, 677], "quantize_lay": [111, 112, 114, 530, 531, 533], "fake_quant": [111, 112, 114, 530, 531, 533], "quantize_config": [111, 112, 114, 530, 531, 533, 638], "quantize_help": [111, 112, 114, 530, 531, 533], "quantize_wrapp": [111, 112, 114, 530, 531, 533], "fuse_qdq_bn": [111, 112, 130, 530, 531, 549], "fuse_qdq_concatv2": [111, 112, 130, 530, 531, 549], "fuse_qdq_conv": [111, 112, 130, 530, 531, 549], "fuse_qdq_deconv": [111, 112, 130, 530, 531, 549], "fuse_qdq_in": [111, 112, 130, 530, 531, 549], "fuse_qdq_matmul": [111, 112, 130, 530, 531, 549], "fuse_qdq_pool": [111, 112, 130, 530, 531, 549], "optimize_qdq": [111, 112, 130, 530, 531, 549], "optimize_lay": [112, 114, 117, 531, 533, 536], "quantize_layer_add": [112, 114, 117, 531, 533, 536], "quantize_layer_bas": [112, 114, 117, 531, 533, 536], "quantize_layer_bn": [112, 114, 117, 531, 533, 536], "fakequantizebas": [113, 532], "abc": [113, 317, 370, 532, 611, 637, 724, 726], "fakequant": [113, 532], "per_channel": [113, 532, 638, 639, 667, 717, 728], "8": [113, 150, 163, 172, 230, 231, 262, 303, 397, 532, 578, 599, 607, 633, 638, 655, 656, 667, 671, 702, 703, 714, 715, 720, 723, 726, 729], "channel_axi": [113, 174, 177, 532], "symmetr": [113, 150, 151, 390, 391, 393, 532, 622, 639, 717, 720, 725, 726], "narrow_rang": [113, 532], "quantizeconfig": [115, 116, 534, 535], "custom": [115, 150, 161, 171, 172, 178, 231, 348, 372, 383, 534, 579, 584, 599, 626, 654, 661, 662, 678, 701, 702, 703, 707, 709, 710, 714, 715, 720, 722], "There": [115, 348, 350, 428, 430, 534, 656, 660, 661, 667, 670, 675, 678, 700, 702, 703, 720, 723, 726, 728], "instanc": [115, 116, 178, 198, 230, 231, 234, 235, 264, 277, 278, 316, 317, 319, 322, 325, 328, 329, 331, 332, 333, 351, 363, 369, 370, 372, 373, 427, 431, 445, 534, 535, 600, 616, 624, 627, 631, 632, 633, 637, 654, 675, 680, 686, 720, 726, 728, 729], "global": [115, 204, 230, 231, 328, 329, 331, 332, 333, 342, 445, 534, 627, 633, 675, 714, 716, 726], "class": [116, 153, 161, 171, 199, 205, 212, 326, 373, 427, 471, 535, 579, 609, 633, 634, 638, 656, 657, 658, 661, 674, 675, 686, 712, 713, 717, 721, 724, 726, 728], "init_quantize_config": [116, 535], "quantize_recip": [116, 535], "begin": [116, 154, 210, 211, 216, 344, 535, 656, 657, 661, 662, 675, 714, 726], "process": [116, 140, 150, 158, 172, 178, 185, 204, 209, 210, 211, 218, 220, 222, 230, 231, 234, 235, 246, 247, 248, 259, 263, 264, 277, 278, 289, 290, 291, 301, 304, 342, 344, 346, 350, 351, 373, 427, 428, 430, 431, 449, 535, 582, 600, 616, 626, 627, 634, 637, 638, 639, 655, 657, 658, 661, 662, 663, 665, 675, 679, 700, 702, 703, 705, 713, 714, 717, 718, 720, 723, 724, 725, 728], "model_nam": [116, 230, 231, 535], "special": [116, 163, 202, 383, 535, 578, 633, 657, 674, 675, 712, 714, 720, 727], "decid": [116, 180, 230, 231, 313, 344, 366, 535, 637, 638, 675, 717, 721, 726], "qat_clone_funct": [116, 535], "leav": [116, 535, 689], "quantizewrapp": [116, 122, 535, 541], "wrapped_lay": [116, 198, 535], "config_quantizable_lay": [118, 537], "quantizelayeradd": [119, 538], "quantizelay": [120, 539], "quantizelayerbas": [120, 539], "quantizelayerbatchnorm": [121, 540], "quantizewrapperbas": [122, 541], "fusedbatchnormv3": [123, 133, 542, 552], "fusenodestartwithfusedbatchnormv3": [123, 133, 542, 552], "_quantizedfusedbatchnorm": [123, 542], "concatv2": [124, 134, 147, 543, 553, 563, 667], "fusenodestartwithconcatv2": [124, 134, 543, 553], "quantizedconcatv2": [124, 134, 543, 553], "fusenodestartwithconv2d": [125, 135, 544, 554], "conv2dbackpropinput": [126, 545], "conv3dbackpropinputv2": [126, 545], "fusenodestartwithdeconv2d": [126, 545], "fusedinstancenorm": [127, 546], "fusenodestartwithfusedinstancenorm": [127, 546], "batchmatmul": [128, 547], "batchmatmulv2": [128, 547], "fusenodestartwithmatmul": [128, 137, 547, 556], "avgpool": [129, 138, 548, 557, 667], "fusenodestartwithpool": [129, 138, 548, 557], "optimizeqdqgraph": [131, 550], "input_graph": [131, 136, 143, 422, 426, 550, 555, 559, 637], "op_wise_sequ": [131, 136, 550, 555], "quantizegraph": [132, 551], "quantizegraphbas": [132, 551], "quantizenodebas": [132, 551], "quantizegraphforintel": [136, 555], "common": [139, 161, 163, 194, 231, 261, 311, 321, 325, 326, 327, 364, 397, 399, 465, 467, 468, 469, 471, 558, 578, 579, 606, 607, 610, 619, 631, 656, 658, 662, 663, 665, 669, 671, 675, 717, 723], "herlper": [139, 558], "quantizegraphhelp": [139, 558], "sever": [139, 220, 263, 304, 346, 348, 558, 634, 660, 661, 662, 670, 675, 676, 688, 692, 703, 714, 716, 718, 723, 725, 726, 728], "staticmethod": [139, 558], "function": [139, 140, 161, 185, 210, 211, 216, 230, 231, 234, 235, 247, 277, 278, 290, 322, 325, 334, 339, 388, 449, 558, 579, 632, 633, 634, 637, 638, 639, 654, 657, 661, 662, 665, 669, 670, 671, 673, 674, 675, 676, 686, 696, 702, 703, 714, 717, 720, 721, 722, 723, 724, 726, 727], "smoothquantcalibr": [140, 449], "dataset": [140, 141, 150, 171, 172, 218, 234, 235, 236, 238, 239, 243, 244, 245, 257, 266, 277, 278, 279, 281, 282, 286, 287, 288, 300, 311, 315, 316, 317, 319, 348, 364, 368, 369, 370, 372, 373, 427, 449, 452, 566, 599, 616, 619, 634, 636, 637, 638, 657, 663, 668, 674, 675, 683, 697, 698, 708, 714, 717, 720, 721, 723, 726, 728, 729], "outlier": [140, 449, 638, 655, 660, 700, 720, 723], "smoothquantcalibrationllm": [140, 449], "model_path": [140, 148, 172, 449, 564, 585, 607, 660, 708], "temp_path": [140, 449], "weight_name_map": [140, 449], "llm": [140, 141, 150, 157, 217, 449, 452, 585, 636, 714, 715, 718, 720, 723], "eval_func": [140, 234, 235, 277, 278, 348, 351, 352, 354, 355, 356, 357, 373, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 446, 449, 616, 633, 657, 658, 660, 661, 662, 663, 675, 698, 717, 718, 719, 720, 726, 728], "temporari": [140, 171, 449, 627, 631], "store": [140, 195, 197, 199, 202, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 230, 231, 248, 291, 337, 344, 449, 669], "median": [140, 449], "autotrack": [140, 148, 449, 564], "smoothquantscal": [141, 452], "alpha": [141, 162, 166, 176, 197, 219, 399, 452, 469, 596, 656, 717, 726], "scales_per_op": [141, 399, 452, 469], "individu": [141, 204, 342, 421, 426, 452, 631, 703, 714, 723], "smoothquantscalerllm": [141, 452], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 308], "default_opset_vers": 142, "bia": [143, 230, 231, 559, 720, 724], "correct": [143, 177, 222, 230, 231, 315, 316, 317, 319, 343, 368, 369, 370, 372, 559, 631, 678], "biascorrect": [143, 559], "fp32_graph": [143, 559], "weight_empir": [143, 559], "Will": [143, 559, 661, 670], "our": [143, 171, 230, 231, 398, 559, 634, 636, 665, 675, 696, 697, 700, 722, 727], "task": [143, 246, 253, 289, 296, 319, 372, 559, 658, 661, 662, 665, 670, 674, 675, 698, 702, 705, 714, 718, 720, 723, 729], "close": [143, 177, 559, 655, 704], "w_int8": [143, 177, 559], "u": [143, 177, 559, 678, 697, 702], "w_fp32": [143, 177, 559], "varianc": [143, 177, 198, 559, 660], "differ": [143, 154, 173, 177, 179, 182, 188, 194, 213, 230, 231, 239, 248, 263, 265, 282, 291, 304, 310, 319, 325, 327, 336, 347, 372, 383, 559, 621, 631, 633, 634, 638, 657, 658, 660, 661, 663, 664, 669, 670, 674, 675, 677, 688, 692, 697, 700, 703, 712, 714, 717, 720, 723, 724, 725, 726], "wise": [143, 160, 162, 164, 172, 177, 230, 231, 351, 354, 391, 393, 431, 432, 436, 559, 577, 580, 597, 636, 638, 670, 700, 714, 720, 723, 724, 726, 727, 728], "minim": [143, 154, 177, 351, 431, 559, 638, 639, 655, 661, 664, 674, 675, 688, 692, 714, 717, 726], "scale_c": [143, 177, 559], "shift": [143, 177, 259, 301, 559, 696, 725], "notic": [143, 177, 264, 559, 672, 676, 698, 721], "first": [143, 150, 163, 171, 177, 179, 203, 228, 230, 231, 246, 289, 315, 361, 368, 432, 443, 559, 571, 578, 599, 627, 633, 634, 637, 638, 639, 658, 660, 671, 676, 680, 689, 690, 693, 696, 698, 699, 700, 716, 717, 719, 720, 722, 723, 724, 726, 728], "empir": [143, 177, 559], "solut": [143, 177, 559, 636, 637, 638, 666, 680, 684, 689, 715, 720, 721, 723, 726, 727], "don": [143, 177, 204, 230, 231, 559, 633, 701, 714, 726], "min": [143, 150, 172, 177, 195, 231, 399, 559, 571, 599, 627, 660, 698, 700, 714, 717, 720, 723, 725, 726], "graphtransform": [144, 560], "graphtransformbas": [144, 560], "input_pb": [144, 146, 147, 560, 562, 563], "log": [146, 178, 185, 202, 410, 411, 415, 562, 623, 633, 686, 708, 709, 710, 722, 724, 726], "insertlog": [146, 562], "node_name_list": [146, 562], "show_nam": [146, 562], "show_op": [146, 562], "first_n": [146, 562], "summar": [146, 562, 656, 661], "1024": [146, 248, 291, 562, 681], "dump_fp32": [146, 562], "rerang": [147, 563], "rerangequantizedconcat": [147, 563], "rerange_quant": [147, 563], "version1_lt_version2": [148, 571, 627], "version1": [148, 571, 627], "version2": [148, 571, 627], "version1_gt_version2": [148, 571, 627], "greater": [148, 571, 627, 708, 714, 726], "version1_eq_version2": [148, 571, 627], "version1_gte_version2": [148, 571, 627], "version1_lte_version2": [148, 571, 627], "disable_random": [148, 564, 571], "seed": [148, 150, 172, 186, 194, 230, 231, 327, 564, 571, 627, 675, 728], "disabl": [148, 230, 231, 564, 571, 631, 695, 700, 719, 720, 723], "read_graph": [148, 564], "in_graph": [148, 564], "in_graph_is_binari": [148, 564], "write_graph": [148, 564], "out_graph_def": [148, 564], "out_graph_fil": [148, 564], "write": [148, 255, 298, 564, 627, 663, 669, 675, 678, 724], "is_ckpt_format": [148, 564], "ckpt": [148, 373, 381, 427, 564, 569, 729], "folder": [148, 248, 253, 291, 296, 373, 427, 564, 626, 658, 683, 688, 692, 701, 708, 709, 710, 720, 724], "is_saved_model_format": [148, 564], "saved_model": [148, 321, 564, 718], "get_estimator_graph": 148, "estim": [148, 150, 319, 372, 381, 569, 726], "input_fn": [148, 381, 569], "get_tensor_by_nam": [148, 564], "try_cnt": [148, 564], "import": [148, 154, 178, 180, 195, 230, 231, 321, 373, 383, 427, 446, 564, 571, 616, 627, 633, 634, 636, 639, 654, 657, 658, 660, 661, 662, 663, 665, 668, 674, 675, 676, 677, 678, 682, 684, 697, 698, 706, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727], "scope": [148, 564, 632, 638, 675], "onc": [148, 163, 190, 220, 270, 346, 350, 428, 430, 564, 578, 638, 639, 657, 695, 701, 714, 715, 726, 729], "both": [148, 151, 180, 231, 564, 631, 634, 637, 662, 675, 679, 698, 700, 702, 714, 716, 717, 720, 723, 726], "compat": [148, 381, 564, 569, 632, 663, 677, 690, 693, 695, 714, 721], "v1": [148, 258, 259, 301, 316, 317, 319, 369, 370, 372, 381, 564, 569, 663, 665, 666, 674, 677, 699, 714, 721, 722, 723, 729], "suffix": [148, 564], "time": [148, 163, 180, 186, 198, 230, 231, 263, 304, 319, 351, 372, 383, 431, 564, 571, 578, 594, 627, 638, 657, 660, 663, 666, 675, 683, 685, 688, 692, 695, 696, 701, 704, 708, 709, 712, 714, 715, 717, 720, 722, 723, 724, 725, 726], "got": [148, 564, 638, 666, 724], "iterator_sess_run": [148, 564], "sess": [148, 381, 564, 569], "iter_op": [148, 564], "feed_dict": [148, 245, 288, 564], "output_tensor": [148, 381, 564, 569], "measur": [148, 264, 373, 564, 621, 634, 637, 654, 660, 661, 674, 675, 720, 724, 726, 729], "integr": [148, 188, 265, 564, 637, 675, 696, 697, 702, 720], "makeiter": [148, 564], "feed": [148, 245, 288, 564, 661, 714], "end": [148, 154, 209, 210, 211, 216, 230, 231, 246, 262, 263, 289, 303, 304, 344, 350, 428, 430, 564, 637, 638, 639, 661, 662, 667, 671, 675, 689, 705, 712, 714, 724, 725, 726], "predict": [148, 263, 268, 304, 312, 316, 317, 319, 365, 369, 370, 372, 427, 564, 634, 661, 674, 686, 720, 723, 724, 725], "pred": [148, 319, 372, 564, 674], "collate_tf_pr": [148, 564], "collat": [148, 171, 564], "get_input_output_node_nam": [148, 564], "fix_ref_type_of_graph_def": [148, 564], "fix": [148, 214, 216, 246, 289, 344, 564, 657, 658, 682, 714, 717, 720, 726], "strip_unused_lib": [148, 564], "offici": [148, 312, 316, 317, 365, 369, 370, 564, 631, 723], "r1": [148, 564], "15": [148, 564, 667, 671, 709], "branch": [148, 564, 632], "get_graph_def": [148, 564], "auto_input_output": [148, 564], "get_model_input_shap": [148, 564], "get_tensor_val_from_graph_nod": [148, 564], "graph_node_name_map": [148, 564], "kei": [148, 150, 158, 163, 164, 168, 202, 213, 222, 228, 230, 231, 326, 343, 381, 446, 564, 569, 571, 578, 580, 599, 617, 619, 627, 636, 638, 697, 698, 704, 715, 720, 724, 726], "val": [148, 222, 248, 251, 291, 294, 343, 564, 660, 675, 700], "tensor_v": [148, 564], "int8_node_name_revers": [148, 564], "revers": [148, 564, 698], "tf_diagnosis_help": [148, 564], "fp32_model": [148, 158, 171, 309, 564, 627, 637, 718, 720], "quan_model": [148, 564], "save_path": [148, 308, 309, 564, 637, 677], "diagnosi": [148, 230, 231, 564, 675, 698, 699, 700, 715, 721, 727], "generate_feed_dict": [148, 564], "input_tensor": [148, 198, 381, 564, 569], "get_weight_from_input_tensor": [148, 564], "input_tensor_nam": [148, 381, 564, 569], "associ": [148, 163, 315, 368, 564, 578], "search": [148, 157, 172, 194, 195, 202, 216, 227, 231, 234, 235, 277, 278, 310, 312, 322, 325, 326, 327, 347, 351, 365, 390, 431, 564, 585, 597, 599, 627, 636, 656, 670, 674, 678, 679, 689, 714, 715, 720, 723, 724, 726, 727], "look": [148, 213, 564, 637, 639, 667, 674, 697, 698, 700, 723, 728], "sq_weight_tensor": [148, 564], "sq_weights_nod": [148, 564], "two": [148, 158, 163, 178, 203, 208, 215, 220, 248, 253, 264, 291, 296, 315, 342, 346, 348, 355, 368, 437, 564, 578, 627, 632, 633, 634, 656, 657, 658, 661, 663, 665, 667, 675, 676, 702, 703, 705, 714, 717, 719, 720, 722, 723, 726, 728], "apply_inlin": [148, 564], "func": [148, 171, 564, 599, 627, 717, 728], "inlin": [148, 564, 678, 683, 686], "definit": [148, 153, 166, 239, 244, 282, 287, 564, 596, 609], "concret": [148, 564, 726], "new_graph_def": [148, 564], "construct_function_from_graph_def": [148, 564], "frozen_func": [148, 564], "rebuild": [148, 564, 679, 688, 692], "reconstruct": [148, 564, 715], "new_func": [148, 564], "parse_saved_model": [148, 564], "output_tensor_nam": [148, 381, 564, 569], "_saved_model": [148, 564], "load": [148, 161, 163, 164, 246, 262, 263, 289, 303, 304, 373, 381, 427, 564, 569, 571, 576, 577, 579, 580, 626, 627, 638, 657, 688, 692, 696, 698, 716, 717, 718, 723], "reconstruct_saved_model": [148, 564], "trackabl": [148, 564], "destin": [148, 307, 321, 564], "quant_weight_asym": 150, "v": [150, 154, 686, 695, 714, 726, 728], "min_scal": 150, "max_scal": 150, "asymmetr": [150, 639, 717, 720, 726], "e": [150, 163, 204, 230, 231, 578, 600, 631, 632, 661, 664, 668, 678, 683, 684, 688, 692, 714, 720, 723, 726], "perturb": 150, "minimum": [150, 204, 230, 231, 639, 655, 660, 675, 686, 714, 723, 726], "quant_weight_sym": 150, "quant_weight_actor": 150, "quant_weight": [150, 172], "hand": [150, 634], "issu": [150, 631, 632, 635, 636, 671, 698, 700, 717, 724], "quant_weight_w_scal": [150, 172, 599], "round_st": 150, "torch": [150, 151, 153, 154, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 171, 172, 176, 199, 202, 203, 205, 213, 227, 230, 231, 309, 373, 427, 622, 626, 633, 636, 639, 640, 661, 663, 665, 675, 676, 677, 678, 683, 686, 698, 717, 720, 723, 724], "straight": 150, "through": [150, 158, 234, 235, 277, 278, 372, 373, 427, 636, 654, 667, 669, 670, 674, 681, 702, 712, 713, 714, 716, 717, 720], "omniqu": 150, "saveinput": 150, "seqlen": [150, 172], "256": [150, 253, 259, 296, 301, 607, 658, 663, 675, 725], "block_nam": 150, "cach": [150, 246, 289, 600, 666, 717, 720], "get_modul": [150, 164, 168, 580, 599], "nn": [150, 153, 157, 164, 166, 168, 171, 172, 202, 203, 213, 225, 230, 231, 309, 373, 427, 580, 583, 584, 585, 596, 599, 600, 605, 606, 609, 610, 615, 622, 626, 633, 661, 675, 677, 720, 723, 724], "set_modul": [150, 168, 171, 599, 615], "new_modul": [150, 164, 168, 171, 580, 599, 615], "get_scale_shap": 150, "wrapper_block": 150, "enable_minmax_tun": [150, 172], "conv1d": [150, 157, 225, 585, 639], "indic": [150, 163, 179, 180, 187, 198, 230, 231, 239, 244, 246, 282, 287, 289, 305, 315, 326, 368, 390, 391, 393, 578, 611, 633, 657, 666, 698, 703, 724], "unwrapper_block": 150, "unwrap": 150, "wrapperlinear": 150, "wrappertransformerconv1d": 150, "sampling_input": 150, "input_id": [150, 246, 263, 289, 304, 675], "input_oth": 150, "length": [150, 172, 213, 230, 231, 246, 263, 289, 304, 315, 368, 636, 658, 674, 715, 717, 720, 725], "id": [150, 178, 262, 264, 303, 312, 314, 315, 316, 317, 365, 367, 368, 369, 370, 674, 703, 704, 708, 709, 710, 722, 726], "current_input_id": 150, "current_input_oth": 150, "move_input_to_devic": 150, "check_is_cpu": 150, "otherwis": [150, 163, 248, 263, 291, 304, 578, 627, 631, 638, 658, 690, 693, 716, 720, 725], "block_forward": 150, "amp_dtyp": 150, "automat": [150, 172, 200, 202, 203, 230, 231, 248, 251, 258, 259, 291, 294, 301, 310, 320, 347, 633, 636, 654, 658, 670, 675, 676, 678, 680, 683, 684, 686, 688, 689, 690, 692, 693, 695, 702, 705, 713, 714, 717, 723, 725, 726], "mix": [150, 156, 165, 172, 230, 231, 349, 361, 373, 429, 443, 600, 636, 637, 644, 670, 678, 684, 685, 686, 727], "precis": [150, 156, 165, 172, 230, 231, 234, 235, 277, 278, 310, 317, 319, 320, 347, 349, 361, 370, 372, 373, 383, 429, 432, 443, 455, 600, 627, 636, 637, 638, 644, 654, 655, 662, 663, 667, 670, 678, 684, 685, 686, 715, 716, 717, 720, 723, 726, 727], "collect_round_v": 150, "collect_minmax_scal": 150, "get_batch_dim": 150, "posit": [150, 180, 198, 263, 304, 610, 631, 674, 678, 703, 708, 709, 710], "dim": [150, 263, 304, 723, 725], "wrappermultiblock": 150, "module_list": 150, "act": [150, 222, 244, 287, 631], "singl": [150, 180, 197, 220, 230, 231, 239, 246, 263, 282, 289, 304, 315, 344, 346, 368, 372, 397, 427, 471, 633, 658, 660, 671, 701, 714, 718, 723], "get_block_nam": 150, "network": [150, 158, 197, 204, 205, 344, 434, 600, 634, 655, 661, 662, 665, 675, 697, 715, 717, 723, 726], "get_tokenizer_funct": 150, "token": [150, 172, 246, 257, 260, 263, 289, 300, 302, 304, 311, 312, 313, 364, 365, 366, 622, 658, 674, 675, 697, 698, 720, 722, 723, 725, 726], "truncat": [150, 246, 263, 289, 304, 658, 725], "field": [150, 180, 230, 231, 248, 291, 315, 368, 633, 637, 639, 663, 675, 722, 726, 728], "get_dataload": 150, "data_nam": 150, "neelnanda": [150, 172], "pile": [150, 172], "10k": [150, 172, 664, 668], "42": [150, 172, 194, 231, 327, 729], "test": [150, 178, 230, 231, 263, 304, 632, 636, 660, 671, 703, 708, 729], "shuffl": [150, 236, 238, 243, 245, 266, 279, 281, 286, 288, 566, 657, 675, 717], "enable_full_rang": [150, 151, 155, 172, 599, 622, 718, 720], "cuda": [150, 163, 172, 222, 578, 600, 611, 676, 678, 680, 714, 717], "lr_schedul": [150, 172, 675, 714], "dataset_nam": [150, 172, 699], "dataset_split": [150, 172], "use_quant_input": [150, 172], "lr": [150, 154, 172, 230, 231, 661, 663, 675], "005": [150, 172, 720], "minmax_lr": [150, 172], "low_gpu_mem_usag": [150, 172], "200": [150, 172, 262, 303, 633, 704, 726], "512": [150, 172], "sampler": [150, 172, 180, 236, 238, 240, 243, 245, 266, 279, 281, 283, 286, 288, 300, 311, 360, 442, 566, 657, 663], "rand": [150, 172, 678, 723], "n_block": [150, 172, 584, 720], "gradient_accumulate_step": [150, 172], "not_use_ms": 150, "dynamic_max_gap": [150, 172], "data_typ": [150, 155, 172, 363, 445, 584], "signround": 150, "advanc": [150, 158, 230, 231, 631, 636, 638, 644, 673, 714, 717, 720, 728], "cheng": 150, "wenhua": 150, "et": [150, 154, 158, 655, 720, 723], "al": [150, 154, 158, 655, 720, 723], "via": [150, 310, 334, 339, 347, 631, 636, 663, 670, 675, 678, 695, 714, 715], "sign": [150, 198, 363, 445, 632, 636, 639, 655, 697, 715, 717, 720, 722], "gradient": [150, 154, 172, 197, 328, 636, 670, 675, 714, 715, 729], "descent": [150, 154, 202, 636, 715], "arxiv": [150, 157, 197, 198, 216, 217, 224, 344, 585, 607, 636, 655, 714, 715, 720, 723], "preprint": [150, 655, 714, 720, 723], "2309": 150, "05516": 150, "2023": [150, 636, 710, 714, 720, 723, 729], "pytorch": [150, 172, 188, 190, 191, 199, 202, 205, 208, 209, 212, 217, 218, 225, 230, 231, 245, 246, 248, 251, 255, 263, 265, 270, 272, 288, 289, 291, 294, 298, 304, 309, 310, 319, 320, 340, 342, 345, 347, 355, 364, 372, 373, 382, 427, 437, 620, 627, 632, 633, 634, 636, 637, 638, 639, 655, 656, 657, 661, 662, 664, 667, 670, 671, 673, 675, 676, 677, 678, 680, 683, 684, 685, 686, 695, 697, 706, 709, 710, 714, 715, 716, 720, 721, 723, 726, 728], "empti": [150, 164, 172, 180, 230, 231, 580, 587, 681, 718], "layer1": [150, 172, 202, 230, 231, 675, 714, 717], "layer_nam": [150, 172, 226, 231, 714], "rang": [150, 151, 172, 249, 250, 263, 292, 293, 304, 390, 404, 446, 566, 584, 597, 599, 616, 622, 636, 637, 639, 655, 658, 660, 661, 662, 663, 675, 698, 700, 713, 714, 717, 720, 723, 725], "learn": [150, 154, 172, 636, 637, 638, 657, 658, 665, 669, 670, 671, 675, 676, 678, 680, 683, 684, 686, 689, 690, 693, 695, 714, 715, 717, 723, 724, 726, 727], "rate": [150, 154, 172, 675, 714, 717], "schedul": [150, 172, 196, 199, 209, 210, 211, 216, 217, 219, 230, 231, 311, 340, 344, 364, 675, 702, 703, 705, 713], "futur": [150, 172, 176, 234, 235, 266, 277, 278, 670, 673, 675, 686, 708, 709, 710, 727], "accumul": [150, 172, 360, 442, 726], "step": [150, 154, 172, 197, 208, 209, 210, 211, 215, 216, 220, 230, 231, 342, 344, 346, 616, 638, 639, 660, 661, 662, 663, 675, 690, 693, 695, 708, 709, 710, 713, 714, 716, 719, 720, 722, 723, 724, 726], "squar": [150, 172, 319, 354, 372, 436, 660, 674, 700, 726], "gap": [150, 172, 660, 677], "addit": [150, 171, 172, 231, 616, 638, 639, 661, 689, 697, 703, 720, 721, 726], "keyword": [150, 163, 172, 231, 578], "argument": [150, 163, 172, 231, 446, 578, 587, 610, 634, 660, 699, 700, 703, 706, 708, 709, 710, 720], "autooptround": 150, "adamw": [150, 190, 270], "autoadamround": 150, "export_compressed_model": [151, 585, 597, 607, 622, 720], "compression_dtyp": [151, 622, 720], "int32": [151, 172, 584, 597, 622, 658, 720], "compression_dim": [151, 622, 720], "scale_dtyp": [151, 172, 622, 720], "float32": [151, 249, 250, 263, 292, 293, 304, 315, 368, 566, 622, 637, 654, 658, 675, 717, 720, 723, 725], "use_optimum_format": [151, 622, 720], "weightonlylinear": [151, 720], "json": [151, 171, 247, 263, 290, 304, 626, 658, 677, 696, 703, 704, 708, 709, 710, 720, 725], "compress": [151, 157, 311, 334, 339, 364, 383, 585, 616, 622, 629, 636, 644, 661, 670, 675, 695, 697, 712, 713, 714, 715, 717, 723, 727, 729], "comoress": [151, 622], "select": [151, 172, 219, 222, 231, 246, 289, 597, 599, 622, 633, 634, 655, 670, 671, 695, 714, 717, 720, 724, 726], "choos": [151, 172, 248, 291, 584, 597, 599, 622, 670, 683, 715, 721, 723, 726, 728], "popular": [151, 311, 364, 629, 636, 637, 638, 655, 661, 664, 665, 668, 673, 675, 714, 717, 720, 726, 727], "huggingfac": [151, 202, 213, 246, 289, 622, 658, 664, 668, 683, 684, 685, 686, 706, 707, 709, 710, 723, 729], "why": [151, 723, 724], "g_idx": 151, "instead": [151, 154, 228, 231, 245, 288, 627, 681, 683, 686, 701, 714, 720], "record": [151, 158, 171, 188, 191, 246, 247, 248, 254, 265, 272, 289, 290, 291, 297, 599, 627, 658, 700, 720, 722, 724, 726], "order": [151, 162, 171, 180, 198, 312, 313, 348, 351, 354, 363, 365, 366, 391, 431, 436, 445, 633, 660, 674, 698, 716, 720, 723, 724, 726], "packed_weight": 151, "qweight": 151, "5": [151, 162, 176, 180, 188, 198, 230, 231, 250, 259, 265, 293, 301, 319, 372, 397, 399, 427, 469, 637, 658, 665, 667, 671, 674, 675, 700, 705, 708, 709, 714, 716, 717, 720, 723, 725, 726, 728, 729], "alwai": [151, 180, 268, 315, 368, 372, 427, 660, 674, 675, 700, 720], "even": [151, 718, 720, 723], "modul": [153, 159, 160, 199, 205, 212, 324, 330, 340, 341, 577, 595, 608, 633, 656, 657, 661, 670, 674, 675, 677, 714, 716, 719, 720, 724, 727], "sgd": [154, 190, 230, 231, 270, 661, 675, 716, 728], "param": [154, 171, 178, 182, 190, 236, 264, 270, 279, 319, 351, 372, 431, 566, 627, 637, 677, 726], "requir": [154, 171, 172, 230, 231, 237, 348, 381, 426, 569, 584, 599, 600, 633, 637, 638, 654, 655, 657, 660, 662, 663, 667, 675, 676, 677, 679, 689, 695, 697, 702, 703, 706, 709, 710, 714, 717, 720, 721, 722, 723, 724, 726, 728], "momentum": [154, 197, 344, 670, 675, 714, 728], "weight_decai": [154, 195, 675, 728], "nesterov": [154, 675, 728], "maxim": [154, 675, 714, 726], "foreach": 154, "differenti": 154, "stochast": 154, "align": [154, 263, 304, 631, 720, 725], "rule": [154, 660, 678, 714], "110mm": 154, "4pt": 154, "textbf": 154, "gamma": 154, "theta_0": 154, "f": [154, 163, 199, 578, 656, 661, 663, 717, 720, 723], "theta": 154, "lambda": [154, 163, 578, 718], "decai": 154, "hspace": 154, "13mm": 154, "mu": [154, 660], "tau": 154, "textit": 154, "ex": 154, "ldot": 154, "5mm": 154, "g_t": 154, "leftarrow": 154, "nabla_": 154, "f_t": 154, "theta_": 154, "neq": 154, "10mm": 154, "15mm": 154, "_t": 154, "_": [154, 234, 235, 277, 278, 427, 633, 634, 636, 637, 638, 655, 660, 661, 663, 665, 667, 675, 676, 677, 678, 684, 688, 690, 692, 693, 700, 703, 704, 712, 714, 717, 720, 721, 722, 723, 724, 726, 728], "g_": 154, "theta_t": 154, "bf": 154, "formula": [154, 714, 723], "On": [154, 717, 729], "deep": [154, 228, 571, 636, 637, 638, 657, 670, 671, 675, 676, 678, 680, 683, 684, 686, 689, 695, 715, 717, 726, 727, 729], "l2": [154, 231, 714], "penalti": [154, 312, 313, 365, 366, 674], "xdoctest": [154, 163, 578], "skip": [154, 163, 578, 724, 726], "9": [154, 197, 230, 231, 633, 671, 675, 714, 716, 723, 726, 728, 729], "zero_grad": [154, 663, 675, 714], "loss_fn": 154, "backward": [154, 600, 616, 661, 662, 663, 675, 713, 714, 717, 721], "subtli": 154, "sutskev": 154, "some": [154, 200, 202, 230, 231, 246, 289, 343, 638, 639, 656, 658, 660, 665, 671, 674, 675, 697, 698, 699, 700, 703, 712, 714, 717, 719, 720, 723, 724, 726, 727, 729], "written": [154, 675], "v_": 154, "p_": 154, "denot": [154, 723], "veloc": 154, "respect": [154, 631, 667, 714, 723, 728], "contrast": [154, 204, 342, 725], "emploi": 154, "form": [154, 317, 370, 660, 661, 695], "analog": 154, "modifi": [154, 213, 248, 291, 426, 445, 633, 639, 663, 667, 699, 700, 714, 728], "d_p_list": 154, "momentum_buffer_list": 154, "has_sparse_grad": 154, "see": [154, 161, 198, 224, 263, 304, 312, 365, 579, 600, 631, 632, 633, 635, 656, 672, 675, 688, 689, 692, 695, 696, 700, 701, 720, 723, 724, 726], "actawareweightqu": [155, 584], "example_input": [155, 165, 168, 170, 171, 172, 230, 231, 309, 582, 583, 584, 598, 599, 610, 626, 665], "algo": [155, 182, 385, 454, 455, 584, 619], "bf16modulewrapp": 156, "bf16modul": 156, "mixed_precision_model": 156, "bf16_symbolic_trac": 156, "fx_sub_module_list": 156, "trace": [156, 158, 169, 171, 202, 230, 231, 309, 434, 582, 583, 610, 633, 685, 726], "_description_": [156, 385], "is_leaf": [157, 585], "judg": [157, 585], "trace_gptq_target_block": [157, 585], "module_typ": [157, 585], "modulelist": [157, 585], "sequenti": [157, 180, 244, 287, 348, 350, 428, 430, 585, 726], "stack": [157, 585], "structur": [157, 203, 214, 215, 230, 231, 344, 362, 444, 585, 627, 670, 694, 696, 699, 708, 714, 715, 717, 724, 727, 729], "critic": [157, 213, 585, 631], "gptq_related_block": [157, 585], "embed": [157, 171, 585, 655, 714], "transformers_pr": [157, 585], "todo": [157, 180, 182, 246, 249, 289, 292, 315, 361, 368, 443, 566, 585], "transformers_nam": [157, 585], "find_lay": [157, 225, 585], "find_layers_nam": [157, 585], "log_quantizable_layers_per_transform": [157, 585], "transformer_block": [157, 585], "maxq": [157, 585], "gptquantiz": [157, 585], "nsampl": [157, 172, 224, 585, 720], "use_max_length": [157, 172, 585, 720], "pad_max_length": [157, 172, 720], "layer_wis": [157, 172, 576, 626, 718], "pretrain": [157, 585, 622, 678, 684], "url": [157, 248, 291, 585, 632, 672, 706, 707, 714], "org": [157, 197, 198, 216, 217, 224, 315, 344, 368, 585, 607, 633, 660, 671, 690, 693, 714], "2210": [157, 585, 607, 720], "17323": [157, 585, 607, 720], "node_collector": 158, "hook": [158, 187, 191, 213, 272, 273, 334, 339, 619, 661, 662, 675, 714, 723, 724], "hessiantrac": 158, "q_model": [158, 162, 231, 321, 427, 467, 471, 583, 633, 636, 657, 658, 660, 663, 665, 668, 669, 674, 675, 677, 697, 698, 717, 718, 719, 720], "criterion": [158, 180, 187, 189, 190, 196, 197, 204, 209, 210, 211, 213, 216, 217, 221, 230, 231, 267, 270, 311, 364, 661, 662, 675, 714, 717, 723, 726, 728], "yao": 158, "zhewei": 158, "pyhessian": 158, "len": [158, 231, 263, 304, 658, 663, 725], "2020": 158, "ieee": [158, 676, 723], "intern": [158, 244, 287, 361, 443, 657, 658, 674, 714], "confer": [158, 714, 723], "big": [158, 660, 720], "dong": 158, "zhen": 158, "hawq": [158, 434, 726], "v2": [158, 434, 657, 663, 665, 666, 671, 684, 721, 723, 726, 727, 729], "system": [158, 163, 178, 264, 578, 627, 654, 681, 714, 729], "33": [158, 729], "18518": 158, "18529": 158, "openvinotoolkit": 158, "nncf": 158, "develop": [158, 182, 383, 632, 633, 656, 671, 675, 676, 678, 684, 695, 701, 714, 715, 719, 722], "hessian_trac": 158, "compare_weight": 158, "float_dict": 158, "ani": [158, 163, 182, 315, 317, 360, 368, 370, 421, 426, 442, 446, 578, 600, 610, 611, 624, 627, 631, 636, 639, 656, 663, 678, 683, 696, 697, 701, 702, 714, 722, 726], "quantized_dict": 158, "compar": [158, 319, 372, 627, 662, 674, 698, 714, 717, 720, 722, 724, 726], "being": [158, 315, 368, 639, 703], "wt_compare_dict": 158, "float_model": 158, "state_dict": [158, 663, 720, 724], "qmodel": 158, "compute_error": 158, "state": [158, 203, 600, 639, 681, 714], "weight_dict": 158, "hawq_top": 158, "enable_act": 158, "portabl": [161, 579], "serial": [161, 163, 578, 579], "copyreg": [161, 579], "mechan": [161, 197, 579, 714, 722, 727], "pickler": [161, 579], "pickletool": [161, 579], "comment": [161, 579, 631, 638, 658, 674, 675, 720, 725], "unpickl": [161, 163, 578, 579], "misc": [161, 579, 672], "format_vers": [161, 579], "compatible_format": [161, 579], "except": [161, 163, 446, 578, 579, 627, 656, 701, 717, 718], "pickleerror": [161, 579], "pickl": [161, 163, 578, 579], "picklingerror": [161, 579], "unpicklingerror": [161, 579], "problem": [161, 246, 289, 319, 372, 579, 674, 676, 696], "secur": [161, 579, 636, 697, 715, 730], "violat": [161, 579], "also": [161, 203, 245, 248, 263, 288, 291, 304, 312, 365, 372, 383, 427, 579, 600, 632, 634, 637, 638, 639, 657, 660, 664, 668, 670, 674, 675, 678, 683, 688, 689, 692, 695, 696, 697, 700, 701, 712, 714, 715, 717, 719, 720, 723, 726], "includ": [161, 188, 197, 202, 204, 219, 221, 230, 231, 246, 248, 255, 263, 265, 289, 291, 298, 304, 310, 320, 342, 347, 446, 579, 600, 627, 631, 637, 638, 639, 657, 658, 660, 671, 672, 673, 674, 675, 678, 681, 684, 689, 701, 705, 708, 709, 710, 714, 717, 719, 720, 724, 726], "necessarili": [161, 579], "limit": [161, 195, 351, 431, 579, 627, 636, 660, 661, 673, 717, 720, 721, 724], "attributeerror": [161, 446, 579], "eoferror": [161, 579], "importerror": [161, 579, 666], "indexerror": [161, 579], "layerwisequ": 162, "pretrained_model_name_or_path": [162, 164, 580], "op_cfg": 162, "output_dir": [162, 622, 675, 683, 684, 699, 700, 706, 709, 710], "memomeri": 162, "file_lik": [163, 578], "map_loc": [163, 578], "pickle_modul": [163, 199, 578], "weights_onli": [163, 578], "pickle_load_arg": [163, 578], "facil": [163, 578], "treat": [163, 578, 657], "storag": [163, 578, 636, 668, 674, 697, 700, 720, 723], "thei": [163, 264, 446, 578, 631, 656, 661, 667, 675, 683, 698, 701, 712], "deseri": [163, 578], "were": [163, 319, 372, 578, 681, 714], "fail": [163, 578, 633, 657, 665, 704], "becaus": [163, 180, 208, 213, 263, 304, 342, 578, 633, 700, 717, 723, 725, 726], "doesn": [163, 263, 304, 578, 637, 663, 675, 676, 696, 728], "certain": [163, 225, 578, 722], "howev": [163, 578, 701, 714, 720, 723], "altern": [163, 230, 231, 427, 578], "callabl": [163, 230, 231, 317, 370, 385, 397, 450, 467, 468, 471, 578, 605, 610, 611, 616, 656, 657], "locat": [163, 173, 222, 263, 304, 578, 663, 681, 688, 692, 695, 703, 717, 721, 725, 728], "resid": [163, 578], "tag": [163, 381, 569, 578, 723, 724], "wa": [163, 230, 231, 578, 637, 675, 700, 701, 704, 715, 726], "builtin": [163, 578, 663], "device_id": [163, 578], "either": [163, 231, 315, 368, 578, 679, 683, 703, 713, 716, 717], "final": [163, 202, 209, 222, 344, 578, 638, 675, 681, 712, 714, 717, 721, 726], "alreadi": [163, 178, 248, 262, 264, 291, 303, 578, 637, 658, 670, 690, 693, 697, 706, 726], "right": [163, 259, 301, 315, 368, 578, 631, 632, 633, 695, 701, 723, 725], "fall": [163, 171, 578], "back": [163, 171, 263, 269, 304, 578, 660, 695, 701], "behavior": [163, 578, 631, 637, 638, 639, 667, 677, 720, 724, 726, 728], "wasn": [163, 578], "appear": [163, 578, 631, 689, 695, 697], "ones": [163, 315, 368, 578, 714], "put": [163, 248, 291, 578, 658, 661], "user": [163, 178, 190, 202, 214, 222, 230, 231, 234, 235, 248, 251, 255, 263, 264, 270, 277, 278, 291, 294, 298, 304, 310, 334, 339, 345, 347, 348, 372, 373, 383, 427, 432, 445, 578, 583, 616, 627, 633, 634, 636, 637, 638, 639, 644, 654, 656, 657, 661, 662, 665, 667, 670, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 689, 695, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 717, 718, 719, 721, 723, 724, 725, 726, 730], "register_packag": [163, 578], "readlin": [163, 578], "tell": [163, 372, 427, 578, 716], "seek": [163, 578, 720], "o": [163, 446, 578, 656, 671, 680, 698], "pathlik": [163, 578], "metadata": [163, 578], "primit": [163, 578], "unless": [163, 578, 667], "implicitli": [163, 182, 578], "known": [163, 266, 351, 431, 578, 675, 714, 717, 724, 726], "insecur": [163, 578, 697], "possibl": [163, 264, 578, 600, 660, 697, 713, 714, 718, 719, 726], "construct": [163, 246, 249, 250, 253, 261, 266, 268, 269, 271, 289, 292, 293, 296, 372, 377, 381, 445, 566, 568, 569, 578, 619, 631, 638, 639, 658, 663, 714, 726], "malici": [163, 578], "arbitrari": [163, 578, 675, 713], "code": [163, 202, 234, 235, 264, 277, 278, 321, 345, 348, 427, 578, 616, 633, 636, 637, 638, 639, 658, 661, 662, 663, 669, 670, 672, 674, 678, 680, 682, 683, 684, 686, 689, 695, 699, 700, 702, 703, 704, 712, 713, 714, 715, 716, 717, 722, 723, 724, 725], "never": [163, 578, 726], "could": [163, 168, 176, 204, 234, 235, 248, 277, 278, 291, 348, 373, 427, 578, 616, 631, 633, 662, 675, 713, 714, 717, 720, 723, 727], "come": [163, 578, 673, 726], "untrust": [163, 578], "unsaf": [163, 578], "tamper": [163, 578], "trust": [163, 578, 660, 697], "load_state_dict": [163, 578], "ram": [163, 578], "surg": [163, 578], "checkpoint": [163, 381, 569, 578, 626, 677], "By": [163, 202, 230, 231, 312, 365, 578, 638, 639, 674, 677, 688, 689, 692, 714, 715, 720, 726], "decod": [163, 258, 259, 301, 312, 365, 578, 674, 725], "byte": [163, 578], "utf": [163, 262, 303, 578], "unicodedecodeerror": [163, 578], "ascii": [163, 578], "codec": [163, 578], "0x": [163, 578], "incorrect": [163, 578], "extra": [163, 317, 370, 578, 675, 720], "encod": [163, 315, 368, 578, 698, 725], "latin1": [163, 578], "them": [163, 202, 246, 289, 578, 633, 639, 657, 660, 665, 667, 669, 698, 701, 713, 714, 720, 726], "keep": [163, 213, 222, 343, 432, 578, 633, 637, 656, 694, 695, 721], "later": [163, 168, 176, 578, 656, 702, 703, 724], "byte_arrai": [163, 578], "undefin": [163, 222, 343, 578], "filepath": [163, 578, 627, 656], "pt": [163, 578, 626, 671, 677, 699, 715, 717, 719, 720], "onto": [163, 578], "loc": [163, 578], "bytesio": [163, 578], "open": [163, 267, 311, 364, 578, 619, 629, 631, 636, 665, 666, 675, 690, 693, 696, 697, 701, 702, 703, 715], "rb": [163, 578], "buffer": [163, 578], "get_children": [164, 580], "get_named_children": [164, 580], "dowload_hf_model": [164, 580], "repo_id": [164, 580], "cache_dir": [164, 580], "repo_typ": [164, 580], "revis": [164, 580], "download": [164, 248, 291, 580, 658, 660, 671, 700, 706, 721], "hug": [164, 580, 636, 702, 715], "face": [164, 580, 631, 636, 644, 678, 682, 702, 704, 715, 721, 729], "hf": [164, 580, 673, 723, 729], "hub": [164, 580, 636, 664, 668, 686], "load_empty_model": [164, 580, 718], "automodelforcausallm": [164, 580], "get_super_module_by_nam": [164, 580], "module_nam": [164, 197, 199, 209, 210, 211, 212, 214, 215, 216, 217, 219, 221, 344, 571, 580, 627], "father": [164, 202, 580], "update_modul": [164, 580], "load_layer_wise_quantized_model": [164, 580], "load_tensor_from_shard": [164, 580], "shard": [164, 580], "load_tensor": [164, 580], "ipex_mixed_precis": 165, "fakeaffinetensorquantfunct": [166, 596], "affin": [166, 596, 717], "teqlinearfakequ": [166, 596], "orig_lay": [166, 596], "mullinear": [166, 172, 584, 596], "input_scal": [166, 596], "detector": 167, "transformerbasedmodelblockpatterndetector": [167, 583], "pattern_lst": [167, 583], "block_pattern": [167, 583], "detect": [167, 171, 202, 230, 231, 315, 319, 368, 372, 377, 583, 632, 633, 678, 685, 686, 714, 726], "ffn": [167, 213, 583], "torchsmoothqu": [168, 723], "q_func": [168, 234, 235, 277, 278, 351, 352, 354, 355, 356, 357, 428, 431, 432, 433, 434, 436, 437, 438, 439, 637, 638, 675, 726], "traced_model": [168, 169], "whose": [168, 176, 204, 343, 381, 569, 669, 723, 726], "absorb": [168, 171, 172, 176, 584, 599, 720], "trace_and_fuse_sub_graph": 169, "is_qat": 169, "tequant": [170, 598], "absorb_to_lay": [170, 171, 172, 598, 599], "extra_config": [170, 172], "trainabl": [170, 598, 636, 715, 720], "move_input_devic": 171, "auto": [171, 179, 200, 202, 230, 231, 349, 364, 397, 429, 435, 468, 606, 627, 633, 655, 678, 681, 683, 685, 686, 714, 717, 720], "kind": [171, 675], "forward_wrapp": 171, "get_embedding_contigu": 171, "contigu": 171, "is_fused_modul": 171, "_propagate_qconfig_help": 171, "collate_torch_pr": 171, "collate_result": 171, "input2tupl": 171, "append_attr": 171, "fx_model": 171, "fx_white_list": 171, "append": [171, 348, 351, 431, 633, 662, 675, 713], "graphmodul": [171, 633, 719], "dir": [171, 246, 289, 622, 626, 658, 666, 669], "generate_activation_observ": 171, "smooth_quant_en": 171, "observ": [171, 639, 720, 722, 724, 726], "what": [171, 209, 244, 287, 372, 427, 616, 631, 715], "check_cfg_and_qconfig": 171, "op_infos_from_cfg": [171, 583], "output_tensor_ids_op_nam": [171, 583], "paser_cfg": [171, 583], "ops_nam": [171, 583], "get_quantizable_ops_from_cfg": [171, 583], "input_tensor_ids_op_nam": [171, 583], "update_sq_scal": 171, "ipex_config_path": 171, "smoothquant_scale_info": 171, "ipex_config": 171, "auto_copi": 171, "fetch_modul": [171, 599, 615], "op_nam": [171, 227, 230, 231, 362, 444, 583, 599, 615, 627, 628, 638, 675, 714, 724], "simple_infer": [171, 583], "get_example_input": [171, 599], "example_inp": [171, 599], "get_fallback_ord": 171, "confidence_batch": [171, 726], "fallback": [171, 231, 354, 355, 434, 436, 437, 665, 676, 698, 719, 726], "requantize_cfg": 171, "confid": 171, "ordered_op": 171, "get_mse_order_per_fp32": 171, "influenc": [171, 714], "last": [171, 197, 222, 230, 231, 657, 676, 678, 680, 685, 689, 717, 720, 723], "fallback_ord": 171, "get_mse_order_per_int8": 171, "get_torch_vers": 171, "match_datatype_pattern": 171, "calculate_quant_min_max": 171, "unsign": [171, 363, 445, 639, 720], "qmin": 171, "qmax": 171, "get_depth": [171, 583], "depth": [171, 583, 661, 719], "get_dict_at_depth": [171, 583], "target_depth": [171, 583], "nest": [171, 228, 571, 583], "get_element_under_depth": [171, 583], "ops_lst": [171, 583], "get_op_type_by_nam": 171, "quantizable_op": [171, 583], "collect_weight_info": 171, "fc": [171, 231, 714], "_type_": [171, 385, 622], "get_module_input_output": [171, 599], "module_hook_config": [171, 599], "input_func": [171, 599], "output_func": [171, 599], "help": [171, 191, 272, 321, 599, 656, 673, 677, 678, 684, 695, 703, 708, 709, 710, 720, 726, 727], "module_name_list": [171, 599], "fc1": [171, 172, 584, 599], "preprocess": [171, 230, 231, 246, 263, 289, 304, 445, 599, 619, 663, 725], "usag": [171, 179, 180, 182, 245, 288, 315, 321, 348, 368, 404, 446, 571, 599, 611, 615, 638, 658, 663, 664, 678, 686, 697, 703, 708, 709, 710, 712, 716, 720, 725], "input_valu": [171, 599], "output_valu": [171, 599], "total_valu": [171, 599], "get_absorb_lay": [171, 599], "supported_lay": [171, 599], "no_absorb_lay": [171, 599], "allow": [171, 351, 431, 599, 600, 661, 663, 674, 675, 676, 697, 702, 714, 716, 720, 723, 726, 728], "absorpt": [171, 599], "eg": [171, 228, 248, 291, 571, 599, 658, 716], "absorbed_1": [171, 599], "xx": [171, 599], "get_block_prefix": [171, 599], "block_list": [171, 599], "block_num": [171, 599], "block_prefix": [171, 599], "get_hidden_st": [171, 599], "calib": [171, 599, 638], "rest": [171, 599, 702, 703, 708, 709, 710], "part": [171, 200, 209, 342, 344, 599, 633, 671, 676, 690, 693, 703, 705, 714, 718, 723, 727], "total_block_kwarg": [171, 599], "total_block_arg": [171, 599], "quantize_4bit": [172, 599], "quantil": [172, 597, 599, 726], "nf4": [172, 597, 599, 636, 720], "return_int": [172, 584, 599, 720], "fp4": [172, 597, 599, 636, 720], "q_tensor": [172, 599], "qdq_weight_asym": [172, 599], "qdq_weight_sym": [172, 599], "full_rang": [172, 599], "amax": [172, 599], "qdq_weight_actor": [172, 599], "place": [172, 582, 599, 662, 671, 708, 714, 724, 726], "search_clip": [172, 599], "best": [172, 180, 187, 263, 304, 305, 310, 347, 354, 390, 436, 599, 631, 634, 656, 671, 678, 684, 695, 701, 712, 717, 720, 723, 725, 726], "num": [172, 597, 599, 627], "best_clip_ratio": [172, 599], "group_dim": [172, 597, 607, 720], "gptq_perm": 172, "perm": [172, 263, 304, 725], "absorb_lay": [172, 584], "absorb_dict": [172, 584], "absorbed_lay": [172, 584], "fc3": [172, 584], "oom": [172, 584], "teq_quant": [172, 598], "autoround_quant": 172, "not_use_best_ms": 172, "autoround": 172, "temporarili": [172, 631], "mandatori": [172, 234, 235, 277, 278, 427, 675, 728], "algorithm_registri": 173, "algorithm_typ": 173, "registr": [173, 248, 255, 263, 291, 298, 304, 337], "algorithmschedul": 173, "conf": [173, 178, 187, 231, 234, 235, 264, 277, 278, 321, 328, 329, 331, 332, 333, 334, 339, 351, 352, 354, 355, 356, 357, 361, 373, 383, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 443, 446, 616, 633, 634, 636, 639, 654, 661, 668, 669, 675, 676, 677, 697, 699, 700, 713, 717, 718, 719, 720, 722, 723, 726], "control": [173, 230, 231, 633, 675, 701, 714, 726], "phase": [173, 634, 675, 714, 717, 719, 726], "fastbiascorrect": [174, 177], "fast_bias_correct": [175, 230, 231, 364, 717], "weight_correct": [175, 230, 231, 364, 717], "weightcorrect": 177, "1e": [177, 723, 728], "05": [177, 231, 319, 372, 399, 674, 723, 729], "evalu": [178, 180, 187, 204, 230, 234, 235, 246, 264, 277, 278, 289, 305, 312, 315, 316, 317, 319, 321, 365, 368, 369, 370, 372, 373, 383, 397, 427, 616, 619, 634, 637, 638, 656, 658, 661, 662, 669, 670, 673, 674, 675, 676, 678, 684, 686, 689, 695, 712, 714, 717, 722, 723, 724, 726, 728], "set_env_var": [178, 264], "env_var": [178, 264], "overwrite_exist": [178, 264], "env": [178, 264, 666, 708, 709, 710], "set_all_env_var": [178, 264], "physic": [178, 264, 631, 654, 703], "core": [178, 230, 231, 264, 389, 632, 654, 672, 688, 692, 703, 729], "get_architectur": [178, 264], "architectur": [178, 264, 322, 325, 636, 654, 661, 675, 702, 714, 715, 720, 727], "get_threads_per_cor": [178, 264], "thread": [178, 230, 231, 264, 421, 426, 600, 657, 705], "get_thread": [178, 264], "get_physical_id": [178, 264], "socket": [178, 264, 627, 703, 705, 729], "get_core_id": [178, 264], "get_bounded_thread": [178, 264], "core_id": [178, 264], "bind": [178, 264], "run_inst": 178, "b_dataload": [178, 230, 231, 654, 675], "b_func": [178, 654], "benchmarkconfig": [178, 230, 231, 654, 660, 675], "goal": [178, 180, 305, 310, 334, 339, 347, 373, 427, 638, 657, 713, 717, 726], "prefer": [178, 310, 347, 427, 714, 720], "space": [178, 194, 195, 210, 211, 216, 217, 230, 231, 234, 235, 277, 278, 310, 317, 322, 325, 326, 327, 347, 351, 354, 361, 370, 373, 427, 431, 436, 443, 631, 632, 634, 637, 638, 639, 656, 714, 717, 723, 728], "etc": [178, 187, 262, 303, 305, 310, 317, 334, 339, 347, 370, 373, 427, 626, 636, 661, 670, 697, 701, 714, 722, 726], "generate_prefix": 178, "core_list": 178, "command": [178, 264, 616, 660, 663, 678, 680, 683, 688, 692, 696, 697, 699, 700, 701, 703], "numactl": [178, 666, 681, 689], "call_on": 178, "cmd": 178, "log_fil": [178, 420, 425], "window": [178, 654, 671, 695, 696], "config_inst": 178, "raw_cmd": 178, "multi": [178, 200, 202, 213, 315, 368, 372, 427, 634, 657, 658, 670, 675, 712, 714, 717, 726], "trigger": [178, 209, 344], "summary_benchmark": 178, "summari": [178, 616, 660, 690, 693, 724, 729], "profil": [178, 231, 364], "benchmark_with_raw_cmd": 178, "fit_with_raw_cmd": 178, "cores_per_inst": [178, 230, 231, 654, 675, 716], "num_of_inst": [178, 230, 231, 654, 675, 716], "fit": [178, 204, 230, 231, 351, 373, 427, 431, 446, 616, 633, 636, 654, 657, 658, 660, 663, 668, 669, 674, 675, 676, 677, 697, 698, 714, 717, 718, 719, 720], "pb": [178, 230, 231, 373, 381, 427, 569, 636, 654, 663, 668, 675, 677, 697, 700, 708, 724, 729], "eval_dataload": [178, 230, 231, 234, 235, 277, 278, 348, 351, 352, 354, 355, 356, 357, 373, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 616, 654, 669, 674, 675, 697, 717, 718, 726], "register_config": [179, 656], "framework_nam": [179, 656], "algo_nam": [179, 656], "prioriti": [179, 611, 656, 706], "examplealgorithm": 179, "examplealgorithmconfig": 179, "larger": [179, 611, 638, 714, 720, 723], "higher": [179, 230, 231, 234, 235, 277, 278, 326, 373, 427, 611, 616, 633, 660, 661, 665, 674, 698, 714, 717, 722], "tri": [179, 231, 656, 726], "stage": [179, 350, 355, 428, 430, 437, 661, 714, 724, 726], "baseconfig": [179, 182, 465, 467, 471, 610, 656], "white_list": [179, 399, 465, 469, 607], "op_name_or_module_typ": [179, 399, 465, 469, 607], "default_white_list": [179, 399, 465, 469, 607], "composableconfig": [179, 656], "register_supported_configs_for_fwk": 179, "fwk_name": [179, 656], "eval_acc": [180, 397], "eval_perf": [180, 397], "mold": 180, "user_eval_fns1": 180, "user_eval_fns2": 180, "eval_fn": [180, 397, 468, 606], "user_eval_fns3": 180, "user_eval_fns4": 180, "sequentialsampl": [180, 244, 287], "config_sourc": 180, "_configset": 180, "tuningconfig": [180, 397, 468, 606], "config_set": [180, 397], "max_trial": [180, 230, 231, 675, 726], "default_sampl": 180, "tolerable_loss": [180, 230, 231, 675, 726], "found": [180, 187, 305, 636, 656, 661, 673, 676, 683, 700, 704, 723, 726, 729], "from_fwk_config": 180, "configset": 180, "timeout": [180, 230, 231, 675, 716, 726, 728], "exit": [180, 230, 231, 350, 428, 430, 675, 703, 708, 709, 710, 728], "much": [180, 187, 197, 230, 231, 263, 304, 305, 661, 689, 723, 725], "metric": [180, 187, 230, 231, 234, 235, 267, 277, 278, 305, 310, 311, 326, 334, 339, 347, 348, 364, 373, 427, 616, 619, 634, 637, 638, 658, 660, 663, 675, 676, 697, 717, 722, 723, 724, 726, 727, 728, 729], "accept": [180, 230, 231, 446, 631, 654, 656, 657, 697, 720], "rel": [180, 198, 230, 231, 383, 675, 698, 716, 726, 728, 729], "neg": [180, 198], "refin": [180, 669, 714], "tune_config": [180, 397, 468, 606, 638], "config1": 180, "config2": 180, "toler": [180, 700], "fp32_baselin": [180, 619, 637], "config1_metr": 180, "config2_metr": 180, "98": [180, 230, 231, 675, 714, 716, 729], "trial": [180, 726], "config3_metr": 180, "97": [180, 675, 729], "Not": [180, 360, 361, 442, 443, 571, 627, 634, 656], "achiev": [180, 310, 347, 665, 673, 675, 698, 713, 714, 715, 717, 723, 724, 726], "config_metr": 180, "reach": [180, 204, 220, 230, 231, 346, 632, 657, 697, 714, 726], "paramlevel": 182, "enumer": [182, 326, 616, 637, 661, 662, 663, 675, 713, 714, 724], "deriv": [182, 187, 197, 206, 207, 208, 214, 215, 216, 217, 218, 219, 220, 221, 305, 342, 344, 346], "tuningparam": 182, "default_v": 182, "tunable_typ": 182, "op_level": 182, "tunabl": 182, "fakealgoconfig": 182, "params_list": [182, 397], "simpl": [182, 263, 304, 671, 675, 714, 722, 723, 726], "give": [182, 638, 695, 726], "enough": [182, 717], "simple_attr": 182, "complex": [182, 656, 675, 676, 714], "explicitli": [182, 230, 231, 669, 714], "complex_attr": 182, "model_attr": 182, "model_level": 182, "explain": [182, 639, 660, 723], "logger": [184, 311, 340, 364, 571, 583, 617, 620, 627], "tuninglogg": 185, "unifi": [185, 310, 347, 637, 638, 639, 657, 669, 670, 674, 675, 677], "assist": [185, 721], "team": [185, 317, 370, 631, 719], "retriev": [185, 244, 287, 714], "dump_elapsed_tim": [186, 571, 594, 627, 637], "customized_msg": [186, 571, 594, 627], "elaps": [186, 571, 594, 627], "set_random_se": [186, 230, 231, 627], "set_workspac": [186, 230, 231, 627], "workspac": [186, 230, 231, 626, 627, 677, 703, 708, 709, 710], "set_resume_from": [186, 230, 231, 627], "resume_from": [186, 230, 231, 627], "set_tensorboard": [186, 230, 231, 627], "tensorboard": [186, 230, 231, 619, 627, 637, 675, 698], "compon": [187, 305, 311, 348, 364, 633, 656, 660, 663, 671, 672, 678, 695, 703, 713, 714], "quantizationawaretrainingcallback": 187, "pruningcallback": 187, "distillationcallback": 187, "basecallback": 187, "design": [187, 245, 268, 273, 288, 372, 432, 634, 636, 675, 683, 686, 714, 717, 727], "mainli": [187, 220, 273, 346, 636, 675, 714, 717], "prune": [187, 196, 197, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 230, 231, 273, 274, 311, 328, 329, 331, 332, 333, 337, 339, 340, 342, 343, 344, 346, 348, 364, 627, 636, 663, 664, 667, 668, 670, 713, 715, 727, 728], "distil": [187, 196, 230, 231, 265, 272, 273, 311, 364, 636, 664, 668, 670, 713, 727, 728], "In": [187, 206, 207, 208, 213, 214, 215, 219, 231, 245, 273, 288, 315, 342, 344, 368, 383, 600, 631, 633, 634, 636, 637, 638, 657, 658, 660, 661, 662, 663, 674, 675, 685, 688, 689, 692, 698, 699, 700, 701, 708, 709, 710, 712, 713, 714, 717, 719, 720, 722, 723, 724, 725, 726, 727], "adaptor": [187, 230, 231, 363, 445, 454, 455, 619, 636, 639, 670, 718, 719, 721, 723, 724, 727], "pipelin": [187, 305, 322, 323, 348, 632, 662, 675, 713], "knowledg": [187, 188, 230, 231, 265, 305, 662, 664, 668, 670, 675, 677, 728], "transfer": [187, 253, 296, 305, 658, 661, 662, 675, 723], "teacher": [187, 230, 231, 305, 661, 662, 675, 729], "student": [187, 191, 230, 231, 246, 272, 289, 305, 658, 661, 662, 729], "distillation_conf": [187, 227, 305], "_epoch_ran": [187, 305], "integ": [187, 208, 209, 230, 231, 305, 315, 319, 326, 342, 344, 368, 372, 446, 637, 639, 655, 717, 720, 723, 726], "epoch": [187, 210, 211, 216, 305, 344, 616, 657, 661, 662, 663, 675, 713, 714, 728], "ran": [187, 305], "eval_frequ": [187, 305], "frequenc": [187, 209, 230, 231, 305, 344, 675, 714, 728], "term": [187, 210, 211, 216, 217, 219, 305, 632, 655, 661, 672, 674, 712, 713, 726], "best_scor": [187, 305], "best_model": [187, 305, 626, 720], "critet": [188, 265], "tensorflowcrossentropyloss": [188, 265], "pytorchcrossentropyloss": [188, 265], "tensorflowsparsecategoricalcrossentropi": 188, "tensorflowknowledgedistillationloss": [188, 265], "pytorchknowledgedistillationloss": [188, 265, 675], "pytorchintermediatelayersknowledgedistillationloss": [188, 265], "tensorflowcriterion": [188, 265], "pytorchcriterion": [188, 265], "criterion_registri": [188, 265], "criterion_typ": [188, 265], "registry_criterion": [188, 265], "param_dict": [188, 190, 265, 270], "crossentropyloss": [188, 230, 231, 661, 675], "sparsecategoricalcrossentropyloss": 188, "knowledgedistillationframework": [188, 265], "student_model": [188, 231, 265, 675], "teacher_model": [188, 230, 231, 265, 661, 662, 675], "knowledgedistillationloss": [188, 265, 675, 728], "temperatur": [188, 230, 231, 265, 675, 728], "loss_typ": [188, 194, 230, 231, 265, 675, 728], "ce": [188, 230, 231, 265, 675, 728], "loss_weight": [188, 230, 231, 265, 675, 728], "pytorchknowledgedistillationlosswrapp": [188, 265], "tensorflowknowledgedistillationlosswrapp": 188, "tensorflowknowledgedistillationlossextern": [188, 265], "intermediatelayersknowledgedistillationloss": [188, 265], "layer_map": [188, 231, 265, 661], "add_origin_loss": [188, 231, 265], "pytorchintermediatelayersknowledgedistillationlosswrapp": [188, 265], "selfknowledgedistillationloss": [188, 265], "selfknowledg": [188, 265], "pytorchselfknowledgedistillationloss": 188, "pytorchselfknowledgedistillationlosswrapp": 188, "multipl": [190, 200, 232, 233, 237, 238, 246, 247, 249, 250, 251, 252, 253, 257, 260, 263, 270, 275, 276, 280, 281, 283, 289, 290, 292, 293, 294, 295, 296, 300, 302, 304, 320, 373, 374, 375, 377, 383, 600, 654, 658, 665, 675, 702, 705, 713, 714, 722, 723, 726], "tensorflowoptim": [190, 270], "pytorchoptim": [190, 270], "optimizer_registri": [190, 270], "optimizer_typ": [190, 270], "cross": [190, 270, 319, 372, 669, 726], "tensorflowsgd": [190, 270], "tensorflowadamw": [190, 270], "tensorflow_addon": [190, 270], "tensorflowadam": 190, "adam": [190, 728], "pytorchsgd": [190, 270], "record_output": [191, 272], "output_process": [191, 272], "get_activ": [191, 272], "hyper": [192, 728], "sa_optim": [192, 196], "simul": [193, 639], "anneal": 193, "register_search": 194, "searcher": [194, 202, 231, 327], "registri": [194, 195, 197, 204, 209, 218, 219, 220, 221, 342, 344, 346, 634], "sure": [194, 204, 209, 218, 220, 342, 344, 346, 654, 697], "search_spac": [194, 227, 231, 322, 325, 326, 327], "gridsearch": [194, 327], "grid": [194, 231, 327, 634, 714], "whole": [194, 327, 639, 697, 717, 729], "exhaust": [194, 231, 311, 327, 353, 364, 435, 716], "randomsearch": [194, 327], "randomli": [194, 263, 304, 327, 351, 431, 634, 723, 725, 726], "bayesianoptimizationsearch": [194, 327], "bayesian": [194, 231, 311, 327, 353, 364, 435, 634, 714, 716], "xgbsearcher": 194, "higher_is_bett": [194, 230, 231, 372, 427, 726, 728], "reg": [194, 196, 199, 210, 211, 216, 217, 231], "min_train_sampl": [194, 231], "10": [194, 230, 231, 248, 291, 351, 431, 636, 654, 658, 665, 671, 675, 697, 698, 714, 716, 725, 726, 729], "xgboost": [194, 714], "searchspac": 195, "factori": [195, 379, 407, 409, 414, 417, 419, 424, 570], "actual": [195, 319, 372, 663], "interv": [195, 215, 714], "continu": [195, 207, 315, 342, 368, 634, 673, 675, 696, 714, 727], "learning_r": [195, 230, 231, 675, 716, 728], "001": [195, 248, 291, 658, 663, 723, 728], "num_train_epoch": [195, 675, 714], "20": [195, 263, 304, 700, 703, 708, 709, 710, 714, 725, 728, 729], "register_searchspac": 195, "pruner": [195, 196, 311, 328, 329, 330, 331, 332, 334, 339, 340, 342, 345, 364, 675, 714, 728], "basesearchspac": 195, "discretesearchspac": 195, "continuoussearchspac": 195, "hpo": [196, 234, 277, 714], "model_slim": [196, 199, 213], "auto_slim": [196, 199, 201], "pattern_analyz": [196, 199, 201], "weight_slim": [196, 199, 201, 213], "mha": [196, 199, 205, 212, 714], "ninm": [196, 199, 205], "nxm": [196, 199, 205, 215, 230, 231, 338, 342, 714], "basic": [196, 199, 202, 204, 212, 230, 231, 262, 303, 311, 322, 342, 353, 357, 360, 364, 435, 439, 442, 616, 670, 671, 675, 697, 716, 722], "block_mask": [196, 197, 199, 212], "pattern_lock": [196, 199, 212, 230, 231, 311, 330, 364], "retrain_fre": [196, 197, 199, 212, 714], "wanda": [196, 199], "criteria": [196, 199, 230, 231, 310, 334, 339, 342, 344, 347, 633, 695, 723], "tf_criteria": [196, 199], "callback": [196, 334, 339, 616, 619, 633, 675, 713, 714, 717], "register_criterion": [197, 221], "get_criterion": 197, "pruningcriterion": [197, 221], "about": [197, 221, 627, 631, 656, 657, 675, 700, 701, 714, 719, 726, 727, 729], "score": [197, 204, 209, 213, 221, 230, 231, 312, 313, 315, 316, 317, 319, 344, 365, 366, 368, 369, 370, 372, 434, 619, 633, 674, 698, 712, 714, 722, 726], "magnitudecriterion": [197, 221], "magnitud": [197, 221, 230, 231, 311, 319, 330, 364, 372, 670, 714], "criterion_class": [197, 221], "determin": [197, 204, 209, 221, 230, 231, 621, 631, 633, 655, 714, 717], "gradientcriterion": 197, "absolut": [197, 230, 231, 319, 372, 674, 675, 714, 717, 726], "snipcriterion": 197, "snip": [197, 230, 231, 344, 670, 714, 729], "product": [197, 636, 670, 676, 678, 679, 695, 701, 715, 717, 722, 726], "shot": [197, 216, 217, 220, 273, 344, 346, 634, 670, 675, 714, 715, 720], "connect": [197, 344, 695, 697, 704, 714, 722], "sensit": [197, 328, 344, 670, 714], "1810": [197, 344], "02340": [197, 344], "snipmomentumcriterion": 197, "snip_momentum": [197, 230, 231, 675, 714], "preserv": [197, 655, 714, 720], "beta": 197, "blockmaskcriterion": 197, "retrainfreecriterion": 197, "return_reorder_indic": 198, "6": [198, 230, 231, 667, 717, 723, 726, 729], "remain": [198, 683], "unchang": 198, "flip": [198, 259, 263, 301, 304, 725], "initial_metr": 198, "sparsity_ratio": [198, 224], "prune_n": [198, 224], "prune_m": [198, 224], "pow_of_var_regrow": 198, "max_cycle_tim": 198, "without_same_sign": 198, "update_threshold": 198, "power": [198, 661, 675, 689, 715], "cycl": [198, 634], "paper": [198, 224, 661, 714, 720, 723], "2310": 198, "08915": 198, "pickle_protocol": 199, "_use_new_zipfile_seri": 199, "prepare_prun": [199, 714], "loss_func": [199, 218], "assertionerror": [199, 205, 212, 222, 342, 343, 344, 373], "slim": [200, 201, 202, 315, 368, 379, 381, 569, 570, 677, 714], "round_multipli": 200, "spars": [200, 214, 344, 658, 715], "model_slim_ffn2": 200, "perman": [200, 631, 714], "obtain": [200, 202, 211, 216, 219, 222, 343, 600, 633, 638, 703, 714, 722, 723, 726], "acceler": [200, 611, 661, 675, 678, 686, 695, 698, 702, 714, 715, 719, 720, 723, 726], "directli": [200, 230, 231, 245, 288, 315, 319, 343, 368, 372, 674, 675, 682, 714, 716, 717, 724], "sprase": 200, "model_slim_mha": 200, "parse_auto_slim_config": [200, 714], "ffn2_sparsiti": [200, 714], "mha_spars": [200, 714], "generate_ffn2_pruning_config": 200, "consecut": [200, 202, 203, 714], "generate_mha_pruning_config": 200, "head": [200, 202, 206, 213, 222, 714, 729], "get_attribut": 202, "get_common_modul": 202, "layer2": [202, 675, 714, 717], "nearest": [202, 263, 304, 399, 597, 607, 720, 725], "print_iter": 202, "recipesearch": 202, "root": [202, 246, 247, 248, 251, 289, 290, 291, 294, 319, 372, 658, 663, 674, 675, 728], "levelwis": 202, "wai": [202, 247, 248, 251, 290, 291, 294, 611, 634, 639, 657, 658, 660, 674, 675, 678, 681, 696, 697, 701, 702, 703, 713, 714, 717, 720, 723, 726, 728], "bert": [202, 231, 242, 245, 246, 263, 285, 288, 289, 304, 636, 658, 661, 674, 676, 683, 706, 709, 710, 714, 725, 729], "recipe_sampl": 202, "bertattent": 202, "dens": [202, 220, 230, 231, 346, 698, 714, 729], "searching_result": 202, "jitbasicsearch": 202, "placeholder_shap": 202, "placeholder_dtyp": 202, "jit": [202, 230, 678, 680, 685, 723, 724], "script": [202, 312, 313, 316, 317, 365, 366, 369, 370, 600, 632, 663, 670, 678, 682, 685, 686, 689, 706, 708, 715], "static_graph": 202, "flatten_static_graph": 202, "target_lay": 202, "linear2linearsearch": 202, "target_op_lut": 202, "lookup": 202, "tabl": [202, 213, 627, 639, 660, 665, 698, 700, 729], "current_pattern": 202, "statu": [202, 624, 631, 657, 705, 708, 709, 710, 712, 714], "selfmhasearch": 202, "classifierheadsearch": 202, "classifi": [202, 222, 246, 289, 319, 372, 658, 661], "classifierheadsearchertf": 202, "squeezer": 203, "postcompressionutil": 203, "librari": [203, 267, 311, 364, 421, 629, 636, 671, 675, 676, 680, 689, 695, 715, 717], "relat": [203, 219, 305, 315, 334, 339, 342, 368, 445, 619, 639, 678, 702, 703, 714, 728], "linearcompress": 203, "root_linear": 203, "target_linear": 203, "while": [203, 214, 222, 344, 351, 431, 600, 637, 638, 658, 664, 670, 676, 678, 683, 695, 697, 714, 716, 717, 720, 723], "hidden": [203, 208, 342, 637], "layer_1": 203, "act_fn": 203, "layer_2": 203, "linearcompressioniter": 203, "linear_pattern": 203, "register_pattern": [204, 342], "basepattern": [204, 206, 208], "unit": [204, 342, 632, 703, 714], "4x1": [204, 230, 231, 338, 675, 714, 729], "is_glob": [204, 342], "local": [204, 230, 231, 342, 571, 600, 627, 656, 688, 692, 697, 704, 705, 714, 722], "keep_mask_lay": 204, "invalid_lay": 204, "max_sparsity_ratio_per_op": [204, 209, 227, 230, 231, 675, 714], "sparsiti": [204, 206, 207, 209, 210, 211, 214, 216, 217, 220, 222, 230, 231, 344, 346, 627, 636, 658, 670, 675, 727, 729], "min_sparsity_ratio_per_op": [204, 227, 230, 231, 675, 714], "target_spars": [204, 227, 230, 231, 675, 714, 716, 728], "pytorchbasepattern": [204, 219], "kerasbasepattern": 204, "get_pattern": [205, 342], "patternmha": 206, "doc": [206, 207, 230, 231, 342, 360, 361, 372, 427, 442, 443, 446, 571, 627, 674, 675, 690, 693, 701], "md": [206, 207, 230, 231, 342, 372, 427], "n": [206, 207, 230, 231, 247, 263, 290, 304, 313, 342, 366, 446, 639, 656, 658, 660, 661, 703, 714, 717, 723, 725], "pytorchpatternninm": 207, "out": [207, 230, 231, 246, 247, 248, 289, 290, 291, 310, 342, 347, 582, 632, 633, 636, 658, 678, 683, 688, 689, 690, 692, 693, 695, 701, 714, 716, 717, 720], "pytorchpatternnxm": 208, "kept": [208, 342], "block_siz": [208, 342, 607, 720], "height": [208, 259, 263, 301, 304, 342, 663, 725, 728], "width": [208, 259, 263, 301, 304, 342, 655, 663, 714, 717, 725, 728], "vertic": [208, 263, 304, 342, 725], "keraspatternnxm": 208, "register_prun": [209, 218, 344], "baseprun": [209, 214, 216, 218], "current_sparsity_ratio": [209, 344], "global_step": [209, 344], "start_step": [209, 227, 230, 231, 344, 675, 714, 716], "end_step": [209, 227, 230, 231, 344, 675, 714, 716], "pruning_frequ": [209, 227, 230, 231, 675, 714], "target_sparsity_ratio": [209, 344], "show": [209, 627, 631, 661, 663, 675, 681, 696, 697, 698, 700, 703, 708, 709, 710, 723, 726, 727], "pytorchbaseprun": [209, 217], "kerasbaseprun": 209, "pytorchbasicprun": 210, "arrang": [210, 211, 216, 217, 247, 248, 251, 290, 291, 294, 658, 714], "proce": [210, 211, 216, 217], "regul": [210, 211, 216, 217], "kerasbasicprun": 210, "pytorchblockmaskprun": 211, "grad": [211, 216], "parse_valid_pruner_typ": 212, "get_prun": [212, 344], "pythonmultiheadattentionprun": 213, "mha_modul": 213, "partial": [213, 714, 717], "qkv": 213, "feedward": 213, "simultan": [213, 678, 702, 713, 716], "qkv_name": 213, "query_layer_nam": 213, "key_layer_nam": 213, "value_layer_nam": 213, "ffn_name": 213, "attention_ffn_nam": 213, "mha_nam": 213, "qkv_modul": 213, "ffn_modul": 213, "mha_compress": 213, "mhacompress": 213, "linear_lay": 213, "independ": [213, 421, 426, 639], "4x": [213, 634, 717], "subsequ": [213, 638, 678, 695], "head_mask": 213, "mha_head_s": 213, "similar": [213, 227, 675, 699, 716, 723, 726, 728], "mha_scor": 213, "lock": [214, 332, 333, 670, 713, 714], "pytorchpatternlockprun": 214, "parent": [214, 215, 220, 338, 344, 346, 724], "pytorchprogressiveprun": 215, "basicprun": [215, 218], "interpol": [215, 263, 304, 674, 714, 725], "fine": [215, 246, 289, 656, 658, 681, 714, 715, 717], "grain": [215, 714, 715, 726], "improv": [215, 600, 632, 655, 656, 675, 678, 695, 696, 698, 714, 715, 717, 719, 720, 726, 727, 729], "ad": [215, 246, 289, 312, 351, 365, 391, 431, 638, 639, 660, 676, 678, 683, 686, 690, 693, 703, 714, 720, 724], "retrain": [216, 662], "pytorchretrainfreeprun": 216, "pruner_class": [216, 217], "fast": [216, 230, 231, 636, 714, 715, 720], "retrainfreeprun": [216, 218], "effect": [216, 636, 637, 714, 715], "2204": 216, "09656": 216, "sparsegptprun": [217, 218], "most": [217, 230, 231, 319, 372, 660, 675, 676, 714, 717, 720, 723, 726, 729], "sparsegpt": [217, 218, 714], "massiv": [217, 714], "One": [217, 639, 656, 658, 663, 670, 700, 714, 715, 726], "2301": [217, 714], "00774": [217, 714], "opt": [218, 636, 673, 683, 714, 723, 726, 729], "least": [218, 345, 632, 675, 714, 726], "templat": [218, 345, 675, 714], "tree": [218, 345, 361, 443, 703], "nlp": [218, 230, 231, 345, 683, 699, 714, 717], "huggingface_model": [218, 345, 699], "classif": [218, 246, 263, 289, 304, 319, 345, 372, 661, 665, 674, 684, 698, 706, 709, 710, 714, 715], "pytorch_prun": [218, 311, 364], "eager": [218, 345, 426, 663, 670, 717, 719, 724], "config_file_path": [218, 345], "pruner_info": [218, 345], "pruning_class": 218, "avail": [218, 230, 231, 377, 640, 642, 646, 649, 652, 656, 664, 666, 668, 670, 688, 692, 697, 702, 703, 704, 708, 709, 710, 714, 726, 729], "regular": [219, 312, 343, 365], "register_reg": 219, "regulariz": 219, "get_reg_typ": 219, "get_reg": 219, "basereg": 219, "grouplasso": 219, "coeff": 219, "lasso": [219, 329, 670, 714], "reg_term": 219, "register_schedul": [220, 346], "get_schedul": [220, 346], "pruningschedul": 220, "gradual": [220, 346, 714], "oneshotschedul": [220, 346], "iterativeschedul": [220, 346], "get_tf_criterion": 221, "get_sparsity_ratio": 222, "elementwise_over_matmul_gemm_conv": 222, "elementwise_over_al": 222, "blockwise_over_matmul_gemm_conv": 222, "get_sparsity_ratio_tf": 222, "check_config": [222, 343], "prune_config": [222, 343], "everyth": [222, 343, 683], "reset_none_to_default": 222, "update_param": 222, "process_weight_config": 222, "global_config": [222, 328, 329, 331, 332, 333], "local_config": [222, 230, 231, 328, 329, 331, 332, 333], "default_config": 222, "pruners_info": 222, "process_yaml_config": 222, "check_key_valid": 222, "template_config": 222, "user_config": 222, "process_and_check_config": [222, 343], "process_config": [222, 343], "parse_last_linear": 222, "often": [222, 657, 661, 700, 713, 714], "might": [222, 633, 656, 697, 726], "caus": [222, 638, 657, 679, 698, 700, 714, 720], "drop": [222, 315, 343, 368, 632, 675, 676, 689, 714, 720, 723, 729], "parse_last_linear_tf": 222, "parse_to_prun": [222, 343], "parse_to_prune_tf": 222, "generate_pruner_config": 222, "dotdict": [222, 227, 231, 383, 627], "get_lay": 222, "collect_layer_input": 222, "layer_idx": 222, "layer_input": 222, "previou": [222, 638, 639, 675, 714, 721, 723, 724, 726, 727, 729], "prune_wanda": 224, "use_vari": 224, "low_mem_usag": 224, "dsnot": 224, "sij": 224, "wij": 224, "xj": 224, "2306": [224, 720], "11695": 224, "recurs": [225, 627], "wrappedgpt": 226, "layer_id": 226, "gpt": [226, 636, 673, 699, 714, 723, 729], "prunerv2": 227, "pruning_typ": [227, 230, 231, 675, 714], "pruning_scop": [227, 230, 231, 675, 714], "sparsity_decay_typ": [227, 230, 231, 675, 714], "pruning_op_typ": [227, 230, 231, 675, 714], "reg_typ": 227, "criterion_reduce_typ": 227, "resume_from_pruned_checkpoint": 227, "cfg_fname": 227, "parser": 227, "quantization_conf": 227, "pruning_conf": 227, "graph_optimization_conf": [227, 310], "mixedprecision_conf": 227, "benchmark_conf": 227, "nasconfig": [227, 231, 323, 325, 634], "approach": [227, 230, 231, 322, 323, 325, 633, 634, 655, 658, 661, 670, 675, 683, 695, 698, 706, 708, 709, 710, 714, 715, 716, 718, 720, 726, 728], "search_algorithm": [227, 231, 311, 324, 364, 634], "na": [227, 231, 311, 364, 377, 670, 729], "procedur": [227, 634, 714, 726], "deep_get": [228, 383, 571], "dot": [228, 571, 676, 717], "person": [228, 571, 631, 715], "john": [228, 571], "deep_set": [228, 383], "sex": [228, 631], "male": 228, "notat": [228, 231, 627], "pythonic_config": 229, "random_se": [230, 231, 351, 431, 675, 728], "1978": [230, 231], "default_workspac": [230, 231], "directori": [230, 231, 247, 248, 290, 291, 381, 569, 571, 622, 624, 626, 627, 658, 663, 666, 688, 690, 692, 693, 699, 701, 724], "histori": [230, 231, 626, 627, 695, 699, 726], "nc_workspac": [230, 231, 698, 699], "datetim": [230, 231], "now": [230, 231, 263, 304, 633, 634, 639, 658, 663, 686, 716, 725, 726], "strftime": [230, 231], "d_": [230, 231], "resum": [230, 231, 234, 235, 277, 278, 352, 355, 356, 357, 428, 431, 432, 433, 434, 436, 437, 438, 439], "flag": [230, 231, 313, 366, 660], "visual": [230, 231, 636, 686, 695, 722, 724, 726, 727], "displai": [230, 231, 360, 361, 442, 443, 571, 627, 695, 698], "2022": [230, 231, 636, 672, 714, 720, 723, 729], "workspace_path": [230, 231], "accuracycriterion": [230, 231, 675, 726], "accuracy_criterion": [230, 231, 383, 675, 699, 712, 716, 726, 728], "warmup": [230, 231, 654, 675, 716], "inter_num_of_thread": [230, 231, 421, 426, 675, 716], "intra_num_of_thread": [230, 231, 421, 426, 675, 716], "benchmark": [230, 231, 266, 311, 348, 364, 383, 627, 636, 644, 677, 678, 682, 686, 689, 695, 698, 726, 727, 728, 729], "onnxrt_trt_ep": [230, 231, 676, 717], "onnxrt_cuda_ep": [230, 231, 676, 717], "inter": [230, 231], "intra": [230, 231], "quantizationconfig": 230, "post_training_static_qu": [230, 658, 675, 716, 726], "calibration_sampling_s": [230, 231, 675, 700], "op_type_dict": [230, 231, 639, 716, 717, 720, 726], "op_name_dict": [230, 231, 660, 675, 698, 700, 717, 726], "strategy_kwarg": [230, 231, 722, 726], "quant_level": [230, 231, 698, 720, 723, 726], "posttrainingquantconfig": [230, 231, 427, 633, 636, 639, 657, 660, 665, 668, 674, 675, 677, 697, 698, 699, 700, 717, 718, 719, 720, 722, 723, 726], "quantizationawaretrainingconfig": [230, 231, 616, 633, 662, 665, 675, 717, 719, 726], "cv": [230, 231, 714], "object_detect": [230, 231, 315, 368], "recommendation_system": [230, 231], "overrid": [230, 231, 627, 656], "quantiztaion": [230, 231], "smooth_quant_arg": [230, 231, 717, 723], "gemm_to_matmul": [230, 231, 717], "graph_optimization_level": [230, 231, 716, 717], "disable_al": [230, 231, 716], "enable_bas": [230, 231], "enable_extend": [230, 231], "enable_al": [230, 231], "first_conv_or_matmul_quant": [230, 231, 717], "last_conv_or_matmul_quant": [230, 231, 717], "pre_post_process_quant": [230, 231, 717], "postprocess": [230, 231, 257, 260, 263, 267, 304, 311, 364, 372, 427, 619, 637, 675, 724, 725], "dedic": [230, 231], "quant_format": [230, 231, 309, 665, 698], "constraint": [230, 231, 310, 347, 675, 714, 722, 726, 728], "conv1": [230, 231, 717, 728], "tuning_strategi": [230, 231], "guarante": [230, 231, 675], "models": [230, 231, 383, 675, 712, 716], "footprint": [230, 231, 310, 334, 339, 347, 383, 662, 675, 712, 714, 716, 718], "earli": [230, 231, 675, 717, 726, 728], "stop": [230, 231, 675, 726, 727, 728], "excluded_precis": [230, 231, 719], "exclud": [230, 231, 637, 655, 719], "conserv": [230, 231, 364, 435], "use_distributed_tun": 230, "weightpruningconfig": [230, 231, 675, 713, 714], "pruning_config": [230, 231, 675, 714], "exp": [230, 231, 675, 714], "link": [230, 231, 246, 289, 372, 398, 427, 655, 658, 665, 688, 692, 695, 720, 729], "90": [230, 231, 718, 728, 729], "magnitude_progress": [230, 231], "snip_progress": [230, 231], "snip_momentum_progress": [230, 231], "feasibl": [230, 231], "situat": [230, 231, 663, 714], "unstructur": [230, 231, 338, 670, 714, 729], "8x1": [230, 231], "channelx1": [230, 231, 714], "1xchannel": [230, 231, 714], "itrex": [230, 231, 723], "start": [230, 231, 263, 304, 315, 368, 432, 671, 700, 715, 725, 726, 727, 730], "togeth": [230, 231, 263, 304, 661, 671, 682, 715, 724, 725], "sort": [230, 231, 354, 391, 436, 660, 698, 720, 726], "sinc": [230, 231, 310, 312, 334, 339, 347, 365, 661, 665, 671, 674, 689, 695, 700, 713, 720, 721], "lead": [230, 231, 656, 661, 675, 676, 700, 714, 720, 723], "increas": [230, 231, 391, 659, 670, 678, 695, 700, 720, 726], "cube": [230, 231, 714], "update_config": [230, 231], "knowledgedistillationlossconfig": [230, 231, 661, 662, 675, 713], "hyperparamet": [230, 231, 360, 722, 723, 726], "entropi": [230, 231, 655, 726], "groundtruth": [230, 231, 315, 368], "label": [230, 231, 234, 235, 246, 248, 249, 250, 251, 254, 259, 263, 268, 277, 278, 289, 291, 292, 293, 294, 297, 301, 304, 312, 314, 319, 365, 367, 372, 373, 427, 566, 616, 633, 657, 658, 660, 674, 675, 717, 725], "sum": [230, 231, 319, 372, 660, 661], "distillationconfig": [230, 231, 616, 661, 662, 675, 713], "prepare_compress": [230, 231, 616, 633, 661, 662, 675, 713, 714, 717], "criterion_conf": [230, 231], "d_conf": [230, 231, 662, 675, 713], "compression_manag": [230, 231, 616, 633, 661, 662, 675, 713, 714, 717], "featur": [230, 231, 246, 247, 259, 263, 289, 290, 301, 304, 632, 636, 654, 657, 659, 661, 675, 676, 677, 678, 682, 683, 686, 695, 697, 701, 714, 715, 721, 725], "distil_loss": [230, 231, 675], "ni_workload_nam": 231, "onnxrt_dnnl_ep": [231, 676, 717], "onnxrt_dml_ep": [231, 717], "tuningcriterion": [231, 675, 712, 722, 726], "tuning_criterion": [231, 675, 712, 722, 726], "npu": [231, 717], "xpu": [231, 600, 686, 717], "ptq": [231, 427, 633, 660, 663, 670, 675, 700, 717, 723, 724, 726], "meet": [231, 237, 348, 350, 428, 430, 633, 638, 712, 715, 716, 717, 720, 724, 726], "mse_v2": [231, 311, 353, 364, 435], "hawq_v2": [231, 364, 435], "docstr": [231, 446], "workload": [231, 624, 627, 697, 715], "insight": [231, 624, 636, 660, 715, 721, 726, 727], "copi": [231, 343, 627, 656, 657, 701], "deepcopi": [231, 656], "model_origin": [231, 427, 719], "qat_op_name_dict": 231, "low_memory_usag": 231, "hpoconfig": 231, "xgb": 231, "bo": 231, "intermediatelayersknowledgedistillationlossconfig": [231, 661], "relationship": [231, 697], "student_layer_nam": 231, "student_layer_output_process": 231, "teacher_layer_nam": 231, "teacher_layer_output_process": 231, "desir": [231, 259, 263, 301, 304, 638, 639, 714, 723, 725], "serv": [231, 381, 569, 600, 703, 708, 709, 710], "numer": [231, 319, 372, 391, 639, 676, 715, 717, 720], "abbrevi": 231, "l1": 231, "selfknowledgedistillationlossconfig": [231, 661, 675], "student1_layer_name1": 231, "teacher_layer_name1": 231, "student2_layer_name1": 231, "student1_layer_name2": 231, "teacher_layer_name2": 231, "student2_layer_name2": 231, "soft": 231, "hard": [231, 657, 660], "resblock": 231, "deepst": 231, "02": [231, 729], "mixedprecisionconfig": [231, 373, 446, 675, 676], "mixedprecis": [231, 320, 675], "won": [231, 717, 720], "work": [231, 310, 347, 600, 635, 638, 656, 657, 661, 690, 693, 701, 719, 720, 721, 723, 724], "mix_precis": [231, 364, 446, 675, 676], "converted_model": [231, 373, 675, 676], "exportconfig": 231, "14": [231, 308, 309, 665, 671, 710, 729], "dynamic_ax": [231, 309, 665], "qlinear": [231, 248, 255, 291, 298, 319, 372, 637, 685], "ax": [231, 309], "onnxqlinear2qdqconfig": 231, "onnxqlinear2qdq": 231, "torch2onnxconfig": [231, 665], "torch2onnx": [231, 306, 311, 364], "qdq_op_fp32_bia": 231, "qdq_op_int32_bia": 231, "qdq_op_fp32_bias_qdq": 231, "resnet50": [231, 636, 660, 663, 665, 676, 678, 682, 714, 717, 722, 729], "int8_onnx_config": [231, 665], "randn": [231, 665], "224": [231, 259, 301, 636, 658, 663, 665, 668, 675, 678, 697, 725, 728], "batch_siz": [231, 236, 238, 243, 244, 245, 246, 247, 266, 279, 281, 286, 287, 288, 289, 290, 309, 566, 634, 657, 658, 663, 665, 669, 675, 678, 717], "tf2onnxconfig": [231, 665], "tf2onnx": [231, 306, 311, 364], "output_graph": 231, "dyna": [231, 311, 324, 364, 634, 670, 716], "sigopt": [232, 233, 275, 276, 311, 364, 715], "tpe": [232, 233, 275, 276, 311, 364], "sigopttunestrategi": [234, 277], "q_dataload": [234, 235, 277, 278, 351, 352, 354, 355, 356, 357, 428, 431, 432, 433, 434, 436, 437, 438, 439, 669, 726], "eval_metr": [234, 235, 373, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 616, 674, 697, 717], "q_hook": [234, 235, 277, 278, 351, 352, 354, 355, 356, 357, 428, 431, 432, 433, 434, 436, 437, 438, 439], "yield": [234, 235, 244, 266, 277, 278, 287, 351, 373, 427, 431, 446, 616, 657, 717, 726], "well": [234, 235, 277, 278, 373, 427, 616, 634, 636, 656, 658, 714, 717, 721, 723, 728], "taken": [234, 235, 277, 278, 373, 427, 616, 717], "reserv": [234, 235, 277, 278], "abl": [234, 235, 277, 278, 373, 427, 616, 686, 695, 717], "tuner": [234, 235, 277, 278, 310, 347, 373, 427, 616, 717], "scalar": [234, 235, 277, 278, 373, 427, 616, 674, 717, 726], "pseudo": [234, 235, 277, 278, 427, 616, 720, 724], "someth": [234, 235, 248, 277, 278, 291, 427, 616], "fefin": [235, 278], "tpetunestrategi": [235, 278], "basedatalod": [236, 279, 566], "basedataload": [236, 241, 243, 279, 284, 286, 566], "last_batch": [236, 238, 243, 245, 266, 279, 281, 286, 288, 566, 657], "rollov": [236, 238, 243, 245, 266, 279, 281, 286, 288, 566, 657], "collate_fn": [236, 238, 239, 243, 245, 266, 279, 281, 282, 286, 288, 566, 657, 658], "batch_sampl": [236, 238, 243, 245, 266, 279, 281, 286, 288, 566, 657], "num_work": [236, 238, 243, 245, 266, 279, 281, 286, 288, 566, 657, 675, 717], "pin_memori": [236, 238, 243, 245, 266, 279, 281, 286, 288, 566, 657], "_generate_dataload": [236, 279, 566], "check_dataload": 237, "default_col": [238, 281], "outer": [238, 281], "defaultdataload": [238, 245, 281, 288], "style": [239, 253, 282, 296, 446, 656, 658, 669], "drop_last": [239, 244, 282, 287], "iterablefetch": [239, 282], "indexfetch": [239, 282], "base_dataload": [240, 283, 300, 311], "default_dataload": [240, 283, 300, 311], "fetcher": [240, 283, 300, 311], "mxnet_dataload": [240, 283, 300, 311], "onnxrt_dataload": [240, 283, 300, 311, 420], "pytorch_dataload": [240, 283, 300, 311], "tensorflow_dataload": [240, 283, 300, 311, 425], "mxnetdataload": [241, 284], "onnxrtbertdataload": [242, 285], "variant": [242, 285], "onnxrtdataload": [242, 285, 420], "pytorchdataload": [243, 286], "data_sourc": [244, 287, 619], "__iter__": [244, 248, 287, 291, 657, 658, 675], "matter": [244, 287, 719], "iterablesampl": [244, 287], "squential": [244, 287], "your": [244, 246, 287, 289, 600, 632, 656, 657, 658, 660, 663, 672, 675, 678, 681, 682, 683, 688, 689, 690, 692, 693, 695, 697, 701, 703, 708, 709, 710, 714, 715, 722, 724, 726, 727], "clear": [244, 287, 637, 667, 674, 675], "iterabledataset": [244, 248, 287, 291], "try": [244, 287, 633, 660, 698, 714, 717, 723, 726], "indexdataset": [244, 287], "__getitem__": [244, 248, 263, 287, 291, 304, 657, 658, 675], "__len__": [244, 248, 287, 291, 658], "batchsampl": [244, 287], "tfdatadataload": [245, 288], "tensorflow1": [245, 288], "coupl": [245, 288], "satisfi": [245, 288, 660, 671, 701], "tf1": [245, 288, 677], "although": [245, 288, 722], "tensorflowbertdataload": [245, 288], "tensorflowmodelzoobertdataload": [245, 288], "zoo": [245, 263, 288, 304, 636, 664, 668, 729], "tensorflowdataload": [245, 288, 425], "pytorchbertdataset": [246, 289], "model_typ": [246, 289, 627, 658], "tensordataset": [246, 289, 658], "repo": [246, 289, 630, 632, 658, 664, 688, 690, 692, 693, 730], "easi": [246, 289, 347, 665, 675, 698, 702, 715, 717, 720, 722], "squad": [246, 263, 289, 304, 316, 317, 319, 369, 370, 372, 658, 674, 714, 725, 729], "distilbert": [246, 289, 636, 658, 676, 715, 729], "xlnet": [246, 289, 658, 729], "xlm": [246, 289, 658, 729], "101": [246, 289, 319, 372, 674, 704, 723, 729], "2043": [246, 289], "2001": [246, 289], "onnxrtbertdataset": [246, 289], "data_dir": [246, 289, 658], "model_name_or_path": [246, 289, 658, 675, 683, 684, 699, 706, 709, 710, 718], "max_seq_length": [246, 263, 289, 304, 585, 658, 725], "do_lower_cas": [246, 262, 263, 289, 303, 304, 658, 725], "mrpc": [246, 289, 319, 372, 658, 674, 683, 706, 709, 710, 714, 726, 729], "dynamic_length": [246, 289, 658], "shortcut": [246, 289, 658], "longer": [246, 263, 289, 304, 658, 725], "shorter": [246, 263, 289, 304, 658, 725], "lowercas": [246, 289, 658], "choic": [246, 289, 637, 658, 674, 701, 723], "qqp": [246, 289, 658, 674, 729], "qnli": [246, 289, 658, 674, 729], "rte": [246, 289, 658, 674, 729], "st": [246, 289, 658, 674], "cola": [246, 289, 658, 674, 729], "mnli": [246, 289, 658, 674, 729], "wnli": [246, 289, 658, 674], "mobilebert": [246, 289, 658, 661, 729], "roberta": [246, 289, 658, 729], "uncas": [246, 263, 289, 304, 658, 725, 729], "load_and_cache_exampl": [246, 289], "convert_examples_to_featur": [246, 263, 289, 304], "max_length": [246, 289], "label_list": [246, 289, 319, 372], "output_mod": [246, 289], "pad_token": [246, 289], "pad_token_segment_id": [246, 289], "mask_padding_with_zero": [246, 289], "inputfeatur": [246, 263, 289, 304], "properti": [246, 289, 445, 672], "vocabulari": [246, 262, 263, 289, 303, 304, 725], "attention_mask": [246, 289, 675], "usual": [246, 289, 638, 660, 661, 700, 713, 714, 717, 718, 723], "NOT": [246, 289, 667], "token_type_id": [246, 289, 675], "segment": [246, 289, 313, 315, 366, 368, 632], "portion": [246, 289], "regress": [246, 289, 632, 660], "seq_length": [246, 289], "tensorflowbertdataset": [246, 289], "label_fil": [246, 263, 289, 304, 658, 725], "tfrecord": [246, 247, 248, 289, 290, 291, 658], "guid": [246, 289, 633, 636, 656, 658, 661, 671, 678, 686, 695, 730], "parsedecodebert": [246, 289], "tensorflowmodelzoobertdataset": [246, 247, 289, 290], "num_cor": [246, 247, 251, 289, 290, 294, 658], "28": [246, 247, 251, 289, 290, 294, 658, 729], "coco": [247, 254, 258, 290, 297, 315, 319, 368, 372, 674, 714], "parsedecodecoco": [247, 290], "cocorecorddataset": [247, 290], "interleav": [247, 290, 658], "parallel": [247, 290, 421, 426, 600, 658, 675, 702, 705, 726], "cocoraw": [247, 290, 658], "img_dir": [247, 290, 658], "val2017": [247, 290, 658], "anno_dir": [247, 290, 658], "annot": [247, 290, 315, 368, 446, 638, 639, 658, 674, 714, 726], "instances_val2017": [247, 290, 658], "jpg": [247, 251, 253, 290, 294, 296, 636, 658], "imag": [247, 248, 251, 253, 259, 263, 290, 291, 294, 296, 301, 304, 315, 368, 658, 663, 665, 714, 716, 723, 724, 725, 729], "coconpi": [247, 290, 658], "npy_dir": [247, 290, 658], "npy": [247, 290, 658], "tensorflowdataset": [248, 291], "pytorchdataset": [248, 291], "mxnetdataset": [248, 291], "onnxrtqldataset": [248, 291], "onnxrtitdataset": [248, 291], "IT": [248, 255, 291, 298, 715], "pytorchmxnetwrapdataset": [248, 291], "datafunc": [248, 291], "pytorchmxnetwrapfunct": [248, 263, 291, 304], "framework_dataset": [248, 291], "convent": [248, 291, 315, 368, 632, 661], "imageclassifi": [248, 291], "tensorflow_itex": [248, 251, 253, 255, 291, 294, 296, 298, 657, 716], "onnxrt_qdq": [248, 255, 291, 298, 716], "onnxrt_qlinearop": [248, 255, 263, 291, 298, 304, 716], "onnxrt_integerop": [248, 255, 263, 291, 298, 304, 716], "pytorch_ipex": [248, 255, 291, 298, 675, 716, 728], "pytorch_fx": [248, 255, 291, 298, 675, 716], "dataset_registri": [248, 291], "dataset_typ": [248, 291], "dataset_format": [248, 291], "data_format": [248, 259, 291, 301], "raw_imag": [248, 291], "overwrit": [248, 291, 688, 692], "download_url": [248, 291], "filenam": [248, 291, 571, 627, 658, 701], "md5": [248, 291], "address": [248, 291, 631, 656, 676, 697, 700, 703, 715], "gen_bar_updat": [248, 291], "check_integr": [248, 291], "fpath": [248, 291], "checksum": [248, 291], "calculate_md5": [248, 291], "chunk_siz": [248, 291], "cifar10": [248, 291, 658], "cifar100": [248, 291, 658], "databas": [248, 291, 703], "www": [248, 291, 658, 729], "toronto": [248, 291, 658], "kriz": [248, 291, 658], "cifar": [248, 291, 658, 729], "tar": [248, 291, 658, 660, 690, 693], "gz": [248, 291, 658, 660, 690, 693], "manual": [248, 291, 658, 678, 684, 686, 689, 703, 708, 709, 710, 714], "subset": [248, 251, 291, 294, 658, 700], "internet": [248, 291, 658, 697], "again": [248, 291, 658, 698, 700, 719], "pytorchcifar10": [248, 291], "mxnetcifar10": [248, 291], "tensorflowcifar10": [248, 291], "pytorchcifar100": [248, 291], "mxnetcifar100": [248, 291], "tensorflowcifar100": [248, 291], "mnist": [248, 291, 658, 663], "nation": [248, 291, 631], "institut": [248, 291], "standard": [248, 263, 291, 304, 611, 632, 638, 656, 660, 665, 674, 725, 726], "technologi": [248, 291, 673, 675], "fashionmnist": [248, 291, 658], "npz": [248, 291, 658], "idx1": [248, 291, 658], "ubyt": [248, 291, 658], "idx3": [248, 291, 658], "t10k": [248, 291, 658], "pytorchmnist": [248, 291], "mxnetmnist": [248, 291], "tensorflowmnist": [248, 291], "pytorchfashionmnist": [248, 291], "mxnetfashionmnist": [248, 291], "tensorflowfashionmnist": [248, 291], "imagefold": [248, 291, 658, 663, 675], "expect": [248, 291, 631, 632, 666, 673, 695, 717, 720, 726], "subfold": [248, 291, 698], "belong": [248, 291, 377, 717], "class_1": [248, 291, 658], "xxx": [248, 291, 658, 675], "png": [248, 291, 658], "xxy": [248, 291, 658], "xxz": [248, 291, 658], "class_n": [248, 291, 658], "123": [248, 291, 658, 725], "nsdf3": [248, 291, 658], "asd932_": [248, 291, 658], "categori": [248, 291, 314, 367, 654, 658, 685], "mxnetimagefold": [248, 291], "tensorflowtfrecorddataset": [248, 291], "tensorflowimagerecord": [248, 291], "imagenet": [248, 251, 259, 291, 294, 301, 634, 660, 675, 684, 700, 714, 724, 725, 728, 729], "000": [248, 291, 636, 658], "099": [248, 291, 658], "tensorflowvocrecord": [248, 291], "pascal": [248, 291], "voc": [248, 291, 319, 372], "2012": [248, 291], "00000": [248, 291], "00004": [248, 291], "00001": [248, 291], "00003": [248, 291], "dummydataset": [249, 250, 292, 293, 566], "127": [249, 250, 292, 293, 566, 658, 717, 723, 729], "stand_norm": [249, 250, 292, 293, 566, 658], "dummy_v2": [250, 293, 566, 658], "sparse_dummy_v2": [250, 293, 658], "label_shap": [250, 293, 566, 658], "sparsedummydataset": [250, 293], "dense_shap": [250, 293, 658], "sparse_ratio": [250, 293, 658], "imagenetraw": [251, 294, 658], "data_path": [251, 294, 658], "image_list": [251, 294, 658], "img1": [251, 294, 658], "img2": [251, 294, 658], "imgx": [251, 294, 658], "val_map": [251, 294, 658], "txt": [251, 294, 658, 660, 671, 697, 699, 700, 702, 703], "pytorchimagenetraw": [251, 294], "mxnetimagenetraw": [251, 294], "tensorflowimagenetraw": [251, 294], "inteltensorflow": [251, 253, 294, 296, 671], "tensorflowimagenetdataset": [251, 294], "onnxrtimagenetdataset": [251, 294], "bert_dataset": [252, 257, 295, 300, 311, 364], "coco_dataset": [252, 257, 295, 300, 311, 364], "dummy_dataset": [252, 257, 295, 300, 311, 364], "dummy_dataset_v2": [252, 257, 295, 300, 311, 364], "imagenet_dataset": [252, 257, 295, 300, 311, 364], "style_transfer_dataset": [252, 257, 295, 300, 311, 364], "styletransferdataset": [253, 296], "content_fold": [253, 296, 658], "style_fold": [253, 296, 658], "crop_ratio": [253, 296, 658], "resize_shap": [253, 296, 658], "image_format": [253, 296, 658], "holder": [253, 296, 658], "labelbalancecocorecordfilt": [254, 297], "balanc": [254, 297, 720, 723], "labelbalancecocorawfilt": [254, 297], "tensorflowfilt": [255, 298], "onnxrtqlfilt": [255, 298], "onnxrtitfilt": [255, 298], "pytorchfilt": [255, 298], "mxnetfilt": [255, 298], "filter_registri": [255, 298], "filter_typ": [255, 298], "__call__": [255, 298], "coco_filt": [256, 257, 299, 300, 311, 364], "imagenet_transform": [257, 260, 300, 302, 311, 364], "parsedecodecocotransform": 258, "quantizedinput": [259, 301, 725], "labelshift": [259, 301, 725], "label_shift": [259, 301, 725], "parsedecodeimagenet": [259, 301, 725], "proto": [259, 263, 301, 304, 725], "parsedecodeimagenettransform": [259, 301], "tensorflowtransposelastchannel": 259, "tensorflowshiftrescal": 259, "rescal": [259, 263, 304, 725], "tensorflowresizecropimagenettransform": [259, 301], "random_crop": [259, 301, 725], "resize_sid": [259, 301, 725], "resize_method": [259, 301], "bilinear": [259, 263, 301, 304, 725], "random_flip_left_right": [259, 301, 725], "mean_valu": [259, 301, 725], "channels_last": [259, 301, 678], "subpixel": [259, 301], "rgb": [259, 301], "seri": [259, 301, 636, 671, 675, 725], "applic": [259, 301, 639, 665, 678, 695, 697, 703, 704, 708, 709, 715, 720, 723, 724, 725, 727], "crop": [259, 263, 301, 304, 658, 725], "left": [259, 263, 301, 304, 689, 695, 723, 725], "std": [259, 263, 301, 304, 675, 725], "bilinearimagenettransform": [259, 301], "central_fract": [259, 301, 725], "875": [259, 301, 725], "fraction": [259, 301, 725], "onnxbilinearimagenettransform": [259, 301], "onnxresizecropimagenettransform": [259, 301], "std_valu": [259, 301], "229": [259, 301, 675], "225": [259, 301, 675], "resizewithaspectratio": [259, 301], "87": [259, 301, 729], "inter_pol": [259, 301], "cv2": [259, 301], "inter_area": [259, 301], "aspect": [259, 263, 301, 304, 725], "postprocess_cl": [261, 271, 675], "user_postprocess": [261, 271], "convert_to_unicod": [262, 303], "unicod": [262, 303], "assum": [262, 303, 315, 326, 368, 637, 667, 695], "load_vocab": [262, 303], "vocab_fil": [262, 263, 303, 304, 725], "convert_by_vocab": [262, 303], "vocab": [262, 303], "whitespace_token": [262, 303], "whitespac": [262, 303, 317, 370], "clean": [262, 303, 675], "piec": [262, 303, 312, 365, 674, 720], "fulltoken": [262, 303], "tokenzi": [262, 303], "basictoken": [262, 303], "punctuat": [262, 303, 312, 317, 365, 370], "lower": [262, 263, 303, 304, 317, 370, 432, 662, 714, 715, 717, 723, 725, 726], "wordpiecetoken": [262, 303], "unk_token": [262, 303], "unk": [262, 303], "max_input_chars_per_word": [262, 303], "wordpiec": [262, 263, 303, 304, 725], "concat_gener": [263, 304], "inc": [263, 304, 471, 631, 638, 678, 685, 695, 697, 702, 715, 716, 721, 726], "tensorflowtransform": [263, 304], "mxnettransform": [263, 304], "pytorchtransform": [263, 304], "onnxrtqltransform": [263, 304], "onnxrtittransform": [263, 304], "transform_registri": [263, 304], "transform_typ": [263, 304], "basetransform": [263, 304], "tensorflowwrapfunct": [263, 304], "transform_func": [263, 304], "pytorchmxnettransform": [263, 304], "get_torchvision_map": [263, 304], "torchvis": [263, 304, 664, 668, 678, 684, 698], "composetransform": [263, 304], "transform_list": [263, 304, 725], "compos": [263, 304, 619, 725], "croptoboundingbox": [263, 304, 725], "offset_height": [263, 304, 725], "offset_width": [263, 304, 725], "target_height": [263, 304, 725], "target_width": [263, 304, 725], "box": [263, 304, 315, 319, 368, 372, 633, 674, 678, 689, 695, 724, 725, 726], "coordin": [263, 304, 351, 431, 702, 725, 726], "top": [263, 304, 310, 319, 334, 339, 347, 372, 632, 674, 695, 698, 700, 725], "corner": [263, 304, 632, 637, 639, 725], "horizont": [263, 304, 725], "mxnetcroptoboundingbox": [263, 304], "onnxrtcroptoboundingbox": [263, 304], "tensorflowcroptoboundingbox": [263, 304], "resizewithratio": [263, 304, 725], "min_dim": [263, 304, 725], "800": [263, 304, 725], "max_dim": [263, 304, 725], "1365": [263, 304, 725], "constant_valu": [263, 304], "longest": [263, 304, 725], "side": [263, 304, 658, 689, 725], "exce": [263, 304, 720, 725], "tensorflowresizewithratio": [263, 304], "permut": [263, 304, 725], "tensorflowtranspos": [263, 304], "mxnettranspos": [263, 304], "pytorchtranspos": [263, 304], "randomverticalflip": [263, 304, 725], "tensorflowrandomverticalflip": [263, 304], "randomhorizontalflip": [263, 304, 675, 725], "tensorflowrandomhorizontalflip": [263, 304], "toarrai": [263, 304, 725], "pil": [263, 304, 725], "casttftransform": [263, 304], "castonnxtransform": [263, 304], "castpytorchtransform": [263, 304], "centercroptftransform": [263, 304], "center": [263, 304, 635, 636, 671, 725, 726], "paddedcentercroptransform": [263, 304], "crop_pad": [263, 304], "resizetftransform": [263, 304], "bicub": [263, 304, 725], "resizepytorchtransform": [263, 304], "randomcroptftransform": [263, 304], "randomresizedcroppytorchtransform": [263, 304], "08": [263, 304, 725, 729], "randomresizedcropmxnettransform": [263, 304], "randomresizedcroptftransform": [263, 304], "normalizetftransform": [263, 304], "deviat": [263, 304, 660, 725], "broadcast": [263, 304, 663, 725], "rescalekeraspretraintransform": [263, 304], "rescaletftransform": [263, 304], "rescaletransform": [263, 304], "alignimagechanneltransform": [263, 304], "must": [263, 304, 315, 368, 600, 632, 633, 638, 654, 657, 671, 717, 725], "pytorchalignimagechannel": [263, 304], "tondarraytransform": [263, 304], "resizemxnettransform": [263, 304], "resizetransform": [263, 304], "cropresizetftransform": [263, 304], "boundari": [263, 304, 725], "area": [263, 304, 315, 368, 674, 725], "pytorchcropresizetransform": [263, 304], "mxnetcropresizetransform": [263, 304], "cropresizetransform": [263, 304], "centercroptransform": [263, 304], "mxnetnormalizetransform": [263, 304], "pytorchnormalizetransform": [263, 304], "normalizetransform": [263, 304], "randomcroptransform": [263, 304], "randomresizedcroptransform": [263, 304], "get_final_text": [263, 304], "pred_text": [263, 304], "orig_text": [263, 304], "project": [263, 304, 630, 631, 632, 701, 715, 722, 726, 730], "squadexampl": [263, 304], "qas_id": [263, 304], "question_text": [263, 304], "doc_token": [263, 304], "orig_answer_text": [263, 304], "start_posit": [263, 304], "end_posit": [263, 304], "is_imposs": [263, 304], "answer": [263, 304, 316, 317, 369, 370, 631, 700, 714, 725, 729], "unique_id": [263, 304], "example_index": [263, 304], "doc_span_index": [263, 304], "token_to_orig_map": [263, 304], "token_is_max_context": [263, 304], "input_mask": [263, 304, 675], "segment_id": [263, 304, 675], "read_squad_exampl": [263, 304], "input_fil": [263, 304], "doc_strid": [263, 304, 725], "max_query_length": [263, 304, 725], "output_fn": [263, 304], "inputbatch": [263, 304], "collecttransform": [263, 304], "10833": [263, 304], "tfsquadv1posttransform": [263, 304], "n_best_siz": [263, 304, 725], "384": [263, 304, 725], "64": [263, 304, 634, 720, 723, 725, 729], "max_answer_length": [263, 304, 725], "30": [263, 304, 664, 668, 670, 725, 729], "nbest_predict": [263, 304, 725], "question": [263, 304, 316, 317, 369, 370, 631, 632, 636, 637, 671, 678, 702, 714, 723, 725, 729], "anoth": [263, 304, 312, 321, 365, 627, 660, 661, 688, 692, 725, 726], "long": [263, 304, 656, 666, 720, 725], "document": [263, 304, 446, 638, 639, 644, 663, 673, 676, 680, 690, 693, 694, 701, 702, 704, 714, 721, 725, 727], "chunk": [263, 304, 725], "tfmodelzoocollecttransform": [263, 304], "tfsquadv1modelzooposttransform": [263, 304], "squadv1": [263, 304, 725], "parsedecodevoctransform": [263, 304], "conf_fname_or_obj": [264, 273, 305, 310, 320, 321, 322, 323, 325, 334, 339, 347], "unnecessari": [264, 675], "setter": 266, "calib_dataload": [266, 348, 427, 450, 467, 468, 471, 633, 636, 657, 658, 660, 668, 669, 674, 675, 697, 698, 717, 718, 719, 720], "reason": [266, 631, 638, 657, 700, 720, 724, 726], "know": [266, 656, 663, 721], "metric_cl": [268, 372, 427, 675], "user_metr": [268, 372, 427], "recommend": [268, 372, 600, 637, 658, 667, 686, 689, 694, 696, 714, 716, 726], "set_backend": 269, "tensorflowimagefold": 291, "qlinear2qdq": [306, 311, 364], "qlinearop": [307, 660, 670, 686, 717, 729], "check_model": 307, "onnx_qlinear_to_qdq": 307, "input_name_to_nod": 307, "tf_to_fp32_onnx": 308, "tf_to_int8_onnx": 308, "int8_model": [308, 309, 637], "get_node_map": 309, "fp32_onnx_path": 309, "module_node_map": 309, "get_quantizable_onnx_op": 309, "quantize_nod": 309, "dynamic_quant_export": 309, "pt_fp32_model": 309, "pt_int8_model": 309, "weight_typ": 309, "s8": 309, "static_quant_export": 309, "_quantiz": [309, 394], "torch_to_fp32_onnx": 309, "do_constant_fold": 309, "torch_to_int8_onnx": 309, "across": [310, 320, 347, 373, 659, 675, 702, 705, 714, 718, 723, 726], "variou": [310, 320, 347, 373, 639, 670, 678, 705, 714, 716, 718], "dl": [310, 320, 334, 339, 347, 373, 660, 669, 682, 695, 715, 729], "bring": [310, 347, 689, 702, 723], "vari": [310, 334, 339, 347, 700, 714, 723, 729], "roc": [310, 319, 334, 339, 347, 372], "flexibl": [310, 334, 339, 347, 636, 661, 702, 714, 720], "techniqu": [311, 364, 629, 636, 670, 675, 678, 697, 713, 714, 715, 716, 717, 727, 728, 729], "bleu": [311, 313, 318, 364, 366, 371, 674, 714], "bleu_util": [311, 318, 364, 371], "coco_label_map": [311, 318, 364, 371], "coco_tool": [311, 318, 364, 371], "evaluate_squad": [311, 318, 364, 371], "f1": [311, 316, 318, 319, 364, 369, 371, 372, 663, 674, 675, 698, 722, 729], "basic_na": [311, 324, 364], "nas_util": [311, 324, 364], "pruner_legaci": [311, 364], "gradient_sensit": [311, 330, 364], "group_lasso": [311, 330, 364], "pruning_recip": [311, 364], "tile_pattern": [311, 335, 336], "prune_util": [311, 340, 364], "tuning_sampl": [311, 353, 359, 364, 435, 441], "tuning_spac": [311, 353, 359, 360, 362, 364, 435, 441, 442, 444], "tuning_struct": [311, 353, 359, 360, 361, 364, 435, 441, 442, 443], "auto_mixed_precis": [311, 353, 364, 435], "graph_optim": [311, 364], "mixed_precis": [311, 364, 373, 675], "model_convers": [311, 364], "pruning_v2": [311, 364], "unicoderegex": [312, 365], "hoc": [312, 365], "hack": [312, 365], "recogn": [312, 365, 726], "nondigit_punct_r": [312, 365], "compil": [312, 365, 675], "express": [312, 365, 631], "preced": [312, 365, 723, 726], "digit": [312, 365, 627, 715], "punct_nondigit_r": [312, 365], "symbol_r": [312, 365], "bleu_token": [312, 365], "mose": [312, 365], "smt": [312, 365], "mosesdecod": [312, 365], "mteval": [312, 365], "v14": [312, 365], "pl": [312, 365], "l954": [312, 365], "l983": [312, 365], "bilingu": [312, 365], "understudi": [312, 365], "qualiti": [312, 365, 656], "machin": [312, 365, 665, 671, 681, 695, 697, 703, 715, 723, 724], "translat": [312, 313, 365, 366, 714, 726], "natur": [312, 365, 665], "approxim": [312, 313, 365, 366, 638, 674, 720], "glue": [312, 319, 365, 372, 658, 674, 675, 684], "word": [312, 365, 656, 674, 714, 720, 729], "ngram": [312, 365, 674], "breviti": [312, 313, 365, 366, 674], "doe": [312, 365, 445, 656, 657, 658, 674, 675, 720, 721, 725], "beam": [312, 365, 674], "tensor2tensor": [313, 366], "bleu_hook": [313, 366], "compute_bleu": [313, 366], "reference_corpu": [313, 366], "translation_corpu": [313, 366], "max_ord": [313, 366], "use_bp": [313, 366], "against": [313, 366], "gram": [313, 366], "bleu_scor": [313, 366], "third": [315, 368, 632, 672], "parti": [315, 368, 632, 672, 717], "pycocotool": [315, 368, 666, 671], "noth": [315, 368, 726], "thu": [315, 368, 600, 675, 714, 717], "cannot": [315, 368, 633, 656, 666, 720, 724], "jonathanhuang": [315, 368], "image_id": [315, 368, 674], "invok": [315, 368, 600, 638], "groundtruth_dict": [315, 368], "exportgroundtruthtococo": [315, 368], "groundtruth_boxes_list": [315, 368], "groundtruth_classes_list": [315, 368], "max_num_class": [315, 368], "output_path": [315, 368], "detections_list": [315, 368], "exportdetectionstococo": [315, 368], "detection_boxes_list": [315, 368], "detection_scores_list": [315, 368], "detection_classes_list": [315, 368], "cocowrapp": [315, 368], "loadannot": [315, 368], "cocoevalwrapp": [315, 368], "agnostic_mod": [315, 368], "computemetr": [315, 368], "detection_typ": [315, 368], "bbox": [315, 368, 633, 674], "hold": [315, 351, 368, 431, 658], "iou_typ": [315, 368], "iou_thr": [315, 319, 368, 372, 674], "map_point": [315, 319, 368, 372, 674], "cocoev": [315, 368], "mscoco": [315, 368], "Then": [315, 368, 638, 660, 688, 690, 692, 693, 700, 723, 726], "exportsingleimagegroundtruthtococo": [315, 368], "next_annotation_id": [315, 368], "category_id_set": [315, 368], "groundtruth_box": [315, 368], "groundtruth_class": [315, 368], "groundtruth_mask": [315, 368], "groundtruth_is_crowd": [315, 368], "ingest": [315, 368], "here": [315, 368, 446, 638, 658, 663, 664, 665, 667, 668, 673, 674, 683, 690, 693, 695, 698, 701, 703, 717, 721, 722, 723, 729], "exportsingleimagedetectionstococo": [315, 368], "uniqu": [315, 348, 368, 717], "assign": [315, 368, 627, 663, 716, 726], "num_gt_box": [315, 368], "num_detect": [315, 319, 368, 372, 674, 675, 728], "image_height": [315, 368], "image_width": [315, 368], "detection_mask": [315, 368], "crowd": [315, 368], "insid": [315, 368, 600, 661, 662, 696, 714, 718, 726], "exportsingleimagedetectionboxestococo": [315, 368], "detection_box": [315, 368, 675, 728], "detection_scor": [315, 368, 675, 728], "detection_class": [315, 368, 675, 728], "exporsingleimagedetectionboxestococo": [315, 368], "exportsingleimagedetectionmaskstococo": [315, 368], "allenai": [316, 317, 369, 370], "bi": [316, 317, 369, 370], "att": [316, 317, 369, 370], "flow": [316, 317, 369, 370, 633, 634, 675], "f1_score": [316, 317, 369, 370], "ground_truth": [316, 317, 369, 370], "ground": [316, 317, 369, 370], "truth": [316, 317, 369, 370], "metric_max_over_ground_truth": [316, 317, 369, 370], "metric_fn": [316, 317, 369, 370], "exact_match_scor": [316, 369], "exact": [316, 369], "articl": [316, 317, 369, 370], "paragraph": [316, 317, 369, 370], "qa": [316, 317, 369, 370, 636], "normalize_answ": [317, 370], "newlin": [317, 370, 627], "tab": [317, 370, 695, 724], "harmon": [317, 319, 370, 372], "recal": [317, 319, 370, 372], "answer_start": [317, 370], "177": [317, 370, 729], "denver": [317, 370], "bronco": [317, 370], "nfl": [317, 370], "afc": [317, 370], "super": [317, 370, 634], "bowl": [317, 370], "50": [317, 370, 634, 638, 700, 714, 723, 729], "56be4db0acb8001400a502ec": [317, 370], "percentag": [317, 370, 391, 655, 720, 728], "tensorflowmetr": [319, 372], "maintain": [319, 372, 600, 631, 632, 656, 677, 678, 690, 693, 697, 702, 703, 714, 720, 721], "pytorchmetr": [319, 372], "mxnetmetr": [319, 372], "onnxrtqlmetr": [319, 372], "onnxrtitmetr": [319, 372], "metric_registri": [319, 372], "metric_typ": [319, 372], "decorator_metr": [319, 372], "basemetr": [319, 372, 427], "single_output": [319, 372], "hvd": [319, 372, 663], "wrappytorchmetr": [319, 372], "wrapmxnetmetr": [319, 372], "wraponnxrtmetr": [319, 372], "proport": [319, 372], "pred_list": [319, 372], "pytorchloss": [319, 372], "mae": [319, 372, 674], "compare_label": [319, 372, 427, 674], "rmse": [319, 372, 674, 726], "tensorflowtopk": [319, 372], "k": [319, 372, 427, 674, 697, 714], "among": [319, 372, 689, 723], "outcom": [319, 372], "num_correct": [319, 372], "num_sampl": [319, 372], "generaltopk": [319, 372], "cocomapv2": [319, 372, 674], "anno_path": [319, 372, 674], "map_kei": [319, 372], "detectionboxes_precis": [319, 372], "output_index_map": [319, 372, 674], "tensorflowmap": [319, 372], "tensorflowcocomap": [319, 372], "tensorflowvocmap": [319, 372], "squadf1": [319, 372, 674], "miou": [319, 372], "num_class": [319, 372], "21": [319, 372, 683, 684, 706, 709, 710, 715, 723, 729], "iou": [319, 372], "intersect": [319, 372, 637, 674], "union": [319, 372, 385, 390, 391, 393, 397, 404, 616, 674, 706], "onnxrtglu": [319, 372], "dlrm": [319, 372], "modelconvers": 321, "typic": [321, 348, 634, 636, 662, 664, 668, 700, 714, 729], "basicna": 322, "model_build": [322, 325], "conf_fnam": 322, "nasbas": [325, 634], "nas_registri": 326, "nas_method": 326, "create_search_space_pool": 326, "idx": [326, 658], "find_pareto_front": 326, "pareto": [326, 634], "front": [326, 634], "n_point": 326, "n_metric": 326, "n_pareto_point": 326, "gradientsensitivityprun": 328, "pytorchmodel": [328, 329, 331, 332, 333, 382], "overwritten": [328, 329, 331, 332, 333, 683], "grouplassoprun": 329, "legaci": 330, "basicmagnitudeprun": 331, "patternlockprun": [332, 344], "pruner_registri": 333, "clase": 333, "pruningconf": [334, 339], "tfpruningcallback": [334, 339], "input_model": [334, 339, 677, 698, 699, 700, 724], "pure": [334, 339, 714], "pattern_registri": 337, "pattern_typ": 337, "patternbas": 337, "mask_shap": [337, 338], "is_contigu": 337, "tile": [338, 656], "tilepatternbas": 338, "tilepattern_1x1": 338, "1x1": [338, 661, 675, 714], "tilepattern_2x2": 338, "2x2": [338, 723], "tilepattern_1x16": 338, "1x16": 338, "tilepattern_4x1": 338, "tilepattern_1x2": 338, "1x2": [338, 723], "patternnxm": 342, "patternninm": 342, "reset_non_value_to_default": 343, "parse_not_to_prun": 343, "update_frequency_on_step": [344, 716], "max_sparsity_ratio_per_lay": [344, 716], "magnitudeprun": 344, "snipprun": 344, "snipmomentumprun": 344, "moreoev": 344, "quantconf": 347, "separ": [348, 631, 656, 669, 672, 703, 705, 713, 716], "opt_model": [348, 675], "fulli": [348, 675, 703, 717, 723], "train_func": [348, 616, 663, 675, 717], "automixedprecisiontunestrategi": [349, 429], "basictunestrategi": [350, 430], "polici": [350, 354, 428, 430, 436, 631, 636, 728, 730], "bayesiantunestrategi": [351, 431], "acq_max": [351, 431], "ac": [351, 431], "gp": [351, 431], "y_max": [351, 431], "n_warmup": [351, 431], "10000": [351, 431, 714], "n_iter": [351, 431], "acquisit": [351, 431], "gaussian": [351, 431, 726], "relev": [351, 431, 638, 639, 656, 700, 714], "acq": [351, 431], "randomst": [351, 431], "scipi": [351, 431], "x_max": [351, 431], "targetspac": [351, 431], "pbound": [351, 431], "9527": [351, 431, 675, 728], "bayesianoptim": [351, 431], "exhaustivetunestrategi": [352, 433], "msetunestrategi": [354, 436], "mse_v2tunestrategi": [355, 437], "revert": [355, 363, 437, 445, 726], "randomtunestrategi": [356, 438], "strategy_registri": [357, 439, 726], "tunestrategi": [357, 439, 726], "tuningsamplerregistri": 360, "tuningsampl": [360, 442], "tuningord": [360, 442], "tuningspac": [360, 361, 442, 443], "tuning_order_lst": [360, 442], "initial_op_tuning_cfg": [360, 442], "modelwisetuningsampl": [360, 442], "tuning_items_prior": [360, 442], "op_dtype_dict": [360, 442], "optuningconfig": [360, 361, 362, 442, 443, 444], "optypewisetuningsampl": [360, 442], "opwisetuningsampl": [360, 442], "fallbacktuningsampl": [360, 442], "op_dtyp": [360, 442], "skip_first": [360, 442], "smoothquantsampl": [360, 442], "tuningitem": [361, 443], "item_typ": [361, 443], "pattern_to_intern": [361, 443], "default_dtyp": [361, 443], "pattern_to_path": [361, 443], "quant_mode_from_pattern": [361, 443], "internal_pattern": [361, 443], "initial_tuning_cfg_with_quant_mod": [361, 443], "op_name_typ": [361, 443], "step1": [361, 443], "step2": [361, 443], "complet": [361, 443, 637, 638, 714, 717, 726, 728, 729], "step3": [361, 443], "step4": [361, 443], "step5": [361, 443], "op_quant_mod": [362, 444], "ordereddefaultdict": [363, 445], "extract_data_typ": [363, 445], "reverted_data_typ": [363, 445], "signed_flag": [363, 445], "get_adaptor_nam": [363, 445], "experiment": [364, 634, 658, 662, 663, 665, 671, 675, 714, 716, 717, 721, 725], "base_model": [364, 375], "keras_model": [364, 375], "mxnet_model": [364, 375], "nets_factori": [364, 375, 567], "onnx_model": [364, 375, 385, 387, 388, 390, 391, 393, 402, 420, 698], "tensorflow_model": [364, 375, 425, 700], "torch_model": [364, 375], "collect_layer_histogram": [364, 620], "create_obj_from_config": [364, 620], "kl_diverg": [364, 620], "load_huggingfac": [364, 620, 675], "neural_insights_util": [364, 620], "weights_detail": [364, 620], "sub_class": [372, 427], "register_customer_metr": 372, "topk": [372, 427, 663, 674, 675, 697, 717], "frozen": [373, 381, 427, 569, 677], "savedmodel": [373, 381, 427, 569, 729], "onnx_ml_pb2": [373, 677], "hybirdblock": [373, 427], "basemodel": [374, 467, 468, 471, 569], "plai": [374, 569, 715, 720, 723], "role": [374, 569, 720, 723], "kerasmodel": [376, 569], "get_model_fwk_nam": 377, "fwk": 377, "mxnetmodel": 378, "net": [379, 570], "tfslimnetsfactori": [379, 570], "get_model_typ": [381, 569], "validate_graph_nod": [381, 569], "validate_and_inference_input_output": [381, 569], "graph_sess": [381, 569], "graph_def_sess": [381, 569], "frozen_pb_sess": [381, 569], "load_saved_model": [381, 569], "saved_model_tag": [381, 569], "signatur": [381, 569], "metagraphdef": [381, 569], "keras_sess": [381, 569], "slim_sess": [381, 569], "checkpoint_sess": [381, 569], "estimator_sess": [381, 569], "saved_model_sess": [381, 569], "tensorflowbasemodel": [381, 425, 569], "tensorflowsavedmodelmodel": [381, 569], "tensorflowllmmodel": [381, 569], "exceed": [381, 569], "2gb": [381, 569], "tensorflowqatmodel": [381, 569], "tensorflowcheckpointmodel": [381, 569], "tensorflowmodel": [381, 569], "pytorchbasemodel": 382, "pytorchfxmodel": 382, "ipexmodel": 382, "driven": [383, 636, 675, 695, 712, 724], "objective_registri": 383, "objective_custom_registri": 383, "obj_cl": 383, "eural_compressor": 383, "objective_cl": 383, "user_object": 383, "__class__": 383, "__name__": 383, "objective_cfg": 383, "usr_cfg": 383, "user_obj_cfg": 383, "easili": [383, 637, 679, 683, 695, 712, 723], "peak": [383, 712], "multiobject": 383, "metric_criterion": 383, "metric_weight": 383, "obj_criterion": 383, "obj_weight": 383, "is_measur": 383, "pathlib": [385, 388, 390, 391, 393, 396, 397], "quant_func": 385, "data_read": [385, 390, 391, 394], "calibrationdataread": [385, 387, 388, 390, 391, 394, 396, 397, 398], "weight_dtyp": [390, 391, 393, 399, 465, 469], "weight_bit": [390, 391, 393, 397, 399, 638], "weight_group_s": [390, 391, 393, 399], "weight_sym": [390, 391, 393, 399, 465, 469], "91": [390, 720, 723, 729], "apply_awq_on_model": 390, "quant_config": [390, 391, 393, 396, 404, 454, 455, 467, 471, 571, 610, 615], "calibration_data_read": [390, 391, 396, 397], "nnx": 390, "return_modelproto": [391, 393], "stabil": [391, 720], "optionm": [391, 393], "apply_gptq_on_model": 391, "apply_rtn_on_model": 393, "nodeproto": 394, "reader": 394, "smooth_quant_entri": [396, 656], "smoohquantconfig": [396, 399], "rtn_quantize_entri": 396, "rtnconfig": [396, 397, 399, 404, 605, 607, 615], "gptq_quantize_entri": 396, "gptqconfig": [396, 397, 399, 607], "awq_quantize_entri": 396, "awqconfig": [396, 399], "model_input": 397, "base_tun": [397, 468, 606], "expand": 397, "eatch": 397, "eval": [397, 633, 656, 657, 660, 678, 717, 724], "l139": 398, "act_dtyp": [399, 465, 469], "get_default_rtn_config": [399, 607], "get_default_gptq_config": [399, 607], "get_default_awq_config": 399, "fusedconv": 399, "calib_it": 399, "auto_alpha_arg": [399, 469, 723], "alpha_min": [399, 723], "alpha_max": [399, 723], "alpha_step": [399, 723], "attn_method": 399, "get_default_sq_config": [399, 469], "register_algo": [404, 571, 615, 656], "algos_map": [404, 571, 615], "example_algo": [404, 571, 615], "get_qrange_for_qtyp": 404, "check_model_with_infer_shap": 404, "parserfactori": 406, "onnxrtparserfactori": 408, "onnxprofilingpars": 410, "respons": [410, 411, 415, 708, 709, 710, 717], "profilingpars": 411, "profilingresult": 412, "total_execution_tim": 412, "accelerator_execution_tim": 412, "cpu_execution_tim": 412, "op_run": 412, "op_defin": 412, "tensorflowparserfactori": 413, "tensorflowprofilingpars": 415, "profilerfactori": [416, 418, 423], "create_onnx_config": 421, "ort": 421, "sessionopt": 421, "delete_assign": 426, "create_tf_config": 426, "tf_modul": 426, "configproto": 426, "set_eager_execut": 426, "entir": [427, 616, 633, 638, 639, 655, 702, 714], "autotunestrategi": 428, "conservativetunestrategi": 432, "o0": [432, 726], "who": [432, 631], "hawq_v2tunestrategi": 434, "made": [434, 637, 717, 721, 726], "impact": [434, 714, 721, 726], "tunestrategymeta": 439, "metaclass": 439, "lowerbitssampl": 442, "blockfallbacktuningsampl": 442, "op_block_lst": 442, "target_dtyp": 442, "alpha_list": 442, "weightonlyquantsampl": 442, "quantopt": 445, "quant_typ": 445, "quant_opt": 445, "preprocess_user_cfg": 445, "op_user_cfg": 445, "op_user_cfg_modifi": 445, "build_slave_faker_model": 445, "slave": [445, 726], "virtual": [445, 715], "classregist": 445, "fun": 446, "attribute1": 446, "module_debug_level1": 446, "debug": [446, 623, 660, 688, 692, 696, 726, 727], "function1": 446, "param1": 446, "param2": 446, "parameter1": 446, "parameter2": 446, "function2": 446, "pep": [446, 656], "484": [446, 729], "output_model": [446, 675, 698, 700, 724], "function3": 446, "section": [446, 639, 656, 660, 661, 662, 695, 698, 701, 714, 716, 720, 728], "restructuredtext": 446, "liter": 446, "generator1": 446, "example_gener": 446, "exampleclass": 446, "param3": 446, "public": [446, 631, 690, 693], "attr1": 446, "attr2": 446, "attr5": 446, "api_doc_exampl": 447, "smoothquantconfig": [450, 469], "calib_iter": [450, 454, 467, 468, 471, 638], "scaler": 451, "kerasqueri": 454, "kerasconfigconvert": 454, "staticquantconfig": [454, 455, 465, 469, 571], "tensorflowconfig": 455, "tensorflowconfigconvert": 455, "weight_granular": [465, 469], "per_tensor": [465, 469, 638, 639, 667, 717, 728], "act_sym": [465, 469], "act_granular": [465, 469], "base_config": [465, 467, 469, 471, 610], "get_all_registered_config": 465, "get_default_static_quant_config": [465, 469], "static_quant_entri": 467, "weight_algorithm": 469, "act_algorithm": 469, "record_max_info": 469, "weight_clip": 469, "default_sq_alpha_arg": 469, "quantize_model": 471, "quantize_model_with_single_config": 471, "dummydatasetv2": 566, "itex_instal": 571, "instal": [571, 663, 666, 668, 678, 680, 683, 686, 690, 693, 695, 696, 698, 699, 700, 730], "combine_histogram": [571, 627], "old_hist": [571, 627], "old": [571, 627, 675, 721], "get_all_fp32_data": [571, 627], "get_tensor_histogram": [571, 627], "scale_info": [571, 627], "dequantize_weight": [571, 627], "weight_tensor": [571, 627], "min_filter_tensor": [571, 627], "max_filter_tensor": [571, 627], "dump_data_to_loc": [571, 627], "pkl": [571, 627, 699], "load_data_from_pkl": [571, 627], "cpuinfo": [571, 627], "statist": [571, 583, 627, 628], "header": [571, 583, 627, 666], "field_nam": [571, 583, 627], "output_handl": [571, 583, 627], "printer": [571, 583, 627], "captureoutputtofil": [571, 627], "tmp_file_path": [571, 627], "stream": [571, 627, 729], "sy": [571, 627, 656, 681], "stderr": [571, 627], "captur": [571, 627], "lazyimport": [571, 627], "lazi": [571, 627], "till": [571, 627, 726], "static_quant": 582, "run_fn": [582, 585, 606, 610], "carri": [582, 714], "warm": 583, "dump_model_op_stat": 583, "get_quantizable_ops_recurs": 583, "use_full_rang": [584, 597, 607], "use_auto_scal": 584, "use_mse_search": [584, 597, 607], "use_layer_wis": [585, 607], "run_arg": [585, 606, 610], "hqqmoduleconfig": 587, "immut": 587, "constructor": 587, "quant_api": 589, "device_typ": 600, "_dtype": 600, "cache_en": 600, "manag": [600, 616, 619, 675, 678, 679, 689], "region": [600, 723], "chosen": [600, 638, 655], "enter": [600, 689, 695, 703], "half": [600, 676, 686], "hpu": 600, "float8_e4m3fn": 600, "autocastmodel": 600, "affect": [600, 723], "dataparallel": 600, "distributeddataparallel": 600, "torch_dtyp": [600, 639], "rtn_entri": 605, "configs_map": 605, "use_sym": 607, "use_double_qu": 607, "double_quant_dtyp": 607, "double_quant_bit": 607, "double_quant_use_sym": 607, "double_quant_group_s": 607, "act_ord": 607, "static_group": [607, 720], "get_default_hqq_config": 607, "hqqconfig": 607, "hqq": 607, "register_acceler": 611, "ellipsi": 611, "cuda_acceler": 611, "cpu_acceler": 611, "loop": [616, 633, 634, 638, 639, 667, 705, 722, 726], "compressionmanag": 616, "deal": 616, "pruningconfig": 616, "orchestr": [616, 636, 670, 727], "on_train_begin": [616, 633, 661, 662, 675, 713, 714, 717], "train_loop": [616, 675, 713], "on_epoch_begin": [616, 619, 661, 662, 675, 713], "on_step_begin": [616, 619, 661, 662, 675, 713, 714], "on_after_compute_loss": [616, 661, 662, 675, 713], "on_before_optimizer_step": [616, 661, 662, 675, 713, 714], "on_step_end": [616, 619, 661, 662, 675, 713], "on_epoch_end": [616, 619, 661, 662, 675, 713], "on_train_end": [616, 661, 662, 675, 713, 714, 717], "path_to_sav": 616, "top1": [616, 674, 697, 714, 717, 729], "callbacks_list": 616, "layerhistogramcollector": 617, "layer_tensor": 617, "include_lay": 617, "get_func_from_config": 619, "func_dict": 619, "get_preprocess": 619, "get_metr": 619, "get_postprocess": 619, "get_algorithm": 619, "create_dataset": 619, "cfg_preprocess": 619, "cfg_filter": 619, "create_dataload": 619, "dataloader_cfg": 619, "create_eval_func": 619, "postprocess_cfg": 619, "baselin": [619, 722, 723, 724], "create_train_func": 619, "train_cfg": 619, "Their": 619, "auxiliari": 620, "optimizedmodel": 622, "from_pretrain": [622, 675], "save_for_huggingface_upstream": [622, 675], "saved_dir": [622, 720], "msg": [623, 704, 708, 709], "fatal": 623, "warn": [623, 656], "alia": [623, 627, 680, 685], "register_neural_insights_workload": 624, "workload_loc": [624, 627], "workload_mod": 624, "workload_nam": 624, "uuid": 624, "update_neural_insights_workload": 624, "workload_uuid": 624, "update_neural_insights_workload_accuracy_data": 624, "baseline_accuraci": 624, "optimized_accuraci": 624, "get_model_path": 624, "is_int8_model": 626, "load_weight_onli": 626, "checkpoint_dir": 626, "history_cfg": 626, "best_configur": 626, "best_model_weight": 626, "snapshot": [626, 699], "recover_model_from_json": 626, "json_file_path": 626, "cfg_from_fil": 627, "yaml_fil": [627, 658, 663], "time_limit": 627, "get_siz": 627, "seen": [627, 637], "compute_spars": 627, "fault_tolerant_fil": 627, "equal_dict": 627, "d2": 627, "compare_kei": 627, "ignore_kei": 627, "ignor": [627, 655, 658, 720, 723, 726], "get_tuning_histori": 627, "tuning_history_path": 627, "offlin": [627, 631, 675, 717, 723], "str2arrai": 627, "global_st": 627, "show_memory_info": 627, "hint": 627, "dump_class_attr": 627, "compare_object": 627, "obj1": 627, "obj2": 627, "ignore_attr": 627, "comparison": [627, 720, 721, 724], "alias_param": 627, "param_nam": 627, "param_alia": 627, "alias": [627, 656], "print_tabl": 627, "column_map": 627, "table_entri": 627, "titl": [627, 672, 696, 726], "insert_newlin": 627, "prettyt": 627, "column": [627, 720, 723], "handler": [627, 726], "row": [627, 660, 698, 723], "decim": 627, "get_tensors_info": 627, "get_weights_detail": 627, "weightdetail": 627, "dump_tabl": 627, "file_typ": 627, "csv": [627, 634, 698, 699], "dump_table_to_csv": 627, "get_number_of_socket": 627, "platform": [627, 636, 670, 678, 686, 705, 715, 717], "opentri": 627, "activation_min": 627, "activation_max": 627, "print_op_list": 627, "get_op_list": 627, "minmax_file_path": 627, "input_model_tensor": 627, "optimized_model_tensor": 627, "activation_min_max": 627, "calculate_ms": 627, "mse_metric_gap": 627, "fp32_tensor": 627, "dequantize_tensor": 627, "euclidean": [627, 661], "distanc": [627, 661], "check_key_exist": 627, "weightsdetail": 628, "input_tensor_data": 628, "optimized_tensor_data": 628, "weightsstatist": 628, "welcom": [630, 631, 632, 636, 697, 704, 730], "interest": [631, 636, 697, 724], "foster": 631, "particip": [631, 705], "commun": [631, 697], "harass": 631, "experi": [631, 678, 700, 722, 723, 726], "everyon": 631, "regardless": 631, "ag": 631, "bodi": 631, "ethnic": 631, "characterist": 631, "gender": 631, "educ": 631, "socio": 631, "econom": 631, "race": 631, "religion": 631, "sexual": 631, "orient": 631, "contribut": [631, 636, 714], "inclus": 631, "Being": 631, "viewpoint": 631, "gracefulli": 631, "focus": [631, 637], "empathi": 631, "toward": [631, 661], "member": [631, 637], "unaccept": 631, "imageri": 631, "unwelcom": 631, "troll": 631, "insult": 631, "derogatori": 631, "polit": 631, "attack": 631, "privat": 631, "publish": [631, 672, 673, 676, 696, 723], "electron": 631, "explicit": 631, "permiss": 631, "inappropri": 631, "profession": 631, "clarifi": 631, "appropri": [631, 655, 723], "fair": 631, "action": [631, 690, 693], "edit": 631, "reject": 631, "commit": [631, 632], "wiki": 631, "ban": 631, "deem": 631, "threaten": 631, "offens": 631, "harm": 631, "mail": 631, "social": [631, 715], "media": [631, 715], "account": [631, 722, 726], "appoint": 631, "onlin": [631, 722], "event": [631, 724], "abus": 631, "report": [631, 632, 636, 705, 722], "contact": [631, 721, 722], "complaint": 631, "review": [631, 632, 636, 715], "investig": [631, 656, 700], "circumst": [631, 716], "oblig": [631, 701], "confidenti": [631, 697], "regard": [631, 719], "incid": 631, "good": [631, 717, 726], "faith": 631, "repercuss": 631, "leadership": 631, "faq": [631, 636], "page": [631, 632, 697, 700, 701], "send": [632, 638], "view": [632, 636, 664, 686, 695, 701, 721], "star": 632, "repositori": [632, 690, 693], "button": [632, 670, 689, 695], "fork": [632, 690, 693], "clone": [632, 660, 671, 688, 692, 697, 699, 700, 702, 703], "pc": 632, "git": [632, 660, 666, 671, 697, 699, 700, 702, 703], "modif": [632, 637, 667, 683, 702], "checkout": 632, "my": 632, "push": [632, 714, 720, 723], "cover": [632, 665, 669, 715], "would": [632, 675, 699, 714, 717, 723], "adopt": [632, 678, 714, 715, 723], "certif": [632, 697], "agre": 632, "pr": [632, 657, 674, 690, 693, 721], "At": [632, 638, 701, 705, 726], "approv": 632, "solv": [632, 717, 721], "licens": 632, "azur": [632, 636, 715], "devop": 632, "ci": 632, "cloud": [632, 636, 705, 715], "deploi": [632, 661, 675, 701, 705, 720, 726], "e16": 632, "v5": 632, "scan": [632, 636], "pylint": 632, "bandit": 632, "copyright": [632, 672], "docstyl": 632, "spellcheck": 632, "dco": 632, "pytest": 632, "No": [632, 656, 666, 675, 703, 704, 715], "failur": [632, 633], "fault": 632, "coverag": 632, "runtim": [632, 636, 637, 638, 640, 657, 660, 664, 667, 670, 676, 680, 685, 686, 716, 720, 721, 726], "submit": [632, 702, 705, 715], "bug": [632, 636], "intend": 632, "safe": 632, "collabor": [632, 636, 680, 686], "adher": 632, "toolkit": [633, 671, 678, 686, 715, 727], "tracer": 633, "resolv": [633, 635], "floatfunct": 633, "cat": [633, 665, 681, 708, 709, 710], "done": [633, 661, 662, 679, 695, 704, 708, 709, 714, 717], "10004": [633, 634, 637, 657, 661, 662, 663, 667, 670, 676, 713, 716, 718, 720, 728], "neural_compressor": [633, 634, 636, 639, 654, 656, 657, 658, 660, 661, 662, 663, 665, 668, 669, 674, 675, 676, 677, 697, 698, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 725, 726, 728], "conduct": [633, 675, 683, 695, 726, 727], "imper": 633, "therefor": [633, 675, 698, 700, 714, 717, 718, 721, 723], "lot": [633, 700, 723], "As": [633, 638, 657, 661, 674, 675, 689, 700, 714, 720, 726], "successfulli": [633, 663, 704, 708, 709, 710, 715], "suggest": [633, 656, 722], "traceabl": 633, "proxi": 633, "tutori": [633, 686, 715, 727], "prototyp": 633, "html": [633, 636, 638, 655, 663, 670, 690, 693, 696, 698, 704, 708, 717], "highlight": 633, "untrac": 633, "ssd": [633, 665, 729], "resnet34": [633, 729], "r34": 633, "bboxes_labels_scor": 633, "prob": 633, "45": [633, 729], "max_output": 633, "zip": [633, 704, 708, 709], "dbox": 633, "dlabel": 633, "dscore": 633, "decode_singl": 633, "autom": [634, 678, 695, 696, 715, 723], "artifici": 634, "ann": 634, "par": [634, 705], "outperform": 634, "propos": [634, 637, 661, 676, 720, 723], "potenti": [634, 660], "lie": [634, 655], "predictor": 634, "shown": [634, 657, 660, 661, 674, 675, 689, 698, 700, 712, 713, 714, 718, 723, 726], "figur": [634, 688, 689, 692, 718], "popul": 634, "inner": 634, "evolutionari": 634, "until": [634, 638, 726], "conclud": 634, "met": [634, 667, 717, 724], "yet": [634, 690, 693, 696, 703, 717], "simplest": [634, 655, 681], "launcher": [634, 636, 661, 662, 686, 727], "agent": 634, "nsga2": 634, "supernet": 634, "ofa_mbv3_d234_e346_k357_w1": 634, "acc": [634, 705, 714, 724, 729], "mac": [634, 696], "num_ev": 634, "250": [634, 714], "results_csv_path": 634, "search_result": 634, "dataset_path": 634, "ilsvrc2012": 634, "aim": [634, 636, 673, 678, 714, 723, 726, 727], "mobilenetv3": 634, "lt": [634, 658, 729], "wmt": 634, "en": 634, "de": 634, "guidelin": [635, 636], "mainstream": [636, 727], "workflow": [636, 638, 639, 660, 661, 665, 671, 676, 690, 693, 697, 724, 727], "particular": [636, 714, 720], "wide": [636, 664, 676, 714, 717, 729], "hardwar": [636, 637, 661, 670, 675, 695, 714, 715, 716], "xeon": [636, 671, 672, 673, 676, 715, 717, 719, 729], "scalabl": [636, 671, 673, 676, 715, 717, 719], "processor": [636, 673, 676, 703, 715, 717, 719], "flex": [636, 671], "amd": [636, 671, 729], "arm": [636, 670, 671, 729], "nvidia": [636, 655, 670, 671, 729], "llama2": 636, "falcon": [636, 673, 714, 723, 729], "j": [636, 673, 699, 714, 723, 729], "bloom": [636, 714, 723, 729], "broad": [636, 670, 684, 727], "stabl": [636, 671, 714, 715], "diffus": [636, 715], "vision": [636, 665, 682, 723], "coder": [636, 670, 679, 680, 683, 686, 689, 702, 706, 715], "marketplac": [636, 696, 715], "googl": [636, 656, 676, 715], "amazon": [636, 678, 686], "web": [636, 697, 703, 708, 709, 710, 724], "servic": [636, 695, 702, 715], "softwar": [636, 672, 714, 715, 721], "alibaba": [636, 685, 692, 693, 715], "tencent": [636, 715], "taco": [636, 715], "oliv": [636, 715], "ai": [636, 678, 715, 719, 727], "ecosystem": [636, 715], "lightn": [636, 685], "pip": [636, 660, 663, 666, 668, 671, 680, 683, 688, 690, 692, 693, 697, 698, 699, 700, 721], "wget": [636, 660, 666, 668, 697, 700], "googleapi": [636, 668, 697, 700], "v1_6": [636, 668, 697, 700], "mobilenet_v1_1": [636, 668, 697, 708], "0_224_frozen": [636, 668, 697, 708], "overview": [636, 726], "jupyterlab": [636, 678, 684, 686, 688, 692, 727], "studio": [636, 686, 695, 705, 727], "topic": 636, "int4": [636, 673, 717, 729], "fp8": [636, 715], "innov": [636, 686, 715], "blog": [636, 715], "oct": [636, 715], "emnlp": [636, 715], "teq": [636, 715, 718, 720], "sep": [636, 715], "neurip": [636, 715], "quala": [636, 715], "minilm": [636, 715, 729], "releas": [636, 671, 684, 686, 688, 692, 694, 706, 709, 710, 730], "legal": [636, 730], "request": [636, 703, 704, 705, 708, 709, 710, 717], "ask": [636, 671], "email": 636, "research": [636, 672, 723, 729], "idea": [636, 697, 714, 723, 726], "discord": 636, "join": [636, 698, 703, 708, 709], "technic": 636, "discuss": 636, "wechat": [636, 715], "img": 636, "bridg": [637, 638, 670], "vanilla": [637, 638, 670], "abcadaptor": 637, "__init__": [637, 656, 657, 658, 674, 726], "query_fw_cap": [637, 639], "query_fused_pattern": 637, "he": 637, "besid": [637, 661, 700, 720], "describ": [637, 639, 656, 660, 667, 697, 724], "past": [637, 720], "mainten": 637, "difficult": [637, 723], "abil": [637, 638, 658, 667, 723], "fragment": 637, "scenario": [637, 654, 661, 675, 714, 720], "granular": [637, 638, 639, 667, 670, 681, 717, 723, 728], "semant": [637, 667], "mla": [637, 676, 717], "becom": [637, 665, 714, 720], "explor": 637, "inspect_tensor": 637, "op_list": [637, 724], "iteration_list": 637, "inspect_typ": 637, "save_to_disk": 637, "quantization_cfg": 637, "set_tensor": 637, "tensor_dict": 637, "diagnosis_help": 637, "fw": 638, "outlin": [638, 639], "instruct": [638, 639, 661, 671, 676, 690, 693, 697, 698, 699, 700, 714, 715, 716, 717, 723, 729], "extend": [638, 639], "accommod": [638, 639], "incorpor": [638, 639, 662, 714, 726], "diagram": [638, 639, 660, 726], "illustr": [638, 639, 662, 726], "sequencediagram": [638, 639, 705], "autonumb": [638, 639], "query_framework_cap": 638, "opwis": 638, "optypewis": 638, "travers": [638, 639, 720, 726], "\u2776": 638, "\u2777": 638, "\u2778": 638, "\u2779": 638, "\u277a": 638, "\u277b": 638, "\u277c": 638, "These": [638, 670, 698], "chapter": 638, "node_op": 638, "confirm": 638, "int8_conv_config": 638, "optype_wise_": 638, "tuning_cfg_to_fw": 638, "Its": [638, 655, 714], "dispatch": [638, 670, 702, 705], "is_perchannel": 638, "is_asymmetr": 638, "convert_bf16": 638, "somewhat": 638, "distort": 638, "line": [638, 656, 663, 670, 678, 683, 684, 703, 724], "let": [639, 667, 683, 714, 716, 728], "overal": [639, 703, 728], "drive": 639, "uint4": 639, "kullback": [639, 661], "leibler": [639, 661], "pytorch_cpu": 639, "1_11_capabl": 639, "cap_s8_1_11": 639, "cap_s8_1_11_conv1d": 639, "per_channel_symmetr": 639, "addition": [639, 663, 714, 726], "per_tensor_symmetr": 639, "due": [639, 665, 714, 717, 723, 724], "nativ": 639, "with_arg": 639, "qscheme": 639, "quant_min": 639, "quant_max": 639, "linux": [654, 666, 671, 689, 695], "x86_64": 654, "aarch64": 654, "prove": [655, 720, 723], "benefici": 655, "uniform": [655, 720], "\u03b2": 655, "\u03b1": 655, "fundament": [655, 675], "primari": [655, 726], "focu": [655, 726], "essenti": [655, 666], "remaind": 655, "enhanc": [655, 678, 714, 715, 719], "resolut": 655, "extrem": 655, "still": [655, 675, 701, 715, 717, 719], "retain": 655, "noteworthi": 655, "vanhouck": 655, "vincent": 655, "andrew": 655, "senior": 655, "mark": 655, "mao": 655, "speed": [655, 675, 686, 714, 715, 717, 726], "2011": 655, "szymon": 655, "migacz": 655, "2017": 655, "mckinstri": 655, "jeffrei": 655, "l": [655, 661, 724, 726], "discov": [655, 724], "1809": 655, "04191": 655, "2018": 655, "mostli": 656, "overli": 656, "argu": 656, "decis": [656, 674], "subprocess": [656, 657], "popen": 656, "pipe": 656, "sub_modul": 656, "namespac": 656, "pollut": 656, "long_str": 656, "extran": 656, "pager": 656, "getenv": 656, "readabl": 656, "seem": 656, "worth": [656, 714], "4f": 656, "65421": 656, "sentenc": 656, "eval_result": 656, "declar": [656, 696], "typealia": 656, "_lossandgradi": 656, "complextfmap": 656, "xx_func": 656, "ordereddict": 656, "plug": [656, 715], "pylanc": 656, "cheeseshopaddress": 656, "chees": 656, "shop": 656, "outofcheeseerror": 656, "crbug": 656, "192795": 656, "cpufreq": [656, 681], "deprec": [656, 690, 693, 721, 725], "facilit": [656, 678], "__all__": 656, "get_all_config_set_from_config_registri": 656, "algorithm_entri": 656, "autotun": 656, "static_qu": 656, "snippet": [656, 670], "rtn_algo_entri": 656, "vscode": [656, 694, 696], "settings_recommend": 656, "encount": 657, "consum": 657, "previous": 657, "lack": [657, 666], "faster": [657, 659, 665, 715, 726, 729], "Of": 657, "evenli": 657, "divid": [657, 705, 723, 726], "discard": 657, "throw": 657, "awai": 657, "draw": [657, 722, 726], "pin": [657, 688, 692], "reshuffl": 657, "manner": [657, 661, 677], "newdataload": 657, "customis": [657, 658, 674], "ensp": [658, 725], "imagerecord": [658, 663, 728], "image_nam": 658, "cocorecord": 658, "gt": [658, 723, 725], "int64": 658, "offer": 658, "style_transf": 658, "content": [658, 703, 704, 708, 709, 710], "tfrecorddataset": 658, "labelbal": 658, "300": [658, 714, 729], "16": [658, 671, 708, 720, 729], "helloworld": [658, 676, 725], "aid": 659, "deploy": [659, 678, 695, 715, 718, 723], "infrastructur": 659, "diagnos": 660, "gui": [660, 670, 700, 714], "termin": [660, 688, 689, 692, 698], "repeat": [660, 726], "durat": [660, 704, 708, 709, 722], "cd": [660, 663, 671, 697, 699, 700, 702, 703, 708, 709, 710], "setup": [660, 667, 671, 690, 693, 697, 699, 700, 702, 703, 714], "ilsvr2012": 660, "caff": 660, "berkeleyvis": 660, "caffe_ilsvrc12": 660, "xvzf": 660, "image_recognit": [660, 700, 724], "resnet50_torchvis": 660, "ptq_static": [660, 699], "resnet50_v1": [660, 663, 675], "dataset_loc": [660, 700, 708, 724], "label_path": 660, "quantiti": 660, "vec": 660, "frac": [660, 723], "sigma": 660, "var": 660, "happen": 660, "dispers": [660, 698], "v0": [660, 700, 723, 724], "cg": [660, 700, 724], "conv0": [660, 700, 724], "expens": [661, 675, 726], "mobil": [661, 675, 729], "produc": 661, "logit": 661, "softmax": 661, "kd": 661, "patient": 661, "compact": [661, 675, 681, 714], "agnost": 661, "resourc": [661, 702, 705, 726], "convolut": [661, 715], "ia": 661, "attach": [661, 675, 723], "shallow": 661, "deepest": 661, "deeper": 661, "10006": [661, 662], "student_output": [661, 662], "student_loss": [661, 662], "training_func_for_nc": [661, 662], "distil_loss_conf": 661, "accordingli": [661, 686, 723], "promis": [662, 675, 714], "huge": [662, 700, 714, 718], "heavi": 662, "light": 662, "booster": 662, "degrad": [662, 714, 726], "novel": [662, 678, 689, 695], "comb": 662, "distillation_criterion": [662, 675, 713], "q_conf": 662, "horovod": 663, "program": [663, 672, 678, 695], "enable_eager_execut": 663, "yaml_file_path": 663, "pre_process": 663, "simpli": [663, 677, 678, 680, 683, 695, 703], "evaluation_result": 663, "evaluation_time_cost": 663, "partit": [663, 714], "distributedsampl": 663, "train_sampl": 663, "train_dataset": [663, 717], "num_replica": 663, "rank": 663, "train_load": 663, "train_kwarg": 663, "adadelta": 663, "distributedoptim": 663, "named_paramet": 663, "broadcast_paramet": 663, "root_rank": 663, "broadcast_optimizer_st": 663, "set_epoch": 663, "batch_idx": 663, "nll_loss": 663, "log_interv": 663, "0f": 663, "tloss": 663, "6f": 663, "dry_run": 663, "test_func": 663, "host": [663, 703, 705, 708, 709, 710], "num_of_process": 663, "002": 663, "ssh": [663, 695], "prompt": 663, "readm": [663, 708], "exactli": [663, 679], "recognit": [663, 665, 714, 724], "resizecropimagenet": [663, 725], "realiz": [663, 712, 719, 722], "tow": 663, "node1": [663, 708, 709], "node2": [663, 708, 709], "TO": [663, 680, 700], "your_node1_nam": 663, "your_node2_nam": 663, "resnet50_fp32_pretrained_model": 663, "nc_resnet50_v1": 663, "resnet": [663, 729], "varieti": [664, 716, 726], "demonstr": [664, 678, 708, 709, 710, 724], "speedup": [664, 670, 717], "2x": [664, 670], "vnni": [664, 670, 716, 717], "exchang": 665, "hope": 665, "inc_model": [665, 677], "fp32_onnx_config": 665, "verifi": [665, 673], "vgg16": [665, 729], "mobilenet": [665, 722, 729], "rcnn": 665, "torchscript": [665, 718, 723], "unsupport": [665, 675, 714], "add_relu": 665, "conv1d_relu": 665, "conv2d_relu": 665, "group_norm": 665, "hardswish": 665, "instance_norm": 665, "layer_norm": 665, "leaky_relu": 665, "sigmoid": 665, "toolchain": [666, 715], "bare": 666, "metal": 666, "sudo": [666, 681], "apt": [666, 671, 681, 689], "python3": 666, "dev": [666, 688, 692], "distutil": 666, "libgl1": 666, "mesa": 666, "glx": 666, "libglib2": 666, "ln": 666, "sf": 666, "usr": 666, "incompat": 666, "88": [666, 722, 729], "80": [666, 718, 724, 729], "pyobject": 666, "reinstal": 666, "libgl": 666, "yum": [666, 671], "opencv": [666, 671, 689], "conda": [666, 671, 681, 689, 708, 709, 710, 721], "13": [666, 671, 697, 721, 723], "pend": [666, 704], "sqlalchemi": 666, "27": [666, 729], "alemb": 666, "forg": [666, 671], "quick": [667, 676, 714, 727, 728], "friendli": [667, 675, 715, 723, 727, 728], "dive": [667, 727], "purpos": [667, 676, 695, 697, 716, 717], "syntax": 667, "go": [667, 690, 693, 701, 716, 720, 725], "up1": 667, "up2": 667, "valid_mixed_precis": 667, "addn": 667, "grappler_optim": 667, "constfold": 667, "arithmet": 667, "debug_stripp": 667, "major": [669, 700, 717, 723], "concept": [669, 722, 727], "rather": [669, 720], "custom_metr": 669, "420": 670, "geomean": 670, "upload": [670, 690, 693], "click": [670, 678, 679, 686, 689, 695, 700, 715, 724], "qintegerop": [670, 717], "plan": 670, "oneapi": [671, 715, 727], "analyt": [671, 715, 727], "success": [671, 697], "11": [671, 674, 676, 697, 723, 726, 729], "frequent": 671, "pypi": [671, 690, 693], "nightli": 671, "headless": [671, 689], "fastai": 671, "esri": 671, "consolid": 671, "latest": [671, 715, 721], "eas": [671, 680, 715], "along": [671, 714, 720], "streamlin": [671, 702, 715], "scienc": 671, "websit": 671, "anaconda": [671, 702, 703], "suit": [671, 696, 724], "formerli": 671, "skylak": 671, "cascad": 671, "lake": [671, 676, 715], "cooper": [671, 676, 715], "ic": [671, 715], "sapphir": [671, 673], "rapid": [671, 673], "hbm": 671, "arctic": 671, "sound": 671, "pont": 671, "vecchio": 671, "cento": [671, 729], "ubuntu": 671, "22": [671, 729], "04": [671, 729], "maco": 671, "ventura": 671, "fortensorflow": 671, "forpytorch": 671, "12": [671, 697, 729], "tf_enable_onednn_opt": 671, "onednn": [671, 676, 717], "newer": 671, "subject": 672, "accompani": [672, 726], "wish": 672, "bibtex": 672, "author": 672, "feng": 672, "tian": 672, "hanwen": 672, "haihao": [672, 714], "shen": [672, 714], "suyu": 672, "chen": 672, "howpublish": 672, "year": 672, "logo": 672, "atom": 672, "phi": 672, "pentium": 672, "vtune": 672, "corpor": 672, "subsidiari": 672, "brand": 672, "claim": 672, "sq": [673, 723], "woq": 673, "4th": [673, 715, 717], "gen": [673, 676, 715, 717, 719], "codenam": [673, 676], "quickli": [673, 726, 727], "eleutherai": [673, 699, 723, 729], "6b": [673, 699, 723, 729], "facebook": [673, 701, 723, 729], "3b": [673, 723], "30b": [673, 723, 729], "llama": [673, 714, 715, 718, 720, 723, 729], "7b": [673, 723, 729], "13b": [673, 723, 729], "70b": [673, 729], "tiiuae": [673, 723, 729], "40b": 673, "soon": 673, "popularli": 674, "industri": [674, 715], "label_map": 674, "ap": 674, "curv": 674, "turn": [674, 689, 718], "target_boxes_num": 674, "str_label": 674, "int_label": 674, "inturn": 674, "cocomap": 674, "vocmap": 674, "categor": 674, "multiclass": 674, "multilabel": 674, "newmetr": 674, "reset": 674, "reflect": [674, 725], "new_metr": 674, "deliv": [675, 715, 721], "conveni": [675, 702], "upgrad": 675, "veri": [675, 696, 700, 717, 720, 726, 727], "comprehens": [675, 727], "resort": 675, "automodelforsequenceclassif": 675, "autotoken": 675, "val_dataset": [675, 717], "val_dataload": [675, 717], "worker": [675, 705, 708, 709, 710, 717], "ping_memori": [675, 717], "formul": 675, "effort": 675, "onnxrt_integ": [675, 728], "onnxrt_qlinear": [675, 728], "image_tensor": [675, 728], "post_training_dynamic_qu": [675, 716, 726], "1000": [675, 704, 728], "2000": 675, "sampling_s": [675, 728], "model_wis": [675, 728], "op_dict": 675, "op_wis": [675, 724, 728], "sigopt_api_token": [675, 722, 726], "sigopt_project_id": [675, 722, 726], "sigopt_experiment_nam": [675, 722, 726], "demo": 675, "600": 675, "training_arg": 675, "emul": [675, 717], "trainer": [675, 686], "briefli": [675, 723], "pruning_func": 675, "train_dataload": [675, 714, 717], "n_gpu": 675, "gradient_accumulation_step": 675, "clip_grad_norm_": 675, "max_grad_norm": 675, "start_epoch": [675, 716, 728], "end_epoch": [675, 716, 728], "newli": [675, 714], "on_after_optimizer_step": [675, 714], "layer3": [675, 714], "0004": 675, "randomresizedcrop": [675, 725], "totensor": [675, 725], "485": 675, "456": [675, 729], "406": [675, 729], "nepoch": 675, "cnt": 675, "loss_sum": 675, "iter_bar": 675, "desc": 675, "teacher_logit": 675, "train_fun": 675, "training_func": 675, "recent": [675, 676], "growth": [675, 676, 714], "significantli": [675, 676, 698, 700, 714, 726], "bandwidth": [675, 676, 720], "exit_polici": [675, 728], "determinist": 675, "meaning": [675, 713], "reli": [675, 723], "prune_conf": 675, "quantization_aware_training_conf": 675, "aforement": 675, "inset": 675, "p_conf": [675, 713], "ssd_mobilenet_v1": 675, "benchmarkconf": 675, "sixteen": 676, "launch": [676, 696, 701], "3rd": [676, 715, 717, 719], "boost": [676, 679, 695, 714, 715], "x86": 676, "avx512": [676, 717], "vcvtne2ps2bf16": 676, "vcvtneps2bf16": 676, "vdpbf16p": 676, "fbgemm": [676, 717], "tensorrtexecutionprovid": [676, 717], "cudaexecutionprovid": [676, 717], "dnnlexecutionprovid": [676, 717], "avx512_bf16": 676, "plu": 676, "resnet18": [676, 680, 729], "persist": 677, "brought": [677, 679, 686, 717], "tf2": 677, "h5": 677, "hybridblock": 677, "0000": 677, "saved_result": [677, 699, 720], "simplifi": [678, 689, 695, 714, 715], "acquir": 678, "analysi": [678, 695, 714, 722], "heurist": [678, 695], "great": 678, "autocast": 678, "my_model": 678, "no_grad": 678, "memory_format": 678, "112": 678, "plugin": [678, 696], "aw": [678, 686, 705, 715, 729], "sagemak": [678, 686], "neural_cod": [678, 680, 682, 683, 684, 686], "bench": 678, "superbench": 678, "enjoi": [679, 683, 686], "reload": [679, 696, 698, 701], "modern": [680, 720], "democrat": [680, 715], "programm": [680, 686, 695], "nano_bf16_channels_last": 680, "nano_bf16_ipex_channels_last": 680, "nano_bf16_ipex": 680, "nano_bf16": 680, "nano_fp32_channels_last": 680, "nano_fp32_ipex_channels_last": 680, "nano_fp32_ipex": 680, "nano_gpu_to_cpu": 680, "nano_int8": 680, "nano_jit_bf16_channels_last": 680, "nano_jit_bf16_ipex_channels_last": 680, "nano_jit_bf16_ipex": 680, "nano_jit_bf16": 680, "nano_jit_fp32_channels_last": 680, "nano_jit_fp32_ipex_channels_last": 680, "nano_jit_fp32_ipex": 680, "nano_jit_fp32": 680, "nano_onnxruntime_fp32": 680, "nano_onnxruntime_int8_qlinear": 680, "openvino": 680, "nano_openvino_fp32": 680, "nano_openvino_int8": 680, "bc": [681, 689], "conda_prefix": 681, "echo": 681, "tradit": [681, 714], "libjemalloc": 681, "libiomp5": 681, "home": 681, "lib": 681, "ld_preload": 681, "malloc_conf": 681, "oversize_threshold": 681, "background_thread": 681, "metadata_thp": 681, "dirty_decay_m": 681, "9000000000": 681, "muzzy_decay_m": 681, "kmp_affin": 681, "kmp_blocktim": 681, "dnnl_primitive_cache_capac": 681, "governor": 681, "scaling_governor": 681, "powersav": 681, "tee": 681, "pytorch_jit_script": [682, 685], "pytorch_channels_last": [682, 685], "run_bench": 682, "patch": [682, 695], "patch_path": 682, "your_patch_path": 682, "sweep": 682, "sweep_object": 682, "bench_config": 682, "bench_featur": 682, "sai": 683, "run_glu": [683, 684, 706, 709, 710], "requisit": 683, "task_nam": [683, 684, 706, 709, 710], "do_ev": [683, 684, 699, 706, 709, 710], "itself": [683, 714], "run_glue_optim": 683, "static_ipex": 683, "auto_qu": 684, "v4": [684, 706, 709, 710, 729], "albert": [684, 729], "sst2": 684, "alexnet": [684, 729], "pytorch_amp": 685, "optimize_for_infer": 685, "pytorch_jit_trac": 685, "pytorch_jit_script_ofi": 685, "pytorch_jit_trace_ofi": 685, "torchdynamo": 685, "pytorch_torchdynamo_jit_script": 685, "pytorch_torchdynamo_jit_trac": 685, "pytorch_torchdynamo_jit_script_ofi": 685, "pytorch_torchdynamo_jit_trace_ofi": 685, "pytorch_inc_bf16": 685, "pytorch_inc_static_quant_fx": 685, "pytorch_inc_static_quant_ipex": 685, "pytorch_inc_static_quant_ipex_xpu": 685, "pytorch_inc_dynamic_qu": 685, "pytorch_ipex_fp32": 685, "pytorch_ipex_bf16": 685, "pytorch_ipex_int8_static_qu": 685, "pytorch_ipex_int8_dynamic_qu": 685, "blade": 685, "disc": 685, "pytorch_aliblad": 685, "pytorch_lightning_bf16_cpu": 685, "tensorflow_amp": 685, "keras_amp": 685, "tensorflow_inc": 685, "keras_inc": 685, "onnx_inc_static_quant_qlinear": 685, "onnx_inc_static_quant_qdq": 685, "onnx_inc_dynamic_qu": 685, "optimum": [685, 686, 698, 720], "pytorch_inc_huggingface_optimum_stat": 685, "pytorch_inc_huggingface_optimum_dynam": 685, "intel_extension_for_transform": 685, "bigdl": [685, 686], "nano": [685, 686], "nano_": 685, "inc_auto": 685, "delight": 686, "announc": 686, "500": [686, 704, 729], "jupyt": [686, 688, 689, 692], "isa": 686, "adjust": [686, 717, 723], "delta": 686, "acc_delta": 686, "int8_acc": 686, "fp32_acc": 686, "ext": [688, 690, 692, 693, 694], "lab": [688, 689, 690, 692, 693], "nodej": [688, 692], "jlpm": [688, 692], "yarn": [688, 692], "npm": [688, 689, 692], "lieu": [688, 692], "labextens": [688, 689, 692], "typescript": [688, 692], "watch": [688, 692, 701], "immedi": [688, 692, 714], "refresh": [688, 692], "browser": [688, 692, 697, 701], "wait": [688, 692, 695, 705], "rebuilt": [688, 692], "easier": [688, 692, 695, 697, 715], "symlink": [688, 692], "down": 689, "finish": [689, 705], "blank": 689, "cell": 689, "gain": [689, 713, 715], "mkl": 689, "jemalloc": 689, "pip3": 689, "pyproject": [690, 693], "toml": [690, 693], "twine": [690, 693], "whl": [690, 693], "dist": [690, 693], "sdist": [690, 693], "bdist_wheel": [690, 693], "frontend": [690, 693, 703, 710], "login": [690, 693, 722], "cut": [690, 693], "admin_github_token": [690, 693], "pypi_token": [690, 693], "npm_token": [690, 693], "secret": [690, 693], "panel": [690, 693, 695], "draft": [690, 693], "changelog": [690, 693, 694], "pkg": [690, 693], "bot": [690, 693], "pick": [690, 693, 696], "feedstock": [690, 693], "hatch": 693, "notabl": 694, "daili": 695, "advantag": [695, 714, 716, 726], "remot": 695, "server": [695, 697, 700, 703, 708, 709, 710], "re": [695, 701, 720], "market": 695, "uninstal": 695, "fill": [695, 722, 725, 726], "upper": 695, "sidebar": 695, "hover": 695, "track": [695, 722], "argpars": 695, "pop": [695, 705], "diff": 695, "manifest": 696, "palett": 696, "registercommand": 696, "amodio": 696, "tsl": 696, "matcher": 696, "dbaeumer": 696, "eslint": [696, 701], "press": 696, "f5": 696, "ctrl": 696, "hello": 696, "world": 696, "breakpoint": 696, "consol": [696, 701], "relaunch": 696, "toolbar": 696, "node_modul": 696, "viewlet": 696, "dropdown": 696, "runner": [696, 701], "startup": 696, "bundl": 696, "neural_insight": [697, 699, 700], "tl": 697, "ui": 697, "5000": 697, "338174d13706855fc6924cec7b3a8ae8": 697, "listen": 697, "firewal": 697, "8080": 697, "cert": 697, "path_to_cert": 697, "crt": 697, "path_to_private_kei": 697, "encrypt": 697, "expos": 697, "forfeit": 697, "client": [697, 703, 710], "extern": 697, "threat": 697, "diagnost": 697, "skill": 697, "feel": [697, 701], "layoutlmv3": [698, 729], "seqev": 698, "sentencepiec": 698, "timm": 698, "fvcore": 698, "pillow": 698, "einop": 698, "textdist": 698, "setuptool": 698, "cli": 698, "hypjudi": 698, "finetun": [698, 714, 720, 729], "funsd": [698, 729], "calib_dataset": 698, "incdataset": 698, "eval_dataset": 698, "poor": [698, 724], "9049": 698, "2989": 698, "66": [698, 729], "9631": 698, "glob": 698, "panda": 698, "pd": 698, "set_opt": 698, "max_row": 698, "max_column": 698, "getmtim": 698, "activations_t": 698, "weights_tabl": [698, 699], "read_csv": 698, "nweight": 698, "descend": 698, "sorted_data": 698, "sort_valu": 698, "ascend": 698, "evid": 698, "tip": 698, "8981": 698, "7502": 698, "run_clm": 699, "wikitext": [699, 729], "dataset_config_nam": 699, "do_train": 699, "inspect_sav": 699, "inspect_result": 699, "quan": 699, "model_summari": 699, "incept": [700, 729], "v3": [700, 729], "inception_v3": [700, 724], "inceptionv3_fp32_pretrained_model": [700, 724], "bash": [700, 724], "prepare_dataset": 700, "sh": [700, 724], "raw_dir": 700, "img_raw": 700, "delet": [700, 714], "run_tun": 700, "nc_inception_v3": 700, "highest": [700, 706, 726], "satisfactori": 700, "webpag": 700, "spike": 700, "bottom": 700, "chart": [700, 717, 722, 724], "concentr": 700, "But": 700, "bigger": 700, "bootstrap": 701, "localhost": [701, 703, 708, 709], "3000": 701, "lint": 701, "interact": [701, 722], "correctli": 701, "hash": [701, 704], "readi": [701, 714], "aren": 701, "transit": 701, "webpack": 701, "babel": 701, "tweak": 701, "ever": 701, "curat": 701, "suitabl": 701, "middl": [701, 723], "shouldn": 701, "understand": [701, 717, 724, 727], "wouldn": 701, "couldn": 701, "troubleshoot": 701, "effortlessli": 702, "grpc": [702, 703, 707, 708, 709, 711], "queue": 702, "seamlessli": [702, 714, 726], "mpi": [702, 703, 726], "neural_solut": [702, 703, 708, 709, 710], "task_monitor_port": [703, 708, 709, 710], "22222": [703, 708, 709, 710], "result_monitor_port": [703, 708, 709, 710], "33333": [703, 708, 709, 710], "restful_api_port": [703, 708, 709, 710], "hostfil": [703, 705, 708, 709, 710], "grpc_api_port": [703, 708, 709, 710], "api_typ": [703, 708, 709, 710], "conda_env": [703, 708, 709, 710], "upload_path": [703, 708, 709, 710], "8000": [703, 708, 709, 710], "monitor": [703, 708, 709, 710], "3333": [703, 708, 709, 710], "2222": [703, 708, 709, 710], "ns_workspac": [703, 708, 709, 710], "hf_model": [703, 707, 709, 710], "curl": [703, 704, 708, 709], "task_id": [703, 708, 709, 710], "usernam": 703, "db": [703, 705], "serve_log": [703, 708, 709, 710], "frontend_grpc": 703, "task_log": 703, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 703, "task_workspac": 703, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 703, "aliv": 703, "properli": 703, "commonli": [703, 714], "hostnam": 703, "breakdown": 703, "ip": 703, "hous": 703, "host1": [703, 708, 709], "host2": [703, 708, 709], "query_id": 703, "oaa": 704, "host_ip": 704, "task_request": [704, 708, 709, 710], "tuning_info": [704, 708], "optimization_result": [704, 708], "result_path": [704, 708, 709], "closur": 704, "404": [704, 714, 729], "health": 704, "healthi": 704, "quantized_model": [704, 708, 709], "400": [704, 729], "alloc": 705, "incom": 705, "taskmonitor": 705, "cluster": [705, 708, 709, 726], "tasklaunch": 705, "resultmonitor": 705, "receiv": [705, 722], "p1": 705, "notif": 705, "p2": 705, "p3": 705, "mpirun": [705, 726], "perf": 705, "p4": 705, "four": [705, 724, 729], "classdiagram": 705, "taskdb": 705, "get_statu": 705, "update_statu": 705, "task_collect": 705, "append_task": 705, "get_all_pending_task": 705, "update_task_statu": 705, "task_db": 705, "wait_new_task": 705, "schedule_task": 705, "dispatch_task": 705, "launch_task": 705, "query_task_statu": 705, "node_list": 705, "reserve_resourc": 705, "get_node_statu": 705, "gcp": [705, 715], "script_url": [706, 708, 709, 710], "archiv": 706, "tf_example1": [707, 708, 709], "hf_models_grpc": [707, 710], "00173": 708, "01024": 708, "task_request_distribut": 708, "custom_models_optim": 708, "7602cd63d4c849e7a686a8165a77f69d": [708, 709], "151": [708, 729], "8617": 708, "17": [708, 729], "8213": [708, 729], "number_of_socket": [708, 709], "number_of_thread": [708, 709], "cdf419910f9b4d2a8320d0e420ac1d0a": 709, "optimized_result": 709, "58": [709, 729], "3162": 709, "6488": [709, 729], "06": [710, 728, 729], "34": [710, 729], "55": [710, 729], "d3e10a49326449fb9d0d62f2bfc1cb43": 710, "fastapi": 711, "multi_object": 712, "benefit": 713, "instanti": 713, "neuron": 714, "art": 714, "grown": 714, "unpreced": 714, "increasingli": 714, "crucial": 714, "stand": [714, 726], "shrink": 714, "contextu": 714, "scene": 714, "haven": 714, "color": [714, 718], "lowest": [714, 726], "emsp": 714, "downstream": 714, "prone": 714, "co": 714, "discourag": 714, "penal": 714, "parameter": 714, "lightweight": 714, "perceptron": 714, "mlp": 714, "valuabl": [714, 724], "basi": 714, "billion": 714, "dolli": [714, 723, 729], "mpt": [714, 723, 729], "lm": [714, 729], "lamini": [714, 723], "mention": [714, 720], "tend": 714, "exemplifi": 714, "complement": 714, "fortieth": 714, "miss": [714, 717], "pruner2": 714, "few": [714, 715, 723, 726], "lm_head": 714, "yourself": 714, "uncertain": 714, "auto_config": 714, "quit": 714, "straightforward": [714, 720, 723], "pruning_pattern": 714, "pruning_start": 714, "pruning_end": 714, "sparse_gpt": 714, "embed_out": 714, "card": 714, "hesit": 714, "causal": 714, "clm": 714, "sst": [714, 729], "25": [714, 729], "63": [714, 729], "24": [714, 726, 729], "35": [714, 729], "flan": 714, "t5": [714, 729], "english": 714, "romanian": 714, "381": 714, "yolov5": 714, "75": [714, 729], "2x1": [714, 729], "801": 714, "7895": 714, "signific": [714, 715, 718, 723], "reduct": [714, 718, 728], "namhoon": 714, "lee": 714, "thalaiyasingam": 714, "ajanthan": 714, "philip": 714, "torr": 714, "2019": 714, "zafrir": 714, "ofir": 714, "ariel": 714, "larei": 714, "boudoukh": 714, "mosh": 714, "wasserblat": 714, "2111": 714, "05754": 714, "2021": 714, "kwon": 714, "kim": 714, "mahonei": 714, "hassoun": 714, "keutzer": 714, "gholami": 714, "pp": 714, "24101": 714, "24116": 714, "frantar": [714, 720], "alistarh": 714, "medium": 715, "aug": 715, "juli": 715, "onnxcommunitymeetup2023": 715, "chatbot": 715, "june": 715, "msft": 715, "netflix": 715, "apr": 715, "mlperf": [715, 729], "5x": 715, "\u96c6\u6210\u82f1\u7279\u5c14": 715, "\u817e\u8baf\u4e91taco": 715, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 715, "mar": 715, "heterogen": 715, "jan": 715, "busi": 715, "amx": 715, "journei": 715, "dec": 715, "mleffici": 715, "deepen": 715, "foundat": 715, "intellig": 715, "vmware": 715, "applianc": 715, "bitnami": 715, "nov": 715, "sota": 715, "twitter": 715, "linkedin": 715, "zone": 715, "land": 715, "pat": 715, "keynot": 715, "intelon": 715, "chines": 715, "purif": 715, "sacrif": 715, "jun": 715, "partner": 715, "feb": 715, "joint": 715, "bilibili": 715, "gestalt": 715, "ml": 715, "doubl": 715, "abound": 715, "lpot": [715, 721], "nextplatform": 715, "cern": 715, "gan": 715, "3dgan": 715, "iml": 715, "workshop": 715, "asplo": 715, "18": [715, 729], "highli": [715, 720], "intelcaff": 715, "aris": 716, "henc": 716, "onnxrt_qoper": 716, "quant_aware_train": 716, "weight_compress": [716, 728], "initial_spars": [716, 728], "prune_typ": [716, 728], "basic_magnitud": [716, 728], "update_frequ": 716, "prune_domain": 716, "tile_pattern_1x1": 716, "invent": 717, "cost": [717, 720], "theoret": [717, 720], "zeropoint": 717, "255": [717, 723], "overflow": 717, "unseen": 717, "peopl": 717, "mimic": 717, "fact": 717, "ultim": 717, "pain": 717, "lossi": 717, "philosophi": 717, "neither": 717, "nor": 717, "val_load": 717, "avg": 717, "themselv": 717, "dmlexecutionprovid": 717, "meanwhil": 718, "substanti": 718, "pose": 718, "challeng": 718, "greatli": [718, 720], "constrain": 718, "grei": 718, "blue": 718, "rectangl": 718, "w8a8": [718, 720], "10005": 718, "rtn_arg": [718, 720], "ouput_dir": 718, "fp32_model_path": 718, "int8_model_path": 718, "ON": 719, "forc": 719, "postposttrainingquantconfig": 719, "bf16wrapper": 719, "retrac": 719, "preval": 720, "grow": 720, "demand": 720, "trade": 720, "bottleneck": 720, "roughli": 720, "speak": 720, "capac": [720, 722], "flop": 720, "famou": 720, "approx": 720, "bmm": 720, "100x": 720, "excel": 720, "stai": [720, 723], "quantif": [720, 723], "think": 720, "intuit": [720, 723], "uniformli": 720, "qlora": 720, "invers": 720, "restor": 720, "protect": 720, "inspir": 720, "c_": 720, "normalfloat": 720, "e2m1": 720, "bnb": 720, "805": 720, "awq_arg": 720, "gptq_arg": 720, "mitig": 720, "date": 720, "sym_full_rang": 720, "qweight_config_path": 720, "gptq_config_path": 720, "gptq_config": 720, "use_full_length": 720, "compressed_model": 720, "omit": 720, "rtn_g32asym": 720, "gptq_g32asym": 720, "gptq_g32asym_disable_last_matmul": 720, "gptq_g128asym": 720, "awq_g32asym": 720, "xiao": [720, 723], "guangxuan": [720, 723], "2211": [720, 723], "10438": [720, 723], "wei": [720, 723], "xiui": [720, 723], "suppress": [720, 723], "2209": [720, 723], "13325": [720, 723], "lin": 720, "ji": 720, "00978": 720, "elia": 720, "dettmer": 720, "tim": 720, "2305": 720, "14314": 720, "site": 721, "sed": 721, "your_script": 721, "backbon": 722, "sigopt_experiment_id": 722, "nc": [722, 726], "suffici": 722, "ordinari": 722, "latenc": [722, 726], "8266": 722, "8372": 722, "2132": 722, "83": [722, 723, 729], "7495": 722, "8299": 722, "8294": 722, "85": [722, 723, 729], "0837": 722, "8291": 722, "4469": 722, "gigant": 723, "systemat": 723, "migrat": [723, 727], "difficulti": 723, "mathemat": 723, "allevi": 723, "coarsest": 723, "finer": [723, 726], "matric": 723, "similarli": 723, "finest": 723, "consumpt": 723, "suppos": 723, "6839": 723, "4741": 723, "7451": 723, "9301": 723, "1742": 723, "6835": 723, "q_min": 723, "q_max": 723, "q_x": 723, "clamp_": 723, "round_": 723, "w_q": 723, "00296431384049356": 723, "59": [723, 729], "172": [723, 729], "192": 723, "w_dq": 723, "2220": 723, "1510": 723, "2420": 723, "2570": 723, "0500": 723, "1890": 723, "mseloss": 723, "1983354538679123": 723, "6848": 723, "4743": 723, "7440": 723, "9308": 723, "1749": 723, "385297635664756e": 723, "07": [723, 728, 729], "quantize_per_channel": 723, "x_tmp": 723, "detach": 723, "keepdim": 723, "dequantize_per_channel": 723, "0029": [723, 729], "0036": 723, "162": [723, 729], "48": [723, 729], "72": [723, 729], "93": [723, 729], "207": 723, "139": [723, 729], "6837": 723, "4734": 723, "1751": 723, "6821": 723, "637690492221736e": 723, "6376e": 723, "3852e": 723, "cdot": 723, "quantize_per_tensor_absmax": 723, "n_bit": 723, "div_": 723, "0806": 723, "7589": 723, "6038": 723, "3815": 723, "5040": 723, "7174": 723, "5444": 723, "5826": 723, "7772": 723, "5555": 723, "3740": 723, "3253": 723, "0698": 723, "1381": 723, "5972": [723, 729], "0086": 723, "0737": 723, "8298": 723, "6883": 723, "2991": 723, "1601": 723, "6506": 723, "8246": 723, "3924": 723, "3845": 723, "8768": 723, "w_scale": 723, "x_q": 723, "x_scale": 723, "84": [723, 729], "120": 723, "0059755356051027775": 723, "89": [723, 729], "119": 723, "57": [723, 729], "006533813662827015": 723, "y_q": 723, "17509": 723, "7608": 723, "4055": 723, "16599": 723, "21020": 723, "10016": 723, "9860": 723, "22444": 723, "y_dq": 723, "6836": 723, "2970": 723, "1583": 723, "6481": 723, "8207": 723, "3911": 723, "3850": 723, "8763": 723, "though": 723, "simplic": 723, "fp1": 723, "fp2": 723, "subsect": [723, 728], "x1": [723, 726], "x2": [723, 726], "herebi": 723, "optdecoderlay": 723, "blockwis": 723, "overhead": 723, "hardtanh": 723, "t5norm": 723, "llamanorm": 723, "groupnorm": 723, "lambada": 723, "openai": [723, 729], "sweet": 723, "spot": 723, "bigscienc": [723, 729], "560m": 723, "354": 723, "3542": 723, "1b7": 723, "4634": 723, "4936": 723, "518": 723, "5185": 723, "7b1": [723, 729], "5764": [723, 729], "5977": 723, "bloomz": [723, 729], "3947": 723, "3930": 723, "4828": 723, "4906": 723, "5018": 723, "4980": 723, "5593": [723, 729], "5552": 723, "125m": 723, "379": 723, "3757": 723, "350m": 723, "4516": 723, "4533": 723, "5789": 723, "5742": 723, "6365": 723, "6404": 723, "6769": [723, 729], "6804": [723, 729], "6872": 723, "6814": 723, "7149": 723, "7128": 723, "66b": 723, "7398": 723, "7326": 723, "7361": [723, 729], "7357": 723, "7627": [723, 729], "7590": 723, "7759": [723, 729], "7840": 723, "65b": 723, "7908": 723, "7957": 723, "7392": [723, 729], "7335": [723, 729], "chat": [723, 729], "7058": [723, 729], "6994": 723, "7677": [723, 729], "7615": [723, 729], "6831": [723, 729], "mbzuai": 723, "124m": 723, "3804": 723, "3887": 723, "774m": 723, "5048": 723, "5057": 723, "5b": 723, "5443": [723, 729], "5436": 723, "mosaicml": [723, 729], "655": [723, 729], "6499": 723, "stabilityai": 723, "stablelm": 723, "4172": 723, "4149": 723, "togethercomput": 723, "redpajama": 723, "incit": 723, "6542": 723, "6735": 723, "6718": 723, "6740": [723, 729], "6569": 723, "6621": 723, "7143": 723, "7221": 723, "6895": 723, "6953": [723, 729], "databrick": [723, 729], "6866": [723, 729], "6297": 723, "6247": 723, "6437": [723, 729], "6392": 723, "7332": 723, "7632": 723, "asterisk": 723, "consider": 723, "arang": 723, "tolist": 723, "default_alpha": 723, "step_siz": 723, "shared_criterion": 723, "do_blockwis": 723, "jason": 723, "emerg": 723, "transact": 723, "yvinec": 723, "edouard": 723, "proceed": 723, "cvf": 723, "winter": 723, "instrument": 724, "writer": 724, "_pre_eval_hook": 724, "_post_eval_hook": 724, "submodul": 724, "whitelist": 724, "_recordingobserv": 724, "output_tensors_dict": 724, "current_it": 724, "get_tensor_valu": 724, "_observer_forward_hook": 724, "activation_post_process": 724, "_add_observer_": 724, "named_children": 724, "leaf": 724, "add_modul": 724, "register_forward_hook": 724, "dump_tim": 724, "summarywrit": 724, "_acc": 724, "tune_": 724, "add_graph": 724, "get_observer_dict": 724, "observer_dict": 724, "is_quant": 724, "add_histogram": 724, "shell": 724, "bind_al": 724, "logdir_spec": 724, "tune_0_acc0": 724, "tune_1": 724, "tune_1_acc0": 724, "79": [724, 729], "baseline_acc_0": 724, "776": 724, "tune_1_acc_0": 724, "095": 724, "runs_v3": 724, "run_tuning_dump_tensor": 724, "inceptionv3": 724, "run_quant": 724, "topologi": 724, "nc_inceptionv3": 724, "inceptionv3_dump_tensor": 724, "eightbit": 724, "disappear": 724, "centercrop": 725, "randomcrop": 725, "cropres": 725, "decodeimag": 725, "jpeg": 725, "encodejp": 725, "alignimagechannel": 725, "68": [725, 729], "116": 725, "78": [725, 729], "103": 725, "94": [725, 729], "017": 725, "bilinearimagenet": [725, 728], "topilimag": 725, "padding_mod": 725, "border": 725, "pixel": 725, "edg": 725, "colorjitt": 725, "bright": 725, "satur": 725, "hue": 725, "jitter": 725, "tondarrai": 725, "o1": 726, "human": 726, "aggress": 726, "classic": 726, "flowchart": 726, "htmllabel": 726, "td": 726, "classdef": 726, "itemstyl": 726, "cce5ff": 726, "stroke": 726, "99ccff": 726, "s1": 726, "s2": 726, "s3": 726, "s4": 726, "s5": 726, "s6": 726, "s7": 726, "nbsp": 726, "subgraphstyl": 726, "ffffff": 726, "attempt": 726, "post_training_auto_qu": 726, "increment": 726, "ii": 726, "spent": 726, "hawq_v2_loss": 726, "model_loss": 726, "black": 726, "compli": 726, "posterior": 726, "short": 726, "loglevel": 726, "endlessli": 726, "perspect": 726, "smbo": 726, "appl": 726, "surrog": 726, "densiti": 726, "parzen": 726, "greatest": 726, "hour": 726, "dai": 726, "next_tune_cfg": 726, "overridden": 726, "replic": 726, "replica": 726, "fed": 726, "synchron": 726, "number_of_process": 726, "run_cmd": 726, "abctunestrategi": 726, "familiar": 727, "notebook": 727, "introduct": 727, "organ": 728, "logic": 728, "mobilenet_v1": 728, "40": [728, 729], "beta_1": 728, "beta_2": 728, "epsilon": 728, "sparsecategoricalcrossentropi": 728, "sum_over_batch_s": 728, "from_logit": 728, "54": [728, 729], "19": [728, 729], "09": 729, "1x": 729, "platinum": 729, "8480": 729, "8ghz": 729, "56": 729, "ht": 729, "turbo": 729, "256gb": 729, "16x16gb": 729, "ddr5": 729, "4800": 729, "mt": 729, "bio": 729, "3a14": 729, "tel2p1": 729, "microcod": 729, "0x2b0001b0": 729, "gcc": 729, "20210514": 729, "red": 729, "hat": 729, "visit": 729, "1s4c14ins1bsthroughput": 729, "sec": 729, "74": 729, "2914": 729, "621": 729, "69x": 729, "76": 729, "23": 729, "46": 729, "2160": 729, "545": 729, "47": 729, "96x": 729, "resnet101": 729, "77": 729, "37": 729, "1508": 729, "428": 729, "53x": 729, "70": 729, "44": 729, "69": 729, "3290": 729, "1229": 729, "68x": 729, "38": 729, "73": 729, "2404": 729, "1048": 729, "49": 729, "29x": 729, "71": 729, "1669": 729, "33x": 729, "1073": 729, "245": 729, "38x": 729, "374": 729, "52": 729, "18x": 729, "96": 729, "5478": 729, "1756": 729, "12x": 729, "4133": 729, "1748": 729, "36x": 729, "1534": 729, "236": 729, "62": 729, "49x": 729, "vgg19": 729, "1377": 729, "197": 729, "resnetv2": 729, "39": 729, "1125": 729, "656": 729, "71x": 729, "709": 729, "367": 729, "00": 729, "93x": 729, "152": 729, "03": 729, "497": 729, "265": 729, "87x": 729, "densenet": 729, "121": 729, "557": 729, "67": 729, "61": 729, "22x": 729, "161": 729, "29": 729, "353": 729, "235": 729, "50x": 729, "169": 729, "65": 729, "41": 729, "435": 729, "385": 729, "13x": 729, "efficientnet": 729, "b0": 729, "786": 729, "723": 729, "09x": 729, "130": 729, "23x": 729, "1291": 729, "683": 729, "89x": 729, "61x": 729, "1295": 729, "453": 729, "85x": 729, "242": 729, "31x": 729, "cnn": 729, "80x": 729, "43": 729, "81x": 729, "166": 729, "07x": 729, "16x": 729, "26": 729, "173": 729, "yolov3": 729, "82": 729, "230": 729, "92": 729, "36": 729, "37x": 729, "58x": 729, "86": 729, "416": 729, "35x": 729, "88x": 729, "51": 729, "17x": 729, "75552": 729, "50803": 729, "1s56c1ins1bsthroughput": 729, "60": 729, "64x": 729, "1673": 729, "653": 729, "56x": 729, "1170": 729, "329": 729, "55x": 729, "977": 729, "335": 729, "91x": 729, "resnest50": 729, "81": 729, "10x": 729, "resnext101_32x8d": 729, "562": 729, "109": 729, "efficientnet_b0": 729, "696": 729, "667": 729, "04x": 729, "efficientnet_b3": 729, "508": 729, "397": 729, "28x": 729, "efficientnet_b7": 729, "234": 729, "149": 729, "57x": 729, "peleenet": 729, "858": 729, "588": 729, "46x": 729, "se_resnext50_32x4d": 729, "739": 729, "283": 729, "yolo": 729, "141": 729, "99x": 729, "174": 729, "camembert": 729, "395": 729, "171": 729, "30x": 729, "53": 729, "795": 729, "341": 729, "744": 729, "343": 729, "163": 729, "funnel": 729, "182": 729, "65x": 729, "399": 729, "21x": 729, "407": 729, "412": 729, "stsb": 729, "413": 729, "39x": 729, "409": 729, "75x": 729, "401": 729, "70x": 729, "76x": 729, "reform": 729, "crime": 729, "punish": 729, "446": 729, "398": 729, "lvwerra": 729, "pegasu": 729, "samsum": 729, "102": 729, "770": 729, "450": 729, "14x": 729, "whisper": 729, "25x": 729, "abeja": 729, "neox": 729, "japanes": 729, "90x": 729, "1646": 729, "657": 729, "1098": 729, "322": 729, "41x": 729, "568": 729, "19x": 729, "1383": 729, "761": 729, "82x": 729, "32x": 729, "5701": 729, "1593": 729, "2090": 729, "685": 729, "05x": 729, "resnext101_32x16d_wsl": 729, "556": 729, "01x": 729, "86x": 729, "558": 729, "11x": 729, "lambada_openai": 729, "hellaswag": 729, "winogrand": 729, "piqa": 729, "word_perplex": 729, "4954": 729, "6409": 729, "7541": 729, "6434": 729, "8816": 729, "gptqw4g128asym": 729, "679": 729, "4895": 729, "6433": 729, "7476": 729, "6399": 729, "9945": 729, "0999": 729, "gptqw4g32asym": 729, "6829": 729, "4923": 729, "6401": 729, "7486": 729, "6410": 729, "9963": 729, "0141": 729, "gptqw4g128sym": 729, "4907": 729, "6361": 729, "7443": 729, "6390": 729, "9932": 729, "1498": 729, "gptqw4g32sym": 729, "6911": 729, "4899": 729, "6448": 729, "7497": 729, "6439": 729, "0008": 729, "0927": 729, "5049": 729, "6543": 729, "7628": 729, "6497": 729, "2862": 729, "4984": 729, "6535": 729, "7568": 729, "6473": 729, "9962": 729, "4193": 729, "6885": 729, "4973": 729, "753": 729, "6455": 729, "9935": 729, "4607": 729, "decapoda": 729, "5642": 729, "6709": 729, "7835": 729, "6887": 729, "4202": 729, "7244": 729, "5603": 729, "6614": 729, "6824": 729, "9909": 729, "5881": 729, "5911": 729, "7009": 729, "7878": 729, "7106": 729, "212": 729, "7518": 729, "5843": 729, "6961": 729, "7911": 729, "4319": 729, "7572": 729, "5898": 729, "7056": 729, "7894": 729, "7105": 729, "9998": 729, "3429": 729, "7596": 729, "5841": 729, "6977": 729, "7905": 729, "7080": 729, "4916": 729, "6266": 729, "7277": 729, "8096": 729, "7350": 729, "2384": 729, "778": 729, "624": 729, "7269": 729, "8047": 729, "7334": 729, "9979": 729, "4237": 729, "7706": 729, "6239": 729, "7285": 729, "8058": 729, "7322": 729, "4697": 729, "7836": 729, "6195": 729, "7337": 729, "9983": 729, "5604": 729, "5732": 729, "648": 729, "7715": 729, "6746": 729, "7107": 729, "6982": 729, "5637": 729, "6527": 729, "7704": 729, "6713": 729, "9950": 729, "9702": 729, "5682": 729, "6575": 729, "7758": 729, "6742": 729, "9994": 729, "9317": 729, "567": 729, "6902": 729, "7353": 729, "6622": 729, "7829": 729, "6862": 729, "9942": 729, "9635": 729, "7246": 729, "5617": 729, "6756": 729, "7797": 729, "6854": 729, "9931": 729, "2799": 729, "7312": 729, "6059": 729, "7103": 729, "7077": 729, "2213": 729, "7273": 729, "6018": 729, "7088": 729, "7742": 729, "7030": 729, "9934": 729, "2538": 729, "083": 729, "7283": 729, "6053": 729, "7024": 729, "7764": 729, "7031": 729, "1889": 729, "727": 729, "5997": 729, "7018": 729, "9916": 729, "2504": 729, "7122": 729, "8984": 729, "5933": 729, "689": 729, "7851": 729, "7075": 729, "1556": 729, "448": 729, "7675": 729, "5934": 729, "7856": 729, "7111": 729, "9984": 729, "1514": 729, "927": 729, "7566": 729, "5899": 729, "7032": 729, "9953": 729, "1374": 729, "728": 729, "4628": 729, "6456": 729, "6029": 729, "6438": 729, "5799": 729, "4542": 729, "6004": 729, "9957": 729, "0626": 729, "4789": 729, "6134": 729, "7432": 729, "5525": 729, "4731": 729, "6504": 729, "7617": 729, "6094": 729, "7828": 729, "5098": 729, "7622": 729, "6505": 729, "3242": 729, "6878": 729, "5058": 729, "6393": 729, "7633": 729, "6491": 729, "9978": 729, "5514": 729, "6864": 729, "5084": 729, "6519": 729, "6509": 729, "0006": 729, "4728": 729, "6876": 729, "5045": 729, "6474": 729, "9952": 729, "6379": 729, "5282": 729, "614": 729, "7448": 729, "6312": 729, "6377": 729, "5228": 729, "5991": 729, "6261": 729, "9919": 729, "4096": 729, "neo": 729, "6224": 729, "4271": 729, "577": 729, "722": 729, "5871": 729, "9359": 729, "6123": 729, "4227": 729, "5738": 729, "7203": 729, "5823": 729, "9917": 729, "3377": 729, "615": 729, "4259": 729, "5714": 729, "7247": 729, "9951": 729, "2083": 729, "6154": 729, "4208": 729, "5777": 729, "7198": 729, "5834": 729, "9937": 729, "3121": 729, "20b": 729, "7233": 729, "5359": 729, "7753": 729, "195": 729, "7186": 729, "5328": 729, "7699": 729, "6687": 729, "9922": 729, "3463": 729, "7268": 729, "533": 729, "659": 729, "6726": 729, "2897": 729, "5718": 729, "6859": 729, "7927": 729, "6890": 729, "9324": 729, "7006": 729, "5655": 729, "6803": 729, "7965": 729, "6857": 729, "1515": 729, "5752": 729, "6748": 729, "7845": 729, "6724": 729, "5951": 729, "6472": 729, "5716": 729, "6685": 729, "784": 729, "6678": 729, "8539": 729, "6918": 729, "5819": 729, "678": 729, "6861": 729, "8863": 729, "5765": 729, "6827": 729, "7873": 729, "6832": 729, "9958": 729, "1451": 729, "storywrit": 729, "693": 729, "5477": 729, "663": 729, "6719": 729, "9125": 729, "6661": 729, "7813": 729, "6693": 729, "9961": 729, "1137": 729, "rw": 729, "6604": 729, "5419": 729, "6598": 729, "6594": 729, "7616": 729, "6484": 729, "5369": 729, "7807": 729, "6559": 729, "9947": 729, "9411": 729, "6571": 729, "5398": 729, "6582": 729, "6579": 729, "8809": 729, "652": 729, "535": 729, "7682": 729, "6532": 729, "9906": 729, "0048": 729, "5177": 729, "6669": 729, "7824": 729, "5053": 729, "6301": 729, "5142": 729, "6654": 729, "6483": 729, "9933": 729, "8146": 729, "517": 729, "9941": 729, "1566": 729, "724": 729, "1567": 729, "716": 729, "1414": 729, "718": 729, "97x": 729, "1459": 729, "721": 729, "02x": 729, "1582": 729, "752": 729, "7139": 729, "4289": 729, "66x": 729, "4080": 729, "7236": 729, "4299": 729, "6842": 729, "4496": 729, "52x": 729, "591": 729, "178": 729, "183": 729, "590": 729, "179": 729, "42x": 729, "5703": 729, "2578": 729, "5610": 729, "2603": 729, "shufflenet": 729, "6689": 729, "3690": 729, "5692": 729, "3758": 729, "51x": 729, "googlenet": 729, "1792": 729, "1111": 729, "1821": 729, "1104": 729, "squeezenet": 729, "9472": 729, "5582": 729, "9861": 729, "5566": 729, "77x": 729, "caffenet": 729, "3348": 729, "1141": 729, "3509": 729, "1142": 729, "2426": 729, "987": 729, "2208": 729, "1016": 729, "zfnet": 729, "930": 729, "532": 729, "919": 729, "417": 729, "1880": 729, "1159": 729, "62x": 729, "1798": 729, "1151": 729, "2890": 729, "1380": 729, "2548": 729, "1362": 729, "507": 729, "94x": 729, "1286": 729, "904": 729, "1121": 729, "856": 729, "829": 729, "1044": 729, "790": 729, "849": 729, "627": 729, "79x": 729, "yolov4": 729, "duc": 729, "tini": 729, "1119": 729, "ultra": 729, "8537": 729, "1934": 729, "emot": 729, "ferplu": 729, "3568": 729, "arcfac": 729, "494": 729, "244": 729, "226": 729, "392": 729, "223": 729, "integerop": 729, "473": 729, "548": 729, "964": 729, "540": 729, "394": 729, "602": 729, "487": 729, "222": 729, "20x": 729, "189": 729, "146": 729, "125": 729, "bidaf": 729, "2757": 729, "2277": 729, "gpt2": 729, "360": 729, "213": 729, "490": 729, "304": 729, "214": 729, "347": 729, "272": 729, "216": 729, "26x": 729, "489": 729, "27x": 729, "l12": 729, "h384": 729, "1054": 729, "585": 729, "1072": 729, "890": 729, "746": 729, "268": 729, "211": 729, "l6": 729, "1958": 729, "1130": 729, "73x": 729, "electra": 729, "discrimin": 729, "1797": 729, "1077": 729, "67x": 729, "1930": 729, "1139": 729, "mini": 729, "5510": 729, "3334": 729, "5627": 729, "3365": 729, "108": 729, "110": 729, "bart": 729, "15x": 729, "deberta": 729, "168": 729, "145": 729, "spanbert": 729, "63x": 729, "multilingu": 729, "113": 729, "159": 729, "40x": 729, "distilgpt2": 729, "layoutlm": 729, "layoutlmv2": 729, "codebert": 729, "47x": 729, "fcn": 729, "perplex": 729, "2788": 729, "7002": 729, "4124": 729, "9921": 729, "3950": 729, "5711": 729, "9892": 729, "9163": 729, "7240": 729, "9902": 729, "0438": 729, "7634": 729, "1186": 729, "9944": 729, "1276": 729, "7543": 729, "6181": 729, "rtnw4g32asym": 729, "6496": 729, "9967": 729, "7964": 729, "6612": 729, "rtnw4g32sym": 729, "7941": 729, "7243": 729, "9971": 729, "taskdataset": 729, "accuracyspars": 729, "ratiospars": 729, "commentsbalancedor": 729, "unbalanc": 729, "answeringsquad": 729, "87f1": 729, "momentumunbalanc": 729, "momentumbalanc": 729, "90f1": 729, "59f1": 729, "23f1": 729, "classificationmrpc": 729, "52f1": 729, "26f1": 729, "classificationsst": 729, "61accuraci": 729, "recognitionimagenet": 729, "95top1": 729, "v5s6": 729, "detectioncoco": 729, "ap0": 729, "6ap0": 729, "393": 729, "584": 729, "34f1": 729, "lassounbalanc": 729, "classificationmnli": 729, "mm": 729, "allbalanc": 729, "32accuraci": 729, "sensitivitybalanc": 729, "classificationqqp": 729, "classificationqnli": 729, "54accuraci": 729, "em": 729, "mobilenetv2": 729, "wideresnet40": 729, "9522": 729, "8178": 729, "0213": 729, "8235": 729, "027": 729, "5494": 729, "7153": 729, "5540": 729, "0046": 729, "5523": 729, "vgg": 729, "bn": 729, "7022": 729, "7415": 729, "7025": 729, "0003": 729, "6739": 729, "7399": 729, "6845": 729, "0106": 729, "blendcnn": 729, "7034": 729, "8382": 729, "bilstm": 729, "8314": 729, "9403": 729, "9048": 729, "0734": 729, "7323": 729, "8256": 729, "8084": 729, "8814": 729, "7442": 729, "8371": 729, "0119": 729, "0115": 729, "tinybert": 729, "8018": 729, "8044": 729, "8363": 729, "8411": 729, "8025": 729, "8074": 729, "0007": 729, "0030": 729, "8626": 729, "9091": 729, "8782": 729, "8684": 729, "8259": 729, "0058": 729, "distilroberta": 729, "6057": 729, "6187": 729, "0130": 729, "c6i": 729, "2xlarg": 729, "c6a": 729, "c6g": 729, "a100cuda": 729, "executionprovid": 729}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [364, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [175, 0, 0, "-", "algorithm"], [178, 0, 0, "-", "benchmark"], [181, 0, 0, "-", "common"], [196, 0, 0, "-", "compression"], [229, 0, 0, "-", "conf"], [231, 0, 0, "-", "config"], [232, 0, 0, "-", "contrib"], [257, 0, 0, "-", "data"], [311, 0, 0, "-", "experimental"], [371, 0, 0, "-", "metric"], [373, 0, 0, "-", "mix_precision"], [375, 0, 0, "-", "model"], [383, 0, 0, "-", "objective"], [395, 0, 0, "-", "onnxrt"], [405, 0, 0, "-", "profiling"], [427, 0, 0, "-", "quantization"], [435, 0, 0, "-", "strategy"], [447, 0, 0, "-", "template"], [456, 0, 0, "-", "tensorflow"], [604, 0, 0, "-", "torch"], [616, 0, 0, "-", "training"], [620, 0, 0, "-", "utils"], [629, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [159, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "auto_round"], [152, 0, 0, "-", "autoround"], [155, 0, 0, "-", "awq"], [156, 0, 0, "-", "bf16_convert"], [157, 0, 0, "-", "gptq"], [158, 0, 0, "-", "hawq_metric"], [160, 0, 0, "-", "layer_wise_quant"], [165, 0, 0, "-", "mixed_precision"], [166, 0, 0, "-", "model_wrapper"], [167, 0, 0, "-", "pattern_detector"], [168, 0, 0, "-", "smooth_quant"], [169, 0, 0, "-", "symbolic_trace"], [170, 0, 0, "-", "teq"], [171, 0, 0, "-", "util"], [172, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, 0, 0, "-", "autoround"], [151, 0, 0, "-", "export"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, 1, 1, "", "AutoAdamRound"], [150, 1, 1, "", "AutoOPTRound"], [150, 1, 1, "", "AutoRound"], [150, 1, 1, "", "SaveInputs"], [150, 1, 1, "", "WrapperMultiblock"], [150, 2, 1, "", "block_forward"], [150, 2, 1, "", "check_is_cpu"], [150, 2, 1, "", "collect_minmax_scale"], [150, 2, 1, "", "collect_round_v"], [150, 2, 1, "", "get_batch_dim"], [150, 2, 1, "", "get_block_names"], [150, 2, 1, "", "get_dataloader"], [150, 2, 1, "", "get_module"], [150, 2, 1, "", "get_scale_shape"], [150, 2, 1, "", "get_tokenizer_function"], [150, 2, 1, "", "move_input_to_device"], [150, 2, 1, "", "quant_weight"], [150, 2, 1, "", "quant_weight_actor"], [150, 2, 1, "", "quant_weight_asym"], [150, 2, 1, "", "quant_weight_sym"], [150, 2, 1, "", "quant_weight_w_scale"], [150, 2, 1, "", "round_ste"], [150, 2, 1, "", "sampling_inputs"], [150, 2, 1, "", "set_module"], [150, 2, 1, "", "unwrapper_block"], [150, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, 1, 1, "", "SGD"], [154, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[155, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, 1, 1, "", "BF16ModuleWrapper"], [156, 2, 1, "", "Convert"], [156, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, 1, 1, "", "GPTQ"], [157, 1, 1, "", "GPTQuantizer"], [157, 2, 1, "", "find_layers"], [157, 2, 1, "", "find_layers_name"], [157, 2, 1, "", "is_leaf"], [157, 2, 1, "", "log_quantizable_layers_per_transformer"], [157, 2, 1, "", "quantize"], [157, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, 1, 1, "", "HessianTrace"], [158, 1, 1, "", "Node_collector"], [158, 2, 1, "", "compare_weights"], [158, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[161, 0, 0, "-", "modified_pickle"], [162, 0, 0, "-", "quantize"], [163, 0, 0, "-", "torch_load"], [164, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, 3, 1, "", "PickleError"], [161, 3, 1, "", "PicklingError"], [161, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, 2, 1, "", "dowload_hf_model"], [164, 2, 1, "", "get_children"], [164, 2, 1, "", "get_module"], [164, 2, 1, "", "get_named_children"], [164, 2, 1, "", "get_super_module_by_name"], [164, 2, 1, "", "load_empty_model"], [164, 2, 1, "", "load_layer_wise_quantized_model"], [164, 2, 1, "", "load_tensor"], [164, 2, 1, "", "load_tensor_from_shard"], [164, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, 1, 1, "", "FakeAffineTensorQuantFunction"], [166, 1, 1, "", "MulLinear"], [166, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[168, 1, 1, "", "TorchSmoothQuant"], [168, 2, 1, "", "get_module"], [168, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[169, 2, 1, "", "symbolic_trace"], [169, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[170, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[171, 2, 1, "", "append_attr"], [171, 2, 1, "", "auto_copy"], [171, 2, 1, "", "calculate_quant_min_max"], [171, 2, 1, "", "calibration"], [171, 2, 1, "", "check_cfg_and_qconfig"], [171, 2, 1, "", "collate_torch_preds"], [171, 2, 1, "", "collect_weight_info"], [171, 2, 1, "", "fetch_module"], [171, 2, 1, "", "forward_wrapper"], [171, 2, 1, "", "generate_activation_observer"], [171, 2, 1, "", "get_absorb_layers"], [171, 2, 1, "", "get_block_prefix"], [171, 2, 1, "", "get_depth"], [171, 2, 1, "", "get_dict_at_depth"], [171, 2, 1, "", "get_element_under_depth"], [171, 2, 1, "", "get_embedding_contiguous"], [171, 2, 1, "", "get_example_input"], [171, 2, 1, "", "get_fallback_order"], [171, 2, 1, "", "get_hidden_states"], [171, 2, 1, "", "get_module_input_output"], [171, 2, 1, "", "get_mse_order_per_fp32"], [171, 2, 1, "", "get_mse_order_per_int8"], [171, 2, 1, "", "get_op_type_by_name"], [171, 2, 1, "", "get_quantizable_ops_from_cfgs"], [171, 2, 1, "", "get_torch_version"], [171, 2, 1, "", "input2tuple"], [171, 2, 1, "", "is_fused_module"], [171, 2, 1, "", "match_datatype_pattern"], [171, 2, 1, "", "move_input_device"], [171, 2, 1, "", "paser_cfgs"], [171, 2, 1, "", "set_module"], [171, 2, 1, "", "simple_inference"], [171, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[172, 2, 1, "", "autoround_quantize"], [172, 2, 1, "", "awq_quantize"], [172, 2, 1, "", "gptq_quantize"], [172, 2, 1, "", "qdq_weight_actor"], [172, 2, 1, "", "qdq_weight_asym"], [172, 2, 1, "", "qdq_weight_sym"], [172, 2, 1, "", "quant_weight"], [172, 2, 1, "", "quant_weight_w_scale"], [172, 2, 1, "", "quantize_4bit"], [172, 2, 1, "", "rtn_quantize"], [172, 2, 1, "", "search_clip"], [172, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[173, 0, 0, "-", "algorithm"], [174, 0, 0, "-", "fast_bias_correction"], [176, 0, 0, "-", "smooth_quant"], [177, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[173, 1, 1, "", "ALGORITHMS"], [173, 1, 1, "", "Algorithm"], [173, 1, 1, "", "AlgorithmScheduler"], [173, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[174, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[176, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[177, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[178, 2, 1, "", "benchmark_with_raw_cmd"], [178, 2, 1, "", "call_one"], [178, 2, 1, "", "config_instance"], [178, 2, 1, "", "fit"], [178, 2, 1, "", "generate_prefix"], [178, 2, 1, "", "get_architecture"], [178, 2, 1, "", "get_bounded_threads"], [178, 2, 1, "", "get_core_ids"], [178, 2, 1, "", "get_physical_ids"], [178, 2, 1, "", "get_threads"], [178, 2, 1, "", "get_threads_per_core"], [178, 2, 1, "", "profile"], [178, 2, 1, "", "run_instance"], [178, 2, 1, "", "set_all_env_var"], [178, 2, 1, "", "set_env_var"], [178, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[179, 0, 0, "-", "base_config"], [180, 0, 0, "-", "base_tuning"], [182, 0, 0, "-", "tuning_param"], [184, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[179, 1, 1, "", "BaseConfig"], [179, 1, 1, "", "ComposableConfig"], [179, 2, 1, "", "register_config"], [179, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[180, 1, 1, "", "Evaluator"], [180, 1, 1, "", "SequentialSampler"], [180, 1, 1, "", "TuningConfig"]], "neural_compressor.common.tuning_param": [[182, 1, 1, "", "ParamLevel"], [182, 1, 1, "", "TuningParam"]], "neural_compressor.common.utils": [[183, 0, 0, "-", "constants"], [185, 0, 0, "-", "logger"], [186, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[185, 1, 1, "", "Logger"], [185, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.utility": [[186, 2, 1, "", "dump_elapsed_time"], [186, 2, 1, "", "set_random_seed"], [186, 2, 1, "", "set_resume_from"], [186, 2, 1, "", "set_tensorboard"], [186, 2, 1, "", "set_workspace"]], "neural_compressor.compression": [[187, 0, 0, "-", "callbacks"], [189, 0, 0, "-", "distillation"], [192, 0, 0, "-", "hpo"], [199, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[187, 1, 1, "", "BaseCallbacks"], [187, 1, 1, "", "DistillationCallbacks"], [187, 1, 1, "", "PruningCallbacks"], [187, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[187, 4, 1, "", "_epoch_ran"], [187, 4, 1, "", "best_model"], [187, 4, 1, "", "best_score"], [187, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[188, 0, 0, "-", "criterions"], [190, 0, 0, "-", "optimizers"], [191, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[188, 1, 1, "", "Criterions"], [188, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [188, 1, 1, "", "KnowledgeDistillationFramework"], [188, 1, 1, "", "KnowledgeDistillationLoss"], [188, 1, 1, "", "PyTorchCriterions"], [188, 1, 1, "", "PyTorchCrossEntropyLoss"], [188, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [188, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [188, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [188, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [188, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [188, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [188, 1, 1, "", "SelfKnowledgeDistillationLoss"], [188, 1, 1, "", "TensorFlowCrossEntropyLoss"], [188, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [188, 1, 1, "", "TensorflowCriterions"], [188, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [188, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [188, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [188, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[190, 1, 1, "", "Optimizers"], [190, 1, 1, "", "PyTorchOptimizers"], [190, 1, 1, "", "PyTorchSGD"], [190, 1, 1, "", "TensorFlowAdam"], [190, 1, 1, "", "TensorFlowAdamW"], [190, 1, 1, "", "TensorFlowSGD"], [190, 1, 1, "", "TensorflowOptimizers"], [190, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[191, 2, 1, "", "get_activation"], [191, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[193, 0, 0, "-", "sa_optimizer"], [194, 0, 0, "-", "search_algorithms"], [195, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[194, 1, 1, "", "BayesianOptimizationSearcher"], [194, 1, 1, "", "GridSearcher"], [194, 1, 1, "", "RandomSearcher"], [194, 1, 1, "", "Searcher"], [194, 1, 1, "", "XgbSearcher"], [194, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[195, 1, 1, "", "BaseSearchSpace"], [195, 1, 1, "", "ContinuousSearchSpace"], [195, 1, 1, "", "DiscreteSearchSpace"], [195, 1, 1, "", "SearchSpace"], [195, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[197, 0, 0, "-", "criteria"], [198, 0, 0, "-", "dsnot"], [201, 0, 0, "-", "model_slim"], [205, 0, 0, "-", "patterns"], [199, 2, 1, "", "prepare_pruning"], [212, 0, 0, "-", "pruners"], [218, 0, 0, "-", "pruning"], [219, 0, 0, "-", "regs"], [199, 2, 1, "", "save"], [220, 0, 0, "-", "schedulers"], [221, 0, 0, "-", "tf_criteria"], [222, 0, 0, "-", "utils"], [223, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[197, 1, 1, "", "BlockMaskCriterion"], [197, 1, 1, "", "GradientCriterion"], [197, 1, 1, "", "MagnitudeCriterion"], [197, 1, 1, "", "PruningCriterion"], [197, 1, 1, "", "RetrainFreeCriterion"], [197, 1, 1, "", "SnipCriterion"], [197, 1, 1, "", "SnipMomentumCriterion"], [197, 2, 1, "", "get_criterion"], [197, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[197, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[198, 2, 1, "", "DSnoT"], [198, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[200, 0, 0, "-", "auto_slim"], [202, 0, 0, "-", "pattern_analyzer"], [203, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[200, 2, 1, "", "generate_ffn2_pruning_config"], [200, 2, 1, "", "generate_mha_pruning_config"], [200, 2, 1, "", "model_slim"], [200, 2, 1, "", "model_slim_ffn2"], [200, 2, 1, "", "model_slim_mha"], [200, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[202, 1, 1, "", "ClassifierHeadSearcher"], [202, 1, 1, "", "ClassifierHeadSearcherTF"], [202, 1, 1, "", "JitBasicSearcher"], [202, 1, 1, "", "Linear2LinearSearcher"], [202, 1, 1, "", "RecipeSearcher"], [202, 1, 1, "", "SelfMHASearcher"], [202, 2, 1, "", "get_attributes"], [202, 2, 1, "", "get_common_module"], [202, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[202, 4, 1, "", "device"], [202, 4, 1, "", "flatten_static_graph"], [202, 4, 1, "", "model"], [202, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[202, 4, 1, "", "device"], [202, 4, 1, "", "flatten_static_graph"], [202, 4, 1, "", "model"], [202, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[202, 4, 1, "", "device"], [202, 4, 1, "", "flatten_static_graph"], [202, 4, 1, "", "model"], [202, 4, 1, "", "searching_results"], [202, 4, 1, "", "static_graph"], [202, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[202, 4, 1, "", "current_pattern"], [202, 4, 1, "", "device"], [202, 4, 1, "", "flatten_static_graph"], [202, 4, 1, "", "model"], [202, 4, 1, "", "searching_results"], [202, 4, 1, "", "static_graph"], [202, 4, 1, "", "target_layers"], [202, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[202, 4, 1, "", "model"], [202, 4, 1, "", "recipe"], [202, 4, 1, "", "searching_results"], [202, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[202, 4, 1, "", "device"], [202, 4, 1, "", "flatten_static_graph"], [202, 4, 1, "", "model"], [202, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[203, 1, 1, "", "LinearCompression"], [203, 1, 1, "", "LinearCompressionIterator"], [203, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[203, 4, 1, "", "device"], [203, 4, 1, "", "layer_1"], [203, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[203, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[204, 0, 0, "-", "base"], [205, 2, 1, "", "get_pattern"], [206, 0, 0, "-", "mha"], [207, 0, 0, "-", "ninm"], [208, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[204, 1, 1, "", "BasePattern"], [204, 1, 1, "", "KerasBasePattern"], [204, 1, 1, "", "PytorchBasePattern"], [204, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[204, 4, 1, "", "config"], [204, 4, 1, "", "invalid_layers"], [204, 4, 1, "", "is_global"], [204, 4, 1, "", "keep_mask_layers"], [204, 4, 1, "", "max_sparsity_ratio_per_op"], [204, 4, 1, "", "min_sparsity_ratio_per_op"], [204, 4, 1, "", "modules"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[204, 4, 1, "", "config"], [204, 4, 1, "", "invalid_layers"], [204, 4, 1, "", "is_global"], [204, 4, 1, "", "keep_mask_layers"], [204, 4, 1, "", "max_sparsity_ratio_per_op"], [204, 4, 1, "", "min_sparsity_ratio_per_op"], [204, 4, 1, "", "modules"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[204, 4, 1, "", "config"], [204, 4, 1, "", "invalid_layers"], [204, 4, 1, "", "is_global"], [204, 4, 1, "", "keep_mask_layers"], [204, 4, 1, "", "max_sparsity_ratio_per_op"], [204, 4, 1, "", "min_sparsity_ratio_per_op"], [204, 4, 1, "", "modules"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[206, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[206, 4, 1, "", "M"], [206, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[207, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[207, 4, 1, "", "M"], [207, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[208, 1, 1, "", "KerasPatternNxM"], [208, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[208, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[208, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[209, 0, 0, "-", "base"], [210, 0, 0, "-", "basic"], [211, 0, 0, "-", "block_mask"], [212, 2, 1, "", "get_pruner"], [213, 0, 0, "-", "mha"], [212, 2, 1, "", "parse_valid_pruner_types"], [214, 0, 0, "-", "pattern_lock"], [215, 0, 0, "-", "progressive"], [216, 0, 0, "-", "retrain_free"], [217, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[209, 1, 1, "", "BasePruner"], [209, 1, 1, "", "KerasBasePruner"], [209, 1, 1, "", "PytorchBasePruner"], [209, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[209, 4, 1, "", "config"], [209, 4, 1, "", "current_sparsity_ratio"], [209, 4, 1, "", "end_step"], [209, 4, 1, "", "global_step"], [209, 4, 1, "", "masks"], [209, 4, 1, "", "max_sparsity_ratio_per_op"], [209, 4, 1, "", "modules"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "pruning_frequency"], [209, 4, 1, "", "scheduler"], [209, 4, 1, "", "scores"], [209, 4, 1, "", "start_step"], [209, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[209, 4, 1, "", "config"], [209, 4, 1, "", "current_sparsity_ratio"], [209, 4, 1, "", "end_step"], [209, 4, 1, "", "global_step"], [209, 4, 1, "", "masks"], [209, 4, 1, "", "max_sparsity_ratio_per_op"], [209, 4, 1, "", "modules"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "pruning_frequency"], [209, 4, 1, "", "scheduler"], [209, 4, 1, "", "scores"], [209, 4, 1, "", "start_step"], [209, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[209, 4, 1, "", "config"], [209, 4, 1, "", "current_sparsity_ratio"], [209, 4, 1, "", "end_step"], [209, 4, 1, "", "global_step"], [209, 4, 1, "", "masks"], [209, 4, 1, "", "max_sparsity_ratio_per_op"], [209, 4, 1, "", "modules"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "pruning_frequency"], [209, 4, 1, "", "scheduler"], [209, 4, 1, "", "scores"], [209, 4, 1, "", "start_step"], [209, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[210, 1, 1, "", "KerasBasicPruner"], [210, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[210, 4, 1, "", "criterion"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "reg"], [210, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[210, 4, 1, "", "criterion"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "reg"], [210, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[211, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[211, 4, 1, "", "criterion"], [211, 4, 1, "", "pattern"], [211, 4, 1, "", "reg"], [211, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[213, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[213, 4, 1, "", "head_masks"], [213, 4, 1, "", "linear_layers"], [213, 4, 1, "", "mha_compressions"], [213, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[214, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[215, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[216, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[216, 4, 1, "", "criterion"], [216, 4, 1, "", "pattern"], [216, 4, 1, "", "reg"], [216, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[217, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[217, 4, 1, "", "criterion"], [217, 4, 1, "", "pattern"], [217, 4, 1, "", "reg"], [217, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[218, 1, 1, "", "BasePruning"], [218, 1, 1, "", "BasicPruning"], [218, 1, 1, "", "RetrainFreePruning"], [218, 1, 1, "", "SparseGPTPruning"], [218, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[218, 4, 1, "", "config_file_path"], [218, 4, 1, "", "model"], [218, 4, 1, "", "pruner_info"], [218, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[218, 4, 1, "", "config_file_path"], [218, 4, 1, "", "model"], [218, 4, 1, "", "pruner_info"], [218, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[218, 4, 1, "", "config_file_path"], [218, 4, 1, "", "model"], [218, 4, 1, "", "pruner_info"], [218, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[219, 1, 1, "", "BaseReg"], [219, 1, 1, "", "GroupLasso"], [219, 2, 1, "", "get_reg"], [219, 2, 1, "", "get_reg_type"], [219, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[219, 4, 1, "", "alpha"], [219, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[220, 1, 1, "", "IterativeScheduler"], [220, 1, 1, "", "OneshotScheduler"], [220, 1, 1, "", "PruningScheduler"], [220, 2, 1, "", "get_scheduler"], [220, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[220, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[221, 1, 1, "", "MagnitudeCriterion"], [221, 1, 1, "", "PruningCriterion"], [221, 2, 1, "", "get_tf_criterion"], [221, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[221, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[221, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[222, 2, 1, "", "check_config"], [222, 2, 1, "", "check_key_validity"], [222, 2, 1, "", "collect_layer_inputs"], [222, 2, 1, "", "generate_pruner_config"], [222, 2, 1, "", "get_layers"], [222, 2, 1, "", "get_sparsity_ratio"], [222, 2, 1, "", "get_sparsity_ratio_tf"], [222, 2, 1, "", "parse_last_linear"], [222, 2, 1, "", "parse_last_linear_tf"], [222, 2, 1, "", "parse_to_prune"], [222, 2, 1, "", "parse_to_prune_tf"], [222, 2, 1, "", "process_and_check_config"], [222, 2, 1, "", "process_config"], [222, 2, 1, "", "process_weight_config"], [222, 2, 1, "", "process_yaml_config"], [222, 2, 1, "", "reset_none_to_default"], [222, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[224, 0, 0, "-", "prune"], [225, 0, 0, "-", "utils"], [226, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[224, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[225, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[226, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[227, 0, 0, "-", "config"], [228, 0, 0, "-", "dotdict"], [230, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[227, 1, 1, "", "Benchmark_Conf"], [227, 1, 1, "", "Conf"], [227, 1, 1, "", "Distillation_Conf"], [227, 1, 1, "", "Graph_Optimization_Conf"], [227, 1, 1, "", "MixedPrecision_Conf"], [227, 1, 1, "", "NASConfig"], [227, 1, 1, "", "PrunerV2"], [227, 1, 1, "", "Pruning_Conf"], [227, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[228, 1, 1, "", "DotDict"], [228, 2, 1, "", "deep_get"], [228, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[230, 1, 1, "", "AccuracyCriterion"], [230, 1, 1, "", "BenchmarkConfig"], [230, 1, 1, "", "DistillationConfig"], [230, 1, 1, "", "KnowledgeDistillationLossConfig"], [230, 1, 1, "", "Options"], [230, 1, 1, "", "QuantizationConfig"], [230, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[231, 1, 1, "", "AccuracyCriterion"], [231, 1, 1, "", "BenchmarkConfig"], [231, 1, 1, "", "DistillationConfig"], [231, 1, 1, "", "DotDict"], [231, 1, 1, "", "ExportConfig"], [231, 1, 1, "", "HPOConfig"], [231, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [231, 1, 1, "", "Keras"], [231, 1, 1, "", "KnowledgeDistillationLossConfig"], [231, 1, 1, "", "MXNet"], [231, 1, 1, "", "MixedPrecisionConfig"], [231, 1, 1, "", "NASConfig"], [231, 1, 1, "", "ONNX"], [231, 1, 1, "", "ONNXQlinear2QDQConfig"], [231, 1, 1, "", "Options"], [231, 1, 1, "", "PostTrainingQuantConfig"], [231, 1, 1, "", "PyTorch"], [231, 1, 1, "", "QuantizationAwareTrainingConfig"], [231, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [231, 1, 1, "", "TF2ONNXConfig"], [231, 1, 1, "", "TensorFlow"], [231, 1, 1, "", "Torch2ONNXConfig"], [231, 1, 1, "", "TuningCriterion"], [231, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[233, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[234, 0, 0, "-", "sigopt"], [235, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[234, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[235, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[240, 0, 0, "-", "dataloaders"], [252, 0, 0, "-", "datasets"], [256, 0, 0, "-", "filters"], [260, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[236, 0, 0, "-", "base_dataloader"], [237, 0, 0, "-", "dataloader"], [238, 0, 0, "-", "default_dataloader"], [239, 0, 0, "-", "fetcher"], [241, 0, 0, "-", "mxnet_dataloader"], [242, 0, 0, "-", "onnxrt_dataloader"], [243, 0, 0, "-", "pytorch_dataloader"], [244, 0, 0, "-", "sampler"], [245, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[236, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[237, 1, 1, "", "DataLoader"], [237, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[238, 1, 1, "", "DefaultDataLoader"], [238, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[239, 1, 1, "", "Fetcher"], [239, 1, 1, "", "IndexFetcher"], [239, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[241, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[242, 1, 1, "", "ONNXRTBertDataLoader"], [242, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[243, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[244, 1, 1, "", "BatchSampler"], [244, 1, 1, "", "IterableSampler"], [244, 1, 1, "", "Sampler"], [244, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[245, 1, 1, "", "TFDataDataLoader"], [245, 1, 1, "", "TensorflowBertDataLoader"], [245, 1, 1, "", "TensorflowDataLoader"], [245, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[246, 0, 0, "-", "bert_dataset"], [247, 0, 0, "-", "coco_dataset"], [248, 0, 0, "-", "dataset"], [249, 0, 0, "-", "dummy_dataset"], [250, 0, 0, "-", "dummy_dataset_v2"], [251, 0, 0, "-", "imagenet_dataset"], [253, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[246, 1, 1, "", "InputFeatures"], [246, 1, 1, "", "ONNXRTBertDataset"], [246, 1, 1, "", "ParseDecodeBert"], [246, 1, 1, "", "PytorchBertDataset"], [246, 1, 1, "", "TensorflowBertDataset"], [246, 1, 1, "", "TensorflowModelZooBertDataset"], [246, 2, 1, "", "convert_examples_to_features"], [246, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[247, 1, 1, "", "COCONpy"], [247, 1, 1, "", "COCORaw"], [247, 1, 1, "", "COCORecordDataset"], [247, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[248, 1, 1, "", "CIFAR10"], [248, 1, 1, "", "CIFAR100"], [248, 1, 1, "", "Dataset"], [248, 1, 1, "", "Datasets"], [248, 1, 1, "", "FashionMNIST"], [248, 1, 1, "", "ImageFolder"], [248, 1, 1, "", "IterableDataset"], [248, 1, 1, "", "MNIST"], [248, 1, 1, "", "MXNetCIFAR10"], [248, 1, 1, "", "MXNetCIFAR100"], [248, 1, 1, "", "MXNetDatasets"], [248, 1, 1, "", "MXNetFashionMNIST"], [248, 1, 1, "", "MXNetImageFolder"], [248, 1, 1, "", "MXNetMNIST"], [248, 1, 1, "", "ONNXRTITDatasets"], [248, 1, 1, "", "ONNXRTQLDatasets"], [248, 1, 1, "", "PyTorchDatasets"], [248, 1, 1, "", "PytorchCIFAR10"], [248, 1, 1, "", "PytorchCIFAR100"], [248, 1, 1, "", "PytorchFashionMNIST"], [248, 1, 1, "", "PytorchMNIST"], [248, 1, 1, "", "PytorchMxnetWrapDataset"], [248, 1, 1, "", "PytorchMxnetWrapFunction"], [248, 1, 1, "", "Tensorflow"], [248, 1, 1, "", "TensorflowCIFAR10"], [248, 1, 1, "", "TensorflowCIFAR100"], [248, 1, 1, "", "TensorflowDatasets"], [248, 1, 1, "", "TensorflowFashionMNIST"], [248, 1, 1, "", "TensorflowImageRecord"], [248, 1, 1, "", "TensorflowMNIST"], [248, 1, 1, "", "TensorflowTFRecordDataset"], [248, 1, 1, "", "TensorflowVOCRecord"], [248, 2, 1, "", "calculate_md5"], [248, 2, 1, "", "check_integrity"], [248, 2, 1, "", "dataset_registry"], [248, 2, 1, "", "download_url"], [248, 5, 1, "", "framework_datasets"], [248, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[249, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[250, 1, 1, "", "DummyDataset"], [250, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[251, 1, 1, "", "ImagenetRaw"], [251, 1, 1, "", "MXNetImagenetRaw"], [251, 1, 1, "", "ONNXRTImagenetDataset"], [251, 1, 1, "", "PytorchImagenetRaw"], [251, 1, 1, "", "TensorflowImagenetDataset"], [251, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[253, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[254, 0, 0, "-", "coco_filter"], [255, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[254, 1, 1, "", "LabelBalanceCOCORawFilter"], [254, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[255, 1, 1, "", "FILTERS"], [255, 1, 1, "", "Filter"], [255, 1, 1, "", "MXNetFilters"], [255, 1, 1, "", "ONNXRTITFilters"], [255, 1, 1, "", "ONNXRTQLFilters"], [255, 1, 1, "", "PyTorchFilters"], [255, 1, 1, "", "TensorflowFilters"], [255, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[258, 0, 0, "-", "coco_transform"], [259, 0, 0, "-", "imagenet_transform"], [261, 0, 0, "-", "postprocess"], [262, 0, 0, "-", "tokenization"], [263, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[258, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[259, 1, 1, "", "BilinearImagenetTransform"], [259, 1, 1, "", "LabelShift"], [259, 1, 1, "", "ONNXResizeCropImagenetTransform"], [259, 1, 1, "", "OnnxBilinearImagenetTransform"], [259, 1, 1, "", "ParseDecodeImagenet"], [259, 1, 1, "", "ParseDecodeImagenetTransform"], [259, 1, 1, "", "QuantizedInput"], [259, 1, 1, "", "ResizeWithAspectRatio"], [259, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [259, 1, 1, "", "TensorflowShiftRescale"], [259, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[261, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[262, 1, 1, "", "BasicTokenizer"], [262, 1, 1, "", "FullTokenizer"], [262, 1, 1, "", "WordpieceTokenizer"], [262, 2, 1, "", "convert_by_vocab"], [262, 2, 1, "", "convert_to_unicode"], [262, 2, 1, "", "load_vocab"], [262, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[263, 1, 1, "", "AlignImageChannelTransform"], [263, 1, 1, "", "BaseTransform"], [263, 1, 1, "", "CastONNXTransform"], [263, 1, 1, "", "CastPyTorchTransform"], [263, 1, 1, "", "CastTFTransform"], [263, 1, 1, "", "CenterCropTFTransform"], [263, 1, 1, "", "CenterCropTransform"], [263, 1, 1, "", "CollectTransform"], [263, 1, 1, "", "ComposeTransform"], [263, 1, 1, "", "CropResizeTFTransform"], [263, 1, 1, "", "CropResizeTransform"], [263, 1, 1, "", "CropToBoundingBox"], [263, 1, 1, "", "InputFeatures"], [263, 1, 1, "", "MXNetCropResizeTransform"], [263, 1, 1, "", "MXNetCropToBoundingBox"], [263, 1, 1, "", "MXNetNormalizeTransform"], [263, 1, 1, "", "MXNetTransforms"], [263, 1, 1, "", "MXNetTranspose"], [263, 1, 1, "", "NormalizeTFTransform"], [263, 1, 1, "", "NormalizeTransform"], [263, 1, 1, "", "ONNXRTCropToBoundingBox"], [263, 1, 1, "", "ONNXRTITTransforms"], [263, 1, 1, "", "ONNXRTQLTransforms"], [263, 1, 1, "", "PaddedCenterCropTransform"], [263, 1, 1, "", "ParseDecodeVocTransform"], [263, 1, 1, "", "PyTorchAlignImageChannel"], [263, 1, 1, "", "PyTorchCropResizeTransform"], [263, 1, 1, "", "PyTorchNormalizeTransform"], [263, 1, 1, "", "PyTorchTransforms"], [263, 1, 1, "", "PyTorchTranspose"], [263, 1, 1, "", "PytorchMxnetTransform"], [263, 1, 1, "", "PytorchMxnetWrapFunction"], [263, 1, 1, "", "RandomCropTFTransform"], [263, 1, 1, "", "RandomCropTransform"], [263, 1, 1, "", "RandomHorizontalFlip"], [263, 1, 1, "", "RandomResizedCropMXNetTransform"], [263, 1, 1, "", "RandomResizedCropPytorchTransform"], [263, 1, 1, "", "RandomResizedCropTFTransform"], [263, 1, 1, "", "RandomResizedCropTransform"], [263, 1, 1, "", "RandomVerticalFlip"], [263, 1, 1, "", "RescaleKerasPretrainTransform"], [263, 1, 1, "", "RescaleTFTransform"], [263, 1, 1, "", "RescaleTransform"], [263, 1, 1, "", "ResizeMXNetTransform"], [263, 1, 1, "", "ResizePytorchTransform"], [263, 1, 1, "", "ResizeTFTransform"], [263, 1, 1, "", "ResizeTransform"], [263, 1, 1, "", "ResizeWithRatio"], [263, 1, 1, "", "SquadExample"], [263, 1, 1, "", "TFModelZooCollectTransform"], [263, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [263, 1, 1, "", "TFSquadV1PostTransform"], [263, 1, 1, "", "TRANSFORMS"], [263, 1, 1, "", "TensorflowCropToBoundingBox"], [263, 1, 1, "", "TensorflowRandomHorizontalFlip"], [263, 1, 1, "", "TensorflowRandomVerticalFlip"], [263, 1, 1, "", "TensorflowResizeWithRatio"], [263, 1, 1, "", "TensorflowTransform"], [263, 1, 1, "", "TensorflowTransforms"], [263, 1, 1, "", "TensorflowTranspose"], [263, 1, 1, "", "TensorflowWrapFunction"], [263, 1, 1, "", "ToArray"], [263, 1, 1, "", "ToNDArrayTransform"], [263, 1, 1, "", "Transforms"], [263, 1, 1, "", "Transpose"], [263, 2, 1, "", "convert_examples_to_features"], [263, 2, 1, "", "get_final_text"], [263, 2, 1, "", "get_torchvision_map"], [263, 2, 1, "", "read_squad_examples"], [263, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[264, 0, 0, "-", "benchmark"], [267, 0, 0, "-", "common"], [273, 0, 0, "-", "component"], [274, 0, 0, "-", "compression"], [275, 0, 0, "-", "contrib"], [300, 0, 0, "-", "data"], [305, 0, 0, "-", "distillation"], [306, 0, 0, "-", "export"], [310, 0, 0, "-", "graph_optimization"], [318, 0, 0, "-", "metric"], [320, 0, 0, "-", "mixed_precision"], [321, 0, 0, "-", "model_conversion"], [324, 0, 0, "-", "nas"], [330, 0, 0, "-", "pruner_legacy"], [334, 0, 0, "-", "pruning"], [335, 0, 0, "-", "pruning_recipes"], [339, 0, 0, "-", "pruning_v2"], [340, 0, 0, "-", "pytorch_pruner"], [347, 0, 0, "-", "quantization"], [348, 0, 0, "-", "scheduler"], [353, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[264, 1, 1, "", "Benchmark"], [264, 2, 1, "", "get_architecture"], [264, 2, 1, "", "get_bounded_threads"], [264, 2, 1, "", "get_core_ids"], [264, 2, 1, "", "get_physical_ids"], [264, 2, 1, "", "get_threads"], [264, 2, 1, "", "get_threads_per_core"], [264, 2, 1, "", "set_all_env_var"], [264, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[265, 0, 0, "-", "criterion"], [266, 0, 0, "-", "dataloader"], [268, 0, 0, "-", "metric"], [269, 0, 0, "-", "model"], [270, 0, 0, "-", "optimizer"], [271, 0, 0, "-", "postprocess"], [272, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[265, 1, 1, "", "Criterions"], [265, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [265, 1, 1, "", "KnowledgeDistillationFramework"], [265, 1, 1, "", "KnowledgeDistillationLoss"], [265, 1, 1, "", "PyTorchCriterions"], [265, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [265, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [265, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [265, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [265, 1, 1, "", "SelfKnowledgeDistillationLoss"], [265, 1, 1, "", "TensorflowCriterions"], [265, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [265, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[266, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[268, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[269, 1, 1, "", "Model"], [269, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[270, 1, 1, "", "Optimizers"], [270, 1, 1, "", "PyTorchOptimizers"], [270, 1, 1, "", "PyTorchSGD"], [270, 1, 1, "", "TensorFlowAdamW"], [270, 1, 1, "", "TensorFlowSGD"], [270, 1, 1, "", "TensorflowOptimizers"], [270, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[271, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[272, 2, 1, "", "get_activation"], [272, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[273, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[276, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[277, 0, 0, "-", "sigopt"], [278, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[277, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[278, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[283, 0, 0, "-", "dataloaders"], [295, 0, 0, "-", "datasets"], [299, 0, 0, "-", "filters"], [302, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[279, 0, 0, "-", "base_dataloader"], [280, 0, 0, "-", "dataloader"], [281, 0, 0, "-", "default_dataloader"], [282, 0, 0, "-", "fetcher"], [284, 0, 0, "-", "mxnet_dataloader"], [285, 0, 0, "-", "onnxrt_dataloader"], [286, 0, 0, "-", "pytorch_dataloader"], [287, 0, 0, "-", "sampler"], [288, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[279, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[281, 1, 1, "", "DefaultDataLoader"], [281, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[282, 1, 1, "", "Fetcher"], [282, 1, 1, "", "IndexFetcher"], [282, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[284, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[285, 1, 1, "", "ONNXRTBertDataLoader"], [285, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[286, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[287, 1, 1, "", "BatchSampler"], [287, 1, 1, "", "IterableSampler"], [287, 1, 1, "", "Sampler"], [287, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[288, 1, 1, "", "TFDataDataLoader"], [288, 1, 1, "", "TensorflowBertDataLoader"], [288, 1, 1, "", "TensorflowDataLoader"], [288, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[289, 0, 0, "-", "bert_dataset"], [290, 0, 0, "-", "coco_dataset"], [291, 0, 0, "-", "dataset"], [292, 0, 0, "-", "dummy_dataset"], [293, 0, 0, "-", "dummy_dataset_v2"], [294, 0, 0, "-", "imagenet_dataset"], [296, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[289, 1, 1, "", "InputFeatures"], [289, 1, 1, "", "ONNXRTBertDataset"], [289, 1, 1, "", "ParseDecodeBert"], [289, 1, 1, "", "PytorchBertDataset"], [289, 1, 1, "", "TensorflowBertDataset"], [289, 1, 1, "", "TensorflowModelZooBertDataset"], [289, 2, 1, "", "convert_examples_to_features"], [289, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[290, 1, 1, "", "COCONpy"], [290, 1, 1, "", "COCORaw"], [290, 1, 1, "", "COCORecordDataset"], [290, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[291, 1, 1, "", "CIFAR10"], [291, 1, 1, "", "CIFAR100"], [291, 1, 1, "", "Dataset"], [291, 1, 1, "", "Datasets"], [291, 1, 1, "", "FashionMNIST"], [291, 1, 1, "", "ImageFolder"], [291, 1, 1, "", "IterableDataset"], [291, 1, 1, "", "MNIST"], [291, 1, 1, "", "MXNetCIFAR10"], [291, 1, 1, "", "MXNetCIFAR100"], [291, 1, 1, "", "MXNetDatasets"], [291, 1, 1, "", "MXNetFashionMNIST"], [291, 1, 1, "", "MXNetImageFolder"], [291, 1, 1, "", "MXNetMNIST"], [291, 1, 1, "", "ONNXRTITDatasets"], [291, 1, 1, "", "ONNXRTQLDatasets"], [291, 1, 1, "", "PyTorchDatasets"], [291, 1, 1, "", "PytorchCIFAR10"], [291, 1, 1, "", "PytorchCIFAR100"], [291, 1, 1, "", "PytorchFashionMNIST"], [291, 1, 1, "", "PytorchMNIST"], [291, 1, 1, "", "PytorchMxnetWrapDataset"], [291, 1, 1, "", "PytorchMxnetWrapFunction"], [291, 1, 1, "", "TensorflowCIFAR10"], [291, 1, 1, "", "TensorflowCIFAR100"], [291, 1, 1, "", "TensorflowDatasets"], [291, 1, 1, "", "TensorflowFashionMNIST"], [291, 1, 1, "", "TensorflowImageFolder"], [291, 1, 1, "", "TensorflowImageRecord"], [291, 1, 1, "", "TensorflowMNIST"], [291, 1, 1, "", "TensorflowTFRecordDataset"], [291, 1, 1, "", "TensorflowVOCRecord"], [291, 2, 1, "", "calculate_md5"], [291, 2, 1, "", "check_integrity"], [291, 2, 1, "", "dataset_registry"], [291, 2, 1, "", "download_url"], [291, 5, 1, "", "framework_datasets"], [291, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[292, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[293, 1, 1, "", "DummyDataset"], [293, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[294, 1, 1, "", "ImagenetRaw"], [294, 1, 1, "", "MXNetImagenetRaw"], [294, 1, 1, "", "ONNXRTImagenetDataset"], [294, 1, 1, "", "PytorchImagenetRaw"], [294, 1, 1, "", "TensorflowImagenetDataset"], [294, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[296, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[297, 0, 0, "-", "coco_filter"], [298, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[297, 1, 1, "", "LabelBalanceCOCORawFilter"], [297, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[298, 1, 1, "", "FILTERS"], [298, 1, 1, "", "Filter"], [298, 1, 1, "", "MXNetFilters"], [298, 1, 1, "", "ONNXRTITFilters"], [298, 1, 1, "", "ONNXRTQLFilters"], [298, 1, 1, "", "PyTorchFilters"], [298, 1, 1, "", "TensorflowFilters"], [298, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[301, 0, 0, "-", "imagenet_transform"], [303, 0, 0, "-", "tokenization"], [304, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[301, 1, 1, "", "BilinearImagenetTransform"], [301, 1, 1, "", "LabelShift"], [301, 1, 1, "", "ONNXResizeCropImagenetTransform"], [301, 1, 1, "", "OnnxBilinearImagenetTransform"], [301, 1, 1, "", "ParseDecodeImagenet"], [301, 1, 1, "", "ParseDecodeImagenetTransform"], [301, 1, 1, "", "QuantizedInput"], [301, 1, 1, "", "ResizeWithAspectRatio"], [301, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[303, 1, 1, "", "BasicTokenizer"], [303, 1, 1, "", "FullTokenizer"], [303, 1, 1, "", "WordpieceTokenizer"], [303, 2, 1, "", "convert_by_vocab"], [303, 2, 1, "", "convert_to_unicode"], [303, 2, 1, "", "load_vocab"], [303, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[304, 1, 1, "", "AlignImageChannelTransform"], [304, 1, 1, "", "BaseTransform"], [304, 1, 1, "", "CastONNXTransform"], [304, 1, 1, "", "CastPyTorchTransform"], [304, 1, 1, "", "CastTFTransform"], [304, 1, 1, "", "CenterCropTFTransform"], [304, 1, 1, "", "CenterCropTransform"], [304, 1, 1, "", "CollectTransform"], [304, 1, 1, "", "ComposeTransform"], [304, 1, 1, "", "CropResizeTFTransform"], [304, 1, 1, "", "CropResizeTransform"], [304, 1, 1, "", "CropToBoundingBox"], [304, 1, 1, "", "InputFeatures"], [304, 1, 1, "", "MXNetCropResizeTransform"], [304, 1, 1, "", "MXNetCropToBoundingBox"], [304, 1, 1, "", "MXNetNormalizeTransform"], [304, 1, 1, "", "MXNetTransforms"], [304, 1, 1, "", "MXNetTranspose"], [304, 1, 1, "", "NormalizeTFTransform"], [304, 1, 1, "", "NormalizeTransform"], [304, 1, 1, "", "ONNXRTCropToBoundingBox"], [304, 1, 1, "", "ONNXRTITTransforms"], [304, 1, 1, "", "ONNXRTQLTransforms"], [304, 1, 1, "", "PaddedCenterCropTransform"], [304, 1, 1, "", "ParseDecodeVocTransform"], [304, 1, 1, "", "PyTorchAlignImageChannel"], [304, 1, 1, "", "PyTorchCropResizeTransform"], [304, 1, 1, "", "PyTorchNormalizeTransform"], [304, 1, 1, "", "PyTorchTransforms"], [304, 1, 1, "", "PyTorchTranspose"], [304, 1, 1, "", "PytorchMxnetTransform"], [304, 1, 1, "", "PytorchMxnetWrapFunction"], [304, 1, 1, "", "RandomCropTFTransform"], [304, 1, 1, "", "RandomCropTransform"], [304, 1, 1, "", "RandomHorizontalFlip"], [304, 1, 1, "", "RandomResizedCropMXNetTransform"], [304, 1, 1, "", "RandomResizedCropPytorchTransform"], [304, 1, 1, "", "RandomResizedCropTFTransform"], [304, 1, 1, "", "RandomResizedCropTransform"], [304, 1, 1, "", "RandomVerticalFlip"], [304, 1, 1, "", "RescaleKerasPretrainTransform"], [304, 1, 1, "", "RescaleTFTransform"], [304, 1, 1, "", "RescaleTransform"], [304, 1, 1, "", "ResizeMXNetTransform"], [304, 1, 1, "", "ResizePytorchTransform"], [304, 1, 1, "", "ResizeTFTransform"], [304, 1, 1, "", "ResizeTransform"], [304, 1, 1, "", "ResizeWithRatio"], [304, 1, 1, "", "SquadExample"], [304, 1, 1, "", "TFModelZooCollectTransform"], [304, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [304, 1, 1, "", "TFSquadV1PostTransform"], [304, 1, 1, "", "TRANSFORMS"], [304, 1, 1, "", "TensorflowCropToBoundingBox"], [304, 1, 1, "", "TensorflowRandomHorizontalFlip"], [304, 1, 1, "", "TensorflowRandomVerticalFlip"], [304, 1, 1, "", "TensorflowResizeWithRatio"], [304, 1, 1, "", "TensorflowTransform"], [304, 1, 1, "", "TensorflowTransforms"], [304, 1, 1, "", "TensorflowTranspose"], [304, 1, 1, "", "TensorflowWrapFunction"], [304, 1, 1, "", "ToArray"], [304, 1, 1, "", "ToNDArrayTransform"], [304, 1, 1, "", "Transforms"], [304, 1, 1, "", "Transpose"], [304, 2, 1, "", "convert_examples_to_features"], [304, 2, 1, "", "get_final_text"], [304, 2, 1, "", "get_torchvision_map"], [304, 2, 1, "", "read_squad_examples"], [304, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[305, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[305, 4, 1, "", "_epoch_ran"], [305, 4, 1, "", "best_model"], [305, 4, 1, "", "best_score"], [305, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[307, 0, 0, "-", "qlinear2qdq"], [308, 0, 0, "-", "tf2onnx"], [309, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[307, 2, 1, "", "check_model"], [307, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[308, 2, 1, "", "tf_to_fp32_onnx"], [308, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[309, 2, 1, "", "dynamic_quant_export"], [309, 2, 1, "", "get_node_mapping"], [309, 2, 1, "", "get_quantizable_onnx_ops"], [309, 2, 1, "", "static_quant_export"], [309, 2, 1, "", "torch_to_fp32_onnx"], [309, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[310, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[312, 0, 0, "-", "bleu"], [313, 0, 0, "-", "bleu_util"], [314, 0, 0, "-", "coco_label_map"], [315, 0, 0, "-", "coco_tools"], [316, 0, 0, "-", "evaluate_squad"], [317, 0, 0, "-", "f1"], [319, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[312, 1, 1, "", "BLEU"], [312, 1, 1, "", "UnicodeRegex"], [312, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[312, 4, 1, "", "labels"], [312, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[312, 4, 1, "", "nondigit_punct_re"], [312, 4, 1, "", "punct_nondigit_re"], [312, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[313, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[315, 1, 1, "", "COCOEvalWrapper"], [315, 1, 1, "", "COCOWrapper"], [315, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [315, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [315, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[315, 4, 1, "", "dataset"], [315, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[316, 2, 1, "", "evaluate"], [316, 2, 1, "", "exact_match_score"], [316, 2, 1, "", "f1_score"], [316, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[317, 2, 1, "", "evaluate"], [317, 2, 1, "", "f1_score"], [317, 2, 1, "", "metric_max_over_ground_truths"], [317, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[319, 1, 1, "", "Accuracy"], [319, 1, 1, "", "BaseMetric"], [319, 1, 1, "", "COCOmAPv2"], [319, 1, 1, "", "F1"], [319, 1, 1, "", "GeneralTopK"], [319, 1, 1, "", "Loss"], [319, 1, 1, "", "MAE"], [319, 1, 1, "", "METRICS"], [319, 1, 1, "", "MSE"], [319, 1, 1, "", "MXNetMetrics"], [319, 1, 1, "", "ONNXRTGLUE"], [319, 1, 1, "", "ONNXRTITMetrics"], [319, 1, 1, "", "ONNXRTQLMetrics"], [319, 1, 1, "", "PyTorchLoss"], [319, 1, 1, "", "PyTorchMetrics"], [319, 1, 1, "", "RMSE"], [319, 1, 1, "", "ROC"], [319, 1, 1, "", "SquadF1"], [319, 1, 1, "", "TensorflowCOCOMAP"], [319, 1, 1, "", "TensorflowMAP"], [319, 1, 1, "", "TensorflowMetrics"], [319, 1, 1, "", "TensorflowTopK"], [319, 1, 1, "", "TensorflowVOCMAP"], [319, 1, 1, "", "WrapMXNetMetric"], [319, 1, 1, "", "WrapONNXRTMetric"], [319, 1, 1, "", "WrapPyTorchMetric"], [319, 1, 1, "", "mIOU"], [319, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[319, 4, 1, "", "label_list"], [319, 4, 1, "", "pred_list"], [319, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[319, 4, 1, "", "k"], [319, 4, 1, "", "num_correct"], [319, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[319, 4, 1, "", "sample"], [319, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[319, 4, 1, "", "compare_label"], [319, 4, 1, "", "label_list"], [319, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[319, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[319, 4, 1, "", "compare_label"], [319, 4, 1, "", "label_list"], [319, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[319, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[319, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[319, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[319, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[319, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[319, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[319, 4, 1, "", "k"], [319, 4, 1, "", "num_correct"], [319, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[320, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[321, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[322, 0, 0, "-", "basic_nas"], [323, 0, 0, "-", "dynas"], [325, 0, 0, "-", "nas"], [326, 0, 0, "-", "nas_utils"], [327, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[322, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[323, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[325, 1, 1, "", "NAS"], [325, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[326, 2, 1, "", "create_search_space_pool"], [326, 2, 1, "", "find_pareto_front"], [326, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[327, 1, 1, "", "BayesianOptimizationSearcher"], [327, 1, 1, "", "GridSearcher"], [327, 1, 1, "", "RandomSearcher"], [327, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[328, 0, 0, "-", "gradient_sensitivity"], [329, 0, 0, "-", "group_lasso"], [331, 0, 0, "-", "magnitude"], [332, 0, 0, "-", "pattern_lock"], [333, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[328, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[329, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[331, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[332, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[333, 1, 1, "", "Pruner"], [333, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[334, 1, 1, "", "Pruning"], [334, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[334, 4, 1, "", "conf"], [334, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[336, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[337, 0, 0, "-", "pattern"], [338, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[337, 1, 1, "", "PATTERNS"], [337, 1, 1, "", "PatternBase"], [337, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[337, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[338, 1, 1, "", "TilePatternBase"], [338, 1, 1, "", "TilePattern_1x1"], [338, 1, 1, "", "TilePattern_1x16"], [338, 1, 1, "", "TilePattern_1x2"], [338, 1, 1, "", "TilePattern_2x2"], [338, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[339, 1, 1, "", "Pruning"], [339, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[339, 4, 1, "", "conf"], [339, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[341, 0, 0, "-", "logger"], [342, 0, 0, "-", "patterns"], [343, 0, 0, "-", "prune_utils"], [344, 0, 0, "-", "pruner"], [345, 0, 0, "-", "pruning"], [346, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[342, 1, 1, "", "Pattern"], [342, 1, 1, "", "PatternNInM"], [342, 1, 1, "", "PatternNxM"], [342, 2, 1, "", "get_pattern"], [342, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[342, 4, 1, "", "is_global"], [342, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[342, 4, 1, "", "M"], [342, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[342, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[343, 2, 1, "", "check_config"], [343, 2, 1, "", "parse_not_to_prune"], [343, 2, 1, "", "parse_to_prune"], [343, 2, 1, "", "process_and_check_config"], [343, 2, 1, "", "process_config"], [343, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[344, 1, 1, "", "MagnitudePruner"], [344, 1, 1, "", "PatternLockPruner"], [344, 1, 1, "", "Pruner"], [344, 1, 1, "", "SnipMomentumPruner"], [344, 1, 1, "", "SnipPruner"], [344, 2, 1, "", "get_pruner"], [344, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[344, 4, 1, "", "config"], [344, 4, 1, "", "current_sparsity_ratio"], [344, 4, 1, "", "end_step"], [344, 4, 1, "", "global_step"], [344, 4, 1, "", "masks"], [344, 4, 1, "", "max_sparsity_ratio_per_layer"], [344, 4, 1, "", "modules"], [344, 4, 1, "", "pattern"], [344, 4, 1, "", "scheduler"], [344, 4, 1, "", "scores"], [344, 4, 1, "", "start_step"], [344, 4, 1, "", "target_sparsity_ratio"], [344, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[345, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[345, 4, 1, "", "config_file_path"], [345, 4, 1, "", "model"], [345, 4, 1, "", "pruner_info"], [345, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[346, 1, 1, "", "IterativeScheduler"], [346, 1, 1, "", "OneshotScheduler"], [346, 1, 1, "", "Scheduler"], [346, 2, 1, "", "get_scheduler"], [346, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[346, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[347, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[348, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[349, 0, 0, "-", "auto_mixed_precision"], [350, 0, 0, "-", "basic"], [351, 0, 0, "-", "bayesian"], [352, 0, 0, "-", "exhaustive"], [354, 0, 0, "-", "mse"], [355, 0, 0, "-", "mse_v2"], [356, 0, 0, "-", "random"], [357, 0, 0, "-", "strategy"], [359, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[349, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[350, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[351, 1, 1, "", "BayesianOptimization"], [351, 1, 1, "", "BayesianTuneStrategy"], [351, 1, 1, "", "TargetSpace"], [351, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[352, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[354, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[355, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[356, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[357, 1, 1, "", "TuneStrategy"], [357, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[358, 0, 0, "-", "constant"], [360, 0, 0, "-", "tuning_sampler"], [361, 0, 0, "-", "tuning_space"], [362, 0, 0, "-", "tuning_structs"], [363, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[360, 1, 1, "", "FallbackTuningSampler"], [360, 1, 1, "", "ModelWiseTuningSampler"], [360, 1, 1, "", "OpTypeWiseTuningSampler"], [360, 1, 1, "", "OpWiseTuningSampler"], [360, 1, 1, "", "SmoothQuantSampler"], [360, 1, 1, "", "TuningOrder"], [360, 1, 1, "", "TuningSampler"], [360, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[361, 1, 1, "", "TuningItem"], [361, 1, 1, "", "TuningSpace"], [361, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [361, 2, 1, "", "pattern_to_internal"], [361, 2, 1, "", "pattern_to_path"], [361, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[362, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[363, 1, 1, "", "OrderedDefaultDict"], [363, 2, 1, "", "extract_data_type"], [363, 2, 1, "", "get_adaptor_name"], [363, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[365, 0, 0, "-", "bleu"], [366, 0, 0, "-", "bleu_util"], [367, 0, 0, "-", "coco_label_map"], [368, 0, 0, "-", "coco_tools"], [369, 0, 0, "-", "evaluate_squad"], [370, 0, 0, "-", "f1"], [372, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[365, 1, 1, "", "BLEU"], [365, 1, 1, "", "UnicodeRegex"], [365, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[365, 4, 1, "", "labels"], [365, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[365, 4, 1, "", "nondigit_punct_re"], [365, 4, 1, "", "punct_nondigit_re"], [365, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[366, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[368, 1, 1, "", "COCOEvalWrapper"], [368, 1, 1, "", "COCOWrapper"], [368, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [368, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [368, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[368, 4, 1, "", "dataset"], [368, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[369, 2, 1, "", "evaluate"], [369, 2, 1, "", "exact_match_score"], [369, 2, 1, "", "f1_score"], [369, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[370, 2, 1, "", "evaluate"], [370, 2, 1, "", "f1_score"], [370, 2, 1, "", "metric_max_over_ground_truths"], [370, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[372, 1, 1, "", "Accuracy"], [372, 1, 1, "", "BaseMetric"], [372, 1, 1, "", "COCOmAPv2"], [372, 1, 1, "", "F1"], [372, 1, 1, "", "GeneralTopK"], [372, 1, 1, "", "Loss"], [372, 1, 1, "", "MAE"], [372, 1, 1, "", "METRICS"], [372, 1, 1, "", "MSE"], [372, 1, 1, "", "MXNetMetrics"], [372, 1, 1, "", "Metric"], [372, 1, 1, "", "ONNXRTGLUE"], [372, 1, 1, "", "ONNXRTITMetrics"], [372, 1, 1, "", "ONNXRTQLMetrics"], [372, 1, 1, "", "PyTorchLoss"], [372, 1, 1, "", "PyTorchMetrics"], [372, 1, 1, "", "RMSE"], [372, 1, 1, "", "ROC"], [372, 1, 1, "", "SquadF1"], [372, 1, 1, "", "TensorflowCOCOMAP"], [372, 1, 1, "", "TensorflowMAP"], [372, 1, 1, "", "TensorflowMetrics"], [372, 1, 1, "", "TensorflowTopK"], [372, 1, 1, "", "TensorflowVOCMAP"], [372, 1, 1, "", "WrapMXNetMetric"], [372, 1, 1, "", "WrapONNXRTMetric"], [372, 1, 1, "", "WrapPyTorchMetric"], [372, 1, 1, "", "mIOU"], [372, 2, 1, "", "metric_registry"], [372, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[372, 4, 1, "", "label_list"], [372, 4, 1, "", "pred_list"], [372, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[372, 4, 1, "", "k"], [372, 4, 1, "", "num_correct"], [372, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[372, 4, 1, "", "sample"], [372, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[372, 4, 1, "", "compare_label"], [372, 4, 1, "", "label_list"], [372, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[372, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[372, 4, 1, "", "compare_label"], [372, 4, 1, "", "label_list"], [372, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[372, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[372, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[372, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[372, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[372, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[372, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[372, 4, 1, "", "k"], [372, 4, 1, "", "num_correct"], [372, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[373, 2, 1, "", "fit"]], "neural_compressor.model": [[374, 0, 0, "-", "base_model"], [376, 0, 0, "-", "keras_model"], [377, 0, 0, "-", "model"], [378, 0, 0, "-", "mxnet_model"], [379, 0, 0, "-", "nets_factory"], [380, 0, 0, "-", "onnx_model"], [381, 0, 0, "-", "tensorflow_model"], [382, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[374, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[376, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[377, 1, 1, "", "Model"], [377, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[378, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[379, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[380, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[381, 1, 1, "", "TensorflowBaseModel"], [381, 1, 1, "", "TensorflowCheckpointModel"], [381, 1, 1, "", "TensorflowLLMModel"], [381, 1, 1, "", "TensorflowModel"], [381, 1, 1, "", "TensorflowQATModel"], [381, 1, 1, "", "TensorflowSavedModelModel"], [381, 2, 1, "", "checkpoint_session"], [381, 2, 1, "", "estimator_session"], [381, 2, 1, "", "frozen_pb_session"], [381, 2, 1, "", "get_model_type"], [381, 2, 1, "", "graph_def_session"], [381, 2, 1, "", "graph_session"], [381, 2, 1, "", "keras_session"], [381, 2, 1, "", "load_saved_model"], [381, 2, 1, "", "saved_model_session"], [381, 2, 1, "", "slim_session"], [381, 2, 1, "", "validate_and_inference_input_output"], [381, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[382, 1, 1, "", "IPEXModel"], [382, 1, 1, "", "PyTorchBaseModel"], [382, 1, 1, "", "PyTorchFXModel"], [382, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[383, 1, 1, "", "Accuracy"], [383, 1, 1, "", "Footprint"], [383, 1, 1, "", "ModelSize"], [383, 1, 1, "", "MultiObjective"], [383, 1, 1, "", "Objective"], [383, 1, 1, "", "Performance"], [383, 2, 1, "", "objective_custom_registry"], [383, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[384, 0, 0, "-", "algorithms"], [400, 0, 0, "-", "quantization"], [402, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[386, 0, 0, "-", "layer_wise"], [389, 0, 0, "-", "smoother"], [392, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[385, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[385, 2, 1, "", "layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.smoother": [[387, 0, 0, "-", "calibrator"], [388, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[387, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[388, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[390, 0, 0, "-", "awq"], [391, 0, 0, "-", "gptq"], [393, 0, 0, "-", "rtn"], [394, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[390, 2, 1, "", "apply_awq_on_model"], [390, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[391, 2, 1, "", "apply_gptq_on_model"], [391, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[393, 2, 1, "", "apply_rtn_on_model"], [393, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[394, 2, 1, "", "make_matmul_weight_only_node"], [394, 2, 1, "", "pad_tensor"], [394, 2, 1, "", "prepare_inputs"], [394, 2, 1, "", "qdq_tensor"], [394, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[396, 0, 0, "-", "algorithm_entry"], [397, 0, 0, "-", "autotune"], [398, 0, 0, "-", "calibrate"], [399, 0, 0, "-", "config"], [401, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[396, 2, 1, "", "awq_quantize_entry"], [396, 2, 1, "", "gptq_quantize_entry"], [396, 2, 1, "", "rtn_quantize_entry"], [396, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[397, 2, 1, "", "autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[398, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[399, 1, 1, "", "AWQConfig"], [399, 1, 1, "", "GPTQConfig"], [399, 1, 1, "", "RTNConfig"], [399, 1, 1, "", "SmoohQuantConfig"], [399, 2, 1, "", "get_default_awq_config"], [399, 2, 1, "", "get_default_gptq_config"], [399, 2, 1, "", "get_default_rtn_config"], [399, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[403, 0, 0, "-", "onnx_model"], [404, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[403, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[404, 2, 1, "", "check_model_with_infer_shapes"], [404, 2, 1, "", "find_by_name"], [404, 2, 1, "", "get_qrange_for_qType"], [404, 2, 1, "", "is_B_transposed"], [404, 2, 1, "", "quantize_data"], [404, 2, 1, "", "register_algo"], [404, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[407, 0, 0, "-", "parser"], [417, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[406, 0, 0, "-", "factory"], [409, 0, 0, "-", "onnx_parser"], [411, 0, 0, "-", "parser"], [412, 0, 0, "-", "result"], [414, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[406, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[408, 0, 0, "-", "factory"], [410, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[408, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[410, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[411, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[412, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[413, 0, 0, "-", "factory"], [415, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[413, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[415, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[416, 0, 0, "-", "factory"], [419, 0, 0, "-", "onnxrt_profiler"], [422, 0, 0, "-", "profiler"], [424, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[416, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[418, 0, 0, "-", "factory"], [420, 0, 0, "-", "profiler"], [421, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[418, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[420, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[421, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[422, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[423, 0, 0, "-", "factory"], [425, 0, 0, "-", "profiler"], [426, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[423, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[425, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[426, 2, 1, "", "create_tf_config"], [426, 2, 1, "", "delete_assign"], [426, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[427, 2, 1, "", "fit"]], "neural_compressor.strategy": [[428, 0, 0, "-", "auto"], [429, 0, 0, "-", "auto_mixed_precision"], [430, 0, 0, "-", "basic"], [431, 0, 0, "-", "bayesian"], [432, 0, 0, "-", "conservative"], [433, 0, 0, "-", "exhaustive"], [434, 0, 0, "-", "hawq_v2"], [436, 0, 0, "-", "mse"], [437, 0, 0, "-", "mse_v2"], [438, 0, 0, "-", "random"], [439, 0, 0, "-", "strategy"], [441, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[428, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[429, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[430, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[431, 1, 1, "", "BayesianOptimization"], [431, 1, 1, "", "BayesianTuneStrategy"], [431, 1, 1, "", "TargetSpace"], [431, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[432, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[433, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[434, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[436, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[437, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[438, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[439, 1, 1, "", "TuneStrategy"], [439, 1, 1, "", "TuneStrategyMeta"], [439, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[440, 0, 0, "-", "constant"], [442, 0, 0, "-", "tuning_sampler"], [443, 0, 0, "-", "tuning_space"], [444, 0, 0, "-", "tuning_structs"], [445, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[442, 1, 1, "", "BlockFallbackTuningSampler"], [442, 1, 1, "", "FallbackTuningSampler"], [442, 1, 1, "", "LowerBitsSampler"], [442, 1, 1, "", "ModelWiseTuningSampler"], [442, 1, 1, "", "OpTypeWiseTuningSampler"], [442, 1, 1, "", "OpWiseTuningSampler"], [442, 1, 1, "", "SmoothQuantSampler"], [442, 1, 1, "", "TuningOrder"], [442, 1, 1, "", "TuningSampler"], [442, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[443, 1, 1, "", "TuningItem"], [443, 1, 1, "", "TuningSpace"], [443, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [443, 2, 1, "", "pattern_to_internal"], [443, 2, 1, "", "pattern_to_path"], [443, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[444, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[445, 1, 1, "", "ClassRegister"], [445, 1, 1, "", "OrderedDefaultDict"], [445, 1, 1, "", "QuantOptions"], [445, 1, 1, "", "QuantType"], [445, 2, 1, "", "build_slave_faker_model"], [445, 2, 1, "", "extract_data_type"], [445, 2, 1, "", "get_adaptor_name"], [445, 2, 1, "", "preprocess_user_cfg"], [445, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[446, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[446, 1, 1, "", "ExampleClass"], [446, 4, 1, "", "attribute1"], [446, 2, 1, "", "function1"], [446, 2, 1, "", "function2"], [446, 2, 1, "", "function3"], [446, 2, 1, "", "generator1"], [446, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[446, 4, 1, "", "attr1"], [446, 4, 1, "", "attr2"], [446, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[448, 0, 0, "-", "algorithms"], [457, 0, 0, "-", "keras"], [470, 0, 0, "-", "quantization"], [567, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[451, 0, 0, "-", "smoother"], [453, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[449, 0, 0, "-", "calibration"], [450, 0, 0, "-", "core"], [452, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[449, 1, 1, "", "SmoothQuantCalibration"], [449, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[450, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[452, 1, 1, "", "SmoothQuantScaler"], [452, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[454, 0, 0, "-", "keras"], [455, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[454, 1, 1, "", "KerasAdaptor"], [454, 1, 1, "", "KerasConfigConverter"], [454, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[455, 1, 1, "", "TensorFlowAdaptor"], [455, 1, 1, "", "TensorFlowConfig"], [455, 1, 1, "", "TensorflowConfigConverter"], [455, 1, 1, "", "TensorflowQuery"], [455, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[461, 0, 0, "-", "layers"], [466, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[458, 0, 0, "-", "conv2d"], [459, 0, 0, "-", "dense"], [460, 0, 0, "-", "depthwise_conv2d"], [462, 0, 0, "-", "pool2d"], [463, 0, 0, "-", "quantizer"], [464, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[465, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[465, 1, 1, "", "StaticQuantConfig"], [465, 2, 1, "", "get_all_registered_configs"], [465, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[467, 0, 0, "-", "algorithm_entry"], [468, 0, 0, "-", "autotune"], [469, 0, 0, "-", "config"], [471, 0, 0, "-", "quantize"], [530, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[467, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[468, 2, 1, "", "autotune"]], "neural_compressor.tensorflow.quantization.config": [[469, 1, 1, "", "SmoothQuantConfig"], [469, 1, 1, "", "StaticQuantConfig"], [469, 2, 1, "", "get_default_sq_config"], [469, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[471, 2, 1, "", "quantize_model"], [471, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[472, 0, 0, "-", "graph_converter"], [473, 0, 0, "-", "graph_converter_without_calib"], [511, 0, 0, "-", "graph_rewriter"], [529, 0, 0, "-", "graph_util"], [531, 0, 0, "-", "quantize_graph"], [558, 0, 0, "-", "quantize_graph_common"], [561, 0, 0, "-", "transform_graph"], [564, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[472, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[473, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[476, 0, 0, "-", "bf16"], [500, 0, 0, "-", "generic"], [510, 0, 0, "-", "graph_base"], [519, 0, 0, "-", "int8"], [525, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[474, 0, 0, "-", "bf16_convert"], [475, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[474, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[475, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[477, 0, 0, "-", "convert_add_to_biasadd"], [478, 0, 0, "-", "convert_layout"], [479, 0, 0, "-", "convert_leakyrelu"], [480, 0, 0, "-", "convert_nan_to_random"], [481, 0, 0, "-", "convert_placeholder_to_const"], [482, 0, 0, "-", "dilated_contraction"], [483, 0, 0, "-", "dummy_biasadd"], [484, 0, 0, "-", "expanddims_optimizer"], [485, 0, 0, "-", "fetch_weight_from_reshape"], [486, 0, 0, "-", "fold_batch_norm"], [487, 0, 0, "-", "fold_constant"], [488, 0, 0, "-", "fuse_biasadd_add"], [489, 0, 0, "-", "fuse_column_wise_mul"], [490, 0, 0, "-", "fuse_conv_with_math"], [491, 0, 0, "-", "fuse_decomposed_bn"], [492, 0, 0, "-", "fuse_decomposed_in"], [493, 0, 0, "-", "fuse_gelu"], [494, 0, 0, "-", "fuse_layer_norm"], [495, 0, 0, "-", "fuse_pad_with_conv"], [496, 0, 0, "-", "fuse_pad_with_fp32_conv"], [497, 0, 0, "-", "fuse_reshape_transpose"], [498, 0, 0, "-", "graph_cse_optimizer"], [499, 0, 0, "-", "grappler_pass"], [501, 0, 0, "-", "insert_print_node"], [502, 0, 0, "-", "move_squeeze_after_relu"], [503, 0, 0, "-", "pre_optimize"], [504, 0, 0, "-", "remove_training_nodes"], [505, 0, 0, "-", "rename_batch_norm"], [506, 0, 0, "-", "split_shared_input"], [507, 0, 0, "-", "strip_equivalent_nodes"], [508, 0, 0, "-", "strip_unused_nodes"], [509, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[477, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[478, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[479, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[480, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[481, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[482, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[483, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[484, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[485, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[486, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[487, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[488, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[489, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[490, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[491, 1, 1, "", "FuseDecomposedBNOptimizer"], [491, 2, 1, "", "bypass_reshape"], [491, 2, 1, "", "get_const_dim_count"], [491, 2, 1, "", "node_from_map"], [491, 2, 1, "", "node_name_from_input"], [491, 2, 1, "", "valid_reshape_inputs"], [491, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[492, 1, 1, "", "FuseDecomposedINOptimizer"], [492, 2, 1, "", "bypass_reshape"], [492, 2, 1, "", "get_const_dim_count"], [492, 2, 1, "", "node_from_map"], [492, 2, 1, "", "node_name_from_input"], [492, 2, 1, "", "valid_reshape_inputs"], [492, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[493, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[494, 1, 1, "", "FuseLayerNormOptimizer"], [494, 2, 1, "", "node_from_map"], [494, 2, 1, "", "node_name_from_input"], [494, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[495, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[496, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[497, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[498, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[499, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[501, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[502, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[503, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[504, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[505, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[506, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[507, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[508, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[509, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[510, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[512, 0, 0, "-", "freeze_fake_quant"], [513, 0, 0, "-", "freeze_value"], [514, 0, 0, "-", "freeze_value_without_calib"], [515, 0, 0, "-", "fuse_conv_redundant_dequantize"], [516, 0, 0, "-", "fuse_conv_requantize"], [517, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [518, 0, 0, "-", "fuse_matmul_requantize"], [520, 0, 0, "-", "meta_op_optimizer"], [521, 0, 0, "-", "post_hostconst_converter"], [522, 0, 0, "-", "post_quantized_op_cse"], [523, 0, 0, "-", "rnn_convert"], [524, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[512, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[513, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[514, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[515, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[516, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[517, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[518, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [518, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [518, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [518, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[520, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[521, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[522, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[523, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[524, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[526, 0, 0, "-", "insert_qdq_pattern"], [527, 0, 0, "-", "merge_duplicated_qdq"], [528, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[526, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[527, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[528, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[529, 1, 1, "", "GraphAnalyzer"], [529, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[533, 0, 0, "-", "qat"], [549, 0, 0, "-", "qdq"], [551, 0, 0, "-", "quantize_graph_base"], [552, 0, 0, "-", "quantize_graph_bn"], [553, 0, 0, "-", "quantize_graph_concatv2"], [554, 0, 0, "-", "quantize_graph_conv"], [555, 0, 0, "-", "quantize_graph_for_intel_cpu"], [556, 0, 0, "-", "quantize_graph_matmul"], [557, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[532, 0, 0, "-", "fake_quantize"], [534, 0, 0, "-", "quantize_config"], [535, 0, 0, "-", "quantize_helper"], [536, 0, 0, "-", "quantize_layers"], [541, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[532, 1, 1, "", "FakeQuantize"], [532, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[534, 1, 1, "", "QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[535, 2, 1, "", "init_quantize_config"], [535, 2, 1, "", "qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[537, 0, 0, "-", "optimize_layer"], [538, 0, 0, "-", "quantize_layer_add"], [539, 0, 0, "-", "quantize_layer_base"], [540, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[537, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[538, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[539, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[540, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[541, 1, 1, "", "QuantizeWrapper"], [541, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[542, 0, 0, "-", "fuse_qdq_bn"], [543, 0, 0, "-", "fuse_qdq_concatv2"], [544, 0, 0, "-", "fuse_qdq_conv"], [545, 0, 0, "-", "fuse_qdq_deconv"], [546, 0, 0, "-", "fuse_qdq_in"], [547, 0, 0, "-", "fuse_qdq_matmul"], [548, 0, 0, "-", "fuse_qdq_pooling"], [550, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[542, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[543, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[544, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[545, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[546, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[547, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[548, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[550, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[551, 1, 1, "", "QuantizeGraphBase"], [551, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[552, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[553, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[554, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[555, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[556, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[557, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[558, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[559, 0, 0, "-", "bias_correction"], [560, 0, 0, "-", "graph_transform_base"], [562, 0, 0, "-", "insert_logging"], [563, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[559, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[560, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[562, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[563, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[564, 2, 1, "", "apply_inlining"], [564, 2, 1, "", "collate_tf_preds"], [564, 2, 1, "", "construct_function_from_graph_def"], [564, 2, 1, "", "disable_random"], [564, 2, 1, "", "fix_ref_type_of_graph_def"], [564, 2, 1, "", "generate_feed_dict"], [564, 2, 1, "", "get_graph_def"], [564, 2, 1, "", "get_input_output_node_names"], [564, 2, 1, "", "get_model_input_shape"], [564, 2, 1, "", "get_tensor_by_name"], [564, 2, 1, "", "get_tensor_val_from_graph_node"], [564, 2, 1, "", "get_weight_from_input_tensor"], [564, 2, 1, "", "int8_node_name_reverse"], [564, 2, 1, "", "is_ckpt_format"], [564, 2, 1, "", "is_saved_model_format"], [564, 2, 1, "", "iterator_sess_run"], [564, 2, 1, "", "parse_saved_model"], [564, 2, 1, "", "read_graph"], [564, 2, 1, "", "reconstruct_saved_model"], [564, 2, 1, "", "strip_equivalent_nodes"], [564, 2, 1, "", "strip_unused_nodes"], [564, 2, 1, "", "tf_diagnosis_helper"], [564, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[565, 0, 0, "-", "constants"], [566, 0, 0, "-", "data"], [568, 0, 0, "-", "model"], [569, 0, 0, "-", "model_wrappers"], [570, 0, 0, "-", "nets_factory"], [571, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[566, 1, 1, "", "BaseDataLoader"], [566, 1, 1, "", "DummyDataset"], [566, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model": [[568, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[569, 1, 1, "", "BaseModel"], [569, 1, 1, "", "KerasModel"], [569, 1, 1, "", "TensorflowBaseModel"], [569, 1, 1, "", "TensorflowCheckpointModel"], [569, 1, 1, "", "TensorflowLLMModel"], [569, 1, 1, "", "TensorflowModel"], [569, 1, 1, "", "TensorflowQATModel"], [569, 1, 1, "", "TensorflowSavedModelModel"], [569, 2, 1, "", "checkpoint_session"], [569, 2, 1, "", "estimator_session"], [569, 2, 1, "", "frozen_pb_session"], [569, 2, 1, "", "get_model_type"], [569, 2, 1, "", "graph_def_session"], [569, 2, 1, "", "graph_session"], [569, 2, 1, "", "keras_session"], [569, 2, 1, "", "load_saved_model"], [569, 2, 1, "", "saved_model_session"], [569, 2, 1, "", "slim_session"], [569, 2, 1, "", "validate_and_inference_input_output"], [569, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[570, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[571, 1, 1, "", "CaptureOutputToFile"], [571, 1, 1, "", "CpuInfo"], [571, 2, 1, "", "Dequantize"], [571, 1, 1, "", "LazyImport"], [571, 1, 1, "", "Statistics"], [571, 2, 1, "", "combine_histogram"], [571, 2, 1, "", "deep_get"], [571, 2, 1, "", "dequantize_weight"], [571, 2, 1, "", "disable_random"], [571, 2, 1, "", "dump_data_to_local"], [571, 2, 1, "", "dump_elapsed_time"], [571, 2, 1, "", "get_all_fp32_data"], [571, 2, 1, "", "get_tensor_histogram"], [571, 2, 1, "", "itex_installed"], [571, 2, 1, "", "load_data_from_pkl"], [571, 2, 1, "", "register_algo"], [571, 2, 1, "", "singleton"], [571, 2, 1, "", "version1_eq_version2"], [571, 2, 1, "", "version1_gt_version2"], [571, 2, 1, "", "version1_gte_version2"], [571, 2, 1, "", "version1_lt_version2"], [571, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[576, 0, 0, "-", "algorithms"], [603, 0, 0, "-", "amp"], [608, 0, 0, "-", "quantization"], [614, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[573, 0, 0, "-", "habana_fp8"], [577, 0, 0, "-", "layer_wise"], [581, 0, 0, "-", "static_quant"], [595, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.habana_fp8": [[572, 0, 0, "-", "fp8_quant"], [574, 0, 0, "-", "modules"], [575, 0, 0, "-", "observer"]], "neural_compressor.torch.algorithms.layer_wise": [[578, 0, 0, "-", "load"], [579, 0, 0, "-", "modified_pickle"], [580, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[578, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[579, 3, 1, "", "PickleError"], [579, 3, 1, "", "PicklingError"], [579, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[580, 2, 1, "", "dowload_hf_model"], [580, 2, 1, "", "get_children"], [580, 2, 1, "", "get_module"], [580, 2, 1, "", "get_named_children"], [580, 2, 1, "", "get_super_module_by_name"], [580, 2, 1, "", "load_empty_model"], [580, 2, 1, "", "load_layer_wise_quantized_model"], [580, 2, 1, "", "load_tensor"], [580, 2, 1, "", "load_tensor_from_shard"], [580, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.static_quant": [[582, 0, 0, "-", "static_quant"], [583, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[582, 2, 1, "", "static_quantize"]], "neural_compressor.torch.algorithms.static_quant.utility": [[583, 1, 1, "", "Statistics"], [583, 1, 1, "", "TransformerBasedModelBlockPatternDetector"], [583, 2, 1, "", "dump_model_op_stats"], [583, 2, 1, "", "get_depth"], [583, 2, 1, "", "get_dict_at_depth"], [583, 2, 1, "", "get_element_under_depth"], [583, 2, 1, "", "get_quantizable_ops_from_cfgs"], [583, 2, 1, "", "get_quantizable_ops_recursively"], [583, 2, 1, "", "paser_cfgs"], [583, 2, 1, "", "simple_inference"]], "neural_compressor.torch.algorithms.weight_only": [[584, 0, 0, "-", "awq"], [585, 0, 0, "-", "gptq"], [589, 0, 0, "-", "hqq"], [596, 0, 0, "-", "modules"], [597, 0, 0, "-", "rtn"], [598, 0, 0, "-", "teq"], [599, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[584, 1, 1, "", "ActAwareWeightQuant"], [584, 2, 1, "", "awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[585, 1, 1, "", "GPTQ"], [585, 1, 1, "", "GPTQuantizer"], [585, 2, 1, "", "find_layers"], [585, 2, 1, "", "find_layers_name"], [585, 2, 1, "", "gptq_quantize"], [585, 2, 1, "", "is_leaf"], [585, 2, 1, "", "log_quantizable_layers_per_transformer"], [585, 2, 1, "", "quantize"], [585, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[586, 0, 0, "-", "bitpack"], [587, 0, 0, "-", "config"], [588, 0, 0, "-", "core"], [590, 0, 0, "-", "optimizer"], [591, 0, 0, "-", "qtensor"], [592, 0, 0, "-", "quant_api"], [593, 0, 0, "-", "quantizer"], [594, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[587, 1, 1, "", "HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[594, 2, 1, "", "dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.modules": [[596, 1, 1, "", "FakeAffineTensorQuantFunction"], [596, 1, 1, "", "MulLinear"], [596, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[597, 2, 1, "", "rtn_quantize"]], "neural_compressor.torch.algorithms.weight_only.teq": [[598, 1, 1, "", "TEQuantizer"], [598, 2, 1, "", "teq_quantize"]], "neural_compressor.torch.algorithms.weight_only.utility": [[599, 2, 1, "", "calibration"], [599, 2, 1, "", "fetch_module"], [599, 2, 1, "", "get_absorb_layers"], [599, 2, 1, "", "get_block_prefix"], [599, 2, 1, "", "get_example_input"], [599, 2, 1, "", "get_hidden_states"], [599, 2, 1, "", "get_module"], [599, 2, 1, "", "get_module_input_output"], [599, 2, 1, "", "qdq_weight_actor"], [599, 2, 1, "", "qdq_weight_asym"], [599, 2, 1, "", "qdq_weight_sym"], [599, 2, 1, "", "quant_tensor"], [599, 2, 1, "", "quant_weight_w_scale"], [599, 2, 1, "", "quantize_4bit"], [599, 2, 1, "", "search_clip"], [599, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[600, 0, 0, "-", "autocast"], [602, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[600, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[601, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[605, 0, 0, "-", "algorithm_entry"], [606, 0, 0, "-", "autotune"], [607, 0, 0, "-", "config"], [609, 0, 0, "-", "modules"], [610, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[605, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[606, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[607, 1, 1, "", "GPTQConfig"], [607, 1, 1, "", "RTNConfig"], [607, 2, 1, "", "get_default_gptq_config"], [607, 2, 1, "", "get_default_hqq_config"], [607, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[610, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[611, 0, 0, "-", "auto_accelerator"], [612, 0, 0, "-", "constants"], [613, 0, 0, "-", "environ"], [615, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.auto_accelerator": [[611, 1, 1, "", "Auto_Accelerator"], [611, 1, 1, "", "CPU_Accelerator"], [611, 1, 1, "", "CUDA_Accelerator"], [611, 2, 1, "", "register_accelerator"]], "neural_compressor.torch.utils.utility": [[615, 2, 1, "", "fetch_module"], [615, 2, 1, "", "register_algo"], [615, 2, 1, "", "set_module"]], "neural_compressor.training": [[616, 1, 1, "", "CallBacks"], [616, 1, 1, "", "CompressionManager"], [616, 2, 1, "", "fit"], [616, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[617, 0, 0, "-", "collect_layer_histogram"], [618, 0, 0, "-", "constant"], [619, 0, 0, "-", "create_obj_from_config"], [621, 0, 0, "-", "kl_divergence"], [622, 0, 0, "-", "load_huggingface"], [623, 0, 0, "-", "logger"], [624, 0, 0, "-", "neural_insights_utils"], [625, 0, 0, "-", "options"], [626, 0, 0, "-", "pytorch"], [627, 0, 0, "-", "utility"], [628, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[617, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[619, 2, 1, "", "create_dataloader"], [619, 2, 1, "", "create_dataset"], [619, 2, 1, "", "create_eval_func"], [619, 2, 1, "", "create_train_func"], [619, 2, 1, "", "get_algorithm"], [619, 2, 1, "", "get_func_from_config"], [619, 2, 1, "", "get_metrics"], [619, 2, 1, "", "get_postprocess"], [619, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[621, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[622, 1, 1, "", "OptimizedModel"], [622, 2, 1, "", "export_compressed_model"], [622, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[623, 1, 1, "", "Logger"], [623, 2, 1, "", "debug"], [623, 2, 1, "", "error"], [623, 2, 1, "", "fatal"], [623, 2, 1, "", "info"], [623, 2, 1, "", "log"], [623, 2, 1, "", "warn"], [623, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[624, 2, 1, "", "get_model_path"], [624, 2, 1, "", "register_neural_insights_workload"], [624, 2, 1, "", "update_neural_insights_workload"], [624, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[625, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[626, 2, 1, "", "is_int8_model"], [626, 2, 1, "", "load"], [626, 2, 1, "", "load_weight_only"], [626, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[627, 1, 1, "", "CaptureOutputToFile"], [627, 1, 1, "", "CpuInfo"], [627, 2, 1, "", "Dequantize"], [627, 1, 1, "", "DotDict"], [627, 1, 1, "", "GLOBAL_STATE"], [627, 1, 1, "", "LazyImport"], [627, 1, 1, "", "MODE"], [627, 1, 1, "", "OpEntry"], [627, 1, 1, "", "Statistics"], [627, 2, 1, "", "alias_param"], [627, 2, 1, "", "calculate_mse"], [627, 2, 1, "", "check_key_exist"], [627, 2, 1, "", "combine_histogram"], [627, 2, 1, "", "compare_objects"], [627, 2, 1, "", "compute_sparsity"], [627, 2, 1, "", "dequantize_weight"], [627, 2, 1, "", "dump_class_attrs"], [627, 2, 1, "", "dump_data_to_local"], [627, 2, 1, "", "dump_elapsed_time"], [627, 2, 1, "", "dump_table"], [627, 2, 1, "", "dump_table_to_csv"], [627, 2, 1, "", "equal_dicts"], [627, 2, 1, "", "fault_tolerant_file"], [627, 2, 1, "", "get_all_fp32_data"], [627, 2, 1, "", "get_number_of_sockets"], [627, 2, 1, "", "get_op_list"], [627, 2, 1, "", "get_size"], [627, 2, 1, "", "get_tensor_histogram"], [627, 2, 1, "", "get_tensors_info"], [627, 2, 1, "", "get_tuning_history"], [627, 2, 1, "", "get_weights_details"], [627, 2, 1, "", "load_data_from_pkl"], [627, 2, 1, "", "mse_metric_gap"], [627, 2, 1, "", "print_op_list"], [627, 2, 1, "", "print_table"], [627, 2, 1, "", "recover"], [627, 2, 1, "", "set_random_seed"], [627, 2, 1, "", "set_resume_from"], [627, 2, 1, "", "set_tensorboard"], [627, 2, 1, "", "set_workspace"], [627, 2, 1, "", "show_memory_info"], [627, 2, 1, "", "singleton"], [627, 2, 1, "", "str2array"], [627, 2, 1, "", "time_limit"], [627, 2, 1, "", "version1_eq_version2"], [627, 2, 1, "", "version1_gt_version2"], [627, 2, 1, "", "version1_gte_version2"], [627, 2, 1, "", "version1_lt_version2"], [627, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[628, 1, 1, "", "WeightsDetails"], [628, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 211], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 637, 638, 640], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 190, 191, 194, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 301, 303, 304, 305, 307, 308, 309, 310, 312, 313, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 390, 391, 393, 394, 396, 397, 398, 399, 403, 404, 406, 408, 410, 411, 412, 413, 415, 416, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 445, 446, 449, 450, 452, 454, 455, 465, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 574, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 591, 592, 594, 596, 597, 598, 599, 600, 605, 606, 607, 609, 610, 611, 615, 616, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 190, 191, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 406, 408, 410, 411, 412, 413, 415, 416, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 449, 450, 452, 454, 455, 465, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 568, 569, 570, 571, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 591, 592, 594, 596, 597, 598, 599, 600, 605, 606, 607, 610, 611, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 636, 705], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 154, 155, 156, 157, 158, 162, 166, 167, 168, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 185, 187, 188, 190, 194, 195, 197, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 310, 311, 312, 315, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 360, 361, 362, 363, 365, 368, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 395, 398, 399, 400, 402, 403, 406, 408, 410, 411, 412, 413, 415, 416, 418, 420, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 442, 443, 444, 445, 446, 449, 450, 452, 454, 455, 465, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 532, 534, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 566, 568, 569, 570, 571, 583, 584, 585, 586, 587, 588, 591, 596, 598, 599, 600, 607, 611, 616, 617, 620, 621, 622, 623, 625, 627, 628, 637, 705], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 154, 156, 157, 158, 163, 164, 165, 168, 169, 171, 172, 173, 175, 178, 179, 180, 181, 186, 188, 190, 191, 194, 195, 197, 198, 199, 200, 202, 204, 205, 209, 212, 218, 219, 220, 221, 222, 224, 225, 228, 237, 238, 246, 248, 252, 255, 256, 257, 260, 262, 263, 264, 265, 267, 269, 270, 272, 281, 289, 291, 295, 298, 299, 300, 302, 303, 304, 307, 308, 309, 312, 313, 315, 316, 317, 318, 319, 326, 333, 337, 342, 343, 344, 346, 351, 357, 361, 363, 365, 366, 368, 369, 370, 371, 372, 373, 377, 381, 383, 384, 385, 386, 390, 391, 393, 394, 395, 396, 397, 399, 400, 404, 421, 426, 427, 431, 439, 443, 445, 446, 465, 467, 468, 469, 471, 491, 492, 494, 535, 537, 564, 569, 571, 578, 580, 582, 583, 584, 585, 592, 594, 597, 598, 599, 601, 605, 606, 607, 610, 611, 615, 616, 619, 620, 622, 623, 624, 626, 627, 663], "subpackag": [2, 17, 87, 111, 112, 114, 159, 196, 199, 232, 257, 275, 300, 311, 335, 353, 364, 435, 511, 530, 531, 533, 576], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 152, 159, 160, 175, 184, 189, 192, 196, 199, 201, 205, 212, 223, 229, 233, 240, 252, 256, 260, 267, 276, 283, 295, 299, 302, 306, 311, 318, 324, 330, 336, 340, 353, 359, 364, 371, 375, 389, 402, 407, 409, 414, 417, 419, 424, 435, 441, 447, 451, 453, 476, 500, 511, 519, 525, 530, 531, 533, 536, 549, 561, 567, 577, 589, 595, 608, 620], "packag": [2, 29, 175, 181, 199, 205, 212, 240, 252, 256, 257, 260, 267, 283, 295, 299, 300, 302, 311, 318, 330, 335, 336, 353, 371, 375, 384, 386, 389, 395, 400, 402, 435, 620, 688, 690, 692, 693], "kera": [3, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466], "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": [4, 458], "dens": [5, 459], "depthwise_conv2d": [6, 460], "pool2d": [8, 462], "quantiz": [9, 41, 162, 347, 396, 397, 398, 399, 400, 401, 427, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 593, 605, 606, 607, 608, 609, 610, 633, 636, 638, 639, 651, 655, 660, 662, 665, 668, 671, 673, 675, 676, 684, 695, 697, 698, 699, 700, 708, 709, 710, 716, 717, 718, 719, 720, 723, 729], "separable_conv2d": [10, 464], "mxnet": [11, 658, 674, 717, 725], "mxnet_util": [12, 13], "util": [13, 43, 148, 164, 171, 183, 184, 185, 186, 191, 222, 225, 358, 359, 360, 361, 362, 363, 394, 402, 403, 404, 421, 426, 440, 441, 442, 443, 444, 445, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 583, 594, 599, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 642], "onnxrt": [14, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 658, 674, 725], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 387, 398, 449, 638, 655], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 638, 639], "activ": [18, 698], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 723], "maxpool": 32, "norm": 33, "op": [34, 665], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 701], "unary_op": 40, "smooth_quant": [42, 168, 176], "weight_onli": [44, 172, 390, 391, 392, 393, 394, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "pytorch": [45, 626, 658, 663, 665, 674, 699, 717, 718, 719, 724, 725, 729], "queri": [46, 637, 703, 708, 709, 710], "tensorflow": [47, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 658, 663, 665, 674, 717, 719, 724, 725, 729], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": [48, 472], "graph_converter_without_calib": [49, 473], "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528], "bf16": [50, 51, 52, 474, 475, 476, 676], "bf16_convert": [50, 156, 474], "dequantize_cast_optim": [51, 475], "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 638], "convert_add_to_biasadd": [53, 477], "convert_layout": [54, 478], "convert_leakyrelu": [55, 479], "convert_nan_to_random": [56, 480], "convert_placeholder_to_const": [57, 481], "dilated_contract": [58, 482], "dummy_biasadd": [59, 483], "expanddims_optim": [60, 484], "fetch_weight_from_reshap": [61, 485], "fold_batch_norm": [62, 486], "fold_const": [63, 487], "fuse_biasadd_add": [64, 488], "fuse_column_wise_mul": [65, 489], "fuse_conv_with_math": [66, 490], "fuse_decomposed_bn": [67, 491], "fuse_decomposed_in": [68, 492], "fuse_gelu": [69, 493], "fuse_layer_norm": [70, 494], "fuse_pad_with_conv": [71, 495], "fuse_pad_with_fp32_conv": [72, 496], "fuse_reshape_transpos": [73, 497], "graph_cse_optim": [74, 498], "grappler_pass": [75, 499], "insert_print_nod": [77, 501], "move_squeeze_after_relu": [78, 502], "pre_optim": [79, 503], "remove_training_nod": [80, 504], "rename_batch_norm": [81, 505], "split_shared_input": [82, 506], "strip_equivalent_nod": [83, 507], "strip_unused_nod": [84, 508], "switch_optim": [85, 509], "graph_bas": [86, 510], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 665, 729], "freeze_fake_qu": [88, 512], "freeze_valu": [89, 513], "freeze_value_without_calib": [90, 514], "fuse_conv_redundant_dequant": [91, 515], "fuse_conv_requant": [92, 516], "fuse_matmul_redundant_dequant": [93, 517], "fuse_matmul_requant": [94, 518], "meta_op_optim": [96, 520], "post_hostconst_convert": [97, 521], "post_quantized_op_cs": [98, 522], "rnn_convert": [99, 523], "scale_propag": [100, 524], "onnx": [101, 102, 103, 104, 105, 641, 671, 717, 718, 729], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 525, 526, 527, 528, 542, 543, 544, 545, 546, 547, 548, 549, 550, 729], "insert_qdq_pattern": [107, 526], "merge_duplicated_qdq": [108, 527], "share_qdq_y_pattern": [109, 528], "graph_util": [110, 529], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 729], "fake_quant": [113, 532], "quantize_config": [115, 534], "quantize_help": [116, 535], "quantize_lay": [117, 118, 119, 120, 121, 536, 537, 538, 539, 540], "optimize_lay": [118, 537], "quantize_layer_add": [119, 538], "quantize_layer_bas": [120, 539], "quantize_layer_bn": [121, 540], "quantize_wrapp": [122, 541], "fuse_qdq_bn": [123, 542], "fuse_qdq_concatv2": [124, 543], "fuse_qdq_conv": [125, 544], "fuse_qdq_deconv": [126, 545], "fuse_qdq_in": [127, 546], "fuse_qdq_matmul": [128, 547], "fuse_qdq_pool": [129, 548], "optimize_qdq": [131, 550], "quantize_graph_bas": [132, 551], "quantize_graph_bn": [133, 552], "quantize_graph_concatv2": [134, 553], "quantize_graph_conv": [135, 554], "quantize_graph_for_intel_cpu": [136, 555], "quantize_graph_matmul": [137, 556], "quantize_graph_pool": [138, 557], "quantize_graph_common": [139, 558], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147, 559, 560, 561, 562, 563], "bias_correct": [143, 559], "graph_transform_bas": [144, 560], "insert_log": [146, 562], "rerange_quantized_concat": [147, 563], "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 272], "auto_round": 149, "autoround": [150, 151, 152, 153, 154], "export": [151, 306, 307, 308, 309, 665, 720], "model_wrapp": [153, 166, 569], "sign_sgd": 154, "awq": [155, 390, 584], "gptq": [157, 391, 585], "hawq_metr": 158, "layer_wise_qu": [160, 161, 162, 163, 164], "modified_pickl": [161, 579], "torch_load": 163, "mixed_precis": [165, 320], "pattern_detector": 167, "symbolic_trac": 169, "teq": [170, 598], "algorithm": [173, 174, 175, 176, 177, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 448, 449, 450, 451, 452, 453, 454, 455, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 655, 720, 723, 726], "fast_bias_correct": 174, "weight_correct": 177, "benchmark": [178, 264, 645, 654, 660, 675, 716], "common": [179, 180, 181, 182, 183, 184, 185, 186, 265, 266, 267, 268, 269, 270, 271, 272, 633, 666], "base_config": 179, "attribut": [179, 180, 181, 185, 240, 248, 257, 291, 300, 311, 335, 375, 399, 402, 404, 446, 587, 599, 620, 631], "base_tun": 180, "tuning_param": 182, "constant": [183, 358, 440, 565, 612, 618], "logger": [185, 341, 623, 656], "compress": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 274, 646, 720], "callback": 187, "distil": [188, 189, 190, 191, 305, 661, 662, 675, 716, 729], "criterion": [188, 265], "optim": [190, 270, 590, 685, 695, 705, 708, 709, 710, 713, 714, 727], "hpo": [192, 193, 194, 195], "sa_optim": 193, "search_algorithm": [194, 327], "search_spac": 195, "pruner": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 333, 344], "criteria": [197, 632, 714, 726], "dsnot": 198, "model_slim": [200, 201, 202, 203], "auto_slim": 200, "pattern_analyz": 202, "weight_slim": 203, "pattern": [204, 205, 206, 207, 208, 336, 337, 338, 342, 714], "base": [204, 209, 671, 704, 727], "mha": [206, 213], "ninm": 207, "nxm": 208, "basic": [210, 350, 430, 634, 726], "pattern_lock": [214, 332], "progress": [215, 701], "retrain_fre": 216, "sparse_gpt": 217, "prune": [218, 224, 334, 345, 675, 714, 716, 729], "reg": 219, "schedul": [220, 346, 348, 714], "tf_criteria": 221, "wanda": [223, 224, 225, 226], "wrapper": 226, "conf": [227, 228, 229, 230], "config": [227, 231, 399, 465, 469, 587, 607, 647, 658, 712], "dotdict": 228, "pythonic_config": 230, "contrib": [232, 233, 234, 235, 275, 276, 277, 278], "strategi": [233, 234, 235, 276, 277, 278, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 652, 722, 726], "sigopt": [234, 277, 722, 726], "tpe": [235, 278, 726], "data": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 566, 638, 639, 660, 664, 699], "dataload": [236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 266, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 657, 658], "base_dataload": [236, 279], "default_dataload": [238, 281], "fetcher": [239, 282], "mxnet_dataload": [241, 284], "onnxrt_dataload": [242, 285], "pytorch_dataload": [243, 286], "sampler": [244, 287], "tensorflow_dataload": [245, 288], "dataset": [246, 247, 248, 249, 250, 251, 252, 253, 289, 290, 291, 292, 293, 294, 295, 296, 658, 660, 669, 700], "bert_dataset": [246, 289], "coco_dataset": [247, 290], "dummy_dataset": [249, 292], "dummy_dataset_v2": [250, 293], "imagenet_dataset": [251, 294], "style_transfer_dataset": [253, 296], "filter": [254, 255, 256, 297, 298, 299], "coco_filt": [254, 297], "transform": [258, 259, 260, 261, 262, 263, 301, 302, 303, 304, 669, 725], "coco_transform": 258, "imagenet_transform": [259, 301], "postprocess": [261, 271], "token": [262, 303], "experiment": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363], "metric": [268, 312, 313, 314, 315, 316, 317, 318, 319, 365, 366, 367, 368, 369, 370, 371, 372, 669, 674], "model": [269, 374, 375, 376, 377, 378, 379, 380, 381, 382, 568, 638, 649, 665, 668, 671, 673, 675, 677, 684, 698, 699, 700, 708, 709, 710, 714, 718, 720, 723, 729], "compon": 273, "qlinear2qdq": 307, "tf2onnx": 308, "torch2onnx": 309, "graph_optim": 310, "bleu": [312, 365], "bleu_util": [313, 366], "coco_label_map": [314, 367], "coco_tool": [315, 368], "evaluate_squad": [316, 369], "f1": [317, 370], "model_convers": 321, "na": [322, 323, 324, 325, 326, 327, 634, 716], "basic_na": 322, "dyna": 323, "nas_util": 326, "pruner_legaci": [328, 329, 330, 331, 332, 333], "gradient_sensit": 328, "group_lasso": 329, "magnitud": 331, "pruning_recip": [335, 336, 337, 338], "tile_pattern": 338, "pruning_v2": 339, "pytorch_prun": [340, 341, 342, 343, 344, 345, 346], "prune_util": 343, "auto_mixed_precis": [349, 429], "bayesian": [351, 431, 726], "exhaust": [352, 433, 726], "mse": [354, 436, 726], "mse_v2": [355, 437, 726], "random": [356, 438, 726], "tuning_sampl": [360, 442], "tuning_spac": [361, 443], "tuning_struct": [362, 444], "mix_precis": 373, "base_model": 374, "keras_model": 376, "mxnet_model": 378, "nets_factori": [379, 570], "onnx_model": [380, 403], "tensorflow_model": 381, "torch_model": 382, "object": [383, 650, 708, 709, 710, 712], "layer_wis": [385, 386, 577, 578, 579, 580], "core": [385, 388, 450, 588], "smoother": [387, 388, 389, 449, 450, 451, 452], "rtn": [393, 597], "algorithm_entri": [396, 467, 605], "autotun": [397, 468, 606], "profil": [405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 660], "parser": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415], "factori": [406, 408, 413, 416, 418, 423], "onnx_pars": [408, 409, 410], "result": [412, 698, 700, 708, 709, 710], "tensorflow_pars": [413, 414, 415], "onnxrt_profil": [418, 419, 420, 421], "tensorflow_profil": [423, 424, 425, 426], "auto": [428, 689, 695, 719, 723, 726], "conserv": [432, 726], "hawq_v2": [434, 726], "templat": [446, 447, 632], "api_doc_exampl": 446, "scaler": 452, "static_qu": [453, 454, 455, 581, 582, 583], "layer": [458, 459, 460, 461, 462, 463, 464, 661, 718, 723], "torch": [572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 642, 729], "habana_fp8": [572, 573, 574, 575], "fp8_quant": 572, "observ": 575, "load": 578, "hqq": [586, 587, 588, 589, 590, 591, 592, 593, 594], "bitpack": 586, "qtensor": 591, "quant_api": 592, "amp": [600, 601, 602, 603], "autocast": 600, "fp8": [601, 602], "auto_acceler": 611, "environ": [613, 671, 681], "train": [616, 633, 653, 663, 675, 714, 717], "collect_layer_histogram": 617, "create_obj_from_config": 619, "kl_diverg": 621, "load_huggingfac": 622, "neural_insights_util": 624, "option": [625, 663, 683], "weights_detail": 628, "version": 629, "intel": [630, 636, 657, 660, 670, 671, 674, 675, 681, 689, 695, 729, 730], "neural": [630, 633, 634, 636, 657, 660, 670, 671, 674, 675, 678, 682, 684, 689, 695, 697, 698, 699, 700, 702, 703, 704, 708, 709, 710, 714, 722, 727, 730], "compressor": [630, 633, 636, 657, 660, 670, 671, 674, 675, 689, 695, 722, 730], "document": [630, 636, 643, 730], "section": [630, 730], "contributor": [631, 632], "coven": [631, 632], "code": [631, 632, 634, 656, 675, 696, 701, 720, 727], "conduct": [631, 632], "our": [631, 723], "pledg": 631, "standard": 631, "respons": [631, 704], "scope": [631, 714], "enforc": 631, "contribut": [632, 688, 692], "guidelin": 632, "creat": [632, 701], "pull": 632, "request": [632, 676, 706], "step": [632, 697, 698, 699, 700], "checklist": 632, "accept": 632, "statu": [632, 703, 704], "check": 632, "overview": [632, 705, 727], "support": [632, 633, 634, 637, 639, 654, 655, 657, 658, 660, 661, 662, 663, 665, 667, 670, 671, 674, 676, 677, 679, 680, 684, 685, 712, 713, 714, 716, 717, 718, 720, 723, 724, 725, 728], "fx": 633, "introduct": [633, 634, 637, 638, 639, 654, 655, 657, 658, 660, 661, 662, 663, 665, 667, 670, 674, 676, 677, 695, 698, 699, 700, 712, 713, 714, 716, 717, 718, 720, 722, 723, 724, 725, 726, 728], "mode": [633, 729], "matrix": [633, 634, 637, 654, 655, 657, 658, 660, 661, 662, 663, 665, 667, 670, 674, 676, 677, 680, 712, 713, 714, 716, 717, 718, 720, 723, 724, 728], "get": [633, 634, 636, 637, 654, 657, 658, 660, 661, 662, 663, 667, 668, 674, 676, 678, 689, 696, 697, 701, 702, 703, 704, 712, 713, 714, 716, 717, 724, 728], "start": [633, 634, 636, 637, 654, 657, 658, 660, 661, 662, 663, 667, 668, 674, 676, 678, 679, 683, 689, 697, 701, 702, 703, 708, 709, 710, 712, 713, 714, 716, 717, 724, 728], "post": [633, 675, 704, 717], "static": [633, 717], "dynam": [633, 634, 717], "awar": [633, 675, 714, 717], "exampl": [633, 634, 637, 643, 654, 657, 658, 660, 661, 662, 663, 664, 665, 674, 675, 676, 677, 680, 684, 697, 698, 699, 700, 702, 707, 708, 709, 710, 712, 713, 714, 717, 718, 720, 723, 724, 729], "note": [633, 721], "detail": 633, "problem": 633, "architectur": [634, 659, 670, 671], "search": [634, 695], "api": [634, 636, 637, 638, 643, 644, 654, 657, 658, 661, 662, 663, 668, 669, 674, 676, 678, 682, 696, 697, 704, 710, 712, 713, 714, 716, 727], "usag": [634, 684, 695, 704, 723, 724, 726], "1": [634, 663, 666, 669, 675, 695, 702, 703, 729], "python": [634, 636, 657, 668, 674, 678, 682, 683, 690, 693, 697, 716, 727], "yaml": [634, 638, 658, 663, 667, 728], "2": [634, 663, 666, 669, 675, 695, 702, 703, 729], "onli": [634, 720], "advanc": [634, 701, 727], "custom": [634, 657, 674, 708, 726], "secur": [635, 663], "polici": [635, 726], "report": 635, "vulner": 635, "instal": [636, 660, 671, 679, 681, 688, 689, 692, 697, 702, 703], "from": [636, 638, 671, 675, 697, 702, 703], "pypi": [636, 684, 697], "select": [636, 689], "public": [636, 656, 715], "event": [636, 715], "addit": 636, "commun": 636, "work": [637, 702, 717], "flow": [637, 717], "background": [637, 656, 695], "ad": 637, "new": [637, 639, 690, 693, 726], "backend": [637, 717], "capabl": [637, 720], "implement": [637, 638], "onnxrtadaptor": 637, "how": [638, 639, 660, 698, 699, 700, 702], "add": [638, 703], "an": [638, 708, 709, 710], "list": [638, 664, 707, 725], "need": 638, "design": [638, 659, 705, 726], "framework": [638, 657, 658, 665, 667, 677, 716, 718, 720, 723], "query_fw_cap": 638, "accord": [638, 639], "tune_cfg": 638, "prepar": [638, 660, 698, 699, 700, 722], "fp32": [638, 665], "graph": 638, "run": [638, 660, 696, 698, 699, 700, 701], "sampl": [638, 668], "iter": 638, "calcul": 638, "rang": 638, "type": [639, 656, 714], "like": 639, "int4": 639, "few": 639, "line": 639, "chang": [639, 669, 694, 696, 721], "defin": [639, 663], "abil": 639, "specif": [639, 658], "invok": 639, "kernel": 639, "tune": [639, 717, 720, 723, 726], "configur": [639, 663, 667, 701, 716, 722, 728], "us": [639, 657, 674, 702, 703, 723], "summari": [639, 698], "runtim": [641, 671, 717, 718, 729], "mix": [648, 675, 676, 719], "precis": [648, 675, 676, 719], "refer": [655, 656, 714, 717, 720, 723], "inc": 656, "convent": 656, "rule": [656, 717], "import": 656, "string": 656, "annot": 656, "comment": 656, "todo": 656, "intern": 656, "interfac": 656, "folder": [656, 696], "structur": 656, "recommend": 656, "v": [656, 696], "set": [656, 660, 681, 695], "json": 656, "build": [657, 666, 674, 701, 702, 703], "file": [658, 667, 728], "user": [658, 663, 669, 716, 720, 727, 728], "workflow": [659, 705], "diagnosi": [660, 697], "featur": [660, 663, 667, 670, 684, 685, 689, 716, 717, 724, 728], "modifi": 660, "script": [660, 701], "see": 660, "do": [660, 678], "paramet": [660, 704], "descript": [660, 704, 706], "suggest": 660, "fallback": 660, "knowledg": [661, 729], "intermedi": 661, "self": 661, "distribut": [663, 684, 726], "infer": 663, "evalu": 663, "pure": 663, "horovodrun": 663, "execut": 663, "releas": [664, 690, 693, 721], "appendix": 665, "frequent": 666, "ask": 666, "question": 666, "issu": [666, 721], "3": [666, 679, 695], "4": [666, 686, 695, 715], "quick": [668, 683], "valid": [668, 671, 723, 729], "incompat": [669, 721], "between": 669, "v1": 669, "face": [669, 709, 710], "built": [669, 671, 674], "infrastructur": 670, "prerequisit": [671, 702, 703], "binari": 671, "sourc": [671, 697, 699, 700, 702, 703], "ai": 671, "kit": 671, "system": 671, "requir": [671, 688, 692, 698, 699, 700, 708], "hardwar": [671, 676, 729], "cpu": [671, 681, 729], "64": 671, "compat": 671, "processor": 671, "gpu": 671, "": [671, 696, 702], "xe": 671, "multipl": [671, 712, 729], "vendor": 671, "through": [671, 723, 729], "softwar": [671, 676], "legal": 672, "inform": 672, "licens": 672, "citat": 672, "trademark": 672, "llm": 673, "recip": [673, 717], "ipex": [673, 717], "kei": 673, "migrat": 675, "x": 675, "orchestr": [675, 713], "fp16": 676, "dure": [676, 719], "accuraci": [676, 698, 700, 717, 726], "driven": 676, "coder": [678, 682, 684, 695, 727], "what": [678, 696, 702], "we": 678, "offer": 678, "jupyt": [678, 679, 690, 693], "lab": [678, 679], "extens": [678, 688, 689, 692, 695, 696, 705, 729], "launcher": [678, 683], "contact": [678, 702], "aw": 679, "amazon": 679, "sagemak": 679, "For": 679, "studio": 679, "notebook": 679, "instanc": 679, "guid": [679, 727], "bigdl": 680, "nano": 680, "platform": [681, 722], "best": [681, 689], "perform": [681, 722], "mkl": 681, "openmp": 681, "jemalloc": 681, "numa": 681, "control": 681, "variabl": 681, "frequenc": 681, "govern": 681, "enabl": [682, 689, 695], "bench": 682, "superbench": 682, "argument": 683, "v0": 686, "highlight": 686, "other": 686, "changelog": [687, 691], "neural_compressor_ext_lab": [688, 690], "uninstal": [688, 692], "develop": [688, 692], "jupyterlab": 689, "Or": 689, "let": 689, "u": 689, "help": 689, "you": 689, "pre": 689, "requisit": 689, "make": [690, 693, 696, 701], "manual": [690, 693], "npm": [690, 693, 701], "autom": [690, 693], "publish": [690, 693], "conda": [690, 693], "forg": [690, 693], "neural_compressor_ext_lab_alibaba": [692, 693], "log": [694, 703, 704], "unreleas": 694, "vscode": 695, "open": [695, 700], "icon": 695, "5": 695, "welcom": 696, "your": 696, "setup": 696, "up": 696, "straight": 696, "awai": 696, "explor": 696, "test": [696, 701], "go": 696, "further": 696, "insight": [697, 698, 699, 700], "tensor": [697, 723], "dump": [697, 699], "research": 697, "collabor": 697, "debug": [698, 700], "analyz": [698, 700, 701], "weight": [698, 699, 700, 720], "histogram": 700, "react": 701, "app": 701, "avail": 701, "eject": 701, "learn": [701, 702], "more": [701, 702], "bundl": 701, "size": 701, "web": 701, "deploy": [701, 714], "fail": 701, "minifi": 701, "solut": [702, 703, 704, 708, 709, 710], "why": 702, "doe": 702, "method": [702, 703], "pip": [702, 703], "end": [702, 708, 709, 710], "servic": [703, 705, 708, 709, 710], "submit": [703, 704, 708, 709, 710], "task": [703, 704, 706, 708, 709, 710], "stop": [703, 708, 709, 710], "inspect": 703, "manag": [703, 708, 709], "resourc": [703, 708, 709], "node": 703, "state": 703, "cluster": [703, 704], "remov": 703, "url": 704, "endpoint": 704, "task_id": 704, "websocket": 704, "screen": 704, "ping": 704, "download": [704, 708, 709], "doc": 705, "wip": 705, "oaa": 705, "definit": 705, "diagram": 705, "hug": [709, 710], "grpc": 710, "client": 711, "singl": 712, "One": 713, "shot": 713, "network": 714, "sparsiti": 714, "decai": 714, "regular": 714, "larg": 714, "languag": 714, "retrain": 714, "free": 714, "spars": 714, "hyperparamet": 714, "full": 715, "79": 715, "2023": 715, "25": 715, "2022": 715, "35": 715, "2021": 715, "15": [715, 729], "2018": 715, "2020": 715, "style": 716, "access": 716, "fundament": [717, 723], "scheme": 717, "approach": 717, "With": 717, "without": 717, "specifi": 717, "devic": 717, "wise": 718, "lwq": 718, "turn": 719, "off": 719, "woq": [720, 729], "known": 721, "benefit": 722, "comparison": 722, "differ": 722, "smooth": 723, "quant": 723, "per": 723, "channel": 723, "limit": 723, "smoothquant": 723, "enhanc": 723, "alpha": 723, "engin": 723, "fix": 723, "determin": 723, "entir": 723, "each": 723, "block": 723, "tensorboard": 724, "space": 726, "exit": 726, "process": 726, "zero": 727, "topic": 727, "innov": 727, "product": 727, "13": 729, "0": 729, "ptq": 729}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [150, "module-contents"], [151, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [190, "module-contents"], [191, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [403, "module-contents"], [404, "module-contents"], [406, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [415, "module-contents"], [416, "module-contents"], [418, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [449, "module-contents"], [450, "module-contents"], [452, "module-contents"], [454, "module-contents"], [455, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [532, "module-contents"], [534, "module-contents"], [535, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [550, "module-contents"], [551, "module-contents"], [552, "module-contents"], [553, "module-contents"], [554, "module-contents"], [555, "module-contents"], [556, "module-contents"], [557, "module-contents"], [558, "module-contents"], [559, "module-contents"], [560, "module-contents"], [562, "module-contents"], [563, "module-contents"], [564, "module-contents"], [566, "module-contents"], [568, "module-contents"], [569, "module-contents"], [570, "module-contents"], [571, "module-contents"], [578, "module-contents"], [579, "module-contents"], [580, "module-contents"], [582, "module-contents"], [583, "module-contents"], [584, "module-contents"], [585, "module-contents"], [586, "module-contents"], [587, "module-contents"], [588, "module-contents"], [591, "module-contents"], [592, "module-contents"], [594, "module-contents"], [596, "module-contents"], [597, "module-contents"], [598, "module-contents"], [599, "module-contents"], [600, "module-contents"], [605, "module-contents"], [606, "module-contents"], [607, "module-contents"], [610, "module-contents"], [611, "module-contents"], [615, "module-contents"], [616, "module-contents"], [617, "module-contents"], [619, "module-contents"], [621, "module-contents"], [622, "module-contents"], [623, "module-contents"], [624, "module-contents"], [625, "module-contents"], [626, "module-contents"], [627, "module-contents"], [628, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [162, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [185, "classes"], [187, "classes"], [188, "classes"], [190, "classes"], [194, "classes"], [195, "classes"], [197, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [230, "classes"], [231, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [273, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [281, "classes"], [282, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [315, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [325, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [365, "classes"], [368, "classes"], [371, "classes"], [372, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [402, "classes"], [403, "classes"], [406, "classes"], [408, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [415, "classes"], [416, "classes"], [418, "classes"], [420, "classes"], [422, "classes"], [423, "classes"], [425, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [442, "classes"], [443, "classes"], [444, "classes"], [445, "classes"], [446, "classes"], [449, "classes"], [450, "classes"], [452, "classes"], [454, "classes"], [455, "classes"], [465, "classes"], [469, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [532, "classes"], [534, "classes"], [538, "classes"], [539, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [546, "classes"], [547, "classes"], [548, "classes"], [550, "classes"], [551, "classes"], [552, "classes"], [553, "classes"], [554, "classes"], [555, "classes"], [556, "classes"], [557, "classes"], [558, "classes"], [559, "classes"], [560, "classes"], [562, "classes"], [563, "classes"], [566, "classes"], [568, "classes"], [569, "classes"], [570, "classes"], [571, "classes"], [583, "classes"], [584, "classes"], [585, "classes"], [586, "classes"], [587, "classes"], [588, "classes"], [591, "classes"], [596, "classes"], [598, "classes"], [599, "classes"], [600, "classes"], [607, "classes"], [611, "classes"], [616, "classes"], [617, "classes"], [620, "classes"], [621, "classes"], [622, "classes"], [623, "classes"], [625, "classes"], [627, "classes"], [628, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [154, "functions"], [156, "functions"], [157, "functions"], [158, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [168, "functions"], [169, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [181, "functions"], [186, "functions"], [188, "functions"], [190, "functions"], [191, "functions"], [194, "functions"], [195, "functions"], [197, "functions"], [198, "functions"], [199, "functions"], [200, "functions"], [202, "functions"], [204, "functions"], [205, "functions"], [209, "functions"], [212, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [221, "functions"], [222, "functions"], [224, "functions"], [225, "functions"], [228, "functions"], [237, "functions"], [238, "functions"], [246, "functions"], [248, "functions"], [252, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [260, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [267, "functions"], [269, "functions"], [270, "functions"], [272, "functions"], [281, "functions"], [289, "functions"], [291, "functions"], [295, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [302, "functions"], [303, "functions"], [304, "functions"], [307, "functions"], [308, "functions"], [309, "functions"], [312, "functions"], [313, "functions"], [315, "functions"], [316, "functions"], [317, "functions"], [318, "functions"], [319, "functions"], [326, "functions"], [333, "functions"], [337, "functions"], [342, "functions"], [343, "functions"], [344, "functions"], [346, "functions"], [351, "functions"], [357, "functions"], [361, "functions"], [363, "functions"], [365, "functions"], [366, "functions"], [368, "functions"], [369, "functions"], [370, "functions"], [371, "functions"], [372, "functions"], [373, "functions"], [377, "functions"], [381, "functions"], [383, "functions"], [384, "functions"], [385, "functions"], [386, "functions"], [390, "functions"], [391, "functions"], [393, "functions"], [394, "functions"], [395, "functions"], [396, "functions"], [397, "functions"], [399, "functions"], [400, "functions"], [404, "functions"], [421, "functions"], [426, "functions"], [427, "functions"], [431, "functions"], [439, "functions"], [443, "functions"], [445, "functions"], [446, "functions"], [465, "functions"], [467, "functions"], [468, "functions"], [469, "functions"], [471, "functions"], [491, "functions"], [492, "functions"], [494, "functions"], [535, "functions"], [537, "functions"], [564, "functions"], [569, "functions"], [571, "functions"], [578, "functions"], [580, "functions"], [582, "functions"], [583, "functions"], [584, "functions"], [585, "functions"], [592, "functions"], [594, "functions"], [597, "functions"], [598, "functions"], [599, "functions"], [605, "functions"], [606, "functions"], [607, "functions"], [610, "functions"], [611, "functions"], [615, "functions"], [616, "functions"], [619, "functions"], [620, "functions"], [622, "functions"], [623, "functions"], [624, "functions"], [626, "functions"], [627, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [159, "subpackages"], [196, "subpackages"], [199, "subpackages"], [232, "subpackages"], [257, "subpackages"], [275, "subpackages"], [300, "subpackages"], [311, "subpackages"], [335, "subpackages"], [353, "subpackages"], [364, "subpackages"], [435, "subpackages"], [511, "subpackages"], [530, "subpackages"], [531, "subpackages"], [533, "subpackages"], [576, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [152, "submodules"], [159, "submodules"], [160, "submodules"], [175, "submodules"], [184, "submodules"], [189, "submodules"], [192, "submodules"], [196, "submodules"], [199, "submodules"], [201, "submodules"], [205, "submodules"], [212, "submodules"], [223, "submodules"], [229, "submodules"], [233, "submodules"], [240, "submodules"], [252, "submodules"], [256, "submodules"], [260, "submodules"], [267, "submodules"], [276, "submodules"], [283, "submodules"], [295, "submodules"], [299, "submodules"], [302, "submodules"], [306, "submodules"], [311, "submodules"], [318, "submodules"], [324, "submodules"], [330, "submodules"], [336, "submodules"], [340, "submodules"], [353, "submodules"], [359, "submodules"], [364, "submodules"], [371, "submodules"], [375, "submodules"], [389, "submodules"], [402, "submodules"], [407, "submodules"], [409, "submodules"], [414, "submodules"], [417, "submodules"], [419, "submodules"], [424, "submodules"], [435, "submodules"], [441, "submodules"], [447, "submodules"], [451, "submodules"], [453, "submodules"], [476, "submodules"], [500, "submodules"], [511, "submodules"], [519, "submodules"], [525, "submodules"], [530, "submodules"], [531, "submodules"], [533, "submodules"], [536, "submodules"], [549, "submodules"], [561, "submodules"], [567, "submodules"], [577, "submodules"], [589, "submodules"], [595, "submodules"], [608, "submodules"], [620, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [175, "package-contents"], [181, "package-contents"], [199, "package-contents"], [205, "package-contents"], [212, "package-contents"], [240, "package-contents"], [252, "package-contents"], [256, "package-contents"], [257, "package-contents"], [260, "package-contents"], [267, "package-contents"], [283, "package-contents"], [295, "package-contents"], [299, "package-contents"], [300, "package-contents"], [302, "package-contents"], [311, "package-contents"], [318, "package-contents"], [330, "package-contents"], [335, "package-contents"], [336, "package-contents"], [353, "package-contents"], [371, "package-contents"], [375, "package-contents"], [384, "package-contents"], [386, "package-contents"], [389, "package-contents"], [395, "package-contents"], [400, "package-contents"], [402, "package-contents"], [435, "package-contents"], [620, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[152, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[155, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[159, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[168, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[169, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[170, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[171, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[171, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[172, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[173, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[174, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[175, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[176, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[177, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[178, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[179, "module-neural_compressor.common.base_config"]], "Attributes": [[179, "attributes"], [180, "attributes"], [181, "attributes"], [185, "attributes"], [240, "attributes"], [248, "attributes"], [257, "attributes"], [291, "attributes"], [300, "attributes"], [311, "attributes"], [335, "attributes"], [375, "attributes"], [399, "attributes"], [402, "attributes"], [404, "attributes"], [446, "attributes"], [587, "attributes"], [599, "attributes"], [620, "attributes"]], "neural_compressor.common.base_tuning": [[180, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[181, "module-neural_compressor.common"]], "neural_compressor.common.tuning_param": [[182, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[183, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[184, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[185, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[186, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[187, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[188, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[189, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[190, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[191, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[192, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[193, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[194, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[195, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[196, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[197, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[198, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[199, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[200, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[201, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[202, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[203, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[204, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[205, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[206, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[207, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[208, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[209, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[210, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[211, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[212, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[213, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[214, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[215, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[216, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[217, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[218, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[219, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[220, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[221, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[222, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[223, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[224, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[225, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[226, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[227, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[228, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[229, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[230, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[231, "module-neural_compressor.config"]], "neural_compressor.contrib": [[232, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[233, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[234, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[235, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[236, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[237, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[238, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[239, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[240, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[241, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[242, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[243, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[244, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[245, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[246, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[247, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[248, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[249, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[250, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[251, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[252, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[253, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[254, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[255, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[256, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[257, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[258, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[259, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[260, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[261, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[262, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[263, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[264, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[265, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[266, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[267, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[268, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[269, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[270, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[271, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[272, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[273, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[274, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[275, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[276, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[277, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[278, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[281, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[282, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[283, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[287, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[288, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[289, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[290, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[291, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[292, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[293, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[294, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[295, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[296, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[297, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[298, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[299, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[300, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[301, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[302, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[303, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[304, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[305, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[306, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[307, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[308, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[309, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[310, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[311, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[312, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[313, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[314, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[315, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[316, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[317, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[318, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[319, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[320, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[321, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[322, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[323, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[324, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[325, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[326, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[327, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[328, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[329, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[330, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[331, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[332, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[333, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[334, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[335, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[337, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[338, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[339, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[340, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[341, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[342, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[343, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[344, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[345, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[346, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[347, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[348, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[349, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[350, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[351, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[352, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[353, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[354, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[355, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[356, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[357, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[358, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[359, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[361, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[362, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[363, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[364, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[365, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[366, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[367, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[368, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[369, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[370, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[371, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[372, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[373, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[374, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[375, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[376, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[377, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[378, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[379, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[380, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[381, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[382, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[383, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[384, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[385, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[386, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[387, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[388, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[389, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[391, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[392, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[393, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[394, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[395, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[396, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[397, "module-neural_compressor.onnxrt.quantization.autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[398, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[399, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[400, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[401, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[402, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[403, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[404, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[405, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[406, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[407, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[408, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[409, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[410, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[411, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[412, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[413, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[414, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[415, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[416, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[417, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[418, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[419, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[420, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[421, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[422, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[423, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[424, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[425, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[426, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[427, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[428, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[429, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[430, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[431, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[432, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[433, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[434, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[435, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[436, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[437, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[438, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[439, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[440, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[441, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[442, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[443, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[444, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[445, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[446, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[447, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[448, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[449, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[450, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[451, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[452, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[453, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[456, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[457, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[458, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[459, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[460, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[461, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[462, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[463, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[464, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[465, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[466, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[467, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[468, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[469, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[470, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[471, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[530, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[531, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[559, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[561, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[562, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[563, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[564, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[565, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[566, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[567, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[568, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[569, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[570, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[571, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[572, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[573, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[574, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[575, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[576, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[577, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[578, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[579, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[580, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.static_quant": [[581, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[582, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "neural_compressor.torch.algorithms.static_quant.utility": [[583, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[584, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[585, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[586, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[587, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[588, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[589, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[590, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[591, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[592, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[593, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[594, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[595, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[596, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[597, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.teq": [[598, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "neural_compressor.torch.algorithms.weight_only.utility": [[599, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[600, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[601, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[602, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[603, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[604, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[605, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[606, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[607, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[608, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[609, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[610, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.auto_accelerator": [[611, "module-neural_compressor.torch.utils.auto_accelerator"]], "neural_compressor.torch.utils.constants": [[612, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[613, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[614, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[615, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[616, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[617, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[618, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[619, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[620, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[621, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[622, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[623, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[624, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[625, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[626, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[627, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[628, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[629, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[630, "intel-neural-compressor-documentation"], [730, "intel-neural-compressor-documentation"]], "Sections": [[630, "sections"], [730, "sections"]], "Contributor Covenant Code of Conduct": [[631, "contributor-covenant-code-of-conduct"], [632, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[631, "our-pledge"]], "Our Standards": [[631, "our-standards"]], "Our Responsibilities": [[631, "our-responsibilities"]], "Scope": [[631, "scope"]], "Enforcement": [[631, "enforcement"]], "Attribution": [[631, "attribution"]], "Contribution Guidelines": [[632, "contribution-guidelines"]], "Create Pull Request": [[632, "create-pull-request"]], "Step-by-Step guidelines": [[632, "step-by-step-guidelines"]], "Pull Request Checklist": [[632, "pull-request-checklist"]], "Pull Request Template": [[632, "pull-request-template"]], "Pull Request Acceptance Criteria": [[632, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[632, "pull-request-status-checks-overview"]], "Support": [[632, "support"]], "FX": [[633, "fx"]], "Introduction": [[633, "introduction"], [634, "introduction"], [637, "introduction"], [638, "introduction"], [639, "introduction"], [654, "introduction"], [655, "introduction"], [657, "introduction"], [658, "introduction"], [661, "introduction"], [662, "introduction"], [663, "introduction"], [665, "introduction"], [667, "introduction"], [670, "introduction"], [674, "introduction"], [676, "introduction"], [677, "introduction"], [698, "introduction"], [699, "introduction"], [700, "introduction"], [712, "introduction"], [713, "introduction"], [714, "introduction"], [716, "introduction"], [718, "introduction"], [720, "introduction"], [722, "introduction"], [723, "introduction"], [724, "introduction"], [725, "introduction"], [726, "introduction"], [728, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[633, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[633, "get-started"], [660, "get-started"], [702, "get-started"], [717, "get-started"]], "Post Training Static Quantization": [[633, "post-training-static-quantization"], [717, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[633, "post-training-dynamic-quantization"], [717, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[633, "quantization-aware-training"]], "Examples": [[633, "examples"], [634, "examples"], [654, "examples"], [657, "examples"], [658, "examples"], [661, "examples"], [662, "examples"], [663, "examples"], [664, "examples"], [665, "examples"], [675, "examples"], [676, "examples"], [677, "examples"], [713, "examples"], [714, "examples"], [717, "examples"], [718, "examples"], [720, "examples"], [724, "examples"]], "Note": [[633, "note"]], "Details": [[633, "details"]], "Common Problem": [[633, "common-problem"]], "Dynamic Quantization": [[633, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[633, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[634, "neural-architecture-search"]], "Basic NAS": [[634, "basic-nas"]], "Dynamic NAS": [[634, "dynamic-nas"]], "NAS Support Matrix": [[634, "nas-support-matrix"]], "Get Started with NAS API": [[634, "get-started-with-nas-api"]], "Basic Usage": [[634, "basic-usage"]], "1. Python code + YAML": [[634, "python-code-yaml"]], "2. Python code only": [[634, "python-code-only"]], "Advanced Usage (Custom NAS)": [[634, "advanced-usage-custom-nas"]], "Security Policy": [[635, "security-policy"]], "Report a Vulnerability": [[635, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[636, "intel-neural-compressor"], [695, "intel-neural-compressor"]], "Installation": [[636, "installation"], [671, "installation"], [671, "id1"], [689, "installation"], [697, "installation"], [702, "installation"]], "Install from pypi": [[636, "install-from-pypi"], [697, "install-from-pypi"]], "Getting Started": [[636, "getting-started"], [668, "getting-started"], [697, "getting-started"]], "Quantization with Python API": [[636, "quantization-with-python-api"], [668, "quantization-with-python-api"], [697, "quantization-with-python-api"]], "Documentation": [[636, "documentation"]], "Selected Publications/Events": [[636, "selected-publications-events"]], "Additional Content": [[636, "additional-content"]], "Communication": [[636, "communication"]], "Adaptor": [[637, "adaptor"], [640, "adaptor"]], "Adaptor Support Matrix": [[637, "adaptor-support-matrix"]], "Working Flow": [[637, "working-flow"], [717, "working-flow"]], "Get Started with Adaptor API": [[637, "get-started-with-adaptor-api"]], "Query API": [[637, "query-api"]], "Background": [[637, "background"], [656, "background"]], "Query API Introduction": [[637, "query-api-introduction"]], "Example of Adding a New Backend Support": [[637, "example-of-adding-a-new-backend-support"]], "Capability": [[637, "capability"]], "Implement ONNXRTAdaptor Class": [[637, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[638, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[638, "api-list-that-need-to-implement"]], "Design the framework YAML": [[638, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[638, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[638, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[638, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[638, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[638, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[639, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[639, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[639, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[639, "use-the-new-data-type"]], "Summary": [[639, "summary"]], "ONNX Runtime": [[641, "onnx-runtime"]], "Torch Utils": [[642, "torch-utils"]], "API Document Example": [[643, "api-document-example"]], "APIs": [[644, "apis"]], "Benchmark": [[645, "benchmark"], [675, "benchmark"], [716, "benchmark"]], "Compression": [[646, "compression"]], "Config": [[647, "config"]], "Mix Precision": [[648, "mix-precision"], [675, "mix-precision"]], "Model": [[649, "model"], [677, "model"], [698, "model"], [700, "model"]], "Objective": [[650, "objective"], [708, "objective"], [709, "objective"], [710, "objective"], [712, "objective"]], "Quantization": [[651, "quantization"], [716, "quantization"], [717, "quantization"]], "Strategy": [[652, "strategy"]], "Training": [[653, "training"]], "Benchmarking": [[654, "benchmarking"]], "Benchmark Support Matrix": [[654, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[654, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[655, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[655, "calibration-algorithms"]], "Support Matrix": [[655, "support-matrix"], [680, "support-matrix"]], "Reference": [[655, "reference"], [656, "reference"], [714, "reference"], [717, "reference"], [720, "reference"], [723, "reference"]], "INC Coding Conventions": [[656, "inc-coding-conventions"]], "Rules": [[656, "rules"]], "Imports": [[656, "imports"]], "Strings": [[656, "strings"]], "Logger": [[656, "logger"]], "Type Annotations": [[656, "type-annotations"]], "Comments": [[656, "comments"]], "TODO Comments": [[656, "todo-comments"]], "Public and Internal Interfaces": [[656, "public-and-internal-interfaces"]], "Folder structure": [[656, "folder-structure"]], "Recommend VS Code settings.json": [[656, "recommend-vs-code-settings-json"]], "DataLoader": [[657, "dataloader"]], "Supported Framework Dataloader Matrix": [[657, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[657, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[657, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[657, "build-custom-dataloader-with-python-api"]], "Dataset": [[658, "dataset"]], "Supported Framework Dataset Matrix": [[658, "supported-framework-dataset-matrix"]], "TensorFlow": [[658, "tensorflow"], [674, "tensorflow"], [725, "tensorflow"]], "PyTorch": [[658, "pytorch"], [674, "pytorch"], [719, "pytorch"]], "MXNet": [[658, "mxnet"], [674, "mxnet"], [725, "mxnet"]], "ONNXRT": [[658, "onnxrt"], [674, "onnxrt"], [725, "onnxrt"]], "Get start with Dataset API": [[658, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[658, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[658, "user-specific-dataset"]], "Design": [[659, "design"], [726, "design"], [726, "id1"], [726, "id3"], [726, "id5"], [726, "id7"], [726, "id9"], [726, "id11"], [726, "id13"], [726, "id15"], [726, "id17"], [726, "id19"], [726, "id21"]], "Architecture": [[659, "architecture"], [670, "architecture"]], "Workflow": [[659, "workflow"]], "Diagnosis": [[660, "diagnosis"]], "Diagnosis Introduction": [[660, "diagnosis-introduction"]], "Supported Feature Matrix": [[660, "supported-feature-matrix"], [663, "supported-feature-matrix"], [667, "supported-feature-matrix"], [670, "supported-feature-matrix"], [716, "supported-feature-matrix"], [717, "supported-feature-matrix"], [724, "supported-feature-matrix"], [728, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[660, "install-intel-neural-compressor"]], "Modify script": [[660, "modify-script"]], "Quantization diagnosis": [[660, "quantization-diagnosis"]], "Benchmark diagnosis": [[660, "benchmark-diagnosis"]], "Example": [[660, "example"], [674, "example"], [680, "example"], [684, "example"], [712, "example"]], "Prepare dataset": [[660, "prepare-dataset"]], "Run quantization script": [[660, "run-quantization-script"]], "Run benchmark script": [[660, "run-benchmark-script"]], "See quantization data": [[660, "see-quantization-data"]], "How to do diagnosis": [[660, "how-to-do-diagnosis"]], "Parameter description": [[660, "parameter-description"]], "Diagnosis suggestions": [[660, "diagnosis-suggestions"]], "Fallback setting example": [[660, "fallback-setting-example"]], "See profiling data": [[660, "see-profiling-data"]], "Distillation": [[661, "distillation"], [675, "distillation"], [716, "distillation"]], "Knowledge Distillation": [[661, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[661, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[661, "self-distillation"]], "Distillation Support Matrix": [[661, "distillation-support-matrix"]], "Get Started with Distillation API": [[661, "get-started-with-distillation-api"]], "Distillation for Quantization": [[662, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[662, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[662, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[663, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[663, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[663, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[663, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[663, "horovodrun-execution"]], "Security": [[663, "security"]], "PyTorch Examples:": [[663, "pytorch-examples"]], "TensorFlow Examples:": [[663, "tensorflow-examples"]], "Example List": [[664, "example-list"]], "Release Data": [[664, "release-data"]], "Export": [[665, "export"]], "Supported Framework Model Matrix": [[665, "supported-framework-model-matrix"], [677, "supported-framework-model-matrix"], [718, "supported-framework-model-matrix"], [720, "supported-framework-model-matrix"]], "PyTorch Model": [[665, "pytorch-model"]], "FP32 Model Export": [[665, "fp32-model-export"], [665, "id1"]], "INT8 Model Export": [[665, "int8-model-export"], [665, "id2"]], "Tensorflow Model": [[665, "tensorflow-model"]], "Appendix": [[665, "appendix"]], "Supported quantized ops": [[665, "supported-quantized-ops"]], "Frequently Asked Questions": [[666, "frequently-asked-questions"]], "Common Build Issues": [[666, "common-build-issues"]], "Issue 1:": [[666, "issue-1"]], "Issue 2:": [[666, "issue-2"]], "Issue 3:": [[666, "issue-3"]], "Issue 4:": [[666, "issue-4"]], "Framework YAML Configuration Files": [[667, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[667, "get-started-with-framework-yaml-files"]], "Quick Samples": [[668, "quick-samples"]], "Validated Models": [[668, "validated-models"], [723, "validated-models"], [729, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[669, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[669, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[669, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[670, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[671, "prerequisites"], [702, "prerequisites"], [703, "prerequisites"]], "Install from Binary": [[671, "install-from-binary"]], "Install from Source": [[671, "install-from-source"], [697, "install-from-source"]], "Install from AI Kit": [[671, "install-from-ai-kit"]], "System Requirements": [[671, "system-requirements"]], "Validated Hardware Environment": [[671, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[671, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[671, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[671, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[671, "validated-software-environment"]], "Legal Information": [[672, "legal-information"]], "License": [[672, "license"]], "Citation": [[672, "citation"]], "Trademarks": [[672, "trademarks"]], "LLMs Quantization Recipes": [[673, "llms-quantization-recipes"]], "IPEX key models": [[673, "ipex-key-models"]], "Metrics": [[674, "metrics"]], "Supported Built-in Metric Matrix": [[674, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[674, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[674, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[674, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[675, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[675, "model-quantization"]], "Post-training Quantization": [[675, "post-training-quantization"]], "Quantization Aware Training": [[675, "quantization-aware-training"], [717, "quantization-aware-training"], [717, "id1"]], "Pruning": [[675, "pruning"], [714, "pruning"], [716, "pruning"]], "Orchestration": [[675, "orchestration"]], "Mixed Precision": [[676, "mixed-precision"]], "Mixed Precision Support Matrix": [[676, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[676, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[676, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[676, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[676, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[676, "get-started-with-mixed-precision-api"]], "Neural Coder": [[678, "neural-coder"], [695, "neural-coder"], [695, "id1"]], "What do we offer?": [[678, "what-do-we-offer"]], "Getting Started!": [[678, "getting-started"], [689, "getting-started"]], "Jupyter Lab Extension": [[678, "jupyter-lab-extension"]], "Python Launcher": [[678, "python-launcher"], [683, "python-launcher"]], "Python API": [[678, "python-api"]], "Contact": [[678, "contact"], [702, "contact"]], "AWS Amazon SageMaker Support": [[679, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[679, "start-jupyter-lab-3"]], "For SageMaker Studio": [[679, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[679, "for-sagemaker-notebook-instance"]], "Installation Guide": [[679, "installation-guide"]], "BigDL Nano Support": [[680, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[681, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[681, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[681, "install-numa-controller"]], "Environment Variables": [[681, "environment-variables"]], "Frequency Governers": [[681, "frequency-governers"]], "Neural Coder as Python API": [[682, "neural-coder-as-python-api"]], "Enable": [[682, "enable"]], "Bench": [[682, "bench"]], "SuperBench": [[682, "superbench"]], "Quick-Start": [[683, "quick-start"]], "Launcher Arguments (Optional)": [[683, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[684, "neural-coder-for-quantization"]], "Features Supported": [[684, "features-supported"]], "Models Supported": [[684, "models-supported"]], "Usage": [[684, "usage"], [704, "usage"], [704, "id2"], [704, "id6"], [704, "id9"], [704, "id16"], [704, "id19"], [704, "id22"], [704, "id25"], [723, "usage"], [724, "usage"], [724, "id1"], [726, "usage"], [726, "id2"], [726, "id4"], [726, "id6"], [726, "id8"], [726, "id10"], [726, "id12"], [726, "id14"], [726, "id16"], [726, "id18"], [726, "id20"], [726, "id22"]], "PyPI distribution:": [[684, "pypi-distribution"]], "Supported Optimization Features": [[685, "supported-optimization-features"]], "v0.4": [[686, "v0-4"]], "Highlights": [[686, "highlights"]], "Others": [[686, "others"]], "Changelog": [[687, "changelog"], [691, "changelog"]], "neural_compressor_ext_lab": [[688, "neural-compressor-ext-lab"]], "Requirements": [[688, "requirements"], [692, "requirements"], [698, "requirements"], [699, "requirements"], [700, "requirements"], [708, "requirements"]], "Install": [[688, "install"]], "Uninstall": [[688, "uninstall"]], "Contributing": [[688, "contributing"], [692, "contributing"]], "Development install": [[688, "development-install"], [692, "development-install"]], "Development uninstall": [[688, "development-uninstall"], [692, "development-uninstall"]], "Packaging the extension": [[688, "packaging-the-extension"], [692, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[689, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[689, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[689, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[689, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[690, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[690, "manual-release"], [693, "manual-release"]], "Python package": [[690, "python-package"], [693, "python-package"]], "NPM package": [[690, "npm-package"], [693, "npm-package"]], "Automated releases with the Jupyter Releaser": [[690, "automated-releases-with-the-jupyter-releaser"], [693, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[690, "publishing-to-conda-forge"], [693, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[692, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[693, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[694, "change-log"]], "[Unreleased]": [[694, "unreleased"]], "Background Introduction": [[695, "background-introduction"]], "Neural Coder Extension in VSCode": [[695, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[695, "neural-coder-extension-usage"]], "1. Open": [[695, "open"]], "2. Search": [[695, "search"]], "3. Setting": [[695, "setting"]], "4. Icon": [[695, "icon"]], "5. optimization (quantization)": [[695, "optimization-quantization"]], "5.1 Enable": [[695, "enable"]], "5.2 Auto": [[695, "auto"]], "Welcome to your VS Code Extension": [[696, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[696, "what-s-in-the-folder"]], "Setup": [[696, "setup"]], "Get up and running straight away": [[696, "get-up-and-running-straight-away"]], "Make changes": [[696, "make-changes"]], "Explore the API": [[696, "explore-the-api"]], "Run tests": [[696, "run-tests"]], "Go further": [[696, "go-further"]], "Neural Insights": [[697, "neural-insights"]], "Start the Neural Insights": [[697, "start-the-neural-insights"]], "Tensor dump examples": [[697, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[697, "step-by-step-diagnosis-example"]], "Research Collaborations": [[697, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[698, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [700, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[698, "preparation"], [699, "preparation"], [700, "preparation"], [722, "preparation"]], "Running the quantization": [[698, "running-the-quantization"], [699, "running-the-quantization"], [700, "running-the-quantization"]], "Analyzing the result of quantization": [[698, "analyzing-the-result-of-quantization"], [700, "analyzing-the-result-of-quantization"]], "Weights summary": [[698, "weights-summary"]], "Activations summary": [[698, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[699, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[699, "source"], [700, "source"]], "Prepare the dataset": [[700, "prepare-the-dataset"]], "Analyzing weight histograms": [[700, "analyzing-weight-histograms"]], "Open Neural Insights": [[700, "open-neural-insights"]], "Getting Started with Create React App": [[701, "getting-started-with-create-react-app"]], "Available Scripts": [[701, "available-scripts"]], "npm start": [[701, "npm-start"]], "npm test": [[701, "npm-test"]], "npm run build": [[701, "npm-run-build"]], "npm run eject": [[701, "npm-run-eject"]], "Learn More": [[701, "learn-more"], [702, "learn-more"]], "Code Splitting": [[701, "code-splitting"]], "Analyzing the Bundle Size": [[701, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[701, "making-a-progressive-web-app"]], "Advanced Configuration": [[701, "advanced-configuration"]], "Deployment": [[701, "deployment"]], "npm run build fails to minify": [[701, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[702, "what-s-neural-solution"]], "Why Neural Solution?": [[702, "why-neural-solution"]], "How does Neural Solution Work?": [[702, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[702, "method-1-using-pip"]], "Method 2. Building from source:": [[702, "method-2-building-from-source"]], "End-to-end examples": [[702, "end-to-end-examples"]], "Get started": [[703, "get-started"]], "Install Neural Solution": [[703, "install-neural-solution"]], "Method 1. Using pip": [[703, "method-1-using-pip"]], "Method 2. Building from source": [[703, "method-2-building-from-source"]], "Start service": [[703, "start-service"]], "Submit task": [[703, "submit-task"]], "Query task status": [[703, "query-task-status"]], "Stop service": [[703, "stop-service"]], "Inspect logs": [[703, "inspect-logs"]], "Manage resource": [[703, "manage-resource"], [708, "manage-resource"], [709, "manage-resource"]], "Node States": [[703, "node-states"]], "Query cluster": [[703, "query-cluster"]], "Add node": [[703, "add-node"]], "Remove node": [[703, "remove-node"]], "Neural Solution API": [[704, "neural-solution-api"]], "Base URL": [[704, "base-url"]], "Endpoints": [[704, "endpoints"]], "GET /": [[704, "get"]], "Description": [[704, "description"], [704, "id1"], [704, "id4"], [704, "id8"], [704, "id12"], [704, "id15"], [704, "id18"], [704, "id21"], [704, "id24"]], "Responses": [[704, "responses"], [704, "id3"], [704, "id7"], [704, "id11"], [704, "id14"], [704, "id17"], [704, "id20"], [704, "id23"], [704, "id26"]], "POST /task/submit": [[704, "post-task-submit"]], "Parameters": [[704, "parameters"], [704, "id5"], [704, "id10"], [704, "id13"]], "GET /task/status/{task_id}": [[704, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[704, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[704, "websocket-task-screen-task-id"]], "GET /ping": [[704, "get-ping"]], "GET /cluster": [[704, "get-cluster"]], "GET /download/{task_id}": [[704, "get-download-task-id"]], "GET /description": [[704, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[705, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[705, "contents"]], "Overview": [[705, "overview"], [727, "overview"]], "Workflow of OaaS": [[705, "workflow-of-oaas"]], "Class definition diagram": [[705, "class-definition-diagram"]], "Extensibility": [[705, "extensibility"]], "Task request description": [[706, "task-request-description"]], "Examples List": [[707, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[708, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[708, "start-the-neural-solution-service"], [709, "start-the-neural-solution-service"], [710, "start-the-neural-solution-service"]], "Submit optimization task": [[708, "submit-optimization-task"], [709, "submit-optimization-task"], [710, "submit-optimization-task"]], "Query optimization result": [[708, "query-optimization-result"], [709, "query-optimization-result"], [710, "query-optimization-result"]], "Download optimized model": [[708, "download-optimized-model"], [709, "download-optimized-model"]], "Stop the service": [[708, "stop-the-service"], [709, "stop-the-service"], [710, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[709, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[710, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[711, "client"]], "Single Objective": [[712, "single-objective"]], "Multiple Objectives": [[712, "multiple-objectives"]], "Objective Support Matrix": [[712, "objective-support-matrix"]], "Get Started with Objective API": [[712, "get-started-with-objective-api"]], "Config Single Objective": [[712, "config-single-objective"]], "Config Multiple Objectives": [[712, "config-multiple-objectives"]], "Optimization Orchestration": [[713, "optimization-orchestration"]], "One-shot": [[713, "one-shot"]], "Orchestration Support Matrix": [[713, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[713, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[714, "neural-network-pruning"]], "Pruning Patterns": [[714, "pruning-patterns"]], "Pruning Criteria": [[714, "pruning-criteria"]], "Pruning Types": [[714, "pruning-types"]], "Pruning Schedules": [[714, "pruning-schedules"]], "Pruning Scope": [[714, "pruning-scope"]], "Sparsity Decay Types": [[714, "sparsity-decay-types"]], "Regularization": [[714, "regularization"]], "Large Language Model Pruning": [[714, "large-language-model-pruning"]], "Pruning Support Matrix": [[714, "pruning-support-matrix"]], "Get Started with Pruning API": [[714, "get-started-with-pruning-api"]], "Training-aware pruning API": [[714, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[714, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[714, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[714, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (79)": [[715, "full-publications-events-79"]], "2023 (25)": [[715, "id1"]], "2022 (35)": [[715, "id2"]], "2021 (15)": [[715, "id3"]], "2018 - 2020 (4)": [[715, "id4"]], "Pythonic Style Access for Configurations": [[716, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[716, "pythonic-api-for-user-configurations"], [716, "id1"]], "Pythonic API for Framework Configurations": [[716, "pythonic-api-for-framework-configurations"], [716, "id2"]], "Get Started with Pythonic API for Configurations": [[716, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[716, "nas"]], "Quantization Introduction": [[717, "quantization-introduction"]], "Quantization Fundamentals": [[717, "quantization-fundamentals"], [723, "quantization-fundamentals"]], "Quantization Support Matrix": [[717, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[717, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[717, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[717, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[717, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[717, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[717, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[717, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[717, "post-training-quantization"]], "Specify Quantization Rules": [[717, "specify-quantization-rules"]], "Specify Quantization Recipes": [[717, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[717, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[718, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[718, "pytorch-framework-example"]], "ONNX Runtime framework example": [[718, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[719, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[719, "tensorflow"]], "Weight Only Quantization (WOQ)": [[720, "weight-only-quantization-woq"]], "Quantization Capability": [[720, "quantization-capability"]], "Export Compressed Model": [[720, "export-compressed-model"]], "User Code Example": [[720, "user-code-example"]], "WOQ Algorithms Tuning": [[720, "woq-algorithms-tuning"]], "User code example": [[720, "id1"]], "Release": [[721, "release"]], "Release Notes": [[721, "release-notes"]], "Known Issues": [[721, "known-issues"]], "Incompatible Changes": [[721, "incompatible-changes"]], "SigOpt Strategy": [[722, "sigopt-strategy"]], "SigOpt Platform": [[722, "sigopt-platform"]], "Neural Compressor Configuration": [[722, "neural-compressor-configuration"]], "Performance": [[722, "performance"]], "Benefit of SigOpt Strategy": [[722, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[722, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[723, "smooth-quant"]], "Per-tensor & Per-channel": [[723, "per-tensor-per-channel"]], "Per-tensor example": [[723, "per-tensor-example"]], "Per-channel example": [[723, "per-channel-example"]], "Matmul quantization example": [[723, "matmul-quantization-example"]], "Per-channel limitation": [[723, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[723, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[723, "smoothquant"]], "Our enhancement:": [[723, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[723, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[723, "engineering"]], "Using a fixed alpha": [[723, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[723, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[723, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[723, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[723, "supported-framework-matrix"]], "TensorBoard": [[724, "tensorboard"]], "Get Started with TensorBoard": [[724, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[724, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[724, "tensorflow-tensorboard"]], "PyTorch Examples": [[724, "pytorch-examples"]], "TensorFlow Examples": [[724, "tensorflow-examples"]], "Transform": [[725, "transform"]], "Transform Support List": [[725, "transform-support-list"]], "Pytorch": [[725, "pytorch"]], "Tuning Strategies": [[726, "tuning-strategies"]], "Strategy Design": [[726, "strategy-design"]], "Tuning Space": [[726, "tuning-space"]], "Exit Policy": [[726, "exit-policy"]], "Accuracy Criteria": [[726, "accuracy-criteria"]], "Tuning Process": [[726, "tuning-process"]], "Tuning Algorithms": [[726, "tuning-algorithms"]], "Auto": [[726, "auto"]], "Conservative Tuning": [[726, "conservative-tuning"]], "Basic": [[726, "basic"]], "MSE": [[726, "mse"]], "MSE_V2": [[726, "mse-v2"]], "HAWQ_V2": [[726, "hawq-v2"]], "Bayesian": [[726, "bayesian"]], "Exhaustive": [[726, "exhaustive"]], "Random": [[726, "random"]], "SigOpt": [[726, "sigopt"]], "TPE": [[726, "tpe"]], "Distributed Tuning": [[726, "distributed-tuning"]], "Customize a New Tuning Strategy": [[726, "customize-a-new-tuning-strategy"]], "User Guide": [[727, "user-guide"]], "Python-based APIs": [[727, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[727, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[727, "advanced-topics"]], "Innovations for Productivity": [[727, "innovations-for-productivity"]], "User YAML Configuration Files": [[728, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[728, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[729, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[729, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[729, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[729, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[729, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[729, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[729, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[729, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[729, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[729, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[729, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.auto_round"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [151, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [152, "module-neural_compressor.adaptor.torch_utils.autoround"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [155, "module-neural_compressor.adaptor.torch_utils.awq"], [156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [157, "module-neural_compressor.adaptor.torch_utils.gptq"], [158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [159, "module-neural_compressor.adaptor.torch_utils"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [168, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [169, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [170, "module-neural_compressor.adaptor.torch_utils.teq"], [171, "module-neural_compressor.adaptor.torch_utils.util"], [172, "module-neural_compressor.adaptor.torch_utils.weight_only"], [173, "module-neural_compressor.algorithm.algorithm"], [174, "module-neural_compressor.algorithm.fast_bias_correction"], [175, "module-neural_compressor.algorithm"], [176, "module-neural_compressor.algorithm.smooth_quant"], [177, "module-neural_compressor.algorithm.weight_correction"], [178, "module-neural_compressor.benchmark"], [179, "module-neural_compressor.common.base_config"], [180, "module-neural_compressor.common.base_tuning"], [181, "module-neural_compressor.common"], [182, "module-neural_compressor.common.tuning_param"], [183, "module-neural_compressor.common.utils.constants"], [184, "module-neural_compressor.common.utils"], [185, "module-neural_compressor.common.utils.logger"], [186, "module-neural_compressor.common.utils.utility"], [187, "module-neural_compressor.compression.callbacks"], [188, "module-neural_compressor.compression.distillation.criterions"], [189, "module-neural_compressor.compression.distillation"], [190, "module-neural_compressor.compression.distillation.optimizers"], [191, "module-neural_compressor.compression.distillation.utility"], [192, "module-neural_compressor.compression.hpo"], [193, "module-neural_compressor.compression.hpo.sa_optimizer"], [194, "module-neural_compressor.compression.hpo.search_algorithms"], [195, "module-neural_compressor.compression.hpo.search_space"], [196, "module-neural_compressor.compression"], [197, "module-neural_compressor.compression.pruner.criteria"], [198, "module-neural_compressor.compression.pruner.dsnot"], [199, "module-neural_compressor.compression.pruner"], [200, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [201, "module-neural_compressor.compression.pruner.model_slim"], [202, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [203, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [204, "module-neural_compressor.compression.pruner.patterns.base"], [205, "module-neural_compressor.compression.pruner.patterns"], [206, "module-neural_compressor.compression.pruner.patterns.mha"], [207, "module-neural_compressor.compression.pruner.patterns.ninm"], [208, "module-neural_compressor.compression.pruner.patterns.nxm"], [209, "module-neural_compressor.compression.pruner.pruners.base"], [210, "module-neural_compressor.compression.pruner.pruners.basic"], [211, "module-neural_compressor.compression.pruner.pruners.block_mask"], [212, "module-neural_compressor.compression.pruner.pruners"], [213, "module-neural_compressor.compression.pruner.pruners.mha"], [214, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [215, "module-neural_compressor.compression.pruner.pruners.progressive"], [216, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [217, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [218, "module-neural_compressor.compression.pruner.pruning"], [219, "module-neural_compressor.compression.pruner.regs"], [220, "module-neural_compressor.compression.pruner.schedulers"], [221, "module-neural_compressor.compression.pruner.tf_criteria"], [222, "module-neural_compressor.compression.pruner.utils"], [223, "module-neural_compressor.compression.pruner.wanda"], [224, "module-neural_compressor.compression.pruner.wanda.prune"], [225, "module-neural_compressor.compression.pruner.wanda.utils"], [226, "module-neural_compressor.compression.pruner.wanda.wrapper"], [227, "module-neural_compressor.conf.config"], [228, "module-neural_compressor.conf.dotdict"], [229, "module-neural_compressor.conf"], [230, "module-neural_compressor.conf.pythonic_config"], [231, "module-neural_compressor.config"], [232, "module-neural_compressor.contrib"], [233, "module-neural_compressor.contrib.strategy"], [234, "module-neural_compressor.contrib.strategy.sigopt"], [235, "module-neural_compressor.contrib.strategy.tpe"], [236, "module-neural_compressor.data.dataloaders.base_dataloader"], [237, "module-neural_compressor.data.dataloaders.dataloader"], [238, "module-neural_compressor.data.dataloaders.default_dataloader"], [239, "module-neural_compressor.data.dataloaders.fetcher"], [240, "module-neural_compressor.data.dataloaders"], [241, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [242, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [243, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [244, "module-neural_compressor.data.dataloaders.sampler"], [245, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [246, "module-neural_compressor.data.datasets.bert_dataset"], [247, "module-neural_compressor.data.datasets.coco_dataset"], [248, "module-neural_compressor.data.datasets.dataset"], [249, "module-neural_compressor.data.datasets.dummy_dataset"], [250, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [251, "module-neural_compressor.data.datasets.imagenet_dataset"], [252, "module-neural_compressor.data.datasets"], [253, "module-neural_compressor.data.datasets.style_transfer_dataset"], [254, "module-neural_compressor.data.filters.coco_filter"], [255, "module-neural_compressor.data.filters.filter"], [256, "module-neural_compressor.data.filters"], [257, "module-neural_compressor.data"], [258, "module-neural_compressor.data.transforms.coco_transform"], [259, "module-neural_compressor.data.transforms.imagenet_transform"], [260, "module-neural_compressor.data.transforms"], [261, "module-neural_compressor.data.transforms.postprocess"], [262, "module-neural_compressor.data.transforms.tokenization"], [263, "module-neural_compressor.data.transforms.transform"], [264, "module-neural_compressor.experimental.benchmark"], [265, "module-neural_compressor.experimental.common.criterion"], [266, "module-neural_compressor.experimental.common.dataloader"], [267, "module-neural_compressor.experimental.common"], [268, "module-neural_compressor.experimental.common.metric"], [269, "module-neural_compressor.experimental.common.model"], [270, "module-neural_compressor.experimental.common.optimizer"], [271, "module-neural_compressor.experimental.common.postprocess"], [272, "module-neural_compressor.experimental.common.torch_utils"], [273, "module-neural_compressor.experimental.component"], [274, "module-neural_compressor.experimental.compression"], [275, "module-neural_compressor.experimental.contrib"], [276, "module-neural_compressor.experimental.contrib.strategy"], [277, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [278, "module-neural_compressor.experimental.contrib.strategy.tpe"], [279, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [280, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [281, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [282, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [283, "module-neural_compressor.experimental.data.dataloaders"], [284, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [285, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [286, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [287, "module-neural_compressor.experimental.data.dataloaders.sampler"], [288, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [289, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [290, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [291, "module-neural_compressor.experimental.data.datasets.dataset"], [292, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [293, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [294, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [295, "module-neural_compressor.experimental.data.datasets"], [296, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [297, "module-neural_compressor.experimental.data.filters.coco_filter"], [298, "module-neural_compressor.experimental.data.filters.filter"], [299, "module-neural_compressor.experimental.data.filters"], [300, "module-neural_compressor.experimental.data"], [301, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [302, "module-neural_compressor.experimental.data.transforms"], [303, "module-neural_compressor.experimental.data.transforms.tokenization"], [304, "module-neural_compressor.experimental.data.transforms.transform"], [305, "module-neural_compressor.experimental.distillation"], [306, "module-neural_compressor.experimental.export"], [307, "module-neural_compressor.experimental.export.qlinear2qdq"], [308, "module-neural_compressor.experimental.export.tf2onnx"], [309, "module-neural_compressor.experimental.export.torch2onnx"], [310, "module-neural_compressor.experimental.graph_optimization"], [311, "module-neural_compressor.experimental"], [312, "module-neural_compressor.experimental.metric.bleu"], [313, "module-neural_compressor.experimental.metric.bleu_util"], [314, "module-neural_compressor.experimental.metric.coco_label_map"], [315, "module-neural_compressor.experimental.metric.coco_tools"], [316, "module-neural_compressor.experimental.metric.evaluate_squad"], [317, "module-neural_compressor.experimental.metric.f1"], [318, "module-neural_compressor.experimental.metric"], [319, "module-neural_compressor.experimental.metric.metric"], [320, "module-neural_compressor.experimental.mixed_precision"], [321, "module-neural_compressor.experimental.model_conversion"], [322, "module-neural_compressor.experimental.nas.basic_nas"], [323, "module-neural_compressor.experimental.nas.dynas"], [324, "module-neural_compressor.experimental.nas"], [325, "module-neural_compressor.experimental.nas.nas"], [326, "module-neural_compressor.experimental.nas.nas_utils"], [327, "module-neural_compressor.experimental.nas.search_algorithms"], [328, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [329, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [330, "module-neural_compressor.experimental.pruner_legacy"], [331, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [332, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [333, "module-neural_compressor.experimental.pruner_legacy.pruner"], [334, "module-neural_compressor.experimental.pruning"], [335, "module-neural_compressor.experimental.pruning_recipes"], [336, "module-neural_compressor.experimental.pruning_recipes.patterns"], [337, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [338, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [339, "module-neural_compressor.experimental.pruning_v2"], [340, "module-neural_compressor.experimental.pytorch_pruner"], [341, "module-neural_compressor.experimental.pytorch_pruner.logger"], [342, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [343, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [344, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [345, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [346, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [347, "module-neural_compressor.experimental.quantization"], [348, "module-neural_compressor.experimental.scheduler"], [349, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [350, "module-neural_compressor.experimental.strategy.basic"], [351, "module-neural_compressor.experimental.strategy.bayesian"], [352, "module-neural_compressor.experimental.strategy.exhaustive"], [353, "module-neural_compressor.experimental.strategy"], [354, "module-neural_compressor.experimental.strategy.mse"], [355, "module-neural_compressor.experimental.strategy.mse_v2"], [356, "module-neural_compressor.experimental.strategy.random"], [357, "module-neural_compressor.experimental.strategy.strategy"], [358, "module-neural_compressor.experimental.strategy.utils.constant"], [359, "module-neural_compressor.experimental.strategy.utils"], [360, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [361, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [362, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [363, "module-neural_compressor.experimental.strategy.utils.utility"], [364, "module-neural_compressor"], [365, "module-neural_compressor.metric.bleu"], [366, "module-neural_compressor.metric.bleu_util"], [367, "module-neural_compressor.metric.coco_label_map"], [368, "module-neural_compressor.metric.coco_tools"], [369, "module-neural_compressor.metric.evaluate_squad"], [370, "module-neural_compressor.metric.f1"], [371, "module-neural_compressor.metric"], [372, "module-neural_compressor.metric.metric"], [373, "module-neural_compressor.mix_precision"], [374, "module-neural_compressor.model.base_model"], [375, "module-neural_compressor.model"], [376, "module-neural_compressor.model.keras_model"], [377, "module-neural_compressor.model.model"], [378, "module-neural_compressor.model.mxnet_model"], [379, "module-neural_compressor.model.nets_factory"], [380, "module-neural_compressor.model.onnx_model"], [381, "module-neural_compressor.model.tensorflow_model"], [382, "module-neural_compressor.model.torch_model"], [383, "module-neural_compressor.objective"], [384, "module-neural_compressor.onnxrt.algorithms"], [385, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"], [386, "module-neural_compressor.onnxrt.algorithms.layer_wise"], [387, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [388, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [389, "module-neural_compressor.onnxrt.algorithms.smoother"], [390, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [391, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [392, "module-neural_compressor.onnxrt.algorithms.weight_only"], [393, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [394, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [395, "module-neural_compressor.onnxrt"], [396, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [397, "module-neural_compressor.onnxrt.quantization.autotune"], [398, "module-neural_compressor.onnxrt.quantization.calibrate"], [399, "module-neural_compressor.onnxrt.quantization.config"], [400, "module-neural_compressor.onnxrt.quantization"], [401, "module-neural_compressor.onnxrt.quantization.quantize"], [402, "module-neural_compressor.onnxrt.utils"], [403, "module-neural_compressor.onnxrt.utils.onnx_model"], [404, "module-neural_compressor.onnxrt.utils.utility"], [405, "module-neural_compressor.profiling"], [406, "module-neural_compressor.profiling.parser.factory"], [407, "module-neural_compressor.profiling.parser"], [408, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [409, "module-neural_compressor.profiling.parser.onnx_parser"], [410, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [411, "module-neural_compressor.profiling.parser.parser"], [412, "module-neural_compressor.profiling.parser.result"], [413, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [414, "module-neural_compressor.profiling.parser.tensorflow_parser"], [415, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [416, "module-neural_compressor.profiling.profiler.factory"], [417, "module-neural_compressor.profiling.profiler"], [418, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [419, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [420, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [421, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [422, "module-neural_compressor.profiling.profiler.profiler"], [423, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [424, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [425, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [426, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [427, "module-neural_compressor.quantization"], [428, "module-neural_compressor.strategy.auto"], [429, "module-neural_compressor.strategy.auto_mixed_precision"], [430, "module-neural_compressor.strategy.basic"], [431, "module-neural_compressor.strategy.bayesian"], [432, "module-neural_compressor.strategy.conservative"], [433, "module-neural_compressor.strategy.exhaustive"], [434, "module-neural_compressor.strategy.hawq_v2"], [435, "module-neural_compressor.strategy"], [436, "module-neural_compressor.strategy.mse"], [437, "module-neural_compressor.strategy.mse_v2"], [438, "module-neural_compressor.strategy.random"], [439, "module-neural_compressor.strategy.strategy"], [440, "module-neural_compressor.strategy.utils.constant"], [441, "module-neural_compressor.strategy.utils"], [442, "module-neural_compressor.strategy.utils.tuning_sampler"], [443, "module-neural_compressor.strategy.utils.tuning_space"], [444, "module-neural_compressor.strategy.utils.tuning_structs"], [445, "module-neural_compressor.strategy.utils.utility"], [446, "module-neural_compressor.template.api_doc_example"], [447, "module-neural_compressor.template"], [448, "module-neural_compressor.tensorflow.algorithms"], [449, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [450, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [451, "module-neural_compressor.tensorflow.algorithms.smoother"], [452, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [453, "module-neural_compressor.tensorflow.algorithms.static_quant"], [454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [455, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [456, "module-neural_compressor.tensorflow"], [457, "module-neural_compressor.tensorflow.keras"], [458, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [459, "module-neural_compressor.tensorflow.keras.layers.dense"], [460, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [461, "module-neural_compressor.tensorflow.keras.layers"], [462, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [463, "module-neural_compressor.tensorflow.keras.layers.quantizer"], [464, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [465, "module-neural_compressor.tensorflow.keras.quantization.config"], [466, "module-neural_compressor.tensorflow.keras.quantization"], [467, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [468, "module-neural_compressor.tensorflow.quantization.autotune"], [469, "module-neural_compressor.tensorflow.quantization.config"], [470, "module-neural_compressor.tensorflow.quantization"], [471, "module-neural_compressor.tensorflow.quantization.quantize"], [472, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [473, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"], [474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"], [515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"], [524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [529, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [530, "module-neural_compressor.tensorflow.quantization.utils"], [531, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"], [533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"], [534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"], [535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"], [536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"], [537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"], [538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"], [542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [559, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [561, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [562, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [563, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [564, "module-neural_compressor.tensorflow.quantization.utils.utility"], [565, "module-neural_compressor.tensorflow.utils.constants"], [566, "module-neural_compressor.tensorflow.utils.data"], [567, "module-neural_compressor.tensorflow.utils"], [568, "module-neural_compressor.tensorflow.utils.model"], [569, "module-neural_compressor.tensorflow.utils.model_wrappers"], [570, "module-neural_compressor.tensorflow.utils.nets_factory"], [571, "module-neural_compressor.tensorflow.utils.utility"], [572, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [573, "module-neural_compressor.torch.algorithms.habana_fp8"], [574, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [575, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [576, "module-neural_compressor.torch.algorithms"], [577, "module-neural_compressor.torch.algorithms.layer_wise"], [578, "module-neural_compressor.torch.algorithms.layer_wise.load"], [579, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [580, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [581, "module-neural_compressor.torch.algorithms.static_quant"], [582, "module-neural_compressor.torch.algorithms.static_quant.static_quant"], [583, "module-neural_compressor.torch.algorithms.static_quant.utility"], [584, "module-neural_compressor.torch.algorithms.weight_only.awq"], [585, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [586, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"], [587, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"], [588, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"], [589, "module-neural_compressor.torch.algorithms.weight_only.hqq"], [590, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"], [591, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"], [592, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"], [593, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"], [594, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"], [595, "module-neural_compressor.torch.algorithms.weight_only"], [596, "module-neural_compressor.torch.algorithms.weight_only.modules"], [597, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [598, "module-neural_compressor.torch.algorithms.weight_only.teq"], [599, "module-neural_compressor.torch.algorithms.weight_only.utility"], [600, "module-neural_compressor.torch.amp.autocast"], [601, "module-neural_compressor.torch.amp.fp8.functions"], [602, "module-neural_compressor.torch.amp.fp8"], [603, "module-neural_compressor.torch.amp"], [604, "module-neural_compressor.torch"], [605, "module-neural_compressor.torch.quantization.algorithm_entry"], [606, "module-neural_compressor.torch.quantization.autotune"], [607, "module-neural_compressor.torch.quantization.config"], [608, "module-neural_compressor.torch.quantization"], [609, "module-neural_compressor.torch.quantization.modules"], [610, "module-neural_compressor.torch.quantization.quantize"], [611, "module-neural_compressor.torch.utils.auto_accelerator"], [612, "module-neural_compressor.torch.utils.constants"], [613, "module-neural_compressor.torch.utils.environ"], [614, "module-neural_compressor.torch.utils"], [615, "module-neural_compressor.torch.utils.utility"], [616, "module-neural_compressor.training"], [617, "module-neural_compressor.utils.collect_layer_histogram"], [618, "module-neural_compressor.utils.constant"], [619, "module-neural_compressor.utils.create_obj_from_config"], [620, "module-neural_compressor.utils"], [621, "module-neural_compressor.utils.kl_divergence"], [622, "module-neural_compressor.utils.load_huggingface"], [623, "module-neural_compressor.utils.logger"], [624, "module-neural_compressor.utils.neural_insights_utils"], [625, "module-neural_compressor.utils.options"], [626, "module-neural_compressor.utils.pytorch"], [627, "module-neural_compressor.utils.utility"], [628, "module-neural_compressor.utils.weights_details"], [629, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "neural_compressor.adaptor.torch_utils.auto_round": [[149, "module-neural_compressor.adaptor.torch_utils.auto_round"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[150, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[151, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[152, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[154, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[154, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[154, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[155, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[155, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[156, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[156, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[157, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[157, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[158, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[158, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[159, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [579, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [579, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [579, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[164, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[164, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[165, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[165, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[166, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[166, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[167, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[167, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[168, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[168, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[168, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[168, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[169, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[169, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[169, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[170, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[170, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[171, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[171, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "autoround_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.autoround_quantize"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[172, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[172, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[173, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[173, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[174, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[174, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[175, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[176, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[176, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[177, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[177, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[178, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[178, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[179, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[179, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[180, "neural_compressor.common.base_tuning.Evaluator"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[180, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[180, "neural_compressor.common.base_tuning.TuningConfig"]], "neural_compressor.common.base_tuning": [[180, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[181, "module-neural_compressor.common"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[182, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[182, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[182, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[183, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[184, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[185, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[185, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[185, "module-neural_compressor.common.utils.logger"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[186, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "neural_compressor.common.utils.utility": [[186, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[186, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[186, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[186, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[186, "neural_compressor.common.utils.utility.set_workspace"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[187, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[187, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[187, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[187, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[187, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[187, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[187, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[187, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[187, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[188, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[188, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[189, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[190, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[190, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[191, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[191, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[191, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[192, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[193, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[194, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[194, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[194, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[194, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[194, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[194, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[194, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[195, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[195, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[195, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[195, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[195, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[195, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[196, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[197, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[197, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[197, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[198, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[198, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[198, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[199, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[199, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[199, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[200, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[200, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[200, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[200, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[200, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[200, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[200, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[201, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[202, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[202, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[203, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[203, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[204, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[204, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[204, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[205, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[205, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[206, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[206, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[206, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[206, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[207, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[207, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[207, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[207, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[208, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[208, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[208, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[208, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[208, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[209, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[209, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[210, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[210, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[210, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[211, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[211, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[212, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[212, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[212, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[213, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[213, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[213, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[214, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[214, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[215, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[215, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[216, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[216, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[216, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[217, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[217, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[217, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[218, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[218, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[218, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[218, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[218, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[218, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[218, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[219, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[219, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[219, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[219, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[219, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[219, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[219, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[219, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[220, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[220, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[220, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[220, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[220, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[220, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[220, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[221, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[221, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[221, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[221, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[221, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[221, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[221, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[222, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[222, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[223, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[224, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[224, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[225, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[225, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[226, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[226, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[227, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[227, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[228, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[228, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[228, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[228, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[229, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[230, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[230, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[231, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[231, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[231, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[231, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[231, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[231, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[231, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[231, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[231, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[231, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[231, "module-neural_compressor.config"]], "neural_compressor.contrib": [[232, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[233, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[234, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[234, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[235, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[235, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[236, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[236, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[237, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[237, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[237, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[238, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[238, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[238, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[239, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[239, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[239, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[239, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[240, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[241, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[241, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[242, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[242, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[242, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[243, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[243, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[244, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[244, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[244, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[244, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[244, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[245, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[245, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[245, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[245, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[245, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[246, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[246, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[247, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[247, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[247, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[247, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[247, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[248, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[248, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[249, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[249, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[250, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[250, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[250, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[251, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[251, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[251, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[251, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[251, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[251, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[251, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[252, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[253, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[253, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[254, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[254, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[254, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[255, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[255, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[256, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[257, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[258, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[258, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[259, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[259, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[260, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[261, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[261, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[262, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[262, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TRANSFORMS"], [263, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[263, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[263, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[264, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[264, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[265, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[265, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[266, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[266, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[267, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[268, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[268, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[269, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[269, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[269, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[270, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[270, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[271, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[271, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[272, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[272, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[272, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[273, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[273, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[274, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[275, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[276, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[277, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[277, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[278, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[278, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[280, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[281, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[281, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[281, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[282, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[282, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[282, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[282, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[283, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[285, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[285, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[285, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[287, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[287, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[287, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[287, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[287, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[288, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[288, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[288, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[288, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[288, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[289, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[289, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[290, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[290, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[290, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[290, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[290, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[291, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[291, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[292, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[292, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[293, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[293, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[293, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[294, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[294, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[294, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[294, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[294, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[294, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[294, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[295, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[296, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[296, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[297, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[297, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[297, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[298, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[298, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[299, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[300, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[301, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[301, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[302, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[303, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[303, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [304, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[304, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[304, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[305, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[305, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[305, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[305, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[305, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[305, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[306, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[307, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[307, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[307, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[308, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[308, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[308, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[309, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[309, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[309, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[309, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[309, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[309, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[309, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[310, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[310, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[311, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[312, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[312, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[312, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[312, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[312, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[312, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[312, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[312, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[312, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[313, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[313, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[314, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[315, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[315, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[315, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[315, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[315, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[315, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[315, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[315, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[316, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[316, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[316, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[316, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[316, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[317, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[317, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[317, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[317, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[317, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[318, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[319, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[319, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[319, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[319, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[319, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[319, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[319, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[319, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[319, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[319, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[319, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[319, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[319, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[319, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[319, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[319, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[319, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[319, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[319, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[319, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[319, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[319, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[319, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[319, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[319, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[319, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[320, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[320, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[321, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[321, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[322, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[322, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[323, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[323, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[324, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[325, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[325, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[325, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[326, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[326, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[326, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[326, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[327, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[327, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[327, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[327, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[327, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[328, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[328, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[329, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[329, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[330, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[331, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[331, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[332, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[332, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[333, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[333, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[333, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[334, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[334, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[334, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[334, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[334, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[335, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[337, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[337, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[338, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[338, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[339, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[339, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[339, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[339, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[339, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[340, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[341, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[342, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[342, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[343, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[343, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[343, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[343, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[343, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[343, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[343, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[344, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[345, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[345, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[345, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[346, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[346, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[346, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[346, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[346, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[346, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[346, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[347, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[347, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[348, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[348, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[349, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[349, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[350, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[350, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[351, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[351, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[351, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[351, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[351, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[352, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[352, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[353, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[354, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[354, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[355, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[355, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[356, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[356, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[357, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[357, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[357, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[358, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[359, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[360, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[361, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[361, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[361, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[361, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[361, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[361, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[361, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[362, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[362, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[363, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[363, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[363, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[363, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[363, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[364, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[365, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[365, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[365, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[365, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[365, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[365, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[365, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[365, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[365, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[366, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[366, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[367, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[368, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[368, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[368, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[368, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[368, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[368, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[368, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[368, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[369, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[369, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[369, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[369, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[369, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[370, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[370, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[370, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[370, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[370, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[371, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[372, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[372, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[372, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[372, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[372, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[372, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[372, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[372, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[372, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[372, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[372, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[372, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[372, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[372, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[372, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[372, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[372, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[372, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[372, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[372, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[372, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[372, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[372, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[372, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[372, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[372, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[373, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[373, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[374, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[374, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[375, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[376, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[376, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[377, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[377, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[377, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[378, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[378, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[379, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[379, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[380, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[380, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[381, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[381, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[382, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[382, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[382, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[382, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[382, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[383, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[383, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[383, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[383, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[383, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[383, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[383, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[383, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[383, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[384, "module-neural_compressor.onnxrt.algorithms"]], "layer_wise_quant() (in module neural_compressor.onnxrt.algorithms.layer_wise.core)": [[385, "neural_compressor.onnxrt.algorithms.layer_wise.core.layer_wise_quant"]], "neural_compressor.onnxrt.algorithms.layer_wise.core": [[385, "module-neural_compressor.onnxrt.algorithms.layer_wise.core"]], "neural_compressor.onnxrt.algorithms.layer_wise": [[386, "module-neural_compressor.onnxrt.algorithms.layer_wise"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[387, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[387, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[388, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[388, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[389, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[391, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[391, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[392, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[393, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[393, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[393, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[394, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[394, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[395, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[396, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[396, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[396, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[396, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[396, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "autotune() (in module neural_compressor.onnxrt.quantization.autotune)": [[397, "neural_compressor.onnxrt.quantization.autotune.autotune"]], "neural_compressor.onnxrt.quantization.autotune": [[397, "module-neural_compressor.onnxrt.quantization.autotune"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[398, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[398, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[399, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[399, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[400, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[401, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[402, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[403, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[403, "module-neural_compressor.onnxrt.utils.onnx_model"]], "check_model_with_infer_shapes() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.check_model_with_infer_shapes"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[404, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[404, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[405, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[406, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[406, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[407, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[408, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[408, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[409, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[410, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[410, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[411, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[411, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[412, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[412, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[413, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[413, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[414, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[415, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[415, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[416, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[416, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[417, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[418, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[418, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[419, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[420, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[420, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[421, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[421, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[422, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[422, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[423, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[423, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[424, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[425, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[425, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[426, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[426, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[426, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[426, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[427, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[427, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[428, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[428, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[429, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[429, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[430, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[430, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[431, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[431, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[431, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[431, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[431, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[432, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[432, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[433, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[433, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[434, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[434, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[435, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[436, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[436, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[437, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[437, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[438, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[438, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[439, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[439, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[439, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[439, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[440, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[441, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[442, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[442, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[443, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[443, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[443, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[443, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[443, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[443, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[443, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[444, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[444, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[445, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[445, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[446, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[446, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[446, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[446, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[446, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[447, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[448, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[449, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[449, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[449, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[450, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[450, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[451, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[452, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[452, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[452, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[453, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[454, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[454, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[454, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[455, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[456, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[457, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[458, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[459, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[460, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[461, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[462, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.quantizer": [[463, "module-neural_compressor.tensorflow.keras.layers.quantizer"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[464, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[465, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[465, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[465, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[465, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[466, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[467, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[467, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[468, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "neural_compressor.tensorflow.quantization.autotune": [[468, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[469, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[469, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[469, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[469, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[469, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[470, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[471, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[471, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[471, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[472, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib)": [[473, "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[474, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[475, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[481, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[482, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[485, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[486, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[497, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[499, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[499, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[500, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[501, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[501, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[502, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[502, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[503, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[503, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[504, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[504, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[505, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[505, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[506, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[506, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[507, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[507, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[508, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[508, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[509, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[509, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[510, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[510, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[511, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[512, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[512, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[513, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[513, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib)": [[514, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib": [[514, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[515, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[515, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[516, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[516, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[517, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[517, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[518, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[518, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[519, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[520, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[520, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[521, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[521, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[522, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[522, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert)": [[523, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert": [[523, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[524, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[524, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[525, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[526, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[526, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[527, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[527, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[528, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[528, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[529, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[529, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[529, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[530, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[531, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fakequantize (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[532, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize)": [[532, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize": [[532, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat": [[533, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config)": [[534, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config": [[534, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[535, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper": [[535, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper)": [[535, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers": [[536, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[537, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer": [[537, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[538, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[538, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[539, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[539, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[540, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[540, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[541, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper)": [[541, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper": [[541, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[542, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[542, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[543, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[543, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[544, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[544, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[545, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[545, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[546, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[546, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[547, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[547, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[548, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[548, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[549, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[550, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[550, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[551, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[551, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[551, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[552, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[552, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[553, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[553, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[554, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[554, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[555, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[555, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[556, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[556, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[557, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[557, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[558, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[558, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[559, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[559, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[560, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[560, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[561, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[562, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[562, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[563, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[563, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[564, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[564, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[565, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[566, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[566, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[566, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "neural_compressor.tensorflow.utils.data": [[566, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[567, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[568, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[568, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[569, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[569, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[570, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[570, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[571, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.singleton"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[571, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[572, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[573, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[574, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[575, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[576, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[577, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[578, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[578, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[579, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[580, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[580, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "neural_compressor.torch.algorithms.static_quant": [[581, "module-neural_compressor.torch.algorithms.static_quant"]], "neural_compressor.torch.algorithms.static_quant.static_quant": [[582, "module-neural_compressor.torch.algorithms.static_quant.static_quant"]], "static_quantize() (in module neural_compressor.torch.algorithms.static_quant.static_quant)": [[582, "neural_compressor.torch.algorithms.static_quant.static_quant.static_quantize"]], "statistics (class in neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.Statistics"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.TransformerBasedModelBlockPatternDetector"]], "dump_model_op_stats() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.dump_model_op_stats"]], "get_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.get_depth"]], "get_dict_at_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.get_element_under_depth"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_from_cfgs"]], "get_quantizable_ops_recursively() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.get_quantizable_ops_recursively"]], "neural_compressor.torch.algorithms.static_quant.utility": [[583, "module-neural_compressor.torch.algorithms.static_quant.utility"]], "paser_cfgs() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.paser_cfgs"]], "simple_inference() (in module neural_compressor.torch.algorithms.static_quant.utility)": [[583, "neural_compressor.torch.algorithms.static_quant.utility.simple_inference"]], "actawareweightquant (class in neural_compressor.torch.algorithms.weight_only.awq)": [[584, "neural_compressor.torch.algorithms.weight_only.awq.ActAwareWeightQuant"]], "awq_quantize() (in module neural_compressor.torch.algorithms.weight_only.awq)": [[584, "neural_compressor.torch.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.awq": [[584, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.gptq_quantize"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[585, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[585, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.hqq.bitpack": [[586, "module-neural_compressor.torch.algorithms.weight_only.hqq.bitpack"]], "hqqmoduleconfig (class in neural_compressor.torch.algorithms.weight_only.hqq.config)": [[587, "neural_compressor.torch.algorithms.weight_only.hqq.config.HQQModuleConfig"]], "neural_compressor.torch.algorithms.weight_only.hqq.config": [[587, "module-neural_compressor.torch.algorithms.weight_only.hqq.config"]], "neural_compressor.torch.algorithms.weight_only.hqq.core": [[588, "module-neural_compressor.torch.algorithms.weight_only.hqq.core"]], "neural_compressor.torch.algorithms.weight_only.hqq": [[589, "module-neural_compressor.torch.algorithms.weight_only.hqq"]], "neural_compressor.torch.algorithms.weight_only.hqq.optimizer": [[590, "module-neural_compressor.torch.algorithms.weight_only.hqq.optimizer"]], "neural_compressor.torch.algorithms.weight_only.hqq.qtensor": [[591, "module-neural_compressor.torch.algorithms.weight_only.hqq.qtensor"]], "neural_compressor.torch.algorithms.weight_only.hqq.quant_api": [[592, "module-neural_compressor.torch.algorithms.weight_only.hqq.quant_api"]], "neural_compressor.torch.algorithms.weight_only.hqq.quantizer": [[593, "module-neural_compressor.torch.algorithms.weight_only.hqq.quantizer"]], "dump_elapsed_time() (in module neural_compressor.torch.algorithms.weight_only.hqq.utility)": [[594, "neural_compressor.torch.algorithms.weight_only.hqq.utility.dump_elapsed_time"]], "neural_compressor.torch.algorithms.weight_only.hqq.utility": [[594, "module-neural_compressor.torch.algorithms.weight_only.hqq.utility"]], "neural_compressor.torch.algorithms.weight_only": [[595, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[596, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[596, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[596, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[596, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[597, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[597, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "tequantizer (class in neural_compressor.torch.algorithms.weight_only.teq)": [[598, "neural_compressor.torch.algorithms.weight_only.teq.TEQuantizer"]], "neural_compressor.torch.algorithms.weight_only.teq": [[598, "module-neural_compressor.torch.algorithms.weight_only.teq"]], "teq_quantize() (in module neural_compressor.torch.algorithms.weight_only.teq)": [[598, "neural_compressor.torch.algorithms.weight_only.teq.teq_quantize"]], "calibration() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.calibration"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_hidden_states() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.get_hidden_states"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[599, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[599, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[600, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[600, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[601, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[602, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[603, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[604, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[605, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[605, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[606, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[606, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[607, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[607, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[607, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[607, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[607, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[607, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[608, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[609, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[610, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[610, "neural_compressor.torch.quantization.quantize.quantize"]], "auto_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[611, "neural_compressor.torch.utils.auto_accelerator.Auto_Accelerator"]], "cpu_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[611, "neural_compressor.torch.utils.auto_accelerator.CPU_Accelerator"]], "cuda_accelerator (class in neural_compressor.torch.utils.auto_accelerator)": [[611, "neural_compressor.torch.utils.auto_accelerator.CUDA_Accelerator"]], "neural_compressor.torch.utils.auto_accelerator": [[611, "module-neural_compressor.torch.utils.auto_accelerator"]], "register_accelerator() (in module neural_compressor.torch.utils.auto_accelerator)": [[611, "neural_compressor.torch.utils.auto_accelerator.register_accelerator"]], "neural_compressor.torch.utils.constants": [[612, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[613, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[614, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[615, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[615, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[615, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[615, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[616, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[616, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[616, "neural_compressor.training.fit"]], "neural_compressor.training": [[616, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[616, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[617, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[617, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[618, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[619, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[619, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[620, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[621, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[621, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[622, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[622, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[622, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[622, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[623, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[623, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[624, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[624, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[624, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[624, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[624, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[625, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[625, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[626, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[626, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[626, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[626, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[626, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[627, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[627, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[628, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[628, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[628, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[629, "module-neural_compressor.version"]]}})