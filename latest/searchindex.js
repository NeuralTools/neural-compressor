Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/logger/index", "autoapi/neural_compressor/common/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/logger/index.rst", "autoapi/neural_compressor/common/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only_algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 164, 168, 169, 190, 200, 203, 208, 214, 330, 371, 413, 434, 495, 536, 538, 544, 547, 550], "mask": [0, 190, 196, 198, 201, 203, 207, 208, 234, 277, 303, 332, 356, 538, 553], "adaptor_registri": [1, 463], "cl": [1, 161, 170, 181, 183, 187, 188, 196, 201, 210, 211, 212, 236, 243, 251, 253, 258, 279, 286, 292, 314, 321, 325, 330, 332, 334, 345, 360, 371, 406, 453], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 183, 184, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 379, 380, 382, 383, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 417, 425, 427, 429, 430, 432, 434, 435, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 462, 497, 499, 512, 514, 516, 517, 519, 539], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 151, 160, 162, 168, 170, 175, 176, 180, 181, 183, 187, 188, 190, 194, 196, 198, 199, 201, 202, 203, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 234, 235, 236, 237, 238, 242, 243, 251, 253, 256, 258, 261, 265, 266, 267, 277, 278, 279, 280, 281, 285, 286, 292, 293, 298, 300, 301, 302, 304, 305, 307, 309, 310, 311, 313, 314, 316, 317, 319, 320, 321, 322, 325, 327, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 349, 351, 353, 354, 355, 357, 358, 360, 361, 369, 371, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 410, 412, 413, 417, 425, 429, 430, 435, 440, 441, 442, 443, 445, 447, 448, 452, 453, 454, 457, 459, 460, 463, 464, 465, 466, 468, 472, 475, 478, 480, 481, 482, 483, 485, 486, 488, 490, 492, 494, 495, 496, 498, 499, 500, 501, 504, 505, 507, 510, 512, 513, 514, 516, 517, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "decor": [1, 16, 34, 67, 68, 70, 148, 170, 176, 183, 187, 188, 196, 201, 210, 212, 251, 258, 292, 307, 314, 321, 325, 330, 332, 334, 345, 348, 360, 371, 406, 430, 441, 453, 459, 460, 463, 550], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 151, 155, 160, 162, 168, 169, 175, 181, 183, 187, 188, 190, 194, 196, 201, 205, 206, 210, 212, 213, 215, 216, 218, 219, 222, 223, 232, 233, 234, 235, 236, 237, 238, 241, 250, 251, 252, 253, 258, 265, 266, 275, 276, 277, 278, 279, 280, 281, 284, 291, 292, 296, 297, 298, 300, 301, 303, 307, 308, 309, 314, 321, 322, 325, 327, 330, 332, 333, 334, 335, 336, 339, 342, 345, 348, 349, 353, 354, 356, 360, 371, 388, 393, 394, 398, 401, 403, 406, 410, 412, 413, 430, 434, 441, 442, 443, 444, 445, 446, 448, 453, 457, 458, 459, 460, 463, 464, 480, 481, 483, 485, 486, 487, 488, 490, 492, 494, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 510, 512, 514, 516, 517, 519, 521, 522, 523, 524, 525, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553], "regist": [1, 16, 34, 158, 160, 170, 176, 181, 183, 187, 188, 190, 191, 196, 197, 201, 204, 210, 211, 212, 213, 236, 243, 251, 253, 258, 279, 286, 292, 307, 314, 321, 325, 330, 332, 334, 345, 348, 360, 371, 406, 412, 427, 430, 441, 450, 460, 463, 483, 488, 498, 499, 520, 536, 547, 550], "all": [1, 13, 16, 34, 44, 45, 63, 97, 154, 160, 161, 168, 169, 170, 172, 175, 176, 180, 183, 188, 191, 196, 204, 214, 218, 219, 224, 225, 232, 236, 243, 251, 252, 258, 261, 267, 275, 279, 286, 292, 297, 300, 303, 305, 307, 314, 321, 325, 326, 330, 336, 345, 348, 353, 356, 358, 360, 362, 371, 406, 412, 427, 432, 445, 453, 457, 458, 462, 463, 464, 465, 482, 483, 488, 492, 496, 499, 502, 510, 513, 514, 517, 518, 519, 520, 521, 524, 525, 527, 528, 532, 533, 534, 537, 538, 539, 541, 543, 544, 547, 549, 550], "subclass": [1, 16, 34, 170, 183, 187, 188, 196, 201, 210, 212, 229, 233, 236, 243, 251, 258, 272, 276, 279, 286, 292, 307, 314, 321, 325, 330, 332, 334, 345, 348, 360, 371, 406, 463], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 151, 153, 154, 155, 160, 161, 165, 166, 168, 169, 170, 175, 176, 178, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 233, 234, 236, 243, 247, 251, 253, 258, 265, 266, 276, 277, 279, 286, 289, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 327, 330, 331, 332, 333, 334, 335, 339, 345, 349, 351, 353, 354, 356, 357, 358, 360, 361, 365, 369, 371, 388, 393, 394, 398, 406, 410, 412, 413, 425, 429, 430, 432, 434, 440, 441, 442, 445, 448, 449, 450, 452, 453, 459, 464, 482, 483, 486, 488, 495, 498, 499, 513, 519, 520, 521, 522, 527, 532, 533, 538, 541, 542, 544, 545, 546, 547, 549, 550, 552], "framework_specific_info": [1, 3, 11, 14, 45, 47, 417, 463], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 151, 155, 158, 164, 168, 170, 176, 180, 187, 188, 189, 190, 191, 197, 204, 211, 213, 219, 224, 227, 232, 234, 236, 243, 251, 261, 267, 270, 275, 277, 279, 286, 292, 307, 313, 315, 321, 322, 325, 327, 332, 342, 345, 349, 360, 362, 369, 370, 371, 403, 406, 410, 460, 462, 463, 464, 465, 483, 487, 488, 492, 499, 500, 507, 508, 510, 519, 522, 527, 530, 533, 534, 538, 539, 541, 544, 546, 547, 548, 550, 553], "framework": [1, 3, 11, 13, 14, 45, 151, 175, 176, 181, 183, 191, 197, 201, 204, 208, 209, 210, 220, 221, 225, 226, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 248, 251, 253, 254, 258, 263, 264, 268, 269, 271, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 290, 292, 298, 307, 308, 335, 343, 349, 360, 361, 362, 363, 365, 404, 410, 417, 427, 445, 462, 463, 465, 481, 485, 488, 489, 493, 494, 495, 496, 498, 499, 500, 521, 522, 538, 539, 541, 545, 548, 549, 550, 551, 552, 553], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 149, 154, 157, 159, 161, 165, 169, 173, 181, 184, 192, 194, 195, 196, 200, 205, 214, 218, 219, 253, 260, 330, 331, 417, 432, 434, 443, 445, 453, 462, 463, 464, 465, 487, 495, 522, 538, 544, 545, 551], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 153, 155, 156, 157, 166, 176, 182, 189, 191, 218, 219, 260, 299, 301, 331, 341, 352, 354, 386, 391, 402, 427, 437, 464, 465, 466, 481, 488, 499, 502, 522, 538, 541, 547, 550, 551], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 194, 195, 200, 218, 219, 247, 289, 330, 388, 393, 425, 459, 480, 482, 485, 490, 519, 525, 538, 541, 544, 547, 549, 550], "activ": [2, 17, 29, 44, 141, 152, 168, 169, 184, 218, 219, 260, 349, 410, 412, 463, 464, 465, 481, 485, 487, 492, 499, 520, 521, 524, 532, 533, 534, 540, 541, 544, 547, 548, 552], "argmax": [2, 17, 29], "attent": [2, 17, 29, 164, 192, 194, 205, 218, 219, 234, 277, 457, 486, 538], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 173, 218, 219, 459, 464, 465, 499, 538, 540, 541, 550], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 218, 219, 330], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 218, 219], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 200, 218, 219, 330, 492, 522, 544, 550], "maxpool": [2, 17, 29, 129, 138, 492], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 153, 155, 166, 168, 173, 194, 218, 219, 297, 342, 349, 350, 388, 393, 399, 401, 403, 410, 411, 412, 425, 441, 447, 453, 463, 464, 465, 485, 492, 499, 500, 523, 524, 538, 541, 543, 545, 547, 548, 550, 552], "pad": [2, 17, 29, 44, 71, 72, 234, 251, 277, 292, 483, 544, 549], "pool": [2, 17, 29, 529], "reduc": [2, 17, 29, 218, 219, 463, 481, 487, 499, 500, 519, 520, 538, 539, 541, 542, 543, 544, 547, 550, 552], "resiz": [2, 17, 29, 234, 235, 247, 251, 277, 278, 289, 292, 483, 549], "split": [2, 17, 29, 43, 82, 149, 169, 250, 251, 291, 292, 434, 459, 542, 544, 547, 549], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 168, 169, 175, 218, 219, 222, 223, 265, 266, 298, 335, 394, 425, 429, 440, 447, 463, 465, 483, 494, 495, 538, 541, 544, 550, 551, 552], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 152, 153, 154, 155, 156, 157, 161, 162, 163, 165, 167, 168, 169, 173, 175, 180, 218, 219, 222, 223, 247, 254, 261, 265, 266, 289, 297, 298, 299, 309, 336, 342, 348, 352, 399, 401, 403, 412, 425, 432, 434, 435, 442, 443, 447, 448, 452, 453, 463, 470, 482, 483, 488, 489, 492, 494, 495, 498, 501, 502, 507, 509, 510, 513, 526, 528, 529, 531, 537, 539, 545, 548, 549, 550, 551, 552], "smooth_quant": [2, 17, 159, 168, 172, 218, 219, 352, 541, 547], "weight_onli": [2, 17, 219, 452, 542, 544], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 153, 218, 219, 349, 410, 463, 464, 492, 499, 504, 509, 513, 519, 543, 550, 553], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 154, 168, 175, 194, 214, 222, 223, 224, 233, 236, 237, 238, 239, 251, 265, 266, 267, 276, 279, 280, 281, 282, 292, 300, 308, 339, 353, 361, 389, 394, 398, 413, 427, 432, 437, 442, 458, 459, 463, 465, 482, 486, 498, 499, 500, 502, 507, 512, 514, 516, 517, 519, 521, 522, 536, 538, 539, 541, 543, 544, 547, 548, 549, 550], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 169, 174, 175, 218, 219, 247, 289, 295, 296, 297, 349, 351, 410, 412, 427, 434, 452, 453, 458, 459, 462, 463, 464, 465, 480, 483, 487, 492, 499, 500, 504, 507, 509, 510, 513, 519, 522, 524, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 552], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 173, 218, 219, 230, 273, 295, 296, 297, 361, 368, 388, 451, 458, 462, 463, 464, 466, 482, 485, 489, 490, 492, 493, 495, 500, 501, 504, 509, 510, 522, 539, 540, 544, 545, 547, 550], "qdq": [2, 42, 87, 111, 112, 113, 142, 168, 169, 218, 219, 295, 296, 297, 434, 463, 485, 490, 495, 509, 510, 541, 545, 547], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 166, 219, 309, 369, 487, 488, 495, 499, 541], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 255, 299, 352, 542, 547], "layer_wise_qu": [2, 156, 219, 542], "modified_pickl": [2, 156, 157], "torch_load": [2, 156, 157], "bf16_convert": [2, 52, 87, 111, 156], "hawq_metr": [2, 156], "model_wrapp": [2, 15, 156], "pattern_detector": [2, 156], "symbolic_trac": [2, 156], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 181, 183, 213, 218, 219, 233, 234, 235, 236, 239, 241, 243, 251, 258, 276, 277, 278, 279, 282, 284, 286, 292, 296, 297, 298, 301, 303, 307, 308, 309, 335, 343, 354, 356, 360, 361, 369, 387, 388, 392, 393, 394, 404, 453, 458, 460, 462, 463, 464, 481, 482, 485, 486, 487, 489, 492, 493, 495, 496, 499, 500, 501, 509, 510, 521, 524, 538, 539, 540, 546, 547, 550, 552], "kerasadaptor": [3, 417], "kerasqueri": [3, 417], "local_config_fil": [3, 11, 14, 45, 47, 417], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 165, 167, 168, 169, 175, 176, 180, 181, 188, 190, 191, 192, 194, 198, 210, 214, 215, 216, 218, 219, 222, 223, 224, 226, 232, 233, 234, 235, 236, 237, 238, 239, 241, 247, 251, 252, 253, 254, 261, 265, 266, 267, 269, 275, 276, 277, 278, 279, 280, 281, 282, 284, 289, 292, 293, 296, 297, 298, 303, 307, 308, 309, 310, 313, 322, 327, 331, 335, 339, 342, 343, 345, 349, 356, 360, 361, 371, 387, 392, 393, 394, 395, 398, 399, 403, 404, 406, 410, 413, 417, 425, 427, 429, 430, 432, 437, 439, 440, 442, 443, 445, 448, 450, 452, 453, 463, 464, 482, 483, 498, 522, 541, 544, 548, 549, 550], "defin": [3, 11, 14, 45, 46, 86, 151, 155, 187, 188, 194, 196, 201, 202, 203, 208, 209, 210, 211, 212, 218, 219, 222, 223, 265, 266, 310, 311, 313, 314, 315, 322, 327, 330, 331, 332, 334, 361, 394, 427, 437, 442, 452, 457, 460, 463, 464, 482, 483, 486, 487, 492, 495, 498, 499, 520, 537, 538, 541, 544, 546, 547, 548, 550, 552], "queri": [3, 11, 13, 14, 45, 47, 148, 168, 194, 205, 218, 219, 417, 464, 465, 529, 541], "interfac": [3, 11, 14, 45, 46, 86, 113, 215, 298, 322, 327, 335, 336, 445, 495, 499, 510, 528, 541, 545], "each": [3, 11, 14, 45, 46, 141, 148, 155, 160, 168, 169, 214, 218, 219, 232, 236, 239, 247, 251, 275, 279, 282, 289, 292, 301, 303, 304, 305, 342, 354, 356, 357, 358, 403, 434, 453, 458, 463, 464, 465, 483, 485, 486, 487, 492, 499, 504, 510, 513, 519, 527, 529, 536, 538, 542, 544, 546, 547, 548, 549, 550, 551], "adapt": [3, 11, 14, 45, 46, 149, 457, 462, 464, 483, 510, 539], "should": [3, 11, 14, 45, 46, 55, 115, 116, 160, 180, 192, 194, 205, 218, 219, 222, 223, 232, 234, 236, 251, 256, 265, 266, 275, 277, 279, 292, 297, 301, 354, 360, 361, 394, 413, 442, 453, 459, 460, 463, 464, 465, 483, 486, 488, 498, 499, 505, 514, 517, 519, 521, 522, 536, 538, 541, 544, 549, 550, 552], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 151, 152, 160, 222, 223, 229, 232, 233, 234, 236, 265, 266, 272, 275, 276, 277, 279, 300, 353, 361, 371, 394, 401, 442, 465, 482, 483, 498, 499, 510, 520, 538, 541, 544, 545, 548, 550, 552], "inherit": [3, 11, 14, 45, 46, 180, 181, 206, 207, 212, 218, 231, 251, 253, 261, 274, 292, 332, 334, 460, 463, 464, 483], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 151, 169, 175, 176, 183, 214, 218, 219, 234, 235, 236, 237, 241, 243, 258, 277, 278, 279, 280, 284, 286, 316, 317, 319, 320, 321, 360, 394, 434, 450, 457, 460, 463, 464, 481, 482, 485, 486, 492, 494, 498, 499, 500, 501, 502, 506, 507, 509, 513, 519, 521, 527, 536, 538, 540, 544, 550, 552], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 173, 183, 218, 219, 220, 221, 225, 226, 230, 234, 235, 237, 238, 239, 240, 241, 245, 248, 251, 257, 258, 263, 264, 268, 269, 271, 273, 277, 278, 280, 281, 282, 283, 284, 288, 290, 292, 308, 343, 361, 362, 363, 365, 404, 427, 437, 459, 465, 485, 488, 494, 495, 499, 500, 508, 527, 532, 533, 534, 540, 544, 549, 550, 552], "own": [3, 11, 14, 45, 46, 74, 160, 232, 251, 275, 292, 371, 460, 464, 482, 483, 495, 498, 521, 525, 536, 544, 546, 551], "mxnetadaptor": 11, "do": [11, 14, 151, 154, 180, 210, 218, 219, 233, 234, 276, 277, 293, 297, 300, 303, 333, 353, 356, 432, 452, 457, 464, 483, 488, 492, 495, 498, 499, 514, 517, 538, 543, 545, 547, 550], "inspect": [11, 14, 545, 548], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 151, 155, 160, 161, 168, 169, 190, 191, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 219, 251, 292, 295, 297, 330, 332, 342, 369, 403, 434, 448, 452, 453, 459, 465, 482, 483, 485, 538, 541, 545, 548, 549, 550], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 151, 153, 154, 155, 160, 168, 169, 170, 175, 183, 187, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 233, 252, 258, 265, 266, 276, 295, 297, 302, 303, 304, 305, 307, 310, 313, 314, 315, 322, 325, 327, 330, 331, 332, 333, 334, 339, 342, 348, 351, 355, 356, 357, 358, 360, 361, 369, 394, 409, 412, 413, 425, 427, 430, 432, 434, 435, 442, 443, 445, 452, 453, 459, 464, 490, 498, 538, 540, 541, 547, 548, 550], "configur": [11, 13, 14, 45, 118, 149, 153, 168, 169, 175, 176, 214, 215, 218, 219, 222, 223, 225, 236, 239, 252, 257, 265, 266, 279, 282, 293, 297, 298, 309, 310, 311, 313, 322, 327, 331, 335, 336, 342, 360, 361, 371, 394, 403, 412, 425, 429, 434, 440, 442, 444, 445, 451, 452, 459, 460, 463, 464, 483, 485, 499, 506, 520, 527, 532, 533, 534, 536, 538, 541, 544, 545, 549, 550, 553], "mxnetqueri": 11, "mxnet": [12, 13, 16, 219, 229, 233, 236, 239, 243, 251, 272, 276, 279, 282, 286, 292, 298, 307, 335, 360, 361, 366, 394, 458, 462, 463, 464, 481, 482, 489, 492, 495, 496, 499, 500, 501, 540, 550, 552], "init": [12, 17, 42, 172, 182, 191, 193, 483, 498, 550], "optyp": [13, 218, 219, 295, 464], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 153, 154, 155, 160, 168, 169, 170, 181, 183, 187, 188, 194, 195, 196, 201, 210, 211, 212, 214, 216, 218, 219, 232, 234, 236, 243, 251, 253, 258, 275, 277, 279, 286, 292, 297, 300, 301, 303, 307, 314, 321, 325, 330, 332, 334, 339, 345, 349, 351, 353, 354, 356, 360, 369, 371, 398, 399, 406, 410, 412, 413, 425, 429, 430, 432, 434, 441, 452, 453, 463, 464, 483, 485, 488, 490, 492, 495, 499, 500, 520, 522, 527, 528, 532, 533, 541, 542, 544, 546, 549, 550, 551, 552], "isiter": 13, "obj": [13, 105, 191, 214, 233, 276, 293, 298, 309, 310, 311, 313, 322, 327, 331, 335, 361, 371, 394, 442, 445, 453], "bool": [13, 42, 43, 44, 141, 148, 149, 151, 154, 160, 166, 168, 169, 196, 218, 219, 234, 236, 247, 251, 277, 279, 289, 292, 297, 301, 307, 330, 348, 354, 360, 409, 413, 427, 432, 434, 437, 448, 452, 453, 482, 483, 498, 530, 540, 549], "check": [13, 44, 67, 68, 105, 148, 149, 168, 169, 214, 225, 236, 279, 295, 331, 430, 452, 453, 462, 485, 488, 496, 503, 505, 507, 514, 517, 518, 522, 525, 528, 529, 545], "whether": [13, 43, 44, 105, 116, 148, 149, 151, 154, 160, 168, 169, 196, 218, 219, 232, 234, 247, 251, 275, 277, 289, 292, 301, 303, 307, 330, 354, 356, 360, 432, 434, 445, 448, 452, 453, 463, 483, 498, 541, 544, 547, 549], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 151, 153, 155, 158, 160, 166, 168, 175, 180, 190, 191, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 234, 235, 236, 251, 252, 254, 265, 266, 267, 277, 278, 279, 292, 293, 298, 303, 311, 313, 316, 317, 319, 320, 321, 322, 327, 330, 331, 332, 333, 334, 335, 339, 352, 356, 360, 361, 369, 370, 388, 393, 394, 398, 412, 430, 441, 442, 445, 452, 453, 459, 460, 464, 470, 480, 482, 483, 491, 498, 499, 501, 537, 538, 540, 541, 549, 550, 551, 553], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 151, 154, 155, 158, 160, 162, 166, 168, 169, 174, 175, 180, 183, 184, 190, 194, 195, 201, 206, 207, 208, 209, 210, 211, 213, 214, 218, 219, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 241, 243, 247, 251, 252, 254, 258, 260, 261, 265, 266, 267, 275, 276, 277, 278, 279, 280, 281, 284, 286, 289, 292, 300, 303, 305, 307, 309, 314, 322, 327, 331, 332, 336, 343, 353, 356, 358, 360, 361, 371, 377, 378, 382, 394, 399, 404, 412, 413, 430, 432, 442, 448, 452, 453, 457, 458, 459, 460, 463, 464, 465, 466, 468, 472, 475, 478, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 512, 513, 514, 516, 517, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553], "iter": [13, 15, 105, 140, 148, 149, 151, 168, 169, 175, 195, 201, 208, 212, 218, 219, 222, 223, 227, 232, 236, 237, 254, 265, 266, 270, 275, 279, 280, 332, 334, 361, 394, 425, 429, 442, 445, 459, 460, 463, 480, 482, 483, 499, 538, 540, 541, 547, 548, 550, 552], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 151, 153, 154, 155, 160, 166, 168, 169, 170, 175, 181, 183, 187, 188, 191, 194, 196, 197, 201, 204, 210, 211, 212, 214, 216, 222, 223, 236, 243, 247, 251, 252, 253, 258, 265, 266, 279, 286, 289, 292, 297, 300, 301, 303, 304, 305, 307, 313, 314, 321, 325, 330, 331, 332, 334, 339, 345, 349, 351, 353, 354, 356, 357, 358, 360, 361, 365, 369, 371, 388, 393, 394, 398, 406, 410, 412, 413, 425, 427, 429, 430, 432, 434, 437, 440, 441, 442, 445, 450, 452, 453, 459, 460, 464, 465, 482, 483, 488, 498, 501, 532, 533, 534, 536, 538, 541, 544, 547, 548, 550], "true": [13, 43, 44, 85, 113, 146, 148, 149, 154, 160, 169, 175, 187, 218, 219, 232, 234, 236, 237, 250, 251, 252, 275, 277, 279, 280, 291, 292, 297, 301, 307, 325, 348, 354, 360, 371, 394, 409, 413, 427, 432, 434, 437, 445, 448, 452, 453, 464, 482, 483, 485, 488, 492, 498, 499, 502, 505, 506, 521, 522, 523, 524, 530, 532, 540, 541, 542, 544, 547, 548, 549, 550, 552], "els": [13, 148, 151, 169, 219, 232, 275, 371, 434, 450, 507, 544, 548], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 151, 152, 154, 159, 160, 166, 168, 169, 175, 181, 184, 218, 219, 224, 226, 233, 234, 236, 247, 251, 252, 253, 254, 260, 267, 269, 276, 277, 279, 289, 292, 303, 307, 356, 360, 371, 394, 413, 432, 434, 437, 445, 448, 452, 453, 463, 464, 482, 483, 492, 498, 499, 512, 516, 522, 530, 533, 534, 540, 541, 544, 547, 548, 549, 550, 552], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 154, 195, 218, 219, 233, 251, 276, 292, 339, 398, 413, 432, 481, 485, 488, 500, 501, 527, 528, 532, 533, 535, 541, 542, 547, 548, 549, 551], "ensur": [13, 251, 292, 339, 398, 488, 541, 549], "list": [13, 42, 43, 54, 105, 140, 148, 149, 151, 153, 154, 155, 164, 168, 175, 176, 188, 194, 195, 200, 205, 210, 214, 218, 219, 222, 223, 227, 234, 247, 251, 252, 265, 266, 270, 277, 289, 292, 296, 297, 300, 301, 303, 304, 305, 307, 314, 322, 327, 330, 333, 348, 353, 354, 356, 357, 358, 360, 361, 369, 377, 378, 382, 394, 409, 413, 427, 432, 437, 442, 443, 453, 459, 462, 463, 483, 490, 492, 496, 499, 502, 507, 509, 512, 513, 516, 524, 527, 529, 530, 536, 538, 540, 541, 543, 547, 548, 550], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 151, 153, 163, 165, 166, 167, 168, 169, 173, 194, 195, 214, 218, 219, 222, 223, 234, 235, 236, 238, 247, 250, 251, 256, 265, 266, 277, 278, 279, 281, 289, 291, 292, 295, 296, 297, 360, 361, 365, 369, 394, 434, 439, 441, 442, 448, 450, 452, 453, 460, 463, 464, 480, 481, 482, 483, 485, 486, 487, 488, 490, 492, 494, 498, 499, 500, 501, 502, 507, 538, 540, 541, 544, 547, 548, 549, 552], "check_mx_vers": 13, "version": [13, 54, 104, 149, 151, 163, 168, 194, 219, 296, 297, 352, 439, 457, 459, 463, 492, 496, 497, 499, 512, 514, 516, 517, 539, 545, 547, 550, 551], "str": [13, 42, 44, 140, 149, 153, 155, 160, 161, 164, 165, 166, 168, 169, 170, 181, 183, 191, 194, 218, 219, 234, 235, 236, 243, 247, 251, 253, 257, 258, 277, 278, 279, 286, 289, 292, 296, 297, 300, 301, 303, 305, 307, 314, 325, 348, 351, 353, 354, 356, 358, 360, 379, 387, 389, 392, 393, 409, 412, 413, 425, 427, 430, 434, 435, 437, 441, 445, 448, 450, 453, 454, 482, 483, 498, 530, 540, 548, 549], "mx": 13, "__version__": [13, 158], "combine_cap": 13, "current": [13, 70, 104, 165, 169, 190, 191, 194, 197, 201, 204, 218, 219, 309, 316, 317, 319, 320, 321, 330, 332, 339, 343, 398, 404, 434, 453, 459, 460, 463, 465, 481, 488, 492, 499, 502, 506, 519, 527, 536, 538, 541, 544, 547, 550], "new": [13, 16, 44, 148, 149, 165, 175, 224, 236, 251, 252, 267, 279, 292, 331, 371, 427, 437, 458, 462, 464, 488, 499, 500, 513, 519, 520, 521, 522, 528, 529, 532, 533, 538, 539, 541, 544, 545, 546, 549, 551, 552], "combin": [13, 168, 218, 219, 222, 223, 247, 261, 265, 266, 289, 361, 394, 442, 453, 459, 463, 495, 499, 537, 539, 541, 543, 544, 549, 550], "capabl": [13, 47, 349, 410, 464, 465, 480, 492, 499, 500, 510, 521, 526, 538, 540, 541, 550, 552], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 155, 160, 168, 169, 175, 180, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 218, 219, 222, 223, 234, 235, 236, 265, 266, 277, 278, 279, 293, 297, 298, 303, 304, 305, 309, 322, 325, 327, 330, 331, 332, 333, 334, 335, 356, 357, 358, 361, 394, 442, 445, 452, 481, 483, 486, 495, 498, 520, 527, 532, 533, 534, 538, 544, 548, 550, 551], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 151, 154, 168, 194, 212, 214, 219, 331, 334, 339, 398, 432, 448, 483, 488, 499, 538, 548, 549, 550, 552], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 153, 168, 194, 218, 219, 234, 247, 250, 251, 277, 289, 291, 292, 296, 303, 309, 331, 349, 356, 410, 413, 459, 464, 499, 500, 504, 541, 543, 544, 547, 549, 550], "symbol": [13, 43, 153, 166, 168, 300, 353, 361, 394, 459, 501], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 173, 175, 180, 187, 191, 192, 194, 201, 202, 203, 206, 208, 209, 210, 212, 214, 218, 219, 222, 223, 230, 233, 234, 236, 251, 252, 255, 256, 265, 266, 273, 276, 277, 279, 292, 293, 295, 296, 297, 298, 299, 307, 308, 309, 310, 313, 316, 317, 319, 320, 321, 322, 327, 331, 332, 333, 334, 335, 336, 339, 342, 343, 345, 352, 360, 361, 371, 387, 392, 393, 394, 395, 398, 399, 403, 404, 406, 412, 413, 425, 429, 430, 432, 434, 435, 440, 441, 442, 448, 450, 452, 453, 455, 458, 459, 460, 462, 463, 465, 470, 480, 481, 482, 483, 485, 486, 487, 488, 489, 494, 495, 497, 498, 500, 502, 507, 509, 510, 513, 519, 521, 526, 528, 529, 530, 531, 536, 537, 539, 541, 545, 546, 548, 549, 550, 551, 552], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 151, 155, 158, 160, 168, 174, 184, 201, 218, 219, 227, 232, 236, 251, 255, 260, 270, 275, 279, 292, 299, 300, 304, 305, 313, 314, 336, 352, 353, 357, 358, 361, 388, 393, 394, 413, 442, 453, 455, 457, 459, 460, 462, 463, 465, 481, 482, 483, 484, 485, 490, 498, 499, 500, 502, 506, 507, 510, 519, 522, 523, 524, 527, 530, 536, 538, 539, 541, 544, 545, 546, 547, 548, 549, 550], "neural": [13, 155, 175, 180, 183, 196, 197, 198, 199, 210, 218, 219, 246, 247, 248, 251, 252, 255, 258, 261, 289, 290, 292, 294, 299, 306, 307, 309, 322, 327, 330, 333, 335, 336, 341, 347, 352, 359, 360, 361, 365, 372, 394, 401, 402, 408, 450, 455, 458, 463, 464, 465, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 500, 501, 503, 504, 507, 509, 510, 512, 514, 516, 517, 518, 530, 536, 537, 539, 541, 544, 545, 547, 548, 549, 550, 552, 553], "compressor": [13, 175, 180, 183, 198, 199, 210, 218, 219, 246, 247, 248, 251, 252, 255, 258, 261, 289, 290, 292, 294, 299, 306, 307, 309, 330, 333, 335, 336, 341, 347, 352, 359, 360, 361, 365, 372, 394, 402, 408, 450, 455, 458, 460, 463, 464, 465, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 500, 501, 502, 503, 507, 509, 510, 512, 514, 516, 517, 518, 521, 522, 523, 524, 526, 527, 536, 537, 538, 539, 541, 544, 545, 547, 548, 549, 550, 551, 552, 553], "tupl": [13, 105, 148, 168, 188, 219, 222, 223, 247, 251, 265, 266, 289, 292, 297, 348, 361, 394, 409, 435, 442, 452, 464, 483, 498, 499, 541, 549], "symnet": 13, "arg": [13, 54, 105, 149, 168, 178, 234, 235, 236, 277, 278, 279, 330, 339, 398, 413, 432, 435, 448, 449, 483, 488, 499, 508, 538, 541, 544, 547, 548, 549], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 155, 160, 165, 168, 169, 173, 194, 218, 219, 222, 223, 252, 254, 265, 266, 297, 299, 339, 349, 351, 352, 361, 387, 392, 394, 398, 410, 412, 425, 429, 434, 442, 445, 450, 453, 462, 463, 481, 482, 483, 488, 492, 493, 496, 498, 499, 500, 521, 522, 524, 527, 532, 533, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551], "descript": [13, 132, 413, 459, 464, 465, 482, 527, 531, 547], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 166, 168, 173, 459, 547, 548], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 45, 67, 68, 70, 104, 105, 148, 149, 154, 161, 165, 168, 175, 183, 184, 188, 190, 191, 192, 194, 197, 204, 211, 212, 213, 214, 216, 219, 227, 251, 252, 258, 260, 270, 292, 297, 330, 332, 334, 342, 349, 351, 360, 369, 394, 403, 410, 412, 427, 430, 432, 441, 445, 448, 450, 453, 464, 481, 491, 495, 496, 499, 505, 522, 524, 532, 533, 539, 544, 547, 550, 551, 554], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 153, 154, 155, 160, 161, 165, 166, 168, 170, 175, 176, 184, 187, 188, 190, 194, 196, 201, 204, 205, 210, 211, 212, 213, 214, 216, 218, 219, 234, 235, 236, 239, 243, 249, 251, 252, 256, 259, 260, 277, 278, 279, 282, 286, 292, 295, 296, 297, 302, 307, 325, 330, 332, 334, 349, 351, 355, 360, 365, 369, 371, 394, 410, 412, 425, 430, 432, 441, 443, 445, 450, 453, 458, 459, 465, 483, 485, 488, 490, 492, 497, 498, 499, 501, 505, 512, 516, 520, 521, 527, 538, 541, 545, 546, 548, 550, 552, 553], "context": [13, 453, 540, 544], "prepare_model_data": 13, "nc_model": [13, 322, 327], "data_x": 13, "prepar": [13, 44, 168, 459, 462, 483, 488, 493, 521, 532, 533, 534, 538, 541], "dataload": [13, 15, 42, 44, 140, 141, 149, 152, 154, 155, 165, 168, 169, 175, 191, 192, 194, 210, 214, 222, 223, 234, 245, 255, 265, 266, 277, 288, 293, 299, 322, 327, 336, 352, 387, 392, 394, 442, 445, 459, 462, 463, 464, 485, 486, 487, 488, 493, 494, 499, 500, 521, 522, 537, 538, 541, 542, 543, 544, 547, 548, 549, 551, 552], "need": [13, 42, 105, 109, 165, 169, 175, 194, 210, 219, 222, 223, 224, 232, 233, 236, 243, 251, 254, 256, 257, 265, 266, 267, 275, 276, 279, 286, 292, 297, 336, 342, 360, 361, 371, 394, 403, 442, 452, 453, 459, 463, 482, 483, 485, 486, 488, 495, 499, 502, 504, 505, 508, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 524, 526, 530, 532, 538, 540, 541, 542, 543, 544, 545, 547, 549, 550, 552], "run": [13, 140, 148, 160, 169, 175, 201, 214, 218, 219, 222, 223, 233, 250, 252, 265, 266, 276, 291, 331, 332, 339, 361, 394, 398, 442, 463, 480, 488, 491, 492, 499, 502, 504, 506, 507, 508, 510, 512, 513, 514, 516, 517, 519, 527, 528, 529, 530, 532, 533, 534, 539, 541, 544, 545, 546, 548, 550, 552], "loader": [13, 140, 222, 223, 265, 266, 361, 394, 425, 429, 442, 448, 482, 541], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 158, 218, 219, 224, 234, 236, 254, 267, 277, 279, 303, 313, 314, 349, 356, 388, 393, 410, 412, 413, 445, 457, 460, 463, 483, 501, 512, 514, 516, 517, 520, 532, 533, 534, 538, 541, 546, 548, 550, 551], "exampl": [13, 44, 149, 151, 155, 160, 168, 169, 175, 176, 188, 194, 195, 210, 218, 219, 234, 235, 236, 247, 251, 277, 278, 279, 289, 292, 303, 304, 305, 307, 333, 356, 357, 358, 360, 361, 371, 394, 412, 413, 430, 434, 441, 442, 452, 453, 457, 462, 464, 465, 470, 494, 495, 502, 505, 506, 507, 510, 527, 530, 543, 545, 549, 550, 551, 554], "prepare_dataload": 13, "io": [13, 160, 525], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 251, 292, 443, 491, 549], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 154, 159, 160, 162, 168, 169, 191, 194, 195, 210, 214, 218, 219, 432, 437, 448, 464, 482, 486, 499, 500, 502, 505, 510, 519, 538, 540, 542, 544], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 194, 295, 297, 369, 393, 463, 485, 488, 522, 526, 529, 532, 533, 534, 542, 548, 550, 553], "given": [13, 16, 67, 68, 70, 104, 105, 116, 148, 149, 161, 168, 251, 292, 303, 356, 394, 441, 460, 465, 538, 547, 549], "map": [13, 43, 105, 148, 160, 168, 219, 251, 292, 295, 297, 298, 302, 304, 305, 307, 322, 327, 332, 335, 355, 357, 358, 360, 483, 488, 498, 499, 512, 516, 524, 538, 541, 544], "quantize_sym_model": 13, "qconfig": [13, 168, 452, 544, 548], "accord": [13, 122, 168, 175, 218, 219, 234, 235, 236, 251, 277, 278, 279, 292, 342, 401, 403, 445, 460, 463, 483, 488, 522, 527, 532, 533, 534, 538, 543, 547, 549, 550], "run_forward": 13, "b_filter": 13, "collector": [13, 155, 443], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 168, 214, 464, 499, 521, 538, 540, 541, 544, 547, 548], "propag": [13, 100], "filter": [13, 234, 235, 236, 237, 238, 239, 241, 245, 277, 278, 279, 280, 281, 282, 284, 288, 299, 352, 453, 465, 483, 495, 538, 548], "which": [13, 42, 56, 83, 110, 149, 151, 154, 155, 160, 165, 169, 190, 194, 195, 197, 201, 202, 203, 205, 208, 209, 210, 212, 214, 218, 219, 234, 235, 236, 247, 252, 277, 278, 279, 289, 300, 305, 314, 316, 317, 319, 320, 321, 325, 330, 331, 332, 334, 339, 353, 358, 360, 365, 371, 394, 398, 430, 432, 441, 453, 457, 459, 460, 463, 464, 465, 481, 482, 483, 485, 486, 488, 491, 492, 495, 498, 499, 500, 501, 503, 507, 510, 513, 519, 520, 521, 524, 527, 532, 533, 534, 537, 538, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552], "batch": [13, 149, 168, 224, 226, 227, 232, 233, 254, 267, 269, 270, 275, 276, 442, 482, 486, 487, 499, 537, 538, 541, 549, 550, 553], "infer": [13, 43, 105, 140, 168, 169, 194, 298, 335, 369, 371, 394, 442, 463, 464, 481, 486, 487, 499, 500, 519, 536, 538, 539, 541, 544, 547, 548, 550], "collect": [13, 16, 43, 149, 168, 249, 251, 254, 256, 257, 259, 292, 305, 307, 358, 360, 443, 453, 464, 541, 548, 550], "inform": [13, 149, 155, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 222, 223, 254, 256, 257, 265, 266, 330, 332, 333, 334, 336, 360, 453, 457, 458, 461, 462, 463, 464, 465, 466, 468, 472, 475, 478, 481, 486, 492, 499, 501, 514, 517, 520, 521, 524, 525, 527, 528, 532, 533, 538, 543, 544, 545, 548, 552, 553, 554], "dure": [13, 158, 160, 196, 200, 212, 218, 219, 330, 334, 371, 453, 464, 485, 499, 501, 526, 536, 537, 538, 541, 547, 548, 552], "call": [13, 42, 160, 165, 170, 194, 202, 203, 208, 303, 332, 356, 459, 460, 463, 482, 494, 508, 510, 520, 538, 541, 547, 548, 549], "prior": [13, 88, 550], "after": [13, 78, 148, 168, 192, 196, 201, 203, 208, 218, 219, 234, 247, 251, 254, 277, 289, 292, 332, 399, 413, 448, 453, 460, 464, 483, 485, 486, 487, 490, 495, 498, 499, 512, 513, 516, 520, 524, 536, 537, 538, 541, 543, 544, 546, 547, 548, 549, 550], "count": [13, 460, 483, 544], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 152, 164, 168, 169, 192, 218, 219, 233, 234, 235, 247, 251, 276, 277, 278, 289, 292, 296, 297, 301, 303, 307, 314, 354, 356, 360, 379, 388, 393, 412, 413, 425, 429, 434, 437, 448, 453, 482, 483, 498, 499, 530, 540, 544, 549], "make_symbol_block": 13, "gluon": [13, 361, 394, 501], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 153, 168, 425, 463, 465, 550], "quantizable_nod": 13, "strategi": [13, 168, 208, 218, 219, 220, 236, 263, 279, 299, 352, 462, 463, 464, 465, 470, 481, 482, 488, 495, 499, 507, 519, 524, 539, 540, 541, 543, 544, 545, 551, 552], "config": [13, 44, 115, 116, 118, 122, 168, 175, 176, 190, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 222, 223, 234, 265, 266, 277, 316, 317, 319, 320, 321, 322, 327, 330, 331, 332, 333, 334, 349, 350, 352, 361, 388, 393, 410, 411, 412, 413, 417, 425, 435, 442, 445, 452, 453, 460, 462, 464, 465, 470, 480, 482, 485, 486, 487, 488, 490, 493, 495, 498, 499, 500, 501, 521, 522, 537, 538, 540, 541, 543, 544, 546, 548, 550], "tune": [13, 45, 149, 175, 218, 219, 222, 223, 234, 236, 265, 266, 277, 279, 298, 335, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 361, 371, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 425, 442, 453, 463, 464, 481, 482, 483, 485, 488, 495, 497, 499, 500, 519, 523, 526, 528, 529, 536, 538, 539, 543, 545, 546, 548, 552], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 151, 160, 161, 165, 168, 169, 175, 180, 181, 188, 190, 191, 197, 198, 199, 200, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 222, 223, 224, 227, 231, 234, 235, 236, 237, 238, 239, 241, 246, 247, 253, 254, 257, 265, 266, 267, 270, 274, 277, 278, 279, 280, 281, 282, 284, 289, 293, 295, 296, 297, 300, 303, 304, 305, 309, 314, 330, 331, 332, 334, 349, 351, 353, 356, 357, 358, 361, 369, 371, 394, 410, 412, 413, 417, 425, 427, 434, 437, 442, 445, 448, 452, 453, 457, 458, 459, 460, 463, 465, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 493, 495, 498, 500, 501, 502, 506, 507, 508, 510, 520, 522, 524, 525, 529, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 174, 218, 219, 224, 226, 227, 232, 233, 254, 267, 269, 270, 275, 276, 447, 462, 464, 482, 486, 496, 514, 517, 521, 524, 532, 539, 541, 544, 545, 547, 551, 553], "depend": [13, 222, 223, 252, 265, 266, 361, 394, 442, 458, 491, 492, 525, 540, 541, 550], "algorithm": [13, 44, 151, 154, 168, 176, 187, 215, 219, 300, 307, 315, 352, 353, 360, 430, 441, 445, 447, 460, 463, 464, 465, 486, 487, 492, 495, 508, 513, 538, 541, 548, 552], "set": [13, 43, 51, 96, 105, 115, 148, 149, 160, 165, 168, 175, 183, 214, 216, 218, 219, 222, 223, 224, 234, 236, 239, 251, 252, 257, 258, 265, 266, 267, 277, 279, 282, 292, 303, 309, 322, 327, 331, 336, 356, 360, 361, 369, 393, 394, 413, 417, 441, 442, 450, 453, 457, 460, 464, 480, 482, 483, 486, 488, 490, 492, 494, 495, 496, 498, 499, 500, 502, 504, 506, 520, 521, 522, 523, 524, 525, 529, 532, 538, 540, 541, 544, 546, 547, 550, 552], "kl": [13, 16, 218, 219, 443, 447, 464, 465, 481, 492, 499, 550, 552], "minmax": [13, 16, 464, 465, 481, 492, 541, 552], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 159], "calibdata": 13, "threshold": [13, 171, 443, 447, 498], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 165, 173, 181, 183, 191, 197, 204, 208, 209, 218, 219, 222, 223, 233, 234, 236, 243, 247, 251, 253, 254, 255, 258, 265, 266, 276, 277, 279, 286, 289, 292, 299, 307, 309, 314, 330, 332, 336, 343, 349, 352, 360, 361, 365, 371, 394, 404, 410, 413, 442, 445, 447, 448, 453, 455, 462, 464, 499, 502, 507, 510, 513, 519, 526, 527, 530, 539, 543, 546, 550, 551], "amp": [13, 149, 502, 509, 528, 544], "wrap": [13, 105, 116, 149, 181, 253, 303, 356, 459, 488, 514, 517], "dataiterload": 13, "data_it": [13, 194], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 443], "8001": [13, 443, 527, 532, 533, 534], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 170, 171, 173, 174, 310, 313, 364, 366, 368, 369, 370, 463, 464, 465, 496, 501, 512, 514, 516, 517, 520, 539, 550], "up": [13, 100, 205, 251, 292, 331, 488, 489, 492, 495, 510, 514, 517, 519, 538, 539, 540, 541, 546, 549, 550, 552], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 463], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 160, 219, 224, 267, 297, 349, 410, 463, 482, 486, 490, 495, 499, 502, 507, 508, 509, 510, 513, 519, 539, 550, 553], "static": [14, 41, 42, 47, 165, 173, 194, 219, 297, 349, 394, 410, 425, 427, 463, 464, 465, 485, 490, 495, 499, 502, 507, 508, 509, 510, 513, 519, 522, 530, 532, 533, 534, 542, 547, 550, 553], "format": [14, 18, 43, 54, 148, 168, 218, 219, 234, 235, 236, 277, 278, 279, 297, 303, 309, 349, 356, 410, 413, 448, 462, 464, 465, 483, 488, 490, 498, 499, 500, 501, 502, 524, 527, 539, 541, 544, 545], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 500, 541], "reduce_rang": [15, 41, 42, 218, 219, 465, 540], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 149, 161, 168, 169, 178, 192, 218, 219, 236, 249, 251, 256, 259, 279, 292, 348, 350, 360, 361, 362, 364, 366, 368, 369, 370, 394, 409, 411, 413, 432, 434, 435, 442, 448, 449, 452, 453, 482], "augment": 15, "dump": [15, 158, 168, 175, 297, 453, 458, 524, 541, 545, 548], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 154, 169, 432, 437, 453, 544], "percentil": [16, 44, 140, 169, 434, 481], "99": [16, 553], "999": [16, 552], "option": [16, 44, 105, 149, 151, 160, 168, 169, 196, 218, 219, 222, 223, 234, 251, 265, 266, 277, 292, 296, 297, 303, 309, 330, 336, 349, 352, 356, 360, 361, 394, 410, 412, 413, 430, 434, 442, 446, 448, 453, 464, 465, 482, 483, 492, 496, 499, 513, 527, 530, 532, 533, 534, 538, 541, 544, 546, 549, 550, 552], "number": [16, 44, 67, 68, 105, 140, 149, 168, 169, 188, 192, 198, 199, 218, 219, 232, 235, 247, 251, 275, 278, 289, 292, 304, 305, 307, 330, 339, 357, 358, 360, 388, 393, 398, 413, 445, 453, 480, 482, 483, 488, 498, 527, 529, 538, 541, 544, 546, 547, 549, 550], "bin": [16, 160, 161, 453, 491], "histogram": [16, 443, 453, 521, 548], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 160, 168, 174, 175, 188, 190, 194, 195, 205, 213, 214, 215, 216, 218, 219, 222, 223, 234, 237, 238, 247, 251, 252, 265, 266, 277, 280, 281, 289, 292, 303, 307, 331, 339, 342, 349, 356, 360, 361, 394, 398, 403, 410, 412, 413, 442, 443, 445, 453, 459, 464, 465, 481, 483, 485, 492, 498, 499, 500, 505, 522, 524, 530, 536, 538, 540, 541, 544, 545, 547, 549, 550, 552], "default": [16, 44, 97, 148, 149, 151, 160, 168, 169, 176, 214, 216, 218, 219, 222, 223, 226, 234, 235, 236, 247, 251, 265, 266, 269, 277, 278, 279, 289, 292, 296, 297, 300, 309, 331, 351, 353, 360, 369, 412, 427, 430, 434, 437, 440, 445, 448, 453, 459, 463, 482, 483, 492, 495, 496, 498, 499, 500, 507, 510, 512, 516, 524, 527, 532, 533, 534, 536, 538, 540, 541, 543, 544, 546, 547, 549, 550, 552], "float": [16, 43, 44, 140, 141, 149, 151, 155, 169, 196, 201, 211, 214, 218, 219, 234, 247, 277, 289, 301, 303, 304, 305, 332, 354, 356, 357, 358, 409, 413, 434, 437, 440, 450, 453, 483, 498, 540, 541, 547, 549], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 158, 168, 180, 187, 188, 190, 191, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 236, 251, 254, 256, 257, 279, 292, 293, 300, 303, 304, 305, 307, 310, 313, 314, 315, 322, 325, 327, 330, 331, 332, 333, 334, 339, 353, 356, 357, 358, 360, 361, 365, 369, 398, 442, 453, 458, 464, 482, 483, 489, 492, 498, 499, 501, 512, 513, 516, 519, 527, 538, 539, 541, 544, 547, 549, 550, 552], "between": [16, 42, 143, 174, 207, 218, 219, 251, 292, 304, 307, 357, 360, 388, 393, 453, 459, 463, 464, 465, 481, 485, 486, 495, 498, 499, 510, 541, 544, 545, 546, 547, 549, 550], "0": [16, 43, 44, 54, 90, 105, 148, 149, 151, 159, 160, 168, 169, 171, 173, 181, 188, 190, 192, 214, 218, 219, 224, 226, 233, 234, 237, 238, 241, 247, 251, 253, 254, 267, 269, 276, 277, 280, 281, 284, 289, 292, 297, 298, 307, 314, 322, 327, 335, 360, 371, 394, 399, 413, 434, 437, 448, 459, 482, 483, 486, 488, 490, 491, 492, 496, 497, 498, 499, 500, 505, 507, 512, 516, 522, 532, 533, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552], "100": [16, 175, 188, 218, 219, 236, 279, 413, 425, 429, 480, 483, 488, 494, 499, 524, 540, 541, 549, 550, 552, 553], "klcalibr": 16, "128": [16, 44, 149, 152, 154, 168, 169, 234, 237, 238, 251, 277, 280, 281, 292, 432, 437, 483, 499, 541, 544, 549, 553], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 151, 520, 521, 544], "ep": [16, 174, 500], "0001": [16, 188, 218, 219, 486, 499, 540], "smooth": [16, 140, 141, 148, 165, 173, 218, 219, 348, 538, 550], "discret": [16, 188, 550], "mai": [16, 148, 158, 160, 316, 317, 319, 320, 321, 413, 457, 458, 464, 481, 485, 490, 491, 497, 500, 512, 516, 522, 525, 527, 539, 541, 544, 550], "have": [16, 74, 83, 141, 148, 160, 191, 195, 197, 204, 232, 254, 275, 300, 303, 330, 332, 353, 356, 360, 394, 412, 413, 457, 458, 464, 465, 482, 483, 485, 488, 492, 497, 498, 499, 500, 502, 519, 522, 525, 527, 532, 533, 534, 536, 538, 541, 542, 544, 547, 550, 551], "been": [16, 149, 160, 191, 197, 204, 300, 330, 332, 353, 460, 465, 486, 499, 500, 519, 544, 547], "normal": [16, 33, 251, 292, 305, 358, 499, 528, 536, 544, 547, 549], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 151, 160, 163, 165, 168, 169, 171, 173, 174, 175, 181, 188, 190, 202, 203, 205, 218, 219, 224, 226, 233, 234, 235, 237, 238, 241, 242, 247, 251, 252, 253, 254, 267, 269, 276, 277, 278, 280, 281, 284, 285, 289, 292, 298, 303, 304, 305, 307, 322, 327, 332, 335, 336, 356, 357, 358, 360, 371, 394, 412, 413, 434, 437, 439, 445, 448, 453, 457, 459, 462, 463, 465, 481, 482, 483, 485, 486, 490, 492, 493, 496, 498, 500, 503, 505, 521, 522, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552], "replac": [16, 149, 161, 165, 168, 169, 305, 358, 488, 499, 510, 545], "zero": [16, 43, 44, 149, 154, 169, 201, 214, 251, 292, 332, 432, 434, 453, 462, 524, 538, 541, 544, 547, 549, 550], "multipli": [16, 218, 219, 544], "scale": [16, 43, 44, 100, 141, 143, 149, 154, 163, 165, 167, 168, 169, 173, 174, 247, 251, 289, 292, 432, 434, 439, 541, 544, 546, 547, 549, 550], "factor": [16, 141, 151, 544, 547, 553], "take": [16, 196, 219, 222, 223, 227, 251, 256, 265, 266, 270, 292, 330, 339, 360, 361, 394, 398, 442, 457, 459, 460, 482, 485, 486, 492, 499, 519, 538, 541, 543, 544, 549, 550, 552], "correspond": [16, 155, 194, 205, 218, 219, 234, 277, 300, 303, 307, 353, 356, 360, 445, 453, 463, 492, 499, 538, 540, 541, 546, 550], "amount": 16, "off": [16, 67, 68, 70, 458, 544], "non": [16, 331, 453, 459, 485, 544, 550], "ref": [16, 148], "http": [16, 154, 155, 190, 198, 199, 208, 209, 210, 234, 236, 277, 279, 300, 301, 303, 304, 305, 330, 332, 333, 353, 354, 356, 357, 358, 360, 394, 432, 437, 459, 462, 483, 485, 493, 496, 497, 499, 508, 514, 517, 521, 523, 524, 525, 526, 527, 530, 532, 533, 534, 538, 545], "hanj": 16, "c": [16, 74, 236, 279, 453, 483, 491, 496, 544, 550], "illinoi": 16, "edu": [16, 236, 279, 483], "cs412": 16, "bk3": 16, "diverg": [16, 443, 447, 465, 481, 486, 550], "pdf": 16, "github": [16, 155, 198, 199, 210, 234, 277, 300, 301, 304, 305, 330, 333, 353, 354, 357, 358, 360, 394, 458, 462, 483, 485, 489, 496, 497, 499, 508, 514, 517, 521, 523, 524, 525, 526, 527, 530, 533, 534, 545], "com": [16, 155, 198, 199, 210, 234, 277, 300, 301, 304, 305, 330, 333, 353, 354, 357, 358, 360, 394, 457, 462, 483, 485, 493, 496, 497, 499, 502, 508, 521, 523, 524, 526, 527, 530, 533, 534, 545, 546, 553], "apach": [16, 497], "incub": 16, "blob": [16, 155, 198, 199, 300, 301, 304, 305, 330, 353, 354, 357, 358, 360, 394, 499, 508, 530, 533, 534], "master": [16, 198, 199, 210, 300, 301, 304, 305, 330, 333, 353, 354, 357, 358, 360, 394, 499, 550], "python": [16, 75, 148, 158, 160, 236, 255, 279, 299, 352, 413, 453, 455, 458, 459, 483, 485, 488, 491, 496, 499, 504, 510, 513, 519, 523, 524, 526, 527, 529, 532, 534, 538, 539, 549], "contrib": [16, 299, 352], "py": [16, 148, 155, 175, 201, 218, 219, 301, 303, 304, 305, 332, 354, 356, 357, 358, 413, 459, 463, 485, 488, 496, 499, 504, 506, 507, 508, 514, 517, 521, 523, 524, 526, 527, 529, 530, 532, 533, 534, 541, 545, 548], "microsoft": [16, 462, 463], "onnxruntim": [16, 218, 219, 230, 236, 243, 273, 279, 286, 308, 388, 463, 481, 482, 495, 496, 500, 522, 540], "main": [16, 154, 183, 188, 205, 210, 258, 333, 425, 429, 432, 435, 440, 459, 482, 485, 488, 499, 506, 508, 520, 529, 538, 541, 544], "tool": [16, 148, 296, 453, 462, 463, 499, 512, 516, 522, 525, 526, 527, 538, 539, 541], "arrai": [16, 43, 44, 148, 160, 251, 292, 303, 314, 356, 453, 549], "small": [16, 67, 68, 69, 70, 401, 460, 524, 525, 538, 544, 550, 553], "probabl": [16, 218, 219, 447, 544], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 192, 205, 305, 358, 457, 499, 512, 516, 525, 532, 533, 538, 548], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 161], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 151, 160, 181, 201, 222, 223, 231, 234, 253, 265, 266, 274, 277, 331, 332, 349, 394, 410, 442, 460, 465, 483, 498, 518, 538, 541, 547, 550], "qoper": [18, 34, 218, 219, 490, 522], "float16activationoper": 18, "float16": [18, 21, 43, 149, 448, 483, 544], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 307, 360, 491, 498, 514, 517, 545], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 459, 547], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 350, 411], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 168, 297, 463], "mode": [41, 42, 43, 45, 110, 160, 165, 243, 286, 303, 349, 356, 369, 410, 450, 452, 453, 463, 464, 485, 495, 512, 516, 524, 525, 541, 543, 544, 550], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 168, 169, 174, 218, 219, 222, 223, 265, 266, 296, 297, 307, 342, 349, 360, 399, 403, 410, 425, 429, 434, 437, 445, 448, 452, 453, 458, 462, 463, 465, 485, 492, 493, 498, 499, 500, 509, 521, 522, 523, 524, 540, 541, 543, 544, 545, 546, 547, 548, 550, 552, 553], "add_qdq_pair_to_weight": [41, 218, 219, 541], "optypes_to_exclude_output_qu": [41, 218, 219, 541], "dedicated_qdq_pair": [41, 218, 219, 541], "smoothquant": [42, 165, 168, 173, 462, 539, 544, 551], "onnxrt": [42, 43, 44, 234, 236, 243, 251, 277, 279, 286, 292, 307, 360, 387, 451, 463, 485, 500, 521, 541, 553], "get_quant_dequant_output": 42, "input_data": [42, 482], "output_data": 42, "loss": [42, 181, 218, 219, 253, 298, 307, 322, 327, 335, 360, 442, 481, 485, 486, 487, 488, 489, 498, 499, 500, 510, 522, 524, 537, 538, 539, 541, 544, 547, 550, 552], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 168, 169, 178, 184, 194, 195, 200, 214, 216, 218, 219, 222, 223, 256, 260, 265, 266, 296, 297, 300, 330, 353, 360, 361, 369, 394, 430, 434, 442, 448, 449, 453, 459, 463, 464, 486, 487, 488, 490, 492, 494, 498, 499, 501, 510, 519, 520, 522, 527, 528, 532, 533, 534, 537, 538, 540, 541, 544, 545, 547, 548, 549, 550, 552], "numpi": [42, 43, 67, 68, 70, 105, 148, 251, 292, 303, 314, 356, 491, 547, 549], "7": [42, 169, 175, 218, 219, 371, 434, 465, 480, 491, 492, 499, 538, 541, 545, 547, 550, 553], "bit": [42, 44, 149, 152, 168, 169, 218, 219, 412, 434, 465, 481, 487, 500, 539, 541, 544, 547], "execut": [42, 43, 54, 154, 160, 175, 201, 202, 203, 218, 219, 332, 336, 338, 393, 394, 395, 397, 432, 442, 445, 452, 453, 485, 486, 487, 499, 500, 504, 505, 512, 513, 516, 519, 520, 521, 522, 526, 529, 537, 538, 541, 544, 546, 550, 553], "provid": [42, 43, 102, 105, 110, 149, 194, 222, 223, 251, 265, 266, 292, 298, 303, 322, 327, 335, 336, 356, 361, 394, 442, 446, 448, 460, 462, 463, 464, 465, 480, 482, 485, 487, 488, 489, 495, 496, 498, 499, 500, 501, 502, 506, 510, 513, 519, 520, 521, 527, 528, 538, 540, 541, 544, 547, 548, 550, 551, 552, 553], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 219, 296, 297, 490], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 151, 155, 158, 160, 168, 169, 174, 180, 184, 187, 192, 194, 196, 198, 199, 200, 201, 205, 206, 207, 208, 210, 211, 212, 218, 219, 222, 223, 233, 234, 235, 236, 237, 238, 239, 241, 251, 254, 260, 261, 265, 266, 276, 277, 278, 279, 280, 281, 282, 284, 292, 300, 303, 304, 305, 307, 316, 317, 319, 320, 321, 322, 327, 330, 332, 334, 335, 336, 339, 342, 353, 356, 357, 358, 360, 361, 371, 394, 398, 403, 412, 413, 427, 437, 442, 452, 453, 457, 458, 459, 460, 463, 464, 465, 481, 482, 483, 486, 487, 488, 490, 491, 492, 495, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 510, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 532, 533, 534, 538, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551], "quant_dequant_data": 42, "qtype": [42, 43, 463], "3": [42, 44, 148, 149, 160, 203, 219, 236, 251, 279, 292, 303, 356, 413, 453, 459, 460, 462, 481, 482, 483, 486, 488, 490, 492, 493, 496, 498, 499, 500, 502, 506, 510, 512, 516, 521, 526, 527, 529, 530, 532, 536, 538, 540, 541, 544, 545, 546, 547, 549, 550, 553], "scheme": [42, 43, 44, 149, 152, 163, 168, 169, 434, 439, 463, 464, 465, 482, 492, 510, 544, 550, 552], "sym": [42, 43, 44, 149, 169, 434, 464, 465, 492, 541, 544, 552], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 155, 168, 169, 434, 453, 459, 464, 547, 548], "asym": [42, 43, 44, 149, 152, 163, 168, 169, 434, 439, 465, 492, 544, 552], "ortsmoothqu": 42, "fake": [42, 44, 113, 163, 165, 169, 173, 412, 434, 439, 499, 541, 544, 547], "channel": [42, 43, 44, 143, 165, 169, 173, 174, 192, 195, 200, 218, 219, 247, 251, 289, 292, 330, 434, 448, 462, 463, 465, 495, 496, 502, 504, 509, 524, 538, 544, 549, 553], "For": [42, 44, 149, 168, 169, 173, 194, 195, 198, 199, 210, 219, 236, 251, 279, 292, 304, 305, 307, 330, 333, 357, 358, 360, 361, 394, 434, 457, 459, 461, 463, 465, 486, 487, 488, 490, 492, 495, 502, 504, 505, 507, 510, 521, 522, 527, 538, 543, 544, 547, 548, 550, 552, 553], "more": [42, 148, 149, 165, 173, 198, 199, 251, 292, 330, 460, 461, 462, 464, 481, 483, 486, 488, 490, 493, 495, 496, 499, 500, 502, 510, 514, 517, 522, 527, 536, 537, 538, 543, 544, 547, 550, 551, 553], "detail": [42, 151, 165, 173, 176, 194, 251, 292, 453, 454, 457, 462, 464, 465, 481, 486, 492, 493, 494, 498, 499, 500, 502, 510, 519, 527, 528, 538, 544, 545, 546, 547, 548, 550, 551], "pleas": [42, 149, 154, 155, 165, 173, 190, 198, 199, 200, 208, 209, 210, 218, 219, 234, 235, 236, 239, 277, 278, 279, 282, 330, 332, 333, 360, 394, 413, 432, 459, 460, 461, 462, 463, 480, 481, 483, 487, 488, 490, 496, 498, 500, 502, 503, 507, 510, 526, 527, 528, 538, 541, 543, 544, 545, 546, 547, 550, 551], "refer": [42, 149, 154, 155, 165, 173, 190, 198, 199, 200, 208, 209, 210, 214, 218, 219, 234, 277, 300, 301, 307, 330, 332, 333, 353, 354, 360, 394, 413, 432, 459, 463, 464, 480, 482, 483, 485, 487, 488, 490, 494, 496, 497, 498, 499, 500, 502, 507, 510, 521, 522, 524, 526, 527, 528, 536, 540, 542, 545, 549, 550], "accur": [42, 154, 165, 173, 209, 432, 437, 538, 544, 547], "effici": [42, 165, 173, 460, 462, 481, 482, 486, 502, 527, 537, 538, 539, 544, 547, 550], "post": [42, 97, 98, 154, 165, 173, 208, 219, 222, 223, 265, 266, 394, 432, 437, 457, 462, 463, 464, 485, 487, 488, 490, 495, 496, 502, 508, 519, 529, 538, 539, 542, 544, 547, 548, 550], "train": [42, 57, 80, 149, 154, 165, 173, 180, 202, 203, 206, 208, 209, 218, 219, 222, 223, 234, 236, 251, 261, 265, 266, 277, 279, 292, 293, 309, 332, 352, 394, 432, 437, 445, 460, 462, 463, 464, 470, 483, 485, 486, 487, 490, 495, 500, 502, 508, 519, 524, 532, 537, 539, 542, 544, 546, 547, 550, 552], "larg": [42, 43, 165, 173, 209, 462, 482, 486, 499, 539, 542, 544, 547, 553], "languag": [42, 165, 173, 209, 300, 353, 457, 462, 490, 523, 539, 542, 544, 547], "2": [42, 43, 44, 54, 74, 105, 109, 149, 160, 165, 169, 171, 173, 175, 196, 202, 203, 218, 219, 235, 252, 278, 303, 305, 307, 332, 339, 356, 358, 360, 371, 398, 413, 434, 453, 459, 463, 481, 482, 483, 485, 486, 492, 495, 496, 497, 498, 500, 523, 529, 530, 532, 533, 534, 536, 538, 539, 541, 542, 544, 545, 546, 547, 549, 550, 551], "spiq": [42, 165, 173, 547], "free": [42, 165, 173, 208, 222, 223, 265, 266, 394, 457, 508, 513, 521, 529, 536, 546, 547], "per": [42, 43, 44, 165, 169, 173, 175, 218, 219, 252, 434, 447, 463, 465, 482, 527, 538, 543, 544, 553], "we": [42, 43, 67, 68, 70, 74, 86, 143, 160, 165, 173, 174, 175, 194, 198, 205, 218, 219, 233, 252, 254, 276, 300, 303, 353, 356, 401, 457, 459, 463, 464, 465, 482, 485, 488, 490, 492, 498, 499, 506, 507, 510, 514, 517, 519, 520, 522, 525, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 160, 165, 167, 169, 173, 174, 175, 183, 188, 191, 197, 204, 218, 219, 234, 252, 254, 258, 277, 297, 309, 330, 332, 343, 394, 404, 412, 413, 437, 453, 462, 463, 464, 465, 480, 481, 482, 485, 486, 488, 491, 492, 499, 500, 507, 520, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552], "inplac": [42, 165], "mean": [42, 44, 149, 165, 169, 196, 205, 218, 219, 247, 251, 289, 292, 305, 307, 330, 342, 358, 360, 403, 434, 459, 464, 465, 482, 485, 488, 492, 498, 499, 505, 524, 538, 541, 542, 544, 547, 549, 550, 552, 553], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 151, 152, 155, 165, 167, 168, 169, 174, 190, 191, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 213, 218, 219, 297, 330, 332, 349, 360, 394, 401, 410, 412, 434, 437, 453, 454, 462, 463, 464, 465, 481, 485, 487, 492, 494, 499, 521, 532, 536, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552], "chang": [42, 96, 143, 149, 165, 174, 202, 203, 205, 206, 208, 209, 212, 218, 219, 332, 334, 401, 453, 458, 464, 482, 488, 491, 497, 499, 502, 512, 513, 516, 519, 525, 538, 548, 549, 550], "you": [42, 160, 165, 218, 219, 232, 234, 275, 277, 332, 360, 394, 458, 459, 464, 482, 483, 485, 488, 496, 497, 498, 500, 502, 504, 505, 507, 512, 516, 519, 520, 521, 522, 523, 524, 525, 527, 538, 541, 544, 545, 546, 547, 548, 551], "can": [42, 43, 44, 143, 151, 155, 160, 165, 174, 187, 194, 195, 196, 201, 209, 210, 212, 218, 219, 222, 223, 233, 236, 251, 252, 254, 265, 266, 276, 279, 292, 303, 305, 307, 330, 332, 334, 356, 358, 360, 361, 371, 394, 442, 453, 459, 460, 462, 463, 464, 465, 480, 482, 483, 485, 486, 487, 488, 490, 492, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 512, 513, 514, 516, 517, 519, 520, 522, 524, 525, 526, 527, 529, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553], "recov": [42, 165, 452, 453, 463, 487], "helper": [43, 45, 110, 116, 148, 168, 234, 235, 236, 250, 277, 278, 279, 291, 295, 296, 297, 369, 451], "simple_progress_bar": 43, "total": [43, 201, 251, 292, 307, 332, 360, 483, 485, 538, 544, 549, 553], "progress": [43, 189, 191, 204, 236, 279, 513, 519, 521, 538, 541], "bar": [43, 236, 279, 519, 539], "case": [43, 70, 74, 151, 160, 169, 175, 219, 233, 250, 251, 252, 276, 291, 292, 298, 322, 327, 335, 371, 465, 482, 486, 487, 488, 492, 494, 498, 503, 507, 519, 520, 521, 524, 530, 533, 534, 536, 538, 539, 541, 544, 545, 549, 551, 552, 553], "where": [43, 151, 160, 218, 219, 303, 307, 356, 360, 412, 453, 465, 481, 485, 486, 512, 516, 520, 547, 548], "tqdm": [43, 499], "t": [43, 67, 68, 70, 143, 151, 160, 174, 196, 218, 219, 251, 254, 292, 305, 358, 459, 463, 485, 486, 488, 499, 500, 520, 525, 538, 541, 544, 550, 552], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 218, 219, 237, 238, 247, 251, 280, 281, 289, 292, 434, 448, 464, 465, 483, 485, 490, 492, 502, 524, 540, 541, 544, 547, 548, 549, 552], "its": [43, 60, 96, 148, 155, 194, 203, 206, 208, 214, 219, 230, 236, 251, 273, 279, 292, 295, 301, 302, 332, 339, 354, 355, 398, 457, 483, 486, 497, 498, 500, 510, 512, 516, 519, 520, 538, 544, 546, 549, 550], "string": [43, 45, 116, 148, 149, 154, 158, 160, 175, 181, 183, 187, 188, 194, 196, 201, 210, 211, 212, 214, 215, 218, 219, 236, 253, 258, 279, 293, 298, 300, 303, 309, 310, 311, 313, 314, 322, 327, 330, 331, 332, 333, 334, 335, 353, 356, 365, 369, 430, 432, 445, 450, 453, 498, 547, 549], "represent": [43, 158, 457, 459, 481, 487, 538, 541], "quanttyp": [43, 412], "repres": [43, 196, 200, 201, 210, 211, 214, 236, 241, 279, 284, 303, 305, 307, 356, 358, 360, 457, 465, 481, 483, 490, 527, 538, 541, 542, 550], "make_quant_nod": 43, "make": [43, 105, 143, 174, 187, 196, 201, 210, 212, 232, 275, 330, 332, 334, 453, 457, 463, 464, 480, 482, 492, 498, 499, 507, 512, 516, 519, 521, 538, 541, 542, 543, 544, 546, 547, 550], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 219], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 149, 151, 234, 277, 453, 458, 481, 483, 498, 538, 544, 547, 550], "transpos": [43, 73, 200, 247, 251, 292, 296, 330, 544, 549], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 169, 434, 491, 492, 544, 547, 550], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 500, 502, 510, 543], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 175, 235, 239, 242, 278, 282, 285, 342, 403, 498, 523, 550], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 155, 168, 247, 251, 289, 292, 300, 303, 304, 305, 307, 353, 356, 357, 358, 360, 374, 394, 401, 442, 452, 453, 457, 460, 462, 482, 485, 486, 488, 495, 497, 498, 499, 507, 508, 519, 520, 523, 527, 528, 529, 530, 536, 538, 539, 541, 544, 546, 547, 548, 549, 550, 551, 553], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 149, 169, 247, 289, 304, 305, 314, 339, 357, 358, 398, 434, 453, 498, 519, 524, 525, 541, 544, 547, 549, 550], "To": [43, 303, 356, 371, 458, 464, 465, 483, 485, 488, 500, 503, 506, 512, 514, 516, 517, 521, 525, 538, 540, 543, 544, 545, 547, 550, 552], "pack": [43, 61], "comput": [43, 44, 105, 149, 151, 155, 168, 300, 301, 304, 305, 307, 353, 354, 357, 358, 360, 442, 453, 481, 482, 487, 490, 498, 499, 500, 502, 513, 522, 538, 539, 541, 544, 547, 550], "linear": [43, 149, 154, 163, 167, 168, 169, 173, 192, 194, 195, 200, 205, 214, 218, 219, 330, 432, 434, 439, 459, 486, 490, 499, 538, 544, 547, 550], "transform": [43, 50, 143, 145, 146, 147, 149, 154, 164, 167, 208, 234, 235, 236, 237, 238, 239, 241, 243, 245, 277, 278, 279, 280, 281, 282, 284, 286, 288, 299, 352, 432, 437, 459, 460, 462, 481, 483, 486, 487, 488, 489, 493, 499, 502, 507, 508, 509, 510, 522, 530, 533, 534, 538, 539, 543, 544, 547, 548, 550, 552, 553], "when": [43, 54, 64, 70, 148, 158, 160, 195, 201, 206, 214, 218, 219, 234, 235, 243, 251, 277, 278, 286, 292, 301, 331, 332, 354, 394, 442, 457, 460, 464, 482, 483, 499, 510, 512, 513, 516, 520, 521, 524, 525, 526, 528, 532, 538, 541, 544, 547, 549, 550], "uint8": [43, 169, 247, 289, 303, 351, 356, 412, 434, 463, 483, 492, 540, 541, 549, 552], "rmin": [43, 541], "rmax": [43, 541], "m": [43, 155, 169, 198, 199, 218, 219, 330, 434, 458, 486, 496, 502, 504, 507, 510, 514, 517, 527, 538, 553], "max": [43, 104, 143, 149, 169, 174, 188, 218, 219, 251, 292, 304, 305, 339, 357, 358, 398, 434, 453, 462, 485, 496, 499, 522, 524, 538, 541, 544, 547, 549, 550], "ab": [43, 154, 169, 190, 208, 209, 332, 432, 434, 437, 538, 541, 547], "np": [43, 251, 292, 339, 398, 488, 529, 547, 549, 550], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 168, 190, 198, 214, 219, 237, 238, 280, 281, 304, 305, 330, 332, 342, 357, 358, 403, 443, 453, 481, 483, 498, 499, 510, 522, 536, 538, 541, 544, 546, 547, 550, 552], "quantize_data": 43, "add": [43, 53, 64, 109, 119, 148, 183, 214, 218, 219, 234, 236, 258, 277, 279, 331, 349, 410, 453, 458, 459, 465, 482, 483, 488, 490, 492, 498, 499, 514, 517, 521, 522, 529, 532, 533, 546, 547, 548, 550, 551], "necessari": [43, 210, 457, 460, 464, 501, 520, 538, 546, 550], "intermedi": [43, 155, 181, 218, 219, 253, 459, 495, 541], "full": [43, 149, 234, 235, 236, 277, 278, 279, 448, 453, 462, 481, 483, 485, 491, 497, 520, 525, 538, 544, 545], "equat": [43, 305, 307, 358, 360, 541, 547], "r": [43, 143, 174, 485, 496, 520, 521, 523, 524, 526, 527, 541, 553], "": [43, 44, 105, 143, 148, 160, 174, 194, 195, 196, 200, 201, 202, 203, 206, 208, 209, 214, 215, 216, 218, 219, 233, 236, 250, 251, 252, 254, 256, 276, 279, 291, 292, 305, 330, 332, 358, 360, 361, 365, 394, 430, 450, 453, 457, 458, 460, 464, 465, 485, 486, 488, 490, 492, 495, 499, 500, 507, 510, 512, 516, 519, 522, 524, 527, 537, 538, 539, 540, 541, 544, 545, 546, 547, 550, 551, 552, 553], "q": [43, 44, 107, 109, 131, 544, 547], "z": [43, 481, 486, 547], "real": [43, 237, 254, 280, 464, 481, 488, 521, 528, 539, 541], "origin": [43, 44, 140, 148, 149, 161, 165, 168, 194, 206, 214, 219, 234, 251, 252, 277, 292, 316, 317, 319, 320, 321, 331, 332, 351, 399, 412, 448, 453, 458, 483, 507, 538, 541, 549, 550, 552], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 160, 161], "new_dtyp": 43, "cast": [43, 51, 543, 549], "info": [43, 168, 169, 178, 198, 199, 214, 249, 254, 259, 330, 365, 448, 449, 453, 459, 485, 501, 529, 534], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 453], "low": [43, 149, 222, 223, 237, 238, 265, 266, 280, 281, 298, 308, 335, 361, 463, 464, 480, 481, 483, 488, 499, 500, 524, 539, 541, 544, 547, 550], "high": [43, 237, 238, 280, 281, 483, 485, 496, 524, 539, 550], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 168, 194, 205, 215, 216, 219, 453, 463, 482, 492, 494, 499, 540, 552], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 307, 314, 339, 360, 398, 453, 463, 485, 505, 512, 516, 519, 520, 522, 524, 538, 544, 546, 547, 548, 550], "item": [43, 214, 216, 218, 219, 250, 291, 331, 349, 410, 430, 481, 488, 538, 547, 550], "trt_env_setup": 43, "environ": [43, 175, 252, 457, 480, 512, 516, 519, 527, 530, 532, 533, 534, 550], "variabl": [43, 158, 175, 211, 218, 219, 236, 252, 279, 339, 398, 412, 496, 538, 550], "tensorrt": [43, 481, 500, 541], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 553], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 297, 339, 398], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 196, 237, 238, 247, 251, 280, 281, 289, 292, 303, 356, 462, 483, 492, 493, 499, 521, 522, 544, 547, 549], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 152, 163, 168, 169, 412, 434, 439, 544], "has_zp": 44, "blob_siz": 44, "how": [44, 160, 169, 180, 190, 196, 202, 203, 208, 209, 218, 219, 251, 292, 293, 330, 434, 458, 459, 461, 463, 482, 483, 486, 487, 488, 494, 498, 499, 513, 514, 517, 518, 519, 521, 532, 533, 534, 538, 539, 541, 547, 549, 550, 551, 552], "mani": [44, 169, 360, 394, 434, 482, 496, 544, 550, 552], "element": [44, 149, 169, 198, 199, 214, 232, 275, 303, 330, 356, 434, 453, 483, 495, 498, 538, 544, 547], "one": [44, 109, 110, 115, 160, 168, 169, 175, 196, 200, 205, 208, 209, 210, 212, 251, 261, 292, 300, 303, 307, 309, 330, 333, 334, 353, 356, 360, 434, 460, 463, 481, 486, 487, 488, 492, 495, 496, 498, 499, 500, 502, 503, 507, 508, 510, 512, 513, 516, 519, 520, 521, 524, 525, 526, 527, 529, 536, 537, 538, 540, 541, 542, 544, 545, 547, 549, 550], "zp": [44, 169, 434, 547], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 149, 163, 168, 169, 434, 439, 547], "k_block": 44, "q_weight": 44, "accuracy_level": 44, "matmulfpq4": 44, "accuraci": [44, 175, 214, 218, 219, 222, 223, 265, 266, 293, 298, 307, 322, 327, 335, 360, 361, 371, 394, 399, 413, 442, 450, 459, 462, 464, 465, 481, 482, 483, 485, 487, 488, 489, 490, 498, 499, 510, 519, 521, 528, 529, 532, 533, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 551, 552, 553], "level": [44, 178, 194, 399, 413, 449, 457, 529, 547, 550], "unset": 44, "jbla": 44, "kernel": [44, 173, 218, 219, 463, 464, 550], "fp16": [44, 219, 349, 410, 541], "4": [44, 54, 149, 152, 163, 168, 169, 175, 196, 205, 218, 219, 243, 246, 247, 251, 286, 289, 292, 300, 301, 303, 353, 354, 356, 412, 413, 434, 437, 439, 457, 463, 465, 480, 488, 489, 492, 495, 496, 498, 499, 507, 527, 529, 533, 538, 541, 544, 547, 549, 550, 553], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "32": [44, 149, 152, 169, 192, 412, 434, 437, 488, 494, 544, 553], "ratio": [44, 143, 174, 196, 201, 214, 218, 219, 247, 251, 289, 292, 332, 483, 499, 522, 538, 549, 553], "group": [44, 149, 151, 169, 211, 317, 434, 462, 495, 538, 544, 548, 549, 550, 553], "clip": [44, 169, 434, 544, 547], "qdq_tensor": 44, "quant": [44, 148, 168, 169, 218, 219, 349, 410, 427, 434, 459, 499, 541], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 251, 292, 412, 459, 463, 485, 491, 495, 500, 505, 507, 523, 524, 525, 541, 543, 544, 547, 548, 549, 551], "divis": 44, "pade": 44, "rtn_quantiz": [44, 169, 434], "weight_config": [44, 149, 152, 154, 167, 169, 432, 434], "round": [44, 143, 149, 169, 174, 434, 437, 462, 539, 541, 544, 547], "nearst": [44, 169, 434], "method": [44, 141, 143, 149, 158, 160, 168, 169, 178, 187, 211, 218, 219, 227, 232, 233, 234, 236, 243, 251, 254, 270, 275, 276, 277, 279, 286, 292, 313, 314, 315, 349, 410, 412, 434, 445, 446, 448, 449, 459, 460, 462, 481, 482, 483, 485, 486, 487, 498, 499, 537, 538, 541, 543, 544, 547, 549, 550], "modelproto": [44, 295, 361, 501], "onnxmodel": [44, 368, 387], "fc2": [44, 168, 169, 434], "rtn": [44, 168, 435, 437, 542, 544], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 163, 167, 180, 205, 207, 261, 301, 354, 425, 432, 435, 439, 457, 464, 465, 499, 502, 504, 510, 519, 523, 524, 529, 537, 538, 541, 543, 546, 547, 550, 551, 552], "salient": [44, 169, 538, 544], "apply_awq_clip": 44, "mse": [44, 168, 169, 218, 219, 299, 307, 341, 352, 360, 394, 402, 453, 485, 498, 524, 540, 544, 545], "prepare_input": 44, "n_sampl": [44, 149, 152, 168, 169], "sampl": [44, 77, 149, 168, 169, 218, 219, 227, 232, 234, 235, 236, 247, 251, 270, 275, 277, 278, 279, 289, 292, 307, 314, 339, 360, 398, 460, 482, 483, 489, 495, 520, 541, 544, 547, 549, 550, 552, 553], "session": [44, 148, 233, 276, 369, 499, 548], "awq_quant": [44, 169], "enable_auto_scal": [44, 169, 544], "enable_mse_search": [44, 169, 434, 437, 544], "awar": [44, 152, 155, 169, 180, 219, 261, 309, 330, 401, 442, 463, 464, 465, 481, 487, 488, 490, 495, 519, 529, 537, 539, 544, 550], "awq": [44, 169, 542, 544], "enabl": [44, 109, 149, 151, 155, 169, 201, 218, 219, 332, 464, 465, 488, 496, 500, 502, 504, 507, 508, 510, 521, 523, 524, 526, 529, 538, 539, 544, 550], "gptq": [44, 169, 434, 437, 542, 544], "w": [44, 154, 251, 292, 432, 538, 547, 549], "h": [44, 218, 219, 251, 292, 488, 527, 528, 532, 533, 534, 549], "blocksiz": 44, "percdamp": [44, 437, 544], "01": [44, 149, 218, 219, 437, 499, 540, 544, 550, 552, 553], "actord": [44, 544], "perchannel": 44, "hessian": [44, 155, 401, 544, 550], "matrix": [44, 360, 394, 462, 510, 551], "percent": 44, "averag": [44, 304, 305, 307, 357, 358, 360, 498, 499, 544, 550, 553], "diagon": [44, 544], "dampen": [44, 151], "rearrang": [44, 208, 538, 544], "consid": [44, 148, 151, 307, 360, 457, 481, 486, 520, 550], "diag": 44, "error": [44, 105, 149, 155, 160, 178, 307, 342, 360, 403, 449, 485, 498, 503, 524, 525, 528, 544, 547, 550], "gptq_quantiz": [44, 169], "get_ops_recurs": 45, "prefix": [45, 148, 153, 160, 161, 166, 168, 175, 502, 507, 548], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 153, 155, 160, 168, 187, 215, 216, 218, 219, 250, 291, 303, 310, 313, 315, 356, 430, 441, 453], "yaml": [45, 214, 215, 216, 219, 222, 223, 234, 236, 252, 265, 266, 277, 279, 293, 298, 309, 310, 311, 313, 322, 327, 335, 336, 417, 452, 453, 463, 465, 494, 498, 499, 536, 540, 548, 549], "file": [45, 105, 148, 158, 160, 161, 168, 172, 184, 210, 214, 215, 218, 219, 222, 223, 234, 235, 236, 239, 250, 251, 257, 260, 265, 266, 277, 278, 279, 282, 291, 292, 293, 298, 303, 309, 310, 311, 313, 322, 327, 331, 333, 335, 336, 356, 361, 371, 377, 378, 382, 394, 452, 453, 458, 460, 463, 464, 465, 488, 491, 494, 497, 498, 499, 501, 505, 514, 517, 518, 519, 520, 522, 523, 524, 525, 527, 528, 532, 533, 534, 536, 540, 541, 544, 548, 549], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 151, 154, 262, 298, 303, 335, 348, 349, 356, 360, 394, 409, 410, 413, 432, 453, 459, 466, 468, 472, 475, 478, 485, 490, 495, 496, 499, 504, 508, 509, 510, 526, 527, 531, 545, 546, 550, 554], "pytorch_ipexadaptor": 45, "intel": [45, 183, 198, 199, 210, 255, 258, 294, 299, 306, 307, 330, 333, 341, 347, 352, 359, 360, 372, 394, 402, 408, 455, 457, 458, 460, 461, 463, 464, 465, 481, 483, 484, 486, 487, 489, 490, 492, 493, 497, 500, 501, 502, 507, 509, 510, 521, 522, 523, 524, 526, 527, 536, 537, 538, 539, 541, 543, 544, 545, 547, 548, 550, 551, 552], "extens": [45, 158, 160, 453, 460, 462, 463, 492, 495, 496, 499, 500, 501, 503, 508, 509, 510, 514, 517, 518, 522, 538, 539, 541, 544, 547, 550, 551, 552], "ipex": [45, 162, 168, 218, 219, 452, 495, 499, 500, 504, 508, 509, 547], "pytorch_fxadaptor": 45, "fx": [45, 168, 218, 343, 404, 495, 500, 508, 509, 523, 539, 541, 543], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 194, 233, 276, 298, 362, 369, 393, 459, 463, 483, 486, 488, 494, 501, 502, 521, 524, 541, 542, 543, 548], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 149, 154, 159, 160, 162, 168, 218, 219, 432, 448, 453, 462, 464, 480, 481, 495, 499, 500, 502, 504, 510, 519, 527, 539, 540, 541, 542, 543, 544, 548], "querybackendcap": [46, 463, 464], "tensorflowadaptor": 47, "stock": [47, 508, 547], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 218, 219, 296, 500, 541, 547], "tensorflowqueri": [47, 463], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 218, 499], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 349, 410, 464, 465], "graphconvert": 48, "qt_config": 48, "recip": [48, 194, 218, 219, 298, 335, 499, 542, 544, 547, 550], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 464, 543], "data_load": [48, 49, 463], "calib_func": [48, 152, 168, 169, 394, 543], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 218, 540], "without": [49, 90, 148, 206, 251, 292, 332, 351, 412, 457, 486, 488, 499, 510, 521, 524, 538, 539, 540, 550, 551], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 191], "bf16convert": [50, 543], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "dequantize_cast_optim": [52, 87, 111], "biasadd": [53, 59, 64, 66, 109, 492], "convertaddtobiasaddoptim": 53, "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 154, 432, 464, 465, 485, 490, 492, 524, 547, 548, 550], "addv2": [53, 69, 492], "layout": 54, "convertlayoutoptim": 54, "convers": [54, 55, 219, 309, 458, 463, 464, 499, 500, 541, 543, 547], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 151, 182, 185, 186, 187, 189, 191, 194, 203, 208, 215, 218, 219, 255, 261, 298, 299, 315, 335, 339, 352, 398, 442, 443, 450, 453, 460, 462, 480, 485, 486, 487, 488, 492, 493, 495, 496, 499, 501, 502, 504, 506, 507, 510, 513, 521, 524, 525, 526, 528, 530, 539, 540, 541, 543, 544, 546, 547, 548, 550, 552], "nchw": [54, 247], "nhwc": [54, 247], "It": [54, 160, 180, 184, 196, 222, 223, 260, 265, 266, 305, 307, 314, 330, 335, 342, 358, 360, 361, 394, 399, 403, 442, 463, 464, 465, 481, 485, 486, 499, 505, 508, 513, 519, 520, 521, 522, 524, 525, 527, 538, 541, 544, 545, 546, 550, 552], "exist": [54, 175, 216, 252, 369, 430, 453, 490, 498, 506, 550], "abov": [54, 463, 464, 465, 486, 521, 522, 524, 527, 538, 541, 547, 550], "graph_def": [54, 140, 141, 148, 296, 361, 369, 393, 394], "leakyrelu": [55, 547], "convertleakyreluoptim": 55, "below": [55, 66, 74, 218, 219, 336, 360, 394, 458, 459, 462, 463, 464, 465, 482, 485, 486, 488, 494, 498, 502, 504, 512, 513, 516, 519, 522, 527, 536, 537, 538, 540, 541, 544, 546, 547, 548, 550, 551], "subgraph": [55, 66, 105, 166, 542, 550], "mul": [55, 65, 66, 69, 169, 173, 490, 544, 547], "maximum": [55, 149, 196, 201, 218, 219, 234, 251, 277, 292, 301, 332, 339, 354, 369, 398, 465, 481, 483, 485, 499, 538, 541, 547, 549], "note": [55, 158, 200, 303, 343, 356, 404, 460, 462, 464, 465, 482, 485, 488, 490, 492, 496, 499, 504, 507, 512, 516, 519, 521, 525, 527, 529, 538, 541, 544, 547, 548, 550, 551, 552], "coeffici": [55, 149, 211, 538], "less": [55, 148, 168, 218, 219, 453, 480, 486, 499, 526, 538], "than": [55, 148, 234, 251, 277, 292, 430, 453, 460, 462, 480, 483, 494, 524, 532, 536, 537, 538, 541, 544, 546, 549, 550], "valid": [55, 67, 68, 105, 201, 204, 214, 218, 219, 236, 279, 303, 331, 332, 356, 369, 460, 462, 463, 483, 485, 486, 489, 492, 495, 497, 499, 510, 524, 538, 541, 544, 545], "nan": 56, "random": [56, 148, 149, 187, 218, 219, 247, 251, 289, 292, 299, 315, 339, 341, 352, 398, 402, 453, 460, 499, 538, 540, 549, 552], "convertnantorandom": 56, "const": [56, 57, 63, 64, 67, 68, 70, 82, 98], "consist": [56, 63, 458, 459, 527, 547, 550], "placehold": [57, 232, 275], "convertplaceholdertoconst": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 168, 187, 188, 189, 190, 191, 194, 195, 201, 202, 203, 204, 206, 208, 209, 211, 215, 218, 219, 236, 279, 299, 320, 321, 323, 328, 332, 349, 352, 410, 463, 483, 492, 495, 499, 520, 537, 540, 547, 550, 553], "inject": [59, 499], "dummi": [59, 194, 237, 238, 280, 281, 307, 360, 462, 483, 493, 498, 499, 521], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 459, 463, 492], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 227, 270, 413, 460, 464, 465, 482, 540, 544, 550], "fetch": [61, 168, 172, 227, 270, 464, 483, 532, 533, 534], "reshap": [61, 67, 68, 73, 547], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 165, 173, 178, 449, 459, 461, 482, 527, 547], "fold": [62, 63, 168, 169, 297, 492, 544, 547], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 149, 195, 198, 199, 218, 219, 234, 250, 251, 277, 291, 292, 301, 305, 330, 354, 358, 463, 483, 492, 538, 544, 549], "self": [63, 168, 169, 194, 218, 219, 371, 463, 464, 482, 483, 495, 498, 521, 546, 548, 550], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 160, 195, 218, 219, 234, 277, 399, 453, 485, 499, 512, 516, 520, 532, 533, 544, 547, 550, 552], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 492], "math": [66, 541], "fuseconvwithmathoptim": 66, "elimin": [66, 526], "sub": [66, 168, 175, 194, 252, 460, 550], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 369, 379, 464], "strip": [67, 68, 70, 83, 84, 148, 548], "port": [67, 68, 70, 521, 528], "other": [67, 68, 70, 149, 151, 158, 165, 173, 233, 276, 305, 358, 369, 457, 459, 464, 465, 485, 492, 495, 497, 499, 501, 522, 536, 538, 541, 547, 549, 550, 553], "underli": [67, 68, 70, 160], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 222, 223, 265, 266, 394, 413, 430, 441, 442, 459, 463, 482, 483, 486, 487, 488, 498, 499, 541, 547, 548, 550], "entri": [67, 68, 70, 155, 183, 258, 298, 336, 425, 429, 435, 440, 453, 497], "index": [67, 68, 70, 105, 175, 214, 219, 227, 232, 236, 270, 275, 279, 314, 453, 483, 498, 520, 524, 544, 547], "everi": [67, 68, 70, 196, 199, 201, 218, 219, 330, 332, 463, 482, 507, 512, 516, 542, 544, 550], "identifi": [67, 68, 70, 160, 303, 356, 369, 527, 538, 544], "want": [67, 68, 70, 194, 218, 219, 232, 234, 275, 277, 332, 399, 442, 459, 463, 482, 483, 488, 499, 507, 519, 520, 527, 536, 541, 544, 546, 548, 550], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 158, 160, 168, 191, 197, 204, 214, 303, 330, 331, 332, 356, 361, 413, 462, 521, 538, 539], "valueerror": [67, 68, 70, 168, 303, 356, 413, 491], "If": [67, 68, 70, 74, 160, 169, 175, 218, 219, 222, 223, 236, 251, 265, 266, 279, 292, 331, 361, 394, 413, 434, 442, 458, 459, 464, 480, 482, 483, 488, 496, 497, 498, 499, 505, 513, 514, 517, 519, 525, 530, 536, 538, 541, 544, 546, 547, 548, 549, 550], "isn": [67, 68, 70], "present": [67, 68, 70, 485, 527, 539, 547], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 194, 236, 279, 351, 412, 483], "ha": [67, 68, 70, 74, 149, 154, 160, 200, 201, 252, 300, 330, 332, 353, 413, 432, 458, 460, 463, 464, 465, 482, 490, 495, 499, 500, 505, 519, 524, 525, 527, 530, 538, 540, 541, 543, 546, 547, 550], "access": [67, 68, 70, 215, 216, 219, 448, 453, 514, 517, 521], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 160, 168, 196, 201, 202, 203, 208, 209, 218, 219, 234, 251, 277, 292, 303, 307, 314, 330, 331, 332, 336, 338, 339, 356, 360, 395, 397, 398, 412, 413, 445, 452, 453, 457, 458, 459, 460, 463, 464, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 505, 507, 510, 513, 519, 521, 522, 524, 525, 526, 527, 530, 536, 537, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 219, 296, 297, 490], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 149, 226, 251, 269, 292, 483, 486, 544, 549], "instancenorm": [68, 547], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 485], "erf": 69, "layernorm": [70, 547], "fuselayernormoptim": 70, "remap": [70, 160], "smaller": [70, 251, 292, 486, 499, 538, 549], "fusedbatcnormv3": 70, "And": [70, 458, 459, 480, 499, 505, 547], "further": [70, 219, 457, 500, 501, 502, 504, 513, 519, 541], "restrict": [70, 160, 218, 219, 538, 546], "2d": [70, 547], "3d": [70, 539, 547], "kera": [70, 116, 183, 194, 214, 219, 236, 243, 258, 279, 286, 364, 369, 425, 427, 429, 464, 482, 488, 501, 509, 510, 545], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 215, 218, 219, 499, 538], "cfg": [71, 72, 168, 215, 349, 410, 445, 464, 465], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 463, 464, 465, 492, 499, 541, 544, 545, 547, 551], "ident": [74, 80, 195, 457, 486], "three": [74, 214, 234, 277, 338, 395, 397, 459, 463, 464, 481, 496, 500, 513, 527, 537, 541, 543, 546, 547, 548], "d": [74, 168, 486, 494, 520, 522, 528, 538, 553], "those": [74, 160, 342, 403, 453, 485, 486, 487, 494, 499, 500, 537, 538, 541, 550], "child": [74, 154, 161, 432, 548], "b1": 74, "c1c2": 74, "d1": [74, 453], "c1": 74, "c2": 74, "memori": [74, 149, 168, 298, 322, 327, 335, 371, 453, 481, 482, 487, 499, 500, 502, 536, 538, 541, 542, 544, 547, 550, 553], "bound": [74, 175, 188, 251, 292, 303, 339, 356, 398, 498, 549], "like": [74, 96, 98, 148, 149, 160, 194, 214, 219, 222, 223, 224, 236, 265, 266, 267, 279, 298, 307, 332, 335, 336, 360, 369, 394, 442, 458, 459, 460, 463, 464, 485, 486, 487, 495, 507, 522, 524, 537, 538, 541, 544, 545, 547, 550], "relu": [74, 78, 109, 459, 492, 547, 548], "relu6": [74, 492], "updat": [74, 151, 161, 168, 190, 196, 214, 332, 360, 394, 425, 450, 491, 498, 499, 505, 510, 513, 529, 538, 544, 547, 550, 551], "graphdef": [74, 148, 369, 393, 501], "grappler": [75, 492], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 153, 163, 167, 181, 191, 233, 251, 253, 254, 256, 257, 276, 292, 303, 307, 356, 360, 365, 369, 439, 543], "leverag": [75, 448, 460, 462, 486, 490, 502, 519, 537, 541, 544, 550], "built": [75, 183, 205, 220, 221, 225, 230, 234, 235, 240, 242, 244, 245, 247, 248, 251, 256, 258, 263, 264, 268, 271, 273, 277, 278, 283, 285, 287, 288, 289, 290, 292, 336, 360, 363, 371, 394, 442, 460, 463, 483, 488, 499, 512, 516, 536, 541, 546, 549, 550, 552], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 149, 165, 173, 459, 464, 482, 495, 499, 502, 538, 541, 543, 544, 547, 548], "print": [77, 154, 155, 194, 307, 360, 413, 432, 453, 488, 498, 499, 521, 522, 538, 547, 550], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 149, 158, 160, 175, 360, 394, 430, 452, 453, 458, 459, 463, 480, 483, 486, 487, 488, 494, 498, 499, 520, 527, 538, 540, 541, 543, 547, 552], "move": [78, 149, 160, 459, 525, 540, 544, 545], "squeez": [78, 459], "movesqueezeafterreluoptim": 78, "match": [78, 102, 160, 194, 303, 304, 356, 357, 486, 520, 544], "pre": [79, 116, 161, 194, 222, 223, 234, 265, 266, 277, 361, 394, 437, 442, 483, 486, 487, 499, 507, 524, 538, 539, 541, 544, 548, 550], "entranc": [79, 188, 225], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 545], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 167, 462, 539, 544, 547], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 169, 208, 219, 234, 251, 277, 292, 303, 356, 453, 463, 465, 480, 482, 483, 486, 488, 492, 499, 503, 507, 512, 516, 538, 540, 541, 544, 547, 548, 549, 550], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 502, 548], "switchoptim": 85, "condit": [85, 234, 235, 236, 251, 277, 278, 279, 292, 338, 395, 397, 483, 497, 549, 550], "graphrewriterbas": 86, "abstract": [86, 180, 188, 251, 292, 293, 298, 335, 463, 465, 494], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 502, 538], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 195, 236, 279, 300, 303, 353, 356, 457, 458, 459, 460, 463, 464, 465, 482, 483, 486, 487, 488, 492, 496, 497, 498, 499, 500, 501, 502, 503, 504, 512, 516, 521, 523, 524, 527, 532, 537, 538, 540, 541, 544, 547, 548, 550], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 453, 454], "th": [89, 90], "gpu": [89, 90, 97, 149, 160, 218, 219, 462, 480, 495, 499, 500, 504, 510, 519, 540, 541, 542], "freezevaluewithoutcalibtransform": 90, "95": [90, 307, 360, 498, 553], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 548], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 539, 553], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 371, 459, 463, 465, 482, 499, 507, 512, 516, 520, 526, 536, 538, 539, 546, 547, 550, 553], "better": [96, 218, 219, 222, 223, 265, 266, 314, 361, 394, 442, 487, 498, 500, 538, 539, 541, 544, 546, 547, 550], "perform": [96, 140, 149, 151, 175, 211, 218, 219, 234, 246, 247, 252, 277, 289, 298, 322, 327, 335, 342, 360, 371, 394, 399, 403, 458, 459, 460, 463, 464, 480, 483, 484, 485, 487, 489, 490, 495, 496, 498, 499, 500, 501, 502, 504, 508, 510, 513, 519, 525, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 548, 550, 552, 553], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 224, 249, 251, 254, 256, 257, 259, 267, 292, 371, 460, 499, 509, 513, 519, 527, 537, 541, 547, 549, 550], "postcseoptim": 98, "duplic": [98, 108, 339, 398], "quantizev2": 98, "decreas": [98, 524, 538], "size": [98, 149, 169, 198, 199, 226, 227, 233, 236, 242, 247, 251, 269, 270, 276, 279, 285, 289, 292, 330, 369, 371, 434, 453, 457, 464, 482, 483, 488, 491, 499, 519, 520, 536, 538, 541, 542, 544, 547, 549, 552, 553], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 200, 330, 538], "export": [101, 219, 299, 303, 352, 356, 462, 493, 505, 520, 522, 548, 551], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 219, 296, 297, 490], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 169, 434], "onnxopschema": 104, "domain": [104, 105, 218, 219, 538, 550], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 176, 202, 203, 208, 209, 298, 303, 335, 356, 369, 388, 393, 457, 459, 465, 481, 500, 512, 516, 519, 527, 538, 539, 547, 550], "get_max_supported_opset_vers": 104, "packag": [104, 463, 491, 496, 519, 520, 539, 545, 550], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 458, 527, 528, 532, 533, 534, 550], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 168, 234, 235, 247, 251, 277, 278, 289, 292, 377, 378, 382, 425, 464, 465, 549], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 194], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 160, 239, 251, 282, 292, 331, 483, 543, 546], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 219, 296, 297, 490], "input_shap": [105, 238, 281, 483], "input_dtyp": 105, "sometim": [105, 459, 485, 541], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 151, 210, 250, 251, 291, 292, 300, 305, 333, 353, 358, 490, 497, 508, 530, 533, 534, 538, 539, 544, 547, 549, 553], "datatyp": [105, 168, 543, 550, 553], "save_protobuf": 105, "path": [105, 140, 148, 161, 168, 194, 210, 214, 215, 234, 235, 236, 251, 277, 278, 279, 292, 293, 296, 297, 298, 309, 310, 311, 313, 322, 327, 331, 333, 335, 336, 349, 361, 369, 393, 394, 410, 448, 450, 453, 459, 460, 463, 483, 485, 488, 494, 498, 499, 500, 501, 505, 508, 519, 522, 524, 527, 532, 533, 534, 537, 544, 549, 552], "as_text": 105, "save": [105, 148, 159, 160, 191, 214, 218, 219, 236, 279, 296, 297, 336, 369, 394, 442, 443, 448, 453, 459, 463, 494, 499, 500, 501, 503, 507, 512, 516, 522, 527, 532, 533, 534, 537, 541, 542, 544, 547], "protobuf": [105, 369, 522], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 520], "dest": 105, "equal": [105, 143, 148, 174, 413, 430, 453, 538, 544], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 160, 236, 279, 307, 360, 464, 489, 493, 495, 498, 510, 519, 525, 529, 538, 540, 547, 550], "df": 105, "initialize_name_count": 105, "avoid": [105, 160, 168, 169, 234, 277, 459, 548], "conflict": [105, 491], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 251, 292, 549], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 151, 160, 196, 218, 219, 458, 486, 489, 493, 502, 507, 538, 544, 545, 547, 550], "const_node_valu": 105, "graph_output": 105, "constant": [105, 297, 299, 339, 341, 347, 352, 398, 402, 408, 446, 482, 492, 522, 549], "tf": [105, 116, 141, 148, 194, 214, 233, 234, 235, 236, 251, 276, 277, 278, 279, 292, 367, 369, 488, 496, 501, 539, 543, 545, 549], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 464], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 547], "pair": [107, 218, 219, 464, 482, 499, 500, 545], "befor": [107, 109, 154, 173, 187, 196, 201, 203, 208, 210, 212, 218, 219, 234, 277, 330, 332, 334, 432, 458, 465, 482, 483, 486, 487, 488, 491, 492, 496, 499, 514, 517, 523, 524, 541, 544, 546, 548, 550], "merg": [108, 226, 269, 349, 410, 514, 517, 548, 550], "mergeduplicatedqdqoptim": 108, "y": [109, 218, 219, 251, 292, 339, 398, 485, 491, 505, 547, 549], "shareqdqforitexypatternoptim": 109, "break": [109, 488, 499], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 194, 369, 546, 547, 548], "under": [110, 218, 219, 236, 279, 430, 441, 448, 452, 458, 460, 462, 483, 497, 498, 499, 502, 507, 508, 519, 527, 537, 538, 539, 542, 544, 548, 550], "singleton": [110, 453], "specifi": [110, 149, 160, 168, 175, 214, 218, 219, 222, 223, 251, 252, 265, 266, 292, 298, 303, 307, 309, 310, 313, 322, 327, 335, 336, 356, 360, 361, 394, 413, 442, 452, 453, 464, 465, 488, 492, 498, 499, 507, 521, 527, 531, 532, 533, 534, 536, 538, 540, 544, 549, 550, 552], "graphrewriterhelp": 110, "encapsul": [110, 222, 223, 265, 266, 361, 394, 442, 501], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 464], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 305, 358, 463, 548, 550], "fakequant": 113, "per_channel": [113, 464, 465, 492, 541, 552], "8": [113, 149, 160, 169, 218, 219, 250, 291, 434, 437, 459, 464, 481, 492, 496, 526, 527, 538, 539, 544, 547, 550, 553], "channel_axi": [113, 171, 174], "symmetr": [113, 149, 448, 465, 541, 544, 549, 550], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 149, 158, 168, 169, 175, 219, 336, 360, 371, 452, 480, 486, 487, 502, 525, 526, 527, 531, 533, 534, 538, 539, 544, 546], "There": [115, 336, 338, 395, 397, 485, 486, 492, 495, 499, 502, 524, 526, 527, 544, 547, 550, 552], "instanc": [115, 116, 175, 218, 219, 222, 223, 252, 265, 266, 304, 305, 307, 310, 313, 316, 317, 319, 320, 321, 339, 351, 357, 358, 360, 361, 394, 398, 412, 427, 442, 450, 453, 457, 458, 459, 463, 480, 499, 504, 510, 544, 550, 552, 553], "global": [115, 196, 218, 219, 316, 317, 319, 320, 321, 330, 412, 425, 453, 459, 499, 538, 540, 550], "class": [116, 158, 168, 191, 197, 204, 314, 361, 394, 459, 460, 464, 482, 483, 486, 498, 499, 510, 536, 537, 541, 545, 548, 550, 552], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 151, 202, 203, 208, 332, 482, 486, 487, 499, 538, 550], "process": [116, 140, 149, 155, 175, 196, 201, 202, 203, 210, 212, 214, 218, 219, 222, 223, 234, 235, 236, 247, 251, 252, 265, 266, 277, 278, 279, 289, 292, 330, 332, 334, 338, 339, 361, 394, 395, 397, 398, 442, 452, 453, 460, 463, 464, 465, 481, 482, 483, 486, 487, 488, 490, 499, 503, 524, 526, 527, 529, 537, 538, 541, 542, 544, 547, 548, 549, 552], "model_nam": [116, 218, 219], "special": [116, 160, 194, 371, 459, 482, 498, 499, 536, 538, 544, 551], "decid": [116, 218, 219, 301, 332, 354, 463, 464, 499, 541, 545, 550], "qat_clone_funct": 116, "leav": [116, 513], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 492], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 492], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 389, 393, 463], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 158, 160, 187, 219, 249, 299, 309, 313, 314, 315, 352, 427, 429, 437, 440, 445, 457, 483, 487, 488, 490, 494, 496, 499, 541, 547], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 212, 251, 292, 334, 336, 460, 485, 486, 487, 495, 499, 500, 512, 516, 527, 538, 540, 542, 547, 549, 550, 552], "staticmethod": 139, "function": [139, 140, 158, 202, 203, 208, 218, 219, 222, 223, 235, 265, 266, 278, 310, 313, 322, 327, 458, 459, 460, 463, 464, 465, 480, 482, 486, 487, 490, 494, 495, 496, 498, 499, 500, 510, 520, 526, 527, 538, 541, 544, 545, 546, 547, 548, 550, 551], "smoothquantcalibr": 140, "dataset": [140, 141, 149, 168, 210, 222, 223, 224, 226, 227, 231, 232, 233, 245, 254, 265, 266, 267, 269, 270, 274, 275, 276, 288, 299, 303, 304, 305, 307, 336, 352, 356, 357, 358, 360, 361, 394, 442, 445, 460, 462, 463, 464, 482, 488, 493, 498, 499, 507, 521, 522, 532, 538, 541, 544, 545, 547, 550, 552, 553], "outlier": [140, 464, 481, 485, 524, 544, 547], "smoothquantcalibrationllm": 140, "model_path": [140, 148, 169, 485, 532], "temp_path": 140, "weight_name_map": 140, "llm": [140, 141, 149, 154, 209, 432, 462, 538, 539, 542, 544, 547], "eval_func": [140, 222, 223, 265, 266, 336, 339, 342, 343, 345, 361, 394, 395, 398, 399, 403, 404, 406, 413, 442, 459, 482, 483, 485, 486, 487, 488, 499, 522, 541, 542, 543, 544, 550, 552], "temporari": [140, 168, 453, 457], "store": [140, 188, 190, 191, 194, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 218, 219, 236, 279, 325, 332, 494], "median": 140, "autotrack": [140, 148], "smoothquantscal": 141, "alpha": [141, 159, 163, 173, 190, 211, 439, 541, 550], "scales_per_op": 141, "individu": [141, 196, 330, 388, 393, 457, 527, 538, 547], "smoothquantscalerllm": 141, "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 296], "default_opset_vers": 142, "bia": [143, 218, 219, 544, 548], "correct": [143, 174, 214, 218, 219, 303, 304, 305, 307, 331, 356, 357, 358, 360, 457, 502], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 486, 495], "our": [143, 168, 218, 219, 460, 462, 490, 499, 520, 521, 524, 546, 551], "task": [143, 234, 241, 277, 284, 307, 360, 483, 486, 487, 490, 495, 498, 499, 522, 526, 529, 538, 542, 544, 547, 553], "close": [143, 174, 481, 528], "w_int8": [143, 174], "u": [143, 174, 502, 521, 526], "w_fp32": [143, 174], "varianc": [143, 174, 485], "differ": [143, 151, 170, 174, 176, 181, 187, 205, 218, 219, 227, 236, 251, 253, 270, 279, 292, 298, 307, 313, 315, 324, 335, 360, 371, 447, 457, 459, 460, 464, 482, 483, 485, 486, 488, 489, 494, 495, 498, 499, 501, 512, 516, 521, 524, 527, 536, 538, 541, 544, 547, 548, 549, 550], "wise": [143, 157, 159, 161, 169, 174, 218, 219, 339, 342, 398, 399, 403, 425, 434, 462, 464, 495, 524, 538, 544, 548, 550, 551, 552], "minim": [143, 151, 174, 339, 398, 464, 465, 481, 486, 489, 498, 499, 512, 516, 538, 541, 550], "scale_c": [143, 174], "shift": [143, 174, 247, 289, 520, 549], "notic": [143, 174, 252, 497, 500, 522, 545], "first": [143, 149, 160, 168, 174, 195, 216, 218, 219, 234, 277, 303, 349, 356, 399, 410, 430, 453, 459, 460, 463, 464, 465, 483, 485, 496, 500, 504, 513, 514, 517, 520, 522, 523, 524, 540, 541, 543, 544, 546, 547, 548, 550, 552], "empir": [143, 174], "solut": [143, 174, 462, 463, 464, 491, 504, 508, 513, 539, 544, 545, 547, 550, 551], "don": [143, 174, 196, 218, 219, 459, 525, 538, 550], "min": [143, 149, 169, 174, 188, 219, 434, 453, 485, 522, 524, 538, 541, 544, 547, 549, 550], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 175, 178, 194, 377, 378, 382, 449, 459, 510, 532, 533, 534, 546, 548, 550], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 486], "1024": [146, 236, 279, 505], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 453], "version1": [148, 430, 453], "version2": [148, 430, 453], "version1_gt_version2": [148, 453], "greater": [148, 430, 453, 532, 538, 550], "version1_eq_version2": [148, 453], "version1_gte_version2": [148, 430, 453], "version1_lte_version2": [148, 453], "disable_random": 148, "seed": [148, 149, 187, 218, 219, 315, 453, 499, 552], "disabl": [148, 218, 219, 457, 519, 524, 543, 544], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 243, 286, 453, 488, 494, 499, 502, 548], "is_ckpt_format": 148, "ckpt": [148, 361, 369, 394, 553], "folder": [148, 236, 241, 279, 284, 361, 394, 452, 483, 507, 512, 516, 525, 532, 533, 534, 544, 548], "is_saved_model_format": 148, "saved_model": [148, 309, 542], "get_estimator_graph": 148, "estim": [148, 149, 307, 360, 369, 550], "input_fn": [148, 369], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 151, 175, 188, 218, 219, 309, 361, 371, 394, 413, 442, 453, 459, 460, 462, 465, 480, 482, 483, 485, 486, 487, 488, 490, 493, 498, 499, 500, 501, 502, 506, 508, 521, 522, 530, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551], "scope": [148, 458, 464, 499], "onc": [148, 160, 183, 212, 258, 334, 338, 395, 397, 464, 465, 482, 519, 525, 538, 539, 550, 553], "both": [148, 219, 457, 460, 463, 487, 499, 503, 522, 524, 526, 538, 540, 541, 544, 547, 550], "compat": [148, 369, 458, 488, 501, 514, 517, 519, 538, 545], "v1": [148, 246, 247, 289, 304, 305, 307, 357, 358, 360, 369, 488, 490, 491, 498, 501, 523, 538, 545, 546, 547, 553], "suffix": 148, "time": [148, 160, 218, 219, 251, 292, 307, 339, 360, 371, 398, 430, 453, 464, 482, 485, 488, 491, 499, 507, 509, 512, 516, 519, 520, 525, 528, 532, 533, 536, 538, 539, 541, 544, 546, 548, 549, 550], "got": [148, 464, 491, 548], "iterator_sess_run": 148, "sess": [148, 369], "iter_op": 148, "feed_dict": [148, 233, 276], "output_tensor": [148, 369], "measur": [148, 252, 361, 447, 460, 463, 480, 485, 486, 498, 499, 544, 548, 550, 553], "integr": [148, 181, 253, 463, 499, 520, 521, 526, 544], "makeiter": 148, "feed": [148, 233, 276, 486, 538], "end": [148, 151, 201, 202, 203, 208, 218, 219, 234, 250, 251, 277, 291, 292, 332, 338, 395, 397, 463, 464, 465, 486, 487, 492, 496, 499, 513, 529, 536, 538, 548, 549, 550], "predict": [148, 251, 256, 292, 300, 304, 305, 307, 353, 357, 358, 360, 394, 460, 486, 498, 510, 544, 547, 548, 549], "pred": [148, 307, 360, 498], "collate_tf_pr": 148, "collat": [148, 168], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 206, 208, 234, 277, 332, 482, 483, 506, 538, 541, 544, 547, 550], "strip_unused_lib": 148, "offici": [148, 300, 304, 305, 353, 357, 358, 457, 547], "r1": 148, "15": [148, 492, 496, 533], "branch": [148, 458], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 149, 155, 160, 161, 165, 194, 205, 214, 216, 218, 219, 314, 331, 369, 413, 430, 443, 445, 453, 462, 464, 521, 522, 528, 539, 544, 548, 550], "val": [148, 214, 236, 239, 279, 282, 331, 485, 499, 524], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 522], "tf_diagnosis_help": 148, "fp32_model": [148, 155, 168, 297, 453, 463, 542], "quan_model": 148, "save_path": [148, 296, 297, 463, 501], "diagnosi": [148, 218, 219, 499, 522, 523, 524, 539, 545, 551], "generate_feed_dict": 148, "input_tensor": [148, 369], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 369], "associ": [148, 160, 303, 356], "search": [148, 154, 169, 187, 188, 194, 208, 215, 219, 222, 223, 265, 266, 298, 300, 310, 313, 314, 315, 335, 339, 353, 398, 432, 434, 453, 462, 495, 498, 502, 503, 513, 538, 539, 544, 548, 550, 551], "look": [148, 205, 463, 465, 492, 498, 521, 522, 524, 552], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 155, 160, 175, 195, 200, 207, 212, 236, 241, 252, 279, 284, 303, 330, 334, 336, 343, 356, 404, 453, 458, 459, 460, 482, 483, 486, 488, 490, 492, 499, 500, 526, 527, 529, 538, 541, 543, 544, 546, 547, 550, 552], "apply_inlin": 148, "func": [148, 168, 453, 541, 552], "inlin": [148, 502, 507, 510], "definit": [148, 163, 227, 232, 270, 275, 439], "concret": [148, 550], "new_graph_def": 148, "construct_function_from_graph_def": 148, "frozen_func": 148, "rebuild": [148, 503, 512, 516], "reconstruct": [148, 539], "new_func": 148, "parse_saved_model": 148, "output_tensor_nam": [148, 369], "_saved_model": 148, "load": [148, 158, 160, 161, 234, 250, 251, 277, 291, 292, 361, 369, 394, 452, 453, 464, 482, 512, 516, 520, 522, 540, 541, 542, 547], "reconstruct_saved_model": 148, "trackabl": 148, "destin": [148, 295, 309], "quant_weight_asym": 149, "v": [149, 151, 510, 519, 538, 550, 552], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 465, 541, 544, 550], "e": [149, 160, 196, 218, 219, 457, 458, 486, 489, 493, 502, 507, 508, 512, 516, 538, 544, 547, 550], "perturb": 149, "minimum": [149, 196, 218, 219, 465, 481, 485, 499, 510, 538, 547, 550], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 169, 434], "hand": [149, 460], "issu": [149, 457, 458, 461, 462, 496, 522, 524, 541, 548], "round_st": 149, "torch": [149, 151, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 168, 169, 173, 191, 194, 195, 197, 205, 215, 218, 219, 297, 361, 394, 430, 448, 452, 459, 462, 465, 466, 486, 488, 490, 499, 500, 501, 502, 507, 510, 522, 541, 544, 547, 548], "straight": 149, "through": [149, 155, 222, 223, 265, 266, 360, 361, 394, 462, 480, 492, 494, 495, 498, 505, 526, 536, 537, 538, 540, 541, 544, 547], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 241, 247, 284, 289, 437, 483, 488, 499, 549], "block_nam": 149, "cach": [149, 234, 277, 491, 541, 544], "get_modul": [149, 161, 165], "nn": [149, 154, 161, 163, 165, 168, 169, 194, 195, 205, 218, 219, 297, 361, 394, 430, 432, 434, 435, 439, 440, 441, 448, 452, 459, 486, 499, 501, 544, 547, 548], "set_modul": [149, 165, 168, 441], "new_modul": [149, 161, 165, 168, 441], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 154, 432, 465], "indic": [149, 160, 180, 218, 219, 227, 232, 234, 270, 275, 277, 293, 303, 314, 356, 459, 482, 491, 522, 527, 548], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 234, 251, 277, 292, 499], "input_oth": 149, "length": [149, 205, 218, 219, 234, 251, 277, 292, 303, 356, 462, 483, 498, 539, 541, 544, 549], "id": [149, 175, 250, 252, 291, 300, 302, 303, 304, 305, 353, 355, 356, 357, 358, 498, 527, 528, 532, 533, 534, 546, 550], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 160, 236, 251, 279, 292, 453, 457, 464, 483, 514, 517, 540, 544, 549], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 192, 194, 195, 218, 219, 236, 239, 246, 247, 279, 282, 289, 298, 308, 335, 459, 462, 480, 483, 495, 499, 500, 502, 504, 507, 508, 510, 512, 513, 514, 516, 517, 519, 526, 529, 537, 538, 541, 547, 549, 550], "mix": [149, 153, 162, 218, 219, 337, 349, 361, 396, 410, 462, 463, 470, 495, 502, 508, 509, 510, 551], "precis": [149, 153, 162, 218, 219, 222, 223, 265, 266, 298, 305, 307, 308, 335, 337, 349, 358, 360, 361, 371, 396, 399, 410, 453, 462, 463, 464, 470, 480, 481, 487, 488, 492, 495, 502, 508, 509, 510, 539, 540, 541, 544, 547, 550, 551], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 251, 292, 440, 457, 498, 502, 527, 532, 533, 534], "dim": [149, 251, 292, 544, 547, 549], "wrappermultiblock": 149, "module_list": 149, "act": [149, 214, 232, 275, 457], "singl": [149, 190, 212, 218, 219, 227, 234, 251, 270, 277, 292, 303, 332, 334, 356, 360, 394, 459, 483, 485, 496, 525, 538, 542, 547], "get_block_nam": 149, "network": [149, 155, 190, 196, 197, 332, 401, 460, 481, 486, 487, 490, 499, 521, 539, 541, 547, 550], "get_tokenizer_funct": 149, "token": [149, 234, 245, 248, 251, 277, 288, 290, 292, 299, 300, 301, 352, 353, 354, 448, 483, 498, 499, 521, 522, 544, 546, 547, 549, 550], "truncat": [149, 234, 251, 277, 292, 483, 549], "field": [149, 218, 219, 236, 279, 303, 356, 459, 463, 465, 488, 499, 546, 550, 552], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 489, 493], "42": [149, 187, 219, 315, 553], "test": [149, 175, 218, 219, 251, 292, 458, 462, 485, 496, 527, 532, 553], "shuffl": [149, 224, 226, 233, 254, 267, 269, 276, 482, 499, 541], "enable_full_rang": [149, 152, 169, 434, 437, 448, 542, 544], "cuda": [149, 160, 214, 500, 502, 504, 538, 541], "lr_schedul": [149, 499, 538], "dataset_nam": [149, 523], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 151, 218, 219, 486, 488, 499], "005": [149, 544], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 250, 291, 459, 528, 550], "512": 149, "sampler": [149, 224, 226, 228, 233, 254, 267, 269, 271, 276, 288, 299, 348, 409, 482, 488], "rand": [149, 502, 547], "n_block": [149, 169, 544], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 152, 169, 351, 412, 434], "signround": 149, "advanc": [149, 155, 218, 219, 457, 462, 464, 470, 538, 541, 552], "cheng": 149, "wenhua": 149, "et": [149, 151, 155, 481, 544, 547], "al": [149, 151, 155, 481, 544, 547], "via": [149, 298, 322, 327, 335, 457, 462, 488, 495, 499, 502, 519, 538, 539], "sign": [149, 351, 412, 458, 462, 465, 481, 521, 539, 541, 544, 546], "gradient": [149, 151, 190, 316, 462, 495, 499, 538, 539, 553], "descent": [149, 151, 194, 462, 539], "arxiv": [149, 154, 190, 208, 209, 332, 432, 437, 462, 481, 538, 539, 544, 547], "preprint": [149, 481, 538, 544, 547], "2309": 149, "05516": 149, "2023": [149, 462, 534, 538, 544, 547, 553], "pytorch": [149, 176, 181, 183, 184, 191, 194, 197, 200, 201, 204, 209, 210, 218, 219, 233, 234, 236, 239, 243, 251, 253, 258, 260, 276, 277, 279, 282, 286, 292, 297, 298, 307, 308, 328, 330, 333, 335, 343, 352, 360, 361, 370, 394, 404, 446, 453, 458, 459, 460, 462, 463, 464, 465, 481, 482, 486, 487, 489, 492, 495, 496, 499, 500, 501, 502, 504, 507, 508, 509, 510, 519, 521, 530, 533, 534, 538, 539, 540, 544, 545, 547, 550, 552], "empti": [149, 161, 218, 219, 505, 542], "layer1": [149, 194, 218, 219, 499, 538, 541], "layer_nam": [149, 219, 538], "rang": [149, 169, 237, 238, 251, 280, 281, 292, 413, 434, 442, 448, 462, 463, 465, 481, 483, 485, 486, 487, 488, 499, 522, 524, 537, 538, 541, 544, 547, 549], "learn": [149, 151, 462, 463, 464, 482, 483, 490, 494, 495, 496, 499, 500, 502, 504, 507, 508, 510, 513, 514, 517, 519, 538, 539, 541, 547, 548, 550, 551], "rate": [149, 151, 499, 538, 541], "schedul": [149, 189, 191, 201, 202, 203, 208, 209, 211, 218, 219, 299, 328, 332, 352, 499, 526, 527, 529, 537], "futur": [149, 173, 222, 223, 254, 265, 266, 495, 499, 510, 532, 533, 534, 551], "accumul": [149, 348, 409, 550], "step": [149, 151, 190, 200, 201, 202, 203, 207, 208, 212, 218, 219, 330, 332, 334, 442, 464, 465, 485, 486, 487, 488, 499, 514, 517, 519, 532, 533, 534, 537, 538, 540, 543, 544, 546, 547, 548, 550], "squar": [149, 307, 342, 360, 403, 485, 498, 524, 550], "gap": [149, 485, 501], "addit": [149, 168, 219, 442, 464, 465, 486, 513, 521, 527, 544, 545, 550], "keyword": [149, 160, 219], "argument": [149, 160, 219, 413, 440, 460, 485, 523, 524, 527, 530, 532, 533, 534, 544], "autooptround": 149, "adamw": [149, 183, 258], "autoadamround": 149, "sgd": [151, 183, 218, 219, 258, 486, 499, 540, 552], "param": [151, 168, 175, 183, 224, 252, 258, 267, 307, 339, 360, 398, 453, 463, 501, 550], "requir": [151, 168, 169, 218, 219, 225, 336, 369, 393, 459, 463, 464, 480, 481, 482, 485, 487, 488, 492, 499, 500, 501, 503, 513, 519, 521, 526, 527, 530, 533, 534, 538, 541, 544, 545, 546, 547, 548, 550, 552], "momentum": [151, 190, 332, 495, 499, 538, 552], "weight_decai": [151, 188, 499, 552], "nesterov": [151, 499, 552], "maxim": [151, 499, 538, 550], "foreach": 151, "differenti": 151, "stochast": 151, "align": [151, 251, 292, 457, 544, 549], "rule": [151, 485, 502, 538], "110mm": 151, "4pt": 151, "textbf": 151, "gamma": 151, "theta_0": 151, "f": [151, 160, 191, 486, 488, 541, 544, 547], "theta": 151, "lambda": [151, 160, 542], "decai": 151, "hspace": 151, "13mm": 151, "mu": [151, 485], "tau": 151, "textit": 151, "ex": 151, "ldot": 151, "5mm": 151, "g_t": 151, "leftarrow": 151, "nabla_": 151, "f_t": 151, "theta_": 151, "neq": 151, "10mm": 151, "15mm": 151, "_t": 151, "_": [151, 222, 223, 265, 266, 394, 459, 460, 462, 463, 464, 481, 485, 486, 488, 490, 492, 499, 500, 501, 502, 508, 512, 514, 516, 517, 524, 527, 528, 536, 538, 541, 544, 545, 546, 547, 548, 550, 552], "g_": 151, "theta_t": 151, "bf": 151, "formula": [151, 538, 547], "On": [151, 541, 553], "deep": [151, 216, 430, 462, 463, 464, 482, 495, 496, 499, 500, 502, 504, 507, 508, 510, 513, 519, 539, 541, 550, 551, 553], "l2": [151, 219, 538], "penalti": [151, 300, 301, 353, 354, 498], "instead": [151, 215, 216, 219, 233, 276, 453, 505, 507, 510, 525, 538, 544], "xdoctest": [151, 160], "skip": [151, 160, 548, 550], "9": [151, 190, 218, 219, 459, 496, 499, 538, 540, 547, 550, 552, 553], "zero_grad": [151, 488, 499, 538], "loss_fn": 151, "backward": [151, 442, 486, 487, 488, 499, 537, 538, 541, 545], "subtli": 151, "sutskev": 151, "some": [151, 192, 194, 218, 219, 234, 277, 331, 464, 465, 483, 485, 490, 496, 498, 499, 521, 522, 523, 524, 527, 536, 538, 541, 543, 544, 547, 548, 550, 551, 553], "written": [151, 499], "v_": 151, "p_": 151, "denot": [151, 547], "veloc": 151, "respect": [151, 457, 492, 538, 547, 552], "contrast": [151, 196, 330, 549], "emploi": 151, "form": [151, 305, 358, 485, 486, 519], "analog": 151, "modifi": [151, 205, 236, 279, 393, 412, 459, 465, 488, 492, 523, 524, 538, 552], "d_p_list": 151, "momentum_buffer_list": 151, "has_sparse_grad": 151, "see": [151, 158, 251, 292, 300, 353, 457, 458, 459, 461, 497, 499, 512, 513, 516, 519, 520, 524, 525, 544, 547, 548, 550], "actawareweightqu": 152, "example_input": [152, 162, 165, 167, 168, 169, 218, 219, 297, 452, 490], "algo": [152, 445], "bf16modulewrapp": 153, "bf16modul": 153, "mixed_precision_model": 153, "bf16_symbolic_trac": 153, "fx_sub_module_list": 153, "trace": [153, 155, 166, 168, 194, 218, 219, 297, 401, 459, 509, 550], "_description_": 153, "is_leaf": [154, 432], "judg": [154, 432], "trace_gptq_target_block": [154, 432], "module_typ": [154, 432], "modulelist": [154, 432], "sequenti": [154, 232, 275, 336, 338, 395, 397, 432, 550], "stack": [154, 432], "structur": [154, 195, 206, 207, 218, 219, 332, 350, 411, 432, 453, 495, 518, 520, 523, 532, 538, 539, 541, 548, 551, 553], "critic": [154, 205, 432, 457], "gptq_related_block": [154, 432], "embed": [154, 168, 432, 481, 538], "transformers_pr": [154, 432], "todo": [154, 234, 237, 277, 280, 303, 349, 356, 410, 432], "transformers_nam": [154, 432], "find_lay": [154, 432], "find_layers_nam": [154, 432], "log_quantizable_layers_per_transform": [154, 432], "transformer_block": [154, 432], "maxq": [154, 432], "gptquantiz": [154, 432], "nsampl": [154, 169, 432, 437, 544], "use_max_length": [154, 169, 432, 437], "pad_max_length": [154, 169, 432, 437], "layer_wis": [154, 169, 432, 437, 452, 542], "compress": [154, 299, 322, 327, 352, 371, 432, 442, 448, 455, 462, 470, 486, 495, 499, 519, 521, 536, 537, 538, 539, 541, 547, 551, 553], "pretrain": [154, 432, 448, 502, 508], "url": [154, 236, 279, 432, 458, 497, 530, 531, 538], "org": [154, 190, 208, 209, 303, 332, 356, 432, 437, 459, 485, 496, 514, 517, 538], "2210": [154, 432, 437, 544], "17323": [154, 432, 437, 544], "node_collector": 155, "hook": [155, 180, 184, 205, 260, 261, 322, 327, 445, 486, 487, 499, 538, 547, 548], "record": [155, 168, 181, 184, 234, 235, 236, 242, 253, 260, 277, 278, 279, 285, 453, 483, 524, 544, 546, 548, 550], "hessiantrac": 155, "q_model": [155, 159, 219, 309, 394, 425, 429, 459, 462, 482, 483, 485, 488, 490, 493, 494, 498, 499, 501, 521, 522, 541, 542, 543, 544], "criterion": [155, 180, 182, 183, 189, 190, 196, 201, 202, 203, 205, 208, 209, 213, 218, 219, 255, 258, 299, 352, 486, 487, 499, 538, 541, 547, 550, 552], "yao": 155, "zhewei": 155, "pyhessian": 155, "len": [155, 219, 251, 292, 483, 488, 549], "2020": 155, "ieee": [155, 500, 547], "intern": [155, 232, 275, 349, 410, 482, 483, 498, 538], "confer": [155, 538, 547], "big": [155, 485, 544], "dong": 155, "zhen": 155, "hawq": [155, 401, 550], "v2": [155, 401, 482, 488, 490, 491, 496, 508, 545, 547, 550, 551, 553], "system": [155, 160, 175, 252, 453, 480, 505, 538, 553], "33": [155, 553], "18518": 155, "18529": 155, "openvinotoolkit": 155, "nncf": 155, "develop": [155, 371, 458, 459, 496, 499, 500, 502, 508, 519, 525, 538, 539, 543, 546], "hessian_trac": 155, "compare_weight": 155, "float_dict": 155, "ani": [155, 160, 303, 305, 348, 356, 358, 388, 393, 409, 413, 440, 450, 453, 457, 462, 465, 488, 502, 507, 520, 521, 525, 526, 538, 546, 550], "quantized_dict": 155, "compar": [155, 307, 360, 453, 487, 498, 522, 538, 541, 544, 546, 547, 548, 550], "being": [155, 303, 356, 465, 527], "wt_compare_dict": 155, "float_model": 155, "state_dict": [155, 488, 544, 548], "qmodel": 155, "compute_error": 155, "state": [155, 195, 465, 505, 538], "weight_dict": 155, "hawq_top": 155, "enable_act": 155, "modul": [156, 157, 191, 197, 204, 312, 318, 328, 329, 438, 459, 482, 486, 495, 498, 499, 501, 538, 540, 543, 544, 548, 551], "portabl": 158, "serial": [158, 160], "copyreg": 158, "mechan": [158, 190, 538, 546, 551], "pickler": 158, "pickletool": 158, "comment": [158, 457, 464, 483, 498, 499, 544, 549], "unpickl": [158, 160], "misc": [158, 497], "format_vers": 158, "compatible_format": 158, "except": [158, 160, 413, 453, 525, 541, 542], "pickleerror": 158, "pickl": [158, 160], "picklingerror": 158, "unpicklingerror": 158, "problem": [158, 234, 277, 307, 360, 498, 500, 520], "secur": [158, 462, 521, 539, 554], "violat": 158, "also": [158, 195, 233, 236, 251, 276, 279, 292, 300, 353, 360, 371, 394, 458, 460, 463, 464, 465, 482, 485, 489, 493, 495, 498, 499, 502, 507, 512, 513, 516, 519, 520, 521, 524, 525, 536, 538, 539, 541, 543, 544, 547, 550], "includ": [158, 181, 190, 194, 196, 211, 213, 218, 219, 234, 236, 243, 251, 253, 277, 279, 286, 292, 298, 308, 330, 335, 413, 453, 457, 463, 464, 465, 482, 483, 485, 496, 497, 498, 499, 502, 505, 508, 513, 525, 529, 532, 533, 534, 538, 541, 543, 544, 548, 550], "necessarili": 158, "limit": [158, 188, 339, 398, 453, 462, 485, 486, 541, 544, 545, 548], "attributeerror": [158, 413], "eoferror": 158, "importerror": [158, 491], "indexerror": 158, "layerwisequ": 159, "pretrained_model_name_or_path": [159, 161], "op_cfg": 159, "output_dir": [159, 448, 499, 507, 508, 523, 524, 530, 533, 534], "5": [159, 173, 181, 218, 219, 238, 247, 253, 281, 289, 307, 360, 394, 463, 483, 490, 492, 496, 498, 499, 524, 529, 532, 533, 538, 540, 541, 544, 547, 549, 550, 552, 553], "order": [159, 168, 300, 301, 336, 339, 342, 351, 353, 354, 398, 403, 412, 459, 485, 498, 522, 540, 544, 547, 548, 550], "memomeri": 159, "file_lik": 160, "map_loc": 160, "pickle_modul": [160, 191], "weights_onli": 160, "pickle_load_arg": 160, "facil": 160, "treat": [160, 482], "storag": [160, 462, 493, 498, 521, 524, 544, 547], "thei": [160, 252, 413, 457, 486, 492, 499, 507, 522, 525, 536], "deseri": 160, "were": [160, 307, 360, 505, 538], "fail": [160, 459, 482, 490, 528], "becaus": [160, 200, 205, 251, 292, 330, 459, 524, 541, 547, 549, 550], "doesn": [160, 251, 292, 463, 488, 499, 500, 520, 552], "certain": [160, 545, 546], "howev": [160, 525, 538, 544, 547], "altern": [160, 218, 219, 394], "callabl": [160, 218, 219, 305, 358, 425, 429, 435, 440, 442, 482], "locat": [160, 170, 214, 251, 292, 488, 505, 512, 516, 519, 527, 541, 545, 549, 552], "resid": 160, "tag": [160, 369, 547, 548], "wa": [160, 218, 219, 463, 499, 524, 525, 528, 539, 550], "builtin": [160, 488], "device_id": 160, "either": [160, 219, 303, 356, 503, 507, 527, 537, 540, 541], "final": [160, 194, 201, 214, 332, 464, 499, 505, 536, 538, 541, 545, 550], "alreadi": [160, 175, 236, 250, 252, 279, 291, 463, 483, 495, 514, 517, 521, 530, 550], "right": [160, 247, 289, 303, 356, 457, 458, 459, 519, 525, 547, 549], "fall": [160, 168], "back": [160, 168, 251, 257, 292, 485, 519, 525], "behavior": [160, 457, 463, 464, 465, 492, 501, 544, 548, 550, 552], "wasn": 160, "appear": [160, 457, 513, 519, 521], "ones": [160, 303, 356, 538], "put": [160, 236, 279, 483, 486], "user": [160, 175, 183, 194, 206, 214, 218, 219, 222, 223, 236, 239, 243, 251, 252, 258, 265, 266, 279, 282, 286, 292, 298, 322, 327, 333, 335, 336, 360, 361, 371, 394, 399, 412, 442, 453, 459, 460, 462, 463, 464, 465, 470, 480, 482, 486, 487, 490, 492, 495, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 513, 519, 526, 527, 528, 529, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 545, 547, 548, 549, 550, 554], "register_packag": 160, "readlin": 160, "tell": [160, 360, 394, 540], "seek": [160, 544], "o": [160, 413, 496, 504, 522], "pathlik": 160, "metadata": 160, "primit": 160, "unless": [160, 492], "implicitli": 160, "known": [160, 254, 339, 398, 499, 538, 541, 548, 550], "insecur": [160, 521], "possibl": [160, 252, 485, 521, 537, 538, 542, 543, 550], "construct": [160, 234, 237, 238, 241, 249, 254, 256, 257, 259, 277, 280, 281, 284, 360, 365, 369, 412, 445, 457, 464, 465, 483, 488, 538, 550], "malici": 160, "arbitrari": [160, 499, 537], "code": [160, 194, 222, 223, 252, 265, 266, 309, 333, 336, 394, 442, 459, 462, 463, 464, 465, 483, 486, 487, 488, 494, 495, 497, 498, 502, 504, 506, 507, 508, 510, 513, 519, 523, 524, 526, 527, 528, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549], "never": [160, 550], "could": [160, 165, 173, 196, 222, 223, 236, 265, 266, 279, 336, 361, 394, 442, 457, 459, 487, 499, 537, 538, 541, 544, 545, 547, 551], "come": [160, 550], "untrust": 160, "unsaf": 160, "tamper": 160, "trust": [160, 485, 521], "load_state_dict": 160, "ram": 160, "surg": 160, "checkpoint": [160, 369, 452, 501], "By": [160, 194, 218, 219, 300, 353, 464, 465, 498, 501, 512, 513, 516, 538, 539, 544, 550], "decod": [160, 246, 247, 289, 300, 353, 498, 549], "byte": 160, "utf": [160, 250, 291], "unicodedecodeerror": 160, "ascii": 160, "codec": 160, "0x": 160, "incorrect": 160, "extra": [160, 305, 358, 499], "encod": [160, 303, 356, 522, 549], "latin1": 160, "them": [160, 194, 234, 277, 459, 465, 482, 485, 490, 492, 494, 522, 525, 537, 538, 544, 550], "keep": [160, 205, 214, 331, 399, 459, 463, 518, 519, 545], "later": [160, 165, 173, 526, 527, 548], "byte_arrai": 160, "undefin": [160, 214, 331], "filepath": [160, 453], "pt": [160, 452, 496, 501, 523, 539, 541, 543, 544], "onto": 160, "loc": 160, "bytesio": 160, "open": [160, 255, 299, 352, 445, 455, 457, 462, 490, 491, 499, 514, 517, 520, 521, 525, 526, 527, 539, 545], "rb": 160, "buffer": 160, "get_children": 161, "get_named_children": 161, "dowload_hf_model": 161, "repo_id": 161, "cache_dir": 161, "repo_typ": 161, "revis": 161, "download": [161, 236, 279, 483, 485, 496, 524, 530, 545], "hug": [161, 462, 526, 539], "face": [161, 457, 462, 470, 502, 506, 526, 528, 539, 545, 553], "hf": [161, 547, 553], "hub": [161, 462, 489, 493, 510], "load_empty_model": [161, 542], "automodelforcausallm": 161, "get_super_module_by_nam": 161, "module_nam": [161, 190, 191, 201, 202, 203, 204, 206, 207, 208, 209, 211, 213, 332, 453], "father": [161, 194], "update_modul": 161, "load_layer_wise_quantized_model": 161, "load_tensor_from_shard": 161, "shard": 161, "load_tensor": 161, "ipex_mixed_precis": 162, "fakeaffinetensorquantfunct": [163, 439], "affin": [163, 439, 541], "teqlinearfakequ": [163, 439], "orig_lay": [163, 439], "mullinear": [163, 169, 439], "input_scal": [163, 439], "detector": 164, "transformerbasedmodelblockpatterndetector": 164, "pattern_lst": 164, "block_pattern": 164, "detect": [164, 168, 194, 218, 219, 303, 307, 356, 360, 365, 458, 459, 502, 509, 510, 538, 550], "ffn": [164, 205], "torchsmoothqu": [165, 547], "q_func": [165, 222, 223, 265, 266, 339, 342, 343, 345, 395, 398, 399, 403, 404, 406, 463, 464, 499, 550], "traced_model": [165, 166], "whose": [165, 173, 196, 331, 369, 494, 547, 550], "absorb": [165, 168, 169, 173, 544], "trace_and_fuse_sub_graph": 166, "is_qat": 166, "tequant": 167, "absorb_to_lay": [167, 168, 169], "extra_config": [167, 169], "trainabl": [167, 462, 539, 544], "move_input_devic": 168, "auto": [168, 192, 194, 218, 219, 337, 352, 396, 402, 453, 459, 481, 502, 505, 507, 509, 510, 538, 541, 544], "kind": [168, 499], "forward_wrapp": 168, "get_embedding_contigu": 168, "contigu": 168, "is_fused_modul": 168, "_propagate_qconfig_help": 168, "collate_torch_pr": 168, "collate_result": 168, "input2tupl": 168, "append_attr": 168, "fx_model": 168, "fx_white_list": 168, "append": [168, 336, 339, 398, 459, 487, 499, 537], "graphmodul": [168, 459, 543], "dir": [168, 234, 277, 448, 452, 483, 491, 494], "generate_activation_observ": 168, "smooth_quant_en": 168, "observ": [168, 465, 544, 546, 548, 550], "what": [168, 201, 232, 275, 360, 394, 442, 457, 539], "check_cfg_and_qconfig": 168, "op_infos_from_cfg": 168, "output_tensor_ids_op_nam": 168, "paser_cfg": 168, "ops_nam": 168, "get_quantizable_ops_from_cfg": 168, "input_tensor_ids_op_nam": 168, "update_sq_scal": 168, "ipex_config_path": 168, "smoothquant_scale_info": 168, "ipex_config": 168, "json": [168, 235, 251, 278, 292, 452, 483, 501, 520, 527, 528, 532, 533, 534, 544, 549], "auto_copi": 168, "fetch_modul": [168, 441], "op_nam": [168, 215, 218, 219, 350, 411, 441, 453, 454, 464, 499, 538, 548], "simple_infer": 168, "get_example_input": 168, "example_inp": 168, "get_fallback_ord": 168, "confidence_batch": [168, 550], "fallback": [168, 219, 342, 343, 401, 403, 404, 490, 500, 522, 543, 550], "requantize_cfg": 168, "confid": 168, "ordered_op": 168, "get_mse_order_per_fp32": 168, "influenc": [168, 538], "last": [168, 190, 214, 218, 219, 482, 500, 502, 504, 509, 513, 541, 544, 547], "fallback_ord": 168, "get_mse_order_per_int8": 168, "get_torch_vers": 168, "match_datatype_pattern": 168, "calculate_quant_min_max": 168, "unsign": [168, 351, 412, 465, 544], "qmin": 168, "qmax": 168, "get_depth": 168, "depth": [168, 486, 543], "get_dict_at_depth": 168, "target_depth": 168, "nest": [168, 216, 430], "get_element_under_depth": 168, "ops_lst": 168, "get_op_type_by_nam": 168, "quantizable_op": 168, "collect_weight_info": 168, "fc": [168, 219, 538], "_type_": [168, 448], "get_module_input_output": 168, "module_hook_config": 168, "input_func": 168, "output_func": 168, "help": [168, 184, 260, 309, 501, 502, 508, 519, 527, 532, 533, 534, 544, 550, 551], "module_name_list": 168, "fc1": [168, 169], "preprocess": [168, 218, 219, 234, 251, 277, 292, 412, 445, 488, 549], "usag": [168, 176, 233, 276, 303, 309, 336, 356, 413, 430, 441, 464, 483, 488, 489, 502, 510, 521, 527, 532, 533, 534, 536, 540, 544, 549], "input_valu": 168, "output_valu": 168, "total_valu": 168, "get_absorb_lay": 168, "supported_lay": 168, "no_absorb_lay": 168, "allow": [168, 339, 398, 486, 488, 498, 499, 500, 521, 526, 538, 540, 544, 547, 550, 552], "absorpt": 168, "eg": [168, 216, 236, 279, 430, 483, 540], "absorbed_1": 168, "xx": 168, "get_block_prefix": 168, "block_list": 168, "block_num": 168, "block_prefix": 168, "get_hidden_st": 168, "calib": [168, 464], "rest": [168, 526, 527, 532, 533, 534], "part": [168, 192, 201, 330, 332, 459, 496, 500, 514, 517, 527, 529, 538, 542, 547, 551], "total_block_kwarg": 168, "total_block_arg": 168, "quantize_4bit": [169, 434], "quantil": [169, 434, 550], "nf4": [169, 434, 462, 544], "return_int": [169, 434, 437], "fp4": [169, 434, 462, 544], "q_tensor": [169, 434], "qdq_weight_asym": [169, 434], "choos": [169, 236, 279, 434, 448, 495, 507, 539, 545, 547, 550, 552], "qdq_weight_sym": [169, 434], "full_rang": [169, 434], "amax": [169, 434], "qdq_weight_actor": [169, 434], "select": [169, 211, 214, 219, 234, 277, 434, 448, 459, 460, 481, 495, 496, 519, 538, 541, 544, 548, 550], "search_clip": [169, 434], "best": [169, 180, 251, 292, 293, 298, 335, 342, 403, 434, 457, 460, 496, 502, 508, 519, 525, 536, 541, 544, 547, 549, 550], "num": [169, 434, 453], "best_clip_ratio": [169, 434], "group_dim": [169, 434, 437], "gptq_perm": [169, 434], "perm": [169, 251, 292, 434, 549], "int32": [169, 434, 448, 483, 544], "absorb_lay": 169, "absorb_dict": 169, "absorbed_lay": 169, "fc3": 169, "oom": 169, "teq_quant": 169, "quant_weight_w_scal": [169, 434], "algorithm_registri": 170, "algorithm_typ": 170, "registr": [170, 236, 243, 251, 279, 286, 292, 325], "algorithmschedul": 170, "conf": [170, 175, 180, 219, 222, 223, 252, 265, 266, 309, 316, 317, 319, 320, 321, 322, 327, 339, 342, 343, 345, 349, 361, 371, 394, 395, 398, 399, 403, 404, 406, 410, 413, 442, 459, 460, 462, 465, 480, 486, 493, 494, 499, 500, 501, 521, 523, 524, 537, 541, 542, 543, 544, 546, 547, 550], "control": [170, 218, 219, 459, 499, 525, 538, 550], "phase": [170, 460, 499, 538, 541, 543, 550], "fastbiascorrect": [171, 174], "fast_bias_correct": [172, 218, 219, 352, 541], "weight_correct": [172, 218, 219, 352, 541], "weightcorrect": 174, "1e": [174, 547, 552], "05": [174, 219, 307, 360, 498, 547, 553], "evalu": [175, 180, 196, 218, 222, 223, 234, 252, 265, 266, 277, 293, 300, 303, 304, 305, 307, 309, 353, 356, 357, 358, 360, 361, 371, 394, 442, 445, 460, 463, 464, 483, 486, 487, 494, 495, 498, 499, 500, 502, 508, 510, 513, 519, 536, 538, 541, 546, 547, 548, 550, 552], "set_env_var": [175, 252], "env_var": [175, 252], "overwrite_exist": [175, 252], "env": [175, 252, 491, 532, 533, 534], "set_all_env_var": [175, 252], "physic": [175, 252, 457, 480, 527], "core": [175, 218, 219, 252, 458, 480, 497, 512, 516, 527, 553], "get_architectur": [175, 252], "architectur": [175, 252, 310, 313, 462, 480, 486, 499, 526, 538, 539, 544, 551], "get_threads_per_cor": [175, 252], "thread": [175, 218, 219, 252, 388, 393, 482, 529], "get_thread": [175, 252], "get_physical_id": [175, 252], "socket": [175, 252, 453, 527, 529, 553], "get_core_id": [175, 252], "get_bounded_thread": [175, 252], "core_id": [175, 252], "bind": [175, 252], "run_inst": 175, "b_dataload": [175, 218, 219, 480, 499], "b_func": [175, 480], "benchmarkconfig": [175, 218, 219, 480, 485, 499], "goal": [175, 293, 298, 322, 327, 335, 361, 394, 464, 482, 537, 541, 550], "prefer": [175, 298, 335, 394, 538, 544], "space": [175, 187, 188, 202, 203, 208, 209, 218, 219, 222, 223, 265, 266, 298, 305, 310, 313, 314, 315, 335, 339, 342, 349, 358, 361, 394, 398, 403, 410, 457, 458, 460, 463, 464, 465, 538, 541, 552], "etc": [175, 180, 250, 291, 293, 298, 305, 322, 327, 335, 358, 361, 394, 452, 462, 486, 495, 521, 525, 538, 546, 550], "generate_prefix": 175, "core_list": 175, "command": [175, 252, 442, 485, 488, 502, 504, 507, 512, 516, 520, 521, 523, 524, 525, 527], "numactl": [175, 491, 505, 513], "call_on": 175, "cmd": 175, "log_fil": [175, 387, 392], "window": [175, 480, 496, 519, 520], "config_inst": 175, "raw_cmd": 175, "multi": [175, 192, 194, 205, 303, 356, 360, 394, 460, 482, 483, 495, 499, 536, 538, 541, 550], "trigger": [175, 201, 332], "summary_benchmark": 175, "summari": [175, 442, 485, 514, 517, 548, 553], "profil": [175, 219, 352], "benchmark_with_raw_cmd": 175, "fit_with_raw_cmd": 175, "cores_per_inst": [175, 218, 219, 480, 499, 540], "num_of_inst": [175, 218, 219, 480, 499, 540], "fit": [175, 196, 218, 219, 339, 361, 394, 398, 413, 442, 459, 462, 480, 482, 483, 485, 488, 493, 494, 498, 499, 500, 501, 521, 522, 538, 541, 542, 543, 544], "pb": [175, 218, 219, 361, 369, 394, 462, 480, 488, 493, 499, 501, 521, 524, 532, 548, 553], "eval_dataload": [175, 218, 219, 222, 223, 265, 266, 336, 339, 342, 343, 345, 361, 394, 395, 398, 399, 403, 404, 406, 442, 480, 494, 498, 499, 521, 541, 542, 550], "register_config": 176, "framework_nam": 176, "algo_nam": 176, "examplealgorithm": 176, "examplealgorithmconfig": 176, "baseconfig": [176, 427, 429, 440], "white_list": [176, 427, 437], "op_name_or_module_typ": [176, 427, 437], "default_white_list": [176, 427, 437], "composableconfig": 176, "logger": [177, 299, 328, 352, 443, 446, 453], "msg": [178, 449, 528, 532, 533], "debug": [178, 413, 449, 485, 512, 516, 520, 550, 551], "fatal": [178, 449], "warn": [178, 449], "alia": [178, 449, 453, 504, 509], "compon": [180, 293, 299, 336, 352, 459, 485, 488, 496, 497, 502, 519, 527, 537, 538], "quantizationawaretrainingcallback": 180, "pruningcallback": 180, "distillationcallback": 180, "basecallback": 180, "design": [180, 233, 256, 261, 276, 360, 399, 460, 462, 499, 507, 510, 538, 541, 551], "mainli": [180, 212, 261, 334, 462, 499, 538, 541], "prune": [180, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 218, 219, 261, 262, 299, 316, 317, 319, 320, 321, 325, 327, 328, 330, 331, 332, 334, 336, 352, 453, 462, 488, 489, 492, 493, 495, 537, 539, 551, 552], "distil": [180, 189, 218, 219, 253, 260, 261, 299, 352, 462, 489, 493, 495, 537, 551, 552], "In": [180, 198, 199, 200, 205, 206, 207, 211, 219, 233, 261, 276, 303, 330, 332, 356, 371, 457, 459, 460, 462, 463, 464, 482, 483, 485, 486, 487, 488, 498, 499, 509, 512, 513, 516, 522, 523, 524, 525, 532, 533, 534, 536, 537, 538, 541, 543, 544, 546, 547, 548, 549, 550, 551], "adaptor": [180, 218, 219, 351, 412, 417, 425, 445, 462, 465, 495, 542, 543, 545, 547, 548, 551], "deriv": [180, 190, 198, 199, 200, 206, 207, 208, 209, 210, 211, 212, 213, 293, 330, 332, 334, 427, 437], "pipelin": [180, 293, 310, 311, 336, 458, 487, 499, 537], "knowledg": [180, 181, 218, 219, 253, 293, 487, 489, 493, 495, 499, 501, 552], "transfer": [180, 241, 284, 293, 483, 486, 487, 499, 547], "teacher": [180, 218, 219, 293, 486, 487, 499, 553], "student": [180, 184, 218, 219, 234, 260, 277, 293, 483, 486, 487, 553], "distillation_conf": [180, 215, 293], "_epoch_ran": [180, 293], "integ": [180, 200, 201, 218, 219, 293, 303, 307, 314, 330, 332, 356, 360, 413, 463, 465, 481, 541, 544, 547, 550], "much": [180, 190, 218, 219, 251, 292, 293, 486, 513, 547, 549], "epoch": [180, 202, 203, 208, 293, 332, 442, 482, 486, 487, 488, 499, 537, 538, 552], "ran": [180, 293], "eval_frequ": [180, 293], "frequenc": [180, 201, 218, 219, 293, 332, 499, 538, 552], "term": [180, 202, 203, 208, 209, 211, 293, 458, 481, 486, 497, 498, 536, 537, 550], "best_scor": [180, 293], "metric": [180, 218, 219, 222, 223, 255, 265, 266, 293, 298, 299, 314, 322, 327, 335, 336, 352, 361, 394, 442, 445, 460, 463, 464, 483, 485, 488, 499, 500, 521, 541, 546, 547, 548, 550, 551, 552, 553], "best_model": [180, 293, 452, 544], "found": [180, 293, 462, 486, 500, 507, 524, 528, 547, 550, 553], "critet": [181, 253], "tensorflowcrossentropyloss": [181, 253], "pytorchcrossentropyloss": [181, 253], "tensorflowsparsecategoricalcrossentropi": 181, "tensorflowknowledgedistillationloss": [181, 253], "pytorchknowledgedistillationloss": [181, 253, 499], "pytorchintermediatelayersknowledgedistillationloss": [181, 253], "tensorflowcriterion": [181, 253], "pytorchcriterion": [181, 253], "criterion_registri": [181, 253], "criterion_typ": [181, 253], "registry_criterion": [181, 253], "param_dict": [181, 183, 253, 258], "crossentropyloss": [181, 218, 219, 486, 499], "sparsecategoricalcrossentropyloss": 181, "knowledgedistillationframework": [181, 253], "student_model": [181, 219, 253, 499], "teacher_model": [181, 218, 219, 253, 486, 487, 499], "knowledgedistillationloss": [181, 253, 499, 552], "temperatur": [181, 218, 219, 253, 499, 552], "loss_typ": [181, 187, 218, 219, 253, 499, 552], "ce": [181, 218, 219, 253, 499, 552], "loss_weight": [181, 218, 219, 253, 499, 552], "pytorchknowledgedistillationlosswrapp": [181, 253], "tensorflowknowledgedistillationlosswrapp": 181, "tensorflowknowledgedistillationlossextern": [181, 253], "intermediatelayersknowledgedistillationloss": [181, 253], "layer_map": [181, 219, 253, 486], "add_origin_loss": [181, 219, 253], "pytorchintermediatelayersknowledgedistillationlosswrapp": [181, 253], "selfknowledgedistillationloss": [181, 253], "selfknowledg": [181, 253], "pytorchselfknowledgedistillationloss": 181, "pytorchselfknowledgedistillationlosswrapp": 181, "multipl": [183, 192, 220, 221, 225, 226, 234, 235, 237, 238, 239, 240, 241, 245, 248, 251, 258, 263, 264, 268, 269, 271, 277, 278, 280, 281, 282, 283, 284, 288, 290, 292, 308, 361, 362, 363, 365, 371, 480, 483, 490, 499, 526, 529, 537, 538, 546, 547, 550], "tensorflowoptim": [183, 258], "pytorchoptim": [183, 258], "optimizer_registri": [183, 258], "optimizer_typ": [183, 258], "cross": [183, 258, 307, 360, 494, 550], "tensorflowsgd": [183, 258], "tensorflowadamw": [183, 258], "tensorflow_addon": [183, 258], "tensorflowadam": 183, "adam": [183, 552], "pytorchsgd": [183, 258], "record_output": [184, 260], "output_process": [184, 260], "get_activ": [184, 260], "hyper": [185, 552], "sa_optim": [185, 189], "simul": [186, 465], "anneal": 186, "register_search": 187, "searcher": [187, 194, 219, 315], "registri": [187, 188, 190, 196, 201, 210, 211, 212, 213, 330, 332, 334, 460], "sure": [187, 196, 201, 210, 212, 330, 332, 334, 480, 521], "search_spac": [187, 215, 219, 310, 313, 314, 315], "gridsearch": [187, 315], "grid": [187, 219, 315, 460, 538], "whole": [187, 315, 465, 521, 541, 553], "exhaust": [187, 219, 299, 315, 341, 352, 402, 540], "randomsearch": [187, 315], "randomli": [187, 251, 292, 315, 339, 398, 460, 547, 549, 550], "bayesianoptimizationsearch": [187, 315], "bayesian": [187, 219, 299, 315, 341, 352, 402, 460, 538, 540], "xgbsearcher": 187, "higher_is_bett": [187, 218, 219, 360, 394, 550, 552], "reg": [187, 189, 191, 202, 203, 208, 209, 219], "min_train_sampl": [187, 219], "10": [187, 218, 219, 236, 279, 339, 398, 432, 437, 462, 480, 483, 490, 496, 499, 521, 522, 538, 540, 549, 550, 553], "xgboost": [187, 538], "searchspac": 188, "factori": [188, 367, 374, 376, 381, 384, 386, 391], "actual": [188, 307, 360, 488], "interv": [188, 207, 538], "continu": [188, 199, 303, 330, 356, 460, 499, 520, 538, 551], "learning_r": [188, 218, 219, 499, 540, 552], "001": [188, 236, 279, 483, 488, 547, 552], "num_train_epoch": [188, 499, 538], "20": [188, 251, 292, 524, 527, 532, 533, 534, 538, 549, 552, 553], "register_searchspac": 188, "pruner": [188, 189, 299, 316, 317, 318, 319, 320, 322, 327, 328, 330, 333, 352, 499, 538, 552], "basesearchspac": 188, "discretesearchspac": 188, "continuoussearchspac": 188, "hpo": [189, 222, 265, 538], "model_slim": [189, 191, 205], "auto_slim": [189, 191, 193], "pattern_analyz": [189, 191, 193], "weight_slim": [189, 191, 193, 205], "mha": [189, 191, 197, 204, 538], "ninm": [189, 191, 197], "nxm": [189, 191, 197, 207, 218, 219, 326, 330, 538], "basic": [189, 191, 194, 196, 204, 218, 219, 250, 291, 299, 310, 330, 341, 345, 348, 352, 402, 406, 409, 442, 495, 496, 499, 521, 540, 546], "block_mask": [189, 190, 191, 204], "pattern_lock": [189, 191, 204, 218, 219, 299, 318, 352], "retrain_fre": [189, 190, 191, 204, 538], "criteria": [189, 191, 218, 219, 298, 322, 327, 330, 332, 335, 459, 519, 547], "tf_criteria": [189, 191], "callback": [189, 322, 327, 442, 445, 459, 499, 537, 538, 541], "register_criterion": [190, 213], "get_criterion": 190, "pruningcriterion": [190, 213], "about": [190, 213, 453, 457, 482, 499, 524, 525, 538, 543, 550, 551, 553], "score": [190, 196, 201, 205, 213, 218, 219, 300, 301, 303, 304, 305, 307, 332, 353, 354, 356, 357, 358, 360, 401, 445, 459, 498, 522, 536, 538, 546, 550], "magnitudecriterion": [190, 213], "magnitud": [190, 213, 218, 219, 299, 307, 318, 352, 360, 495, 538], "criterion_class": [190, 213], "determin": [190, 196, 201, 213, 218, 219, 447, 457, 459, 481, 538, 541, 547], "gradientcriterion": 190, "absolut": [190, 218, 219, 307, 360, 498, 499, 538, 541, 550], "snipcriterion": 190, "snip": [190, 218, 219, 332, 495, 538, 553], "product": [190, 462, 495, 500, 502, 503, 519, 525, 539, 541, 546, 550], "shot": [190, 208, 209, 212, 261, 332, 334, 460, 495, 499, 538, 539, 544], "connect": [190, 332, 519, 521, 528, 538, 546], "sensit": [190, 316, 332, 495, 538], "1810": [190, 332], "02340": [190, 332], "snipmomentumcriterion": 190, "snip_momentum": [190, 218, 219, 499, 538], "preserv": [190, 481, 538, 544], "beta": 190, "blockmaskcriterion": 190, "retrainfreecriterion": 190, "pickle_protocol": 191, "_use_new_zipfile_seri": 191, "prepare_prun": [191, 538], "loss_func": [191, 210], "assertionerror": [191, 197, 204, 214, 330, 331, 332, 361], "slim": [192, 193, 194, 303, 356, 367, 369, 501, 538], "round_multipli": 192, "spars": [192, 206, 332, 483, 539], "model_slim_ffn2": 192, "perman": [192, 457, 538], "obtain": [192, 194, 203, 208, 211, 214, 331, 459, 464, 527, 538, 546, 547, 550], "acceler": [192, 486, 499, 502, 510, 519, 522, 526, 538, 539, 543, 544, 547, 550], "directli": [192, 218, 219, 233, 276, 303, 307, 331, 356, 360, 498, 499, 506, 538, 540, 541, 548], "sprase": 192, "model_slim_mha": 192, "parse_auto_slim_config": [192, 538], "ffn2_sparsiti": [192, 538], "mha_spars": [192, 538], "generate_ffn2_pruning_config": 192, "consecut": [192, 194, 195, 538], "generate_mha_pruning_config": 192, "head": [192, 194, 198, 205, 214, 538, 553], "get_attribut": 194, "get_common_modul": 194, "layer2": [194, 499, 538, 541], "nearest": [194, 251, 292, 437, 544, 549], "print_iter": 194, "recipesearch": 194, "root": [194, 234, 235, 236, 239, 277, 278, 279, 282, 307, 360, 483, 488, 498, 499, 552], "levelwis": 194, "wai": [194, 235, 236, 239, 278, 279, 282, 460, 465, 482, 483, 485, 498, 499, 502, 505, 520, 521, 525, 526, 527, 537, 538, 541, 544, 547, 550, 552], "huggingfac": [194, 205, 234, 277, 448, 483, 489, 493, 507, 508, 509, 510, 530, 531, 533, 534, 547, 553], "bert": [194, 219, 230, 233, 234, 251, 273, 276, 277, 292, 462, 483, 486, 498, 500, 507, 530, 533, 534, 538, 549, 553], "recipe_sampl": 194, "bertattent": 194, "dens": [194, 212, 218, 219, 334, 522, 538, 553], "searching_result": 194, "jitbasicsearch": 194, "placeholder_shap": 194, "placeholder_dtyp": 194, "jit": [194, 218, 502, 504, 509, 547, 548], "script": [194, 300, 301, 304, 305, 353, 354, 357, 358, 458, 488, 495, 502, 506, 509, 510, 513, 530, 532, 539], "static_graph": 194, "flatten_static_graph": 194, "target_lay": 194, "linear2linearsearch": 194, "target_op_lut": 194, "lookup": 194, "tabl": [194, 205, 453, 465, 485, 490, 522, 524, 553], "current_pattern": 194, "statu": [194, 450, 457, 482, 529, 532, 533, 534, 536, 538], "selfmhasearch": 194, "classifierheadsearch": 194, "classifi": [194, 214, 234, 277, 307, 360, 483, 486], "classifierheadsearchertf": 194, "squeezer": 195, "postcompressionutil": 195, "librari": [195, 255, 299, 352, 388, 455, 462, 496, 499, 500, 504, 513, 519, 539, 541], "relat": [195, 211, 293, 303, 322, 327, 330, 356, 412, 445, 465, 502, 526, 527, 538, 545, 552], "linearcompress": 195, "root_linear": 195, "target_linear": 195, "while": [195, 206, 214, 332, 339, 398, 463, 464, 483, 489, 495, 500, 502, 507, 519, 521, 538, 540, 541, 544, 547], "hidden": [195, 200, 330, 463], "layer_1": 195, "act_fn": 195, "layer_2": 195, "linearcompressioniter": 195, "linear_pattern": 195, "register_pattern": [196, 330], "basepattern": [196, 198, 200], "unit": [196, 330, 458, 527, 538], "4x1": [196, 218, 219, 326, 499, 538, 553], "is_glob": [196, 330], "local": [196, 218, 219, 330, 453, 512, 516, 521, 528, 529, 538, 546], "keep_mask_lay": 196, "invalid_lay": 196, "max_sparsity_ratio_per_op": [196, 201, 215, 218, 219, 499, 538], "sparsiti": [196, 198, 199, 201, 202, 203, 206, 208, 209, 212, 214, 218, 219, 332, 334, 453, 462, 483, 495, 499, 551, 553], "reach": [196, 212, 218, 219, 334, 458, 482, 521, 538, 550], "min_sparsity_ratio_per_op": [196, 215, 218, 219, 499, 538], "target_spars": [196, 215, 218, 219, 499, 538, 540, 552], "pytorchbasepattern": [196, 211], "kerasbasepattern": 196, "get_pattern": [197, 330], "patternmha": 198, "doc": [198, 199, 218, 219, 330, 348, 349, 360, 394, 409, 410, 413, 453, 498, 499, 514, 517, 525], "md": [198, 199, 218, 219, 330, 360, 394], "n": [198, 199, 218, 219, 235, 251, 278, 292, 301, 330, 354, 413, 465, 483, 485, 486, 527, 538, 541, 547, 549], "pytorchpatternninm": 199, "out": [199, 218, 219, 234, 235, 236, 277, 278, 279, 298, 330, 335, 458, 459, 462, 483, 502, 507, 512, 513, 514, 516, 517, 519, 525, 538, 540, 541, 544], "pytorchpatternnxm": 200, "kept": [200, 330], "block_siz": [200, 330, 437, 544], "height": [200, 247, 251, 289, 292, 330, 488, 549, 552], "width": [200, 247, 251, 289, 292, 330, 481, 488, 538, 541, 549, 552], "vertic": [200, 251, 292, 330, 549], "keraspatternnxm": 200, "register_prun": [201, 210, 332], "baseprun": [201, 206, 208, 210], "current_sparsity_ratio": [201, 332], "global_step": [201, 332], "start_step": [201, 215, 218, 219, 332, 499, 538, 540], "end_step": [201, 215, 218, 219, 332, 499, 538, 540], "pruning_frequ": [201, 215, 218, 219, 499, 538], "target_sparsity_ratio": [201, 332], "show": [201, 453, 457, 486, 488, 499, 505, 520, 521, 522, 524, 527, 532, 533, 534, 547, 550, 551], "pytorchbaseprun": [201, 209], "kerasbaseprun": 201, "pytorchbasicprun": 202, "arrang": [202, 203, 208, 209, 235, 236, 239, 278, 279, 282, 483, 538], "proce": [202, 203, 208, 209], "regul": [202, 203, 208, 209], "kerasbasicprun": 202, "pytorchblockmaskprun": 203, "grad": [203, 208], "parse_valid_pruner_typ": 204, "get_prun": [204, 332], "pythonmultiheadattentionprun": 205, "mha_modul": 205, "partial": [205, 538, 541], "qkv": 205, "feedward": 205, "simultan": [205, 502, 526, 537, 540], "qkv_name": 205, "query_layer_nam": 205, "key_layer_nam": 205, "value_layer_nam": 205, "ffn_name": 205, "attention_ffn_nam": 205, "mha_nam": 205, "qkv_modul": 205, "ffn_modul": 205, "mha_compress": 205, "mhacompress": 205, "linear_lay": 205, "independ": [205, 388, 393, 465], "4x": [205, 460, 541], "subsequ": [205, 464, 502, 519], "head_mask": 205, "mha_head_s": 205, "similar": [205, 215, 499, 523, 540, 547, 550, 552], "mha_scor": 205, "lock": [206, 320, 321, 495, 537, 538], "pytorchpatternlockprun": 206, "parent": [206, 207, 212, 326, 332, 334, 548], "pytorchprogressiveprun": 207, "basicprun": [207, 210], "interpol": [207, 251, 292, 498, 538, 549], "fine": [207, 234, 277, 483, 505, 538, 539, 541], "grain": [207, 538, 539, 550], "improv": [207, 458, 481, 499, 502, 519, 520, 522, 538, 539, 541, 543, 544, 550, 551, 553], "ad": [207, 234, 277, 300, 339, 353, 398, 464, 465, 485, 500, 502, 507, 510, 514, 517, 527, 538, 544, 548], "retrain": [208, 487], "pytorchretrainfreeprun": 208, "pruner_class": [208, 209], "fast": [208, 218, 219, 462, 538, 539, 544], "retrainfreeprun": [208, 210], "effect": [208, 462, 463, 538, 539], "2204": 208, "09656": 208, "sparsegptprun": [209, 210], "most": [209, 218, 219, 307, 360, 485, 499, 500, 538, 541, 544, 547, 550, 553], "sparsegpt": [209, 210, 538], "massiv": [209, 538], "One": [209, 465, 483, 488, 495, 524, 538, 539, 550], "2301": [209, 538], "00774": [209, 538], "opt": [210, 462, 507, 538, 547, 550, 553], "least": [210, 333, 458, 499, 538, 550], "templat": [210, 333, 499, 538], "tree": [210, 333, 349, 410, 527], "nlp": [210, 218, 219, 333, 507, 523, 538, 541], "huggingface_model": [210, 333, 523], "classif": [210, 234, 251, 277, 292, 307, 333, 360, 486, 490, 498, 508, 522, 530, 533, 534, 538, 539], "pytorch_prun": [210, 299, 352], "eager": [210, 333, 393, 488, 495, 541, 543, 548], "config_file_path": [210, 333], "pruner_info": [210, 333], "pruning_class": 210, "avail": [210, 218, 219, 365, 466, 468, 472, 475, 478, 489, 491, 493, 495, 512, 516, 521, 526, 527, 528, 532, 533, 534, 538, 550, 553], "regular": [211, 300, 331, 353], "register_reg": 211, "regulariz": 211, "get_reg_typ": 211, "get_reg": 211, "basereg": 211, "grouplasso": 211, "coeff": 211, "lasso": [211, 317, 495, 538], "reg_term": 211, "register_schedul": [212, 334], "get_schedul": [212, 334], "pruningschedul": 212, "gradual": [212, 334, 538], "oneshotschedul": [212, 334], "iterativeschedul": [212, 334], "get_tf_criterion": 213, "get_sparsity_ratio": 214, "elementwise_over_matmul_gemm_conv": 214, "elementwise_over_al": 214, "blockwise_over_matmul_gemm_conv": 214, "get_sparsity_ratio_tf": 214, "check_config": [214, 331], "prune_config": [214, 331], "everyth": [214, 331, 507], "reset_none_to_default": 214, "update_param": 214, "process_weight_config": 214, "global_config": [214, 316, 317, 319, 320, 321], "local_config": [214, 218, 219, 316, 317, 319, 320, 321], "default_config": 214, "pruners_info": 214, "process_yaml_config": 214, "check_key_valid": 214, "template_config": 214, "user_config": 214, "process_and_check_config": [214, 331], "process_config": [214, 331], "parse_last_linear": 214, "often": [214, 482, 486, 524, 537, 538], "might": [214, 459, 521, 550], "caus": [214, 464, 482, 503, 522, 524, 538, 544], "drop": [214, 303, 331, 356, 458, 499, 500, 513, 538, 544, 547, 553], "parse_last_linear_tf": 214, "parse_to_prun": [214, 331], "parse_to_prune_tf": 214, "generate_pruner_config": 214, "dotdict": [214, 215, 219, 371, 453], "get_lay": 214, "collect_layer_input": 214, "layer_idx": 214, "layer_input": 214, "previou": [214, 464, 465, 499, 538, 545, 547, 548, 550, 551, 553], "prunerv2": 215, "pruning_typ": [215, 218, 219, 499, 538], "pruning_scop": [215, 218, 219, 499, 538], "sparsity_decay_typ": [215, 218, 219, 499, 538], "pruning_op_typ": [215, 218, 219, 499, 538], "reg_typ": 215, "criterion_reduce_typ": 215, "resume_from_pruned_checkpoint": 215, "cfg_fname": 215, "parser": 215, "quantization_conf": 215, "pruning_conf": 215, "graph_optimization_conf": [215, 298], "mixedprecision_conf": 215, "benchmark_conf": 215, "nasconfig": [215, 219, 311, 313, 460], "approach": [215, 218, 219, 310, 311, 313, 459, 460, 481, 483, 486, 495, 499, 507, 519, 522, 530, 532, 533, 534, 538, 539, 540, 542, 544, 550, 552], "search_algorithm": [215, 219, 299, 312, 352, 460], "na": [215, 219, 299, 352, 365, 495, 553], "procedur": [215, 460, 538, 550], "defaultconf": 215, "notat": [215, 216, 219, 453], "deep_get": [216, 371, 430], "dot": [216, 430, 500, 541], "person": [216, 430, 457, 539], "john": [216, 430], "deep_set": [216, 371], "sex": [216, 457], "male": 216, "pythonic_config": 217, "random_se": [218, 219, 339, 398, 499, 552], "1978": [218, 219], "workspac": [218, 219, 452, 453, 501, 527, 532, 533, 534], "default_workspac": [218, 219], "resume_from": [218, 219, 453], "tensorboard": [218, 219, 445, 453, 463, 499, 522], "set_random_se": [218, 219, 453], "set_workspac": [218, 219, 453], "set_resume_from": [218, 219, 453], "set_tensorboard": [218, 219, 453], "directori": [218, 219, 235, 236, 278, 279, 369, 448, 450, 452, 453, 483, 488, 491, 512, 514, 516, 517, 523, 525, 548], "histori": [218, 219, 452, 453, 519, 523, 550], "nc_workspac": [218, 219, 522, 523], "datetim": [218, 219], "now": [218, 219, 251, 292, 459, 460, 465, 483, 488, 510, 540, 549, 550], "strftime": [218, 219], "d_": [218, 219], "resum": [218, 219, 222, 223, 265, 266, 343, 345, 395, 398, 399, 403, 404, 406], "flag": [218, 219, 301, 354, 485], "visual": [218, 219, 462, 510, 519, 546, 548, 550, 551], "displai": [218, 219, 348, 349, 409, 410, 453, 519, 522], "2022": [218, 219, 462, 497, 538, 544, 547, 553], "workspace_path": [218, 219], "accuracycriterion": [218, 219, 499, 550], "rel": [218, 219, 371, 499, 522, 540, 550, 552, 553], "tolerable_loss": [218, 219, 499, 550], "higher": [218, 219, 222, 223, 265, 266, 314, 361, 394, 442, 459, 485, 486, 490, 498, 522, 538, 541, 546], "accept": [218, 219, 413, 457, 480, 482, 521, 544], "accuracy_criterion": [218, 219, 371, 499, 523, 536, 540, 550, 552], "warmup": [218, 219, 480, 499, 540], "inter_num_of_thread": [218, 219, 388, 393, 499, 540], "intra_num_of_thread": [218, 219, 388, 393, 499, 540], "benchmark": [218, 219, 254, 299, 336, 352, 371, 453, 462, 470, 501, 502, 506, 510, 513, 519, 522, 550, 551, 552, 553], "onnxrt_trt_ep": [218, 219, 500, 541], "onnxrt_cuda_ep": [218, 219, 500, 541], "inter": [218, 219], "intra": [218, 219], "quantizationconfig": 218, "post_training_static_qu": [218, 483, 499, 540, 550], "calibration_sampling_s": [218, 219, 499, 524], "op_type_dict": [218, 219, 465, 540, 541, 544, 550], "op_name_dict": [218, 219, 485, 499, 522, 524, 541, 550], "strategy_kwarg": [218, 219, 546, 550], "timeout": [218, 219, 499, 540, 550, 552], "max_trial": [218, 219, 499, 550], "quant_level": [218, 219, 522, 544, 547, 550], "posttrainingquantconfig": [218, 219, 394, 459, 462, 465, 482, 485, 490, 493, 498, 499, 501, 521, 522, 523, 524, 541, 542, 543, 544, 546, 547, 550], "quantizationawaretrainingconfig": [218, 219, 442, 459, 487, 490, 499, 541, 543, 550], "cv": [218, 219, 538], "object_detect": [218, 219, 303, 356], "recommendation_system": [218, 219], "explicitli": [218, 219, 494, 538], "overrid": [218, 219, 453], "quantiztaion": [218, 219], "smooth_quant_arg": [218, 219, 541, 547], "gemm_to_matmul": [218, 219, 541], "graph_optimization_level": [218, 219, 540, 541], "disable_al": [218, 219, 540], "enable_bas": [218, 219], "enable_extend": [218, 219], "enable_al": [218, 219], "first_conv_or_matmul_quant": [218, 219, 541], "last_conv_or_matmul_quant": [218, 219, 541], "pre_post_process_quant": [218, 219, 541], "postprocess": [218, 219, 245, 248, 251, 255, 292, 299, 352, 360, 394, 445, 463, 499, 548, 549], "dedic": [218, 219], "quant_format": [218, 219, 297, 490, 522], "constraint": [218, 219, 298, 335, 499, 538, 546, 550, 552], "conv1": [218, 219, 541, 552], "tuning_strategi": [218, 219], "guarante": [218, 219, 499], "models": [218, 219, 371, 499, 536, 540], "footprint": [218, 219, 298, 322, 327, 335, 371, 487, 499, 536, 538, 540, 542], "earli": [218, 219, 499, 541, 550, 552], "stop": [218, 219, 499, 550, 551, 552], "exit": [218, 219, 338, 395, 397, 499, 527, 532, 533, 534, 552], "excluded_precis": [218, 219, 543], "exclud": [218, 219, 463, 481, 543], "conserv": [218, 219, 352, 402], "use_distributed_tun": 218, "weightpruningconfig": [218, 219, 499, 537, 538], "pruning_config": [218, 219, 499, 538], "98": [218, 219, 499, 538, 540, 553], "exp": [218, 219, 499, 538], "link": [218, 219, 234, 277, 360, 394, 481, 483, 490, 512, 516, 519, 544, 553], "90": [218, 219, 542, 552, 553], "magnitude_progress": [218, 219], "snip_progress": [218, 219], "snip_momentum_progress": [218, 219], "feasibl": [218, 219], "situat": [218, 219, 488, 538], "unstructur": [218, 219, 326, 495, 538, 553], "8x1": [218, 219], "channelx1": [218, 219, 538], "1xchannel": [218, 219, 538], "itrex": [218, 219, 547], "start": [218, 219, 251, 292, 303, 356, 399, 496, 524, 539, 549, 550, 551, 554], "togeth": [218, 219, 251, 292, 486, 496, 506, 539, 548, 549], "sort": [218, 219, 342, 403, 485, 522, 544, 550], "sinc": [218, 219, 298, 300, 322, 327, 335, 353, 486, 490, 496, 498, 513, 519, 524, 537, 544, 545], "lead": [218, 219, 486, 499, 500, 524, 538, 544, 547], "increas": [218, 219, 484, 495, 502, 519, 524, 544, 550], "cube": [218, 219, 538], "6": [218, 219, 492, 541, 547, 550, 553], "update_config": [218, 219, 425], "knowledgedistillationlossconfig": [218, 219, 486, 487, 499, 537], "hyperparamet": [218, 219, 348, 546, 547, 550], "entropi": [218, 219, 481, 550], "groundtruth": [218, 219, 303, 356], "label": [218, 219, 222, 223, 234, 236, 237, 238, 239, 242, 247, 251, 256, 265, 266, 277, 279, 280, 281, 282, 285, 289, 292, 300, 302, 307, 353, 355, 360, 361, 394, 442, 459, 482, 483, 485, 498, 499, 541, 549], "sum": [218, 219, 307, 360, 485, 486], "distillationconfig": [218, 219, 442, 486, 487, 499, 537], "prepare_compress": [218, 219, 442, 459, 486, 487, 499, 537, 538, 541], "criterion_conf": [218, 219], "d_conf": [218, 219, 487, 499, 537], "compression_manag": [218, 219, 442, 459, 486, 487, 499, 537, 538, 541], "featur": [218, 219, 234, 235, 247, 251, 277, 278, 289, 292, 458, 462, 480, 482, 484, 486, 499, 500, 501, 502, 506, 507, 510, 519, 521, 525, 538, 539, 545, 547, 549], "distil_loss": [218, 219, 499], "ni_workload_nam": 219, "onnxrt_dnnl_ep": [219, 500, 541], "onnxrt_dml_ep": [219, 541], "tuningcriterion": [219, 499, 536, 546, 550], "tuning_criterion": [219, 499, 536, 546, 550], "npu": [219, 541], "xpu": [219, 510], "ptq": [219, 394, 459, 485, 488, 495, 499, 524, 541, 547, 548, 550], "tri": [219, 550], "meet": [219, 225, 336, 338, 395, 397, 459, 464, 536, 539, 540, 541, 544, 548, 550], "mse_v2": [219, 299, 341, 352, 402], "hawq_v2": [219, 352, 402], "docstr": [219, 413], "workload": [219, 450, 453, 521, 539], "insight": [219, 450, 462, 485, 539, 545, 550, 551], "copi": [219, 331, 453, 482, 525], "deepcopi": 219, "model_origin": [219, 394, 543], "qat_op_name_dict": 219, "low_memory_usag": 219, "hpoconfig": 219, "xgb": 219, "bo": 219, "intermediatelayersknowledgedistillationlossconfig": [219, 486], "relationship": [219, 521], "student_layer_nam": 219, "student_layer_output_process": 219, "teacher_layer_nam": 219, "teacher_layer_output_process": 219, "desir": [219, 247, 251, 289, 292, 464, 465, 538, 547, 549], "serv": [219, 369, 527, 532, 533, 534], "numer": [219, 307, 360, 465, 500, 539, 541, 544], "abbrevi": 219, "l1": 219, "selfknowledgedistillationlossconfig": [219, 486, 499], "student1_layer_name1": 219, "teacher_layer_name1": 219, "student2_layer_name1": 219, "student1_layer_name2": 219, "teacher_layer_name2": 219, "student2_layer_name2": 219, "soft": 219, "hard": [219, 482, 485], "resblock": 219, "deepst": 219, "02": [219, 553], "mixedprecisionconfig": [219, 361, 413, 499, 500], "mixedprecis": [219, 308, 499], "won": [219, 541, 544], "work": [219, 298, 335, 461, 464, 482, 486, 514, 517, 525, 543, 544, 545, 547, 548], "mix_precis": [219, 352, 413, 499, 500], "converted_model": [219, 361, 499, 500], "exportconfig": 219, "14": [219, 296, 297, 490, 496, 534, 553], "dynamic_ax": [219, 297, 490], "qlinear": [219, 236, 243, 279, 286, 307, 360, 463, 509], "ax": [219, 297], "onnxqlinear2qdqconfig": 219, "onnxqlinear2qdq": 219, "torch2onnxconfig": [219, 490], "torch2onnx": [219, 294, 299, 352], "qdq_op_fp32_bia": 219, "qdq_op_int32_bia": 219, "qdq_op_fp32_bias_qdq": 219, "resnet50": [219, 462, 485, 488, 490, 500, 502, 506, 538, 541, 546, 553], "int8_onnx_config": [219, 490], "randn": [219, 490], "224": [219, 247, 289, 462, 483, 488, 490, 493, 499, 502, 521, 549, 552], "batch_siz": [219, 224, 226, 232, 233, 234, 235, 254, 267, 269, 275, 276, 277, 278, 297, 460, 482, 483, 488, 490, 494, 499, 502, 541], "tf2onnxconfig": [219, 490], "tf2onnx": [219, 294, 299, 352], "output_graph": 219, "dyna": [219, 299, 312, 352, 460, 495, 540], "sigopt": [220, 221, 263, 264, 299, 352, 539], "tpe": [220, 221, 263, 264, 299, 352], "sigopttunestrategi": [222, 265], "q_dataload": [222, 223, 265, 266, 339, 342, 343, 345, 395, 398, 399, 403, 404, 406, 494, 550], "eval_metr": [222, 223, 361, 394, 395, 398, 399, 403, 404, 406, 442, 498, 521, 541], "q_hook": [222, 223, 265, 266, 339, 342, 343, 345, 395, 398, 399, 403, 404, 406], "mandatori": [222, 223, 265, 266, 394, 499, 552], "yield": [222, 223, 232, 254, 265, 266, 275, 339, 361, 394, 398, 413, 442, 482, 541, 550], "well": [222, 223, 265, 266, 361, 394, 442, 460, 462, 483, 538, 541, 545, 547, 552], "taken": [222, 223, 265, 266, 361, 394, 442, 541], "reserv": [222, 223, 265, 266], "abl": [222, 223, 265, 266, 361, 394, 442, 510, 519, 541], "tuner": [222, 223, 265, 266, 298, 335, 361, 394, 442, 541], "scalar": [222, 223, 265, 266, 361, 394, 442, 498, 541, 547, 550], "pseudo": [222, 223, 265, 266, 394, 442, 544, 548], "someth": [222, 223, 236, 265, 266, 279, 394, 442], "fefin": [223, 266], "tpetunestrategi": [223, 266], "basedatalod": [224, 267], "basedataload": [224, 229, 231, 267, 272, 274], "last_batch": [224, 226, 233, 254, 267, 269, 276, 482], "rollov": [224, 226, 233, 254, 267, 269, 276, 482], "collate_fn": [224, 226, 227, 233, 254, 267, 269, 270, 276, 482, 483], "batch_sampl": [224, 226, 233, 254, 267, 269, 276, 482], "num_work": [224, 226, 233, 254, 267, 269, 276, 482, 499, 541], "pin_memori": [224, 226, 233, 254, 267, 269, 276, 482], "_generate_dataload": [224, 267], "check_dataload": 225, "default_col": [226, 269], "outer": [226, 269], "defaultdataload": [226, 233, 269, 276], "style": [227, 241, 270, 284, 413, 458, 483, 494], "drop_last": [227, 232, 270, 275], "iterablefetch": [227, 270], "indexfetch": [227, 270], "base_dataload": [228, 271, 288, 299], "default_dataload": [228, 271, 288, 299], "fetcher": [228, 271, 288, 299], "mxnet_dataload": [228, 271, 288, 299], "onnxrt_dataload": [228, 271, 288, 299, 387], "pytorch_dataload": [228, 271, 288, 299], "tensorflow_dataload": [228, 271, 288, 299, 392], "mxnetdataload": [229, 272], "onnxrtbertdataload": [230, 273], "variant": [230, 273], "onnxrtdataload": [230, 273, 387], "pytorchdataload": [231, 274], "data_sourc": [232, 275, 445], "__iter__": [232, 236, 275, 279, 482, 483, 499], "matter": [232, 275, 543], "iterablesampl": [232, 275], "squential": [232, 275], "your": [232, 234, 275, 277, 458, 482, 483, 485, 488, 497, 499, 502, 505, 506, 507, 512, 513, 514, 516, 517, 519, 521, 525, 527, 532, 533, 534, 538, 539, 546, 548, 550, 551], "clear": [232, 275, 463, 492, 498, 499], "iterabledataset": [232, 236, 275, 279], "try": [232, 275, 459, 485, 522, 538, 541, 547, 550], "indexdataset": [232, 275], "__getitem__": [232, 236, 251, 275, 279, 292, 482, 483, 499], "__len__": [232, 236, 275, 279, 483], "retriev": [232, 275, 538], "sequentialsampl": [232, 275], "batchsampl": [232, 275], "tfdatadataload": [233, 276], "tensorflow1": [233, 276], "coupl": [233, 276], "satisfi": [233, 276, 485, 496, 525], "tf1": [233, 276, 501], "although": [233, 276, 546], "tensorflowbertdataload": [233, 276], "tensorflowmodelzoobertdataload": [233, 276], "zoo": [233, 251, 276, 292, 462, 489, 493, 553], "tensorflowdataload": [233, 276, 392], "pytorchbertdataset": [234, 277], "model_typ": [234, 277, 453, 483], "tensordataset": [234, 277, 483], "repo": [234, 277, 456, 458, 483, 489, 512, 514, 516, 517, 554], "easi": [234, 277, 335, 490, 499, 522, 526, 539, 541, 544, 546], "squad": [234, 251, 277, 292, 304, 305, 307, 357, 358, 360, 483, 498, 538, 549, 553], "distilbert": [234, 277, 462, 483, 500, 539, 553], "xlnet": [234, 277, 483, 553], "xlm": [234, 277, 483, 553], "101": [234, 277, 307, 360, 498, 528, 547, 553], "2043": [234, 277], "2001": [234, 277], "onnxrtbertdataset": [234, 277], "data_dir": [234, 277, 483], "model_name_or_path": [234, 277, 483, 499, 507, 508, 523, 530, 533, 534, 542], "max_seq_length": [234, 251, 277, 292, 483, 549], "do_lower_cas": [234, 250, 251, 277, 291, 292, 483, 549], "mrpc": [234, 277, 307, 360, 483, 498, 507, 530, 533, 534, 538, 550, 553], "dynamic_length": [234, 277, 483], "shortcut": [234, 277, 483], "longer": [234, 251, 277, 292, 483, 549], "shorter": [234, 251, 277, 292, 483, 549], "lowercas": [234, 277, 483], "choic": [234, 277, 463, 483, 498, 525, 547], "qqp": [234, 277, 483, 498, 553], "qnli": [234, 277, 483, 498, 553], "rte": [234, 277, 483, 498, 553], "st": [234, 277, 483, 498], "cola": [234, 277, 483, 498, 553], "mnli": [234, 277, 483, 498, 553], "wnli": [234, 277, 483, 498], "mobilebert": [234, 277, 483, 486, 553], "roberta": [234, 277, 483, 553], "uncas": [234, 251, 277, 292, 483, 549, 553], "load_and_cache_exampl": [234, 277], "convert_examples_to_featur": [234, 251, 277, 292], "max_length": [234, 277], "label_list": [234, 277, 307, 360], "output_mod": [234, 277], "pad_token": [234, 277], "pad_token_segment_id": [234, 277], "mask_padding_with_zero": [234, 277], "inputfeatur": [234, 251, 277, 292], "properti": [234, 277, 412, 497], "vocabulari": [234, 250, 251, 277, 291, 292, 549], "attention_mask": [234, 277, 499], "usual": [234, 277, 464, 485, 486, 524, 537, 538, 541, 542, 547], "NOT": [234, 277, 492], "token_type_id": [234, 277, 499], "segment": [234, 277, 301, 303, 354, 356, 458], "portion": [234, 277], "regress": [234, 277, 458, 485], "seq_length": [234, 277], "tensorflowbertdataset": [234, 277], "label_fil": [234, 251, 277, 292, 483, 549], "tfrecord": [234, 235, 236, 277, 278, 279, 483], "guid": [234, 277, 459, 462, 483, 486, 496, 502, 510, 519, 554], "parsedecodebert": [234, 277], "tensorflowmodelzoobertdataset": [234, 235, 277, 278], "num_cor": [234, 235, 239, 277, 278, 282, 483], "28": [234, 235, 239, 277, 278, 282, 483, 553], "coco": [235, 242, 246, 278, 285, 303, 307, 356, 360, 498, 538], "parsedecodecoco": [235, 278], "cocorecorddataset": [235, 278], "interleav": [235, 278, 483], "parallel": [235, 278, 388, 393, 483, 499, 526, 529, 550], "cocoraw": [235, 278, 483], "img_dir": [235, 278, 483], "val2017": [235, 278, 483], "anno_dir": [235, 278, 483], "annot": [235, 278, 303, 356, 413, 464, 465, 483, 498, 538, 550], "instances_val2017": [235, 278, 483], "jpg": [235, 239, 241, 278, 282, 284, 462, 483], "imag": [235, 236, 239, 241, 247, 251, 278, 279, 282, 284, 289, 292, 303, 356, 483, 488, 490, 538, 540, 547, 548, 549, 553], "coconpi": [235, 278, 483], "npy_dir": [235, 278, 483], "npy": [235, 278, 483], "tensorflowdataset": [236, 279], "pytorchdataset": [236, 279], "mxnetdataset": [236, 279], "onnxrtqldataset": [236, 279], "onnxrtitdataset": [236, 279], "IT": [236, 243, 279, 286, 539], "pytorchmxnetwrapdataset": [236, 279], "datafunc": [236, 279], "pytorchmxnetwrapfunct": [236, 251, 279, 292], "framework_dataset": [236, 279], "convent": [236, 279, 303, 356, 486], "imageclassifi": [236, 279], "tensorflow_itex": [236, 239, 241, 243, 279, 282, 284, 286, 482, 540], "onnxrt_qdq": [236, 243, 279, 286, 540], "onnxrt_qlinearop": [236, 243, 251, 279, 286, 292, 540], "onnxrt_integerop": [236, 243, 251, 279, 286, 292, 540], "pytorch_ipex": [236, 243, 279, 286, 499, 540, 552], "pytorch_fx": [236, 243, 279, 286, 499, 540], "dataset_registri": [236, 279], "dataset_typ": [236, 279], "dataset_format": [236, 279], "data_format": [236, 247, 279, 289], "raw_imag": [236, 279], "overwrit": [236, 279, 512, 516], "download_url": [236, 279], "filenam": [236, 279, 453, 483, 525], "md5": [236, 279], "address": [236, 279, 457, 500, 521, 524, 527, 539], "gen_bar_updat": [236, 279], "check_integr": [236, 279], "fpath": [236, 279], "checksum": [236, 279], "calculate_md5": [236, 279], "chunk_siz": [236, 279], "cifar10": [236, 279, 483], "cifar100": [236, 279, 483], "databas": [236, 279, 527], "www": [236, 279, 483, 553], "toronto": [236, 279, 483], "kriz": [236, 279, 483], "cifar": [236, 279, 483, 553], "tar": [236, 279, 483, 485, 514, 517], "gz": [236, 279, 483, 485, 514, 517], "manual": [236, 279, 483, 502, 508, 510, 513, 527, 532, 533, 534, 538], "subset": [236, 239, 279, 282, 483, 524], "internet": [236, 279, 483, 521], "again": [236, 279, 483, 522, 524, 543], "pytorchcifar10": [236, 279], "mxnetcifar10": [236, 279], "tensorflowcifar10": [236, 279], "pytorchcifar100": [236, 279], "mxnetcifar100": [236, 279], "tensorflowcifar100": [236, 279], "mnist": [236, 279, 483, 488], "nation": [236, 279, 457], "institut": [236, 279], "standard": [236, 251, 279, 292, 458, 464, 485, 490, 498, 549, 550], "technologi": [236, 279, 499], "fashionmnist": [236, 279, 483], "npz": [236, 279, 483], "idx1": [236, 279, 483], "ubyt": [236, 279, 483], "idx3": [236, 279, 483], "t10k": [236, 279, 483], "pytorchmnist": [236, 279], "mxnetmnist": [236, 279], "tensorflowmnist": [236, 279], "pytorchfashionmnist": [236, 279], "mxnetfashionmnist": [236, 279], "tensorflowfashionmnist": [236, 279], "imagefold": [236, 279, 483, 488, 499], "expect": [236, 279, 457, 458, 491, 519, 541, 544, 550], "subfold": [236, 279, 522], "belong": [236, 279, 365, 541], "class_1": [236, 279, 483], "xxx": [236, 279, 483, 499], "png": [236, 279, 483], "xxy": [236, 279, 483], "xxz": [236, 279, 483], "class_n": [236, 279, 483], "123": [236, 279, 483, 549], "nsdf3": [236, 279, 483], "asd932_": [236, 279, 483], "categori": [236, 279, 302, 355, 480, 483, 509], "mxnetimagefold": [236, 279], "tensorflowtfrecorddataset": [236, 279], "tensorflowimagerecord": [236, 279], "imagenet": [236, 239, 247, 279, 282, 289, 460, 485, 499, 508, 524, 538, 548, 549, 552, 553], "000": [236, 279, 462, 483], "099": [236, 279, 483], "tensorflowvocrecord": [236, 279], "pascal": [236, 279], "voc": [236, 279, 307, 360], "2012": [236, 279], "00000": [236, 279], "00004": [236, 279], "00001": [236, 279], "00003": [236, 279], "dummydataset": [237, 238, 280, 281], "127": [237, 238, 280, 281, 483, 541, 547, 553], "float32": [237, 238, 251, 280, 281, 292, 303, 356, 448, 463, 480, 483, 499, 541, 544, 547, 549], "stand_norm": [237, 238, 280, 281, 483], "dummy_v2": [238, 281, 483], "sparse_dummy_v2": [238, 281, 483], "label_shap": [238, 281, 483], "sparsedummydataset": [238, 281], "dense_shap": [238, 281, 483], "sparse_ratio": [238, 281, 483], "imagenetraw": [239, 282, 483], "data_path": [239, 282, 483], "image_list": [239, 282, 483], "img1": [239, 282, 483], "img2": [239, 282, 483], "imgx": [239, 282, 483], "val_map": [239, 282, 483], "txt": [239, 282, 483, 485, 496, 521, 523, 524, 526, 527], "pytorchimagenetraw": [239, 282], "mxnetimagenetraw": [239, 282], "tensorflowimagenetraw": [239, 282], "inteltensorflow": [239, 241, 282, 284, 496], "tensorflowimagenetdataset": [239, 282], "onnxrtimagenetdataset": [239, 282], "bert_dataset": [240, 245, 283, 288, 299, 352], "coco_dataset": [240, 245, 283, 288, 299, 352], "dummy_dataset": [240, 245, 283, 288, 299, 352], "dummy_dataset_v2": [240, 245, 283, 288, 299, 352], "imagenet_dataset": [240, 245, 283, 288, 299, 352], "style_transfer_dataset": [240, 245, 283, 288, 299, 352], "styletransferdataset": [241, 284], "content_fold": [241, 284, 483], "style_fold": [241, 284, 483], "crop_ratio": [241, 284, 483], "resize_shap": [241, 284, 483], "image_format": [241, 284, 483], "holder": [241, 284, 483], "labelbalancecocorecordfilt": [242, 285], "balanc": [242, 285, 544, 547], "labelbalancecocorawfilt": [242, 285], "tensorflowfilt": [243, 286], "onnxrtqlfilt": [243, 286], "onnxrtitfilt": [243, 286], "pytorchfilt": [243, 286], "mxnetfilt": [243, 286], "filter_registri": [243, 286], "filter_typ": [243, 286], "__call__": [243, 286], "coco_filt": [244, 245, 287, 288, 299, 352], "imagenet_transform": [245, 248, 288, 290, 299, 352], "parsedecodecocotransform": 246, "quantizedinput": [247, 289, 549], "labelshift": [247, 289, 549], "label_shift": [247, 289, 549], "parsedecodeimagenet": [247, 289, 549], "proto": [247, 251, 289, 292, 549], "parsedecodeimagenettransform": [247, 289], "tensorflowtransposelastchannel": 247, "tensorflowshiftrescal": 247, "rescal": [247, 251, 292, 549], "tensorflowresizecropimagenettransform": [247, 289], "random_crop": [247, 289, 549], "resize_sid": [247, 289, 549], "resize_method": [247, 289], "bilinear": [247, 251, 289, 292, 549], "random_flip_left_right": [247, 289, 549], "mean_valu": [247, 289, 549], "channels_last": [247, 289, 502], "subpixel": [247, 289], "rgb": [247, 289], "seri": [247, 289, 462, 496, 499, 549], "applic": [247, 289, 465, 490, 502, 519, 521, 527, 528, 532, 533, 539, 544, 547, 548, 549, 551], "crop": [247, 251, 289, 292, 483, 549], "flip": [247, 251, 289, 292, 549], "left": [247, 251, 289, 292, 513, 519, 547, 549], "std": [247, 251, 289, 292, 499, 549], "bilinearimagenettransform": [247, 289], "central_fract": [247, 289, 549], "875": [247, 289, 549], "fraction": [247, 289, 549], "onnxbilinearimagenettransform": [247, 289], "onnxresizecropimagenettransform": [247, 289], "std_valu": [247, 289], "229": [247, 289, 499], "225": [247, 289, 499], "resizewithaspectratio": [247, 289], "87": [247, 289, 553], "inter_pol": [247, 289], "cv2": [247, 289], "inter_area": [247, 289], "aspect": [247, 251, 289, 292, 549], "postprocess_cl": [249, 259, 499], "user_postprocess": [249, 259], "convert_to_unicod": [250, 291], "unicod": [250, 291], "assum": [250, 291, 303, 314, 356, 463, 492, 519], "load_vocab": [250, 291], "vocab_fil": [250, 251, 291, 292, 549], "convert_by_vocab": [250, 291], "vocab": [250, 291], "whitespace_token": [250, 291], "whitespac": [250, 291, 305, 358], "clean": [250, 291, 499], "piec": [250, 291, 300, 353, 498, 544], "fulltoken": [250, 291], "tokenzi": [250, 291], "basictoken": [250, 291], "punctuat": [250, 291, 300, 305, 353, 358], "lower": [250, 251, 291, 292, 305, 358, 399, 487, 538, 539, 541, 547, 549, 550], "wordpiecetoken": [250, 291], "unk_token": [250, 291], "unk": [250, 291], "max_input_chars_per_word": [250, 291], "wordpiec": [250, 251, 291, 292, 549], "concat_gener": [251, 292], "inc": [251, 292, 457, 464, 502, 509, 519, 521, 526, 539, 540, 545, 550], "tensorflowtransform": [251, 292], "mxnettransform": [251, 292], "pytorchtransform": [251, 292], "onnxrtqltransform": [251, 292], "onnxrtittransform": [251, 292], "transform_registri": [251, 292], "transform_typ": [251, 292], "basetransform": [251, 292], "tensorflowwrapfunct": [251, 292], "transform_func": [251, 292], "pytorchmxnettransform": [251, 292], "get_torchvision_map": [251, 292], "torchvis": [251, 292, 489, 493, 502, 508, 522], "composetransform": [251, 292], "transform_list": [251, 292, 549], "compos": [251, 292, 445, 549], "croptoboundingbox": [251, 292, 549], "offset_height": [251, 292, 549], "offset_width": [251, 292, 549], "target_height": [251, 292, 549], "target_width": [251, 292, 549], "box": [251, 292, 303, 307, 356, 360, 459, 498, 502, 513, 519, 548, 549, 550], "coordin": [251, 292, 339, 398, 526, 549, 550], "top": [251, 292, 298, 307, 322, 327, 335, 360, 458, 498, 519, 522, 524, 549], "corner": [251, 292, 458, 463, 465, 549], "horizont": [251, 292, 549], "mxnetcroptoboundingbox": [251, 292], "onnxrtcroptoboundingbox": [251, 292], "tensorflowcroptoboundingbox": [251, 292], "resizewithratio": [251, 292, 549], "min_dim": [251, 292, 549], "800": [251, 292, 549], "max_dim": [251, 292, 549], "1365": [251, 292, 549], "constant_valu": [251, 292], "longest": [251, 292, 549], "side": [251, 292, 483, 513, 549], "exce": [251, 292, 544, 549], "tensorflowresizewithratio": [251, 292], "permut": [251, 292, 549], "tensorflowtranspos": [251, 292], "mxnettranspos": [251, 292], "pytorchtranspos": [251, 292], "randomverticalflip": [251, 292, 549], "tensorflowrandomverticalflip": [251, 292], "randomhorizontalflip": [251, 292, 499, 549], "tensorflowrandomhorizontalflip": [251, 292], "toarrai": [251, 292, 549], "pil": [251, 292, 549], "casttftransform": [251, 292], "castonnxtransform": [251, 292], "castpytorchtransform": [251, 292], "centercroptftransform": [251, 292], "center": [251, 292, 461, 462, 496, 549, 550], "paddedcentercroptransform": [251, 292], "crop_pad": [251, 292], "resizetftransform": [251, 292], "bicub": [251, 292, 549], "resizepytorchtransform": [251, 292], "randomcroptftransform": [251, 292], "randomresizedcroppytorchtransform": [251, 292], "08": [251, 292, 549, 553], "randomresizedcropmxnettransform": [251, 292], "randomresizedcroptftransform": [251, 292], "normalizetftransform": [251, 292], "deviat": [251, 292, 485, 549], "broadcast": [251, 292, 488, 549], "rescalekeraspretraintransform": [251, 292], "rescaletftransform": [251, 292], "rescaletransform": [251, 292], "alignimagechanneltransform": [251, 292], "must": [251, 292, 303, 356, 458, 459, 464, 480, 482, 496, 541, 549], "pytorchalignimagechannel": [251, 292], "tondarraytransform": [251, 292], "resizemxnettransform": [251, 292], "resizetransform": [251, 292], "cropresizetftransform": [251, 292], "boundari": [251, 292, 549], "area": [251, 292, 303, 356, 498, 549], "pytorchcropresizetransform": [251, 292], "mxnetcropresizetransform": [251, 292], "cropresizetransform": [251, 292], "centercroptransform": [251, 292], "mxnetnormalizetransform": [251, 292], "pytorchnormalizetransform": [251, 292], "normalizetransform": [251, 292], "randomcroptransform": [251, 292], "randomresizedcroptransform": [251, 292], "get_final_text": [251, 292], "pred_text": [251, 292], "orig_text": [251, 292], "project": [251, 292, 456, 457, 458, 525, 539, 546, 550, 554], "squadexampl": [251, 292], "qas_id": [251, 292], "question_text": [251, 292], "doc_token": [251, 292], "orig_answer_text": [251, 292], "start_posit": [251, 292], "end_posit": [251, 292], "is_imposs": [251, 292], "simpl": [251, 292, 496, 499, 538, 546, 547, 550], "answer": [251, 292, 304, 305, 357, 358, 457, 524, 538, 549, 553], "unique_id": [251, 292], "example_index": [251, 292], "doc_span_index": [251, 292], "token_to_orig_map": [251, 292], "token_is_max_context": [251, 292], "input_mask": [251, 292, 499], "segment_id": [251, 292, 499], "read_squad_exampl": [251, 292], "input_fil": [251, 292], "doc_strid": [251, 292, 549], "max_query_length": [251, 292, 549], "output_fn": [251, 292], "inputbatch": [251, 292], "collecttransform": [251, 292], "10833": [251, 292], "tfsquadv1posttransform": [251, 292], "n_best_siz": [251, 292, 549], "384": [251, 292, 549], "64": [251, 292, 460, 544, 547, 549, 553], "max_answer_length": [251, 292, 549], "30": [251, 292, 489, 493, 495, 549, 553], "nbest_predict": [251, 292, 549], "question": [251, 292, 304, 305, 357, 358, 457, 458, 462, 463, 496, 502, 526, 538, 547, 549, 553], "anoth": [251, 292, 300, 309, 353, 453, 485, 486, 512, 516, 549, 550], "long": [251, 292, 491, 544, 549], "document": [251, 292, 413, 464, 465, 470, 488, 500, 504, 514, 517, 518, 525, 526, 528, 538, 545, 549, 551], "chunk": [251, 292, 549], "tfmodelzoocollecttransform": [251, 292], "tfsquadv1modelzooposttransform": [251, 292], "squadv1": [251, 292, 549], "parsedecodevoctransform": [251, 292], "conf_fname_or_obj": [252, 261, 293, 298, 308, 309, 310, 311, 313, 322, 327, 335], "unnecessari": [252, 499], "setter": 254, "calib_dataload": [254, 336, 394, 425, 429, 459, 462, 482, 483, 485, 493, 494, 498, 499, 521, 522, 541, 542, 543, 544], "reason": [254, 457, 464, 482, 524, 544, 548, 550], "know": [254, 488, 545], "metric_cl": [256, 360, 394, 499], "user_metr": [256, 360, 394], "alwai": [256, 303, 356, 360, 394, 485, 498, 499, 524, 544], "recommend": [256, 360, 463, 483, 492, 510, 513, 518, 520, 538, 540, 550], "set_backend": 257, "tensorflowimagefold": 279, "qlinear2qdq": [294, 299, 352], "qlinearop": [295, 485, 495, 510, 541, 553], "check_model": 295, "onnx_qlinear_to_qdq": 295, "input_name_to_nod": 295, "tf_to_fp32_onnx": 296, "tf_to_int8_onnx": 296, "int8_model": [296, 297, 463], "get_node_map": 297, "fp32_onnx_path": 297, "module_node_map": 297, "get_quantizable_onnx_op": 297, "quantize_nod": 297, "dynamic_quant_export": 297, "pt_fp32_model": 297, "pt_int8_model": 297, "weight_typ": 297, "s8": 297, "static_quant_export": 297, "_quantiz": 297, "torch_to_fp32_onnx": 297, "do_constant_fold": 297, "torch_to_int8_onnx": 297, "achiev": [298, 335, 490, 499, 522, 537, 538, 539, 541, 547, 548, 550], "across": [298, 308, 335, 361, 484, 499, 526, 529, 538, 542, 547, 550], "variou": [298, 308, 335, 361, 465, 495, 502, 529, 538, 540, 542], "dl": [298, 308, 322, 327, 335, 361, 485, 494, 506, 519, 539, 553], "bring": [298, 335, 513, 526, 547], "unifi": [298, 335, 463, 464, 465, 482, 494, 495, 498, 499, 501], "vari": [298, 322, 327, 335, 524, 538, 547, 553], "roc": [298, 307, 322, 327, 335, 360], "flexibl": [298, 322, 327, 335, 462, 486, 526, 538, 544], "popular": [299, 352, 455, 462, 463, 464, 481, 486, 489, 490, 493, 499, 538, 541, 544, 550, 551], "techniqu": [299, 352, 455, 462, 495, 499, 502, 521, 537, 538, 539, 540, 541, 551, 552, 553], "bleu": [299, 301, 306, 352, 354, 359, 498, 538], "bleu_util": [299, 306, 352, 359], "coco_label_map": [299, 306, 352, 359], "coco_tool": [299, 306, 352, 359], "evaluate_squad": [299, 306, 352, 359], "f1": [299, 304, 306, 307, 352, 357, 359, 360, 488, 498, 499, 522, 546, 553], "basic_na": [299, 312, 352], "nas_util": [299, 312, 352], "pruner_legaci": [299, 352], "gradient_sensit": [299, 318, 352], "group_lasso": [299, 318, 352], "pruning_recip": [299, 352], "tile_pattern": [299, 323, 324], "prune_util": [299, 328, 352], "tuning_sampl": [299, 341, 347, 352, 402, 408], "tuning_spac": [299, 341, 347, 348, 350, 352, 402, 408, 409, 411], "tuning_struct": [299, 341, 347, 348, 349, 352, 402, 408, 409, 410], "auto_mixed_precis": [299, 341, 352, 402], "graph_optim": [299, 352], "mixed_precis": [299, 352, 361, 499], "model_convers": [299, 352], "pruning_v2": [299, 352], "unicoderegex": [300, 353], "hoc": [300, 353], "hack": [300, 353], "recogn": [300, 353, 550], "nondigit_punct_r": [300, 353], "compil": [300, 353, 499], "express": [300, 353, 457], "preced": [300, 353, 547, 550], "digit": [300, 353, 453, 539], "punct_nondigit_r": [300, 353], "symbol_r": [300, 353], "bleu_token": [300, 353], "mose": [300, 353], "smt": [300, 353], "mosesdecod": [300, 353], "mteval": [300, 353], "v14": [300, 353], "pl": [300, 353], "l954": [300, 353], "l983": [300, 353], "bilingu": [300, 353], "understudi": [300, 353], "qualiti": [300, 353], "machin": [300, 353, 490, 496, 505, 519, 521, 527, 539, 547, 548], "translat": [300, 301, 353, 354, 538, 550], "natur": [300, 353, 490], "approxim": [300, 301, 353, 354, 464, 498, 544], "glue": [300, 307, 353, 360, 483, 498, 499, 508], "word": [300, 353, 498, 538, 544, 553], "ngram": [300, 353, 498], "breviti": [300, 301, 353, 354, 498], "doe": [300, 353, 412, 482, 483, 498, 499, 544, 545, 549], "beam": [300, 353, 498], "tensor2tensor": [301, 354], "bleu_hook": [301, 354], "compute_bleu": [301, 354], "reference_corpu": [301, 354], "translation_corpu": [301, 354], "max_ord": [301, 354], "use_bp": [301, 354], "against": [301, 354], "gram": [301, 354], "bleu_scor": [301, 354], "third": [303, 356, 458, 497], "parti": [303, 356, 458, 497, 541], "pycocotool": [303, 356, 491, 496], "noth": [303, 356, 550], "thu": [303, 356, 499, 538, 541], "cannot": [303, 356, 459, 491, 544, 548], "jonathanhuang": [303, 356], "image_id": [303, 356, 498], "invok": [303, 356, 464], "groundtruth_dict": [303, 356], "exportgroundtruthtococo": [303, 356], "groundtruth_boxes_list": [303, 356], "groundtruth_classes_list": [303, 356], "max_num_class": [303, 356], "output_path": [303, 356], "detections_list": [303, 356], "exportdetectionstococo": [303, 356], "detection_boxes_list": [303, 356], "detection_scores_list": [303, 356], "detection_classes_list": [303, 356], "cocowrapp": [303, 356], "loadannot": [303, 356], "cocoevalwrapp": [303, 356], "agnostic_mod": [303, 356], "computemetr": [303, 356], "detection_typ": [303, 356], "bbox": [303, 356, 459, 498], "hold": [303, 339, 356, 398, 483], "iou_typ": [303, 356], "iou_thr": [303, 307, 356, 360, 498], "map_point": [303, 307, 356, 360, 498], "cocoev": [303, 356], "mscoco": [303, 356], "Then": [303, 356, 464, 485, 512, 514, 516, 517, 524, 547, 550], "exportsingleimagegroundtruthtococo": [303, 356], "next_annotation_id": [303, 356], "category_id_set": [303, 356], "groundtruth_box": [303, 356], "groundtruth_class": [303, 356], "groundtruth_mask": [303, 356], "groundtruth_is_crowd": [303, 356], "ingest": [303, 356], "here": [303, 356, 413, 464, 483, 488, 489, 490, 492, 493, 498, 507, 514, 517, 519, 522, 525, 527, 541, 545, 546, 547, 553], "exportsingleimagedetectionstococo": [303, 356], "uniqu": [303, 336, 356, 541], "assign": [303, 356, 453, 488, 540, 550], "num_gt_box": [303, 356], "num_detect": [303, 307, 356, 360, 498, 499, 552], "image_height": [303, 356], "image_width": [303, 356], "detection_mask": [303, 356], "crowd": [303, 356], "insid": [303, 356, 486, 487, 520, 538, 542, 550], "exportsingleimagedetectionboxestococo": [303, 356], "detection_box": [303, 356, 499, 552], "detection_scor": [303, 356, 499, 552], "detection_class": [303, 356, 499, 552], "exporsingleimagedetectionboxestococo": [303, 356], "exportsingleimagedetectionmaskstococo": [303, 356], "allenai": [304, 305, 357, 358], "bi": [304, 305, 357, 358], "att": [304, 305, 357, 358], "flow": [304, 305, 357, 358, 459, 460, 499], "f1_score": [304, 305, 357, 358], "ground_truth": [304, 305, 357, 358], "ground": [304, 305, 357, 358], "truth": [304, 305, 357, 358], "metric_max_over_ground_truth": [304, 305, 357, 358], "metric_fn": [304, 305, 357, 358], "exact_match_scor": [304, 357], "exact": [304, 357], "articl": [304, 305, 357, 358], "paragraph": [304, 305, 357, 358], "qa": [304, 305, 357, 358, 462], "normalize_answ": [305, 358], "newlin": [305, 358, 453], "tab": [305, 358, 519, 548], "harmon": [305, 307, 358, 360], "recal": [305, 307, 358, 360], "answer_start": [305, 358], "177": [305, 358, 553], "denver": [305, 358], "bronco": [305, 358], "nfl": [305, 358], "team": [305, 358, 457, 543], "afc": [305, 358], "super": [305, 358, 460], "bowl": [305, 358], "50": [305, 358, 460, 464, 524, 538, 547, 553], "56be4db0acb8001400a502ec": [305, 358], "percentag": [305, 358, 481, 544, 552], "tensorflowmetr": [307, 360], "maintain": [307, 360, 457, 458, 501, 502, 514, 517, 521, 526, 527, 538, 544, 545], "pytorchmetr": [307, 360], "mxnetmetr": [307, 360], "onnxrtqlmetr": [307, 360], "onnxrtitmetr": [307, 360], "metric_registri": [307, 360], "metric_typ": [307, 360], "decorator_metr": [307, 360], "basemetr": [307, 360, 394], "single_output": [307, 360], "hvd": [307, 360, 488], "wrappytorchmetr": [307, 360], "wrapmxnetmetr": [307, 360], "wraponnxrtmetr": [307, 360], "proport": [307, 360], "pred_list": [307, 360], "pytorchloss": [307, 360], "mae": [307, 360, 498], "compare_label": [307, 360, 394, 498], "rmse": [307, 360, 498, 550], "tensorflowtopk": [307, 360], "k": [307, 360, 394, 498, 521, 538], "among": [307, 360, 513, 547], "outcom": [307, 360], "num_correct": [307, 360], "num_sampl": [307, 360], "generaltopk": [307, 360], "cocomapv2": [307, 360, 498], "anno_path": [307, 360, 498], "map_kei": [307, 360], "detectionboxes_precis": [307, 360], "output_index_map": [307, 360, 498], "tensorflowmap": [307, 360], "tensorflowcocomap": [307, 360], "tensorflowvocmap": [307, 360], "squadf1": [307, 360, 498], "miou": [307, 360], "num_class": [307, 360], "21": [307, 360, 507, 508, 530, 533, 534, 539, 547, 553], "iou": [307, 360], "intersect": [307, 360, 463, 498], "union": [307, 360, 442, 498, 530], "onnxrtglu": [307, 360], "dlrm": [307, 360], "modelconvers": 309, "typic": [309, 336, 460, 462, 487, 489, 493, 524, 538, 553], "basicna": 310, "model_build": [310, 313], "conf_fnam": 310, "nasbas": [313, 460], "nas_registri": 314, "nas_method": 314, "create_search_space_pool": 314, "idx": [314, 483], "enumer": [314, 427, 437, 442, 463, 486, 487, 488, 499, 537, 538, 548], "find_pareto_front": 314, "pareto": [314, 460], "front": [314, 460], "n_point": 314, "n_metric": 314, "n_pareto_point": 314, "gradientsensitivityprun": 316, "pytorchmodel": [316, 317, 319, 320, 321, 370], "overwritten": [316, 317, 319, 320, 321, 507], "grouplassoprun": 317, "legaci": 318, "basicmagnitudeprun": 319, "patternlockprun": [320, 332], "pruner_registri": 321, "clase": 321, "pruningconf": [322, 327], "tfpruningcallback": [322, 327], "input_model": [322, 327, 501, 522, 523, 524, 548], "pure": [322, 327, 538], "pattern_registri": 325, "pattern_typ": 325, "patternbas": 325, "mask_shap": [325, 326], "is_contigu": 325, "tile": 326, "tilepatternbas": 326, "tilepattern_1x1": 326, "1x1": [326, 486, 499, 538], "tilepattern_2x2": 326, "2x2": [326, 547], "tilepattern_1x16": 326, "1x16": 326, "tilepattern_4x1": 326, "tilepattern_1x2": 326, "1x2": [326, 547], "patternnxm": 330, "patternninm": 330, "reset_non_value_to_default": 331, "parse_not_to_prun": 331, "update_frequency_on_step": [332, 540], "max_sparsity_ratio_per_lay": [332, 540], "magnitudeprun": 332, "snipprun": 332, "snipmomentumprun": 332, "moreoev": 332, "quantconf": 335, "separ": [336, 457, 494, 497, 527, 529, 537, 540], "opt_model": [336, 499], "fulli": [336, 499, 527, 541, 547], "train_func": [336, 442, 488, 499, 541], "automixedprecisiontunestrategi": [337, 396], "basictunestrategi": [338, 397], "stage": [338, 343, 395, 397, 404, 486, 538, 548, 550], "polici": [338, 342, 395, 397, 403, 457, 462, 552, 554], "bayesiantunestrategi": [339, 398], "acq_max": [339, 398], "ac": [339, 398], "gp": [339, 398], "y_max": [339, 398], "n_warmup": [339, 398], "10000": [339, 398, 538], "n_iter": [339, 398], "acquisit": [339, 398], "gaussian": [339, 398, 550], "relev": [339, 398, 464, 465, 524, 538], "acq": [339, 398], "randomst": [339, 398], "scipi": [339, 398], "x_max": [339, 398], "targetspac": [339, 398], "pbound": [339, 398], "9527": [339, 398, 499, 552], "bayesianoptim": [339, 398], "exhaustivetunestrategi": [340, 400], "msetunestrategi": [342, 403], "mse_v2tunestrategi": [343, 404], "revert": [343, 351, 404, 412, 550], "randomtunestrategi": [344, 405], "strategy_registri": [345, 406, 550], "tunestrategi": [345, 406, 550], "tuningsamplerregistri": 348, "tuningsampl": [348, 409], "tuningord": [348, 409], "Not": [348, 349, 409, 410, 453, 460], "tuningspac": [348, 349, 409, 410], "tuning_order_lst": [348, 409], "initial_op_tuning_cfg": [348, 409], "modelwisetuningsampl": [348, 409], "tuning_items_prior": [348, 409], "op_dtype_dict": [348, 409], "optuningconfig": [348, 349, 350, 409, 410, 411], "optypewisetuningsampl": [348, 409], "opwisetuningsampl": [348, 409], "fallbacktuningsampl": [348, 409], "op_dtyp": [348, 409], "skip_first": [348, 409], "smoothquantsampl": [348, 409], "tuningitem": [349, 410], "item_typ": [349, 410], "pattern_to_intern": [349, 410], "default_dtyp": [349, 410], "pattern_to_path": [349, 410], "quant_mode_from_pattern": [349, 410], "internal_pattern": [349, 410], "initial_tuning_cfg_with_quant_mod": [349, 410], "op_name_typ": [349, 410], "step1": [349, 410], "step2": [349, 410], "complet": [349, 410, 463, 464, 538, 541, 550, 552, 553], "step3": [349, 410], "step4": [349, 410], "step5": [349, 410], "op_quant_mod": [350, 411], "ordereddefaultdict": [351, 412], "extract_data_typ": [351, 412], "reverted_data_typ": [351, 412], "signed_flag": [351, 412], "get_adaptor_nam": [351, 412], "experiment": [352, 460, 483, 487, 488, 490, 496, 499, 538, 540, 541, 545, 549], "base_model": [352, 363], "keras_model": [352, 363], "mxnet_model": [352, 363], "nets_factori": [352, 363], "onnx_model": [352, 363, 387, 522], "tensorflow_model": [352, 363, 392, 524], "torch_model": [352, 363], "collect_layer_histogram": [352, 446], "create_obj_from_config": [352, 446], "kl_diverg": [352, 446], "load_huggingfac": [352, 446, 499], "neural_insights_util": [352, 446], "weights_detail": [352, 446], "sub_class": [360, 394], "register_customer_metr": 360, "topk": [360, 394, 488, 498, 499, 521, 541], "frozen": [361, 369, 394, 501], "savedmodel": [361, 369, 394, 553], "onnx_ml_pb2": [361, 501], "hybirdblock": [361, 394], "basemodel": 362, "plai": [362, 539, 544, 547], "role": [362, 544, 547], "kerasmodel": 364, "get_model_fwk_nam": 365, "fwk": 365, "mxnetmodel": 366, "net": 367, "tfslimnetsfactori": 367, "get_model_typ": 369, "validate_graph_nod": 369, "validate_and_inference_input_output": 369, "graph_sess": 369, "graph_def_sess": 369, "frozen_pb_sess": 369, "load_saved_model": 369, "saved_model_tag": 369, "signatur": 369, "metagraphdef": 369, "keras_sess": 369, "slim_sess": 369, "checkpoint_sess": 369, "estimator_sess": 369, "saved_model_sess": 369, "tensorflowbasemodel": [369, 392], "tensorflowsavedmodelmodel": 369, "tensorflowllmmodel": 369, "exceed": 369, "2gb": 369, "tensorflowqatmodel": 369, "tensorflowcheckpointmodel": 369, "tensorflowmodel": 369, "pytorchbasemodel": 370, "pytorchfxmodel": 370, "ipexmodel": 370, "driven": [371, 462, 499, 519, 536, 548], "objective_registri": 371, "objective_custom_registri": 371, "obj_cl": 371, "eural_compressor": 371, "objective_cl": 371, "user_object": 371, "__class__": 371, "__name__": 371, "objective_cfg": 371, "usr_cfg": 371, "user_obj_cfg": 371, "easili": [371, 463, 503, 507, 519, 536, 547], "peak": [371, 536], "multiobject": 371, "metric_criterion": 371, "metric_weight": 371, "obj_criterion": 371, "obj_weight": 371, "is_measur": 371, "parserfactori": 373, "onnxrtparserfactori": 375, "onnxprofilingpars": 377, "respons": [377, 378, 382, 532, 533, 534, 541], "profilingpars": 378, "profilingresult": 379, "total_execution_tim": 379, "accelerator_execution_tim": 379, "cpu_execution_tim": 379, "op_run": 379, "op_defin": 379, "tensorflowparserfactori": 380, "tensorflowprofilingpars": 382, "profilerfactori": [383, 385, 390], "create_onnx_config": 388, "ort": 388, "sessionopt": 388, "delete_assign": 393, "create_tf_config": 393, "tf_modul": 393, "configproto": 393, "set_eager_execut": 393, "entir": [394, 442, 459, 464, 465, 481, 526, 538, 547], "autotunestrategi": 395, "conservativetunestrategi": 399, "o0": [399, 550], "who": [399, 457], "hawq_v2tunestrategi": 401, "made": [401, 463, 541, 545, 550], "impact": [401, 538, 545, 550], "tunestrategymeta": 406, "metaclass": 406, "lowerbitssampl": 409, "blockfallbacktuningsampl": 409, "op_block_lst": 409, "target_dtyp": 409, "alpha_list": 409, "weightonlyquantsampl": 409, "quantopt": 412, "quant_typ": 412, "quant_opt": 412, "preprocess_user_cfg": 412, "op_user_cfg": 412, "op_user_cfg_modifi": 412, "build_slave_faker_model": 412, "slave": [412, 550], "virtual": [412, 539], "classregist": 412, "fun": 413, "attribute1": 413, "module_debug_level1": 413, "function1": 413, "param1": 413, "param2": 413, "parameter1": 413, "parameter2": 413, "function2": 413, "pep": 413, "484": [413, 553], "output_model": [413, 499, 522, 524, 548], "function3": 413, "section": [413, 465, 485, 486, 487, 519, 522, 525, 538, 540, 544, 552], "restructuredtext": 413, "liter": 413, "generator1": 413, "example_gener": 413, "exampleclass": 413, "param3": 413, "public": [413, 457, 514, 517], "attr1": 413, "attr2": 413, "attr5": 413, "api_doc_exampl": 414, "op_valu": 425, "quant_config": [425, 429, 430, 440, 441], "staticquantconfig": [425, 427], "layer_class": 425, "parse_to_keras_tune_cfg": 425, "calib_iter": [425, 429, 464], "static_quantize_entri": 425, "weight_dtyp": [427, 437], "weight_sym": [427, 437], "weight_granular": 427, "per_tensor": [427, 464, 465, 492, 541, 552], "act_dtyp": [427, 437], "act_sym": 427, "act_granular": 427, "get_all_registered_config": 427, "base_config": [427, 429, 440], "parse_config_from_dict": 427, "config_dict": 427, "get_default_static_quant_config": 427, "quantize_model": 429, "register_algo": [430, 441], "algos_map": [430, 441], "example_algo": [430, 441], "rtnweightquantconfig": [430, 435, 437, 441], "dump_elapsed_tim": [430, 453, 463], "customized_msg": [430, 453], "elaps": [430, 453], "dataloader_len": [432, 437], "apply_gptq_quant": 432, "configs_map": [432, 435], "rtn_quantize_entri": 435, "weight_bit": [437, 464], "weight_group_s": 437, "double_quant_dtyp": 437, "double_quant_bit": 437, "double_quant_sym": 437, "double_quant_group_s": 437, "get_default_rtn_config": 437, "gptqconfig": 437, "act_ord": 437, "get_default_gptq_config": 437, "run_fn": 440, "run_arg": 440, "loop": [442, 459, 460, 464, 465, 492, 529, 546, 550], "compressionmanag": 442, "deal": 442, "pruningconfig": 442, "orchestr": [442, 462, 495, 551], "on_train_begin": [442, 459, 486, 487, 499, 537, 538, 541], "train_loop": [442, 499, 537], "on_epoch_begin": [442, 445, 486, 487, 499, 537], "on_step_begin": [442, 445, 486, 487, 499, 537, 538], "on_after_compute_loss": [442, 486, 487, 499, 537], "on_before_optimizer_step": [442, 486, 487, 499, 537, 538], "on_step_end": [442, 445, 486, 487, 499, 537], "on_epoch_end": [442, 445, 486, 487, 499, 537], "on_train_end": [442, 486, 487, 499, 537, 538, 541], "path_to_sav": 442, "manag": [442, 445, 499, 502, 503, 513], "top1": [442, 498, 521, 538, 541, 553], "callbacks_list": 442, "layerhistogramcollector": 443, "layer_tensor": 443, "include_lay": 443, "get_func_from_config": 445, "func_dict": 445, "get_preprocess": 445, "get_metr": 445, "get_postprocess": 445, "get_algorithm": 445, "create_dataset": 445, "cfg_preprocess": 445, "cfg_filter": 445, "create_dataload": 445, "dataloader_cfg": 445, "create_eval_func": 445, "postprocess_cfg": 445, "fp32_baselin": [445, 463], "baselin": [445, 546, 548], "create_train_func": 445, "train_cfg": 445, "Their": 445, "auxiliari": 446, "optimizedmodel": 448, "from_pretrain": [448, 499], "save_for_huggingface_upstream": [448, 499], "export_compressed_model": [448, 544], "saved_dir": [448, 544], "use_optimum_format": 448, "compression_dtyp": 448, "compression_dim": 448, "scale_dtyp": 448, "comoress": 448, "register_neural_insights_workload": 450, "workload_loc": [450, 453], "workload_mod": 450, "workload_nam": 450, "uuid": 450, "update_neural_insights_workload": 450, "workload_uuid": 450, "update_neural_insights_workload_accuracy_data": 450, "baseline_accuraci": 450, "optimized_accuraci": 450, "get_model_path": 450, "is_int8_model": 452, "load_weight_onli": 452, "checkpoint_dir": 452, "history_cfg": 452, "best_configur": 452, "best_model_weight": 452, "snapshot": [452, 523], "recover_model_from_json": 452, "json_file_path": 452, "cfg_from_fil": 453, "yaml_fil": [453, 483, 488], "lazyimport": 453, "lazi": 453, "till": [453, 550], "time_limit": 453, "get_siz": 453, "seen": [453, 463], "recurs": 453, "compute_spars": 453, "fault_tolerant_fil": 453, "equal_dict": 453, "d2": 453, "compare_kei": 453, "ignore_kei": 453, "ignor": [453, 481, 483, 544, 547, 550], "cpuinfo": 453, "combine_histogram": 453, "old_hist": 453, "old": [453, 499, 545], "get_tensor_histogram": 453, "get_all_fp32_data": 453, "get_tuning_histori": 453, "tuning_history_path": 453, "offlin": [453, 457, 499, 541, 547], "str2arrai": 453, "dequantize_weight": 453, "weight_tensor": 453, "min_filter_tensor": 453, "max_filter_tensor": 453, "scale_info": 453, "captureoutputtofil": 453, "tmp_file_path": 453, "stream": [453, 553], "sy": [453, 505], "stderr": 453, "captur": 453, "statist": [453, 454], "header": [453, 491], "field_nam": 453, "output_handl": 453, "printer": 453, "global_st": 453, "load_data_from_pkl": 453, "pkl": [453, 523], "dump_data_to_loc": 453, "show_memory_info": 453, "hint": 453, "dump_class_attr": 453, "compare_object": 453, "obj1": 453, "obj2": 453, "ignore_attr": 453, "comparison": [453, 544, 545, 548], "alias_param": 453, "param_nam": 453, "param_alia": 453, "alias": 453, "print_tabl": 453, "column_map": 453, "table_entri": 453, "titl": [453, 497, 520, 550], "insert_newlin": 453, "prettyt": 453, "column": [453, 544, 547], "handler": [453, 550], "row": [453, 485, 522, 547], "decim": 453, "get_tensors_info": 453, "get_weights_detail": 453, "weightdetail": 453, "dump_tabl": 453, "file_typ": 453, "csv": [453, 460, 522, 523], "dump_table_to_csv": 453, "get_number_of_socket": 453, "platform": [453, 462, 495, 502, 510, 529, 539, 541], "opentri": 453, "activation_min": 453, "activation_max": 453, "print_op_list": 453, "get_op_list": 453, "minmax_file_path": 453, "input_model_tensor": 453, "optimized_model_tensor": 453, "activation_min_max": 453, "calculate_ms": 453, "mse_metric_gap": 453, "fp32_tensor": 453, "dequantize_tensor": 453, "euclidean": [453, 486], "distanc": [453, 486], "check_key_exist": 453, "weightsdetail": 454, "input_tensor_data": 454, "optimized_tensor_data": 454, "weightsstatist": 454, "welcom": [456, 457, 458, 462, 521, 528, 554], "interest": [457, 462, 521, 548], "foster": 457, "particip": [457, 529], "commun": [457, 521], "harass": 457, "experi": [457, 502, 524, 546, 547, 550], "everyon": 457, "regardless": 457, "ag": 457, "bodi": 457, "ethnic": 457, "characterist": 457, "gender": 457, "educ": 457, "socio": 457, "econom": 457, "race": 457, "religion": 457, "sexual": 457, "orient": 457, "contribut": [457, 462, 538], "inclus": 457, "Being": 457, "viewpoint": 457, "gracefulli": 457, "focus": [457, 463], "empathi": 457, "toward": [457, 486], "member": [457, 463], "unaccept": 457, "imageri": 457, "unwelcom": 457, "troll": 457, "insult": 457, "derogatori": 457, "polit": 457, "attack": 457, "privat": 457, "publish": [457, 497, 500, 520, 547], "electron": 457, "explicit": 457, "permiss": 457, "inappropri": 457, "profession": 457, "clarifi": 457, "appropri": [457, 481, 547], "fair": 457, "action": [457, 514, 517], "edit": 457, "reject": 457, "commit": [457, 458], "wiki": 457, "ban": 457, "temporarili": 457, "deem": 457, "threaten": 457, "offens": 457, "harm": 457, "mail": 457, "social": [457, 539], "media": [457, 539], "account": [457, 546, 550], "appoint": 457, "onlin": [457, 546], "event": [457, 548], "abus": 457, "report": [457, 458, 462, 529, 546], "contact": [457, 545, 546], "complaint": 457, "review": [457, 458, 462, 539], "investig": [457, 524], "circumst": [457, 540], "oblig": [457, 525], "confidenti": [457, 521], "regard": [457, 543], "incid": 457, "good": [457, 541, 550], "faith": 457, "repercuss": 457, "leadership": 457, "faq": [457, 462], "page": [457, 458, 521, 524, 525], "send": [458, 464], "view": [458, 462, 489, 510, 519, 525, 545], "star": 458, "repositori": [458, 514, 517], "button": [458, 495, 513, 519], "fork": [458, 514, 517], "clone": [458, 485, 496, 512, 516, 521, 523, 524, 526, 527], "pc": 458, "git": [458, 485, 491, 496, 521, 523, 524, 526, 527], "modif": [458, 463, 492, 507, 526], "checkout": 458, "my": 458, "push": [458, 538, 544, 547], "cover": [458, 490, 494, 539], "would": [458, 499, 523, 538, 541, 547], "adopt": [458, 502, 538, 539, 547], "certif": [458, 521], "agre": 458, "pr": [458, 482, 498, 514, 517, 545], "At": [458, 464, 525, 529, 550], "approv": 458, "solv": [458, 541, 545], "licens": 458, "azur": [458, 462, 539], "devop": 458, "ci": 458, "cloud": [458, 462, 529, 539], "deploi": [458, 486, 499, 525, 529, 544, 550], "e16": 458, "v5": 458, "scan": [458, 462], "pylint": 458, "bandit": 458, "copyright": [458, 497], "docstyl": 458, "spellcheck": 458, "dco": 458, "pytest": 458, "No": [458, 491, 499, 527, 528, 539], "failur": [458, 459], "fault": 458, "coverag": 458, "runtim": [458, 462, 463, 464, 466, 482, 485, 489, 492, 495, 500, 504, 509, 510, 540, 544, 545, 550], "submit": [458, 526, 529, 539], "bug": [458, 462], "intend": 458, "safe": 458, "collabor": [458, 462, 504, 510], "adher": 458, "toolkit": [459, 496, 502, 510, 539, 551], "tracer": 459, "resolv": [459, 461], "floatfunct": 459, "cat": [459, 490, 505, 532, 533, 534], "done": [459, 486, 487, 503, 519, 528, 532, 533, 538, 541], "10004": [459, 460, 463, 482, 486, 487, 488, 492, 495, 500, 537, 540, 542, 544, 552], "neural_compressor": [459, 460, 462, 465, 480, 482, 483, 485, 486, 487, 488, 490, 493, 494, 498, 499, 500, 501, 521, 522, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 549, 550, 552], "eval": [459, 482, 485, 502, 541, 548], "conduct": [459, 499, 507, 519, 550, 551], "imper": 459, "therefor": [459, 499, 522, 524, 538, 541, 542, 545, 547], "lot": [459, 524, 547], "As": [459, 464, 482, 486, 498, 499, 513, 524, 538, 544, 550], "successfulli": [459, 488, 528, 532, 533, 534, 539], "suggest": [459, 546], "traceabl": 459, "proxi": 459, "tutori": [459, 510, 539, 551], "prototyp": 459, "html": [459, 462, 464, 481, 488, 495, 514, 517, 520, 522, 528, 532, 541], "highlight": 459, "untrac": 459, "ssd": [459, 490, 553], "resnet34": [459, 553], "r34": 459, "bboxes_labels_scor": 459, "prob": 459, "45": [459, 553], "max_output": 459, "zip": [459, 528, 532, 533], "dbox": 459, "dlabel": 459, "dscore": 459, "decode_singl": 459, "autom": [460, 502, 519, 520, 539, 547], "artifici": 460, "ann": 460, "par": [460, 529], "outperform": 460, "propos": [460, 463, 486, 500, 544, 547], "potenti": [460, 485, 545], "lie": [460, 481], "predictor": 460, "shown": [460, 482, 485, 486, 498, 499, 513, 522, 524, 536, 537, 538, 542, 547, 550], "figur": [460, 512, 513, 516, 542], "popul": 460, "inner": 460, "evolutionari": 460, "cycl": 460, "until": [460, 464, 550], "conclud": 460, "met": [460, 492, 541, 548], "yet": [460, 514, 517, 520, 527, 541], "simplest": [460, 481, 505], "launcher": [460, 462, 486, 487, 510, 551], "agent": 460, "nsga2": 460, "supernet": 460, "ofa_mbv3_d234_e346_k357_w1": 460, "acc": [460, 529, 538, 548, 553], "mac": [460, 520], "num_ev": 460, "250": [460, 538], "results_csv_path": 460, "search_result": 460, "dataset_path": 460, "ilsvrc2012": 460, "aim": [460, 462, 502, 538, 547, 550, 551], "mobilenetv3": 460, "lt": [460, 483, 553], "wmt": 460, "en": 460, "de": 460, "guidelin": [461, 462], "mainstream": [462, 551], "workflow": [462, 464, 465, 485, 486, 490, 496, 500, 514, 517, 521, 548, 551], "particular": [462, 538, 544], "wide": [462, 489, 500, 538, 541, 553], "hardwar": [462, 463, 486, 495, 499, 519, 538, 539, 540], "xeon": [462, 496, 497, 500, 539, 541, 543, 553], "scalabl": [462, 496, 500, 539, 541, 543], "processor": [462, 500, 527, 539, 541, 543], "flex": [462, 496], "amd": [462, 496, 553], "arm": [462, 495, 496, 553], "nvidia": [462, 481, 495, 496, 553], "llama2": 462, "falcon": [462, 538, 547, 553], "gpt": [462, 523, 538, 547, 553], "j": [462, 523, 538, 547, 553], "bloom": [462, 538, 547, 553], "broad": [462, 495, 508, 551], "stabl": [462, 496, 538, 539], "diffus": [462, 539], "vision": [462, 490, 506, 547], "coder": [462, 495, 503, 504, 507, 510, 513, 526, 530, 539], "marketplac": [462, 520, 539], "googl": [462, 500, 539], "amazon": [462, 502, 510], "web": [462, 521, 527, 532, 533, 534, 548], "servic": [462, 519, 526, 539], "softwar": [462, 497, 538, 539, 545], "alibaba": [462, 509, 516, 517, 539], "tencent": [462, 539], "taco": [462, 539], "oliv": [462, 539], "ai": [462, 502, 539, 543, 551], "ecosystem": [462, 539], "lightn": [462, 509], "pip": [462, 485, 488, 491, 493, 496, 504, 507, 512, 514, 516, 517, 521, 522, 523, 524, 545], "wget": [462, 485, 491, 493, 521, 524], "googleapi": [462, 493, 521, 524], "v1_6": [462, 493, 521, 524], "mobilenet_v1_1": [462, 493, 521, 532], "0_224_frozen": [462, 493, 521, 532], "overview": [462, 550], "jupyterlab": [462, 502, 508, 510, 512, 516, 551], "studio": [462, 510, 519, 529, 551], "topic": 462, "int4": [462, 541, 553], "fp8": [462, 539], "innov": [462, 510, 539], "blog": [462, 539], "oct": [462, 539], "emnlp": [462, 539], "teq": [462, 539, 542, 544], "sep": [462, 539], "neurip": [462, 539], "quala": [462, 539], "minilm": [462, 539, 553], "releas": [462, 496, 508, 510, 512, 516, 518, 530, 533, 534, 554], "legal": [462, 554], "request": [462, 527, 528, 529, 532, 533, 534, 541], "ask": [462, 496], "email": 462, "research": [462, 497, 547, 553], "idea": [462, 521, 538, 547, 550], "discord": 462, "join": [462, 522, 527, 532, 533], "technic": 462, "discuss": 462, "wechat": [462, 539], "img": 462, "bridg": [463, 464, 495], "vanilla": [463, 464, 495], "abcadaptor": 463, "__init__": [463, 482, 483, 498, 550], "query_fw_cap": [463, 465], "query_fused_pattern": 463, "he": 463, "besid": [463, 486, 524, 544], "describ": [463, 465, 485, 492, 521, 548], "past": [463, 544], "mainten": 463, "difficult": [463, 547], "abil": [463, 464, 483, 492, 547], "fragment": 463, "scenario": [463, 480, 486, 499, 538, 544], "granular": [463, 464, 465, 492, 495, 505, 541, 547, 552], "semant": [463, 492], "mla": [463, 500, 541], "becom": [463, 490, 538, 544], "explor": 463, "inspect_tensor": 463, "op_list": [463, 548], "iteration_list": 463, "inspect_typ": 463, "save_to_disk": 463, "quantization_cfg": 463, "set_tensor": 463, "tensor_dict": 463, "diagnosis_help": 463, "fw": 464, "outlin": [464, 465], "instruct": [464, 465, 486, 496, 500, 514, 517, 521, 522, 523, 524, 538, 539, 540, 541, 547, 553], "extend": [464, 465], "accommod": [464, 465], "incorpor": [464, 465, 487, 538, 550], "give": [464, 519, 550], "diagram": [464, 465, 485, 550], "illustr": [464, 465, 487, 550], "sequencediagram": [464, 465, 529], "autonumb": [464, 465], "query_framework_cap": 464, "opwis": 464, "optypewis": 464, "travers": [464, 465, 544, 550], "\u2776": 464, "\u2777": 464, "\u2778": 464, "\u2779": 464, "\u277a": 464, "\u277b": 464, "\u277c": 464, "These": [464, 495, 522], "chapter": 464, "node_op": 464, "confirm": 464, "chosen": [464, 481], "tune_config": 464, "int8_conv_config": 464, "optype_wise_": 464, "tuning_cfg_to_fw": 464, "Its": [464, 481, 538], "dispatch": [464, 495, 526, 529], "is_perchannel": 464, "is_asymmetr": 464, "convert_bf16": 464, "larger": [464, 538, 544, 547], "somewhat": 464, "distort": 464, "line": [464, 488, 495, 502, 507, 508, 527, 548], "explain": [465, 485, 547], "let": [465, 492, 507, 538, 540, 552], "overal": [465, 527, 552], "drive": 465, "uint4": 465, "kullback": [465, 486], "leibler": [465, 486], "pytorch_cpu": 465, "1_11_capabl": 465, "cap_s8_1_11": 465, "cap_s8_1_11_conv1d": 465, "per_channel_symmetr": 465, "addition": [465, 488, 538, 550], "per_tensor_symmetr": 465, "due": [465, 490, 538, 541, 547, 548], "nativ": 465, "with_arg": 465, "qscheme": 465, "torch_dtyp": 465, "quant_min": 465, "quant_max": 465, "linux": [480, 491, 496, 513, 519], "x86_64": 480, "aarch64": 480, "prove": [481, 544, 547], "benefici": 481, "uniform": [481, 544], "\u03b2": 481, "\u03b1": 481, "fundament": [481, 499], "primari": [481, 550], "focu": [481, 550], "essenti": [481, 491], "remaind": 481, "enhanc": [481, 502, 538, 539, 543], "resolut": 481, "extrem": 481, "still": [481, 499, 525, 539, 541, 543], "retain": 481, "noteworthi": 481, "vanhouck": 481, "vincent": 481, "andrew": 481, "senior": 481, "mark": 481, "mao": 481, "speed": [481, 499, 510, 538, 539, 541, 550], "2011": 481, "szymon": 481, "migacz": 481, "2017": 481, "mckinstri": 481, "jeffrei": 481, "l": [481, 486, 548, 550], "discov": [481, 548], "1809": 481, "04191": 481, "2018": 481, "encount": 482, "consum": 482, "previous": 482, "lack": [482, 491], "faster": [482, 484, 490, 539, 550, 553], "Of": 482, "evenli": 482, "divid": [482, 529, 547, 550], "discard": 482, "throw": 482, "awai": 482, "draw": [482, 546, 550], "subprocess": 482, "pin": [482, 512, 516], "reshuffl": 482, "manner": [482, 486, 501], "newdataload": 482, "customis": [482, 483, 498], "ensp": [483, 549], "imagerecord": [483, 488, 552], "image_nam": 483, "cocorecord": 483, "gt": [483, 547, 549], "int64": 483, "offer": 483, "style_transf": 483, "content": [483, 527, 528, 532, 533, 534], "tfrecorddataset": 483, "labelbal": 483, "300": [483, 538, 553], "16": [483, 496, 532, 544, 553], "helloworld": [483, 500, 549], "aid": 484, "deploy": [484, 502, 519, 539, 542, 547], "infrastructur": 484, "diagnos": 485, "gui": [485, 495, 524, 538], "termin": [485, 512, 513, 516, 522], "repeat": [485, 550], "durat": [485, 528, 532, 533, 546], "cd": [485, 488, 496, 521, 523, 524, 526, 527, 532, 533, 534], "setup": [485, 492, 496, 514, 517, 521, 523, 524, 526, 527, 538], "ilsvr2012": 485, "caff": 485, "berkeleyvis": 485, "caffe_ilsvrc12": 485, "xvzf": 485, "image_recognit": [485, 524, 548], "resnet50_torchvis": 485, "ptq_static": [485, 523], "resnet50_v1": [485, 488, 499], "dataset_loc": [485, 524, 532, 548], "label_path": 485, "quantiti": 485, "vec": 485, "frac": [485, 547], "sigma": 485, "var": 485, "happen": 485, "dispers": [485, 522], "v0": [485, 524, 547, 548], "cg": [485, 524, 548], "conv0": [485, 524, 548], "expens": [486, 499, 550], "power": [486, 499, 513, 539], "mobil": [486, 499, 553], "produc": 486, "logit": 486, "softmax": 486, "kd": 486, "patient": 486, "compact": [486, 499, 505, 538], "agnost": 486, "resourc": [486, 526, 529, 550], "convolut": [486, 539], "ia": 486, "attach": [486, 499, 547], "shallow": 486, "deepest": 486, "deeper": 486, "paper": [486, 538, 544, 547], "10006": [486, 487], "student_output": [486, 487], "student_loss": [486, 487], "training_func_for_nc": [486, 487], "distil_loss_conf": 486, "accordingli": [486, 510, 547], "promis": [487, 499, 538], "huge": [487, 524, 538, 542], "heavi": 487, "light": 487, "booster": 487, "degrad": [487, 538, 550], "novel": [487, 502, 513, 519], "place": [487, 496, 532, 538, 548, 550], "comb": 487, "distillation_criterion": [487, 499, 537], "q_conf": 487, "horovod": 488, "instal": [488, 491, 493, 502, 504, 507, 510, 514, 517, 519, 520, 522, 523, 524, 554], "program": [488, 497, 502, 519], "enable_eager_execut": 488, "yaml_file_path": 488, "pre_process": 488, "simpli": [488, 501, 502, 504, 507, 519, 527], "evaluation_result": 488, "evaluation_time_cost": 488, "partit": [488, 538], "distributedsampl": 488, "train_sampl": 488, "train_dataset": [488, 541], "num_replica": 488, "rank": 488, "train_load": 488, "train_kwarg": 488, "adadelta": 488, "distributedoptim": 488, "named_paramet": 488, "broadcast_paramet": 488, "root_rank": 488, "broadcast_optimizer_st": 488, "set_epoch": 488, "batch_idx": 488, "nll_loss": 488, "log_interv": 488, "0f": 488, "tloss": 488, "6f": 488, "dry_run": 488, "test_func": 488, "host": [488, 527, 529, 532, 533, 534], "num_of_process": 488, "002": 488, "ssh": [488, 519], "prompt": 488, "readm": [488, 532], "exactli": [488, 503], "recognit": [488, 490, 538, 548], "resizecropimagenet": [488, 549], "realiz": [488, 536, 543, 546], "tow": 488, "node1": [488, 532, 533], "node2": [488, 532, 533], "TO": [488, 504, 524], "your_node1_nam": 488, "your_node2_nam": 488, "resnet50_fp32_pretrained_model": 488, "nc_resnet50_v1": 488, "resnet": [488, 553], "varieti": [489, 540, 550], "demonstr": [489, 502, 532, 533, 534, 548], "speedup": [489, 495, 541], "2x": [489, 495], "vnni": [489, 495, 540, 541], "exchang": 490, "hope": 490, "inc_model": [490, 501], "fp32_onnx_config": 490, "verifi": 490, "vgg16": [490, 553], "mobilenet": [490, 546, 553], "rcnn": 490, "torchscript": [490, 542, 547], "unsupport": [490, 499, 538], "add_relu": 490, "conv1d_relu": 490, "conv2d_relu": 490, "group_norm": 490, "hardswish": 490, "instance_norm": 490, "layer_norm": 490, "leaky_relu": 490, "sigmoid": 490, "toolchain": [491, 539], "bare": 491, "metal": 491, "sudo": [491, 505], "apt": [491, 496, 505, 513], "python3": 491, "dev": [491, 512, 516], "distutil": 491, "libgl1": 491, "mesa": 491, "glx": 491, "libglib2": 491, "ln": 491, "sf": 491, "usr": 491, "incompat": 491, "88": [491, 546, 553], "80": [491, 542, 548, 553], "pyobject": 491, "reinstal": 491, "libgl": 491, "yum": [491, 496], "opencv": [491, 496, 513], "conda": [491, 496, 505, 513, 532, 533, 534, 545], "13": [491, 496, 521, 545, 547], "pend": [491, 528], "sqlalchemi": 491, "27": [491, 553], "alemb": 491, "forg": [491, 496], "quick": [492, 500, 538, 551, 552], "friendli": [492, 499, 539, 547, 551, 552], "dive": [492, 551], "purpos": [492, 500, 519, 521, 540, 541], "syntax": 492, "go": [492, 514, 517, 525, 540, 544, 549], "up1": 492, "up2": 492, "valid_mixed_precis": 492, "addn": 492, "grappler_optim": 492, "constfold": 492, "arithmet": 492, "debug_stripp": 492, "major": [494, 524, 541, 547], "concept": [494, 546, 551], "rather": [494, 544], "custom_metr": 494, "refin": [494, 538], "420": 495, "geomean": 495, "snippet": 495, "upload": [495, 514, 517], "click": [495, 502, 503, 510, 513, 519, 524, 539, 548], "qintegerop": [495, 541], "plan": 495, "oneapi": [496, 539, 551], "analyt": [496, 539, 551], "success": [496, 521, 545], "11": [496, 498, 500, 521, 547, 550, 553], "frequent": 496, "pypi": [496, 514, 517], "nightli": 496, "headless": [496, 513], "fastai": 496, "esri": 496, "consolid": 496, "latest": [496, 539, 545], "eas": [496, 504, 539], "along": [496, 538, 544], "streamlin": [496, 526, 539], "scienc": 496, "websit": 496, "anaconda": [496, 526, 527], "suit": [496, 520, 548], "formerli": 496, "skylak": 496, "cascad": 496, "lake": [496, 500, 539], "cooper": [496, 500, 539], "ic": [496, 539], "sapphir": 496, "rapid": 496, "hbm": 496, "arctic": 496, "sound": 496, "pont": 496, "vecchio": 496, "cento": [496, 553], "ubuntu": 496, "22": [496, 553], "04": [496, 553], "maco": 496, "ventura": 496, "fortensorflow": 496, "forpytorch": 496, "12": [496, 521, 553], "tf_enable_onednn_opt": 496, "onednn": [496, 500, 541], "newer": 496, "subject": 497, "accompani": [497, 550], "wish": 497, "bibtex": 497, "author": 497, "feng": 497, "tian": 497, "hanwen": 497, "haihao": [497, 538], "shen": [497, 538], "suyu": 497, "chen": 497, "howpublish": 497, "year": 497, "logo": 497, "atom": 497, "phi": 497, "pentium": 497, "vtune": 497, "corpor": 497, "subsidiari": 497, "brand": 497, "claim": 497, "popularli": 498, "industri": [498, 539], "label_map": 498, "decis": 498, "ap": 498, "curv": 498, "turn": [498, 513, 542], "target_boxes_num": 498, "str_label": 498, "int_label": 498, "inturn": 498, "cocomap": 498, "vocmap": 498, "categor": 498, "multiclass": 498, "multilabel": 498, "newmetr": 498, "reset": 498, "reflect": [498, 549], "new_metr": 498, "deliv": [499, 539, 545], "conveni": [499, 526], "upgrad": 499, "veri": [499, 520, 524, 541, 544, 550, 551], "comprehens": [499, 551], "resort": 499, "automodelforsequenceclassif": 499, "autotoken": 499, "val_dataset": [499, 541], "val_dataload": [499, 541], "worker": [499, 529, 532, 533, 534, 541], "ping_memori": [499, 541], "formul": 499, "effort": 499, "onnxrt_integ": [499, 552], "onnxrt_qlinear": [499, 552], "image_tensor": [499, 552], "post_training_dynamic_qu": [499, 540, 550], "1000": [499, 528, 552], "2000": 499, "sampling_s": [499, 552], "model_wis": [499, 552], "op_dict": 499, "op_wis": [499, 548, 552], "sigopt_api_token": [499, 546, 550], "sigopt_project_id": [499, 546, 550], "sigopt_experiment_nam": [499, 546, 550], "demo": 499, "600": 499, "training_arg": 499, "emul": [499, 541], "trainer": [499, 510], "briefli": [499, 547], "pruning_func": 499, "train_dataload": [499, 538, 541], "n_gpu": 499, "gradient_accumulation_step": 499, "clip_grad_norm_": 499, "max_grad_norm": 499, "start_epoch": [499, 540, 552], "end_epoch": [499, 540, 552], "97": [499, 553], "newli": [499, 538], "on_after_optimizer_step": [499, 538], "layer3": [499, 538], "0004": 499, "randomresizedcrop": [499, 549], "totensor": [499, 549], "485": 499, "456": [499, 553], "406": [499, 553], "nepoch": 499, "cnt": 499, "loss_sum": 499, "iter_bar": 499, "desc": 499, "teacher_logit": 499, "train_fun": 499, "training_func": 499, "recent": [499, 500], "growth": [499, 500, 538], "complex": [499, 500, 538], "significantli": [499, 500, 522, 524, 538, 550], "bandwidth": [499, 500, 544], "exit_polici": [499, 552], "determinist": 499, "meaning": [499, 537], "reli": [499, 547], "prune_conf": 499, "quantization_aware_training_conf": 499, "aforement": 499, "inset": 499, "p_conf": [499, 537], "ssd_mobilenet_v1": 499, "benchmarkconf": 499, "half": [500, 510], "sixteen": 500, "launch": [500, 520, 525], "3rd": [500, 539, 541, 543], "gen": [500, 539, 541, 543], "codenam": 500, "boost": [500, 503, 519, 538, 539], "x86": 500, "avx512": [500, 541], "vcvtne2ps2bf16": 500, "vcvtneps2bf16": 500, "vdpbf16p": 500, "fbgemm": [500, 541], "tensorrtexecutionprovid": [500, 541], "cudaexecutionprovid": [500, 541], "dnnlexecutionprovid": [500, 541], "avx512_bf16": 500, "plu": 500, "resnet18": [500, 504, 553], "persist": 501, "brought": [501, 503, 510, 541], "tf2": 501, "h5": 501, "hybridblock": 501, "0000": 501, "saved_result": [501, 523, 544], "simplifi": [502, 513, 519, 538, 539], "acquir": 502, "analysi": [502, 519, 538, 546], "heurist": [502, 519], "great": 502, "facilit": 502, "autocast": 502, "my_model": 502, "no_grad": 502, "memory_format": 502, "112": 502, "plugin": [502, 520], "aw": [502, 510, 529, 539, 553], "sagemak": [502, 510], "neural_cod": [502, 504, 506, 507, 508, 510], "bench": 502, "superbench": 502, "enjoi": [503, 507, 510], "reload": [503, 520, 522, 525], "modern": [504, 544], "democrat": [504, 539], "programm": [504, 510, 519], "nano_bf16_channels_last": 504, "nano_bf16_ipex_channels_last": 504, "nano_bf16_ipex": 504, "nano_bf16": 504, "nano_fp32_channels_last": 504, "nano_fp32_ipex_channels_last": 504, "nano_fp32_ipex": 504, "nano_gpu_to_cpu": 504, "nano_int8": 504, "nano_jit_bf16_channels_last": 504, "nano_jit_bf16_ipex_channels_last": 504, "nano_jit_bf16_ipex": 504, "nano_jit_bf16": 504, "nano_jit_fp32_channels_last": 504, "nano_jit_fp32_ipex_channels_last": 504, "nano_jit_fp32_ipex": 504, "nano_jit_fp32": 504, "nano_onnxruntime_fp32": 504, "nano_onnxruntime_int8_qlinear": 504, "openvino": 504, "nano_openvino_fp32": 504, "nano_openvino_int8": 504, "bc": [505, 513], "conda_prefix": 505, "echo": 505, "tradit": [505, 538], "libjemalloc": 505, "libiomp5": 505, "home": 505, "lib": 505, "ld_preload": 505, "malloc_conf": 505, "oversize_threshold": 505, "background_thread": 505, "metadata_thp": 505, "dirty_decay_m": 505, "9000000000": 505, "muzzy_decay_m": 505, "kmp_affin": 505, "kmp_blocktim": 505, "dnnl_primitive_cache_capac": 505, "governor": 505, "cpufreq": 505, "scaling_governor": 505, "powersav": 505, "tee": 505, "pytorch_jit_script": [506, 509], "pytorch_channels_last": [506, 509], "run_bench": 506, "patch": [506, 519], "patch_path": 506, "your_patch_path": 506, "sweep": 506, "sweep_object": 506, "bench_config": 506, "bench_featur": 506, "sai": 507, "run_glu": [507, 508, 530, 533, 534], "requisit": 507, "task_nam": [507, 508, 530, 533, 534], "do_ev": [507, 508, 523, 530, 533, 534], "remain": 507, "itself": [507, 538], "run_glue_optim": 507, "static_ipex": 507, "auto_qu": 508, "v4": [508, 530, 533, 534, 553], "albert": [508, 553], "sst2": 508, "alexnet": [508, 553], "pytorch_amp": 509, "optimize_for_infer": 509, "pytorch_jit_trac": 509, "pytorch_jit_script_ofi": 509, "pytorch_jit_trace_ofi": 509, "torchdynamo": 509, "pytorch_torchdynamo_jit_script": 509, "pytorch_torchdynamo_jit_trac": 509, "pytorch_torchdynamo_jit_script_ofi": 509, "pytorch_torchdynamo_jit_trace_ofi": 509, "pytorch_inc_bf16": 509, "pytorch_inc_static_quant_fx": 509, "pytorch_inc_static_quant_ipex": 509, "pytorch_inc_static_quant_ipex_xpu": 509, "pytorch_inc_dynamic_qu": 509, "pytorch_ipex_fp32": 509, "pytorch_ipex_bf16": 509, "pytorch_ipex_int8_static_qu": 509, "pytorch_ipex_int8_dynamic_qu": 509, "blade": 509, "disc": 509, "pytorch_aliblad": 509, "pytorch_lightning_bf16_cpu": 509, "tensorflow_amp": 509, "keras_amp": 509, "tensorflow_inc": 509, "keras_inc": 509, "onnx_inc_static_quant_qlinear": 509, "onnx_inc_static_quant_qdq": 509, "onnx_inc_dynamic_qu": 509, "optimum": [509, 510, 522, 544], "pytorch_inc_huggingface_optimum_stat": 509, "pytorch_inc_huggingface_optimum_dynam": 509, "intel_extension_for_transform": 509, "bigdl": [509, 510], "nano": [509, 510], "nano_": 509, "inc_auto": 509, "delight": 510, "announc": 510, "500": [510, 528, 553], "jupyt": [510, 512, 513, 516], "isa": 510, "adjust": [510, 541, 547], "delta": 510, "acc_delta": 510, "int8_acc": 510, "fp32_acc": 510, "ext": [512, 514, 516, 517, 518], "lab": [512, 513, 514, 516, 517], "nodej": [512, 516], "jlpm": [512, 516], "yarn": [512, 516], "npm": [512, 513, 516], "lieu": [512, 516], "labextens": [512, 513, 516], "typescript": [512, 516], "watch": [512, 516, 525], "immedi": [512, 516, 538], "refresh": [512, 516], "browser": [512, 516, 521, 525], "wait": [512, 516, 519, 529], "rebuilt": [512, 516], "easier": [512, 516, 519, 521, 539], "symlink": [512, 516], "down": 513, "finish": [513, 529], "enter": [513, 519, 527], "blank": 513, "cell": 513, "gain": [513, 537, 539], "mkl": 513, "jemalloc": 513, "pip3": 513, "pyproject": [514, 517], "toml": [514, 517], "twine": [514, 517], "whl": [514, 517], "dist": [514, 517], "sdist": [514, 517], "bdist_wheel": [514, 517], "deprec": [514, 517, 545, 549], "frontend": [514, 517, 527], "login": [514, 517, 546], "cut": [514, 517], "admin_github_token": [514, 517], "pypi_token": [514, 517], "npm_token": [514, 517], "secret": [514, 517], "panel": [514, 517, 519], "draft": [514, 517], "changelog": [514, 517, 518], "pkg": [514, 517], "bot": [514, 517], "pick": [514, 517, 520], "feedstock": [514, 517], "hatch": 517, "notabl": 518, "vscode": [518, 520], "daili": 519, "advantag": [519, 538, 540, 550], "remot": 519, "server": [519, 521, 524, 527, 532, 533, 534], "re": [519, 525, 544], "market": 519, "uninstal": 519, "fill": [519, 546, 549, 550], "upper": 519, "sidebar": 519, "hover": 519, "track": [519, 546], "argpars": 519, "pop": [519, 529], "diff": 519, "manifest": 520, "declar": 520, "palett": 520, "registercommand": 520, "amodio": 520, "tsl": 520, "matcher": 520, "dbaeumer": 520, "eslint": [520, 525], "press": 520, "f5": 520, "ctrl": 520, "hello": 520, "world": 520, "breakpoint": 520, "consol": [520, 525], "relaunch": 520, "toolbar": 520, "node_modul": 520, "viewlet": 520, "dropdown": 520, "runner": [520, 525], "startup": 520, "bundl": 520, "neural_insight": [521, 523, 524], "tl": 521, "ui": 521, "5000": 521, "338174d13706855fc6924cec7b3a8ae8": 521, "listen": 521, "firewal": 521, "8080": 521, "cert": 521, "path_to_cert": 521, "crt": 521, "path_to_private_kei": 521, "encrypt": 521, "expos": 521, "forfeit": 521, "client": [521, 527, 534], "extern": 521, "threat": 521, "diagnost": 521, "skill": 521, "feel": [521, 525], "layoutlmv3": [522, 553], "seqev": 522, "sentencepiec": 522, "timm": 522, "fvcore": 522, "pillow": 522, "einop": 522, "textdist": 522, "setuptool": 522, "cli": 522, "hypjudi": 522, "finetun": [522, 538, 544, 553], "funsd": [522, 553], "calib_dataset": 522, "incdataset": 522, "eval_dataset": 522, "poor": [522, 548], "9049": 522, "2989": 522, "66": [522, 553], "9631": 522, "glob": 522, "panda": 522, "pd": 522, "set_opt": 522, "max_row": 522, "max_column": 522, "getmtim": 522, "activations_t": 522, "weights_tabl": [522, 523], "read_csv": 522, "nweight": 522, "descend": 522, "sorted_data": 522, "sort_valu": 522, "ascend": 522, "evid": 522, "tip": 522, "8981": 522, "7502": 522, "6b": [523, 547, 553], "run_clm": 523, "eleutherai": [523, 547, 553], "wikitext": [523, 553], "dataset_config_nam": 523, "do_train": 523, "inspect_sav": 523, "inspect_result": 523, "quan": 523, "model_summari": 523, "incept": [524, 553], "v3": [524, 553], "inception_v3": [524, 548], "inceptionv3_fp32_pretrained_model": [524, 548], "bash": [524, 548], "prepare_dataset": 524, "sh": [524, 548], "raw_dir": 524, "img_raw": 524, "delet": [524, 538], "run_tun": 524, "nc_inception_v3": 524, "highest": [524, 530, 550], "satisfactori": 524, "webpag": 524, "spike": 524, "bottom": 524, "chart": [524, 541, 546, 548], "concentr": 524, "toler": 524, "But": 524, "bigger": 524, "bootstrap": 525, "localhost": [525, 527, 532, 533], "3000": 525, "lint": 525, "interact": [525, 546], "correctli": 525, "hash": [525, 528], "readi": [525, 538], "aren": 525, "transit": 525, "webpack": 525, "babel": 525, "tweak": 525, "ever": 525, "curat": 525, "suitabl": 525, "middl": [525, 547], "shouldn": 525, "understand": [525, 541, 548, 551], "wouldn": 525, "couldn": 525, "facebook": [525, 547, 553], "troubleshoot": 525, "effortlessli": 526, "grpc": [526, 527, 531, 532, 533, 535], "queue": 526, "seamlessli": [526, 538, 550], "mpi": [526, 527, 550], "neural_solut": [526, 527, 532, 533, 534], "task_monitor_port": [527, 532, 533, 534], "22222": [527, 532, 533, 534], "result_monitor_port": [527, 532, 533, 534], "33333": [527, 532, 533, 534], "restful_api_port": [527, 532, 533, 534], "hostfil": [527, 529, 532, 533, 534], "grpc_api_port": [527, 532, 533, 534], "api_typ": [527, 532, 533, 534], "conda_env": [527, 532, 533, 534], "upload_path": [527, 532, 533, 534], "8000": [527, 532, 533, 534], "monitor": [527, 532, 533, 534], "3333": [527, 532, 533, 534], "2222": [527, 532, 533, 534], "ns_workspac": [527, 532, 533, 534], "hf_model": [527, 531, 533], "curl": [527, 528, 532, 533], "task_id": [527, 532, 533, 534], "usernam": 527, "db": [527, 529], "serve_log": [527, 532, 533, 534], "frontend_grpc": 527, "task_log": 527, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 527, "task_workspac": 527, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 527, "aliv": 527, "properli": 527, "commonli": [527, 538], "hostnam": 527, "breakdown": 527, "ip": 527, "hous": 527, "host1": [527, 532, 533], "host2": [527, 532, 533], "query_id": 527, "oaa": 528, "host_ip": 528, "task_request": [528, 532, 533, 534], "tuning_info": [528, 532], "optimization_result": [528, 532], "result_path": [528, 532, 533], "closur": 528, "404": [528, 538, 553], "health": 528, "healthi": 528, "quantized_model": [528, 532, 533], "400": [528, 553], "alloc": 529, "incom": 529, "taskmonitor": 529, "cluster": [529, 532, 533, 550], "tasklaunch": 529, "resultmonitor": 529, "receiv": [529, 546], "p1": 529, "notif": 529, "p2": 529, "p3": 529, "mpirun": [529, 550], "perf": 529, "p4": 529, "four": [529, 548, 553], "classdiagram": 529, "taskdb": 529, "get_statu": 529, "update_statu": 529, "task_collect": 529, "append_task": 529, "get_all_pending_task": 529, "update_task_statu": 529, "task_db": 529, "wait_new_task": 529, "schedule_task": 529, "dispatch_task": 529, "launch_task": 529, "query_task_statu": 529, "node_list": 529, "reserve_resourc": 529, "get_node_statu": 529, "gcp": [529, 539], "script_url": [530, 532, 533, 534], "archiv": 530, "prioriti": 530, "tf_example1": [531, 532, 533], "hf_models_grpc": [531, 534], "00173": 532, "01024": 532, "task_request_distribut": 532, "custom_models_optim": 532, "7602cd63d4c849e7a686a8165a77f69d": [532, 533], "151": [532, 553], "8617": 532, "17": [532, 553], "8213": [532, 553], "number_of_socket": [532, 533], "number_of_thread": [532, 533], "cdf419910f9b4d2a8320d0e420ac1d0a": 533, "optimized_result": 533, "58": [533, 553], "3162": 533, "6488": [533, 553], "test_task_request": 534, "06": [534, 552, 553], "34": [534, 553], "55": [534, 553], "d3e10a49326449fb9d0d62f2bfc1cb43": 534, "fastapi": 535, "multi_object": 536, "benefit": 537, "instanti": 537, "neuron": 538, "art": 538, "grown": 538, "unpreced": 538, "increasingli": 538, "crucial": 538, "stand": [538, 550], "shrink": 538, "contextu": 538, "scene": 538, "haven": 538, "color": [538, 542], "lowest": [538, 550], "emsp": 538, "downstream": 538, "prone": 538, "co": 538, "discourag": 538, "penal": 538, "parameter": 538, "lightweight": 538, "perceptron": 538, "mlp": 538, "llama": [538, 539, 542, 544, 547, 553], "valuabl": [538, 548], "basi": 538, "billion": 538, "dolli": [538, 547, 553], "mpt": [538, 547, 553], "lm": [538, 553], "lamini": [538, 547], "worth": 538, "mention": [538, 544], "tend": 538, "exemplifi": 538, "complement": 538, "fortieth": 538, "miss": [538, 541], "pruner2": 538, "few": [538, 539, 550], "lm_head": 538, "yourself": 538, "uncertain": 538, "auto_config": 538, "quit": 538, "straightforward": [538, 544, 547], "carri": 538, "pruning_pattern": 538, "pruning_start": 538, "pruning_end": 538, "sparse_gpt": 538, "embed_out": 538, "card": 538, "hesit": 538, "causal": 538, "clm": 538, "sst": [538, 553], "25": [538, 553], "63": [538, 553], "24": [538, 550, 553], "35": [538, 553], "flan": 538, "t5": [538, 553], "english": 538, "romanian": 538, "381": 538, "yolov5": 538, "75": [538, 553], "2x1": [538, 553], "801": 538, "7895": 538, "signific": [538, 539, 542, 547], "reduct": [538, 542, 552], "namhoon": 538, "lee": 538, "thalaiyasingam": 538, "ajanthan": 538, "philip": 538, "torr": 538, "2019": 538, "zafrir": 538, "ofir": 538, "ariel": 538, "larei": 538, "boudoukh": 538, "mosh": 538, "wasserblat": 538, "2111": 538, "05754": 538, "2021": 538, "kwon": 538, "kim": 538, "mahonei": 538, "hassoun": 538, "keutzer": 538, "gholami": 538, "pp": 538, "24101": 538, "24116": 538, "frantar": [538, 544], "alistarh": 538, "medium": 539, "aug": 539, "juli": 539, "onnxcommunitymeetup2023": 539, "chatbot": 539, "june": 539, "msft": 539, "netflix": 539, "apr": 539, "mlperf": [539, 553], "5x": 539, "heterogen": 539, "mar": 539, "jan": 539, "busi": 539, "amx": 539, "4th": [539, 541], "journei": 539, "dec": 539, "mleffici": 539, "deepen": 539, "foundat": 539, "intellig": 539, "vmware": 539, "applianc": 539, "bitnami": 539, "nov": 539, "sota": 539, "plug": 539, "twitter": 539, "linkedin": 539, "zone": 539, "land": 539, "pat": 539, "keynot": 539, "intelon": 539, "chines": 539, "purif": 539, "sacrif": 539, "jun": 539, "partner": 539, "feb": 539, "joint": 539, "bilibili": 539, "gestalt": 539, "ml": 539, "doubl": 539, "abound": 539, "lpot": [539, 545], "nextplatform": 539, "cern": 539, "gan": 539, "3dgan": 539, "iml": 539, "workshop": 539, "asplo": 539, "18": [539, 553], "highli": [539, 544], "intelcaff": 539, "aris": 540, "henc": 540, "onnxrt_qoper": 540, "quant_aware_train": 540, "weight_compress": [540, 552], "initial_spars": [540, 552], "prune_typ": [540, 552], "basic_magnitud": [540, 552], "update_frequ": 540, "prune_domain": 540, "tile_pattern_1x1": 540, "invent": 541, "cost": [541, 544], "theoret": [541, 544], "zeropoint": 541, "255": [541, 547], "overflow": 541, "unseen": 541, "enough": 541, "peopl": 541, "mimic": 541, "fact": 541, "ultim": 541, "pain": 541, "lossi": 541, "philosophi": 541, "neither": 541, "nor": 541, "val_load": 541, "avg": 541, "themselv": 541, "dmlexecutionprovid": 541, "meanwhil": 542, "substanti": 542, "pose": 542, "challeng": 542, "greatli": [542, 544], "even": [542, 544, 547], "constrain": 542, "grei": 542, "blue": 542, "rectangl": 542, "w8a8": [542, 544], "10005": 542, "rtn_arg": [542, 544], "ouput_dir": 542, "fp32_model_path": 542, "int8_model_path": 542, "ON": 543, "forc": 543, "postposttrainingquantconfig": 543, "bf16wrapper": 543, "retrac": 543, "preval": 544, "grow": 544, "demand": 544, "trade": 544, "bottleneck": 544, "roughli": 544, "speak": 544, "capac": [544, 546], "flop": 544, "famou": 544, "approx": 544, "bmm": 544, "100x": 544, "excel": 544, "stai": [544, 547], "quantif": [544, 547], "think": 544, "intuit": [544, 547], "uniformli": 544, "qlora": 544, "invers": 544, "restor": 544, "protect": 544, "inspir": 544, "normalfloat": 544, "e2m1": 544, "bnb": 544, "805": 544, "91": [544, 547, 553], "stabil": 544, "weightonlylinear": 544, "date": 544, "qweight": 544, "gptq_arg": 544, "use_full_length": 544, "awq_arg": 544, "compressed_model": 544, "omit": 544, "rtn_g32asym": 544, "gptq_g32asym": 544, "gptq_g32asym_disable_last_matmul": 544, "gptq_g128asym": 544, "awq_g32asym": 544, "xiao": [544, 547], "guangxuan": [544, 547], "2211": [544, 547], "10438": [544, 547], "wei": [544, 547], "xiui": [544, 547], "suppress": [544, 547], "2209": [544, 547], "13325": [544, 547], "lin": 544, "ji": 544, "2306": 544, "00978": 544, "elia": 544, "dettmer": 544, "tim": 544, "2305": 544, "14314": 544, "site": 545, "assist": 545, "experienc": 545, "18284": 545, "absenc": 545, "safe_mod": 545, "model_from_json": 545, "defici": 545, "hinder": 545, "sed": 545, "your_script": 545, "backbon": 546, "sigopt_experiment_id": 546, "nc": [546, 550], "suffici": 546, "ordinari": 546, "latenc": [546, 550], "8266": 546, "8372": 546, "2132": 546, "83": [546, 547, 553], "7495": 546, "8299": 546, "8294": 546, "85": [546, 547, 553], "0837": 546, "8291": 546, "4469": 546, "gigant": 547, "systemat": 547, "migrat": [547, 551], "difficulti": 547, "mathemat": 547, "allevi": 547, "coarsest": 547, "finer": [547, 550], "matric": 547, "similarli": 547, "finest": 547, "consumpt": 547, "why": [547, 548], "suppos": 547, "6839": 547, "4741": 547, "7451": 547, "9301": 547, "1742": 547, "6835": 547, "q_min": 547, "q_max": 547, "q_x": 547, "clamp_": 547, "round_": 547, "w_q": 547, "00296431384049356": 547, "59": [547, 553], "172": [547, 553], "192": 547, "w_dq": 547, "2220": 547, "1510": 547, "2420": 547, "2570": 547, "0500": 547, "1890": 547, "mseloss": 547, "1983354538679123": 547, "6848": 547, "4743": 547, "7440": 547, "9308": 547, "1749": 547, "385297635664756e": 547, "07": [547, 552, 553], "affect": 547, "quantize_per_channel": 547, "x_tmp": 547, "detach": 547, "keepdim": 547, "dequantize_per_channel": 547, "0029": [547, 553], "0036": 547, "162": [547, 553], "48": [547, 553], "72": [547, 553], "93": [547, 553], "207": 547, "139": [547, 553], "6837": 547, "4734": 547, "1751": 547, "6821": 547, "637690492221736e": 547, "6376e": 547, "3852e": 547, "cdot": 547, "quantize_per_tensor_absmax": 547, "n_bit": 547, "div_": 547, "0806": 547, "7589": 547, "6038": 547, "3815": 547, "5040": 547, "7174": 547, "5444": 547, "5826": 547, "7772": 547, "5555": 547, "3740": 547, "3253": 547, "0698": 547, "1381": 547, "5972": [547, 553], "0086": 547, "0737": 547, "8298": 547, "6883": 547, "2991": 547, "1601": 547, "6506": 547, "8246": 547, "3924": 547, "3845": 547, "8768": 547, "w_scale": 547, "x_q": 547, "x_scale": 547, "84": [547, 553], "120": 547, "0059755356051027775": 547, "89": [547, 553], "119": 547, "57": [547, 553], "006533813662827015": 547, "y_q": 547, "17509": 547, "7608": 547, "4055": 547, "16599": 547, "21020": 547, "10016": 547, "9860": 547, "22444": 547, "y_dq": 547, "6836": 547, "2970": 547, "1583": 547, "6481": 547, "8207": 547, "3911": 547, "3850": 547, "8763": 547, "though": 547, "simplic": 547, "fp1": 547, "fp2": 547, "subsect": [547, 552], "x1": [547, 550], "x2": [547, 550], "herebi": 547, "sq": 547, "overhead": 547, "hardtanh": 547, "t5norm": 547, "llamanorm": 547, "groupnorm": 547, "lambada": 547, "openai": [547, 553], "sweet": 547, "spot": 547, "region": 547, "bigscienc": [547, 553], "560m": 547, "354": 547, "3542": 547, "1b7": 547, "4634": 547, "4936": 547, "3b": 547, "518": 547, "5185": 547, "7b1": [547, 553], "5764": [547, 553], "5977": 547, "bloomz": [547, 553], "3947": 547, "3930": 547, "4828": 547, "4906": 547, "5018": 547, "4980": 547, "5593": [547, 553], "5552": 547, "125m": 547, "379": 547, "3757": 547, "350m": 547, "4516": 547, "4533": 547, "5789": 547, "5742": 547, "7b": [547, 553], "6365": 547, "6404": 547, "6769": [547, 553], "6804": [547, 553], "13b": [547, 553], "6872": 547, "6814": 547, "30b": [547, 553], "7149": 547, "7128": 547, "66b": 547, "7398": 547, "7326": 547, "7361": [547, 553], "7357": 547, "7627": [547, 553], "7590": 547, "7759": [547, 553], "7840": 547, "65b": 547, "7908": 547, "7957": 547, "7392": [547, 553], "7335": [547, 553], "chat": [547, 553], "7058": [547, 553], "6994": 547, "7677": [547, 553], "7615": [547, 553], "6831": [547, 553], "mbzuai": 547, "124m": 547, "3804": 547, "3887": 547, "774m": 547, "5048": 547, "5057": 547, "5b": 547, "5443": [547, 553], "5436": 547, "mosaicml": [547, 553], "655": [547, 553], "6499": 547, "stabilityai": 547, "stablelm": 547, "4172": 547, "4149": 547, "togethercomput": 547, "redpajama": 547, "incit": 547, "6542": 547, "6735": 547, "6718": 547, "6740": [547, 553], "6569": 547, "6621": 547, "7143": 547, "7221": 547, "6895": 547, "6953": [547, 553], "databrick": [547, 553], "6866": [547, 553], "6297": 547, "6247": 547, "tiiuae": [547, 553], "6437": [547, 553], "6392": 547, "7332": 547, "7632": 547, "asterisk": 547, "arang": 547, "tolist": 547, "jason": 547, "emerg": 547, "transact": 547, "yvinec": 547, "edouard": 547, "proceed": 547, "cvf": 547, "winter": 547, "instrument": 548, "writer": 548, "_pre_eval_hook": 548, "_post_eval_hook": 548, "submodul": 548, "whitelist": 548, "_recordingobserv": 548, "output_tensors_dict": 548, "current_it": 548, "get_tensor_valu": 548, "_observer_forward_hook": 548, "activation_post_process": 548, "_add_observer_": 548, "named_children": 548, "leaf": 548, "add_modul": 548, "register_forward_hook": 548, "dump_tim": 548, "summarywrit": 548, "_acc": 548, "tune_": 548, "add_graph": 548, "get_observer_dict": 548, "observer_dict": 548, "is_quant": 548, "add_histogram": 548, "shell": 548, "bind_al": 548, "logdir_spec": 548, "tune_0_acc0": 548, "tune_1": 548, "tune_1_acc0": 548, "79": [548, 553], "baseline_acc_0": 548, "776": 548, "tune_1_acc_0": 548, "095": 548, "runs_v3": 548, "run_tuning_dump_tensor": 548, "inceptionv3": 548, "run_quant": 548, "topologi": 548, "nc_inceptionv3": 548, "inceptionv3_dump_tensor": 548, "eightbit": 548, "disappear": 548, "centercrop": 549, "randomcrop": 549, "cropres": 549, "decodeimag": 549, "jpeg": 549, "encodejp": 549, "alignimagechannel": 549, "68": [549, 553], "116": 549, "78": [549, 553], "103": 549, "94": [549, 553], "017": 549, "bilinearimagenet": [549, 552], "topilimag": 549, "padding_mod": 549, "border": 549, "pixel": 549, "edg": 549, "colorjitt": 549, "bright": 549, "satur": 549, "hue": 549, "jitter": 549, "tondarrai": 549, "quickli": [550, 551], "o1": 550, "human": 550, "aggress": 550, "classic": 550, "flowchart": 550, "htmllabel": 550, "td": 550, "classdef": 550, "itemstyl": 550, "cce5ff": 550, "stroke": 550, "99ccff": 550, "s1": 550, "s2": 550, "s3": 550, "s4": 550, "s5": 550, "s6": 550, "s7": 550, "nbsp": 550, "subgraphstyl": 550, "ffffff": 550, "attempt": 550, "post_training_auto_qu": 550, "trial": 550, "increment": 550, "ii": 550, "spent": 550, "hawq_v2_loss": 550, "model_loss": 550, "black": 550, "compli": 550, "posterior": 550, "short": 550, "loglevel": 550, "endlessli": 550, "perspect": 550, "smbo": 550, "appl": 550, "surrog": 550, "densiti": 550, "parzen": 550, "greatest": 550, "hour": 550, "dai": 550, "next_tune_cfg": 550, "overridden": 550, "replic": 550, "replica": 550, "fed": 550, "synchron": 550, "number_of_process": 550, "run_cmd": 550, "abctunestrategi": 550, "familiar": 551, "notebook": 551, "introduct": 551, "organ": 552, "logic": 552, "mobilenet_v1": 552, "40": [552, 553], "beta_1": 552, "beta_2": 552, "epsilon": 552, "sparsecategoricalcrossentropi": 552, "sum_over_batch_s": 552, "from_logit": 552, "54": [552, 553], "19": [552, 553], "09": 553, "1x": 553, "platinum": 553, "8480": 553, "8ghz": 553, "56": 553, "ht": 553, "turbo": 553, "256gb": 553, "16x16gb": 553, "ddr5": 553, "4800": 553, "mt": 553, "bio": 553, "3a14": 553, "tel2p1": 553, "microcod": 553, "0x2b0001b0": 553, "gcc": 553, "20210514": 553, "red": 553, "hat": 553, "visit": 553, "1s4c14ins1bsthroughput": 553, "sec": 553, "74": 553, "2914": 553, "621": 553, "69x": 553, "76": 553, "23": 553, "46": 553, "2160": 553, "545": 553, "47": 553, "96x": 553, "resnet101": 553, "77": 553, "37": 553, "1508": 553, "428": 553, "53x": 553, "70": 553, "44": 553, "69": 553, "3290": 553, "1229": 553, "68x": 553, "38": 553, "73": 553, "2404": 553, "1048": 553, "49": 553, "29x": 553, "71": 553, "1669": 553, "33x": 553, "1073": 553, "245": 553, "38x": 553, "374": 553, "52": 553, "18x": 553, "96": 553, "5478": 553, "1756": 553, "12x": 553, "4133": 553, "1748": 553, "36x": 553, "1534": 553, "236": 553, "62": 553, "49x": 553, "vgg19": 553, "1377": 553, "197": 553, "resnetv2": 553, "39": 553, "1125": 553, "656": 553, "71x": 553, "709": 553, "367": 553, "00": 553, "93x": 553, "152": 553, "03": 553, "497": 553, "265": 553, "87x": 553, "densenet": 553, "121": 553, "557": 553, "67": 553, "61": 553, "22x": 553, "161": 553, "29": 553, "353": 553, "235": 553, "50x": 553, "169": 553, "65": 553, "41": 553, "435": 553, "385": 553, "13x": 553, "efficientnet": 553, "b0": 553, "786": 553, "723": 553, "09x": 553, "130": 553, "23x": 553, "1291": 553, "683": 553, "89x": 553, "61x": 553, "1295": 553, "453": 553, "85x": 553, "242": 553, "31x": 553, "cnn": 553, "80x": 553, "43": 553, "81x": 553, "166": 553, "07x": 553, "16x": 553, "26": 553, "173": 553, "yolov3": 553, "82": 553, "230": 553, "92": 553, "36": 553, "37x": 553, "58x": 553, "86": 553, "416": 553, "35x": 553, "88x": 553, "51": 553, "17x": 553, "75552": 553, "50803": 553, "1s56c1ins1bsthroughput": 553, "60": 553, "64x": 553, "1673": 553, "653": 553, "56x": 553, "1170": 553, "329": 553, "55x": 553, "977": 553, "335": 553, "91x": 553, "resnest50": 553, "81": 553, "10x": 553, "resnext101_32x8d": 553, "562": 553, "109": 553, "efficientnet_b0": 553, "696": 553, "667": 553, "04x": 553, "efficientnet_b3": 553, "508": 553, "397": 553, "28x": 553, "efficientnet_b7": 553, "234": 553, "149": 553, "57x": 553, "peleenet": 553, "858": 553, "588": 553, "46x": 553, "se_resnext50_32x4d": 553, "739": 553, "283": 553, "yolo": 553, "141": 553, "99x": 553, "174": 553, "camembert": 553, "395": 553, "171": 553, "30x": 553, "53": 553, "795": 553, "341": 553, "744": 553, "343": 553, "163": 553, "funnel": 553, "182": 553, "65x": 553, "399": 553, "21x": 553, "407": 553, "412": 553, "stsb": 553, "413": 553, "39x": 553, "409": 553, "75x": 553, "401": 553, "70x": 553, "76x": 553, "reform": 553, "crime": 553, "punish": 553, "446": 553, "398": 553, "lvwerra": 553, "pegasu": 553, "samsum": 553, "102": 553, "770": 553, "450": 553, "14x": 553, "whisper": 553, "25x": 553, "abeja": 553, "neox": 553, "japanes": 553, "90x": 553, "1646": 553, "657": 553, "1098": 553, "322": 553, "41x": 553, "568": 553, "19x": 553, "1383": 553, "761": 553, "82x": 553, "32x": 553, "5701": 553, "1593": 553, "2090": 553, "685": 553, "05x": 553, "resnext101_32x16d_wsl": 553, "556": 553, "01x": 553, "86x": 553, "558": 553, "11x": 553, "lambada_openai": 553, "hellaswag": 553, "winogrand": 553, "piqa": 553, "word_perplex": 553, "4954": 553, "6409": 553, "7541": 553, "6434": 553, "8816": 553, "gptqw4g128asym": 553, "679": 553, "4895": 553, "6433": 553, "7476": 553, "6399": 553, "9945": 553, "0999": 553, "gptqw4g32asym": 553, "6829": 553, "4923": 553, "6401": 553, "7486": 553, "6410": 553, "9963": 553, "0141": 553, "gptqw4g128sym": 553, "4907": 553, "6361": 553, "7443": 553, "6390": 553, "9932": 553, "1498": 553, "gptqw4g32sym": 553, "6911": 553, "4899": 553, "6448": 553, "7497": 553, "6439": 553, "0008": 553, "0927": 553, "5049": 553, "6543": 553, "7628": 553, "6497": 553, "2862": 553, "4984": 553, "6535": 553, "7568": 553, "6473": 553, "9962": 553, "4193": 553, "6885": 553, "4973": 553, "753": 553, "6455": 553, "9935": 553, "4607": 553, "decapoda": 553, "5642": 553, "6709": 553, "7835": 553, "6887": 553, "4202": 553, "7244": 553, "5603": 553, "6614": 553, "6824": 553, "9909": 553, "5881": 553, "5911": 553, "7009": 553, "7878": 553, "7106": 553, "212": 553, "7518": 553, "5843": 553, "6961": 553, "7911": 553, "4319": 553, "7572": 553, "5898": 553, "7056": 553, "7894": 553, "7105": 553, "9998": 553, "3429": 553, "7596": 553, "5841": 553, "6977": 553, "7905": 553, "7080": 553, "4916": 553, "6266": 553, "7277": 553, "8096": 553, "7350": 553, "2384": 553, "778": 553, "624": 553, "7269": 553, "8047": 553, "7334": 553, "9979": 553, "4237": 553, "7706": 553, "6239": 553, "7285": 553, "8058": 553, "7322": 553, "4697": 553, "7836": 553, "6195": 553, "7337": 553, "9983": 553, "5604": 553, "5732": 553, "648": 553, "7715": 553, "6746": 553, "7107": 553, "6982": 553, "5637": 553, "6527": 553, "7704": 553, "6713": 553, "9950": 553, "9702": 553, "5682": 553, "6575": 553, "7758": 553, "6742": 553, "9994": 553, "9317": 553, "567": 553, "6902": 553, "7353": 553, "6622": 553, "7829": 553, "6862": 553, "9942": 553, "9635": 553, "7246": 553, "5617": 553, "6756": 553, "7797": 553, "6854": 553, "9931": 553, "2799": 553, "7312": 553, "6059": 553, "7103": 553, "7077": 553, "2213": 553, "7273": 553, "6018": 553, "7088": 553, "7742": 553, "7030": 553, "9934": 553, "2538": 553, "083": 553, "7283": 553, "6053": 553, "7024": 553, "7764": 553, "7031": 553, "1889": 553, "727": 553, "5997": 553, "7018": 553, "9916": 553, "2504": 553, "7122": 553, "8984": 553, "5933": 553, "689": 553, "7851": 553, "7075": 553, "1556": 553, "448": 553, "7675": 553, "5934": 553, "7856": 553, "7111": 553, "9984": 553, "1514": 553, "927": 553, "7566": 553, "5899": 553, "7032": 553, "9953": 553, "1374": 553, "728": 553, "4628": 553, "6456": 553, "6029": 553, "6438": 553, "5799": 553, "4542": 553, "6004": 553, "9957": 553, "0626": 553, "4789": 553, "6134": 553, "7432": 553, "5525": 553, "4731": 553, "6504": 553, "7617": 553, "6094": 553, "7828": 553, "5098": 553, "7622": 553, "6505": 553, "3242": 553, "6878": 553, "5058": 553, "6393": 553, "7633": 553, "6491": 553, "9978": 553, "5514": 553, "6864": 553, "5084": 553, "6519": 553, "6509": 553, "0006": 553, "4728": 553, "6876": 553, "5045": 553, "6474": 553, "9952": 553, "6379": 553, "5282": 553, "614": 553, "7448": 553, "6312": 553, "6377": 553, "5228": 553, "5991": 553, "6261": 553, "9919": 553, "4096": 553, "neo": 553, "6224": 553, "4271": 553, "577": 553, "722": 553, "5871": 553, "9359": 553, "6123": 553, "4227": 553, "5738": 553, "7203": 553, "5823": 553, "9917": 553, "3377": 553, "615": 553, "4259": 553, "5714": 553, "7247": 553, "9951": 553, "2083": 553, "6154": 553, "4208": 553, "5777": 553, "7198": 553, "5834": 553, "9937": 553, "3121": 553, "20b": 553, "7233": 553, "5359": 553, "7753": 553, "195": 553, "7186": 553, "5328": 553, "7699": 553, "6687": 553, "9922": 553, "3463": 553, "7268": 553, "533": 553, "659": 553, "6726": 553, "2897": 553, "5718": 553, "6859": 553, "7927": 553, "6890": 553, "9324": 553, "7006": 553, "5655": 553, "6803": 553, "7965": 553, "6857": 553, "1515": 553, "5752": 553, "6748": 553, "7845": 553, "6724": 553, "5951": 553, "6472": 553, "5716": 553, "6685": 553, "784": 553, "6678": 553, "8539": 553, "6918": 553, "5819": 553, "678": 553, "6861": 553, "8863": 553, "5765": 553, "6827": 553, "7873": 553, "6832": 553, "9958": 553, "1451": 553, "storywrit": 553, "693": 553, "5477": 553, "663": 553, "6719": 553, "9125": 553, "6661": 553, "7813": 553, "6693": 553, "9961": 553, "1137": 553, "rw": 553, "6604": 553, "5419": 553, "6598": 553, "6594": 553, "7616": 553, "6484": 553, "5369": 553, "7807": 553, "6559": 553, "9947": 553, "9411": 553, "6571": 553, "5398": 553, "6582": 553, "6579": 553, "8809": 553, "652": 553, "535": 553, "7682": 553, "6532": 553, "9906": 553, "0048": 553, "5177": 553, "6669": 553, "7824": 553, "5053": 553, "6301": 553, "5142": 553, "6654": 553, "6483": 553, "9933": 553, "8146": 553, "517": 553, "9941": 553, "1566": 553, "724": 553, "1567": 553, "716": 553, "1414": 553, "718": 553, "97x": 553, "1459": 553, "721": 553, "02x": 553, "1582": 553, "752": 553, "7139": 553, "4289": 553, "66x": 553, "4080": 553, "7236": 553, "4299": 553, "6842": 553, "4496": 553, "52x": 553, "591": 553, "178": 553, "183": 553, "590": 553, "179": 553, "42x": 553, "5703": 553, "2578": 553, "5610": 553, "2603": 553, "shufflenet": 553, "6689": 553, "3690": 553, "5692": 553, "3758": 553, "51x": 553, "googlenet": 553, "1792": 553, "1111": 553, "1821": 553, "1104": 553, "squeezenet": 553, "9472": 553, "5582": 553, "9861": 553, "5566": 553, "77x": 553, "caffenet": 553, "3348": 553, "1141": 553, "3509": 553, "1142": 553, "2426": 553, "987": 553, "2208": 553, "1016": 553, "zfnet": 553, "930": 553, "532": 553, "919": 553, "417": 553, "1880": 553, "1159": 553, "62x": 553, "1798": 553, "1151": 553, "2890": 553, "1380": 553, "2548": 553, "1362": 553, "507": 553, "94x": 553, "1286": 553, "904": 553, "1121": 553, "856": 553, "829": 553, "1044": 553, "790": 553, "849": 553, "627": 553, "79x": 553, "yolov4": 553, "duc": 553, "tini": 553, "1119": 553, "ultra": 553, "8537": 553, "1934": 553, "emot": 553, "ferplu": 553, "3568": 553, "arcfac": 553, "494": 553, "244": 553, "226": 553, "392": 553, "223": 553, "integerop": 553, "473": 553, "548": 553, "964": 553, "540": 553, "394": 553, "602": 553, "487": 553, "222": 553, "20x": 553, "189": 553, "146": 553, "125": 553, "bidaf": 553, "2757": 553, "2277": 553, "gpt2": 553, "360": 553, "213": 553, "490": 553, "304": 553, "214": 553, "347": 553, "272": 553, "216": 553, "26x": 553, "489": 553, "27x": 553, "l12": 553, "h384": 553, "1054": 553, "585": 553, "1072": 553, "890": 553, "746": 553, "268": 553, "211": 553, "l6": 553, "1958": 553, "1130": 553, "73x": 553, "electra": 553, "discrimin": 553, "1797": 553, "1077": 553, "67x": 553, "1930": 553, "1139": 553, "mini": 553, "5510": 553, "3334": 553, "5627": 553, "3365": 553, "108": 553, "110": 553, "bart": 553, "15x": 553, "deberta": 553, "168": 553, "145": 553, "spanbert": 553, "63x": 553, "multilingu": 553, "113": 553, "159": 553, "40x": 553, "distilgpt2": 553, "layoutlm": 553, "layoutlmv2": 553, "codebert": 553, "47x": 553, "fcn": 553, "perplex": 553, "2788": 553, "7002": 553, "4124": 553, "9921": 553, "3950": 553, "5711": 553, "9892": 553, "9163": 553, "7240": 553, "9902": 553, "0438": 553, "7634": 553, "1186": 553, "9944": 553, "1276": 553, "70b": 553, "7543": 553, "6181": 553, "rtnw4g32asym": 553, "6496": 553, "9967": 553, "7964": 553, "6612": 553, "rtnw4g32sym": 553, "7941": 553, "7243": 553, "9971": 553, "taskdataset": 553, "accuracyspars": 553, "ratiospars": 553, "commentsbalancedor": 553, "unbalanc": 553, "answeringsquad": 553, "87f1": 553, "momentumunbalanc": 553, "momentumbalanc": 553, "90f1": 553, "59f1": 553, "23f1": 553, "classificationmrpc": 553, "52f1": 553, "26f1": 553, "classificationsst": 553, "61accuraci": 553, "recognitionimagenet": 553, "95top1": 553, "v5s6": 553, "detectioncoco": 553, "ap0": 553, "6ap0": 553, "393": 553, "584": 553, "34f1": 553, "lassounbalanc": 553, "classificationmnli": 553, "mm": 553, "allbalanc": 553, "32accuraci": 553, "sensitivitybalanc": 553, "classificationqqp": 553, "classificationqnli": 553, "54accuraci": 553, "em": 553, "mobilenetv2": 553, "wideresnet40": 553, "9522": 553, "8178": 553, "0213": 553, "8235": 553, "027": 553, "5494": 553, "7153": 553, "5540": 553, "0046": 553, "5523": 553, "vgg": 553, "bn": 553, "7022": 553, "7415": 553, "7025": 553, "0003": 553, "6739": 553, "7399": 553, "6845": 553, "0106": 553, "blendcnn": 553, "7034": 553, "8382": 553, "bilstm": 553, "8314": 553, "9403": 553, "9048": 553, "0734": 553, "7323": 553, "8256": 553, "8084": 553, "8814": 553, "7442": 553, "8371": 553, "0119": 553, "0115": 553, "tinybert": 553, "8018": 553, "8044": 553, "8363": 553, "8411": 553, "8025": 553, "8074": 553, "0007": 553, "0030": 553, "8626": 553, "9091": 553, "8782": 553, "8684": 553, "8259": 553, "0058": 553, "distilroberta": 553, "6057": 553, "6187": 553, "0130": 553, "c6i": 553, "2xlarg": 553, "c6a": 553, "c6g": 553, "a100cuda": 553, "executionprovid": 553}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [352, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [172, 0, 0, "-", "algorithm"], [175, 0, 0, "-", "benchmark"], [177, 0, 0, "-", "common"], [189, 0, 0, "-", "compression"], [217, 0, 0, "-", "conf"], [219, 0, 0, "-", "config"], [220, 0, 0, "-", "contrib"], [245, 0, 0, "-", "data"], [299, 0, 0, "-", "experimental"], [359, 0, 0, "-", "metric"], [361, 0, 0, "-", "mix_precision"], [363, 0, 0, "-", "model"], [371, 0, 0, "-", "objective"], [372, 0, 0, "-", "profiling"], [394, 0, 0, "-", "quantization"], [402, 0, 0, "-", "strategy"], [414, 0, 0, "-", "template"], [426, 0, 0, "-", "tensorflow"], [436, 0, 0, "-", "torch"], [442, 0, 0, "-", "training"], [446, 0, 0, "-", "utils"], [455, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [156, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[150, 0, 0, "-", "autoround"], [152, 0, 0, "-", "awq"], [153, 0, 0, "-", "bf16_convert"], [154, 0, 0, "-", "gptq"], [155, 0, 0, "-", "hawq_metric"], [157, 0, 0, "-", "layer_wise_quant"], [162, 0, 0, "-", "mixed_precision"], [163, 0, 0, "-", "model_wrapper"], [164, 0, 0, "-", "pattern_detector"], [165, 0, 0, "-", "smooth_quant"], [166, 0, 0, "-", "symbolic_trace"], [167, 0, 0, "-", "teq"], [168, 0, 0, "-", "util"], [169, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [151, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[151, 1, 1, "", "SGD"], [151, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[152, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, 1, 1, "", "BF16ModuleWrapper"], [153, 2, 1, "", "Convert"], [153, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[154, 1, 1, "", "GPTQ"], [154, 1, 1, "", "GPTQuantizer"], [154, 2, 1, "", "find_layers"], [154, 2, 1, "", "find_layers_name"], [154, 2, 1, "", "is_leaf"], [154, 2, 1, "", "log_quantizable_layers_per_transformer"], [154, 2, 1, "", "quantize"], [154, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[155, 1, 1, "", "HessianTrace"], [155, 1, 1, "", "Node_collector"], [155, 2, 1, "", "compare_weights"], [155, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[158, 0, 0, "-", "modified_pickle"], [159, 0, 0, "-", "quantize"], [160, 0, 0, "-", "torch_load"], [161, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[158, 3, 1, "", "PickleError"], [158, 3, 1, "", "PicklingError"], [158, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[159, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[160, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[161, 2, 1, "", "dowload_hf_model"], [161, 2, 1, "", "get_children"], [161, 2, 1, "", "get_module"], [161, 2, 1, "", "get_named_children"], [161, 2, 1, "", "get_super_module_by_name"], [161, 2, 1, "", "load_empty_model"], [161, 2, 1, "", "load_layer_wise_quantized_model"], [161, 2, 1, "", "load_tensor"], [161, 2, 1, "", "load_tensor_from_shard"], [161, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[162, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[163, 1, 1, "", "FakeAffineTensorQuantFunction"], [163, 1, 1, "", "MulLinear"], [163, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[164, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[165, 1, 1, "", "TorchSmoothQuant"], [165, 2, 1, "", "get_module"], [165, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[166, 2, 1, "", "symbolic_trace"], [166, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[167, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[168, 2, 1, "", "append_attr"], [168, 2, 1, "", "auto_copy"], [168, 2, 1, "", "calculate_quant_min_max"], [168, 2, 1, "", "calibration"], [168, 2, 1, "", "check_cfg_and_qconfig"], [168, 2, 1, "", "collate_torch_preds"], [168, 2, 1, "", "collect_weight_info"], [168, 2, 1, "", "fetch_module"], [168, 2, 1, "", "forward_wrapper"], [168, 2, 1, "", "generate_activation_observer"], [168, 2, 1, "", "get_absorb_layers"], [168, 2, 1, "", "get_block_prefix"], [168, 2, 1, "", "get_depth"], [168, 2, 1, "", "get_dict_at_depth"], [168, 2, 1, "", "get_element_under_depth"], [168, 2, 1, "", "get_embedding_contiguous"], [168, 2, 1, "", "get_example_input"], [168, 2, 1, "", "get_fallback_order"], [168, 2, 1, "", "get_hidden_states"], [168, 2, 1, "", "get_module_input_output"], [168, 2, 1, "", "get_mse_order_per_fp32"], [168, 2, 1, "", "get_mse_order_per_int8"], [168, 2, 1, "", "get_op_type_by_name"], [168, 2, 1, "", "get_quantizable_ops_from_cfgs"], [168, 2, 1, "", "get_torch_version"], [168, 2, 1, "", "input2tuple"], [168, 2, 1, "", "is_fused_module"], [168, 2, 1, "", "match_datatype_pattern"], [168, 2, 1, "", "move_input_device"], [168, 2, 1, "", "paser_cfgs"], [168, 2, 1, "", "set_module"], [168, 2, 1, "", "simple_inference"], [168, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[169, 2, 1, "", "awq_quantize"], [169, 2, 1, "", "gptq_quantize"], [169, 2, 1, "", "qdq_weight_actor"], [169, 2, 1, "", "qdq_weight_asym"], [169, 2, 1, "", "qdq_weight_sym"], [169, 2, 1, "", "quant_weight"], [169, 2, 1, "", "quant_weight_w_scale"], [169, 2, 1, "", "quantize_4bit"], [169, 2, 1, "", "rtn_quantize"], [169, 2, 1, "", "search_clip"], [169, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[170, 0, 0, "-", "algorithm"], [171, 0, 0, "-", "fast_bias_correction"], [173, 0, 0, "-", "smooth_quant"], [174, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[170, 1, 1, "", "ALGORITHMS"], [170, 1, 1, "", "Algorithm"], [170, 1, 1, "", "AlgorithmScheduler"], [170, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[171, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[173, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[174, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[175, 2, 1, "", "benchmark_with_raw_cmd"], [175, 2, 1, "", "call_one"], [175, 2, 1, "", "config_instance"], [175, 2, 1, "", "fit"], [175, 2, 1, "", "generate_prefix"], [175, 2, 1, "", "get_architecture"], [175, 2, 1, "", "get_bounded_threads"], [175, 2, 1, "", "get_core_ids"], [175, 2, 1, "", "get_physical_ids"], [175, 2, 1, "", "get_threads"], [175, 2, 1, "", "get_threads_per_core"], [175, 2, 1, "", "profile"], [175, 2, 1, "", "run_instance"], [175, 2, 1, "", "set_all_env_var"], [175, 2, 1, "", "set_env_var"], [175, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[176, 0, 0, "-", "base_config"], [178, 0, 0, "-", "logger"], [179, 0, 0, "-", "utility"]], "neural_compressor.common.base_config": [[176, 1, 1, "", "BaseConfig"], [176, 1, 1, "", "ComposableConfig"], [176, 2, 1, "", "register_config"]], "neural_compressor.common.logger": [[178, 1, 1, "", "Logger"], [178, 2, 1, "", "debug"], [178, 2, 1, "", "error"], [178, 2, 1, "", "fatal"], [178, 2, 1, "", "info"], [178, 2, 1, "", "log"], [178, 2, 1, "", "warn"], [178, 2, 1, "", "warning"]], "neural_compressor.compression": [[180, 0, 0, "-", "callbacks"], [182, 0, 0, "-", "distillation"], [185, 0, 0, "-", "hpo"], [191, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[180, 1, 1, "", "BaseCallbacks"], [180, 1, 1, "", "DistillationCallbacks"], [180, 1, 1, "", "PruningCallbacks"], [180, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[180, 4, 1, "", "_epoch_ran"], [180, 4, 1, "", "best_model"], [180, 4, 1, "", "best_score"], [180, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[181, 0, 0, "-", "criterions"], [183, 0, 0, "-", "optimizers"], [184, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[181, 1, 1, "", "Criterions"], [181, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [181, 1, 1, "", "KnowledgeDistillationFramework"], [181, 1, 1, "", "KnowledgeDistillationLoss"], [181, 1, 1, "", "PyTorchCriterions"], [181, 1, 1, "", "PyTorchCrossEntropyLoss"], [181, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [181, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [181, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [181, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [181, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [181, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [181, 1, 1, "", "SelfKnowledgeDistillationLoss"], [181, 1, 1, "", "TensorFlowCrossEntropyLoss"], [181, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [181, 1, 1, "", "TensorflowCriterions"], [181, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [181, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [181, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [181, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[183, 1, 1, "", "Optimizers"], [183, 1, 1, "", "PyTorchOptimizers"], [183, 1, 1, "", "PyTorchSGD"], [183, 1, 1, "", "TensorFlowAdam"], [183, 1, 1, "", "TensorFlowAdamW"], [183, 1, 1, "", "TensorFlowSGD"], [183, 1, 1, "", "TensorflowOptimizers"], [183, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[184, 2, 1, "", "get_activation"], [184, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[186, 0, 0, "-", "sa_optimizer"], [187, 0, 0, "-", "search_algorithms"], [188, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[187, 1, 1, "", "BayesianOptimizationSearcher"], [187, 1, 1, "", "GridSearcher"], [187, 1, 1, "", "RandomSearcher"], [187, 1, 1, "", "Searcher"], [187, 1, 1, "", "XgbSearcher"], [187, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[188, 1, 1, "", "BaseSearchSpace"], [188, 1, 1, "", "ContinuousSearchSpace"], [188, 1, 1, "", "DiscreteSearchSpace"], [188, 1, 1, "", "SearchSpace"], [188, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[190, 0, 0, "-", "criteria"], [193, 0, 0, "-", "model_slim"], [197, 0, 0, "-", "patterns"], [191, 2, 1, "", "prepare_pruning"], [204, 0, 0, "-", "pruners"], [210, 0, 0, "-", "pruning"], [211, 0, 0, "-", "regs"], [191, 2, 1, "", "save"], [212, 0, 0, "-", "schedulers"], [213, 0, 0, "-", "tf_criteria"], [214, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[190, 1, 1, "", "BlockMaskCriterion"], [190, 1, 1, "", "GradientCriterion"], [190, 1, 1, "", "MagnitudeCriterion"], [190, 1, 1, "", "PruningCriterion"], [190, 1, 1, "", "RetrainFreeCriterion"], [190, 1, 1, "", "SnipCriterion"], [190, 1, 1, "", "SnipMomentumCriterion"], [190, 2, 1, "", "get_criterion"], [190, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[190, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[192, 0, 0, "-", "auto_slim"], [194, 0, 0, "-", "pattern_analyzer"], [195, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[192, 2, 1, "", "generate_ffn2_pruning_config"], [192, 2, 1, "", "generate_mha_pruning_config"], [192, 2, 1, "", "model_slim"], [192, 2, 1, "", "model_slim_ffn2"], [192, 2, 1, "", "model_slim_mha"], [192, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[194, 1, 1, "", "ClassifierHeadSearcher"], [194, 1, 1, "", "ClassifierHeadSearcherTF"], [194, 1, 1, "", "JitBasicSearcher"], [194, 1, 1, "", "Linear2LinearSearcher"], [194, 1, 1, "", "RecipeSearcher"], [194, 1, 1, "", "SelfMHASearcher"], [194, 2, 1, "", "get_attributes"], [194, 2, 1, "", "get_common_module"], [194, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[194, 4, 1, "", "device"], [194, 4, 1, "", "flatten_static_graph"], [194, 4, 1, "", "model"], [194, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[194, 4, 1, "", "device"], [194, 4, 1, "", "flatten_static_graph"], [194, 4, 1, "", "model"], [194, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[194, 4, 1, "", "device"], [194, 4, 1, "", "flatten_static_graph"], [194, 4, 1, "", "model"], [194, 4, 1, "", "searching_results"], [194, 4, 1, "", "static_graph"], [194, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[194, 4, 1, "", "current_pattern"], [194, 4, 1, "", "device"], [194, 4, 1, "", "flatten_static_graph"], [194, 4, 1, "", "model"], [194, 4, 1, "", "searching_results"], [194, 4, 1, "", "static_graph"], [194, 4, 1, "", "target_layers"], [194, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[194, 4, 1, "", "model"], [194, 4, 1, "", "recipe"], [194, 4, 1, "", "searching_results"], [194, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[194, 4, 1, "", "device"], [194, 4, 1, "", "flatten_static_graph"], [194, 4, 1, "", "model"], [194, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[195, 1, 1, "", "LinearCompression"], [195, 1, 1, "", "LinearCompressionIterator"], [195, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[195, 4, 1, "", "device"], [195, 4, 1, "", "layer_1"], [195, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[195, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[196, 0, 0, "-", "base"], [197, 2, 1, "", "get_pattern"], [198, 0, 0, "-", "mha"], [199, 0, 0, "-", "ninm"], [200, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[196, 1, 1, "", "BasePattern"], [196, 1, 1, "", "KerasBasePattern"], [196, 1, 1, "", "PytorchBasePattern"], [196, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[196, 4, 1, "", "config"], [196, 4, 1, "", "invalid_layers"], [196, 4, 1, "", "is_global"], [196, 4, 1, "", "keep_mask_layers"], [196, 4, 1, "", "max_sparsity_ratio_per_op"], [196, 4, 1, "", "min_sparsity_ratio_per_op"], [196, 4, 1, "", "modules"], [196, 4, 1, "", "pattern"], [196, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[196, 4, 1, "", "config"], [196, 4, 1, "", "invalid_layers"], [196, 4, 1, "", "is_global"], [196, 4, 1, "", "keep_mask_layers"], [196, 4, 1, "", "max_sparsity_ratio_per_op"], [196, 4, 1, "", "min_sparsity_ratio_per_op"], [196, 4, 1, "", "modules"], [196, 4, 1, "", "pattern"], [196, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[196, 4, 1, "", "config"], [196, 4, 1, "", "invalid_layers"], [196, 4, 1, "", "is_global"], [196, 4, 1, "", "keep_mask_layers"], [196, 4, 1, "", "max_sparsity_ratio_per_op"], [196, 4, 1, "", "min_sparsity_ratio_per_op"], [196, 4, 1, "", "modules"], [196, 4, 1, "", "pattern"], [196, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[198, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[198, 4, 1, "", "M"], [198, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[199, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[199, 4, 1, "", "M"], [199, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[200, 1, 1, "", "KerasPatternNxM"], [200, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[200, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[200, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[201, 0, 0, "-", "base"], [202, 0, 0, "-", "basic"], [203, 0, 0, "-", "block_mask"], [204, 2, 1, "", "get_pruner"], [205, 0, 0, "-", "mha"], [204, 2, 1, "", "parse_valid_pruner_types"], [206, 0, 0, "-", "pattern_lock"], [207, 0, 0, "-", "progressive"], [208, 0, 0, "-", "retrain_free"], [209, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[201, 1, 1, "", "BasePruner"], [201, 1, 1, "", "KerasBasePruner"], [201, 1, 1, "", "PytorchBasePruner"], [201, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[201, 4, 1, "", "config"], [201, 4, 1, "", "current_sparsity_ratio"], [201, 4, 1, "", "end_step"], [201, 4, 1, "", "global_step"], [201, 4, 1, "", "masks"], [201, 4, 1, "", "max_sparsity_ratio_per_op"], [201, 4, 1, "", "modules"], [201, 4, 1, "", "pattern"], [201, 4, 1, "", "pruning_frequency"], [201, 4, 1, "", "scheduler"], [201, 4, 1, "", "scores"], [201, 4, 1, "", "start_step"], [201, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[201, 4, 1, "", "config"], [201, 4, 1, "", "current_sparsity_ratio"], [201, 4, 1, "", "end_step"], [201, 4, 1, "", "global_step"], [201, 4, 1, "", "masks"], [201, 4, 1, "", "max_sparsity_ratio_per_op"], [201, 4, 1, "", "modules"], [201, 4, 1, "", "pattern"], [201, 4, 1, "", "pruning_frequency"], [201, 4, 1, "", "scheduler"], [201, 4, 1, "", "scores"], [201, 4, 1, "", "start_step"], [201, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[201, 4, 1, "", "config"], [201, 4, 1, "", "current_sparsity_ratio"], [201, 4, 1, "", "end_step"], [201, 4, 1, "", "global_step"], [201, 4, 1, "", "masks"], [201, 4, 1, "", "max_sparsity_ratio_per_op"], [201, 4, 1, "", "modules"], [201, 4, 1, "", "pattern"], [201, 4, 1, "", "pruning_frequency"], [201, 4, 1, "", "scheduler"], [201, 4, 1, "", "scores"], [201, 4, 1, "", "start_step"], [201, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[202, 1, 1, "", "KerasBasicPruner"], [202, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[202, 4, 1, "", "criterion"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "reg"], [202, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[202, 4, 1, "", "criterion"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "reg"], [202, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[203, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[203, 4, 1, "", "criterion"], [203, 4, 1, "", "pattern"], [203, 4, 1, "", "reg"], [203, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[205, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[205, 4, 1, "", "head_masks"], [205, 4, 1, "", "linear_layers"], [205, 4, 1, "", "mha_compressions"], [205, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[206, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[207, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[208, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[208, 4, 1, "", "criterion"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "reg"], [208, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[209, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[209, 4, 1, "", "criterion"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "reg"], [209, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[210, 1, 1, "", "BasePruning"], [210, 1, 1, "", "BasicPruning"], [210, 1, 1, "", "RetrainFreePruning"], [210, 1, 1, "", "SparseGPTPruning"], [210, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[210, 4, 1, "", "config_file_path"], [210, 4, 1, "", "model"], [210, 4, 1, "", "pruner_info"], [210, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[210, 4, 1, "", "config_file_path"], [210, 4, 1, "", "model"], [210, 4, 1, "", "pruner_info"], [210, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[210, 4, 1, "", "config_file_path"], [210, 4, 1, "", "model"], [210, 4, 1, "", "pruner_info"], [210, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[211, 1, 1, "", "BaseReg"], [211, 1, 1, "", "GroupLasso"], [211, 2, 1, "", "get_reg"], [211, 2, 1, "", "get_reg_type"], [211, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[211, 4, 1, "", "alpha"], [211, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[212, 1, 1, "", "IterativeScheduler"], [212, 1, 1, "", "OneshotScheduler"], [212, 1, 1, "", "PruningScheduler"], [212, 2, 1, "", "get_scheduler"], [212, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[212, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[213, 1, 1, "", "MagnitudeCriterion"], [213, 1, 1, "", "PruningCriterion"], [213, 2, 1, "", "get_tf_criterion"], [213, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[213, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[213, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[214, 2, 1, "", "check_config"], [214, 2, 1, "", "check_key_validity"], [214, 2, 1, "", "collect_layer_inputs"], [214, 2, 1, "", "generate_pruner_config"], [214, 2, 1, "", "get_layers"], [214, 2, 1, "", "get_sparsity_ratio"], [214, 2, 1, "", "get_sparsity_ratio_tf"], [214, 2, 1, "", "parse_last_linear"], [214, 2, 1, "", "parse_last_linear_tf"], [214, 2, 1, "", "parse_to_prune"], [214, 2, 1, "", "parse_to_prune_tf"], [214, 2, 1, "", "process_and_check_config"], [214, 2, 1, "", "process_config"], [214, 2, 1, "", "process_weight_config"], [214, 2, 1, "", "process_yaml_config"], [214, 2, 1, "", "reset_none_to_default"], [214, 2, 1, "", "update_params"]], "neural_compressor.conf": [[215, 0, 0, "-", "config"], [216, 0, 0, "-", "dotdict"], [218, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[215, 1, 1, "", "Benchmark_Conf"], [215, 1, 1, "", "Conf"], [215, 1, 1, "", "DefaultConf"], [215, 1, 1, "", "Distillation_Conf"], [215, 1, 1, "", "Graph_Optimization_Conf"], [215, 1, 1, "", "MixedPrecision_Conf"], [215, 1, 1, "", "NASConfig"], [215, 1, 1, "", "PrunerV2"], [215, 1, 1, "", "Pruning_Conf"], [215, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[216, 1, 1, "", "DotDict"], [216, 2, 1, "", "deep_get"], [216, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[218, 1, 1, "", "AccuracyCriterion"], [218, 1, 1, "", "BenchmarkConfig"], [218, 1, 1, "", "DistillationConfig"], [218, 1, 1, "", "KnowledgeDistillationLossConfig"], [218, 1, 1, "", "Options"], [218, 1, 1, "", "QuantizationConfig"], [218, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[219, 1, 1, "", "AccuracyCriterion"], [219, 1, 1, "", "BenchmarkConfig"], [219, 1, 1, "", "DistillationConfig"], [219, 1, 1, "", "DotDict"], [219, 1, 1, "", "ExportConfig"], [219, 1, 1, "", "HPOConfig"], [219, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [219, 1, 1, "", "Keras"], [219, 1, 1, "", "KnowledgeDistillationLossConfig"], [219, 1, 1, "", "MXNet"], [219, 1, 1, "", "MixedPrecisionConfig"], [219, 1, 1, "", "NASConfig"], [219, 1, 1, "", "ONNX"], [219, 1, 1, "", "ONNXQlinear2QDQConfig"], [219, 1, 1, "", "Options"], [219, 1, 1, "", "PostTrainingQuantConfig"], [219, 1, 1, "", "PyTorch"], [219, 1, 1, "", "QuantizationAwareTrainingConfig"], [219, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [219, 1, 1, "", "TF2ONNXConfig"], [219, 1, 1, "", "TensorFlow"], [219, 1, 1, "", "Torch2ONNXConfig"], [219, 1, 1, "", "TuningCriterion"], [219, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[221, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[222, 0, 0, "-", "sigopt"], [223, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[222, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[223, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[228, 0, 0, "-", "dataloaders"], [240, 0, 0, "-", "datasets"], [244, 0, 0, "-", "filters"], [248, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[224, 0, 0, "-", "base_dataloader"], [225, 0, 0, "-", "dataloader"], [226, 0, 0, "-", "default_dataloader"], [227, 0, 0, "-", "fetcher"], [229, 0, 0, "-", "mxnet_dataloader"], [230, 0, 0, "-", "onnxrt_dataloader"], [231, 0, 0, "-", "pytorch_dataloader"], [232, 0, 0, "-", "sampler"], [233, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[224, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[225, 1, 1, "", "DataLoader"], [225, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[226, 1, 1, "", "DefaultDataLoader"], [226, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[227, 1, 1, "", "Fetcher"], [227, 1, 1, "", "IndexFetcher"], [227, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[229, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[230, 1, 1, "", "ONNXRTBertDataLoader"], [230, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[231, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[232, 1, 1, "", "BatchSampler"], [232, 1, 1, "", "IterableSampler"], [232, 1, 1, "", "Sampler"], [232, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[233, 1, 1, "", "TFDataDataLoader"], [233, 1, 1, "", "TensorflowBertDataLoader"], [233, 1, 1, "", "TensorflowDataLoader"], [233, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[234, 0, 0, "-", "bert_dataset"], [235, 0, 0, "-", "coco_dataset"], [236, 0, 0, "-", "dataset"], [237, 0, 0, "-", "dummy_dataset"], [238, 0, 0, "-", "dummy_dataset_v2"], [239, 0, 0, "-", "imagenet_dataset"], [241, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[234, 1, 1, "", "InputFeatures"], [234, 1, 1, "", "ONNXRTBertDataset"], [234, 1, 1, "", "ParseDecodeBert"], [234, 1, 1, "", "PytorchBertDataset"], [234, 1, 1, "", "TensorflowBertDataset"], [234, 1, 1, "", "TensorflowModelZooBertDataset"], [234, 2, 1, "", "convert_examples_to_features"], [234, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[235, 1, 1, "", "COCONpy"], [235, 1, 1, "", "COCORaw"], [235, 1, 1, "", "COCORecordDataset"], [235, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[236, 1, 1, "", "CIFAR10"], [236, 1, 1, "", "CIFAR100"], [236, 1, 1, "", "Dataset"], [236, 1, 1, "", "Datasets"], [236, 1, 1, "", "FashionMNIST"], [236, 1, 1, "", "ImageFolder"], [236, 1, 1, "", "IterableDataset"], [236, 1, 1, "", "MNIST"], [236, 1, 1, "", "MXNetCIFAR10"], [236, 1, 1, "", "MXNetCIFAR100"], [236, 1, 1, "", "MXNetDatasets"], [236, 1, 1, "", "MXNetFashionMNIST"], [236, 1, 1, "", "MXNetImageFolder"], [236, 1, 1, "", "MXNetMNIST"], [236, 1, 1, "", "ONNXRTITDatasets"], [236, 1, 1, "", "ONNXRTQLDatasets"], [236, 1, 1, "", "PyTorchDatasets"], [236, 1, 1, "", "PytorchCIFAR10"], [236, 1, 1, "", "PytorchCIFAR100"], [236, 1, 1, "", "PytorchFashionMNIST"], [236, 1, 1, "", "PytorchMNIST"], [236, 1, 1, "", "PytorchMxnetWrapDataset"], [236, 1, 1, "", "PytorchMxnetWrapFunction"], [236, 1, 1, "", "Tensorflow"], [236, 1, 1, "", "TensorflowCIFAR10"], [236, 1, 1, "", "TensorflowCIFAR100"], [236, 1, 1, "", "TensorflowDatasets"], [236, 1, 1, "", "TensorflowFashionMNIST"], [236, 1, 1, "", "TensorflowImageRecord"], [236, 1, 1, "", "TensorflowMNIST"], [236, 1, 1, "", "TensorflowTFRecordDataset"], [236, 1, 1, "", "TensorflowVOCRecord"], [236, 2, 1, "", "calculate_md5"], [236, 2, 1, "", "check_integrity"], [236, 2, 1, "", "dataset_registry"], [236, 2, 1, "", "download_url"], [236, 5, 1, "", "framework_datasets"], [236, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[237, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[238, 1, 1, "", "DummyDataset"], [238, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[239, 1, 1, "", "ImagenetRaw"], [239, 1, 1, "", "MXNetImagenetRaw"], [239, 1, 1, "", "ONNXRTImagenetDataset"], [239, 1, 1, "", "PytorchImagenetRaw"], [239, 1, 1, "", "TensorflowImagenetDataset"], [239, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[241, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[242, 0, 0, "-", "coco_filter"], [243, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[242, 1, 1, "", "LabelBalanceCOCORawFilter"], [242, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[243, 1, 1, "", "FILTERS"], [243, 1, 1, "", "Filter"], [243, 1, 1, "", "MXNetFilters"], [243, 1, 1, "", "ONNXRTITFilters"], [243, 1, 1, "", "ONNXRTQLFilters"], [243, 1, 1, "", "PyTorchFilters"], [243, 1, 1, "", "TensorflowFilters"], [243, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[246, 0, 0, "-", "coco_transform"], [247, 0, 0, "-", "imagenet_transform"], [249, 0, 0, "-", "postprocess"], [250, 0, 0, "-", "tokenization"], [251, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[246, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[247, 1, 1, "", "BilinearImagenetTransform"], [247, 1, 1, "", "LabelShift"], [247, 1, 1, "", "ONNXResizeCropImagenetTransform"], [247, 1, 1, "", "OnnxBilinearImagenetTransform"], [247, 1, 1, "", "ParseDecodeImagenet"], [247, 1, 1, "", "ParseDecodeImagenetTransform"], [247, 1, 1, "", "QuantizedInput"], [247, 1, 1, "", "ResizeWithAspectRatio"], [247, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [247, 1, 1, "", "TensorflowShiftRescale"], [247, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[249, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[250, 1, 1, "", "BasicTokenizer"], [250, 1, 1, "", "FullTokenizer"], [250, 1, 1, "", "WordpieceTokenizer"], [250, 2, 1, "", "convert_by_vocab"], [250, 2, 1, "", "convert_to_unicode"], [250, 2, 1, "", "load_vocab"], [250, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[251, 1, 1, "", "AlignImageChannelTransform"], [251, 1, 1, "", "BaseTransform"], [251, 1, 1, "", "CastONNXTransform"], [251, 1, 1, "", "CastPyTorchTransform"], [251, 1, 1, "", "CastTFTransform"], [251, 1, 1, "", "CenterCropTFTransform"], [251, 1, 1, "", "CenterCropTransform"], [251, 1, 1, "", "CollectTransform"], [251, 1, 1, "", "ComposeTransform"], [251, 1, 1, "", "CropResizeTFTransform"], [251, 1, 1, "", "CropResizeTransform"], [251, 1, 1, "", "CropToBoundingBox"], [251, 1, 1, "", "InputFeatures"], [251, 1, 1, "", "MXNetCropResizeTransform"], [251, 1, 1, "", "MXNetCropToBoundingBox"], [251, 1, 1, "", "MXNetNormalizeTransform"], [251, 1, 1, "", "MXNetTransforms"], [251, 1, 1, "", "MXNetTranspose"], [251, 1, 1, "", "NormalizeTFTransform"], [251, 1, 1, "", "NormalizeTransform"], [251, 1, 1, "", "ONNXRTCropToBoundingBox"], [251, 1, 1, "", "ONNXRTITTransforms"], [251, 1, 1, "", "ONNXRTQLTransforms"], [251, 1, 1, "", "PaddedCenterCropTransform"], [251, 1, 1, "", "ParseDecodeVocTransform"], [251, 1, 1, "", "PyTorchAlignImageChannel"], [251, 1, 1, "", "PyTorchCropResizeTransform"], [251, 1, 1, "", "PyTorchNormalizeTransform"], [251, 1, 1, "", "PyTorchTransforms"], [251, 1, 1, "", "PyTorchTranspose"], [251, 1, 1, "", "PytorchMxnetTransform"], [251, 1, 1, "", "PytorchMxnetWrapFunction"], [251, 1, 1, "", "RandomCropTFTransform"], [251, 1, 1, "", "RandomCropTransform"], [251, 1, 1, "", "RandomHorizontalFlip"], [251, 1, 1, "", "RandomResizedCropMXNetTransform"], [251, 1, 1, "", "RandomResizedCropPytorchTransform"], [251, 1, 1, "", "RandomResizedCropTFTransform"], [251, 1, 1, "", "RandomResizedCropTransform"], [251, 1, 1, "", "RandomVerticalFlip"], [251, 1, 1, "", "RescaleKerasPretrainTransform"], [251, 1, 1, "", "RescaleTFTransform"], [251, 1, 1, "", "RescaleTransform"], [251, 1, 1, "", "ResizeMXNetTransform"], [251, 1, 1, "", "ResizePytorchTransform"], [251, 1, 1, "", "ResizeTFTransform"], [251, 1, 1, "", "ResizeTransform"], [251, 1, 1, "", "ResizeWithRatio"], [251, 1, 1, "", "SquadExample"], [251, 1, 1, "", "TFModelZooCollectTransform"], [251, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [251, 1, 1, "", "TFSquadV1PostTransform"], [251, 1, 1, "", "TRANSFORMS"], [251, 1, 1, "", "TensorflowCropToBoundingBox"], [251, 1, 1, "", "TensorflowRandomHorizontalFlip"], [251, 1, 1, "", "TensorflowRandomVerticalFlip"], [251, 1, 1, "", "TensorflowResizeWithRatio"], [251, 1, 1, "", "TensorflowTransform"], [251, 1, 1, "", "TensorflowTransforms"], [251, 1, 1, "", "TensorflowTranspose"], [251, 1, 1, "", "TensorflowWrapFunction"], [251, 1, 1, "", "ToArray"], [251, 1, 1, "", "ToNDArrayTransform"], [251, 1, 1, "", "Transforms"], [251, 1, 1, "", "Transpose"], [251, 2, 1, "", "convert_examples_to_features"], [251, 2, 1, "", "get_final_text"], [251, 2, 1, "", "get_torchvision_map"], [251, 2, 1, "", "read_squad_examples"], [251, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[252, 0, 0, "-", "benchmark"], [255, 0, 0, "-", "common"], [261, 0, 0, "-", "component"], [262, 0, 0, "-", "compression"], [263, 0, 0, "-", "contrib"], [288, 0, 0, "-", "data"], [293, 0, 0, "-", "distillation"], [294, 0, 0, "-", "export"], [298, 0, 0, "-", "graph_optimization"], [306, 0, 0, "-", "metric"], [308, 0, 0, "-", "mixed_precision"], [309, 0, 0, "-", "model_conversion"], [312, 0, 0, "-", "nas"], [318, 0, 0, "-", "pruner_legacy"], [322, 0, 0, "-", "pruning"], [323, 0, 0, "-", "pruning_recipes"], [327, 0, 0, "-", "pruning_v2"], [328, 0, 0, "-", "pytorch_pruner"], [335, 0, 0, "-", "quantization"], [336, 0, 0, "-", "scheduler"], [341, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[252, 1, 1, "", "Benchmark"], [252, 2, 1, "", "get_architecture"], [252, 2, 1, "", "get_bounded_threads"], [252, 2, 1, "", "get_core_ids"], [252, 2, 1, "", "get_physical_ids"], [252, 2, 1, "", "get_threads"], [252, 2, 1, "", "get_threads_per_core"], [252, 2, 1, "", "set_all_env_var"], [252, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[253, 0, 0, "-", "criterion"], [254, 0, 0, "-", "dataloader"], [256, 0, 0, "-", "metric"], [257, 0, 0, "-", "model"], [258, 0, 0, "-", "optimizer"], [259, 0, 0, "-", "postprocess"], [260, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[253, 1, 1, "", "Criterions"], [253, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [253, 1, 1, "", "KnowledgeDistillationFramework"], [253, 1, 1, "", "KnowledgeDistillationLoss"], [253, 1, 1, "", "PyTorchCriterions"], [253, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [253, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [253, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [253, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [253, 1, 1, "", "SelfKnowledgeDistillationLoss"], [253, 1, 1, "", "TensorflowCriterions"], [253, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [253, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[254, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[256, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[257, 1, 1, "", "Model"], [257, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[258, 1, 1, "", "Optimizers"], [258, 1, 1, "", "PyTorchOptimizers"], [258, 1, 1, "", "PyTorchSGD"], [258, 1, 1, "", "TensorFlowAdamW"], [258, 1, 1, "", "TensorFlowSGD"], [258, 1, 1, "", "TensorflowOptimizers"], [258, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[259, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[260, 2, 1, "", "get_activation"], [260, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[261, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[264, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[265, 0, 0, "-", "sigopt"], [266, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[265, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[266, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[271, 0, 0, "-", "dataloaders"], [283, 0, 0, "-", "datasets"], [287, 0, 0, "-", "filters"], [290, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[267, 0, 0, "-", "base_dataloader"], [268, 0, 0, "-", "dataloader"], [269, 0, 0, "-", "default_dataloader"], [270, 0, 0, "-", "fetcher"], [272, 0, 0, "-", "mxnet_dataloader"], [273, 0, 0, "-", "onnxrt_dataloader"], [274, 0, 0, "-", "pytorch_dataloader"], [275, 0, 0, "-", "sampler"], [276, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[267, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[269, 1, 1, "", "DefaultDataLoader"], [269, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[270, 1, 1, "", "Fetcher"], [270, 1, 1, "", "IndexFetcher"], [270, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[272, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[273, 1, 1, "", "ONNXRTBertDataLoader"], [273, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[274, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[275, 1, 1, "", "BatchSampler"], [275, 1, 1, "", "IterableSampler"], [275, 1, 1, "", "Sampler"], [275, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[276, 1, 1, "", "TFDataDataLoader"], [276, 1, 1, "", "TensorflowBertDataLoader"], [276, 1, 1, "", "TensorflowDataLoader"], [276, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[277, 0, 0, "-", "bert_dataset"], [278, 0, 0, "-", "coco_dataset"], [279, 0, 0, "-", "dataset"], [280, 0, 0, "-", "dummy_dataset"], [281, 0, 0, "-", "dummy_dataset_v2"], [282, 0, 0, "-", "imagenet_dataset"], [284, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[277, 1, 1, "", "InputFeatures"], [277, 1, 1, "", "ONNXRTBertDataset"], [277, 1, 1, "", "ParseDecodeBert"], [277, 1, 1, "", "PytorchBertDataset"], [277, 1, 1, "", "TensorflowBertDataset"], [277, 1, 1, "", "TensorflowModelZooBertDataset"], [277, 2, 1, "", "convert_examples_to_features"], [277, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[278, 1, 1, "", "COCONpy"], [278, 1, 1, "", "COCORaw"], [278, 1, 1, "", "COCORecordDataset"], [278, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[279, 1, 1, "", "CIFAR10"], [279, 1, 1, "", "CIFAR100"], [279, 1, 1, "", "Dataset"], [279, 1, 1, "", "Datasets"], [279, 1, 1, "", "FashionMNIST"], [279, 1, 1, "", "ImageFolder"], [279, 1, 1, "", "IterableDataset"], [279, 1, 1, "", "MNIST"], [279, 1, 1, "", "MXNetCIFAR10"], [279, 1, 1, "", "MXNetCIFAR100"], [279, 1, 1, "", "MXNetDatasets"], [279, 1, 1, "", "MXNetFashionMNIST"], [279, 1, 1, "", "MXNetImageFolder"], [279, 1, 1, "", "MXNetMNIST"], [279, 1, 1, "", "ONNXRTITDatasets"], [279, 1, 1, "", "ONNXRTQLDatasets"], [279, 1, 1, "", "PyTorchDatasets"], [279, 1, 1, "", "PytorchCIFAR10"], [279, 1, 1, "", "PytorchCIFAR100"], [279, 1, 1, "", "PytorchFashionMNIST"], [279, 1, 1, "", "PytorchMNIST"], [279, 1, 1, "", "PytorchMxnetWrapDataset"], [279, 1, 1, "", "PytorchMxnetWrapFunction"], [279, 1, 1, "", "TensorflowCIFAR10"], [279, 1, 1, "", "TensorflowCIFAR100"], [279, 1, 1, "", "TensorflowDatasets"], [279, 1, 1, "", "TensorflowFashionMNIST"], [279, 1, 1, "", "TensorflowImageFolder"], [279, 1, 1, "", "TensorflowImageRecord"], [279, 1, 1, "", "TensorflowMNIST"], [279, 1, 1, "", "TensorflowTFRecordDataset"], [279, 1, 1, "", "TensorflowVOCRecord"], [279, 2, 1, "", "calculate_md5"], [279, 2, 1, "", "check_integrity"], [279, 2, 1, "", "dataset_registry"], [279, 2, 1, "", "download_url"], [279, 5, 1, "", "framework_datasets"], [279, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[280, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[281, 1, 1, "", "DummyDataset"], [281, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[282, 1, 1, "", "ImagenetRaw"], [282, 1, 1, "", "MXNetImagenetRaw"], [282, 1, 1, "", "ONNXRTImagenetDataset"], [282, 1, 1, "", "PytorchImagenetRaw"], [282, 1, 1, "", "TensorflowImagenetDataset"], [282, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[284, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[285, 0, 0, "-", "coco_filter"], [286, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[285, 1, 1, "", "LabelBalanceCOCORawFilter"], [285, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[286, 1, 1, "", "FILTERS"], [286, 1, 1, "", "Filter"], [286, 1, 1, "", "MXNetFilters"], [286, 1, 1, "", "ONNXRTITFilters"], [286, 1, 1, "", "ONNXRTQLFilters"], [286, 1, 1, "", "PyTorchFilters"], [286, 1, 1, "", "TensorflowFilters"], [286, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[289, 0, 0, "-", "imagenet_transform"], [291, 0, 0, "-", "tokenization"], [292, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[289, 1, 1, "", "BilinearImagenetTransform"], [289, 1, 1, "", "LabelShift"], [289, 1, 1, "", "ONNXResizeCropImagenetTransform"], [289, 1, 1, "", "OnnxBilinearImagenetTransform"], [289, 1, 1, "", "ParseDecodeImagenet"], [289, 1, 1, "", "ParseDecodeImagenetTransform"], [289, 1, 1, "", "QuantizedInput"], [289, 1, 1, "", "ResizeWithAspectRatio"], [289, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[291, 1, 1, "", "BasicTokenizer"], [291, 1, 1, "", "FullTokenizer"], [291, 1, 1, "", "WordpieceTokenizer"], [291, 2, 1, "", "convert_by_vocab"], [291, 2, 1, "", "convert_to_unicode"], [291, 2, 1, "", "load_vocab"], [291, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[292, 1, 1, "", "AlignImageChannelTransform"], [292, 1, 1, "", "BaseTransform"], [292, 1, 1, "", "CastONNXTransform"], [292, 1, 1, "", "CastPyTorchTransform"], [292, 1, 1, "", "CastTFTransform"], [292, 1, 1, "", "CenterCropTFTransform"], [292, 1, 1, "", "CenterCropTransform"], [292, 1, 1, "", "CollectTransform"], [292, 1, 1, "", "ComposeTransform"], [292, 1, 1, "", "CropResizeTFTransform"], [292, 1, 1, "", "CropResizeTransform"], [292, 1, 1, "", "CropToBoundingBox"], [292, 1, 1, "", "InputFeatures"], [292, 1, 1, "", "MXNetCropResizeTransform"], [292, 1, 1, "", "MXNetCropToBoundingBox"], [292, 1, 1, "", "MXNetNormalizeTransform"], [292, 1, 1, "", "MXNetTransforms"], [292, 1, 1, "", "MXNetTranspose"], [292, 1, 1, "", "NormalizeTFTransform"], [292, 1, 1, "", "NormalizeTransform"], [292, 1, 1, "", "ONNXRTCropToBoundingBox"], [292, 1, 1, "", "ONNXRTITTransforms"], [292, 1, 1, "", "ONNXRTQLTransforms"], [292, 1, 1, "", "PaddedCenterCropTransform"], [292, 1, 1, "", "ParseDecodeVocTransform"], [292, 1, 1, "", "PyTorchAlignImageChannel"], [292, 1, 1, "", "PyTorchCropResizeTransform"], [292, 1, 1, "", "PyTorchNormalizeTransform"], [292, 1, 1, "", "PyTorchTransforms"], [292, 1, 1, "", "PyTorchTranspose"], [292, 1, 1, "", "PytorchMxnetTransform"], [292, 1, 1, "", "PytorchMxnetWrapFunction"], [292, 1, 1, "", "RandomCropTFTransform"], [292, 1, 1, "", "RandomCropTransform"], [292, 1, 1, "", "RandomHorizontalFlip"], [292, 1, 1, "", "RandomResizedCropMXNetTransform"], [292, 1, 1, "", "RandomResizedCropPytorchTransform"], [292, 1, 1, "", "RandomResizedCropTFTransform"], [292, 1, 1, "", "RandomResizedCropTransform"], [292, 1, 1, "", "RandomVerticalFlip"], [292, 1, 1, "", "RescaleKerasPretrainTransform"], [292, 1, 1, "", "RescaleTFTransform"], [292, 1, 1, "", "RescaleTransform"], [292, 1, 1, "", "ResizeMXNetTransform"], [292, 1, 1, "", "ResizePytorchTransform"], [292, 1, 1, "", "ResizeTFTransform"], [292, 1, 1, "", "ResizeTransform"], [292, 1, 1, "", "ResizeWithRatio"], [292, 1, 1, "", "SquadExample"], [292, 1, 1, "", "TFModelZooCollectTransform"], [292, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [292, 1, 1, "", "TFSquadV1PostTransform"], [292, 1, 1, "", "TRANSFORMS"], [292, 1, 1, "", "TensorflowCropToBoundingBox"], [292, 1, 1, "", "TensorflowRandomHorizontalFlip"], [292, 1, 1, "", "TensorflowRandomVerticalFlip"], [292, 1, 1, "", "TensorflowResizeWithRatio"], [292, 1, 1, "", "TensorflowTransform"], [292, 1, 1, "", "TensorflowTransforms"], [292, 1, 1, "", "TensorflowTranspose"], [292, 1, 1, "", "TensorflowWrapFunction"], [292, 1, 1, "", "ToArray"], [292, 1, 1, "", "ToNDArrayTransform"], [292, 1, 1, "", "Transforms"], [292, 1, 1, "", "Transpose"], [292, 2, 1, "", "convert_examples_to_features"], [292, 2, 1, "", "get_final_text"], [292, 2, 1, "", "get_torchvision_map"], [292, 2, 1, "", "read_squad_examples"], [292, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[293, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[293, 4, 1, "", "_epoch_ran"], [293, 4, 1, "", "best_model"], [293, 4, 1, "", "best_score"], [293, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[295, 0, 0, "-", "qlinear2qdq"], [296, 0, 0, "-", "tf2onnx"], [297, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[295, 2, 1, "", "check_model"], [295, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[296, 2, 1, "", "tf_to_fp32_onnx"], [296, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[297, 2, 1, "", "dynamic_quant_export"], [297, 2, 1, "", "get_node_mapping"], [297, 2, 1, "", "get_quantizable_onnx_ops"], [297, 2, 1, "", "static_quant_export"], [297, 2, 1, "", "torch_to_fp32_onnx"], [297, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[298, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[300, 0, 0, "-", "bleu"], [301, 0, 0, "-", "bleu_util"], [302, 0, 0, "-", "coco_label_map"], [303, 0, 0, "-", "coco_tools"], [304, 0, 0, "-", "evaluate_squad"], [305, 0, 0, "-", "f1"], [307, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[300, 1, 1, "", "BLEU"], [300, 1, 1, "", "UnicodeRegex"], [300, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[300, 4, 1, "", "labels"], [300, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[300, 4, 1, "", "nondigit_punct_re"], [300, 4, 1, "", "punct_nondigit_re"], [300, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[301, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[303, 1, 1, "", "COCOEvalWrapper"], [303, 1, 1, "", "COCOWrapper"], [303, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [303, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [303, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[303, 4, 1, "", "dataset"], [303, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[304, 2, 1, "", "evaluate"], [304, 2, 1, "", "exact_match_score"], [304, 2, 1, "", "f1_score"], [304, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[305, 2, 1, "", "evaluate"], [305, 2, 1, "", "f1_score"], [305, 2, 1, "", "metric_max_over_ground_truths"], [305, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[307, 1, 1, "", "Accuracy"], [307, 1, 1, "", "BaseMetric"], [307, 1, 1, "", "COCOmAPv2"], [307, 1, 1, "", "F1"], [307, 1, 1, "", "GeneralTopK"], [307, 1, 1, "", "Loss"], [307, 1, 1, "", "MAE"], [307, 1, 1, "", "METRICS"], [307, 1, 1, "", "MSE"], [307, 1, 1, "", "MXNetMetrics"], [307, 1, 1, "", "ONNXRTGLUE"], [307, 1, 1, "", "ONNXRTITMetrics"], [307, 1, 1, "", "ONNXRTQLMetrics"], [307, 1, 1, "", "PyTorchLoss"], [307, 1, 1, "", "PyTorchMetrics"], [307, 1, 1, "", "RMSE"], [307, 1, 1, "", "ROC"], [307, 1, 1, "", "SquadF1"], [307, 1, 1, "", "TensorflowCOCOMAP"], [307, 1, 1, "", "TensorflowMAP"], [307, 1, 1, "", "TensorflowMetrics"], [307, 1, 1, "", "TensorflowTopK"], [307, 1, 1, "", "TensorflowVOCMAP"], [307, 1, 1, "", "WrapMXNetMetric"], [307, 1, 1, "", "WrapONNXRTMetric"], [307, 1, 1, "", "WrapPyTorchMetric"], [307, 1, 1, "", "mIOU"], [307, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[307, 4, 1, "", "label_list"], [307, 4, 1, "", "pred_list"], [307, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[307, 4, 1, "", "k"], [307, 4, 1, "", "num_correct"], [307, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[307, 4, 1, "", "sample"], [307, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[307, 4, 1, "", "compare_label"], [307, 4, 1, "", "label_list"], [307, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[307, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[307, 4, 1, "", "compare_label"], [307, 4, 1, "", "label_list"], [307, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[307, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[307, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[307, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[307, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[307, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[307, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[307, 4, 1, "", "k"], [307, 4, 1, "", "num_correct"], [307, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[308, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[309, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[310, 0, 0, "-", "basic_nas"], [311, 0, 0, "-", "dynas"], [313, 0, 0, "-", "nas"], [314, 0, 0, "-", "nas_utils"], [315, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[310, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[311, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[313, 1, 1, "", "NAS"], [313, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[314, 2, 1, "", "create_search_space_pool"], [314, 2, 1, "", "find_pareto_front"], [314, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[315, 1, 1, "", "BayesianOptimizationSearcher"], [315, 1, 1, "", "GridSearcher"], [315, 1, 1, "", "RandomSearcher"], [315, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[316, 0, 0, "-", "gradient_sensitivity"], [317, 0, 0, "-", "group_lasso"], [319, 0, 0, "-", "magnitude"], [320, 0, 0, "-", "pattern_lock"], [321, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[316, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[317, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[319, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[320, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[321, 1, 1, "", "Pruner"], [321, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[322, 1, 1, "", "Pruning"], [322, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[322, 4, 1, "", "conf"], [322, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[324, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[325, 0, 0, "-", "pattern"], [326, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[325, 1, 1, "", "PATTERNS"], [325, 1, 1, "", "PatternBase"], [325, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[325, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[326, 1, 1, "", "TilePatternBase"], [326, 1, 1, "", "TilePattern_1x1"], [326, 1, 1, "", "TilePattern_1x16"], [326, 1, 1, "", "TilePattern_1x2"], [326, 1, 1, "", "TilePattern_2x2"], [326, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[327, 1, 1, "", "Pruning"], [327, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[327, 4, 1, "", "conf"], [327, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[329, 0, 0, "-", "logger"], [330, 0, 0, "-", "patterns"], [331, 0, 0, "-", "prune_utils"], [332, 0, 0, "-", "pruner"], [333, 0, 0, "-", "pruning"], [334, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[330, 1, 1, "", "Pattern"], [330, 1, 1, "", "PatternNInM"], [330, 1, 1, "", "PatternNxM"], [330, 2, 1, "", "get_pattern"], [330, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[330, 4, 1, "", "is_global"], [330, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[330, 4, 1, "", "M"], [330, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[330, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[331, 2, 1, "", "check_config"], [331, 2, 1, "", "parse_not_to_prune"], [331, 2, 1, "", "parse_to_prune"], [331, 2, 1, "", "process_and_check_config"], [331, 2, 1, "", "process_config"], [331, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[332, 1, 1, "", "MagnitudePruner"], [332, 1, 1, "", "PatternLockPruner"], [332, 1, 1, "", "Pruner"], [332, 1, 1, "", "SnipMomentumPruner"], [332, 1, 1, "", "SnipPruner"], [332, 2, 1, "", "get_pruner"], [332, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[332, 4, 1, "", "config"], [332, 4, 1, "", "current_sparsity_ratio"], [332, 4, 1, "", "end_step"], [332, 4, 1, "", "global_step"], [332, 4, 1, "", "masks"], [332, 4, 1, "", "max_sparsity_ratio_per_layer"], [332, 4, 1, "", "modules"], [332, 4, 1, "", "pattern"], [332, 4, 1, "", "scheduler"], [332, 4, 1, "", "scores"], [332, 4, 1, "", "start_step"], [332, 4, 1, "", "target_sparsity_ratio"], [332, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[333, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[333, 4, 1, "", "config_file_path"], [333, 4, 1, "", "model"], [333, 4, 1, "", "pruner_info"], [333, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[334, 1, 1, "", "IterativeScheduler"], [334, 1, 1, "", "OneshotScheduler"], [334, 1, 1, "", "Scheduler"], [334, 2, 1, "", "get_scheduler"], [334, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[334, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[335, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[336, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[337, 0, 0, "-", "auto_mixed_precision"], [338, 0, 0, "-", "basic"], [339, 0, 0, "-", "bayesian"], [340, 0, 0, "-", "exhaustive"], [342, 0, 0, "-", "mse"], [343, 0, 0, "-", "mse_v2"], [344, 0, 0, "-", "random"], [345, 0, 0, "-", "strategy"], [347, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[337, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[338, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[339, 1, 1, "", "BayesianOptimization"], [339, 1, 1, "", "BayesianTuneStrategy"], [339, 1, 1, "", "TargetSpace"], [339, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[340, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[342, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[343, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[344, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[345, 1, 1, "", "TuneStrategy"], [345, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[346, 0, 0, "-", "constant"], [348, 0, 0, "-", "tuning_sampler"], [349, 0, 0, "-", "tuning_space"], [350, 0, 0, "-", "tuning_structs"], [351, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[348, 1, 1, "", "FallbackTuningSampler"], [348, 1, 1, "", "ModelWiseTuningSampler"], [348, 1, 1, "", "OpTypeWiseTuningSampler"], [348, 1, 1, "", "OpWiseTuningSampler"], [348, 1, 1, "", "SmoothQuantSampler"], [348, 1, 1, "", "TuningOrder"], [348, 1, 1, "", "TuningSampler"], [348, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[349, 1, 1, "", "TuningItem"], [349, 1, 1, "", "TuningSpace"], [349, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [349, 2, 1, "", "pattern_to_internal"], [349, 2, 1, "", "pattern_to_path"], [349, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[350, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[351, 1, 1, "", "OrderedDefaultDict"], [351, 2, 1, "", "extract_data_type"], [351, 2, 1, "", "get_adaptor_name"], [351, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[353, 0, 0, "-", "bleu"], [354, 0, 0, "-", "bleu_util"], [355, 0, 0, "-", "coco_label_map"], [356, 0, 0, "-", "coco_tools"], [357, 0, 0, "-", "evaluate_squad"], [358, 0, 0, "-", "f1"], [360, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[353, 1, 1, "", "BLEU"], [353, 1, 1, "", "UnicodeRegex"], [353, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[353, 4, 1, "", "labels"], [353, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[353, 4, 1, "", "nondigit_punct_re"], [353, 4, 1, "", "punct_nondigit_re"], [353, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[354, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[356, 1, 1, "", "COCOEvalWrapper"], [356, 1, 1, "", "COCOWrapper"], [356, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [356, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [356, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[356, 4, 1, "", "dataset"], [356, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[357, 2, 1, "", "evaluate"], [357, 2, 1, "", "exact_match_score"], [357, 2, 1, "", "f1_score"], [357, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[358, 2, 1, "", "evaluate"], [358, 2, 1, "", "f1_score"], [358, 2, 1, "", "metric_max_over_ground_truths"], [358, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[360, 1, 1, "", "Accuracy"], [360, 1, 1, "", "BaseMetric"], [360, 1, 1, "", "COCOmAPv2"], [360, 1, 1, "", "F1"], [360, 1, 1, "", "GeneralTopK"], [360, 1, 1, "", "Loss"], [360, 1, 1, "", "MAE"], [360, 1, 1, "", "METRICS"], [360, 1, 1, "", "MSE"], [360, 1, 1, "", "MXNetMetrics"], [360, 1, 1, "", "Metric"], [360, 1, 1, "", "ONNXRTGLUE"], [360, 1, 1, "", "ONNXRTITMetrics"], [360, 1, 1, "", "ONNXRTQLMetrics"], [360, 1, 1, "", "PyTorchLoss"], [360, 1, 1, "", "PyTorchMetrics"], [360, 1, 1, "", "RMSE"], [360, 1, 1, "", "ROC"], [360, 1, 1, "", "SquadF1"], [360, 1, 1, "", "TensorflowCOCOMAP"], [360, 1, 1, "", "TensorflowMAP"], [360, 1, 1, "", "TensorflowMetrics"], [360, 1, 1, "", "TensorflowTopK"], [360, 1, 1, "", "TensorflowVOCMAP"], [360, 1, 1, "", "WrapMXNetMetric"], [360, 1, 1, "", "WrapONNXRTMetric"], [360, 1, 1, "", "WrapPyTorchMetric"], [360, 1, 1, "", "mIOU"], [360, 2, 1, "", "metric_registry"], [360, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[360, 4, 1, "", "label_list"], [360, 4, 1, "", "pred_list"], [360, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[360, 4, 1, "", "k"], [360, 4, 1, "", "num_correct"], [360, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[360, 4, 1, "", "sample"], [360, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[360, 4, 1, "", "compare_label"], [360, 4, 1, "", "label_list"], [360, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[360, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[360, 4, 1, "", "compare_label"], [360, 4, 1, "", "label_list"], [360, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[360, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[360, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[360, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[360, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[360, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[360, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[360, 4, 1, "", "k"], [360, 4, 1, "", "num_correct"], [360, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[361, 2, 1, "", "fit"]], "neural_compressor.model": [[362, 0, 0, "-", "base_model"], [364, 0, 0, "-", "keras_model"], [365, 0, 0, "-", "model"], [366, 0, 0, "-", "mxnet_model"], [367, 0, 0, "-", "nets_factory"], [368, 0, 0, "-", "onnx_model"], [369, 0, 0, "-", "tensorflow_model"], [370, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[362, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[364, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[365, 1, 1, "", "Model"], [365, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[366, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[367, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[368, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[369, 1, 1, "", "TensorflowBaseModel"], [369, 1, 1, "", "TensorflowCheckpointModel"], [369, 1, 1, "", "TensorflowLLMModel"], [369, 1, 1, "", "TensorflowModel"], [369, 1, 1, "", "TensorflowQATModel"], [369, 1, 1, "", "TensorflowSavedModelModel"], [369, 2, 1, "", "checkpoint_session"], [369, 2, 1, "", "estimator_session"], [369, 2, 1, "", "frozen_pb_session"], [369, 2, 1, "", "get_model_type"], [369, 2, 1, "", "graph_def_session"], [369, 2, 1, "", "graph_session"], [369, 2, 1, "", "keras_session"], [369, 2, 1, "", "load_saved_model"], [369, 2, 1, "", "saved_model_session"], [369, 2, 1, "", "slim_session"], [369, 2, 1, "", "validate_and_inference_input_output"], [369, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[370, 1, 1, "", "IPEXModel"], [370, 1, 1, "", "PyTorchBaseModel"], [370, 1, 1, "", "PyTorchFXModel"], [370, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[371, 1, 1, "", "Accuracy"], [371, 1, 1, "", "Footprint"], [371, 1, 1, "", "ModelSize"], [371, 1, 1, "", "MultiObjective"], [371, 1, 1, "", "Objective"], [371, 1, 1, "", "Performance"], [371, 2, 1, "", "objective_custom_registry"], [371, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[374, 0, 0, "-", "parser"], [384, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[373, 0, 0, "-", "factory"], [376, 0, 0, "-", "onnx_parser"], [378, 0, 0, "-", "parser"], [379, 0, 0, "-", "result"], [381, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[373, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[375, 0, 0, "-", "factory"], [377, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[375, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[377, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[378, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[379, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[380, 0, 0, "-", "factory"], [382, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[380, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[382, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[383, 0, 0, "-", "factory"], [386, 0, 0, "-", "onnxrt_profiler"], [389, 0, 0, "-", "profiler"], [391, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[383, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[385, 0, 0, "-", "factory"], [387, 0, 0, "-", "profiler"], [388, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[385, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[387, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[388, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[389, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[390, 0, 0, "-", "factory"], [392, 0, 0, "-", "profiler"], [393, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[390, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[392, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[393, 2, 1, "", "create_tf_config"], [393, 2, 1, "", "delete_assign"], [393, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[394, 2, 1, "", "fit"]], "neural_compressor.strategy": [[395, 0, 0, "-", "auto"], [396, 0, 0, "-", "auto_mixed_precision"], [397, 0, 0, "-", "basic"], [398, 0, 0, "-", "bayesian"], [399, 0, 0, "-", "conservative"], [400, 0, 0, "-", "exhaustive"], [401, 0, 0, "-", "hawq_v2"], [403, 0, 0, "-", "mse"], [404, 0, 0, "-", "mse_v2"], [405, 0, 0, "-", "random"], [406, 0, 0, "-", "strategy"], [408, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[395, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[396, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[397, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[398, 1, 1, "", "BayesianOptimization"], [398, 1, 1, "", "BayesianTuneStrategy"], [398, 1, 1, "", "TargetSpace"], [398, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[399, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[400, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[401, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[403, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[404, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[405, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[406, 1, 1, "", "TuneStrategy"], [406, 1, 1, "", "TuneStrategyMeta"], [406, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[407, 0, 0, "-", "constant"], [409, 0, 0, "-", "tuning_sampler"], [410, 0, 0, "-", "tuning_space"], [411, 0, 0, "-", "tuning_structs"], [412, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[409, 1, 1, "", "BlockFallbackTuningSampler"], [409, 1, 1, "", "FallbackTuningSampler"], [409, 1, 1, "", "LowerBitsSampler"], [409, 1, 1, "", "ModelWiseTuningSampler"], [409, 1, 1, "", "OpTypeWiseTuningSampler"], [409, 1, 1, "", "OpWiseTuningSampler"], [409, 1, 1, "", "SmoothQuantSampler"], [409, 1, 1, "", "TuningOrder"], [409, 1, 1, "", "TuningSampler"], [409, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[410, 1, 1, "", "TuningItem"], [410, 1, 1, "", "TuningSpace"], [410, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [410, 2, 1, "", "pattern_to_internal"], [410, 2, 1, "", "pattern_to_path"], [410, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[411, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[412, 1, 1, "", "ClassRegister"], [412, 1, 1, "", "OrderedDefaultDict"], [412, 1, 1, "", "QuantOptions"], [412, 1, 1, "", "QuantType"], [412, 2, 1, "", "build_slave_faker_model"], [412, 2, 1, "", "extract_data_type"], [412, 2, 1, "", "get_adaptor_name"], [412, 2, 1, "", "preprocess_user_cfg"], [412, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[413, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[413, 1, 1, "", "ExampleClass"], [413, 4, 1, "", "attribute1"], [413, 2, 1, "", "function1"], [413, 2, 1, "", "function2"], [413, 2, 1, "", "function3"], [413, 2, 1, "", "generator1"], [413, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[413, 4, 1, "", "attr1"], [413, 4, 1, "", "attr2"], [413, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[415, 0, 0, "-", "algorithms"], [428, 0, 0, "-", "quantization"], [430, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[416, 0, 0, "-", "static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[417, 0, 0, "-", "keras"], [421, 0, 0, "-", "keras_utils"], [425, 0, 0, "-", "quantize_entry"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[417, 1, 1, "", "KerasAdaptor"], [417, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[418, 0, 0, "-", "conv2d"], [419, 0, 0, "-", "dense"], [420, 0, 0, "-", "depthwise_conv2d"], [422, 0, 0, "-", "pool2d"], [423, 0, 0, "-", "quantizer"], [424, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[425, 2, 1, "", "parse_to_keras_tune_cfg"], [425, 2, 1, "", "static_quantize_entry"], [425, 2, 1, "", "update_config"]], "neural_compressor.tensorflow.quantization": [[427, 0, 0, "-", "config"], [429, 0, 0, "-", "quantize"]], "neural_compressor.tensorflow.quantization.config": [[427, 1, 1, "", "Backend"], [427, 1, 1, "", "StaticQuantConfig"], [427, 2, 1, "", "get_all_registered_configs"], [427, 2, 1, "", "get_default_static_quant_config"], [427, 2, 1, "", "parse_config_from_dict"]], "neural_compressor.tensorflow.quantization.quantize": [[429, 2, 1, "", "quantize_model"]], "neural_compressor.tensorflow.utils": [[430, 2, 1, "", "deep_get"], [430, 2, 1, "", "dump_elapsed_time"], [430, 2, 1, "", "register_algo"], [430, 2, 1, "", "version1_gte_version2"]], "neural_compressor.torch": [[431, 0, 0, "-", "algorithms"], [438, 0, 0, "-", "quantization"], [441, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[433, 0, 0, "-", "weight_only"], [435, 0, 0, "-", "weight_only_algos"]], "neural_compressor.torch.algorithms.weight_only": [[432, 0, 0, "-", "gptq"], [434, 0, 0, "-", "rtn"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[432, 1, 1, "", "GPTQ"], [432, 1, 1, "", "GPTQuantizer"], [432, 2, 1, "", "apply_gptq_quantize"], [432, 2, 1, "", "find_layers"], [432, 2, 1, "", "find_layers_name"], [432, 2, 1, "", "is_leaf"], [432, 2, 1, "", "log_quantizable_layers_per_transformer"], [432, 2, 1, "", "quantize"], [432, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[434, 2, 1, "", "qdq_weight_actor"], [434, 2, 1, "", "qdq_weight_asym"], [434, 2, 1, "", "qdq_weight_sym"], [434, 2, 1, "", "quant_weight"], [434, 2, 1, "", "quant_weight_w_scale"], [434, 2, 1, "", "quantize_4bit"], [434, 2, 1, "", "rtn_quantize"], [434, 2, 1, "", "search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[435, 2, 1, "", "rtn_quantize_entry"]], "neural_compressor.torch.quantization": [[437, 0, 0, "-", "config"], [439, 0, 0, "-", "modules"], [440, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.config": [[437, 1, 1, "", "Backend"], [437, 1, 1, "", "GPTQConfig"], [437, 1, 1, "", "RTNWeightQuantConfig"], [437, 2, 1, "", "get_default_gptq_config"], [437, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.modules": [[439, 1, 1, "", "FakeAffineTensorQuantFunction"], [439, 1, 1, "", "MulLinear"], [439, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.quantize": [[440, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[441, 2, 1, "", "fetch_module"], [441, 2, 1, "", "register_algo"], [441, 2, 1, "", "set_module"]], "neural_compressor.training": [[442, 1, 1, "", "CallBacks"], [442, 1, 1, "", "CompressionManager"], [442, 2, 1, "", "fit"], [442, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[443, 0, 0, "-", "collect_layer_histogram"], [444, 0, 0, "-", "constant"], [445, 0, 0, "-", "create_obj_from_config"], [447, 0, 0, "-", "kl_divergence"], [448, 0, 0, "-", "load_huggingface"], [449, 0, 0, "-", "logger"], [450, 0, 0, "-", "neural_insights_utils"], [451, 0, 0, "-", "options"], [452, 0, 0, "-", "pytorch"], [453, 0, 0, "-", "utility"], [454, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[443, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[445, 2, 1, "", "create_dataloader"], [445, 2, 1, "", "create_dataset"], [445, 2, 1, "", "create_eval_func"], [445, 2, 1, "", "create_train_func"], [445, 2, 1, "", "get_algorithm"], [445, 2, 1, "", "get_func_from_config"], [445, 2, 1, "", "get_metrics"], [445, 2, 1, "", "get_postprocess"], [445, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[447, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[448, 1, 1, "", "OptimizedModel"], [448, 2, 1, "", "export_compressed_model"], [448, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[449, 1, 1, "", "Logger"], [449, 2, 1, "", "debug"], [449, 2, 1, "", "error"], [449, 2, 1, "", "fatal"], [449, 2, 1, "", "info"], [449, 2, 1, "", "log"], [449, 2, 1, "", "warn"], [449, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[450, 2, 1, "", "get_model_path"], [450, 2, 1, "", "register_neural_insights_workload"], [450, 2, 1, "", "update_neural_insights_workload"], [450, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[451, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[452, 2, 1, "", "is_int8_model"], [452, 2, 1, "", "load"], [452, 2, 1, "", "load_weight_only"], [452, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[453, 1, 1, "", "CaptureOutputToFile"], [453, 1, 1, "", "CpuInfo"], [453, 2, 1, "", "Dequantize"], [453, 1, 1, "", "DotDict"], [453, 1, 1, "", "GLOBAL_STATE"], [453, 1, 1, "", "LazyImport"], [453, 1, 1, "", "MODE"], [453, 1, 1, "", "OpEntry"], [453, 1, 1, "", "Statistics"], [453, 2, 1, "", "alias_param"], [453, 2, 1, "", "calculate_mse"], [453, 2, 1, "", "check_key_exist"], [453, 2, 1, "", "combine_histogram"], [453, 2, 1, "", "compare_objects"], [453, 2, 1, "", "compute_sparsity"], [453, 2, 1, "", "dequantize_weight"], [453, 2, 1, "", "dump_class_attrs"], [453, 2, 1, "", "dump_data_to_local"], [453, 2, 1, "", "dump_elapsed_time"], [453, 2, 1, "", "dump_table"], [453, 2, 1, "", "dump_table_to_csv"], [453, 2, 1, "", "equal_dicts"], [453, 2, 1, "", "fault_tolerant_file"], [453, 2, 1, "", "get_all_fp32_data"], [453, 2, 1, "", "get_number_of_sockets"], [453, 2, 1, "", "get_op_list"], [453, 2, 1, "", "get_size"], [453, 2, 1, "", "get_tensor_histogram"], [453, 2, 1, "", "get_tensors_info"], [453, 2, 1, "", "get_tuning_history"], [453, 2, 1, "", "get_weights_details"], [453, 2, 1, "", "load_data_from_pkl"], [453, 2, 1, "", "mse_metric_gap"], [453, 2, 1, "", "print_op_list"], [453, 2, 1, "", "print_table"], [453, 2, 1, "", "recover"], [453, 2, 1, "", "set_random_seed"], [453, 2, 1, "", "set_resume_from"], [453, 2, 1, "", "set_tensorboard"], [453, 2, 1, "", "set_workspace"], [453, 2, 1, "", "show_memory_info"], [453, 2, 1, "", "singleton"], [453, 2, 1, "", "str2array"], [453, 2, 1, "", "time_limit"], [453, 2, 1, "", "version1_eq_version2"], [453, 2, 1, "", "version1_gt_version2"], [453, 2, 1, "", "version1_gte_version2"], [453, 2, 1, "", "version1_lt_version2"], [453, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[454, 1, 1, "", "WeightsDetails"], [454, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 203], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 463, 464, 466], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 183, 184, 187, 188, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 353, 354, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 379, 380, 382, 383, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 417, 425, 427, 429, 430, 432, 434, 435, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 379, 380, 382, 383, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 417, 425, 427, 429, 430, 432, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 462, 529], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 159, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 178, 180, 181, 183, 187, 188, 190, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 298, 299, 300, 303, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 353, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 377, 378, 379, 380, 382, 383, 385, 387, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 417, 427, 432, 437, 439, 442, 443, 446, 447, 448, 449, 451, 453, 454, 463, 529], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 151, 153, 154, 155, 160, 161, 162, 165, 166, 168, 169, 170, 172, 175, 176, 178, 181, 183, 184, 187, 188, 190, 191, 192, 194, 196, 197, 201, 204, 210, 211, 212, 213, 214, 216, 225, 226, 234, 236, 240, 243, 244, 245, 248, 250, 251, 252, 253, 255, 257, 258, 260, 269, 277, 279, 283, 286, 287, 288, 290, 291, 292, 295, 296, 297, 300, 301, 303, 304, 305, 306, 307, 314, 321, 325, 330, 331, 332, 334, 339, 345, 349, 351, 353, 354, 356, 357, 358, 359, 360, 361, 365, 369, 371, 388, 393, 394, 398, 406, 410, 412, 413, 425, 427, 429, 430, 432, 434, 435, 437, 440, 441, 442, 445, 446, 448, 449, 450, 452, 453, 488], "subpackag": [2, 17, 87, 111, 112, 114, 156, 189, 191, 220, 245, 263, 288, 299, 323, 341, 352, 402], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 156, 157, 172, 177, 182, 185, 189, 191, 193, 197, 204, 217, 221, 228, 240, 244, 248, 255, 264, 271, 283, 287, 290, 294, 299, 306, 312, 318, 324, 328, 341, 347, 352, 359, 363, 374, 376, 381, 384, 386, 391, 402, 408, 414, 438, 446], "packag": [2, 29, 172, 191, 197, 204, 228, 240, 244, 245, 248, 255, 271, 283, 287, 288, 290, 299, 306, 318, 323, 324, 341, 359, 363, 402, 446, 512, 514, 516, 517], "kera": [3, 417], "keras_util": [4, 5, 6, 7, 8, 9, 10, 418, 419, 420, 421, 422, 423, 424], "conv2d": [4, 418], "dens": [5, 419], "depthwise_conv2d": [6, 420], "pool2d": [8, 422], "quantiz": [9, 41, 159, 335, 394, 423, 427, 428, 429, 437, 438, 439, 440, 459, 462, 464, 465, 477, 481, 485, 487, 490, 493, 496, 499, 500, 508, 519, 521, 522, 523, 524, 532, 533, 534, 540, 541, 542, 543, 544, 547, 553], "separable_conv2d": [10, 424], "mxnet": [11, 483, 498, 541, 549], "mxnet_util": [12, 13], "util": [13, 43, 148, 161, 168, 179, 184, 214, 346, 347, 348, 349, 350, 351, 388, 393, 407, 408, 409, 410, 411, 412, 430, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 468], "onnxrt": [14, 483, 498, 549], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 464, 481], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 464, 465], "activ": [18, 522], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 547], "maxpool": 32, "norm": 33, "op": [34, 490], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 525], "unary_op": 40, "smooth_quant": [42, 165, 173], "weight_onli": [44, 169, 432, 433, 434], "pytorch": [45, 452, 483, 488, 490, 498, 523, 541, 542, 543, 548, 549, 553], "queri": [46, 463, 527, 532, 533, 534], "tensorflow": [47, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 483, 488, 490, 498, 541, 543, 548, 549, 553], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 52, 500], "bf16_convert": [50, 153], "dequantize_cast_optim": 51, "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 464], "convert_add_to_biasadd": 53, "convert_layout": 54, "convert_leakyrelu": 55, "convert_nan_to_random": 56, "convert_placeholder_to_const": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 490, 553], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 467, 496, 541, 542, 553], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 553], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 553], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 260], "autoround": [149, 150, 151], "sign_sgd": 151, "awq": 152, "gptq": [154, 432], "hawq_metr": 155, "layer_wise_qu": [157, 158, 159, 160, 161], "modified_pickl": 158, "torch_load": 160, "mixed_precis": [162, 308], "model_wrapp": 163, "pattern_detector": 164, "symbolic_trac": 166, "teq": 167, "algorithm": [170, 171, 172, 173, 174, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 434, 435, 481, 544, 547, 550], "fast_bias_correct": 171, "weight_correct": 174, "benchmark": [175, 252, 471, 480, 485, 499, 540], "common": [176, 177, 178, 179, 253, 254, 255, 256, 257, 258, 259, 260, 459, 491], "base_config": 176, "logger": [178, 329, 449], "compress": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 262, 472, 544], "callback": 180, "distil": [181, 182, 183, 184, 293, 486, 487, 499, 540, 553], "criterion": [181, 253], "optim": [183, 258, 509, 519, 529, 532, 533, 534, 537, 538, 551], "hpo": [185, 186, 187, 188], "sa_optim": 186, "search_algorithm": [187, 315], "search_spac": 188, "pruner": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 321, 332], "criteria": [190, 458, 538, 550], "model_slim": [192, 193, 194, 195], "auto_slim": 192, "pattern_analyz": 194, "weight_slim": 195, "pattern": [196, 197, 198, 199, 200, 324, 325, 326, 330, 538], "base": [196, 201, 496, 528, 551], "mha": [198, 205], "ninm": 199, "nxm": 200, "basic": [202, 338, 397, 460, 550], "pattern_lock": [206, 320], "progress": [207, 525], "retrain_fre": 208, "sparse_gpt": 209, "prune": [210, 322, 333, 499, 538, 540, 553], "reg": 211, "schedul": [212, 334, 336, 538], "tf_criteria": 213, "conf": [215, 216, 217, 218], "config": [215, 219, 427, 437, 473, 483, 536], "dotdict": 216, "pythonic_config": 218, "contrib": [220, 221, 222, 223, 263, 264, 265, 266], "strategi": [221, 222, 223, 264, 265, 266, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 478, 546, 550], "sigopt": [222, 265, 546, 550], "tpe": [223, 266, 550], "data": [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 464, 465, 485, 489, 523], "dataload": [224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 254, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 482, 483], "base_dataload": [224, 267], "default_dataload": [226, 269], "fetcher": [227, 270], "attribut": [228, 236, 245, 279, 288, 299, 323, 363, 413, 446, 457], "mxnet_dataload": [229, 272], "onnxrt_dataload": [230, 273], "pytorch_dataload": [231, 274], "sampler": [232, 275], "tensorflow_dataload": [233, 276], "dataset": [234, 235, 236, 237, 238, 239, 240, 241, 277, 278, 279, 280, 281, 282, 283, 284, 483, 485, 494, 524], "bert_dataset": [234, 277], "coco_dataset": [235, 278], "dummy_dataset": [237, 280], "dummy_dataset_v2": [238, 281], "imagenet_dataset": [239, 282], "style_transfer_dataset": [241, 284], "filter": [242, 243, 244, 285, 286, 287], "coco_filt": [242, 285], "transform": [246, 247, 248, 249, 250, 251, 289, 290, 291, 292, 494, 549], "coco_transform": 246, "imagenet_transform": [247, 289], "postprocess": [249, 259], "token": [250, 291], "experiment": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "metric": [256, 300, 301, 302, 303, 304, 305, 306, 307, 353, 354, 355, 356, 357, 358, 359, 360, 494, 498], "model": [257, 362, 363, 364, 365, 366, 367, 368, 369, 370, 464, 475, 490, 493, 496, 499, 501, 508, 522, 523, 524, 532, 533, 534, 538, 542, 544, 547, 553], "compon": 261, "export": [294, 295, 296, 297, 490, 544], "qlinear2qdq": 295, "tf2onnx": 296, "torch2onnx": 297, "graph_optim": 298, "bleu": [300, 353], "bleu_util": [301, 354], "coco_label_map": [302, 355], "coco_tool": [303, 356], "evaluate_squad": [304, 357], "f1": [305, 358], "model_convers": 309, "na": [310, 311, 312, 313, 314, 315, 460, 540], "basic_na": 310, "dyna": 311, "nas_util": 314, "pruner_legaci": [316, 317, 318, 319, 320, 321], "gradient_sensit": 316, "group_lasso": 317, "magnitud": 319, "pruning_recip": [323, 324, 325, 326], "tile_pattern": 326, "pruning_v2": 327, "pytorch_prun": [328, 329, 330, 331, 332, 333, 334], "prune_util": 331, "auto_mixed_precis": [337, 396], "bayesian": [339, 398, 550], "exhaust": [340, 400, 550], "mse": [342, 403, 550], "mse_v2": [343, 404, 550], "random": [344, 405, 550], "constant": [346, 407, 444], "tuning_sampl": [348, 409], "tuning_spac": [349, 410], "tuning_struct": [350, 411], "mix_precis": 361, "base_model": 362, "keras_model": 364, "mxnet_model": 366, "nets_factori": 367, "onnx_model": 368, "tensorflow_model": 369, "torch_model": 370, "object": [371, 476, 532, 533, 534, 536], "profil": [372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 485], "parser": [373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "factori": [373, 375, 380, 383, 385, 390], "onnx_pars": [375, 376, 377], "result": [379, 522, 524, 532, 533, 534], "tensorflow_pars": [380, 381, 382], "onnxrt_profil": [385, 386, 387, 388], "tensorflow_profil": [390, 391, 392, 393], "auto": [395, 513, 519, 543, 547, 550], "conserv": [399, 550], "hawq_v2": [401, 550], "templat": [413, 414, 458], "api_doc_exampl": 413, "static_quant": [416, 417, 418, 419, 420, 421, 422, 423, 424, 425], "quantize_entri": 425, "torch": [431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 468, 553], "rtn": 434, "weight_only_algo": 435, "train": [442, 459, 479, 488, 499, 538, 541], "collect_layer_histogram": 443, "create_obj_from_config": 445, "kl_diverg": 447, "load_huggingfac": 448, "neural_insights_util": 450, "option": [451, 488, 507], "weights_detail": 454, "version": 455, "intel": [456, 462, 482, 485, 495, 496, 498, 499, 505, 513, 519, 553, 554], "neural": [456, 459, 460, 462, 482, 485, 495, 496, 498, 499, 502, 506, 508, 513, 519, 521, 522, 523, 524, 526, 527, 528, 532, 533, 534, 538, 546, 551, 554], "compressor": [456, 459, 462, 482, 485, 495, 496, 498, 499, 513, 519, 546, 554], "document": [456, 462, 469, 554], "section": [456, 554], "contributor": [457, 458], "coven": [457, 458], "code": [457, 458, 460, 499, 520, 525, 544, 551], "conduct": [457, 458], "our": [457, 547], "pledg": 457, "standard": 457, "respons": [457, 528], "scope": [457, 538], "enforc": 457, "contribut": [458, 512, 516], "guidelin": 458, "creat": [458, 525], "pull": 458, "request": [458, 500, 530], "step": [458, 521, 522, 523, 524], "checklist": 458, "accept": 458, "statu": [458, 527, 528], "check": 458, "overview": [458, 529, 551], "support": [458, 459, 460, 463, 465, 480, 481, 482, 483, 485, 486, 487, 488, 490, 492, 495, 496, 498, 500, 501, 503, 504, 508, 509, 536, 537, 538, 540, 541, 542, 544, 547, 548, 549, 552], "fx": 459, "introduct": [459, 460, 463, 464, 465, 480, 481, 482, 483, 485, 486, 487, 488, 490, 492, 495, 498, 500, 501, 519, 522, 523, 524, 536, 537, 538, 540, 541, 542, 544, 546, 547, 548, 549, 550, 552], "mode": [459, 553], "matrix": [459, 460, 463, 480, 481, 482, 483, 485, 486, 487, 488, 490, 492, 495, 498, 500, 501, 504, 536, 537, 538, 540, 541, 542, 544, 547, 548, 552], "get": [459, 460, 462, 463, 480, 482, 483, 485, 486, 487, 488, 492, 493, 498, 500, 502, 513, 520, 521, 525, 526, 527, 528, 536, 537, 538, 540, 541, 548, 552], "start": [459, 460, 462, 463, 480, 482, 483, 485, 486, 487, 488, 492, 493, 498, 500, 502, 503, 507, 513, 521, 525, 526, 527, 532, 533, 534, 536, 537, 538, 540, 541, 548, 552], "post": [459, 499, 528, 541], "static": [459, 541], "dynam": [459, 460, 541], "awar": [459, 499, 538, 541], "exampl": [459, 460, 463, 469, 480, 482, 483, 485, 486, 487, 488, 489, 490, 498, 499, 500, 501, 504, 508, 521, 522, 523, 524, 526, 531, 532, 533, 534, 536, 537, 538, 541, 542, 544, 547, 548, 553], "note": [459, 545], "detail": 459, "problem": 459, "architectur": [460, 484, 495, 496], "search": [460, 519], "api": [460, 462, 463, 464, 469, 470, 480, 482, 483, 486, 487, 488, 493, 494, 498, 500, 502, 506, 520, 521, 528, 534, 536, 537, 538, 540, 551], "usag": [460, 508, 519, 528, 548, 550], "1": [460, 488, 491, 494, 499, 519, 526, 527, 553], "python": [460, 462, 482, 493, 498, 502, 506, 507, 514, 517, 521, 540, 551], "yaml": [460, 464, 483, 488, 492, 552], "2": [460, 488, 491, 494, 499, 519, 526, 527, 553], "onli": [460, 544], "advanc": [460, 525, 551], "custom": [460, 482, 498, 532, 550], "secur": [461, 488], "polici": [461, 550], "report": 461, "vulner": 461, "instal": [462, 485, 496, 503, 505, 512, 513, 516, 521, 526, 527], "from": [462, 464, 496, 499, 521, 526, 527], "pypi": [462, 508, 521], "select": [462, 513], "public": [462, 539], "event": [462, 539], "addit": 462, "commun": 462, "work": [463, 526, 541], "flow": [463, 541], "background": [463, 519], "ad": 463, "new": [463, 465, 514, 517, 550], "backend": [463, 541], "capabl": [463, 544], "implement": [463, 464], "onnxrtadaptor": 463, "how": [464, 465, 485, 522, 523, 524, 526], "add": [464, 527], "an": [464, 532, 533, 534], "list": [464, 489, 531, 549], "need": 464, "design": [464, 484, 529, 550], "framework": [464, 482, 483, 490, 492, 501, 540, 542, 544, 547], "query_fw_cap": 464, "accord": [464, 465], "tune_cfg": 464, "prepar": [464, 485, 522, 523, 524, 546], "fp32": [464, 490], "graph": 464, "run": [464, 485, 520, 522, 523, 524, 525], "sampl": [464, 493], "iter": 464, "calcul": 464, "rang": 464, "type": [465, 538], "like": 465, "int4": 465, "few": 465, "line": 465, "chang": [465, 494, 518, 520, 545], "defin": [465, 488], "abil": 465, "specif": [465, 483], "invok": 465, "kernel": 465, "tune": [465, 541, 544, 547, 550], "configur": [465, 488, 492, 525, 540, 546, 552], "us": [465, 482, 498, 526, 527], "summari": [465, 522], "runtim": [467, 496, 541, 542, 553], "mix": [474, 499, 500, 543], "precis": [474, 499, 500, 543], "refer": [481, 538, 541, 544, 547], "build": [482, 491, 498, 525, 526, 527], "file": [483, 492, 552], "user": [483, 488, 494, 540, 544, 551, 552], "workflow": [484, 529], "diagnosi": [485, 521], "featur": [485, 488, 492, 495, 508, 509, 513, 540, 541, 548, 552], "modifi": 485, "script": [485, 525], "see": 485, "do": [485, 502], "paramet": [485, 528], "descript": [485, 528, 530], "suggest": 485, "fallback": 485, "set": [485, 505, 519], "knowledg": [486, 553], "intermedi": 486, "layer": [486, 542, 547], "self": 486, "distribut": [488, 508, 550], "infer": 488, "evalu": 488, "pure": 488, "horovodrun": 488, "execut": 488, "releas": [489, 514, 517, 545], "appendix": 490, "frequent": 491, "ask": 491, "question": 491, "issu": [491, 545], "3": [491, 503, 519], "4": [491, 510, 519, 539], "quick": [493, 507], "valid": [493, 496, 547, 553], "incompat": [494, 545], "between": 494, "v1": 494, "face": [494, 533, 534], "built": [494, 496, 498], "infrastructur": 495, "prerequisit": [496, 526, 527], "binari": 496, "sourc": [496, 521, 523, 524, 526, 527], "ai": 496, "kit": 496, "system": 496, "requir": [496, 512, 516, 522, 523, 524, 532], "hardwar": [496, 500, 553], "environ": [496, 505], "cpu": [496, 505, 553], "64": 496, "compat": 496, "processor": 496, "gpu": 496, "": [496, 520, 526], "xe": 496, "multipl": [496, 536, 553], "vendor": 496, "through": [496, 553], "softwar": [496, 500], "legal": 497, "inform": 497, "licens": 497, "citat": 497, "trademark": 497, "migrat": 499, "x": 499, "orchestr": [499, 537], "fp16": 500, "dure": [500, 543], "accuraci": [500, 522, 524, 541, 550], "driven": 500, "coder": [502, 506, 508, 519, 551], "what": [502, 520, 526], "we": 502, "offer": 502, "jupyt": [502, 503, 514, 517], "lab": [502, 503], "extens": [502, 512, 513, 516, 519, 520, 529, 553], "launcher": [502, 507], "contact": [502, 526], "aw": 503, "amazon": 503, "sagemak": 503, "For": 503, "studio": 503, "notebook": 503, "instanc": 503, "guid": [503, 551], "bigdl": 504, "nano": 504, "platform": [505, 546], "best": [505, 513], "perform": [505, 546], "mkl": 505, "openmp": 505, "jemalloc": 505, "numa": 505, "control": 505, "variabl": 505, "frequenc": 505, "govern": 505, "enabl": [506, 513, 519], "bench": 506, "superbench": 506, "argument": 507, "v0": 510, "highlight": 510, "other": 510, "changelog": [511, 515], "neural_compressor_ext_lab": [512, 514], "uninstal": [512, 516], "develop": [512, 516], "jupyterlab": 513, "Or": 513, "let": 513, "u": 513, "help": 513, "you": 513, "pre": 513, "requisit": 513, "make": [514, 517, 520, 525], "manual": [514, 517], "npm": [514, 517, 525], "autom": [514, 517], "publish": [514, 517], "conda": [514, 517], "forg": [514, 517], "neural_compressor_ext_lab_alibaba": [516, 517], "log": [518, 527, 528], "unreleas": 518, "vscode": 519, "open": [519, 524], "icon": 519, "5": 519, "welcom": 520, "your": 520, "v": 520, "folder": 520, "setup": 520, "up": 520, "straight": 520, "awai": 520, "explor": 520, "test": [520, 525], "go": 520, "further": 520, "insight": [521, 522, 523, 524], "tensor": [521, 547], "dump": [521, 523], "research": 521, "collabor": 521, "debug": [522, 524], "analyz": [522, 524, 525], "weight": [522, 523, 524, 544], "histogram": 524, "react": 525, "app": 525, "avail": 525, "eject": 525, "learn": [525, 526], "more": [525, 526], "bundl": 525, "size": 525, "web": 525, "deploy": [525, 538], "fail": 525, "minifi": 525, "solut": [526, 527, 528, 532, 533, 534], "why": 526, "doe": 526, "method": [526, 527], "pip": [526, 527], "end": [526, 532, 533, 534], "servic": [527, 529, 532, 533, 534], "submit": [527, 528, 532, 533, 534], "task": [527, 528, 530, 532, 533, 534], "stop": [527, 532, 533, 534], "inspect": 527, "manag": [527, 532, 533], "resourc": [527, 532, 533], "node": 527, "state": 527, "cluster": [527, 528], "remov": 527, "url": 528, "endpoint": 528, "task_id": 528, "websocket": 528, "screen": 528, "ping": 528, "download": [528, 532, 533], "doc": 529, "wip": 529, "oaa": 529, "definit": 529, "diagram": 529, "hug": [533, 534], "grpc": 534, "client": 535, "singl": 536, "One": 537, "shot": 537, "network": 538, "sparsiti": 538, "decai": 538, "regular": 538, "larg": 538, "languag": 538, "retrain": 538, "free": 538, "spars": 538, "hyperparamet": 538, "full": 539, "78": 539, "2023": 539, "24": 539, "2022": 539, "35": 539, "2021": 539, "15": [539, 553], "2018": 539, "2020": 539, "style": 540, "access": 540, "fundament": [541, 547], "scheme": 541, "ipex": 541, "approach": 541, "With": 541, "without": 541, "specifi": 541, "rule": 541, "recip": 541, "devic": 541, "wise": [542, 547], "lwq": 542, "turn": 543, "off": 543, "woq": [544, 553], "known": 545, "benefit": 546, "comparison": 546, "differ": 546, "smooth": 547, "quant": 547, "per": 547, "channel": 547, "limit": 547, "smoothquant": 547, "enhanc": 547, "alpha": 547, "engin": 547, "tensorboard": 548, "space": 550, "exit": 550, "process": 550, "zero": 551, "topic": 551, "innov": 551, "product": 551, "13": 553, "0": 553, "ptq": 553}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [187, "module-contents"], [188, "module-contents"], [190, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [289, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [417, "module-contents"], [425, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [434, "module-contents"], [435, "module-contents"], [437, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [453, "module-contents"], [454, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [159, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [178, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [187, "classes"], [188, "classes"], [190, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [215, "classes"], [216, "classes"], [218, "classes"], [219, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [261, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [269, "classes"], [270, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [303, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [375, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [387, "classes"], [389, "classes"], [390, "classes"], [392, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [417, "classes"], [427, "classes"], [432, "classes"], [437, "classes"], [439, "classes"], [442, "classes"], [443, "classes"], [446, "classes"], [447, "classes"], [448, "classes"], [449, "classes"], [451, "classes"], [453, "classes"], [454, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [151, "functions"], [153, "functions"], [154, "functions"], [155, "functions"], [160, "functions"], [161, "functions"], [162, "functions"], [165, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [178, "functions"], [181, "functions"], [183, "functions"], [184, "functions"], [187, "functions"], [188, "functions"], [190, "functions"], [191, "functions"], [192, "functions"], [194, "functions"], [196, "functions"], [197, "functions"], [201, "functions"], [204, "functions"], [210, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [216, "functions"], [225, "functions"], [226, "functions"], [234, "functions"], [236, "functions"], [240, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [248, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [255, "functions"], [257, "functions"], [258, "functions"], [260, "functions"], [269, "functions"], [277, "functions"], [279, "functions"], [283, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [290, "functions"], [291, "functions"], [292, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [300, "functions"], [301, "functions"], [303, "functions"], [304, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [314, "functions"], [321, "functions"], [325, "functions"], [330, "functions"], [331, "functions"], [332, "functions"], [334, "functions"], [339, "functions"], [345, "functions"], [349, "functions"], [351, "functions"], [353, "functions"], [354, "functions"], [356, "functions"], [357, "functions"], [358, "functions"], [359, "functions"], [360, "functions"], [361, "functions"], [365, "functions"], [369, "functions"], [371, "functions"], [388, "functions"], [393, "functions"], [394, "functions"], [398, "functions"], [406, "functions"], [410, "functions"], [412, "functions"], [413, "functions"], [425, "functions"], [427, "functions"], [429, "functions"], [430, "functions"], [432, "functions"], [434, "functions"], [435, "functions"], [437, "functions"], [440, "functions"], [441, "functions"], [442, "functions"], [445, "functions"], [446, "functions"], [448, "functions"], [449, "functions"], [450, "functions"], [452, "functions"], [453, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [156, "subpackages"], [189, "subpackages"], [191, "subpackages"], [220, "subpackages"], [245, "subpackages"], [263, "subpackages"], [288, "subpackages"], [299, "subpackages"], [323, "subpackages"], [341, "subpackages"], [352, "subpackages"], [402, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [156, "submodules"], [157, "submodules"], [172, "submodules"], [177, "submodules"], [182, "submodules"], [185, "submodules"], [189, "submodules"], [191, "submodules"], [193, "submodules"], [197, "submodules"], [204, "submodules"], [217, "submodules"], [221, "submodules"], [228, "submodules"], [240, "submodules"], [244, "submodules"], [248, "submodules"], [255, "submodules"], [264, "submodules"], [271, "submodules"], [283, "submodules"], [287, "submodules"], [290, "submodules"], [294, "submodules"], [299, "submodules"], [306, "submodules"], [312, "submodules"], [318, "submodules"], [324, "submodules"], [328, "submodules"], [341, "submodules"], [347, "submodules"], [352, "submodules"], [359, "submodules"], [363, "submodules"], [374, "submodules"], [376, "submodules"], [381, "submodules"], [384, "submodules"], [386, "submodules"], [391, "submodules"], [402, "submodules"], [408, "submodules"], [414, "submodules"], [438, "submodules"], [446, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [172, "package-contents"], [191, "package-contents"], [197, "package-contents"], [204, "package-contents"], [228, "package-contents"], [240, "package-contents"], [244, "package-contents"], [245, "package-contents"], [248, "package-contents"], [255, "package-contents"], [271, "package-contents"], [283, "package-contents"], [287, "package-contents"], [288, "package-contents"], [290, "package-contents"], [299, "package-contents"], [306, "package-contents"], [318, "package-contents"], [323, "package-contents"], [324, "package-contents"], [341, "package-contents"], [359, "package-contents"], [363, "package-contents"], [402, "package-contents"], [446, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[152, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[154, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[155, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[156, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[162, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[163, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[164, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[165, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[166, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[167, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[168, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[168, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[169, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[170, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[171, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[172, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[173, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[174, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[175, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[176, "module-neural_compressor.common.base_config"]], "neural_compressor.common": [[177, "module-neural_compressor.common"]], "neural_compressor.common.logger": [[178, "module-neural_compressor.common.logger"]], "neural_compressor.common.utility": [[179, "module-neural_compressor.common.utility"]], "neural_compressor.compression.callbacks": [[180, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[181, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[182, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[183, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[184, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[185, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[186, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[187, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[188, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[189, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[190, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[191, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[192, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[193, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[194, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[195, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[196, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[197, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[198, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[199, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[200, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[201, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[202, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[203, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[204, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[205, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[206, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[207, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[208, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[209, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[210, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[211, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[212, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[213, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[214, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[215, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[216, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[217, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[218, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[219, "module-neural_compressor.config"]], "neural_compressor.contrib": [[220, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[221, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[222, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[223, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[225, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[227, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[228, "module-neural_compressor.data.dataloaders"]], "Attributes": [[228, "attributes"], [236, "attributes"], [245, "attributes"], [279, "attributes"], [288, "attributes"], [299, "attributes"], [323, "attributes"], [363, "attributes"], [413, "attributes"], [446, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[232, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[234, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[235, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[236, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[237, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[240, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[242, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[243, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[244, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[245, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[246, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[247, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[248, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[249, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[250, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[251, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[252, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[253, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[254, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[255, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[256, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[257, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[258, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[259, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[260, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[261, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[262, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[263, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[264, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[265, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[266, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[267, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[268, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[270, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[271, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[272, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[273, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[274, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[275, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[276, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[277, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[278, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[279, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[280, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[281, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[282, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[283, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[284, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[285, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[286, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[287, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[288, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[289, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[290, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[291, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[292, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[293, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[294, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[295, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[296, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[297, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[298, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[299, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[300, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[301, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[302, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[303, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[304, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[305, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[306, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[307, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[308, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[309, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[310, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[311, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[312, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[313, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[314, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[315, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[316, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[317, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[318, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[319, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[320, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[321, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[322, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[323, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[324, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[325, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[326, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[327, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[328, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[329, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[330, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[331, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[332, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[333, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[334, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[335, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[336, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[337, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[338, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[339, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[340, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[341, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[342, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[343, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[344, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[345, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[346, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[347, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[348, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[349, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[350, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[351, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[352, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[353, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[354, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[355, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[356, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[357, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[358, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[359, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[360, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[361, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[362, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[363, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[364, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[365, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[366, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[367, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[368, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[369, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[370, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[371, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[372, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[373, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[374, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[375, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[376, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[377, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[378, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[379, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[380, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[381, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[382, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[383, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[384, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[385, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[386, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[387, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[389, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[390, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[391, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[392, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[394, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[395, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[396, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[397, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[398, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[399, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[400, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[401, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[402, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[403, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[404, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[405, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[406, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[407, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[408, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[409, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[410, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[411, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[412, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[413, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[414, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[415, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[416, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[417, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[418, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[419, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "neural_compressor.tensorflow": [[426, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.config": [[427, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[428, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[429, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.utils": [[430, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.torch.algorithms": [[431, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[432, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only": [[433, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[434, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only_algos": [[435, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "neural_compressor.torch": [[436, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.config": [[437, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[438, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[439, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[440, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils": [[441, "module-neural_compressor.torch.utils"]], "neural_compressor.training": [[442, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[443, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[444, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[445, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[446, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[447, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[448, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[449, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[450, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[451, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[452, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[453, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[454, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[455, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[456, "intel-neural-compressor-documentation"], [554, "intel-neural-compressor-documentation"]], "Sections": [[456, "sections"], [554, "sections"]], "Contributor Covenant Code of Conduct": [[457, "contributor-covenant-code-of-conduct"], [458, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[457, "our-pledge"]], "Our Standards": [[457, "our-standards"]], "Our Responsibilities": [[457, "our-responsibilities"]], "Scope": [[457, "scope"]], "Enforcement": [[457, "enforcement"]], "Attribution": [[457, "attribution"]], "Contribution Guidelines": [[458, "contribution-guidelines"]], "Create Pull Request": [[458, "create-pull-request"]], "Step-by-Step guidelines": [[458, "step-by-step-guidelines"]], "Pull Request Checklist": [[458, "pull-request-checklist"]], "Pull Request Template": [[458, "pull-request-template"]], "Pull Request Acceptance Criteria": [[458, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[458, "pull-request-status-checks-overview"]], "Support": [[458, "support"]], "FX": [[459, "fx"]], "Introduction": [[459, "introduction"], [460, "introduction"], [463, "introduction"], [464, "introduction"], [465, "introduction"], [480, "introduction"], [481, "introduction"], [482, "introduction"], [483, "introduction"], [486, "introduction"], [487, "introduction"], [488, "introduction"], [490, "introduction"], [492, "introduction"], [495, "introduction"], [498, "introduction"], [500, "introduction"], [501, "introduction"], [522, "introduction"], [523, "introduction"], [524, "introduction"], [536, "introduction"], [537, "introduction"], [538, "introduction"], [540, "introduction"], [542, "introduction"], [544, "introduction"], [546, "introduction"], [547, "introduction"], [548, "introduction"], [549, "introduction"], [550, "introduction"], [552, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[459, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[459, "get-started"], [485, "get-started"], [526, "get-started"], [541, "get-started"]], "Post Training Static Quantization": [[459, "post-training-static-quantization"], [541, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[459, "post-training-dynamic-quantization"], [541, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[459, "quantization-aware-training"]], "Examples": [[459, "examples"], [460, "examples"], [480, "examples"], [482, "examples"], [483, "examples"], [486, "examples"], [487, "examples"], [488, "examples"], [489, "examples"], [490, "examples"], [499, "examples"], [500, "examples"], [501, "examples"], [537, "examples"], [538, "examples"], [541, "examples"], [542, "examples"], [544, "examples"], [548, "examples"]], "Note": [[459, "note"]], "Details": [[459, "details"]], "Common Problem": [[459, "common-problem"]], "Dynamic Quantization": [[459, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[459, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[460, "neural-architecture-search"]], "Basic NAS": [[460, "basic-nas"]], "Dynamic NAS": [[460, "dynamic-nas"]], "NAS Support Matrix": [[460, "nas-support-matrix"]], "Get Started with NAS API": [[460, "get-started-with-nas-api"]], "Basic Usage": [[460, "basic-usage"]], "1. Python code + YAML": [[460, "python-code-yaml"]], "2. Python code only": [[460, "python-code-only"]], "Advanced Usage (Custom NAS)": [[460, "advanced-usage-custom-nas"]], "Security Policy": [[461, "security-policy"]], "Report a Vulnerability": [[461, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[462, "intel-neural-compressor"], [519, "intel-neural-compressor"]], "Installation": [[462, "installation"], [496, "installation"], [496, "id1"], [513, "installation"], [521, "installation"], [526, "installation"]], "Install from pypi": [[462, "install-from-pypi"], [521, "install-from-pypi"]], "Getting Started": [[462, "getting-started"], [493, "getting-started"], [521, "getting-started"]], "Quantization with Python API": [[462, "quantization-with-python-api"], [493, "quantization-with-python-api"], [521, "quantization-with-python-api"]], "Documentation": [[462, "documentation"]], "Selected Publications/Events": [[462, "selected-publications-events"]], "Additional Content": [[462, "additional-content"]], "Communication": [[462, "communication"]], "Adaptor": [[463, "adaptor"], [466, "adaptor"]], "Adaptor Support Matrix": [[463, "adaptor-support-matrix"]], "Working Flow": [[463, "working-flow"], [541, "working-flow"]], "Get Started with Adaptor API": [[463, "get-started-with-adaptor-api"]], "Query API": [[463, "query-api"]], "Background": [[463, "background"]], "Query API Introduction": [[463, "query-api-introduction"]], "Example of Adding a New Backend Support": [[463, "example-of-adding-a-new-backend-support"]], "Capability": [[463, "capability"]], "Implement ONNXRTAdaptor Class": [[463, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[464, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[464, "api-list-that-need-to-implement"]], "Design the framework YAML": [[464, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[464, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[464, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[464, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[464, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[464, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[465, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[465, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[465, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[465, "use-the-new-data-type"]], "Summary": [[465, "summary"]], "ONNX Runtime": [[467, "onnx-runtime"]], "Torch Utils": [[468, "torch-utils"]], "API Document Example": [[469, "api-document-example"]], "APIs": [[470, "apis"]], "Benchmark": [[471, "benchmark"], [499, "benchmark"], [540, "benchmark"]], "Compression": [[472, "compression"]], "Config": [[473, "config"]], "Mix Precision": [[474, "mix-precision"], [499, "mix-precision"]], "Model": [[475, "model"], [501, "model"], [522, "model"], [524, "model"]], "Objective": [[476, "objective"], [532, "objective"], [533, "objective"], [534, "objective"], [536, "objective"]], "Quantization": [[477, "quantization"], [540, "quantization"], [541, "quantization"]], "Strategy": [[478, "strategy"]], "Training": [[479, "training"]], "Benchmarking": [[480, "benchmarking"]], "Benchmark Support Matrix": [[480, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[480, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[481, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[481, "calibration-algorithms"]], "Support Matrix": [[481, "support-matrix"], [504, "support-matrix"]], "Reference": [[481, "reference"], [538, "reference"], [541, "reference"], [544, "reference"], [547, "reference"]], "DataLoader": [[482, "dataloader"]], "Supported Framework Dataloader Matrix": [[482, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[482, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[482, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[482, "build-custom-dataloader-with-python-api"]], "Dataset": [[483, "dataset"]], "Supported Framework Dataset Matrix": [[483, "supported-framework-dataset-matrix"]], "TensorFlow": [[483, "tensorflow"], [498, "tensorflow"], [549, "tensorflow"]], "PyTorch": [[483, "pytorch"], [498, "pytorch"], [543, "pytorch"]], "MXNet": [[483, "mxnet"], [498, "mxnet"], [549, "mxnet"]], "ONNXRT": [[483, "onnxrt"], [498, "onnxrt"], [549, "onnxrt"]], "Get start with Dataset API": [[483, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[483, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[483, "user-specific-dataset"]], "Design": [[484, "design"], [550, "design"], [550, "id1"], [550, "id3"], [550, "id5"], [550, "id7"], [550, "id9"], [550, "id11"], [550, "id13"], [550, "id15"], [550, "id17"], [550, "id19"], [550, "id21"]], "Architecture": [[484, "architecture"], [495, "architecture"]], "Workflow": [[484, "workflow"]], "Diagnosis": [[485, "diagnosis"]], "Diagnosis Introduction": [[485, "diagnosis-introduction"]], "Supported Feature Matrix": [[485, "supported-feature-matrix"], [488, "supported-feature-matrix"], [492, "supported-feature-matrix"], [495, "supported-feature-matrix"], [540, "supported-feature-matrix"], [541, "supported-feature-matrix"], [548, "supported-feature-matrix"], [552, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[485, "install-intel-neural-compressor"]], "Modify script": [[485, "modify-script"]], "Quantization diagnosis": [[485, "quantization-diagnosis"]], "Benchmark diagnosis": [[485, "benchmark-diagnosis"]], "Example": [[485, "example"], [498, "example"], [504, "example"], [508, "example"], [536, "example"], [547, "example"]], "Prepare dataset": [[485, "prepare-dataset"]], "Run quantization script": [[485, "run-quantization-script"]], "Run benchmark script": [[485, "run-benchmark-script"]], "See quantization data": [[485, "see-quantization-data"]], "How to do diagnosis": [[485, "how-to-do-diagnosis"]], "Parameter description": [[485, "parameter-description"]], "Diagnosis suggestions": [[485, "diagnosis-suggestions"]], "Fallback setting example": [[485, "fallback-setting-example"]], "See profiling data": [[485, "see-profiling-data"]], "Distillation": [[486, "distillation"], [499, "distillation"], [540, "distillation"]], "Knowledge Distillation": [[486, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[486, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[486, "self-distillation"]], "Distillation Support Matrix": [[486, "distillation-support-matrix"]], "Get Started with Distillation API": [[486, "get-started-with-distillation-api"]], "Distillation for Quantization": [[487, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[487, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[487, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[488, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[488, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[488, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[488, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[488, "horovodrun-execution"]], "Security": [[488, "security"]], "PyTorch Examples:": [[488, "pytorch-examples"]], "TensorFlow Examples:": [[488, "tensorflow-examples"]], "Example List": [[489, "example-list"]], "Release Data": [[489, "release-data"]], "Export": [[490, "export"]], "Supported Framework Model Matrix": [[490, "supported-framework-model-matrix"], [501, "supported-framework-model-matrix"], [542, "supported-framework-model-matrix"], [544, "supported-framework-model-matrix"]], "PyTorch Model": [[490, "pytorch-model"]], "FP32 Model Export": [[490, "fp32-model-export"], [490, "id1"]], "INT8 Model Export": [[490, "int8-model-export"], [490, "id2"]], "Tensorflow Model": [[490, "tensorflow-model"]], "Appendix": [[490, "appendix"]], "Supported quantized ops": [[490, "supported-quantized-ops"]], "Frequently Asked Questions": [[491, "frequently-asked-questions"]], "Common Build Issues": [[491, "common-build-issues"]], "Issue 1:": [[491, "issue-1"]], "Issue 2:": [[491, "issue-2"]], "Issue 3:": [[491, "issue-3"]], "Issue 4:": [[491, "issue-4"]], "Framework YAML Configuration Files": [[492, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[492, "get-started-with-framework-yaml-files"]], "Quick Samples": [[493, "quick-samples"]], "Validated Models": [[493, "validated-models"], [547, "validated-models"], [553, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[494, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[494, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[494, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[495, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[496, "prerequisites"], [526, "prerequisites"], [527, "prerequisites"]], "Install from Binary": [[496, "install-from-binary"]], "Install from Source": [[496, "install-from-source"], [521, "install-from-source"]], "Install from AI Kit": [[496, "install-from-ai-kit"]], "System Requirements": [[496, "system-requirements"]], "Validated Hardware Environment": [[496, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[496, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[496, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[496, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[496, "validated-software-environment"]], "Legal Information": [[497, "legal-information"]], "License": [[497, "license"]], "Citation": [[497, "citation"]], "Trademarks": [[497, "trademarks"]], "Metrics": [[498, "metrics"]], "Supported Built-in Metric Matrix": [[498, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[498, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[498, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[498, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[499, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[499, "model-quantization"]], "Post-training Quantization": [[499, "post-training-quantization"]], "Quantization Aware Training": [[499, "quantization-aware-training"], [541, "quantization-aware-training"], [541, "id1"]], "Pruning": [[499, "pruning"], [538, "pruning"], [540, "pruning"]], "Orchestration": [[499, "orchestration"]], "Mixed Precision": [[500, "mixed-precision"]], "Mixed Precision Support Matrix": [[500, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[500, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[500, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[500, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[500, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[500, "get-started-with-mixed-precision-api"]], "Neural Coder": [[502, "neural-coder"], [519, "neural-coder"], [519, "id1"]], "What do we offer?": [[502, "what-do-we-offer"]], "Getting Started!": [[502, "getting-started"], [513, "getting-started"]], "Jupyter Lab Extension": [[502, "jupyter-lab-extension"]], "Python Launcher": [[502, "python-launcher"], [507, "python-launcher"]], "Python API": [[502, "python-api"]], "Contact": [[502, "contact"], [526, "contact"]], "AWS Amazon SageMaker Support": [[503, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[503, "start-jupyter-lab-3"]], "For SageMaker Studio": [[503, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[503, "for-sagemaker-notebook-instance"]], "Installation Guide": [[503, "installation-guide"]], "BigDL Nano Support": [[504, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[505, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[505, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[505, "install-numa-controller"]], "Environment Variables": [[505, "environment-variables"]], "Frequency Governers": [[505, "frequency-governers"]], "Neural Coder as Python API": [[506, "neural-coder-as-python-api"]], "Enable": [[506, "enable"]], "Bench": [[506, "bench"]], "SuperBench": [[506, "superbench"]], "Quick-Start": [[507, "quick-start"]], "Launcher Arguments (Optional)": [[507, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[508, "neural-coder-for-quantization"]], "Features Supported": [[508, "features-supported"]], "Models Supported": [[508, "models-supported"]], "Usage": [[508, "usage"], [528, "usage"], [528, "id2"], [528, "id6"], [528, "id9"], [528, "id16"], [528, "id19"], [528, "id22"], [528, "id25"], [548, "usage"], [548, "id1"], [550, "usage"], [550, "id2"], [550, "id4"], [550, "id6"], [550, "id8"], [550, "id10"], [550, "id12"], [550, "id14"], [550, "id16"], [550, "id18"], [550, "id20"], [550, "id22"]], "PyPI distribution:": [[508, "pypi-distribution"]], "Supported Optimization Features": [[509, "supported-optimization-features"]], "v0.4": [[510, "v0-4"]], "Highlights": [[510, "highlights"]], "Others": [[510, "others"]], "Changelog": [[511, "changelog"], [515, "changelog"]], "neural_compressor_ext_lab": [[512, "neural-compressor-ext-lab"]], "Requirements": [[512, "requirements"], [516, "requirements"], [522, "requirements"], [523, "requirements"], [524, "requirements"], [532, "requirements"]], "Install": [[512, "install"], [516, "install"]], "Uninstall": [[512, "uninstall"], [516, "uninstall"]], "Contributing": [[512, "contributing"], [516, "contributing"]], "Development install": [[512, "development-install"], [516, "development-install"]], "Development uninstall": [[512, "development-uninstall"], [516, "development-uninstall"]], "Packaging the extension": [[512, "packaging-the-extension"], [516, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[513, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[513, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[513, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[513, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[514, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[514, "manual-release"], [517, "manual-release"]], "Python package": [[514, "python-package"], [517, "python-package"]], "NPM package": [[514, "npm-package"], [517, "npm-package"]], "Automated releases with the Jupyter Releaser": [[514, "automated-releases-with-the-jupyter-releaser"], [517, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[514, "publishing-to-conda-forge"], [517, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[516, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[517, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[518, "change-log"]], "[Unreleased]": [[518, "unreleased"]], "Background Introduction": [[519, "background-introduction"]], "Neural Coder Extension in VSCode": [[519, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[519, "neural-coder-extension-usage"]], "1. Open": [[519, "open"]], "2. Search": [[519, "search"]], "3. Setting": [[519, "setting"]], "4. Icon": [[519, "icon"]], "5. optimization (quantization)": [[519, "optimization-quantization"]], "5.1 Enable": [[519, "enable"]], "5.2 Auto": [[519, "auto"]], "Welcome to your VS Code Extension": [[520, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[520, "what-s-in-the-folder"]], "Setup": [[520, "setup"]], "Get up and running straight away": [[520, "get-up-and-running-straight-away"]], "Make changes": [[520, "make-changes"]], "Explore the API": [[520, "explore-the-api"]], "Run tests": [[520, "run-tests"]], "Go further": [[520, "go-further"]], "Neural Insights": [[521, "neural-insights"]], "Start the Neural Insights": [[521, "start-the-neural-insights"]], "Tensor dump examples": [[521, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[521, "step-by-step-diagnosis-example"]], "Research Collaborations": [[521, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[522, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [524, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[522, "preparation"], [523, "preparation"], [524, "preparation"], [546, "preparation"]], "Running the quantization": [[522, "running-the-quantization"], [523, "running-the-quantization"], [524, "running-the-quantization"]], "Analyzing the result of quantization": [[522, "analyzing-the-result-of-quantization"], [524, "analyzing-the-result-of-quantization"]], "Weights summary": [[522, "weights-summary"]], "Activations summary": [[522, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[523, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[523, "source"], [524, "source"]], "Prepare the dataset": [[524, "prepare-the-dataset"]], "Analyzing weight histograms": [[524, "analyzing-weight-histograms"]], "Open Neural Insights": [[524, "open-neural-insights"]], "Getting Started with Create React App": [[525, "getting-started-with-create-react-app"]], "Available Scripts": [[525, "available-scripts"]], "npm start": [[525, "npm-start"]], "npm test": [[525, "npm-test"]], "npm run build": [[525, "npm-run-build"]], "npm run eject": [[525, "npm-run-eject"]], "Learn More": [[525, "learn-more"], [526, "learn-more"]], "Code Splitting": [[525, "code-splitting"]], "Analyzing the Bundle Size": [[525, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[525, "making-a-progressive-web-app"]], "Advanced Configuration": [[525, "advanced-configuration"]], "Deployment": [[525, "deployment"]], "npm run build fails to minify": [[525, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[526, "what-s-neural-solution"]], "Why Neural Solution?": [[526, "why-neural-solution"]], "How does Neural Solution Work?": [[526, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[526, "method-1-using-pip"]], "Method 2. Building from source:": [[526, "method-2-building-from-source"]], "End-to-end examples": [[526, "end-to-end-examples"]], "Get started": [[527, "get-started"]], "Install Neural Solution": [[527, "install-neural-solution"]], "Method 1. Using pip": [[527, "method-1-using-pip"]], "Method 2. Building from source": [[527, "method-2-building-from-source"]], "Start service": [[527, "start-service"]], "Submit task": [[527, "submit-task"]], "Query task status": [[527, "query-task-status"]], "Stop service": [[527, "stop-service"]], "Inspect logs": [[527, "inspect-logs"]], "Manage resource": [[527, "manage-resource"], [532, "manage-resource"], [533, "manage-resource"]], "Node States": [[527, "node-states"]], "Query cluster": [[527, "query-cluster"]], "Add node": [[527, "add-node"]], "Remove node": [[527, "remove-node"]], "Neural Solution API": [[528, "neural-solution-api"]], "Base URL": [[528, "base-url"]], "Endpoints": [[528, "endpoints"]], "GET /": [[528, "get"]], "Description": [[528, "description"], [528, "id1"], [528, "id4"], [528, "id8"], [528, "id12"], [528, "id15"], [528, "id18"], [528, "id21"], [528, "id24"]], "Responses": [[528, "responses"], [528, "id3"], [528, "id7"], [528, "id11"], [528, "id14"], [528, "id17"], [528, "id20"], [528, "id23"], [528, "id26"]], "POST /task/submit": [[528, "post-task-submit"]], "Parameters": [[528, "parameters"], [528, "id5"], [528, "id10"], [528, "id13"]], "GET /task/status/{task_id}": [[528, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[528, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[528, "websocket-task-screen-task-id"]], "GET /ping": [[528, "get-ping"]], "GET /cluster": [[528, "get-cluster"]], "GET /download/{task_id}": [[528, "get-download-task-id"]], "GET /description": [[528, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[529, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[529, "contents"]], "Overview": [[529, "overview"], [551, "overview"]], "Workflow of OaaS": [[529, "workflow-of-oaas"]], "Class definition diagram": [[529, "class-definition-diagram"]], "Extensibility": [[529, "extensibility"]], "Task request description": [[530, "task-request-description"]], "Examples List": [[531, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[532, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[532, "start-the-neural-solution-service"], [533, "start-the-neural-solution-service"], [534, "start-the-neural-solution-service"]], "Submit optimization task": [[532, "submit-optimization-task"], [533, "submit-optimization-task"], [534, "submit-optimization-task"]], "Query optimization result": [[532, "query-optimization-result"], [533, "query-optimization-result"], [534, "query-optimization-result"]], "Download optimized model": [[532, "download-optimized-model"], [533, "download-optimized-model"]], "Stop the service": [[532, "stop-the-service"], [533, "stop-the-service"], [534, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[533, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[534, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[535, "client"]], "Single Objective": [[536, "single-objective"]], "Multiple Objectives": [[536, "multiple-objectives"]], "Objective Support Matrix": [[536, "objective-support-matrix"]], "Get Started with Objective API": [[536, "get-started-with-objective-api"]], "Config Single Objective": [[536, "config-single-objective"]], "Config Multiple Objectives": [[536, "config-multiple-objectives"]], "Optimization Orchestration": [[537, "optimization-orchestration"]], "One-shot": [[537, "one-shot"]], "Orchestration Support Matrix": [[537, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[537, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[538, "neural-network-pruning"]], "Pruning Patterns": [[538, "pruning-patterns"]], "Pruning Criteria": [[538, "pruning-criteria"]], "Pruning Types": [[538, "pruning-types"]], "Pruning Schedules": [[538, "pruning-schedules"]], "Pruning Scope": [[538, "pruning-scope"]], "Sparsity Decay Types": [[538, "sparsity-decay-types"]], "Regularization": [[538, "regularization"]], "Large Language Model Pruning": [[538, "large-language-model-pruning"]], "Pruning Support Matrix": [[538, "pruning-support-matrix"]], "Get Started with Pruning API": [[538, "get-started-with-pruning-api"]], "Training-aware pruning API": [[538, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[538, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[538, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[538, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[539, "full-publications-events-78"]], "2023 (24)": [[539, "id1"]], "2022 (35)": [[539, "id2"]], "2021 (15)": [[539, "id3"]], "2018 - 2020 (4)": [[539, "id4"]], "Pythonic Style Access for Configurations": [[540, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[540, "pythonic-api-for-user-configurations"], [540, "id1"]], "Pythonic API for Framework Configurations": [[540, "pythonic-api-for-framework-configurations"], [540, "id2"]], "Get Started with Pythonic API for Configurations": [[540, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[540, "nas"]], "Quantization Introduction": [[541, "quantization-introduction"]], "Quantization Fundamentals": [[541, "quantization-fundamentals"], [547, "quantization-fundamentals"]], "Quantization Support Matrix": [[541, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[541, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[541, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[541, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[541, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[541, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[541, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[541, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[541, "post-training-quantization"]], "Specify Quantization Rules": [[541, "specify-quantization-rules"]], "Specify Quantization Recipes": [[541, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[541, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[542, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[542, "pytorch-framework-example"]], "ONNX Runtime framework example": [[542, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[543, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[543, "tensorflow"]], "Weight Only Quantization (WOQ)": [[544, "weight-only-quantization-woq"]], "Quantization Capability": [[544, "quantization-capability"]], "Export Compressed Model": [[544, "export-compressed-model"]], "User Code Example": [[544, "user-code-example"]], "WOQ Algorithms Tuning": [[544, "woq-algorithms-tuning"]], "User code example": [[544, "id1"]], "Release": [[545, "release"]], "Release Notes": [[545, "release-notes"]], "Known Issues": [[545, "known-issues"]], "Incompatible Changes": [[545, "incompatible-changes"]], "SigOpt Strategy": [[546, "sigopt-strategy"]], "SigOpt Platform": [[546, "sigopt-platform"]], "Neural Compressor Configuration": [[546, "neural-compressor-configuration"]], "Performance": [[546, "performance"]], "Benefit of SigOpt Strategy": [[546, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[546, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[547, "smooth-quant"]], "Per-tensor & Per-channel": [[547, "per-tensor-per-channel"]], "Per-tensor example": [[547, "per-tensor-example"]], "Per-channel example": [[547, "per-channel-example"]], "Matmul quantization example": [[547, "matmul-quantization-example"]], "Per-channel limitation": [[547, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[547, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[547, "smoothquant"]], "Our enhancement:": [[547, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[547, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[547, "engineering"]], "Supported Framework Matrix": [[547, "supported-framework-matrix"]], "TensorBoard": [[548, "tensorboard"]], "Get Started with TensorBoard": [[548, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[548, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[548, "tensorflow-tensorboard"]], "PyTorch Examples": [[548, "pytorch-examples"]], "TensorFlow Examples": [[548, "tensorflow-examples"]], "Transform": [[549, "transform"]], "Transform Support List": [[549, "transform-support-list"]], "Pytorch": [[549, "pytorch"]], "Tuning Strategies": [[550, "tuning-strategies"]], "Strategy Design": [[550, "strategy-design"]], "Tuning Space": [[550, "tuning-space"]], "Exit Policy": [[550, "exit-policy"]], "Accuracy Criteria": [[550, "accuracy-criteria"]], "Tuning Process": [[550, "tuning-process"]], "Tuning Algorithms": [[550, "tuning-algorithms"]], "Auto": [[550, "auto"]], "Conservative Tuning": [[550, "conservative-tuning"]], "Basic": [[550, "basic"]], "MSE": [[550, "mse"]], "MSE_V2": [[550, "mse-v2"]], "HAWQ_V2": [[550, "hawq-v2"]], "Bayesian": [[550, "bayesian"]], "Exhaustive": [[550, "exhaustive"]], "Random": [[550, "random"]], "SigOpt": [[550, "sigopt"]], "TPE": [[550, "tpe"]], "Distributed Tuning": [[550, "distributed-tuning"]], "Customize a New Tuning Strategy": [[550, "customize-a-new-tuning-strategy"]], "User Guide": [[551, "user-guide"]], "Python-based APIs": [[551, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[551, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[551, "advanced-topics"]], "Innovations for Productivity": [[551, "innovations-for-productivity"]], "User YAML Configuration Files": [[552, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[552, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[553, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[553, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[553, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[553, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[553, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[553, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[553, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[553, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[553, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[553, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[553, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround"], [151, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [152, "module-neural_compressor.adaptor.torch_utils.awq"], [153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [154, "module-neural_compressor.adaptor.torch_utils.gptq"], [155, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [156, "module-neural_compressor.adaptor.torch_utils"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [162, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [163, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [164, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [165, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [166, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [167, "module-neural_compressor.adaptor.torch_utils.teq"], [168, "module-neural_compressor.adaptor.torch_utils.util"], [169, "module-neural_compressor.adaptor.torch_utils.weight_only"], [170, "module-neural_compressor.algorithm.algorithm"], [171, "module-neural_compressor.algorithm.fast_bias_correction"], [172, "module-neural_compressor.algorithm"], [173, "module-neural_compressor.algorithm.smooth_quant"], [174, "module-neural_compressor.algorithm.weight_correction"], [175, "module-neural_compressor.benchmark"], [176, "module-neural_compressor.common.base_config"], [177, "module-neural_compressor.common"], [178, "module-neural_compressor.common.logger"], [179, "module-neural_compressor.common.utility"], [180, "module-neural_compressor.compression.callbacks"], [181, "module-neural_compressor.compression.distillation.criterions"], [182, "module-neural_compressor.compression.distillation"], [183, "module-neural_compressor.compression.distillation.optimizers"], [184, "module-neural_compressor.compression.distillation.utility"], [185, "module-neural_compressor.compression.hpo"], [186, "module-neural_compressor.compression.hpo.sa_optimizer"], [187, "module-neural_compressor.compression.hpo.search_algorithms"], [188, "module-neural_compressor.compression.hpo.search_space"], [189, "module-neural_compressor.compression"], [190, "module-neural_compressor.compression.pruner.criteria"], [191, "module-neural_compressor.compression.pruner"], [192, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [193, "module-neural_compressor.compression.pruner.model_slim"], [194, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [195, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [196, "module-neural_compressor.compression.pruner.patterns.base"], [197, "module-neural_compressor.compression.pruner.patterns"], [198, "module-neural_compressor.compression.pruner.patterns.mha"], [199, "module-neural_compressor.compression.pruner.patterns.ninm"], [200, "module-neural_compressor.compression.pruner.patterns.nxm"], [201, "module-neural_compressor.compression.pruner.pruners.base"], [202, "module-neural_compressor.compression.pruner.pruners.basic"], [203, "module-neural_compressor.compression.pruner.pruners.block_mask"], [204, "module-neural_compressor.compression.pruner.pruners"], [205, "module-neural_compressor.compression.pruner.pruners.mha"], [206, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [207, "module-neural_compressor.compression.pruner.pruners.progressive"], [208, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [209, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [210, "module-neural_compressor.compression.pruner.pruning"], [211, "module-neural_compressor.compression.pruner.regs"], [212, "module-neural_compressor.compression.pruner.schedulers"], [213, "module-neural_compressor.compression.pruner.tf_criteria"], [214, "module-neural_compressor.compression.pruner.utils"], [215, "module-neural_compressor.conf.config"], [216, "module-neural_compressor.conf.dotdict"], [217, "module-neural_compressor.conf"], [218, "module-neural_compressor.conf.pythonic_config"], [219, "module-neural_compressor.config"], [220, "module-neural_compressor.contrib"], [221, "module-neural_compressor.contrib.strategy"], [222, "module-neural_compressor.contrib.strategy.sigopt"], [223, "module-neural_compressor.contrib.strategy.tpe"], [224, "module-neural_compressor.data.dataloaders.base_dataloader"], [225, "module-neural_compressor.data.dataloaders.dataloader"], [226, "module-neural_compressor.data.dataloaders.default_dataloader"], [227, "module-neural_compressor.data.dataloaders.fetcher"], [228, "module-neural_compressor.data.dataloaders"], [229, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [230, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [231, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [232, "module-neural_compressor.data.dataloaders.sampler"], [233, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [234, "module-neural_compressor.data.datasets.bert_dataset"], [235, "module-neural_compressor.data.datasets.coco_dataset"], [236, "module-neural_compressor.data.datasets.dataset"], [237, "module-neural_compressor.data.datasets.dummy_dataset"], [238, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [239, "module-neural_compressor.data.datasets.imagenet_dataset"], [240, "module-neural_compressor.data.datasets"], [241, "module-neural_compressor.data.datasets.style_transfer_dataset"], [242, "module-neural_compressor.data.filters.coco_filter"], [243, "module-neural_compressor.data.filters.filter"], [244, "module-neural_compressor.data.filters"], [245, "module-neural_compressor.data"], [246, "module-neural_compressor.data.transforms.coco_transform"], [247, "module-neural_compressor.data.transforms.imagenet_transform"], [248, "module-neural_compressor.data.transforms"], [249, "module-neural_compressor.data.transforms.postprocess"], [250, "module-neural_compressor.data.transforms.tokenization"], [251, "module-neural_compressor.data.transforms.transform"], [252, "module-neural_compressor.experimental.benchmark"], [253, "module-neural_compressor.experimental.common.criterion"], [254, "module-neural_compressor.experimental.common.dataloader"], [255, "module-neural_compressor.experimental.common"], [256, "module-neural_compressor.experimental.common.metric"], [257, "module-neural_compressor.experimental.common.model"], [258, "module-neural_compressor.experimental.common.optimizer"], [259, "module-neural_compressor.experimental.common.postprocess"], [260, "module-neural_compressor.experimental.common.torch_utils"], [261, "module-neural_compressor.experimental.component"], [262, "module-neural_compressor.experimental.compression"], [263, "module-neural_compressor.experimental.contrib"], [264, "module-neural_compressor.experimental.contrib.strategy"], [265, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [266, "module-neural_compressor.experimental.contrib.strategy.tpe"], [267, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [268, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [269, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [270, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [271, "module-neural_compressor.experimental.data.dataloaders"], [272, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [273, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [274, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [275, "module-neural_compressor.experimental.data.dataloaders.sampler"], [276, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [277, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [278, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [279, "module-neural_compressor.experimental.data.datasets.dataset"], [280, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [281, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [282, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [283, "module-neural_compressor.experimental.data.datasets"], [284, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [285, "module-neural_compressor.experimental.data.filters.coco_filter"], [286, "module-neural_compressor.experimental.data.filters.filter"], [287, "module-neural_compressor.experimental.data.filters"], [288, "module-neural_compressor.experimental.data"], [289, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [290, "module-neural_compressor.experimental.data.transforms"], [291, "module-neural_compressor.experimental.data.transforms.tokenization"], [292, "module-neural_compressor.experimental.data.transforms.transform"], [293, "module-neural_compressor.experimental.distillation"], [294, "module-neural_compressor.experimental.export"], [295, "module-neural_compressor.experimental.export.qlinear2qdq"], [296, "module-neural_compressor.experimental.export.tf2onnx"], [297, "module-neural_compressor.experimental.export.torch2onnx"], [298, "module-neural_compressor.experimental.graph_optimization"], [299, "module-neural_compressor.experimental"], [300, "module-neural_compressor.experimental.metric.bleu"], [301, "module-neural_compressor.experimental.metric.bleu_util"], [302, "module-neural_compressor.experimental.metric.coco_label_map"], [303, "module-neural_compressor.experimental.metric.coco_tools"], [304, "module-neural_compressor.experimental.metric.evaluate_squad"], [305, "module-neural_compressor.experimental.metric.f1"], [306, "module-neural_compressor.experimental.metric"], [307, "module-neural_compressor.experimental.metric.metric"], [308, "module-neural_compressor.experimental.mixed_precision"], [309, "module-neural_compressor.experimental.model_conversion"], [310, "module-neural_compressor.experimental.nas.basic_nas"], [311, "module-neural_compressor.experimental.nas.dynas"], [312, "module-neural_compressor.experimental.nas"], [313, "module-neural_compressor.experimental.nas.nas"], [314, "module-neural_compressor.experimental.nas.nas_utils"], [315, "module-neural_compressor.experimental.nas.search_algorithms"], [316, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [317, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [318, "module-neural_compressor.experimental.pruner_legacy"], [319, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [320, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [321, "module-neural_compressor.experimental.pruner_legacy.pruner"], [322, "module-neural_compressor.experimental.pruning"], [323, "module-neural_compressor.experimental.pruning_recipes"], [324, "module-neural_compressor.experimental.pruning_recipes.patterns"], [325, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [326, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [327, "module-neural_compressor.experimental.pruning_v2"], [328, "module-neural_compressor.experimental.pytorch_pruner"], [329, "module-neural_compressor.experimental.pytorch_pruner.logger"], [330, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [331, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [332, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [333, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [334, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [335, "module-neural_compressor.experimental.quantization"], [336, "module-neural_compressor.experimental.scheduler"], [337, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [338, "module-neural_compressor.experimental.strategy.basic"], [339, "module-neural_compressor.experimental.strategy.bayesian"], [340, "module-neural_compressor.experimental.strategy.exhaustive"], [341, "module-neural_compressor.experimental.strategy"], [342, "module-neural_compressor.experimental.strategy.mse"], [343, "module-neural_compressor.experimental.strategy.mse_v2"], [344, "module-neural_compressor.experimental.strategy.random"], [345, "module-neural_compressor.experimental.strategy.strategy"], [346, "module-neural_compressor.experimental.strategy.utils.constant"], [347, "module-neural_compressor.experimental.strategy.utils"], [348, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [349, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [350, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [351, "module-neural_compressor.experimental.strategy.utils.utility"], [352, "module-neural_compressor"], [353, "module-neural_compressor.metric.bleu"], [354, "module-neural_compressor.metric.bleu_util"], [355, "module-neural_compressor.metric.coco_label_map"], [356, "module-neural_compressor.metric.coco_tools"], [357, "module-neural_compressor.metric.evaluate_squad"], [358, "module-neural_compressor.metric.f1"], [359, "module-neural_compressor.metric"], [360, "module-neural_compressor.metric.metric"], [361, "module-neural_compressor.mix_precision"], [362, "module-neural_compressor.model.base_model"], [363, "module-neural_compressor.model"], [364, "module-neural_compressor.model.keras_model"], [365, "module-neural_compressor.model.model"], [366, "module-neural_compressor.model.mxnet_model"], [367, "module-neural_compressor.model.nets_factory"], [368, "module-neural_compressor.model.onnx_model"], [369, "module-neural_compressor.model.tensorflow_model"], [370, "module-neural_compressor.model.torch_model"], [371, "module-neural_compressor.objective"], [372, "module-neural_compressor.profiling"], [373, "module-neural_compressor.profiling.parser.factory"], [374, "module-neural_compressor.profiling.parser"], [375, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [376, "module-neural_compressor.profiling.parser.onnx_parser"], [377, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [378, "module-neural_compressor.profiling.parser.parser"], [379, "module-neural_compressor.profiling.parser.result"], [380, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [381, "module-neural_compressor.profiling.parser.tensorflow_parser"], [382, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [383, "module-neural_compressor.profiling.profiler.factory"], [384, "module-neural_compressor.profiling.profiler"], [385, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [386, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [387, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [389, "module-neural_compressor.profiling.profiler.profiler"], [390, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [391, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [392, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [394, "module-neural_compressor.quantization"], [395, "module-neural_compressor.strategy.auto"], [396, "module-neural_compressor.strategy.auto_mixed_precision"], [397, "module-neural_compressor.strategy.basic"], [398, "module-neural_compressor.strategy.bayesian"], [399, "module-neural_compressor.strategy.conservative"], [400, "module-neural_compressor.strategy.exhaustive"], [401, "module-neural_compressor.strategy.hawq_v2"], [402, "module-neural_compressor.strategy"], [403, "module-neural_compressor.strategy.mse"], [404, "module-neural_compressor.strategy.mse_v2"], [405, "module-neural_compressor.strategy.random"], [406, "module-neural_compressor.strategy.strategy"], [407, "module-neural_compressor.strategy.utils.constant"], [408, "module-neural_compressor.strategy.utils"], [409, "module-neural_compressor.strategy.utils.tuning_sampler"], [410, "module-neural_compressor.strategy.utils.tuning_space"], [411, "module-neural_compressor.strategy.utils.tuning_structs"], [412, "module-neural_compressor.strategy.utils.utility"], [413, "module-neural_compressor.template.api_doc_example"], [414, "module-neural_compressor.template"], [415, "module-neural_compressor.tensorflow.algorithms"], [416, "module-neural_compressor.tensorflow.algorithms.static_quantize"], [417, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"], [418, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"], [419, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"], [420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"], [421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"], [422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"], [423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"], [424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"], [425, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"], [426, "module-neural_compressor.tensorflow"], [427, "module-neural_compressor.tensorflow.quantization.config"], [428, "module-neural_compressor.tensorflow.quantization"], [429, "module-neural_compressor.tensorflow.quantization.quantize"], [430, "module-neural_compressor.tensorflow.utils"], [431, "module-neural_compressor.torch.algorithms"], [432, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [433, "module-neural_compressor.torch.algorithms.weight_only"], [434, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [435, "module-neural_compressor.torch.algorithms.weight_only_algos"], [436, "module-neural_compressor.torch"], [437, "module-neural_compressor.torch.quantization.config"], [438, "module-neural_compressor.torch.quantization"], [439, "module-neural_compressor.torch.quantization.modules"], [440, "module-neural_compressor.torch.quantization.quantize"], [441, "module-neural_compressor.torch.utils"], [442, "module-neural_compressor.training"], [443, "module-neural_compressor.utils.collect_layer_histogram"], [444, "module-neural_compressor.utils.constant"], [445, "module-neural_compressor.utils.create_obj_from_config"], [446, "module-neural_compressor.utils"], [447, "module-neural_compressor.utils.kl_divergence"], [448, "module-neural_compressor.utils.load_huggingface"], [449, "module-neural_compressor.utils.logger"], [450, "module-neural_compressor.utils.neural_insights_utils"], [451, "module-neural_compressor.utils.options"], [452, "module-neural_compressor.utils.pytorch"], [453, "module-neural_compressor.utils.utility"], [454, "module-neural_compressor.utils.weights_details"], [455, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[151, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[151, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[152, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[152, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[153, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[153, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[153, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[154, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[155, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[156, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[162, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[162, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[163, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[163, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[163, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[163, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[164, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[164, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[165, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[165, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[165, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[165, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[166, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[166, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[166, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[167, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[167, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[168, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[169, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[170, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[171, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[171, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[172, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[173, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[173, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[174, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[174, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[175, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[176, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[176, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[176, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[176, "neural_compressor.common.base_config.register_config"]], "neural_compressor.common": [[177, "module-neural_compressor.common"]], "logger (class in neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.Logger"]], "debug() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.debug"]], "error() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.error"]], "fatal() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.fatal"]], "info() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.info"]], "log() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.log"]], "neural_compressor.common.logger": [[178, "module-neural_compressor.common.logger"]], "warn() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.warn"]], "warning() (in module neural_compressor.common.logger)": [[178, "neural_compressor.common.logger.warning"]], "neural_compressor.common.utility": [[179, "module-neural_compressor.common.utility"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[180, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[180, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[180, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[180, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[180, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[180, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[180, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[180, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[180, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[181, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[181, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[182, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[183, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[183, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[184, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[184, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[184, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[185, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[186, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[187, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[187, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[187, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[187, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[187, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[187, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[187, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[188, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[188, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[188, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[188, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[188, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[188, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[189, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[190, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[190, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[190, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[191, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[191, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[191, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[192, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[192, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[192, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[192, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[192, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[192, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[192, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[193, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[194, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[194, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[195, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[195, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[196, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[196, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[196, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[197, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[197, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[198, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[198, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[198, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[198, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[199, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[199, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[199, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[199, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[200, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[200, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[200, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[200, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[200, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[201, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[201, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[202, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[202, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[202, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[203, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[203, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[204, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[204, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[204, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[205, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[205, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[206, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[206, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[207, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[207, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[208, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[208, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[209, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[209, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[210, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[210, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[210, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[210, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[210, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[210, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[210, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[211, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[211, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[211, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[211, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[211, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[211, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[211, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[211, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[212, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[212, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[212, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[212, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[212, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[212, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[212, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[213, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[213, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[213, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[213, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[213, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[213, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[213, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[214, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[214, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[215, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[215, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[216, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[216, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[216, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[216, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[217, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[218, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[218, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[219, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[219, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[219, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[219, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[219, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[219, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[219, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[219, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[219, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[219, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[219, "module-neural_compressor.config"]], "neural_compressor.contrib": [[220, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[221, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[222, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[222, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[223, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[223, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[224, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[225, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[225, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[225, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[226, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[226, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[227, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[227, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[227, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[227, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[228, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[229, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[231, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[232, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[232, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[232, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[232, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[232, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[234, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[234, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[235, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[235, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[235, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[235, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[235, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[236, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[236, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[237, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[237, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[239, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[239, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[239, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[239, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[239, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[239, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[240, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[241, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[242, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[242, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[242, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[243, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[243, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[244, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[245, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[246, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[246, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[247, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[247, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[248, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[249, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[249, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[250, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[250, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TRANSFORMS"], [251, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[251, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[251, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[252, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[252, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[253, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[253, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[254, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[254, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[255, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[256, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[256, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[257, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[257, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[257, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[258, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[258, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[259, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[259, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[260, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[260, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[260, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[261, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[261, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[262, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[263, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[264, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[265, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[265, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[266, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[266, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[267, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[267, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[268, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[270, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[270, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[270, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[270, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[271, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[272, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[273, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[274, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[274, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[275, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[275, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[275, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[275, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[275, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[276, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[276, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[276, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[276, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[276, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[277, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[277, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[278, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[278, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[278, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[278, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[278, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[279, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[279, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[280, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[280, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[281, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[281, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[281, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[282, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[282, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[282, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[282, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[282, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[282, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[282, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[283, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[284, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[284, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[285, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[285, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[285, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[286, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[286, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[287, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[288, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[289, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[289, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[290, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[291, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[291, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [292, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[292, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[292, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[293, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[293, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[293, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[293, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[293, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[293, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[294, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[295, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[295, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[295, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[296, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[296, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[296, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[297, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[297, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[297, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[297, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[297, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[297, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[297, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[298, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[298, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[299, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[300, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[300, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[300, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[300, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[300, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[300, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[300, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[300, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[300, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[301, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[301, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[302, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[303, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[303, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[303, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[303, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[303, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[303, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[303, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[303, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[304, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[304, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[304, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[304, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[304, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[305, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[305, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[305, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[305, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[305, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[306, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[307, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[307, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[307, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[307, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[307, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[307, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[307, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[307, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[307, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[307, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[307, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[307, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[307, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[307, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[307, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[307, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[307, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[307, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[307, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[307, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[307, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[307, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[307, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[307, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[307, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[307, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[308, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[308, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[309, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[309, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[310, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[310, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[311, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[311, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[312, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[313, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[313, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[313, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[314, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[314, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[314, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[314, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[315, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[315, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[315, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[315, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[315, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[316, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[316, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[317, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[317, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[318, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[319, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[319, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[320, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[320, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[321, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[321, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[321, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[322, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[322, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[322, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[322, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[322, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[323, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[324, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[325, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[325, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[325, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[325, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[325, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[326, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[327, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[327, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[327, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[327, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[327, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[328, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[329, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[330, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[330, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[331, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[331, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[331, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[331, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[331, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[331, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[331, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[332, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[332, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[333, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[333, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[334, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[334, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[334, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[334, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[334, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[334, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[334, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[335, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[335, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[336, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[336, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[337, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[337, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[338, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[338, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[339, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[339, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[339, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[339, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[339, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[340, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[340, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[341, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[342, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[342, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[343, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[343, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[344, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[344, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[345, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[345, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[345, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[346, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[347, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[348, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[348, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[349, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[349, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[349, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[349, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[349, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[349, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[349, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[350, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[350, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[351, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[351, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[351, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[351, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[351, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[352, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[353, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[353, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[353, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[353, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[353, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[353, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[353, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[353, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[353, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[354, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[354, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[355, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[356, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[356, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[356, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[356, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[356, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[356, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[356, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[356, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[357, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[357, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[357, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[357, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[357, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[358, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[358, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[358, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[358, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[358, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[359, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[360, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[360, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[360, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[360, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[360, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[360, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[360, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[360, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[360, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[360, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[360, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[360, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[360, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[360, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[360, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[360, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[360, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[360, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[360, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[360, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[360, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[360, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[360, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[360, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[360, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[360, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[361, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[361, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[362, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[362, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[363, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[364, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[364, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[365, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[365, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[365, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[366, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[366, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[367, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[367, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[368, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[368, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[369, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[369, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[370, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[370, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[370, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[370, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[370, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[371, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[371, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[371, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[371, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[371, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[371, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[371, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[371, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[371, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[372, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[373, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[373, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[374, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[375, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[375, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[376, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[377, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[377, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[378, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[378, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[379, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[379, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[380, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[380, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[381, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[382, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[382, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[383, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[383, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[384, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[385, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[385, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[386, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[387, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[387, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[388, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[389, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[389, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[390, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[390, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[391, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[392, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[392, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[393, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[393, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[393, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[394, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[394, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[395, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[395, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[396, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[396, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[397, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[397, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[398, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[398, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[398, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[398, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[398, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[399, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[399, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[400, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[400, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[401, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[401, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[402, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[403, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[403, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[404, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[404, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[405, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[405, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[406, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[406, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[406, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[406, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[407, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[408, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[409, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[409, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[410, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[410, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[410, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[410, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[410, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[410, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[410, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[411, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[411, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[412, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[412, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[413, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[413, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[413, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[413, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[413, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[414, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[415, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[416, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[417, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[417, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[417, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[418, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[419, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "parse_to_keras_tune_cfg() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[425, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.parse_to_keras_tune_cfg"]], "static_quantize_entry() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[425, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.static_quantize_entry"]], "update_config() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[425, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.update_config"]], "neural_compressor.tensorflow": [[426, "module-neural_compressor.tensorflow"]], "backend (class in neural_compressor.tensorflow.quantization.config)": [[427, "neural_compressor.tensorflow.quantization.config.Backend"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[427, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.quantization.config)": [[427, "neural_compressor.tensorflow.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[427, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[427, "module-neural_compressor.tensorflow.quantization.config"]], "parse_config_from_dict() (in module neural_compressor.tensorflow.quantization.config)": [[427, "neural_compressor.tensorflow.quantization.config.parse_config_from_dict"]], "neural_compressor.tensorflow.quantization": [[428, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[429, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[429, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "deep_get() (in module neural_compressor.tensorflow.utils)": [[430, "neural_compressor.tensorflow.utils.deep_get"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils)": [[430, "neural_compressor.tensorflow.utils.dump_elapsed_time"]], "neural_compressor.tensorflow.utils": [[430, "module-neural_compressor.tensorflow.utils"]], "register_algo() (in module neural_compressor.tensorflow.utils)": [[430, "neural_compressor.tensorflow.utils.register_algo"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils)": [[430, "neural_compressor.tensorflow.utils.version1_gte_version2"]], "neural_compressor.torch.algorithms": [[431, "module-neural_compressor.torch.algorithms"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "apply_gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.apply_gptq_quantize"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[432, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[432, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only": [[433, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[434, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[434, "neural_compressor.torch.algorithms.weight_only.rtn.search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[435, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "rtn_quantize_entry() (in module neural_compressor.torch.algorithms.weight_only_algos)": [[435, "neural_compressor.torch.algorithms.weight_only_algos.rtn_quantize_entry"]], "neural_compressor.torch": [[436, "module-neural_compressor.torch"]], "backend (class in neural_compressor.torch.quantization.config)": [[437, "neural_compressor.torch.quantization.config.Backend"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[437, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnweightquantconfig (class in neural_compressor.torch.quantization.config)": [[437, "neural_compressor.torch.quantization.config.RTNWeightQuantConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[437, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[437, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[437, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[438, "module-neural_compressor.torch.quantization"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.quantization.modules)": [[439, "neural_compressor.torch.quantization.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.quantization.modules)": [[439, "neural_compressor.torch.quantization.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.quantization.modules)": [[439, "neural_compressor.torch.quantization.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.modules": [[439, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[440, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[440, "neural_compressor.torch.quantization.quantize.quantize"]], "fetch_module() (in module neural_compressor.torch.utils)": [[441, "neural_compressor.torch.utils.fetch_module"]], "neural_compressor.torch.utils": [[441, "module-neural_compressor.torch.utils"]], "register_algo() (in module neural_compressor.torch.utils)": [[441, "neural_compressor.torch.utils.register_algo"]], "set_module() (in module neural_compressor.torch.utils)": [[441, "neural_compressor.torch.utils.set_module"]], "callbacks (class in neural_compressor.training)": [[442, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[442, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[442, "neural_compressor.training.fit"]], "neural_compressor.training": [[442, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[442, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[443, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[443, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[444, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[445, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[445, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[446, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[447, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[447, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[448, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[448, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[448, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[448, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[449, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[449, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[450, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[450, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[450, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[450, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[450, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[451, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[451, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[452, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[452, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[452, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[452, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[452, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[453, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[453, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[454, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[454, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[454, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[455, "module-neural_compressor.version"]]}})