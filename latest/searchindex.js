Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/rtn_quantize/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/rtn_quantize/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.rtn_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 161, 165, 166, 186, 196, 199, 204, 210, 326, 367, 409, 471, 512, 514, 519, 522, 525], "mask": [0, 186, 192, 194, 197, 199, 203, 204, 230, 273, 299, 328, 352, 514, 528], "adaptor_registri": [1, 439], "cl": [1, 158, 167, 177, 179, 183, 184, 192, 197, 206, 207, 208, 232, 239, 247, 249, 254, 275, 282, 288, 310, 317, 321, 326, 328, 330, 341, 356, 367, 402, 429], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 179, 180, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 285, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 406, 407, 408, 409, 414, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 438, 473, 475, 488, 490, 492, 493, 495, 515], "The": [1, 3, 11, 14, 16, 34, 53, 74, 113, 119, 121, 140, 148, 157, 159, 165, 167, 172, 173, 176, 177, 179, 183, 184, 186, 190, 192, 194, 195, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 230, 231, 232, 233, 234, 238, 239, 247, 249, 252, 254, 257, 261, 262, 263, 273, 274, 275, 276, 277, 281, 282, 288, 289, 294, 296, 297, 298, 300, 301, 303, 305, 306, 307, 309, 310, 312, 313, 315, 316, 317, 318, 321, 323, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 345, 347, 349, 350, 351, 353, 354, 356, 357, 365, 367, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 406, 408, 409, 416, 417, 418, 419, 421, 423, 424, 428, 429, 430, 433, 435, 436, 439, 440, 441, 442, 444, 448, 451, 454, 456, 457, 458, 459, 461, 462, 464, 466, 468, 470, 471, 472, 474, 475, 476, 477, 480, 481, 483, 486, 488, 489, 490, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528], "decor": [1, 16, 34, 67, 68, 70, 148, 167, 173, 179, 183, 184, 192, 197, 206, 208, 247, 254, 288, 303, 310, 317, 321, 326, 328, 330, 341, 344, 356, 367, 402, 417, 429, 435, 436, 439, 525], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 152, 157, 159, 165, 166, 172, 177, 179, 183, 184, 186, 190, 192, 197, 201, 202, 206, 208, 209, 211, 212, 214, 215, 218, 219, 228, 229, 230, 231, 232, 233, 234, 237, 246, 247, 248, 249, 254, 261, 262, 271, 272, 273, 274, 275, 276, 277, 280, 287, 288, 292, 293, 294, 296, 297, 299, 303, 304, 305, 310, 317, 318, 321, 323, 326, 328, 329, 330, 331, 332, 335, 338, 341, 344, 345, 349, 350, 352, 356, 367, 384, 389, 390, 394, 397, 399, 402, 406, 408, 409, 417, 418, 419, 420, 421, 422, 429, 433, 434, 435, 436, 439, 440, 456, 457, 459, 461, 462, 463, 464, 466, 468, 470, 472, 473, 475, 476, 477, 478, 479, 480, 482, 483, 486, 488, 490, 492, 493, 495, 497, 498, 499, 500, 501, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528], "regist": [1, 16, 34, 155, 157, 167, 173, 177, 179, 183, 184, 186, 187, 192, 193, 197, 200, 206, 207, 208, 209, 232, 239, 247, 249, 254, 275, 282, 288, 303, 310, 317, 321, 326, 328, 330, 341, 344, 356, 367, 402, 408, 417, 426, 436, 439, 459, 464, 474, 475, 496, 512, 522, 525], "all": [1, 13, 16, 34, 44, 45, 63, 97, 151, 157, 158, 165, 166, 167, 169, 172, 173, 176, 179, 184, 187, 192, 200, 210, 214, 215, 220, 221, 228, 232, 239, 247, 248, 254, 257, 263, 271, 275, 282, 288, 293, 296, 299, 301, 303, 310, 317, 321, 322, 326, 332, 341, 344, 349, 352, 354, 356, 358, 367, 402, 408, 421, 429, 433, 434, 438, 439, 440, 441, 458, 459, 464, 468, 472, 475, 478, 486, 489, 490, 493, 494, 495, 496, 497, 500, 501, 503, 504, 508, 509, 510, 513, 514, 515, 517, 518, 519, 522, 524, 525], "subclass": [1, 16, 34, 167, 179, 183, 184, 192, 197, 206, 208, 225, 229, 232, 239, 247, 254, 268, 272, 275, 282, 288, 303, 310, 317, 321, 326, 328, 330, 341, 344, 356, 367, 402, 439], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 152, 157, 158, 162, 163, 165, 166, 167, 172, 173, 176, 177, 179, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 229, 230, 232, 239, 243, 247, 249, 254, 261, 262, 272, 273, 275, 282, 285, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 301, 303, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 323, 326, 327, 328, 329, 330, 331, 335, 341, 345, 347, 349, 350, 352, 353, 354, 356, 357, 361, 365, 367, 384, 389, 390, 394, 402, 406, 408, 409, 416, 417, 418, 421, 425, 426, 428, 429, 435, 440, 458, 459, 462, 464, 471, 474, 475, 489, 495, 496, 497, 498, 503, 508, 509, 514, 517, 519, 520, 521, 522, 524, 525, 527], "framework_specific_info": [1, 3, 11, 14, 45, 47, 439], "base": [1, 13, 14, 16, 34, 46, 47, 86, 105, 116, 120, 122, 132, 144, 152, 155, 161, 165, 167, 173, 176, 183, 184, 185, 186, 187, 193, 200, 207, 209, 215, 220, 223, 228, 230, 232, 239, 247, 257, 263, 266, 271, 273, 275, 282, 288, 303, 309, 311, 317, 318, 321, 323, 328, 338, 341, 345, 356, 358, 365, 366, 367, 399, 402, 406, 436, 438, 439, 440, 441, 459, 463, 464, 468, 475, 476, 483, 484, 486, 495, 498, 503, 506, 509, 510, 514, 515, 517, 519, 521, 522, 523, 525, 528], "framework": [1, 3, 11, 13, 14, 45, 172, 173, 177, 179, 187, 193, 197, 200, 204, 205, 206, 216, 217, 221, 222, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 244, 247, 249, 250, 254, 259, 260, 264, 265, 267, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 288, 294, 303, 304, 331, 339, 345, 356, 357, 358, 359, 361, 400, 406, 421, 438, 439, 441, 457, 461, 464, 465, 469, 470, 471, 472, 474, 475, 476, 497, 498, 514, 515, 517, 520, 523, 524, 525, 526, 527, 528], "layer": [1, 3, 11, 14, 46, 47, 116, 117, 118, 119, 121, 122, 151, 154, 156, 158, 162, 166, 170, 177, 180, 188, 190, 191, 192, 196, 201, 210, 214, 215, 249, 256, 326, 327, 419, 421, 429, 439, 440, 441, 463, 471, 498, 514, 520], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 150, 152, 153, 154, 163, 178, 185, 187, 214, 215, 256, 295, 297, 327, 337, 348, 350, 382, 387, 398, 440, 441, 442, 457, 464, 475, 478, 498, 514, 517, 522, 525, 526], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 190, 191, 196, 214, 215, 243, 285, 326, 384, 389, 435, 456, 458, 461, 466, 495, 501, 514, 517, 519, 522, 524, 525], "activ": [2, 17, 29, 44, 141, 149, 165, 166, 180, 214, 215, 256, 345, 406, 408, 439, 440, 441, 457, 461, 463, 468, 475, 496, 497, 500, 508, 509, 510, 516, 517, 519, 522, 523, 527], "argmax": [2, 17, 29], "attent": [2, 17, 29, 161, 188, 190, 201, 214, 215, 230, 273, 433, 462, 514], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 170, 214, 215, 435, 440, 441, 475, 514, 516, 517, 525], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 214, 215, 326], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 214, 215], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 52, 59, 65, 73, 94, 109, 128, 137, 196, 214, 215, 326, 468, 498, 519, 525], "maxpool": [2, 17, 29, 129, 138, 468], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 150, 152, 163, 165, 170, 190, 214, 215, 293, 338, 345, 346, 384, 389, 395, 397, 399, 406, 407, 408, 423, 429, 439, 440, 441, 461, 468, 475, 476, 499, 500, 514, 517, 518, 520, 522, 523, 525, 527], "pad": [2, 17, 29, 44, 71, 72, 230, 247, 273, 288, 459, 519, 524], "pool": [2, 17, 29, 505], "reduc": [2, 17, 29, 214, 215, 439, 457, 463, 475, 476, 495, 496, 514, 515, 517, 518, 519, 522, 525, 527], "resiz": [2, 17, 29, 230, 231, 243, 247, 273, 274, 285, 288, 459, 524], "split": [2, 17, 29, 43, 82, 166, 246, 247, 287, 288, 435, 519, 522, 524], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 165, 166, 172, 214, 215, 218, 219, 261, 262, 294, 331, 390, 416, 423, 439, 441, 459, 470, 471, 514, 517, 519, 525, 526, 527], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 151, 152, 153, 154, 158, 159, 160, 162, 164, 165, 166, 170, 172, 176, 214, 215, 218, 219, 243, 250, 257, 261, 262, 285, 293, 294, 295, 305, 332, 338, 344, 348, 395, 397, 399, 408, 418, 419, 423, 428, 429, 439, 446, 458, 459, 464, 465, 468, 470, 471, 474, 477, 478, 483, 485, 486, 489, 502, 504, 505, 507, 513, 515, 520, 523, 524, 525, 526, 527], "smooth_quant": [2, 17, 156, 165, 169, 214, 215, 348, 517, 522], "weight_onli": [2, 17, 215, 428, 519], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 57, 87, 111, 150, 214, 215, 345, 406, 439, 440, 468, 475, 480, 485, 489, 495, 518, 525, 528], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 151, 165, 172, 190, 210, 218, 219, 220, 229, 232, 233, 234, 235, 247, 261, 262, 263, 272, 275, 276, 277, 278, 288, 296, 304, 335, 349, 357, 385, 390, 394, 409, 414, 418, 434, 435, 439, 441, 458, 462, 474, 475, 476, 478, 483, 488, 490, 492, 493, 495, 497, 498, 512, 514, 515, 517, 518, 519, 522, 523, 524, 525], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 166, 171, 172, 214, 215, 243, 285, 291, 292, 293, 345, 347, 406, 408, 428, 429, 434, 435, 438, 439, 440, 441, 456, 459, 463, 468, 475, 476, 480, 483, 485, 486, 489, 495, 498, 500, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 170, 214, 215, 226, 269, 291, 292, 293, 357, 364, 384, 427, 434, 438, 439, 440, 442, 458, 461, 465, 466, 468, 469, 471, 476, 477, 480, 485, 486, 498, 515, 516, 519, 520, 522, 525], "qdq": [2, 42, 87, 111, 112, 113, 142, 165, 166, 214, 215, 291, 292, 293, 439, 461, 466, 471, 485, 486, 517, 520, 522], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 163, 215, 305, 365, 463, 464, 471, 475, 517], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 251, 295, 348, 519, 522], "layer_wise_qu": [2, 153, 215, 519], "modified_pickl": [2, 153, 154], "torch_load": [2, 153, 154], "bf16_convert": [2, 51, 87, 111, 153], "hawq_metr": [2, 153], "model_wrapp": [2, 15, 153], "pattern_detector": [2, 153], "symbolic_trac": [2, 153], "tensorflow": [2, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 177, 179, 209, 214, 215, 229, 230, 231, 232, 235, 237, 239, 247, 254, 272, 273, 274, 275, 278, 280, 282, 288, 292, 293, 294, 297, 299, 303, 304, 305, 331, 339, 350, 352, 356, 357, 365, 383, 384, 388, 389, 390, 400, 429, 434, 436, 438, 439, 440, 457, 458, 461, 462, 463, 465, 468, 469, 471, 472, 475, 476, 477, 485, 486, 497, 500, 514, 515, 516, 521, 522, 525, 527], "kerasadaptor": 3, "mxnetadaptor": 11, "do": [11, 14, 151, 176, 206, 214, 215, 229, 230, 272, 273, 289, 293, 296, 299, 329, 349, 352, 428, 433, 440, 459, 464, 468, 471, 474, 475, 490, 493, 514, 518, 520, 522, 525], "inspect": [11, 14, 520, 523], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 148, 152, 157, 158, 165, 166, 186, 187, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 215, 247, 288, 291, 293, 326, 328, 338, 365, 399, 429, 435, 441, 458, 459, 461, 514, 517, 520, 523, 524, 525], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 152, 157, 165, 166, 167, 172, 179, 183, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 229, 248, 254, 261, 262, 272, 291, 293, 298, 299, 300, 301, 303, 306, 309, 310, 311, 318, 321, 323, 326, 327, 328, 329, 330, 335, 338, 344, 347, 351, 352, 353, 354, 356, 357, 365, 390, 405, 408, 409, 418, 419, 421, 428, 429, 435, 440, 466, 474, 514, 516, 517, 522, 523, 525], "specif": [11, 14, 42, 46, 104, 116, 166, 172, 173, 179, 210, 214, 215, 230, 231, 232, 233, 237, 239, 254, 273, 274, 275, 276, 280, 282, 312, 313, 315, 316, 317, 356, 390, 426, 433, 436, 439, 440, 457, 458, 461, 462, 468, 470, 474, 475, 476, 477, 478, 482, 483, 485, 489, 495, 497, 503, 512, 514, 516, 519, 525, 527], "configur": [11, 13, 14, 45, 118, 150, 165, 166, 172, 173, 210, 211, 214, 215, 218, 219, 221, 232, 235, 248, 253, 261, 262, 275, 278, 289, 293, 294, 305, 306, 307, 309, 318, 323, 327, 331, 332, 338, 356, 357, 367, 390, 399, 408, 416, 418, 420, 421, 427, 428, 435, 436, 439, 440, 459, 461, 475, 482, 496, 503, 508, 509, 510, 512, 514, 517, 519, 520, 524, 525, 528], "mxnet": [12, 13, 16, 215, 225, 229, 232, 235, 239, 247, 268, 272, 275, 278, 282, 288, 294, 303, 331, 356, 357, 362, 390, 434, 438, 439, 440, 457, 458, 465, 468, 471, 472, 475, 476, 477, 516, 525, 527], "init": [12, 17, 42, 169, 178, 187, 189, 459, 474, 525], "optyp": [13, 214, 215, 291, 440], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 151, 152, 157, 165, 166, 167, 177, 179, 183, 184, 190, 191, 192, 197, 206, 207, 208, 210, 212, 214, 215, 228, 230, 232, 239, 247, 249, 254, 271, 273, 275, 282, 288, 293, 296, 297, 299, 303, 310, 317, 321, 326, 328, 330, 335, 341, 345, 347, 349, 350, 352, 356, 365, 367, 394, 395, 402, 406, 408, 409, 417, 428, 429, 439, 440, 459, 461, 464, 466, 468, 471, 475, 476, 496, 498, 503, 504, 508, 509, 517, 519, 521, 524, 525, 526, 527], "isiter": 13, "obj": [13, 105, 187, 210, 229, 272, 289, 294, 305, 306, 307, 309, 318, 323, 327, 331, 357, 367, 390, 418, 421, 429], "bool": [13, 42, 43, 44, 141, 148, 151, 157, 163, 165, 166, 192, 214, 215, 230, 232, 243, 247, 273, 275, 285, 288, 293, 297, 303, 326, 344, 350, 356, 405, 409, 414, 428, 429, 458, 459, 474, 506, 516, 524], "check": [13, 44, 67, 68, 105, 148, 165, 166, 210, 221, 232, 275, 291, 327, 428, 429, 438, 461, 464, 472, 479, 481, 483, 490, 493, 494, 498, 501, 504, 505, 520], "whether": [13, 43, 44, 105, 116, 148, 151, 157, 165, 166, 192, 214, 215, 228, 230, 243, 247, 271, 273, 285, 288, 297, 299, 303, 326, 350, 352, 356, 421, 428, 429, 439, 459, 474, 517, 519, 522, 524], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 150, 152, 155, 157, 163, 165, 172, 176, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 230, 231, 232, 247, 248, 250, 261, 262, 263, 273, 274, 275, 288, 289, 294, 299, 307, 309, 312, 313, 315, 316, 317, 318, 323, 326, 327, 328, 329, 330, 331, 335, 348, 352, 356, 357, 365, 366, 384, 389, 390, 394, 408, 418, 421, 428, 429, 435, 436, 440, 446, 456, 458, 459, 467, 474, 475, 477, 513, 514, 516, 517, 524, 525, 526, 528], "i": [13, 43, 44, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 143, 148, 151, 152, 155, 157, 159, 163, 165, 166, 171, 172, 176, 179, 180, 186, 190, 191, 197, 202, 203, 204, 205, 206, 207, 209, 210, 214, 215, 218, 219, 220, 228, 229, 230, 231, 232, 233, 234, 237, 239, 243, 247, 248, 250, 254, 256, 257, 261, 262, 263, 271, 272, 273, 274, 275, 276, 277, 280, 282, 285, 288, 296, 299, 301, 303, 305, 310, 318, 323, 327, 328, 332, 339, 349, 352, 354, 356, 357, 367, 373, 374, 378, 390, 395, 400, 408, 409, 418, 428, 429, 433, 434, 435, 436, 439, 440, 441, 442, 444, 448, 451, 454, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 486, 488, 489, 490, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528], "iter": [13, 15, 105, 140, 148, 165, 166, 172, 191, 197, 204, 208, 214, 215, 218, 219, 223, 228, 232, 233, 250, 261, 262, 266, 271, 275, 276, 328, 330, 357, 390, 418, 421, 435, 436, 439, 456, 458, 459, 475, 514, 516, 517, 522, 523, 525, 527], "returntrue": [13, 43, 44, 85, 113, 146, 148, 151, 157, 166, 172, 183, 214, 215, 228, 230, 232, 233, 246, 247, 248, 271, 273, 275, 276, 287, 288, 293, 297, 303, 321, 344, 350, 356, 367, 390, 405, 409, 414, 421, 428, 429, 440, 458, 459, 461, 464, 468, 474, 475, 478, 481, 482, 497, 498, 499, 500, 506, 508, 516, 517, 519, 522, 523, 524, 525, 527], "els": [13, 148, 166, 215, 228, 271, 367, 426, 483, 519, 523], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 151, 156, 157, 163, 165, 166, 172, 177, 180, 214, 215, 220, 222, 225, 226, 227, 229, 230, 232, 243, 247, 248, 249, 250, 256, 263, 265, 268, 269, 270, 272, 273, 275, 285, 288, 299, 303, 352, 356, 367, 390, 409, 414, 421, 428, 429, 439, 440, 458, 459, 468, 474, 475, 488, 492, 498, 506, 509, 510, 516, 517, 519, 522, 523, 524, 525, 527], "boolean": 13, "ensure_list": 13, "x": [13, 54, 74, 151, 191, 214, 215, 229, 247, 272, 288, 335, 394, 409, 457, 461, 464, 476, 477, 503, 504, 508, 509, 511, 517, 519, 522, 523, 524, 526], "ensur": [13, 247, 288, 335, 394, 464, 517, 524], "list": [13, 42, 43, 53, 105, 140, 148, 150, 151, 152, 161, 165, 172, 184, 190, 191, 196, 201, 206, 210, 214, 215, 218, 219, 223, 230, 243, 247, 248, 261, 262, 266, 273, 285, 288, 292, 293, 296, 297, 299, 300, 301, 303, 310, 318, 323, 326, 329, 344, 349, 350, 352, 353, 354, 356, 357, 365, 373, 374, 378, 390, 405, 409, 418, 419, 429, 435, 438, 439, 459, 466, 468, 472, 475, 478, 483, 485, 488, 489, 492, 500, 503, 505, 506, 512, 514, 516, 517, 518, 522, 523, 525], "input": [13, 15, 42, 43, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 160, 162, 163, 164, 165, 166, 170, 190, 191, 210, 214, 215, 218, 219, 230, 231, 232, 234, 243, 246, 247, 252, 261, 262, 273, 274, 275, 277, 285, 287, 288, 291, 292, 293, 356, 357, 361, 365, 390, 418, 426, 428, 429, 436, 439, 440, 456, 457, 458, 459, 461, 462, 463, 464, 466, 468, 470, 474, 475, 476, 477, 478, 483, 514, 516, 517, 519, 522, 523, 524, 527], "check_mx_vers": 13, "version": [13, 53, 104, 160, 165, 190, 215, 292, 293, 348, 433, 435, 439, 468, 472, 473, 475, 488, 490, 492, 493, 515, 520, 522, 525, 526], "str": [13, 42, 44, 140, 150, 152, 157, 158, 161, 162, 163, 165, 166, 167, 177, 179, 187, 190, 214, 215, 230, 231, 232, 239, 243, 247, 249, 253, 254, 273, 274, 275, 282, 285, 288, 292, 293, 296, 297, 299, 301, 303, 310, 321, 344, 347, 349, 350, 352, 354, 356, 375, 383, 385, 388, 389, 405, 408, 409, 414, 417, 421, 426, 429, 430, 458, 459, 474, 506, 516, 523, 524], "mx": 13, "__version__": [13, 155], "combine_cap": 13, "current": [13, 70, 104, 162, 166, 186, 187, 190, 193, 197, 200, 214, 215, 305, 312, 313, 315, 316, 317, 326, 328, 335, 339, 394, 400, 429, 435, 436, 439, 441, 457, 464, 468, 475, 478, 482, 495, 503, 512, 514, 517, 519, 522, 525], "new": [13, 16, 44, 148, 162, 172, 220, 232, 247, 248, 263, 275, 288, 327, 367, 414, 434, 438, 440, 464, 475, 476, 489, 495, 496, 497, 498, 504, 505, 508, 509, 514, 515, 517, 519, 520, 521, 524, 526, 527], "combin": [13, 165, 214, 215, 218, 219, 243, 257, 261, 262, 285, 357, 390, 418, 429, 435, 439, 471, 475, 513, 515, 517, 518, 519, 524, 525], "capabl": [13, 47, 345, 406, 440, 441, 456, 468, 475, 476, 486, 497, 502, 514, 516, 517, 525, 527], "contain": [13, 67, 68, 70, 74, 139, 148, 152, 157, 165, 166, 172, 176, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 214, 215, 218, 219, 230, 231, 232, 261, 262, 273, 274, 275, 289, 293, 294, 299, 300, 301, 305, 318, 321, 323, 326, 327, 328, 329, 330, 331, 352, 353, 354, 357, 390, 418, 421, 428, 457, 459, 462, 471, 474, 496, 503, 508, 509, 510, 514, 519, 523, 525, 526], "make_nc_model": 13, "target": [13, 42, 43, 102, 151, 190, 208, 210, 215, 327, 330, 335, 394, 459, 464, 475, 514, 523, 524, 525, 527], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 142, 150, 165, 190, 214, 215, 230, 243, 246, 247, 273, 285, 287, 288, 292, 299, 305, 327, 345, 352, 406, 409, 435, 440, 475, 476, 480, 517, 518, 519, 522, 524, 525], "symbol": [13, 150, 163, 165, 296, 349, 357, 390, 435, 477], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 170, 172, 176, 183, 187, 188, 190, 197, 198, 199, 202, 204, 205, 206, 208, 210, 214, 215, 218, 219, 226, 229, 230, 232, 247, 248, 251, 252, 261, 262, 269, 272, 273, 275, 288, 289, 291, 292, 293, 294, 295, 303, 304, 305, 306, 309, 312, 313, 315, 316, 317, 318, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 348, 356, 357, 367, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 408, 409, 416, 417, 418, 424, 426, 428, 429, 431, 434, 435, 436, 438, 439, 441, 446, 456, 457, 458, 459, 461, 462, 463, 464, 465, 470, 471, 473, 474, 476, 478, 483, 485, 486, 489, 495, 497, 502, 504, 505, 506, 507, 512, 513, 515, 517, 520, 521, 523, 524, 525, 526, 527], "an": [13, 67, 68, 70, 105, 141, 143, 152, 155, 157, 165, 171, 180, 197, 214, 215, 223, 228, 232, 247, 251, 256, 266, 271, 275, 288, 295, 296, 300, 301, 309, 310, 332, 348, 349, 353, 354, 357, 384, 389, 390, 409, 418, 429, 431, 433, 435, 436, 438, 439, 441, 457, 458, 459, 460, 461, 466, 474, 475, 476, 478, 482, 483, 486, 495, 498, 499, 500, 503, 506, 512, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525], "neural": [13, 152, 172, 176, 179, 192, 193, 194, 195, 206, 214, 215, 242, 243, 244, 247, 248, 251, 254, 257, 285, 286, 288, 290, 295, 302, 303, 305, 318, 323, 326, 329, 331, 332, 337, 343, 348, 355, 356, 357, 361, 368, 390, 397, 398, 404, 426, 431, 434, 439, 440, 441, 456, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 479, 480, 483, 485, 486, 488, 490, 492, 493, 494, 506, 512, 513, 515, 517, 519, 520, 522, 523, 524, 525, 527, 528], "compressor": [13, 172, 176, 179, 194, 195, 206, 214, 215, 242, 243, 244, 247, 248, 251, 254, 257, 285, 286, 288, 290, 295, 302, 303, 305, 326, 329, 331, 332, 337, 343, 348, 355, 356, 357, 361, 368, 390, 398, 404, 426, 431, 434, 436, 439, 440, 441, 456, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 476, 477, 478, 479, 483, 485, 486, 488, 490, 492, 493, 494, 497, 498, 499, 500, 502, 503, 512, 513, 514, 515, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528], "tupl": [13, 105, 148, 165, 184, 215, 218, 219, 243, 247, 261, 262, 285, 288, 293, 344, 357, 390, 405, 418, 440, 459, 474, 475, 517, 524], "symnet": 13, "arg": [13, 53, 105, 165, 230, 231, 232, 273, 274, 275, 326, 335, 394, 409, 424, 425, 459, 464, 475, 484, 514, 517, 519, 522, 523, 524], "aux": 13, "data": [13, 42, 43, 44, 55, 105, 140, 148, 152, 157, 162, 165, 166, 170, 190, 214, 215, 218, 219, 248, 250, 261, 262, 293, 295, 335, 345, 347, 348, 357, 383, 388, 390, 394, 406, 408, 418, 421, 426, 429, 438, 439, 457, 458, 459, 464, 468, 469, 472, 474, 475, 476, 497, 498, 500, 503, 508, 509, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "descript": [13, 132, 409, 435, 440, 441, 458, 503, 507, 522], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 163, 165, 170, 435, 522, 523], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 45, 67, 68, 70, 104, 105, 148, 151, 158, 162, 165, 172, 179, 180, 184, 186, 187, 188, 190, 193, 200, 207, 208, 209, 210, 212, 215, 223, 247, 248, 254, 256, 266, 288, 293, 326, 328, 330, 338, 345, 347, 356, 365, 390, 399, 406, 408, 421, 426, 429, 440, 457, 467, 471, 472, 475, 481, 498, 500, 508, 509, 515, 519, 522, 525, 526, 529], "name": [13, 43, 45, 53, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 152, 157, 158, 162, 163, 165, 167, 172, 173, 180, 183, 184, 186, 190, 192, 197, 200, 201, 206, 207, 208, 209, 210, 212, 214, 215, 230, 231, 232, 235, 239, 245, 247, 248, 252, 255, 256, 273, 274, 275, 278, 282, 288, 291, 292, 293, 298, 303, 321, 326, 328, 330, 345, 347, 351, 356, 361, 365, 367, 390, 406, 408, 417, 419, 421, 426, 429, 434, 435, 441, 459, 461, 464, 466, 468, 473, 474, 475, 477, 481, 488, 492, 496, 497, 503, 514, 517, 520, 521, 523, 525, 527, 528], "context": [13, 429, 516, 519], "prepare_model_data": 13, "nc_model": [13, 318, 323], "data_x": 13, "prepar": [13, 44, 165, 435, 438, 459, 464, 469, 497, 508, 509, 510, 514, 517], "dataload": [13, 15, 42, 44, 140, 141, 149, 151, 152, 162, 165, 166, 172, 187, 188, 190, 206, 210, 218, 219, 230, 241, 251, 261, 262, 273, 284, 289, 295, 318, 323, 332, 348, 383, 388, 390, 418, 421, 435, 438, 439, 440, 461, 462, 463, 464, 469, 470, 475, 476, 497, 498, 513, 514, 517, 518, 519, 522, 523, 524, 526, 527], "need": [13, 42, 105, 109, 162, 166, 172, 190, 206, 215, 218, 219, 220, 228, 229, 232, 239, 247, 250, 252, 253, 261, 262, 263, 271, 272, 275, 282, 288, 293, 332, 338, 356, 357, 367, 390, 399, 418, 428, 429, 435, 439, 458, 459, 461, 462, 464, 471, 475, 478, 480, 481, 484, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 502, 506, 508, 514, 516, 517, 518, 519, 520, 522, 524, 525, 527], "run": [13, 140, 148, 157, 166, 172, 197, 210, 214, 215, 218, 219, 229, 246, 248, 261, 262, 272, 287, 327, 328, 335, 357, 390, 394, 418, 439, 456, 464, 467, 468, 475, 478, 480, 482, 483, 484, 486, 488, 489, 490, 492, 493, 495, 503, 504, 505, 506, 508, 509, 510, 515, 517, 519, 520, 521, 523, 525, 527], "loader": [13, 140, 218, 219, 261, 262, 357, 390, 418, 424, 458, 517], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 155, 214, 215, 220, 230, 232, 250, 263, 273, 275, 299, 309, 310, 345, 352, 384, 389, 406, 408, 409, 421, 433, 436, 439, 459, 477, 488, 490, 492, 493, 496, 508, 509, 510, 514, 517, 521, 523, 525, 526], "exampl": [13, 44, 152, 157, 165, 166, 172, 173, 184, 190, 191, 206, 214, 215, 230, 231, 232, 243, 247, 273, 274, 275, 285, 288, 299, 300, 301, 303, 329, 352, 353, 354, 356, 357, 367, 390, 408, 409, 417, 418, 429, 433, 438, 440, 441, 446, 470, 471, 478, 481, 482, 483, 486, 503, 506, 518, 520, 524, 525, 526, 529], "prepare_dataload": 13, "io": [13, 157, 501], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 247, 288, 419, 467, 524], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 151, 156, 157, 166, 187, 190, 191, 206, 210, 214, 215, 440, 458, 462, 475, 476, 478, 481, 486, 495, 514, 516, 519], "is_model_quant": 13, "query_quantizable_nod": 13, "queri": [13, 14, 47, 148, 165, 190, 201, 214, 215, 440, 441, 505, 517], "node": [13, 42, 43, 44, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 190, 291, 293, 365, 389, 439, 461, 464, 498, 502, 505, 508, 509, 510, 519, 523, 525, 528], "given": [13, 16, 67, 68, 70, 104, 105, 116, 148, 158, 165, 247, 288, 299, 352, 390, 436, 441, 514, 522, 524], "map": [13, 43, 105, 148, 157, 215, 247, 288, 291, 293, 294, 298, 300, 301, 303, 318, 323, 328, 331, 351, 353, 354, 356, 459, 464, 474, 475, 488, 492, 500, 514, 517, 519], "quantize_sym_model": 13, "qconfig": [13, 165, 428, 519, 523], "accord": [13, 122, 165, 172, 214, 215, 230, 231, 232, 247, 273, 274, 275, 288, 338, 397, 399, 421, 436, 439, 459, 464, 498, 503, 508, 509, 510, 514, 518, 522, 524, 525], "run_forward": 13, "b_filter": 13, "collector": [13, 152, 419], "none": [13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 151, 152, 156, 157, 158, 159, 160, 162, 164, 165, 166, 172, 173, 176, 177, 184, 186, 187, 188, 190, 194, 206, 210, 211, 212, 214, 215, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 243, 247, 248, 249, 250, 257, 261, 262, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 285, 288, 289, 292, 293, 294, 299, 303, 304, 305, 306, 309, 318, 323, 327, 331, 333, 334, 335, 336, 338, 339, 340, 341, 345, 352, 356, 357, 367, 383, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 406, 409, 416, 418, 419, 421, 426, 428, 429, 439, 440, 458, 459, 474, 498, 517, 519, 523, 524, 525], "pre_batch": 13, "post_batch": 13, "forward": [13, 210, 440, 475, 497, 514, 516, 517, 519, 522, 523], "propag": [13, 100], "filter": [13, 230, 231, 232, 233, 234, 235, 237, 241, 273, 274, 275, 276, 277, 278, 280, 284, 295, 348, 429, 441, 459, 471, 514, 523], "which": [13, 42, 55, 83, 110, 151, 152, 157, 162, 166, 186, 190, 191, 193, 197, 198, 199, 201, 204, 205, 206, 208, 210, 214, 215, 230, 231, 232, 243, 248, 273, 274, 275, 285, 296, 301, 310, 312, 313, 315, 316, 317, 321, 326, 327, 328, 330, 335, 349, 354, 356, 361, 367, 390, 394, 417, 429, 433, 435, 436, 439, 440, 441, 457, 458, 459, 461, 462, 464, 467, 468, 471, 474, 475, 476, 477, 479, 483, 486, 489, 495, 496, 497, 500, 503, 508, 509, 510, 513, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527], "batch": [13, 165, 220, 222, 223, 228, 229, 250, 263, 265, 266, 271, 272, 418, 458, 462, 463, 475, 513, 514, 524, 525, 528], "infer": [13, 105, 165, 166, 190, 294, 331, 365, 367, 390, 418, 439, 440, 457, 462, 463, 475, 476, 495, 512, 514, 515, 517, 519, 522, 523, 525], "collect": [13, 16, 43, 165, 245, 247, 250, 252, 253, 255, 288, 301, 303, 354, 356, 419, 429, 440, 517, 523, 525], "inform": [13, 152, 186, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 215, 218, 219, 250, 252, 253, 261, 262, 326, 328, 329, 330, 332, 356, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 448, 451, 454, 457, 462, 468, 475, 477, 490, 493, 496, 497, 500, 501, 503, 504, 508, 509, 514, 518, 519, 520, 523, 527, 528, 529], "dure": [13, 140, 155, 157, 192, 196, 208, 214, 215, 326, 330, 367, 429, 440, 461, 475, 477, 502, 512, 513, 514, 517, 522, 523, 527], "call": [13, 42, 157, 162, 167, 190, 198, 199, 204, 299, 328, 352, 435, 436, 439, 458, 470, 484, 486, 496, 514, 517, 522, 523, 524], "prior": [13, 88, 525], "after": [13, 78, 165, 188, 192, 197, 199, 204, 214, 215, 230, 243, 247, 250, 273, 285, 288, 328, 395, 409, 429, 436, 440, 459, 461, 462, 463, 466, 471, 474, 475, 488, 489, 492, 496, 500, 512, 513, 514, 517, 518, 519, 521, 522, 523, 524, 525], "count": [13, 436, 459, 519], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 161, 165, 166, 188, 214, 215, 229, 230, 231, 243, 247, 272, 273, 274, 285, 288, 292, 293, 297, 299, 303, 310, 350, 352, 356, 375, 384, 389, 408, 409, 414, 429, 458, 459, 474, 475, 506, 516, 519, 524], "make_symbol_block": 13, "gluon": [13, 357, 390, 477], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 150, 165, 439, 441, 525], "quantizable_nod": 13, "strategi": [13, 165, 204, 214, 215, 216, 232, 259, 275, 295, 348, 438, 439, 440, 441, 446, 457, 458, 464, 471, 475, 483, 495, 500, 515, 516, 517, 518, 519, 520, 526, 527], "config": [13, 44, 115, 116, 118, 122, 165, 172, 173, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 218, 219, 230, 261, 262, 273, 312, 313, 315, 316, 317, 318, 323, 326, 327, 328, 329, 330, 345, 346, 348, 357, 384, 389, 406, 407, 408, 409, 418, 421, 428, 429, 436, 438, 440, 441, 446, 456, 458, 461, 462, 463, 464, 466, 469, 471, 474, 475, 476, 477, 497, 498, 513, 514, 516, 517, 518, 519, 521, 523, 525], "tune": [13, 45, 172, 214, 215, 218, 219, 230, 232, 261, 262, 273, 275, 294, 331, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 357, 367, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 406, 407, 408, 418, 429, 439, 440, 457, 458, 459, 461, 464, 471, 473, 475, 476, 495, 499, 502, 504, 505, 512, 514, 515, 518, 520, 521, 523, 527], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 157, 158, 162, 165, 166, 172, 176, 177, 184, 186, 187, 193, 194, 195, 196, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 218, 219, 220, 223, 227, 230, 231, 232, 233, 234, 235, 237, 242, 243, 249, 250, 253, 261, 262, 263, 266, 270, 273, 274, 275, 276, 277, 278, 280, 285, 289, 291, 292, 293, 296, 299, 300, 301, 305, 310, 326, 327, 328, 330, 345, 347, 349, 352, 353, 354, 357, 365, 367, 390, 406, 408, 409, 414, 418, 421, 428, 429, 433, 434, 435, 436, 439, 441, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 469, 471, 474, 476, 477, 478, 482, 483, 484, 486, 496, 498, 500, 501, 505, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 171, 214, 215, 220, 222, 223, 225, 226, 227, 228, 229, 250, 263, 265, 266, 268, 269, 270, 271, 272, 423, 438, 440, 458, 462, 472, 490, 493, 497, 500, 508, 515, 517, 519, 520, 522, 526, 528], "depend": [13, 218, 219, 248, 261, 262, 357, 390, 418, 434, 467, 468, 501, 516, 517, 525], "algorithm": [13, 44, 151, 165, 173, 183, 211, 215, 296, 303, 311, 348, 349, 356, 417, 421, 423, 436, 439, 440, 441, 462, 463, 468, 471, 484, 489, 514, 517, 523, 527], "set": [13, 43, 57, 96, 105, 115, 148, 157, 162, 165, 172, 179, 210, 212, 214, 215, 218, 219, 220, 230, 232, 235, 247, 248, 253, 254, 261, 262, 263, 273, 275, 278, 288, 299, 305, 318, 323, 327, 332, 352, 356, 357, 365, 389, 390, 409, 418, 426, 429, 433, 436, 440, 456, 458, 459, 462, 464, 466, 468, 470, 471, 472, 474, 475, 476, 478, 480, 482, 496, 497, 498, 499, 500, 501, 505, 508, 514, 516, 517, 519, 521, 522, 525, 527], "kl": [13, 16, 214, 215, 419, 423, 440, 441, 457, 468, 475, 525, 527], "minmax": [13, 16, 440, 441, 457, 468, 517, 527], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 156], "calibdata": 13, "threshold": [13, 168, 419, 423, 474], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 162, 170, 177, 179, 187, 193, 200, 204, 205, 214, 215, 218, 219, 229, 230, 232, 239, 243, 247, 249, 250, 251, 254, 261, 262, 272, 273, 275, 282, 285, 288, 295, 303, 305, 310, 326, 328, 332, 339, 345, 348, 356, 357, 361, 367, 390, 400, 406, 409, 418, 421, 423, 429, 431, 438, 440, 475, 478, 483, 486, 489, 495, 502, 503, 506, 515, 518, 521, 525, 526], "amp": [13, 478, 485, 504, 519], "wrap": [13, 105, 116, 177, 249, 299, 352, 435, 464, 490, 493], "dataiterload": 13, "data_it": [13, 190], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 419], "8001": [13, 419, 503, 508, 509, 510], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 167, 168, 170, 171, 306, 309, 360, 362, 364, 365, 366, 439, 440, 441, 472, 477, 488, 490, 492, 493, 496, 515, 525], "up": [13, 100, 201, 247, 288, 327, 464, 465, 468, 471, 486, 490, 493, 495, 514, 515, 516, 517, 521, 524, 525, 527], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 439], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 157, 215, 220, 263, 293, 345, 406, 439, 458, 462, 466, 471, 475, 478, 483, 484, 485, 486, 489, 495, 515, 525, 528], "static": [14, 41, 42, 47, 162, 170, 190, 215, 293, 345, 390, 406, 439, 440, 441, 461, 466, 471, 475, 478, 483, 484, 485, 486, 489, 495, 498, 506, 508, 509, 510, 522, 525, 528], "format": [14, 18, 43, 53, 148, 214, 215, 230, 231, 232, 273, 274, 275, 293, 299, 305, 345, 352, 406, 409, 438, 440, 441, 459, 464, 466, 474, 475, 476, 477, 478, 500, 503, 515, 517, 520], "local_config_fil": [14, 47], "defin": [14, 46, 86, 152, 183, 184, 190, 192, 197, 198, 199, 204, 205, 206, 207, 208, 214, 215, 218, 219, 261, 262, 306, 307, 309, 310, 311, 318, 323, 326, 327, 328, 330, 357, 390, 414, 418, 428, 433, 436, 439, 440, 458, 459, 462, 463, 468, 471, 474, 475, 496, 513, 514, 517, 519, 521, 522, 523, 525, 527], "interfac": [14, 46, 86, 113, 211, 294, 318, 323, 331, 332, 421, 471, 475, 486, 504, 517, 520], "each": [14, 46, 141, 148, 152, 157, 165, 166, 210, 214, 215, 228, 232, 235, 243, 247, 271, 275, 278, 285, 288, 297, 299, 300, 301, 338, 350, 352, 353, 354, 399, 429, 434, 439, 440, 441, 459, 461, 462, 463, 468, 475, 480, 486, 489, 495, 503, 505, 512, 514, 519, 521, 522, 523, 524, 525, 526], "adapt": [14, 46, 433, 438, 440, 459, 486, 515], "should": [14, 46, 54, 115, 116, 157, 176, 188, 190, 201, 214, 215, 218, 219, 228, 230, 232, 247, 252, 261, 262, 271, 273, 275, 288, 293, 297, 350, 356, 357, 390, 409, 418, 429, 435, 436, 439, 440, 441, 459, 462, 464, 474, 475, 481, 490, 493, 495, 497, 498, 512, 514, 517, 519, 524, 525, 527], "implement": [14, 46, 110, 143, 147, 149, 157, 218, 219, 225, 228, 229, 230, 232, 261, 262, 268, 271, 272, 273, 275, 296, 349, 357, 367, 390, 397, 418, 441, 458, 459, 474, 475, 486, 496, 514, 517, 519, 520, 523, 525, 527], "inherit": [14, 46, 176, 177, 202, 203, 208, 214, 227, 247, 249, 257, 270, 288, 328, 330, 436, 439, 440, 459], "backend": [14, 15, 41, 42, 46, 170, 179, 214, 215, 216, 217, 221, 222, 226, 230, 231, 233, 234, 235, 236, 237, 241, 244, 247, 253, 254, 259, 260, 264, 265, 267, 269, 273, 274, 276, 277, 278, 279, 280, 284, 286, 288, 304, 339, 357, 358, 359, 361, 400, 414, 435, 441, 461, 464, 470, 471, 475, 476, 484, 503, 508, 509, 510, 516, 519, 524, 525, 527], "own": [14, 46, 74, 157, 228, 247, 271, 288, 367, 436, 440, 458, 459, 471, 474, 497, 501, 512, 519, 521, 526], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 140], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 476, 517], "reduce_rang": [15, 41, 42, 214, 215, 441, 516], "augment": 15, "dump": [15, 155, 165, 172, 293, 429, 434, 500, 517, 520, 523], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 151, 166, 429, 519], "percentil": [16, 44, 140, 166, 457], "99": [16, 528], "999": [16, 527], "option": [16, 44, 105, 157, 165, 166, 192, 214, 215, 218, 219, 230, 247, 261, 262, 273, 288, 292, 293, 299, 305, 326, 332, 345, 348, 352, 356, 357, 390, 406, 408, 409, 418, 422, 429, 440, 441, 458, 459, 468, 472, 475, 489, 503, 506, 508, 509, 510, 514, 517, 519, 521, 524, 525, 527], "number": [16, 44, 67, 68, 105, 140, 165, 166, 184, 188, 194, 195, 214, 215, 228, 231, 243, 247, 271, 274, 285, 288, 300, 301, 303, 326, 335, 353, 354, 356, 384, 389, 394, 409, 421, 429, 456, 458, 459, 464, 474, 503, 505, 514, 517, 519, 521, 522, 524, 525], "bin": [16, 157, 158, 429, 467], "histogram": [16, 419, 429, 497, 523], "valu": [16, 43, 44, 55, 67, 68, 70, 89, 90, 105, 143, 148, 157, 165, 171, 172, 184, 186, 190, 191, 201, 209, 210, 211, 212, 214, 215, 218, 219, 230, 233, 234, 243, 247, 248, 261, 262, 273, 276, 277, 285, 288, 299, 303, 327, 335, 338, 345, 352, 356, 357, 390, 394, 399, 406, 408, 409, 418, 419, 421, 429, 435, 440, 441, 457, 459, 461, 468, 474, 475, 476, 481, 498, 500, 506, 512, 514, 516, 517, 519, 520, 522, 524, 525, 527], "default": [16, 44, 97, 148, 157, 165, 166, 173, 210, 212, 214, 215, 218, 219, 222, 230, 231, 232, 243, 247, 261, 262, 265, 273, 274, 275, 285, 288, 292, 293, 296, 305, 327, 347, 349, 356, 365, 408, 414, 416, 421, 429, 435, 439, 458, 459, 468, 471, 472, 474, 475, 476, 483, 486, 488, 492, 500, 503, 508, 509, 510, 512, 514, 516, 517, 518, 519, 521, 522, 524, 525, 527], "float": [16, 43, 44, 140, 141, 152, 166, 192, 197, 207, 210, 214, 215, 230, 243, 273, 285, 297, 299, 300, 301, 328, 350, 352, 353, 354, 405, 409, 416, 426, 429, 459, 474, 516, 517, 522, 524], "A": [16, 54, 74, 75, 103, 116, 140, 141, 148, 155, 165, 176, 183, 184, 186, 187, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 232, 247, 250, 252, 253, 275, 288, 289, 296, 299, 300, 301, 303, 306, 309, 310, 311, 318, 321, 323, 326, 327, 328, 329, 330, 335, 349, 352, 353, 354, 356, 357, 361, 365, 394, 418, 429, 434, 440, 458, 459, 465, 468, 474, 475, 477, 488, 489, 492, 495, 503, 514, 515, 517, 519, 522, 524, 525, 527], "between": [16, 42, 143, 171, 203, 214, 215, 247, 288, 300, 303, 353, 356, 384, 389, 429, 435, 439, 440, 441, 457, 461, 462, 471, 474, 475, 486, 517, 519, 520, 521, 522, 524, 525], "0": [16, 43, 44, 53, 90, 105, 148, 156, 157, 165, 166, 168, 170, 177, 184, 186, 188, 210, 214, 215, 220, 222, 225, 226, 227, 229, 230, 233, 234, 237, 243, 247, 249, 250, 263, 265, 268, 269, 270, 272, 273, 276, 277, 280, 285, 288, 293, 294, 303, 310, 318, 323, 331, 356, 367, 390, 395, 409, 435, 458, 459, 462, 464, 466, 467, 468, 472, 473, 474, 475, 476, 481, 483, 488, 492, 498, 508, 509, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527], "100": [16, 172, 184, 214, 215, 232, 275, 409, 456, 459, 464, 470, 475, 500, 516, 517, 524, 525, 527, 528], "klcalibr": 16, "128": [16, 44, 149, 151, 165, 166, 230, 233, 234, 247, 273, 276, 277, 288, 459, 475, 517, 519, 524, 528], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 496, 497, 519], "ep": [16, 171, 476], "0001": [16, 184, 214, 215, 462, 475, 516], "smooth": [16, 140, 141, 148, 162, 170, 214, 215, 344, 514, 525], "discret": [16, 184, 525], "mai": [16, 148, 155, 157, 312, 313, 315, 316, 317, 409, 433, 434, 440, 457, 461, 466, 467, 473, 476, 488, 492, 498, 501, 503, 515, 517, 519, 525], "have": [16, 74, 83, 141, 148, 157, 187, 191, 193, 200, 228, 250, 271, 296, 299, 326, 328, 349, 352, 356, 390, 408, 409, 433, 434, 440, 441, 458, 459, 461, 464, 468, 473, 474, 475, 476, 478, 495, 498, 501, 503, 508, 509, 510, 512, 514, 517, 519, 522, 525, 526], "been": [16, 157, 187, 193, 200, 296, 326, 328, 349, 436, 441, 462, 475, 476, 495, 519, 522], "normal": [16, 33, 247, 288, 301, 354, 475, 504, 512, 519, 522, 524], "1": [16, 42, 43, 44, 54, 74, 89, 105, 109, 113, 146, 148, 157, 160, 162, 165, 166, 168, 170, 171, 172, 177, 184, 186, 198, 199, 201, 214, 215, 220, 222, 225, 226, 227, 229, 230, 231, 233, 234, 237, 238, 243, 247, 248, 249, 250, 263, 265, 268, 269, 270, 272, 273, 274, 276, 277, 280, 281, 285, 288, 294, 299, 300, 301, 303, 318, 323, 328, 331, 332, 352, 353, 354, 356, 367, 390, 408, 409, 414, 421, 429, 433, 435, 438, 439, 441, 457, 458, 459, 461, 462, 466, 468, 469, 472, 474, 476, 479, 481, 497, 498, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527], "replac": [16, 158, 162, 165, 166, 301, 354, 464, 475, 486, 520], "zero": [16, 43, 44, 151, 166, 197, 210, 247, 288, 328, 429, 438, 500, 514, 517, 519, 522, 524, 525], "multipli": [16, 214, 215, 519], "scale": [16, 43, 44, 100, 141, 143, 151, 160, 162, 164, 165, 166, 170, 171, 243, 247, 285, 288, 517, 519, 521, 522, 524, 525], "factor": [16, 141, 519, 522, 528], "take": [16, 192, 215, 218, 219, 223, 247, 252, 261, 262, 266, 288, 326, 335, 356, 357, 390, 394, 418, 433, 435, 436, 458, 461, 462, 468, 475, 495, 514, 517, 518, 519, 524, 525, 527], "correspond": [16, 152, 190, 201, 214, 215, 230, 273, 296, 299, 303, 349, 352, 356, 421, 429, 439, 468, 475, 514, 516, 517, 521, 525], "amount": 16, "off": [16, 67, 68, 70, 434, 519], "non": [16, 327, 429, 435, 461, 519, 525], "ref": [16, 148], "http": [16, 151, 152, 186, 194, 195, 204, 205, 206, 230, 232, 273, 275, 296, 297, 299, 300, 301, 326, 328, 329, 349, 350, 352, 353, 354, 356, 390, 435, 438, 459, 461, 469, 472, 473, 475, 484, 490, 493, 497, 499, 500, 501, 502, 503, 506, 508, 509, 510, 514, 520], "hanj": 16, "c": [16, 74, 232, 275, 429, 459, 467, 472, 519, 525], "illinoi": 16, "edu": [16, 232, 275, 459], "cs412": 16, "bk3": 16, "diverg": [16, 419, 423, 441, 457, 462, 525], "pdf": 16, "github": [16, 152, 194, 195, 206, 230, 273, 296, 297, 300, 301, 326, 329, 349, 350, 353, 354, 356, 390, 434, 438, 459, 461, 465, 472, 473, 475, 484, 490, 493, 497, 499, 500, 501, 502, 503, 506, 509, 510, 520], "com": [16, 152, 194, 195, 206, 230, 273, 296, 297, 300, 301, 326, 329, 349, 350, 353, 354, 356, 390, 433, 438, 459, 461, 469, 472, 473, 475, 478, 484, 497, 499, 500, 502, 503, 506, 509, 510, 520, 521, 528], "apach": [16, 473], "incub": 16, "blob": [16, 152, 194, 195, 296, 297, 300, 301, 326, 349, 350, 353, 354, 356, 390, 475, 484, 506, 509, 510], "master": [16, 194, 195, 206, 296, 297, 300, 301, 326, 329, 349, 350, 353, 354, 356, 390, 475, 525], "python": [16, 75, 148, 155, 157, 232, 251, 275, 295, 348, 409, 429, 431, 434, 435, 459, 461, 464, 467, 472, 475, 480, 486, 489, 495, 499, 500, 502, 503, 505, 508, 510, 514, 515, 524], "contrib": [16, 295, 348], "py": [16, 148, 152, 172, 197, 214, 215, 297, 299, 300, 301, 328, 350, 352, 353, 354, 409, 435, 439, 461, 464, 472, 475, 480, 482, 483, 484, 490, 493, 497, 499, 500, 502, 503, 505, 506, 508, 509, 510, 517, 520, 523], "microsoft": [16, 438, 439], "onnxruntim": [16, 214, 215, 226, 232, 239, 269, 275, 282, 304, 384, 439, 457, 458, 471, 472, 476, 498, 516], "main": [16, 151, 179, 184, 201, 206, 254, 329, 416, 435, 458, 461, 464, 475, 482, 484, 496, 505, 514, 517, 519], "tool": [16, 148, 292, 429, 438, 439, 475, 488, 492, 498, 501, 502, 503, 514, 515, 517], "arrai": [16, 43, 44, 148, 157, 247, 288, 299, 310, 352, 429, 524], "small": [16, 67, 68, 69, 70, 397, 436, 500, 501, 514, 519, 525, 528], "probabl": [16, 214, 215, 423, 519], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 188, 201, 301, 354, 433, 475, 488, 492, 501, 508, 509, 514, 523], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 158], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 157, 177, 197, 218, 219, 227, 230, 249, 261, 262, 270, 273, 327, 328, 345, 390, 406, 418, 436, 441, 459, 474, 494, 514, 517, 522, 525], "qoper": [18, 34, 214, 215, 466, 498], "float16activationoper": 18, "float16": [18, 21, 43, 459, 519], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 303, 356, 467, 474, 490, 493, 520], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 435, 522], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 148, 346, 407], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 165, 293, 439], "mode": [41, 42, 43, 45, 110, 157, 162, 239, 282, 299, 345, 352, 365, 406, 426, 428, 429, 439, 440, 461, 471, 488, 492, 500, 501, 517, 518, 519, 525], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 165, 166, 171, 214, 215, 218, 219, 261, 262, 292, 293, 303, 338, 345, 356, 395, 399, 406, 414, 421, 428, 429, 434, 438, 439, 441, 461, 468, 469, 474, 475, 476, 485, 497, 498, 499, 500, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528], "add_qdq_pair_to_weight": [41, 214, 215, 517], "optypes_to_exclude_output_qu": [41, 214, 215, 517], "dedicated_qdq_pair": [41, 214, 215, 517], "smoothquant": [42, 162, 165, 170, 438, 515, 519, 526], "onnxrt": [42, 43, 44, 230, 232, 239, 247, 273, 275, 282, 288, 303, 356, 383, 427, 439, 461, 476, 497, 517, 528], "get_quant_dequant_output": 42, "input_data": [42, 458], "output_data": 42, "loss": [42, 177, 214, 215, 249, 294, 303, 318, 323, 331, 356, 418, 457, 461, 462, 463, 464, 465, 474, 475, 476, 486, 498, 500, 513, 514, 515, 517, 519, 522, 525, 527], "output": [42, 43, 44, 53, 57, 59, 74, 98, 105, 110, 148, 165, 166, 180, 190, 191, 196, 210, 212, 214, 215, 218, 219, 252, 256, 261, 262, 292, 293, 296, 326, 349, 356, 357, 365, 390, 418, 424, 425, 429, 435, 439, 440, 462, 463, 464, 466, 468, 470, 474, 475, 477, 486, 495, 496, 498, 503, 504, 508, 509, 510, 513, 514, 516, 517, 519, 520, 522, 523, 524, 525, 527], "numpi": [42, 43, 67, 68, 70, 105, 148, 247, 288, 299, 310, 352, 467, 522, 524], "7": [42, 166, 172, 214, 215, 367, 441, 456, 467, 468, 472, 475, 514, 517, 520, 522, 525, 528], "bit": [42, 44, 149, 165, 166, 214, 215, 408, 441, 457, 463, 476, 515, 517, 519, 522], "execut": [42, 43, 53, 151, 157, 172, 197, 198, 199, 214, 215, 328, 332, 334, 389, 390, 391, 393, 418, 421, 428, 429, 461, 462, 463, 475, 476, 480, 481, 488, 489, 492, 495, 496, 497, 498, 502, 505, 513, 514, 517, 519, 521, 525, 528], "provid": [42, 43, 102, 105, 110, 190, 218, 219, 247, 261, 262, 288, 294, 299, 318, 323, 331, 332, 352, 357, 390, 418, 422, 424, 436, 438, 439, 440, 441, 456, 458, 461, 463, 464, 465, 471, 472, 474, 475, 476, 477, 478, 482, 486, 489, 495, 496, 497, 503, 504, 514, 516, 517, 519, 522, 523, 525, 526, 527, 528], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 215, 292, 293, 466], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 152, 155, 157, 165, 166, 171, 176, 180, 183, 188, 190, 192, 194, 195, 196, 197, 201, 202, 203, 204, 206, 207, 208, 214, 215, 218, 219, 229, 230, 231, 232, 233, 234, 235, 237, 247, 250, 256, 257, 261, 262, 272, 273, 274, 275, 276, 277, 278, 280, 288, 296, 299, 300, 301, 303, 312, 313, 315, 316, 317, 318, 323, 326, 328, 330, 331, 332, 335, 338, 349, 352, 353, 354, 356, 357, 367, 390, 394, 399, 408, 409, 414, 418, 428, 429, 433, 434, 435, 436, 439, 440, 441, 457, 458, 459, 462, 463, 464, 466, 467, 468, 471, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 486, 488, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 508, 509, 510, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "quant_dequant_data": 42, "qtype": [42, 43, 439], "3": [42, 44, 148, 157, 199, 215, 232, 247, 275, 288, 299, 352, 409, 429, 435, 436, 438, 457, 458, 459, 462, 464, 466, 468, 469, 472, 474, 475, 476, 478, 482, 486, 488, 492, 497, 502, 503, 505, 506, 508, 512, 514, 516, 517, 519, 520, 521, 522, 524, 525, 528], "scheme": [42, 43, 44, 149, 160, 165, 166, 439, 440, 441, 458, 468, 486, 519, 525, 527], "sym": [42, 43, 44, 166, 440, 441, 468, 517, 519, 527], "dequant": [42, 43, 44, 57, 88, 91, 92, 93, 94, 96, 152, 165, 166, 429, 435, 440, 522, 523], "asym": [42, 43, 44, 149, 160, 165, 166, 441, 468, 519, 527], "ortsmoothqu": 42, "fake": [42, 44, 113, 160, 162, 166, 170, 408, 475, 517, 519, 522], "channel": [42, 43, 44, 143, 162, 166, 170, 171, 188, 191, 196, 214, 215, 243, 247, 285, 288, 326, 438, 439, 441, 471, 472, 478, 480, 485, 500, 514, 519, 524, 528], "For": [42, 44, 165, 166, 170, 190, 191, 194, 195, 206, 215, 232, 247, 275, 288, 300, 301, 303, 326, 329, 353, 354, 356, 357, 390, 433, 435, 437, 439, 441, 462, 463, 464, 466, 468, 471, 478, 480, 481, 483, 486, 497, 498, 503, 514, 518, 519, 522, 523, 525, 527, 528], "more": [42, 148, 162, 170, 194, 195, 247, 288, 326, 436, 437, 438, 440, 457, 459, 462, 464, 466, 469, 471, 472, 475, 476, 478, 486, 490, 493, 498, 503, 512, 513, 514, 518, 519, 522, 525, 526, 528], "detail": [42, 162, 170, 173, 190, 247, 288, 429, 430, 433, 438, 440, 441, 457, 462, 468, 469, 470, 474, 475, 476, 478, 486, 495, 503, 504, 514, 519, 520, 521, 523, 525, 526], "pleas": [42, 151, 152, 162, 170, 186, 194, 195, 196, 204, 205, 206, 214, 215, 230, 231, 232, 235, 273, 274, 275, 278, 326, 328, 329, 356, 390, 409, 435, 436, 437, 438, 439, 456, 457, 459, 463, 464, 466, 472, 474, 476, 478, 479, 483, 486, 502, 503, 504, 514, 517, 518, 519, 520, 521, 522, 525, 526], "refer": [42, 151, 152, 162, 170, 186, 194, 195, 196, 204, 205, 206, 210, 214, 215, 230, 273, 296, 297, 303, 326, 328, 329, 349, 350, 356, 390, 409, 435, 439, 440, 456, 458, 459, 461, 463, 464, 466, 470, 472, 473, 474, 475, 476, 478, 483, 486, 497, 498, 500, 502, 503, 504, 512, 516, 520, 524, 525], "accur": [42, 151, 162, 170, 205, 514, 519, 522], "effici": [42, 162, 170, 436, 438, 457, 458, 462, 478, 503, 513, 514, 515, 519, 522, 525], "post": [42, 97, 98, 151, 162, 170, 204, 215, 218, 219, 261, 262, 390, 433, 438, 439, 440, 461, 463, 464, 466, 471, 472, 478, 484, 495, 505, 514, 515, 519, 522, 523, 525], "train": [42, 56, 80, 151, 162, 170, 176, 198, 199, 202, 204, 205, 214, 215, 218, 219, 230, 232, 247, 257, 261, 262, 273, 275, 288, 289, 305, 328, 348, 390, 421, 436, 438, 439, 440, 446, 459, 461, 462, 463, 466, 471, 476, 478, 484, 495, 500, 508, 513, 515, 519, 521, 522, 525, 527], "larg": [42, 43, 162, 170, 205, 438, 458, 462, 475, 515, 519, 522, 528], "languag": [42, 162, 170, 205, 296, 349, 433, 438, 466, 499, 515, 519, 522], "2": [42, 43, 44, 53, 74, 105, 109, 157, 162, 166, 168, 170, 172, 192, 198, 199, 214, 215, 231, 248, 274, 299, 301, 303, 328, 335, 352, 354, 356, 367, 394, 409, 429, 435, 439, 457, 458, 459, 461, 462, 468, 471, 472, 473, 474, 476, 499, 505, 506, 508, 509, 510, 512, 514, 515, 517, 519, 520, 521, 522, 524, 525, 526], "spiq": [42, 162, 170, 522], "free": [42, 162, 170, 204, 218, 219, 261, 262, 390, 433, 484, 489, 497, 505, 512, 521, 522], "per": [42, 43, 44, 162, 166, 170, 172, 214, 215, 248, 423, 439, 441, 458, 503, 514, 518, 519, 528], "we": [42, 43, 67, 68, 70, 74, 86, 143, 157, 162, 170, 171, 172, 190, 194, 201, 214, 215, 229, 248, 250, 272, 296, 299, 349, 352, 397, 433, 435, 439, 440, 441, 458, 461, 464, 466, 468, 474, 475, 482, 483, 486, 490, 493, 495, 496, 498, 501, 508, 509, 510, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 525, 526], "onli": [42, 44, 53, 63, 70, 86, 109, 115, 143, 157, 162, 164, 166, 170, 171, 172, 179, 184, 187, 193, 200, 214, 215, 230, 248, 250, 254, 273, 293, 305, 326, 328, 339, 390, 400, 408, 409, 414, 429, 438, 439, 440, 441, 456, 457, 458, 461, 462, 464, 467, 468, 475, 476, 483, 496, 514, 515, 516, 517, 522, 523, 525, 526, 527], "inplac": [42, 162], "mean": [42, 44, 162, 166, 192, 201, 214, 215, 243, 247, 285, 288, 301, 303, 326, 338, 354, 356, 399, 435, 440, 441, 458, 461, 464, 468, 474, 475, 481, 500, 514, 517, 519, 522, 524, 525, 527, 528], "weight": [42, 43, 44, 60, 61, 122, 141, 143, 148, 149, 152, 162, 164, 165, 166, 171, 186, 187, 191, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 214, 215, 293, 326, 328, 345, 356, 390, 397, 406, 408, 414, 429, 430, 438, 439, 440, 441, 457, 461, 463, 468, 470, 475, 497, 508, 512, 514, 515, 516, 517, 522, 523, 525, 526, 527], "chang": [42, 96, 143, 162, 171, 198, 199, 201, 202, 204, 205, 208, 214, 215, 328, 330, 397, 429, 434, 440, 458, 464, 467, 473, 475, 478, 488, 489, 492, 495, 501, 514, 523, 524, 525], "you": [42, 157, 162, 214, 215, 228, 230, 271, 273, 328, 356, 390, 434, 435, 440, 458, 459, 461, 464, 472, 473, 474, 476, 478, 480, 481, 483, 488, 492, 495, 496, 497, 498, 499, 500, 501, 503, 514, 517, 520, 521, 522, 523, 526], "can": [42, 44, 143, 152, 157, 162, 171, 183, 190, 191, 192, 197, 205, 206, 208, 214, 215, 218, 219, 229, 232, 247, 248, 250, 261, 262, 272, 275, 288, 299, 301, 303, 326, 328, 330, 352, 354, 356, 357, 367, 390, 418, 429, 435, 436, 438, 439, 440, 441, 456, 458, 459, 461, 462, 463, 464, 466, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 488, 489, 490, 492, 493, 495, 496, 498, 500, 501, 502, 503, 505, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528], "recov": [42, 162, 429, 439, 463], "helper": [43, 45, 110, 116, 148, 165, 230, 231, 232, 246, 273, 274, 275, 287, 291, 292, 293, 365, 427], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 214, 215, 233, 234, 243, 247, 276, 277, 285, 288, 440, 441, 459, 461, 466, 468, 478, 500, 516, 517, 519, 522, 523, 524, 527], "its": [43, 60, 96, 148, 152, 190, 199, 202, 204, 210, 215, 226, 232, 247, 269, 275, 288, 291, 297, 298, 328, 335, 350, 351, 394, 433, 459, 462, 473, 474, 476, 486, 488, 492, 495, 496, 514, 519, 521, 524, 525], "string": [43, 45, 116, 148, 151, 155, 157, 172, 177, 179, 183, 184, 190, 192, 197, 206, 207, 208, 210, 211, 214, 215, 232, 249, 254, 275, 289, 294, 296, 299, 305, 306, 307, 309, 310, 318, 323, 326, 327, 328, 329, 330, 331, 349, 352, 361, 365, 421, 426, 429, 474, 522, 524], "represent": [43, 155, 433, 435, 457, 463, 514, 517], "quanttyp": [43, 408], "repres": [43, 192, 196, 197, 206, 207, 210, 232, 237, 275, 280, 299, 301, 303, 352, 354, 356, 433, 441, 457, 459, 466, 503, 514, 517, 519, 525], "make_quant_nod": 43, "make": [43, 105, 143, 171, 183, 192, 197, 206, 208, 228, 271, 326, 328, 330, 429, 433, 439, 440, 456, 458, 468, 474, 475, 483, 488, 492, 495, 497, 514, 517, 518, 519, 521, 522, 525], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 215], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 230, 273, 429, 434, 457, 459, 474, 514, 519, 522, 525], "transpos": [43, 73, 196, 243, 247, 288, 292, 326, 524], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 166, 467, 468, 519, 522, 525], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 476, 478, 486, 518], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 172, 231, 235, 238, 274, 278, 281, 338, 399, 474, 499, 525], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 152, 165, 243, 247, 285, 288, 296, 299, 300, 301, 303, 349, 352, 353, 354, 356, 370, 390, 397, 418, 428, 429, 433, 436, 438, 458, 461, 462, 464, 471, 473, 474, 475, 483, 484, 495, 496, 499, 503, 504, 505, 506, 512, 514, 515, 517, 519, 521, 522, 523, 524, 525, 526, 528], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 166, 243, 285, 300, 301, 310, 335, 353, 354, 394, 429, 474, 495, 500, 501, 517, 519, 522, 524, 525], "To": [43, 299, 352, 367, 434, 440, 441, 459, 461, 464, 476, 479, 482, 488, 490, 492, 493, 497, 501, 514, 516, 518, 519, 520, 522, 525, 527], "pack": [43, 61], "comput": [43, 44, 105, 152, 165, 296, 297, 300, 301, 303, 349, 350, 353, 354, 356, 418, 429, 457, 458, 463, 466, 474, 475, 476, 478, 489, 498, 514, 515, 517, 519, 522, 525], "linear": [43, 151, 160, 164, 165, 166, 170, 188, 190, 191, 196, 201, 210, 214, 215, 326, 435, 462, 466, 475, 514, 519, 522, 525], "transform": [43, 50, 143, 145, 146, 147, 151, 161, 164, 204, 230, 231, 232, 233, 234, 235, 237, 239, 241, 273, 274, 275, 276, 277, 278, 280, 282, 284, 295, 348, 435, 436, 438, 457, 459, 462, 463, 464, 465, 469, 475, 478, 483, 484, 485, 486, 498, 506, 509, 510, 514, 515, 518, 519, 522, 523, 525, 527, 528], "when": [43, 53, 64, 70, 148, 155, 157, 191, 197, 202, 210, 214, 215, 230, 231, 239, 247, 273, 274, 282, 288, 297, 327, 328, 350, 390, 418, 433, 436, 440, 458, 459, 475, 486, 488, 489, 492, 496, 497, 500, 501, 502, 504, 508, 514, 517, 519, 522, 524, 525], "uint8": [43, 166, 243, 285, 299, 347, 352, 408, 439, 459, 468, 516, 517, 524, 527], "rmin": [43, 517], "rmax": [43, 517], "m": [43, 152, 166, 194, 195, 214, 215, 326, 434, 462, 472, 478, 480, 483, 486, 490, 493, 503, 514, 528], "where": [43, 157, 214, 215, 299, 303, 352, 356, 408, 429, 441, 457, 461, 462, 488, 492, 496, 522, 523], "max": [43, 104, 143, 166, 171, 184, 214, 215, 247, 288, 300, 301, 335, 353, 354, 394, 429, 438, 461, 472, 475, 498, 500, 514, 517, 519, 522, 524, 525], "ab": [43, 151, 166, 186, 204, 205, 328, 514, 517, 522], "np": [43, 247, 288, 335, 394, 464, 505, 522, 524, 525], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 165, 186, 194, 210, 215, 233, 234, 276, 277, 300, 301, 326, 328, 338, 353, 354, 399, 419, 429, 457, 459, 474, 475, 486, 498, 512, 514, 517, 519, 521, 522, 525, 527], "quantize_data": 43, "add": [43, 52, 64, 109, 119, 148, 179, 210, 214, 215, 230, 232, 254, 273, 275, 327, 345, 406, 429, 434, 435, 441, 458, 459, 464, 466, 468, 474, 475, 490, 493, 497, 498, 505, 508, 509, 521, 522, 523, 525, 526], "necessari": [43, 206, 433, 436, 440, 477, 496, 514, 521, 525], "intermedi": [43, 152, 177, 214, 215, 249, 435, 471, 517], "full": [43, 230, 231, 232, 273, 274, 275, 429, 438, 457, 459, 461, 467, 473, 496, 501, 514, 519, 520], "equat": [43, 301, 303, 354, 356, 517, 522], "r": [43, 143, 171, 461, 472, 496, 497, 499, 500, 502, 503, 517, 528], "": [43, 44, 105, 143, 148, 157, 171, 190, 191, 192, 196, 197, 198, 199, 202, 204, 205, 210, 211, 212, 214, 215, 229, 232, 246, 247, 248, 250, 252, 272, 275, 287, 288, 301, 326, 328, 354, 356, 357, 361, 390, 426, 429, 433, 434, 436, 440, 441, 461, 462, 464, 466, 468, 471, 475, 476, 483, 486, 488, 492, 495, 498, 500, 503, 513, 514, 515, 516, 517, 519, 520, 521, 522, 525, 526, 527, 528], "q": [43, 44, 107, 109, 131, 519, 522], "z": [43, 457, 462, 522], "real": [43, 233, 250, 276, 440, 457, 464, 497, 504, 515, 517], "origin": [43, 44, 158, 162, 165, 190, 202, 210, 215, 230, 247, 248, 273, 288, 312, 313, 315, 316, 317, 327, 328, 347, 395, 408, 429, 434, 459, 483, 514, 517, 524, 525, 527], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 157, 158], "new_dtyp": 43, "cast": [43, 57, 518, 524], "info": [43, 165, 166, 194, 195, 210, 245, 250, 255, 326, 361, 425, 429, 435, 461, 477, 505, 510], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 429], "low": [43, 218, 219, 233, 234, 261, 262, 276, 277, 294, 304, 331, 357, 439, 440, 456, 457, 459, 464, 475, 476, 500, 515, 517, 519, 522, 525], "high": [43, 233, 234, 276, 277, 459, 461, 472, 500, 515, 525], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 165, 190, 201, 211, 212, 215, 429, 439, 458, 468, 470, 475, 516, 527], "kwarg": [43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 158, 165, 166, 188, 214, 215, 232, 245, 247, 252, 255, 275, 288, 344, 346, 356, 357, 358, 360, 362, 364, 365, 366, 390, 405, 407, 409, 418, 424, 425, 428, 429, 458], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 303, 310, 335, 356, 394, 429, 439, 461, 481, 488, 492, 495, 496, 498, 500, 514, 519, 521, 522, 523, 525], "item": [43, 210, 212, 214, 215, 246, 287, 327, 345, 406, 457, 464, 514, 522, 525], "trt_env_setup": 43, "environ": [43, 172, 248, 433, 456, 488, 492, 495, 503, 506, 508, 509, 510, 525], "variabl": [43, 155, 172, 207, 214, 215, 232, 248, 275, 335, 394, 408, 472, 514, 525], "tensorrt": [43, 457, 476, 517], "to_numpi": 43, "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 160, 165, 166, 408, 519], "has_zp": 44, "blob_siz": 44, "how": [44, 157, 166, 176, 186, 192, 198, 199, 204, 205, 214, 215, 247, 288, 289, 326, 434, 435, 437, 439, 458, 459, 462, 463, 464, 470, 474, 475, 489, 490, 493, 494, 495, 497, 508, 509, 510, 514, 515, 517, 522, 524, 525, 526, 527], "mani": [44, 166, 356, 390, 458, 472, 519, 525, 527], "element": [44, 166, 194, 195, 210, 228, 271, 299, 326, 352, 429, 459, 471, 474, 514, 519, 522], "one": [44, 109, 110, 115, 157, 165, 166, 172, 192, 196, 201, 204, 205, 206, 208, 247, 257, 288, 296, 299, 303, 305, 326, 329, 330, 349, 352, 356, 436, 439, 457, 462, 463, 464, 468, 471, 472, 474, 475, 476, 478, 479, 483, 484, 486, 488, 489, 492, 495, 496, 497, 500, 501, 502, 503, 505, 512, 513, 514, 516, 517, 519, 520, 522, 524, 525], "zp": [44, 166, 522], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 160, 165, 166, 522], "k_block": 44, "q_weight": 44, "accuracy_level": 44, "matmulfpq4": 44, "shape": [44, 105, 148, 192, 233, 234, 243, 247, 276, 277, 285, 288, 299, 352, 438, 459, 468, 469, 475, 497, 498, 519, 522, 524], "accuraci": [44, 172, 210, 214, 215, 218, 219, 261, 262, 289, 294, 303, 318, 323, 331, 356, 357, 367, 390, 395, 409, 418, 426, 435, 438, 440, 441, 457, 458, 459, 461, 463, 464, 465, 466, 474, 475, 486, 495, 497, 504, 505, 508, 509, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 526, 527, 528], "level": [44, 190, 395, 409, 425, 433, 505, 522, 525], "unset": 44, "jbla": 44, "kernel": [44, 170, 214, 215, 439, 440, 525], "fp16": [44, 215, 345, 406, 517], "4": [44, 53, 149, 160, 165, 166, 172, 192, 201, 214, 215, 239, 242, 243, 247, 282, 285, 288, 296, 297, 299, 349, 350, 352, 408, 409, 414, 433, 439, 441, 456, 464, 465, 468, 471, 472, 474, 475, 483, 503, 505, 509, 514, 517, 519, 522, 524, 525, 528], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "32": [44, 149, 166, 188, 408, 414, 464, 470, 519, 528], "ratio": [44, 143, 171, 192, 197, 210, 214, 215, 243, 247, 285, 288, 328, 459, 475, 498, 514, 524, 528], "group": [44, 166, 207, 313, 438, 471, 514, 519, 523, 524, 525, 528], "clip": [44, 166, 519, 522], "qdq_tensor": 44, "quant": [44, 148, 165, 166, 214, 215, 345, 406, 435, 475, 517], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 247, 288, 408, 435, 439, 461, 467, 471, 476, 481, 483, 499, 500, 501, 517, 518, 519, 522, 523, 524, 526], "divis": 44, "pade": 44, "rtn_quantiz": [44, 166], "weight_config": [44, 149, 151, 164, 166], "round": [44, 143, 166, 171, 414, 438, 515, 517, 519, 522], "nearst": [44, 166], "method": [44, 141, 143, 155, 157, 165, 166, 183, 207, 214, 215, 223, 228, 229, 230, 232, 239, 247, 250, 266, 271, 272, 273, 275, 282, 288, 309, 310, 311, 345, 406, 408, 421, 422, 424, 425, 435, 436, 438, 457, 458, 459, 461, 462, 463, 474, 475, 513, 514, 517, 518, 519, 522, 524, 525], "modelproto": [44, 291, 357, 477], "onnxmodel": [44, 364, 383], "fc2": [44, 165, 166], "rtn": [44, 165, 414, 519], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 160, 164, 176, 201, 203, 257, 297, 350, 433, 440, 441, 475, 478, 480, 486, 495, 499, 500, 505, 513, 514, 517, 518, 521, 522, 525, 526, 527], "salient": [44, 166, 514, 519], "apply_awq_clip": 44, "mse": [44, 165, 166, 214, 215, 295, 303, 337, 348, 356, 390, 398, 429, 461, 474, 500, 516, 519, 520], "prepare_input": 44, "n_sampl": [44, 149, 165, 166], "sampl": [44, 77, 165, 166, 214, 215, 223, 228, 230, 231, 232, 243, 247, 266, 271, 273, 274, 275, 285, 288, 303, 310, 335, 356, 394, 436, 458, 459, 465, 471, 496, 517, 519, 522, 524, 525, 527, 528], "session": [44, 148, 229, 272, 365, 475, 523], "awq_quant": [44, 166], "enable_auto_scal": [44, 166, 519], "enable_mse_search": [44, 166, 414, 519], "awar": [44, 149, 152, 166, 176, 215, 257, 305, 326, 397, 418, 439, 440, 441, 457, 463, 464, 466, 471, 495, 505, 513, 515, 519, 525], "awq": [44, 166, 519], "enabl": [44, 109, 152, 166, 197, 214, 215, 328, 440, 441, 464, 472, 476, 478, 480, 483, 484, 486, 497, 499, 500, 502, 505, 514, 515, 519, 525], "gptq": [44, 166, 519], "w": [44, 151, 247, 288, 514, 522, 524], "h": [44, 214, 215, 247, 288, 464, 503, 504, 508, 509, 510, 524], "blocksiz": 44, "percdamp": [44, 519], "01": [44, 214, 215, 475, 516, 519, 525, 527, 528], "actord": [44, 519], "perchannel": 44, "hessian": [44, 152, 397, 519, 525], "matrix": [44, 356, 390, 438, 486, 526], "percent": 44, "averag": [44, 300, 301, 303, 353, 354, 356, 474, 475, 519, 525, 528], "diagon": [44, 519], "dampen": 44, "rearrang": [44, 204, 514, 519], "consid": [44, 148, 303, 356, 433, 457, 462, 496, 525], "diag": 44, "error": [44, 105, 152, 157, 303, 338, 356, 399, 425, 461, 474, 479, 500, 501, 504, 519, 522, 525], "gptq_quantiz": [44, 166], "get_ops_recurs": 45, "prefix": [45, 148, 150, 157, 158, 163, 165, 172, 478, 483, 523], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 152, 157, 165, 183, 211, 212, 214, 215, 246, 287, 299, 306, 309, 311, 352, 417, 429], "yaml": [45, 210, 211, 212, 215, 218, 219, 230, 232, 248, 261, 262, 273, 275, 289, 294, 305, 306, 307, 309, 318, 323, 331, 332, 428, 429, 439, 441, 470, 474, 475, 512, 516, 523, 524], "file": [45, 105, 148, 155, 157, 158, 165, 169, 180, 206, 210, 211, 214, 215, 218, 219, 230, 231, 232, 235, 246, 247, 253, 256, 261, 262, 273, 274, 275, 278, 287, 288, 289, 294, 299, 305, 306, 307, 309, 318, 323, 327, 329, 331, 332, 352, 357, 367, 373, 374, 378, 390, 428, 429, 434, 436, 439, 440, 441, 464, 467, 470, 473, 474, 475, 477, 481, 490, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 508, 509, 510, 512, 516, 517, 519, 523, 524], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 151, 258, 294, 299, 331, 344, 345, 352, 356, 390, 405, 406, 409, 429, 435, 442, 444, 448, 451, 454, 461, 466, 471, 475, 480, 484, 485, 486, 502, 503, 507, 520, 521, 525, 529], "pytorch_ipexadaptor": 45, "intel": [45, 179, 194, 195, 206, 251, 254, 290, 295, 302, 303, 326, 329, 337, 343, 348, 355, 356, 368, 390, 398, 404, 431, 433, 434, 436, 437, 439, 440, 441, 457, 459, 460, 462, 463, 465, 466, 468, 469, 473, 476, 477, 478, 483, 485, 486, 497, 498, 499, 500, 502, 503, 512, 513, 514, 515, 517, 518, 519, 520, 522, 523, 525, 526, 527], "extens": [45, 155, 157, 429, 436, 438, 439, 468, 471, 472, 475, 476, 477, 479, 484, 485, 486, 490, 493, 494, 498, 514, 515, 517, 519, 522, 525, 526, 527], "ipex": [45, 159, 165, 214, 215, 471, 475, 476, 480, 484, 485, 522], "pytorch_fxadaptor": 45, "fx": [45, 165, 214, 339, 400, 471, 476, 484, 485, 499, 515, 517, 518], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 190, 229, 272, 294, 358, 365, 389, 435, 439, 459, 462, 464, 470, 477, 478, 497, 500, 517, 518, 523], "pytorchweightonlyadaptor": 45, "querybackendcap": [46, 439, 440], "tensorflowadaptor": 47, "stock": [47, 484, 522], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 214, 215, 292, 476, 517, 522], "tensorflowqueri": [47, 439], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 214, 475], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 345, 406, 440, 441], "graphconvert": 48, "qt_config": 48, "recip": [48, 190, 214, 215, 294, 331, 475, 519, 522, 525], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 440, 518], "data_load": [48, 49, 439], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 214, 516], "without": [49, 90, 148, 202, 247, 288, 328, 347, 408, 433, 462, 464, 475, 486, 497, 500, 514, 515, 516, 525, 526], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 187], "bf16convert": [50, 518], "biasadd": [52, 59, 64, 66, 109, 468], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 143, 151, 440, 441, 461, 466, 468, 500, 522, 523, 525], "addv2": [52, 69, 468], "layout": 53, "convertlayoutoptim": 53, "convers": [53, 54, 215, 305, 434, 439, 440, 475, 476, 517, 518, 522], "optim": [53, 74, 75, 79, 80, 116, 118, 178, 181, 182, 183, 185, 187, 190, 199, 204, 211, 214, 215, 251, 257, 294, 295, 311, 331, 335, 348, 394, 418, 419, 426, 429, 436, 438, 456, 461, 462, 463, 464, 468, 469, 471, 472, 475, 477, 478, 480, 482, 483, 486, 489, 497, 500, 501, 502, 504, 506, 515, 516, 517, 518, 519, 521, 522, 523, 525, 527], "nchw": [53, 243], "nhwc": [53, 243], "It": [53, 157, 176, 180, 192, 218, 219, 256, 261, 262, 301, 303, 310, 326, 331, 338, 354, 356, 357, 390, 395, 399, 418, 439, 440, 441, 457, 461, 462, 475, 481, 484, 489, 495, 496, 497, 498, 500, 501, 503, 514, 517, 519, 520, 521, 525, 527], "exist": [53, 172, 212, 248, 365, 429, 466, 474, 482, 525], "abov": [53, 439, 440, 441, 462, 497, 498, 500, 503, 514, 517, 522, 525], "graph_def": [53, 148, 292, 357, 365, 389, 390], "leakyrelu": [54, 522], "convertleakyreluoptim": 54, "below": [54, 66, 74, 214, 215, 332, 356, 390, 434, 435, 438, 439, 440, 441, 458, 461, 462, 464, 470, 474, 478, 480, 488, 489, 492, 495, 498, 503, 512, 513, 514, 516, 517, 519, 521, 522, 523, 525, 526], "subgraph": [54, 66, 105, 163, 525], "mul": [54, 65, 66, 69, 166, 170, 466, 519, 522], "maximum": [54, 192, 197, 214, 215, 230, 247, 273, 288, 297, 328, 335, 350, 394, 441, 457, 459, 461, 475, 514, 517, 522, 524], "note": [54, 155, 196, 299, 339, 352, 400, 436, 438, 440, 441, 458, 461, 464, 466, 468, 472, 475, 480, 483, 488, 492, 495, 497, 501, 503, 505, 514, 517, 519, 522, 523, 525, 526, 527], "coeffici": [54, 207, 514], "less": [54, 148, 165, 214, 215, 429, 456, 462, 475, 502, 514], "than": [54, 148, 230, 247, 273, 288, 429, 436, 438, 456, 459, 470, 500, 508, 512, 513, 514, 517, 519, 521, 524, 525], "valid": [54, 67, 68, 105, 197, 200, 210, 214, 215, 232, 275, 299, 327, 328, 352, 365, 436, 438, 439, 459, 461, 462, 465, 468, 471, 473, 475, 486, 500, 514, 517, 519, 520], "nan": 55, "random": [55, 148, 183, 214, 215, 243, 247, 285, 288, 295, 311, 335, 337, 348, 394, 398, 429, 436, 475, 514, 516, 524, 527], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98], "consist": [55, 63, 434, 435, 503, 522, 525], "placehold": [56, 228, 271], "convertplaceholdertoconst": 56, "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 165, 183, 184, 185, 186, 187, 190, 191, 197, 198, 199, 200, 202, 204, 205, 207, 211, 214, 215, 232, 275, 295, 316, 317, 319, 324, 328, 345, 348, 406, 439, 459, 468, 471, 475, 496, 513, 516, 522, 525, 528], "inject": [59, 475], "dummi": [59, 190, 233, 234, 276, 277, 303, 356, 438, 459, 469, 474, 475, 497], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 435, 439, 468], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 223, 266, 409, 436, 440, 441, 458, 516, 519, 525], "fetch": [61, 165, 169, 223, 266, 440, 459, 508, 509, 510], "reshap": [61, 67, 68, 73, 522], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 162, 170, 425, 435, 437, 458, 503, 522], "fold": [62, 63, 165, 166, 293, 468, 519, 522], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 191, 194, 195, 214, 215, 230, 246, 247, 273, 287, 288, 297, 301, 326, 350, 354, 439, 459, 468, 514, 519, 524], "self": [63, 165, 166, 190, 214, 215, 367, 439, 440, 458, 459, 471, 474, 497, 521, 523, 525], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 157, 191, 214, 215, 230, 273, 395, 429, 461, 475, 488, 492, 496, 508, 509, 519, 522, 525, 527], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 468], "math": [66, 517], "fuseconvwithmathoptim": 66, "elimin": [66, 502], "sub": [66, 165, 172, 190, 248, 436, 525], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 365, 375, 440], "strip": [67, 68, 70, 83, 84, 148, 523], "port": [67, 68, 70, 497, 504], "other": [67, 68, 70, 155, 162, 170, 229, 272, 301, 354, 365, 433, 435, 440, 441, 461, 468, 471, 473, 475, 477, 498, 512, 514, 517, 522, 524, 525, 528], "underli": [67, 68, 70, 157], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 218, 219, 261, 262, 390, 409, 417, 418, 435, 439, 458, 459, 462, 463, 464, 474, 475, 517, 522, 523, 525], "entri": [67, 68, 70, 152, 179, 254, 294, 332, 416, 429, 473], "index": [67, 68, 70, 105, 172, 210, 215, 223, 228, 232, 266, 271, 275, 310, 429, 459, 474, 496, 500, 522], "everi": [67, 68, 70, 192, 195, 197, 214, 215, 326, 328, 439, 458, 483, 488, 492, 519, 525], "identifi": [67, 68, 70, 157, 299, 352, 365, 503, 514, 519], "want": [67, 68, 70, 190, 214, 215, 228, 230, 271, 273, 328, 395, 418, 435, 439, 458, 459, 464, 475, 483, 495, 496, 503, 512, 521, 523, 525], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 155, 157, 165, 187, 193, 200, 210, 299, 326, 327, 328, 352, 357, 409, 438, 497, 514, 515], "valueerror": [67, 68, 70, 165, 299, 352, 409, 467], "If": [67, 68, 70, 74, 157, 166, 172, 214, 215, 218, 219, 232, 247, 261, 262, 275, 288, 327, 357, 390, 409, 418, 434, 435, 440, 456, 458, 459, 464, 472, 473, 474, 475, 481, 489, 490, 493, 495, 501, 506, 512, 514, 517, 519, 521, 522, 523, 524, 525], "isn": [67, 68, 70], "t": [67, 68, 70, 143, 157, 171, 192, 214, 215, 247, 250, 288, 301, 354, 435, 439, 461, 462, 464, 475, 476, 496, 501, 514, 517, 519, 525, 527], "present": [67, 68, 70, 461, 503, 515, 522], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 190, 232, 275, 347, 408, 459], "ha": [67, 68, 70, 74, 151, 157, 196, 197, 248, 296, 326, 328, 349, 409, 434, 436, 439, 440, 441, 458, 466, 471, 475, 476, 481, 495, 500, 501, 503, 506, 514, 516, 517, 518, 521, 522, 525], "access": [67, 68, 70, 211, 212, 215, 424, 429, 490, 493, 497], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 157, 165, 192, 197, 198, 199, 204, 205, 214, 215, 230, 247, 273, 288, 299, 303, 310, 326, 327, 328, 332, 334, 335, 352, 356, 391, 393, 394, 408, 409, 421, 428, 429, 433, 434, 435, 436, 439, 440, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 483, 486, 489, 495, 497, 498, 500, 501, 502, 503, 506, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 215, 292, 293, 466], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 222, 247, 265, 288, 459, 462, 524], "instancenorm": [68, 522], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 461], "erf": 69, "layernorm": [70, 522], "fuselayernormoptim": 70, "remap": [70, 157], "smaller": [70, 247, 288, 462, 475, 514, 524], "case": [70, 74, 157, 166, 172, 215, 229, 246, 247, 248, 272, 287, 288, 294, 318, 323, 331, 367, 441, 458, 462, 463, 464, 468, 470, 474, 479, 483, 495, 496, 497, 500, 506, 509, 510, 512, 514, 515, 517, 519, 520, 524, 526, 527, 528], "fusedbatcnormv3": 70, "And": [70, 434, 435, 456, 475, 481, 522], "further": [70, 215, 433, 476, 477, 478, 480, 489, 495, 517], "restrict": [70, 157, 214, 215, 514, 521], "2d": [70, 522], "3d": [70, 515, 522], "kera": [70, 116, 179, 190, 210, 215, 232, 239, 254, 275, 282, 360, 365, 440, 458, 464, 477, 485, 486, 520], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 211, 214, 215, 475, 514], "cfg": [71, 72, 165, 211, 345, 406, 421, 440, 441], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 439, 440, 441, 468, 475, 517, 519, 520, 522, 526], "ident": [74, 80, 191, 433, 462], "three": [74, 210, 230, 273, 334, 391, 393, 435, 439, 440, 457, 472, 476, 489, 503, 513, 517, 518, 521, 522, 523], "d": [74, 165, 462, 470, 496, 498, 504, 514, 528], "those": [74, 157, 338, 399, 429, 461, 462, 463, 470, 475, 476, 513, 514, 517, 525], "child": [74, 151, 158, 523], "b1": 74, "c1c2": 74, "d1": [74, 429], "c1": 74, "c2": 74, "memori": [74, 165, 294, 318, 323, 331, 367, 429, 457, 458, 463, 475, 476, 478, 512, 514, 517, 519, 522, 525, 528], "bound": [74, 172, 184, 247, 288, 299, 335, 352, 394, 474, 524], "like": [74, 96, 98, 148, 157, 190, 210, 215, 218, 219, 220, 232, 261, 262, 263, 275, 294, 303, 328, 331, 332, 356, 365, 390, 418, 434, 435, 436, 439, 440, 461, 462, 463, 471, 483, 498, 500, 513, 514, 517, 519, 520, 522, 525], "relu": [74, 78, 109, 435, 468, 522, 523], "relu6": [74, 468], "updat": [74, 158, 165, 186, 192, 210, 328, 356, 390, 426, 467, 474, 475, 481, 486, 489, 505, 514, 519, 522, 525, 526], "graphdef": [74, 148, 365, 389, 477], "grappler": [75, 468], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 160, 164, 177, 187, 229, 247, 249, 250, 252, 253, 272, 288, 299, 303, 352, 356, 361, 365, 518], "leverag": [75, 436, 438, 462, 466, 478, 495, 513, 517, 519, 525], "built": [75, 179, 201, 216, 217, 221, 226, 230, 231, 236, 238, 240, 241, 243, 244, 247, 252, 254, 259, 260, 264, 267, 269, 273, 274, 279, 281, 283, 284, 285, 286, 288, 332, 356, 359, 367, 390, 418, 436, 439, 459, 464, 475, 488, 492, 512, 517, 521, 524, 525, 527], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 162, 170, 435, 440, 458, 471, 475, 478, 514, 517, 518, 519, 522, 523], "print": [77, 151, 152, 190, 303, 356, 409, 429, 464, 474, 475, 497, 498, 514, 522, 525], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 155, 157, 172, 356, 390, 429, 434, 435, 439, 456, 459, 462, 463, 464, 470, 474, 475, 496, 503, 514, 516, 517, 518, 522, 527], "move": [78, 157, 435, 501, 516, 519, 520], "squeez": [78, 435], "movesqueezeafterreluoptim": 78, "match": [78, 102, 157, 190, 299, 300, 352, 353, 462, 496, 519], "pre": [79, 116, 158, 190, 218, 219, 230, 261, 262, 273, 357, 390, 418, 459, 462, 463, 475, 483, 500, 514, 515, 517, 519, 523, 525], "entranc": [79, 184, 221], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 520], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 164, 438, 515, 519, 522], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 166, 204, 215, 230, 247, 273, 288, 299, 352, 429, 439, 441, 456, 458, 459, 462, 464, 468, 475, 479, 483, 488, 492, 514, 516, 517, 519, 522, 523, 524, 525], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 478, 523], "switchoptim": 85, "condit": [85, 230, 231, 232, 247, 273, 274, 275, 288, 334, 391, 393, 459, 473, 524, 525], "graphrewriterbas": 86, "abstract": [86, 176, 184, 247, 288, 289, 294, 331, 439, 441, 470], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 478, 514], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 191, 232, 275, 296, 299, 349, 352, 433, 434, 435, 436, 439, 440, 441, 458, 459, 462, 463, 464, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 488, 492, 497, 499, 500, 503, 508, 513, 514, 516, 517, 519, 522, 523, 525], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 429, 430], "th": [89, 90], "gpu": [89, 90, 97, 157, 214, 215, 438, 456, 471, 475, 476, 480, 486, 495, 516, 517, 519], "freezevaluewithoutcalibtransform": 90, "95": [90, 303, 356, 474, 528], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 151, 156, 157, 214, 215, 429, 438, 440, 456, 457, 471, 475, 476, 478, 480, 486, 495, 503, 515, 516, 517, 518, 519, 523], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 523], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 515, 528], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 367, 435, 439, 441, 458, 475, 483, 488, 492, 496, 502, 512, 514, 515, 521, 522, 525, 528], "better": [96, 214, 215, 218, 219, 261, 262, 310, 357, 390, 418, 463, 474, 476, 514, 515, 517, 519, 521, 525], "perform": [96, 140, 172, 207, 214, 215, 230, 242, 243, 248, 273, 285, 294, 318, 323, 331, 338, 356, 367, 390, 395, 399, 434, 435, 436, 439, 440, 456, 459, 460, 461, 463, 465, 466, 471, 472, 474, 475, 476, 477, 478, 480, 484, 486, 489, 495, 501, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 525, 527, 528], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 220, 245, 247, 250, 252, 253, 255, 263, 288, 367, 436, 475, 485, 489, 495, 503, 513, 517, 522, 524, 525], "postcseoptim": 98, "duplic": [98, 108, 335, 394], "quantizev2": 98, "decreas": [98, 500, 514], "size": [98, 166, 194, 195, 222, 223, 229, 232, 238, 243, 247, 265, 266, 272, 275, 281, 285, 288, 326, 367, 429, 433, 440, 458, 459, 464, 467, 475, 495, 496, 512, 514, 519, 522, 524, 527, 528], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 196, 326, 514], "export": [101, 215, 295, 299, 348, 352, 438, 469, 481, 496, 498, 523, 526], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 215, 292, 293, 466], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 166], "onnxopschema": 104, "domain": [104, 105, 214, 215, 514, 525], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 173, 198, 199, 204, 205, 294, 299, 331, 352, 365, 384, 389, 433, 435, 441, 457, 476, 488, 492, 495, 503, 514, 515, 522, 525], "get_max_supported_opset_vers": 104, "packag": [104, 439, 467, 472, 495, 496, 515, 520, 525], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 434, 503, 504, 508, 509, 510, 525], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 165, 230, 231, 243, 247, 273, 274, 285, 288, 373, 374, 378, 440, 441, 524], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 190], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 157, 235, 247, 278, 288, 327, 459, 518, 521], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 215, 292, 293, 466], "input_shap": [105, 234, 277, 459], "input_dtyp": 105, "sometim": [105, 435, 461, 517], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 206, 246, 247, 287, 288, 296, 301, 329, 349, 354, 466, 473, 484, 506, 509, 510, 514, 515, 519, 522, 524, 528], "datatyp": [105, 165, 518, 525, 528], "save_protobuf": 105, "path": [105, 148, 158, 165, 190, 206, 210, 211, 230, 231, 232, 247, 273, 274, 275, 288, 289, 292, 293, 294, 305, 306, 307, 309, 318, 323, 327, 329, 331, 332, 345, 357, 365, 389, 390, 406, 426, 429, 435, 436, 439, 459, 461, 464, 470, 474, 475, 476, 477, 481, 484, 495, 498, 500, 503, 508, 509, 510, 513, 519, 524, 527], "as_text": 105, "save": [105, 156, 157, 187, 210, 214, 215, 232, 275, 292, 293, 332, 365, 390, 418, 419, 424, 429, 435, 439, 470, 475, 476, 477, 479, 483, 488, 492, 498, 503, 508, 509, 510, 513, 517, 519, 522], "protobuf": [105, 498], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 496], "dest": 105, "equal": [105, 143, 148, 171, 409, 429, 514, 519], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 157, 232, 275, 303, 356, 440, 465, 469, 471, 474, 486, 495, 501, 505, 514, 516, 522, 525], "df": 105, "initialize_name_count": 105, "avoid": [105, 157, 165, 166, 230, 273, 435, 523], "conflict": [105, 467], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 247, 288, 524], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 157, 192, 214, 215, 434, 462, 465, 469, 478, 483, 514, 519, 520, 522, 525], "const_node_valu": 105, "graph_output": 105, "constant": [105, 293, 295, 335, 337, 343, 348, 394, 398, 404, 422, 458, 468, 498, 524], "tf": [105, 116, 148, 190, 210, 229, 230, 231, 232, 247, 272, 273, 274, 275, 288, 363, 365, 464, 477, 515, 518, 520, 524], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 440], "quantized_nod": 107, "dq": [107, 109, 131, 522], "pair": [107, 214, 215, 440, 458, 475, 476, 520], "befor": [107, 109, 151, 170, 183, 192, 197, 199, 204, 206, 208, 214, 215, 230, 273, 326, 328, 330, 434, 441, 458, 459, 462, 463, 464, 467, 468, 472, 475, 490, 493, 499, 500, 517, 519, 521, 523, 525], "merg": [108, 222, 265, 345, 406, 490, 493, 523, 525], "mergeduplicatedqdqoptim": 108, "y": [109, 214, 215, 247, 288, 335, 394, 461, 467, 481, 522, 524], "shareqdqforitexypatternoptim": 109, "break": [109, 464, 475], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 190, 365, 521, 522, 523], "under": [110, 214, 215, 232, 275, 417, 428, 434, 436, 438, 459, 473, 474, 475, 478, 483, 484, 495, 503, 513, 514, 515, 519, 523, 525], "singleton": [110, 429], "specifi": [110, 157, 165, 172, 210, 214, 215, 218, 219, 247, 248, 261, 262, 288, 294, 299, 303, 305, 306, 309, 318, 323, 331, 332, 352, 356, 357, 390, 409, 418, 428, 429, 440, 441, 464, 468, 474, 475, 483, 497, 503, 507, 508, 509, 510, 512, 514, 516, 519, 524, 525, 527], "graphrewriterhelp": 110, "encapsul": [110, 218, 219, 261, 262, 357, 390, 418, 477], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 440], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 301, 354, 439, 523, 525], "fakequant": 113, "per_channel": [113, 440, 441, 468, 517, 527], "8": [113, 157, 166, 214, 215, 246, 287, 435, 440, 457, 468, 472, 502, 503, 514, 515, 519, 522, 525, 528], "channel_axi": [113, 168, 171], "symmetr": [113, 441, 517, 519, 524, 525], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 155, 165, 166, 172, 215, 332, 356, 367, 428, 456, 462, 463, 478, 501, 502, 503, 507, 509, 510, 514, 515, 519, 521], "There": [115, 332, 334, 391, 393, 461, 462, 468, 471, 475, 478, 500, 502, 503, 519, 522, 525, 527], "instanc": [115, 116, 172, 214, 215, 218, 219, 248, 261, 262, 300, 301, 303, 306, 309, 312, 313, 315, 316, 317, 335, 347, 353, 354, 356, 357, 390, 394, 408, 418, 426, 429, 433, 434, 435, 439, 456, 475, 480, 486, 519, 525, 527, 528], "global": [115, 192, 214, 215, 312, 313, 315, 316, 317, 326, 408, 429, 435, 475, 514, 516, 525], "class": [116, 155, 165, 187, 193, 200, 310, 357, 390, 435, 436, 440, 458, 459, 462, 474, 475, 486, 512, 513, 517, 520, 523, 525, 527], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 198, 199, 204, 328, 458, 462, 463, 475, 514, 525], "process": [116, 140, 152, 172, 192, 197, 198, 199, 206, 208, 210, 214, 215, 218, 219, 230, 231, 232, 243, 247, 248, 261, 262, 273, 274, 275, 285, 288, 326, 328, 330, 334, 335, 357, 390, 391, 393, 394, 418, 428, 429, 436, 439, 440, 441, 457, 458, 459, 462, 463, 464, 466, 475, 479, 500, 502, 503, 505, 513, 514, 517, 519, 522, 523, 524, 527], "model_nam": [116, 214, 215], "special": [116, 157, 190, 367, 435, 458, 474, 475, 512, 514, 526], "decid": [116, 214, 215, 297, 328, 350, 439, 440, 475, 517, 520, 525], "qat_clone_funct": 116, "leav": [116, 489], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 468], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 468], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 385, 389, 439], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 155, 157, 183, 215, 245, 295, 305, 309, 310, 311, 348, 416, 421, 433, 459, 463, 464, 466, 470, 472, 475, 517, 522], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 208, 247, 288, 330, 332, 436, 461, 462, 463, 471, 475, 476, 488, 492, 503, 514, 516, 522, 524, 525, 527], "staticmethod": 139, "function": [139, 155, 198, 199, 204, 214, 215, 218, 219, 231, 261, 262, 274, 306, 309, 318, 323, 434, 435, 436, 439, 440, 441, 456, 458, 462, 463, 466, 470, 471, 472, 474, 475, 476, 486, 496, 502, 503, 514, 517, 519, 520, 521, 522, 523, 525, 526], "smoothquantcalibr": 140, "dataset": [140, 141, 165, 206, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 241, 250, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 284, 295, 299, 300, 301, 303, 332, 348, 352, 353, 354, 356, 357, 390, 418, 421, 436, 438, 439, 440, 458, 464, 469, 474, 475, 483, 497, 498, 508, 514, 517, 519, 520, 522, 525, 527, 528], "outlier": [140, 440, 457, 461, 500, 519, 522], "ignor": [140, 429, 457, 459, 519, 522, 525], "smoothquantscal": 141, "alpha": [141, 156, 160, 170, 186, 207, 517, 525], "scales_per_op": 141, "individu": [141, 192, 326, 384, 389, 433, 503, 514, 522], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 292], "default_opset_vers": 142, "bia": [143, 214, 215, 519, 523], "correct": [143, 171, 210, 214, 215, 299, 300, 301, 303, 327, 352, 353, 354, 356, 433, 478], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 462, 471], "our": [143, 165, 214, 215, 436, 438, 466, 475, 496, 497, 500, 521, 526], "task": [143, 230, 237, 273, 280, 303, 356, 459, 462, 463, 466, 471, 474, 475, 498, 502, 505, 514, 519, 522, 528], "close": [143, 171, 457, 504], "w_int8": [143, 171], "u": [143, 171, 478, 497, 502], "w_fp32": [143, 171], "varianc": [143, 171, 461], "differ": [143, 167, 171, 173, 177, 183, 201, 214, 215, 223, 232, 247, 249, 266, 275, 288, 294, 303, 309, 311, 320, 331, 356, 367, 423, 433, 435, 436, 440, 458, 459, 461, 462, 464, 465, 470, 471, 474, 475, 477, 488, 492, 497, 500, 503, 512, 514, 517, 522, 523, 524, 525], "wise": [143, 154, 156, 158, 166, 171, 214, 215, 335, 338, 394, 395, 399, 440, 471, 500, 514, 523, 525, 527], "minim": [143, 171, 335, 394, 440, 441, 457, 462, 465, 474, 475, 488, 492, 514, 517, 525], "scale_c": [143, 171], "shift": [143, 171, 243, 285, 496, 524], "notic": [143, 171, 248, 473, 476, 498, 520], "first": [143, 157, 165, 171, 191, 212, 214, 215, 230, 273, 299, 345, 352, 395, 406, 429, 435, 436, 439, 440, 441, 459, 461, 472, 476, 480, 489, 490, 493, 496, 498, 499, 500, 516, 517, 518, 519, 521, 522, 523, 525, 527], "empir": [143, 171], "solut": [143, 171, 438, 439, 440, 467, 480, 484, 489, 515, 519, 520, 522, 525, 526], "don": [143, 171, 192, 214, 215, 435, 501, 514, 525], "min": [143, 166, 171, 184, 215, 429, 461, 498, 500, 514, 517, 519, 522, 524, 525], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 172, 190, 373, 374, 378, 425, 435, 486, 508, 509, 510, 521, 523, 525], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 462], "1024": [146, 232, 275, 481], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 429], "version1": [148, 429], "version2": [148, 429], "version1_gt_version2": [148, 429], "greater": [148, 429, 508, 514, 525], "version1_eq_version2": [148, 429], "version1_gte_version2": [148, 429], "version1_lte_version2": [148, 429], "disable_random": 148, "seed": [148, 183, 214, 215, 311, 429, 475, 527], "disabl": [148, 214, 215, 433, 495, 500, 518, 519], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 239, 282, 429, 464, 470, 475, 478, 523], "is_ckpt_format": 148, "model_path": [148, 166, 461, 508], "ckpt": [148, 357, 365, 390, 528], "folder": [148, 232, 237, 275, 280, 357, 390, 428, 459, 483, 488, 492, 501, 508, 509, 510, 519, 523], "is_saved_model_format": 148, "saved_model": [148, 305, 519], "get_estimator_graph": 148, "estim": [148, 303, 356, 365, 525], "input_fn": [148, 365], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 172, 184, 214, 215, 305, 357, 367, 390, 409, 418, 429, 435, 436, 438, 441, 456, 458, 459, 461, 462, 463, 464, 466, 469, 474, 475, 476, 477, 478, 482, 484, 497, 498, 506, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "scope": [148, 434, 440, 475], "onc": [148, 157, 179, 208, 254, 330, 334, 391, 393, 440, 441, 458, 495, 501, 514, 515, 525, 528], "both": [148, 215, 433, 436, 439, 463, 475, 479, 498, 500, 502, 514, 516, 517, 519, 522, 525], "compat": [148, 365, 434, 464, 477, 490, 493, 495, 514, 520], "v1": [148, 242, 243, 285, 300, 301, 303, 353, 354, 356, 365, 464, 466, 467, 474, 477, 499, 514, 520, 521, 522, 528], "suffix": 148, "time": [148, 157, 214, 215, 247, 288, 303, 335, 356, 367, 394, 429, 440, 458, 461, 464, 467, 475, 483, 485, 488, 492, 495, 496, 501, 504, 508, 509, 512, 514, 515, 517, 519, 521, 523, 524, 525], "got": [148, 440, 467, 523], "iterator_sess_run": 148, "sess": [148, 365], "iter_op": 148, "feed_dict": [148, 229, 272], "output_tensor": [148, 365], "measur": [148, 248, 357, 423, 436, 439, 456, 461, 462, 474, 475, 519, 523, 525, 528], "integr": [148, 177, 249, 439, 475, 496, 497, 502, 519], "makeiter": 148, "feed": [148, 229, 272, 462, 514], "end": [148, 197, 198, 199, 204, 214, 215, 230, 246, 247, 273, 287, 288, 328, 334, 391, 393, 439, 440, 441, 462, 463, 468, 472, 475, 489, 505, 512, 514, 523, 524, 525], "predict": [148, 247, 252, 288, 296, 300, 301, 303, 349, 353, 354, 356, 390, 436, 462, 474, 486, 519, 522, 523, 524], "pred": [148, 303, 356, 474], "collate_tf_pr": 148, "collat": [148, 165], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 202, 204, 230, 273, 328, 458, 459, 482, 514, 519, 522, 525], "strip_unused_lib": 148, "offici": [148, 296, 300, 301, 349, 353, 354, 433, 522], "r1": 148, "15": [148, 468, 472, 509], "branch": [148, 434], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 152, 157, 158, 162, 190, 201, 210, 212, 214, 215, 310, 327, 365, 409, 419, 421, 429, 438, 440, 497, 498, 504, 515, 519, 523, 525], "val": [148, 210, 232, 235, 275, 278, 327, 461, 475, 500], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 498], "tf_diagnosis_help": 148, "fp32_model": [148, 152, 165, 293, 429, 439, 519], "quan_model": 148, "save_path": [148, 292, 293, 439, 477], "diagnosi": [148, 214, 215, 475, 498, 499, 500, 515, 520, 526], "generate_feed_dict": 148, "input_tensor": [148, 365], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 365], "associ": [148, 157, 299, 352], "search": [148, 151, 166, 183, 184, 190, 204, 211, 215, 218, 219, 261, 262, 294, 296, 306, 309, 310, 311, 331, 335, 349, 394, 429, 438, 471, 474, 478, 479, 489, 514, 515, 519, 523, 525, 526], "look": [148, 201, 439, 441, 468, 474, 497, 498, 500, 527], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 152, 157, 172, 191, 196, 203, 208, 232, 237, 248, 275, 280, 299, 326, 330, 332, 339, 352, 400, 429, 434, 435, 436, 458, 459, 462, 464, 466, 468, 475, 476, 502, 503, 505, 514, 517, 518, 519, 521, 522, 525, 527], "actawareweightqu": 149, "example_input": [149, 159, 162, 164, 165, 166, 214, 215, 293, 466], "calib_func": [149, 165, 166, 390, 416, 518], "data_typ": [149, 166, 347, 408], "enable_full_rang": [149, 166, 414, 519], "algo": [149, 421], "torch": [150, 151, 152, 153, 154, 157, 158, 160, 161, 162, 163, 165, 166, 170, 187, 190, 191, 193, 201, 211, 214, 215, 293, 357, 390, 428, 435, 438, 441, 442, 462, 464, 466, 475, 476, 477, 478, 483, 486, 498, 517, 519, 522, 523], "bf16modulewrapp": 150, "bf16modul": 150, "mix": [150, 159, 214, 215, 333, 345, 357, 392, 406, 438, 439, 446, 471, 478, 484, 485, 486, 526], "precis": [150, 159, 214, 215, 218, 219, 261, 262, 294, 301, 303, 304, 331, 333, 345, 354, 356, 357, 367, 392, 395, 406, 429, 438, 439, 440, 446, 456, 457, 463, 464, 468, 471, 478, 484, 485, 486, 515, 516, 517, 519, 522, 525, 526], "mixed_precision_model": 150, "bf16_symbolic_trac": 150, "fx_sub_module_list": 150, "trace": [150, 152, 163, 165, 190, 214, 215, 293, 397, 435, 485, 525], "_description_": 150, "is_leaf": 151, "judg": 151, "nn": [151, 158, 160, 162, 165, 166, 190, 191, 201, 214, 215, 293, 357, 390, 416, 417, 428, 435, 462, 475, 477, 519, 522, 523], "trace_gptq_target_block": 151, "module_typ": 151, "modulelist": 151, "sequenti": [151, 228, 271, 332, 334, 391, 393, 525], "stack": 151, "structur": [151, 191, 202, 203, 214, 215, 328, 346, 407, 429, 471, 494, 496, 499, 508, 514, 515, 517, 523, 526, 528], "critic": [151, 201, 433], "llm": [151, 205, 438, 514, 515, 519, 522], "gptq_related_block": 151, "embed": [151, 165, 457, 514], "transformers_pr": 151, "todo": [151, 230, 233, 273, 276, 299, 345, 352, 406], "transformers_nam": 151, "find_lay": 151, "conv1d": [151, 441], "find_layers_nam": 151, "log_quantizable_layers_per_transform": 151, "transformer_block": 151, "maxq": 151, "gptquantiz": 151, "nsampl": [151, 166, 519], "use_max_length": [151, 166], "pad_max_length": [151, 166], "layer_wis": [151, 166, 428, 519], "compress": [151, 295, 318, 323, 348, 367, 418, 431, 438, 446, 462, 471, 475, 495, 497, 512, 513, 514, 515, 517, 522, 526, 528], "pretrain": [151, 424, 478, 484], "url": [151, 232, 275, 434, 473, 506, 507, 514], "arxiv": [151, 186, 204, 205, 328, 438, 457, 514, 515, 519, 522], "org": [151, 186, 204, 205, 299, 328, 352, 435, 461, 472, 490, 493, 514], "2210": [151, 519], "17323": [151, 519], "node_collector": 152, "hook": [152, 176, 180, 201, 256, 257, 318, 323, 421, 462, 463, 475, 514, 522, 523], "record": [152, 165, 177, 180, 230, 231, 232, 238, 249, 256, 273, 274, 275, 281, 429, 459, 500, 521, 523, 525], "hessiantrac": 152, "q_model": [152, 156, 215, 305, 390, 435, 438, 458, 459, 461, 464, 466, 469, 470, 474, 475, 477, 497, 498, 517, 518, 519], "criterion": [152, 176, 178, 179, 185, 186, 192, 197, 198, 199, 201, 204, 205, 209, 214, 215, 251, 254, 295, 348, 462, 463, 475, 514, 517, 522, 525, 527], "yao": 152, "zhewei": 152, "et": [152, 457, 519, 522], "al": [152, 457, 519, 522], "pyhessian": 152, "network": [152, 186, 192, 193, 328, 397, 436, 457, 462, 463, 466, 475, 497, 515, 517, 522, 525], "through": [152, 218, 219, 261, 262, 356, 357, 390, 438, 456, 468, 470, 471, 474, 481, 502, 512, 513, 514, 516, 517, 519, 522], "len": [152, 215, 247, 288, 459, 464, 524], "2020": 152, "ieee": [152, 476, 522], "intern": [152, 228, 271, 345, 406, 458, 459, 474, 514], "confer": [152, 514, 522], "big": [152, 461, 519], "dong": 152, "zhen": 152, "hawq": [152, 397, 525], "v2": [152, 397, 458, 464, 466, 467, 472, 484, 520, 522, 525, 526, 528], "advanc": [152, 214, 215, 433, 438, 440, 446, 514, 517, 527], "system": [152, 157, 172, 248, 429, 456, 481, 514, 528], "33": [152, 528], "18518": 152, "18529": 152, "openvinotoolkit": 152, "nncf": 152, "develop": [152, 367, 434, 435, 472, 475, 476, 478, 484, 495, 501, 514, 515, 518, 521], "hessian_trac": 152, "compare_weight": 152, "float_dict": 152, "ani": [152, 157, 299, 301, 344, 352, 354, 384, 389, 405, 409, 416, 426, 429, 433, 438, 441, 464, 478, 483, 496, 497, 501, 502, 514, 521, 525], "quantized_dict": 152, "compar": [152, 303, 356, 429, 463, 474, 498, 514, 517, 519, 521, 522, 523, 525], "being": [152, 299, 352, 441, 503], "wt_compare_dict": 152, "float_model": 152, "state_dict": [152, 464, 519, 523], "qmodel": 152, "compute_error": 152, "state": [152, 191, 441, 481, 514], "weight_dict": 152, "hawq_top": 152, "enable_act": 152, "modul": [153, 154, 187, 193, 200, 308, 314, 324, 325, 435, 458, 462, 471, 474, 475, 477, 514, 516, 518, 519, 523, 526], "portabl": 155, "serial": [155, 157], "see": [155, 247, 288, 296, 349, 433, 434, 435, 437, 473, 475, 488, 489, 492, 495, 496, 500, 501, 519, 522, 523, 525], "copyreg": 155, "mechan": [155, 186, 514, 521, 526], "pickler": 155, "pickletool": 155, "comment": [155, 433, 440, 459, 474, 475, 519, 524], "unpickl": [155, 157], "load": [155, 157, 158, 230, 246, 247, 273, 287, 288, 357, 365, 390, 428, 429, 440, 458, 488, 492, 496, 498, 516, 517, 519, 522], "misc": [155, 473], "format_vers": 155, "compatible_format": 155, "except": [155, 157, 409, 429, 501, 517, 519], "pickleerror": 155, "pickl": [155, 157], "picklingerror": 155, "unpicklingerror": 155, "problem": [155, 230, 273, 303, 356, 474, 476, 496], "secur": [155, 438, 497, 515, 529], "violat": 155, "also": [155, 191, 229, 232, 247, 272, 275, 288, 296, 349, 356, 367, 390, 434, 436, 439, 440, 441, 458, 461, 465, 469, 471, 474, 475, 478, 483, 488, 489, 492, 495, 496, 497, 500, 501, 512, 514, 515, 517, 518, 519, 522, 525], "includ": [155, 177, 186, 190, 192, 207, 209, 214, 215, 230, 232, 239, 247, 249, 273, 275, 282, 288, 294, 304, 326, 331, 409, 429, 433, 439, 440, 441, 458, 459, 461, 472, 473, 474, 475, 478, 481, 484, 489, 501, 505, 508, 509, 510, 514, 517, 518, 519, 523, 525], "necessarili": 155, "limit": [155, 184, 335, 394, 429, 438, 461, 462, 519, 520, 523], "attributeerror": [155, 409], "eoferror": 155, "importerror": [155, 467], "indexerror": 155, "layerwisequ": 156, "pretrained_model_name_or_path": [156, 158], "op_cfg": 156, "output_dir": [156, 424, 475, 483, 484, 499, 500, 506, 509, 510], "5": [156, 170, 177, 214, 215, 234, 243, 249, 277, 285, 303, 356, 390, 439, 459, 466, 468, 474, 475, 500, 505, 508, 509, 514, 516, 517, 519, 522, 524, 525, 527, 528], "order": [156, 165, 296, 297, 332, 335, 338, 347, 349, 350, 394, 399, 408, 435, 461, 474, 498, 516, 519, 522, 523, 525], "memomeri": 156, "f": [157, 187, 462, 464, 517, 519, 522], "file_lik": 157, "map_loc": 157, "pickle_modul": [157, 187], "weights_onli": 157, "pickle_load_arg": 157, "facil": 157, "treat": [157, 458], "storag": [157, 438, 469, 474, 497, 500, 519, 522], "thei": [157, 248, 409, 433, 462, 468, 475, 483, 498, 501, 512], "deseri": 157, "were": [157, 303, 356, 481, 514], "fail": [157, 435, 458, 466, 504], "e": [157, 192, 214, 215, 433, 434, 462, 465, 469, 478, 483, 484, 488, 492, 514, 519, 522, 525], "becaus": [157, 196, 201, 247, 288, 326, 435, 500, 517, 522, 524, 525], "doesn": [157, 247, 288, 439, 464, 475, 476, 496, 527], "certain": [157, 520, 521], "howev": [157, 501, 514, 519, 522], "altern": [157, 214, 215, 390], "argument": [157, 215, 409, 416, 436, 461, 499, 500, 503, 506, 508, 509, 510, 519], "callabl": [157, 214, 215, 301, 354, 416, 418, 458], "locat": [157, 167, 210, 247, 288, 464, 481, 488, 492, 495, 503, 517, 520, 524, 527], "resid": 157, "tag": [157, 365, 522, 523], "wa": [157, 214, 215, 439, 475, 500, 501, 504, 515, 525], "builtin": [157, 464], "cuda": [157, 210, 476, 478, 480, 514, 517], "device_id": 157, "either": [157, 215, 299, 352, 479, 483, 503, 513, 516, 517], "final": [157, 190, 197, 210, 328, 440, 475, 481, 512, 514, 517, 520, 525], "alreadi": [157, 172, 232, 246, 248, 275, 287, 439, 459, 471, 490, 493, 497, 506, 525], "right": [157, 243, 285, 299, 352, 433, 434, 435, 495, 501, 522, 524], "otherwis": [157, 232, 247, 275, 288, 429, 433, 440, 459, 490, 493, 516, 519, 524], "fall": [157, 165], "back": [157, 165, 247, 253, 288, 461, 495, 501], "behavior": [157, 433, 439, 440, 441, 468, 477, 519, 523, 525, 527], "wasn": 157, "indic": [157, 176, 214, 215, 223, 228, 230, 266, 271, 273, 289, 299, 310, 352, 435, 458, 467, 498, 503, 523], "appear": [157, 433, 489, 495, 497], "ones": [157, 299, 352, 514], "put": [157, 232, 275, 459, 462], "user": [157, 172, 179, 190, 202, 210, 214, 215, 218, 219, 232, 235, 239, 247, 248, 254, 261, 262, 275, 278, 282, 288, 294, 318, 323, 329, 331, 332, 356, 357, 367, 390, 395, 408, 418, 429, 435, 436, 438, 439, 440, 441, 446, 456, 458, 462, 463, 466, 468, 471, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 489, 495, 502, 503, 504, 505, 508, 509, 510, 512, 513, 514, 515, 517, 518, 520, 522, 523, 524, 525, 529], "register_packag": 157, "readlin": 157, "tell": [157, 356, 390, 516], "seek": [157, 519], "o": [157, 409, 472, 480, 498], "pathlik": 157, "metadata": 157, "primit": 157, "keyword": [157, 215], "unless": [157, 468], "implicitli": 157, "known": [157, 250, 335, 394, 475, 514, 523, 525], "insecur": [157, 497], "possibl": [157, 248, 461, 497, 513, 514, 518, 519, 525], "construct": [157, 230, 233, 234, 237, 245, 250, 252, 253, 255, 273, 276, 277, 280, 356, 361, 365, 408, 421, 433, 440, 441, 459, 464, 514, 525], "malici": 157, "arbitrari": [157, 475, 513], "code": [157, 190, 218, 219, 248, 261, 262, 305, 329, 332, 390, 418, 435, 438, 439, 440, 441, 459, 462, 463, 464, 470, 471, 473, 474, 478, 480, 482, 483, 484, 486, 489, 495, 499, 500, 502, 503, 504, 512, 513, 514, 515, 516, 517, 521, 522, 523, 524], "never": [157, 525], "could": [157, 162, 170, 192, 218, 219, 232, 261, 262, 275, 332, 357, 390, 418, 433, 435, 463, 475, 513, 514, 517, 519, 520, 522, 526], "come": [157, 525], "untrust": 157, "unsaf": 157, "tamper": 157, "trust": [157, 461, 497], "load_state_dict": 157, "ram": 157, "surg": 157, "checkpoint": [157, 365, 428, 477], "By": [157, 190, 214, 215, 296, 349, 440, 441, 474, 477, 488, 489, 492, 514, 515, 519, 525], "decod": [157, 242, 243, 285, 296, 349, 474, 524], "byte": 157, "utf": [157, 246, 287], "unicodedecodeerror": 157, "ascii": 157, "codec": 157, "0x": 157, "incorrect": 157, "extra": [157, 301, 354, 475], "encod": [157, 299, 352, 498, 524], "latin1": 157, "them": [157, 190, 230, 273, 435, 441, 458, 461, 466, 468, 470, 498, 501, 513, 514, 519, 525], "keep": [157, 201, 210, 327, 395, 435, 439, 494, 495, 520], "later": [157, 162, 170, 502, 503, 523], "byte_arrai": 157, "xdoctest": 157, "skip": [157, 523, 525], "undefin": [157, 210, 327], "filepath": [157, 429], "pt": [157, 428, 477, 499, 515, 517, 518, 519], "onto": 157, "lambda": [157, 519], "loc": 157, "bytesio": 157, "open": [157, 251, 295, 348, 421, 431, 433, 438, 466, 467, 475, 490, 493, 496, 497, 501, 502, 503, 515, 520], "rb": 157, "buffer": 157, "get_modul": [158, 162], "get_children": 158, "get_named_children": 158, "dowload_hf_model": 158, "repo_id": 158, "cache_dir": 158, "repo_typ": 158, "revis": 158, "download": [158, 232, 275, 459, 461, 472, 500, 506, 520], "hug": [158, 438, 502, 515], "face": [158, 433, 438, 446, 478, 482, 502, 504, 515, 520, 528], "hf": [158, 522, 528], "hub": [158, 438, 465, 469, 486], "load_empty_model": [158, 519], "automodelforcausallm": 158, "empti": [158, 214, 215, 481, 519], "get_super_module_by_nam": 158, "module_nam": [158, 186, 187, 197, 198, 199, 200, 202, 203, 204, 205, 207, 209, 328, 429], "father": [158, 190], "update_modul": 158, "new_modul": [158, 162, 165], "load_layer_wise_quantized_model": 158, "load_tensor_from_shard": 158, "shard": 158, "load_tensor": 158, "ipex_mixed_precis": 159, "definit": [160, 223, 228, 266, 271], "fakeaffinetensorquantfunct": 160, "affin": [160, 517], "teqlinearfakequ": 160, "orig_lay": 160, "mullinear": [160, 166], "input_scal": 160, "detector": 161, "transformerbasedmodelblockpatterndetector": 161, "pattern_lst": 161, "block_pattern": 161, "detect": [161, 165, 190, 214, 215, 299, 303, 352, 356, 361, 434, 435, 478, 485, 486, 514, 525], "ffn": [161, 201], "set_modul": [162, 165], "torchsmoothqu": [162, 522], "q_func": [162, 218, 219, 261, 262, 333, 334, 335, 336, 338, 339, 340, 341, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 439, 440, 475, 525], "traced_model": [162, 163], "whose": [162, 170, 192, 327, 470, 522, 525], "absorb": [162, 165, 166, 170, 519], "trace_and_fuse_sub_graph": 163, "is_qat": 163, "tequant": 164, "absorb_to_lay": [164, 165, 166], "extra_config": [164, 166], "trainabl": [164, 438, 515, 519], "get_embedding_contigu": 165, "contigu": 165, "is_fused_modul": 165, "_propagate_qconfig_help": 165, "collate_torch_pr": 165, "collate_result": 165, "input2tupl": 165, "append_attr": 165, "fx_model": 165, "fx_white_list": 165, "append": [165, 332, 335, 394, 435, 463, 475, 513], "graphmodul": [165, 435, 518], "addit": [165, 215, 418, 440, 441, 462, 489, 497, 503, 519, 520, 525], "dir": [165, 230, 273, 428, 459, 467, 470], "generate_activation_observ": 165, "smooth_quant_en": 165, "observ": [165, 441, 519, 521, 523, 525], "what": [165, 197, 228, 271, 356, 390, 418, 433, 515], "check_cfg_and_qconfig": 165, "op_infos_from_cfg": 165, "output_tensor_ids_op_nam": 165, "paser_cfg": 165, "ops_nam": 165, "get_quantizable_ops_from_cfg": 165, "input_tensor_ids_op_nam": 165, "update_sq_scal": 165, "ipex_config_path": 165, "smoothquant_scale_info": 165, "ipex_config": 165, "json": [165, 231, 247, 274, 288, 428, 459, 477, 496, 503, 504, 508, 509, 510, 519, 524], "temporari": [165, 429, 433], "auto_copi": 165, "fetch_modul": 165, "op_nam": [165, 211, 214, 215, 346, 407, 429, 430, 440, 475, 514, 523], "simple_infer": 165, "get_example_input": 165, "example_inp": 165, "get_fallback_ord": 165, "confidence_batch": [165, 525], "fallback": [165, 215, 338, 339, 397, 399, 400, 466, 476, 498, 518, 525], "requantize_cfg": 165, "confid": 165, "ordered_op": 165, "get_mse_order_per_fp32": 165, "influenc": [165, 514], "last": [165, 186, 210, 214, 215, 458, 476, 478, 480, 485, 489, 517, 519, 522], "fallback_ord": 165, "get_mse_order_per_int8": 165, "get_torch_vers": 165, "match_datatype_pattern": 165, "calculate_quant_min_max": 165, "unsign": [165, 347, 408, 441, 519], "qmin": 165, "qmax": 165, "get_depth": 165, "depth": [165, 462, 518], "get_dict_at_depth": 165, "target_depth": 165, "nest": [165, 212], "get_element_under_depth": 165, "ops_lst": 165, "get_op_type_by_nam": 165, "quantizable_op": 165, "collect_weight_info": 165, "fc": [165, 215, 514], "param": [165, 172, 179, 220, 248, 254, 263, 303, 335, 356, 394, 429, 439, 477, 525], "_type_": 165, "get_module_input_output": 165, "module_hook_config": 165, "input_func": 165, "output_func": 165, "help": [165, 180, 256, 305, 477, 478, 484, 495, 503, 508, 509, 510, 519, 525, 526], "module_name_list": 165, "requir": [165, 166, 214, 215, 221, 332, 365, 389, 435, 439, 440, 456, 457, 458, 461, 463, 464, 468, 475, 476, 477, 479, 489, 495, 497, 502, 503, 506, 509, 510, 514, 517, 519, 520, 521, 522, 523, 525, 527], "fc1": [165, 166], "preprocess": [165, 214, 215, 230, 247, 273, 288, 408, 421, 464, 524], "usag": [165, 173, 229, 272, 299, 305, 332, 352, 409, 417, 440, 459, 464, 465, 478, 486, 497, 503, 508, 509, 510, 512, 516, 519, 524], "input_valu": 165, "output_valu": 165, "total_valu": 165, "get_absorb_lay": 165, "supported_lay": 165, "no_absorb_lay": 165, "allow": [165, 335, 394, 462, 464, 474, 475, 476, 497, 502, 514, 516, 519, 522, 525, 527], "absorpt": 165, "eg": [165, 212, 232, 275, 459, 516], "absorbed_1": 165, "xx": 165, "get_block_prefix": 165, "block_list": 165, "block_num": 165, "block_prefix": 165, "get_hidden_st": 165, "func": [165, 429, 517, 527], "calib": [165, 440], "rest": [165, 502, 503, 508, 509, 510], "part": [165, 188, 197, 326, 328, 435, 472, 476, 490, 493, 503, 505, 514, 522, 526], "total_block_kwarg": 165, "total_block_arg": 165, "quantize_4bit": 166, "quantil": [166, 525], "nf4": [166, 438, 519], "return_int": 166, "fp4": [166, 438, 519], "q_tensor": 166, "qdq_weight_asym": 166, "choos": [166, 232, 275, 471, 483, 515, 520, 522, 525, 527], "qdq_weight_sym": 166, "full_rang": 166, "rang": [166, 233, 234, 247, 276, 277, 288, 409, 418, 438, 439, 441, 457, 459, 461, 462, 463, 464, 475, 498, 500, 513, 514, 517, 519, 522, 524], "amax": 166, "qdq_weight_actor": 166, "select": [166, 207, 210, 215, 230, 273, 435, 436, 457, 471, 472, 495, 514, 517, 519, 523, 525], "quant_weight": 166, "search_clip": 166, "best": [166, 176, 247, 288, 289, 294, 331, 338, 399, 433, 436, 472, 478, 484, 495, 501, 512, 517, 519, 522, 524, 525], "num": [166, 429], "best_clip_ratio": 166, "group_dim": [166, 414], "gptq_perm": 166, "perm": [166, 247, 288, 524], "int32": [166, 459, 519], "absorb_lay": 166, "absorb_dict": 166, "absorbed_lay": 166, "fc3": 166, "n_block": [166, 519], "oom": 166, "teq_quant": 166, "quant_weight_w_scal": 166, "algorithm_registri": 167, "algorithm_typ": 167, "registr": [167, 232, 239, 247, 275, 282, 288, 321], "algorithmschedul": 167, "conf": [167, 172, 176, 215, 218, 219, 248, 261, 262, 305, 312, 313, 315, 316, 317, 318, 323, 333, 334, 335, 336, 338, 339, 340, 341, 345, 357, 367, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 406, 409, 418, 435, 436, 438, 441, 456, 462, 469, 470, 475, 476, 477, 497, 499, 500, 513, 517, 518, 519, 521, 522, 525], "control": [167, 214, 215, 435, 475, 501, 514, 525], "phase": [167, 436, 475, 514, 517, 518, 525], "fastbiascorrect": [168, 171], "fast_bias_correct": [169, 214, 215, 348, 517], "weight_correct": [169, 214, 215, 348, 517], "futur": [170, 218, 219, 250, 261, 262, 471, 475, 486, 508, 509, 510, 526], "weightcorrect": 171, "1e": [171, 522, 527], "05": [171, 215, 303, 356, 474, 522, 528], "evalu": [172, 176, 192, 214, 218, 219, 230, 248, 261, 262, 273, 289, 296, 299, 300, 301, 303, 305, 349, 352, 353, 354, 356, 357, 367, 390, 418, 421, 436, 439, 440, 459, 462, 463, 470, 471, 474, 475, 476, 478, 484, 486, 489, 495, 512, 514, 517, 521, 522, 523, 525, 527], "set_env_var": [172, 248], "env_var": [172, 248], "overwrite_exist": [172, 248], "env": [172, 248, 467, 508, 509, 510], "set_all_env_var": [172, 248], "physic": [172, 248, 433, 456, 503], "core": [172, 214, 215, 248, 434, 456, 473, 488, 492, 503, 528], "get_architectur": [172, 248], "architectur": [172, 248, 306, 309, 438, 456, 462, 475, 502, 514, 515, 519, 526], "get_threads_per_cor": [172, 248], "thread": [172, 214, 215, 248, 384, 389, 458, 505], "get_thread": [172, 248], "get_physical_id": [172, 248], "socket": [172, 248, 429, 503, 505, 528], "get_core_id": [172, 248], "id": [172, 246, 248, 287, 296, 298, 299, 300, 301, 349, 351, 352, 353, 354, 474, 503, 504, 508, 509, 510, 521, 525], "get_bounded_thread": [172, 248], "core_id": [172, 248], "bind": [172, 248], "run_inst": 172, "b_dataload": [172, 214, 215, 456, 475], "b_func": [172, 456], "benchmarkconfig": [172, 214, 215, 456, 461, 475], "goal": [172, 289, 294, 318, 323, 331, 357, 390, 440, 458, 513, 517, 525], "prefer": [172, 294, 331, 390, 514, 519], "space": [172, 183, 184, 198, 199, 204, 205, 214, 215, 218, 219, 261, 262, 294, 301, 306, 309, 310, 311, 331, 335, 338, 345, 354, 357, 390, 394, 399, 406, 433, 434, 436, 439, 440, 441, 514, 517, 527], "etc": [172, 176, 246, 287, 289, 294, 301, 318, 323, 331, 354, 357, 390, 428, 438, 462, 471, 497, 501, 514, 521, 525], "generate_prefix": 172, "core_list": 172, "command": [172, 248, 418, 461, 464, 478, 480, 483, 488, 492, 496, 497, 499, 500, 501, 503], "numactl": [172, 467, 481, 489], "call_on": 172, "cmd": 172, "log_fil": [172, 383, 388], "window": [172, 456, 495, 496], "config_inst": 172, "raw_cmd": 172, "multi": [172, 188, 190, 201, 299, 352, 356, 390, 436, 458, 459, 471, 475, 512, 514, 517, 525], "trigger": [172, 197, 328], "summary_benchmark": 172, "summari": [172, 418, 461, 490, 493, 523, 528], "profil": [172, 215, 348], "benchmark_with_raw_cmd": 172, "fit_with_raw_cmd": 172, "cores_per_inst": [172, 214, 215, 456, 475, 516], "num_of_inst": [172, 214, 215, 456, 475, 516], "test": [172, 214, 215, 247, 288, 434, 438, 461, 472, 503, 508, 528], "fit": [172, 192, 214, 215, 335, 357, 390, 394, 409, 418, 435, 438, 456, 458, 459, 461, 464, 469, 470, 474, 475, 476, 477, 497, 498, 514, 517, 518, 519], "pb": [172, 214, 215, 357, 365, 390, 438, 456, 464, 469, 475, 477, 497, 500, 508, 523, 528], "eval_dataload": [172, 214, 215, 218, 219, 261, 262, 332, 333, 334, 335, 336, 338, 339, 340, 341, 357, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 418, 456, 470, 474, 475, 497, 517, 519, 525], "register_config": 173, "framework_nam": 173, "algo_nam": 173, "pytorch": [173, 177, 179, 180, 187, 190, 193, 196, 197, 200, 205, 206, 214, 215, 229, 230, 232, 235, 239, 247, 249, 254, 256, 272, 273, 275, 278, 282, 288, 293, 294, 303, 304, 324, 326, 329, 331, 339, 348, 356, 357, 366, 390, 400, 422, 429, 434, 435, 436, 438, 439, 440, 441, 457, 458, 462, 463, 465, 468, 471, 472, 475, 476, 477, 478, 480, 483, 484, 485, 486, 495, 497, 506, 509, 510, 514, 515, 516, 519, 520, 522, 525, 527], "examplealgorithm": 173, "examplealgorithmconfig": 173, "baseconfig": [173, 416], "compon": [176, 289, 295, 332, 348, 435, 461, 464, 472, 473, 478, 495, 503, 513, 514], "quantizationawaretrainingcallback": 176, "pruningcallback": 176, "distillationcallback": 176, "basecallback": 176, "design": [176, 229, 252, 257, 272, 356, 395, 436, 438, 475, 483, 486, 514, 517, 526], "mainli": [176, 208, 257, 330, 438, 475, 514, 517], "prune": [176, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 214, 215, 257, 258, 295, 312, 313, 315, 316, 317, 321, 323, 324, 326, 327, 328, 330, 332, 348, 429, 438, 464, 465, 468, 469, 471, 513, 515, 526, 527], "distil": [176, 185, 214, 215, 249, 256, 257, 295, 348, 438, 465, 469, 471, 513, 526, 527], "In": [176, 194, 195, 196, 201, 202, 203, 207, 215, 229, 257, 272, 299, 326, 328, 352, 367, 433, 435, 436, 438, 439, 440, 458, 459, 461, 462, 463, 464, 474, 475, 485, 488, 489, 492, 498, 499, 500, 501, 508, 509, 510, 512, 513, 514, 517, 518, 519, 521, 522, 523, 524, 525, 526], "adaptor": [176, 214, 215, 347, 408, 421, 438, 441, 471, 518, 519, 520, 522, 523, 526], "deriv": [176, 186, 194, 195, 196, 202, 203, 204, 205, 206, 207, 208, 209, 289, 326, 328, 330, 414], "pipelin": [176, 289, 306, 307, 332, 434, 463, 475, 513], "knowledg": [176, 177, 214, 215, 249, 289, 463, 465, 469, 471, 475, 477, 527], "transfer": [176, 237, 280, 289, 459, 462, 463, 475, 522], "teacher": [176, 214, 215, 289, 462, 463, 475, 528], "student": [176, 180, 214, 215, 230, 256, 273, 289, 459, 462, 463, 528], "distillation_conf": [176, 211, 289], "_epoch_ran": [176, 289], "integ": [176, 196, 197, 214, 215, 289, 299, 303, 310, 326, 328, 352, 356, 409, 439, 441, 457, 517, 519, 522, 525], "much": [176, 186, 214, 215, 247, 288, 289, 462, 489, 522, 524], "epoch": [176, 198, 199, 204, 289, 328, 418, 458, 462, 463, 464, 475, 513, 514, 527], "ran": [176, 289], "eval_frequ": [176, 289], "frequenc": [176, 197, 214, 215, 289, 328, 475, 514, 527], "term": [176, 198, 199, 204, 205, 207, 289, 434, 457, 462, 473, 474, 512, 513, 525], "best_scor": [176, 289], "metric": [176, 214, 215, 218, 219, 251, 261, 262, 289, 294, 295, 310, 318, 323, 331, 332, 348, 357, 390, 418, 421, 436, 439, 440, 459, 461, 464, 475, 476, 497, 517, 521, 522, 523, 525, 526, 527, 528], "best_model": [176, 289, 428, 519], "found": [176, 289, 438, 462, 476, 483, 500, 504, 522, 525, 528], "critet": [177, 249], "tensorflowcrossentropyloss": [177, 249], "pytorchcrossentropyloss": [177, 249], "tensorflowsparsecategoricalcrossentropi": 177, "tensorflowknowledgedistillationloss": [177, 249], "pytorchknowledgedistillationloss": [177, 249, 475], "pytorchintermediatelayersknowledgedistillationloss": [177, 249], "tensorflowcriterion": [177, 249], "pytorchcriterion": [177, 249], "criterion_registri": [177, 249], "criterion_typ": [177, 249], "registry_criterion": [177, 249], "param_dict": [177, 179, 249, 254], "crossentropyloss": [177, 214, 215, 462, 475], "sparsecategoricalcrossentropyloss": 177, "knowledgedistillationframework": [177, 249], "student_model": [177, 215, 249, 475], "teacher_model": [177, 214, 215, 249, 462, 463, 475], "knowledgedistillationloss": [177, 249, 475, 527], "temperatur": [177, 214, 215, 249, 475, 527], "loss_typ": [177, 183, 214, 215, 249, 475, 527], "ce": [177, 214, 215, 249, 475, 527], "loss_weight": [177, 214, 215, 249, 475, 527], "pytorchknowledgedistillationlosswrapp": [177, 249], "tensorflowknowledgedistillationlosswrapp": 177, "tensorflowknowledgedistillationlossextern": [177, 249], "intermediatelayersknowledgedistillationloss": [177, 249], "layer_map": [177, 215, 249, 462], "add_origin_loss": [177, 215, 249], "pytorchintermediatelayersknowledgedistillationlosswrapp": [177, 249], "selfknowledgedistillationloss": [177, 249], "selfknowledg": [177, 249], "pytorchselfknowledgedistillationloss": 177, "pytorchselfknowledgedistillationlosswrapp": 177, "multipl": [179, 188, 216, 217, 221, 222, 230, 231, 233, 234, 235, 236, 237, 241, 244, 247, 254, 259, 260, 264, 265, 267, 273, 274, 276, 277, 278, 279, 280, 284, 286, 288, 304, 357, 358, 359, 361, 367, 456, 459, 466, 475, 502, 505, 513, 514, 521, 522, 525], "tensorflowoptim": [179, 254], "pytorchoptim": [179, 254], "optimizer_registri": [179, 254], "optimizer_typ": [179, 254], "cross": [179, 254, 303, 356, 470, 525], "tensorflowsgd": [179, 254], "sgd": [179, 214, 215, 254, 462, 475, 516, 527], "tensorflowadamw": [179, 254], "tensorflow_addon": [179, 254], "adamw": [179, 254], "tensorflowadam": 179, "adam": [179, 527], "pytorchsgd": [179, 254], "record_output": [180, 256], "output_process": [180, 256], "get_activ": [180, 256], "hyper": [181, 527], "sa_optim": [181, 185], "simul": [182, 441], "anneal": 182, "register_search": 183, "searcher": [183, 190, 215, 311], "registri": [183, 184, 186, 192, 197, 206, 207, 208, 209, 326, 328, 330, 436], "sure": [183, 192, 197, 206, 208, 326, 328, 330, 456, 497], "search_spac": [183, 211, 215, 306, 309, 310, 311], "gridsearch": [183, 311], "grid": [183, 215, 311, 436, 514], "whole": [183, 311, 441, 497, 517, 528], "exhaust": [183, 215, 295, 311, 337, 348, 398, 516], "randomsearch": [183, 311], "randomli": [183, 247, 288, 311, 335, 394, 436, 522, 524, 525], "bayesianoptimizationsearch": [183, 311], "42": [183, 215, 311, 528], "bayesian": [183, 215, 295, 311, 337, 348, 398, 436, 514, 516], "xgbsearcher": 183, "higher_is_bett": [183, 214, 215, 356, 390, 525, 527], "reg": [183, 185, 187, 198, 199, 204, 205, 215], "min_train_sampl": [183, 215], "10": [183, 214, 215, 232, 275, 335, 394, 438, 456, 459, 466, 472, 475, 497, 498, 514, 516, 524, 525, 528], "xgboost": [183, 514], "searchspac": 184, "factori": [184, 363, 370, 372, 377, 380, 382, 387], "actual": [184, 303, 356, 464], "interv": [184, 203, 514], "store": [184, 186, 187, 190, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 214, 215, 232, 275, 321, 328, 470], "continu": [184, 195, 299, 326, 352, 436, 475, 496, 514, 526], "learning_r": [184, 214, 215, 475, 516, 527], "001": [184, 232, 275, 459, 464, 522, 527], "num_train_epoch": [184, 475, 514], "20": [184, 247, 288, 500, 503, 508, 509, 510, 514, 524, 527, 528], "weight_decai": [184, 475, 527], "register_searchspac": 184, "pruner": [184, 185, 295, 312, 313, 314, 315, 316, 318, 323, 324, 326, 329, 348, 475, 514, 527], "basesearchspac": 184, "discretesearchspac": 184, "continuoussearchspac": 184, "hpo": [185, 218, 261, 514], "model_slim": [185, 187, 201], "auto_slim": [185, 187, 189], "pattern_analyz": [185, 187, 189], "weight_slim": [185, 187, 189, 201], "mha": [185, 187, 193, 200, 514], "ninm": [185, 187, 193], "nxm": [185, 187, 193, 203, 214, 215, 322, 326, 514], "basic": [185, 187, 190, 192, 200, 214, 215, 246, 287, 295, 306, 326, 337, 341, 344, 348, 398, 402, 405, 418, 471, 472, 475, 497, 516, 521], "block_mask": [185, 186, 187, 200], "pattern_lock": [185, 187, 200, 214, 215, 295, 314, 348], "progress": [185, 187, 200, 232, 275, 489, 495, 497, 514, 517], "retrain_fre": [185, 186, 187, 200, 514], "criteria": [185, 187, 214, 215, 294, 318, 323, 326, 328, 331, 435, 495, 522], "schedul": [185, 187, 197, 198, 199, 204, 205, 207, 214, 215, 295, 324, 328, 348, 475, 502, 503, 505, 513], "tf_criteria": [185, 187], "callback": [185, 318, 323, 418, 421, 435, 475, 513, 514, 517], "register_criterion": [186, 209], "get_criterion": 186, "pruningcriterion": [186, 209], "about": [186, 209, 429, 433, 458, 475, 500, 501, 514, 518, 525, 526, 528], "score": [186, 192, 197, 201, 209, 214, 215, 296, 297, 299, 300, 301, 303, 328, 349, 350, 352, 353, 354, 356, 397, 421, 435, 474, 498, 512, 514, 521, 525], "magnitudecriterion": [186, 209], "magnitud": [186, 209, 214, 215, 295, 303, 314, 348, 356, 471, 514], "criterion_class": [186, 209], "determin": [186, 192, 197, 209, 214, 215, 423, 433, 435, 457, 514, 517, 522], "gradientcriterion": 186, "gradient": [186, 312, 438, 471, 475, 514, 515, 528], "absolut": [186, 214, 215, 303, 356, 474, 475, 514, 517, 525], "snipcriterion": 186, "snip": [186, 214, 215, 328, 471, 514, 528], "product": [186, 438, 471, 476, 478, 479, 495, 501, 515, 517, 521, 525], "singl": [186, 208, 214, 215, 223, 230, 247, 266, 273, 288, 299, 328, 330, 352, 356, 390, 435, 459, 461, 472, 501, 514, 519, 522], "shot": [186, 204, 205, 208, 257, 328, 330, 436, 471, 475, 514, 515, 519], "connect": [186, 328, 495, 497, 504, 514, 521], "sensit": [186, 312, 328, 471, 514], "1810": [186, 328], "02340": [186, 328], "snipmomentumcriterion": 186, "snip_momentum": [186, 214, 215, 475, 514], "momentum": [186, 328, 471, 475, 514, 527], "preserv": [186, 457, 514, 519], "step": [186, 196, 197, 198, 199, 203, 204, 208, 214, 215, 326, 328, 330, 418, 440, 441, 461, 462, 463, 464, 475, 490, 493, 495, 508, 509, 510, 513, 514, 516, 518, 519, 521, 522, 523, 525], "beta": 186, "blockmaskcriterion": 186, "9": [186, 214, 215, 435, 472, 475, 514, 516, 522, 525, 527, 528], "retrainfreecriterion": 186, "pickle_protocol": 187, "_use_new_zipfile_seri": 187, "prepare_prun": [187, 514], "loss_func": [187, 206], "assertionerror": [187, 193, 200, 210, 326, 327, 328, 357], "auto": [188, 190, 214, 215, 333, 348, 392, 398, 429, 435, 457, 478, 481, 483, 485, 486, 514, 517, 519], "slim": [188, 189, 190, 299, 352, 363, 365, 477, 514], "round_multipli": 188, "spars": [188, 202, 328, 459, 515], "automat": [188, 190, 191, 214, 215, 232, 235, 242, 243, 275, 278, 285, 294, 304, 331, 435, 438, 456, 459, 471, 475, 476, 478, 480, 483, 484, 486, 488, 489, 490, 492, 493, 495, 502, 505, 513, 514, 517, 522, 524, 525], "model_slim_ffn2": 188, "some": [188, 190, 214, 215, 230, 273, 327, 440, 441, 459, 461, 466, 472, 474, 475, 497, 498, 499, 500, 503, 512, 514, 517, 518, 519, 522, 523, 525, 526, 528], "perman": [188, 433, 514], "obtain": [188, 190, 199, 204, 207, 210, 327, 435, 440, 503, 514, 521, 522, 525], "acceler": [188, 462, 475, 478, 486, 495, 498, 502, 514, 515, 518, 519, 522, 525], "directli": [188, 214, 215, 229, 272, 299, 303, 327, 352, 356, 474, 475, 482, 514, 516, 517, 523], "sprase": 188, "model_slim_mha": 188, "parse_auto_slim_config": [188, 514], "ffn2_sparsiti": [188, 514], "mha_spars": [188, 514], "generate_ffn2_pruning_config": 188, "consecut": [188, 190, 191, 514], "generate_mha_pruning_config": 188, "head": [188, 190, 194, 201, 210, 514, 528], "get_attribut": 190, "descent": [190, 438, 515], "get_common_modul": 190, "layer1": [190, 214, 215, 475, 514, 517], "layer2": [190, 475, 514, 517], "nearest": [190, 247, 288, 414, 519, 524], "print_iter": 190, "recipesearch": 190, "root": [190, 230, 231, 232, 235, 273, 274, 275, 278, 303, 356, 459, 464, 474, 475, 527], "levelwis": 190, "wai": [190, 231, 232, 235, 274, 275, 278, 436, 441, 458, 459, 461, 474, 475, 478, 481, 496, 497, 501, 502, 503, 513, 514, 517, 519, 522, 525, 527], "huggingfac": [190, 201, 230, 273, 424, 459, 465, 469, 483, 484, 485, 486, 506, 507, 509, 510, 522, 528], "bert": [190, 215, 226, 229, 230, 247, 269, 272, 273, 288, 438, 459, 462, 474, 476, 483, 506, 509, 510, 514, 524, 528], "recipe_sampl": 190, "bertattent": 190, "dens": [190, 208, 214, 215, 330, 498, 514, 528], "searching_result": 190, "jitbasicsearch": 190, "placeholder_shap": 190, "placeholder_dtyp": 190, "jit": [190, 214, 478, 480, 485, 522, 523], "script": [190, 296, 297, 300, 301, 349, 350, 353, 354, 434, 464, 471, 478, 482, 485, 486, 489, 506, 508, 515], "static_graph": 190, "flatten_static_graph": 190, "target_lay": 190, "linear2linearsearch": 190, "target_op_lut": 190, "lookup": 190, "tabl": [190, 201, 429, 441, 461, 466, 498, 500, 528], "current_pattern": 190, "statu": [190, 426, 433, 458, 505, 508, 509, 510, 512, 514], "selfmhasearch": 190, "classifierheadsearch": 190, "classifi": [190, 210, 230, 273, 303, 356, 459, 462], "classifierheadsearchertf": 190, "squeezer": 191, "postcompressionutil": 191, "librari": [191, 251, 295, 348, 384, 431, 438, 472, 475, 476, 480, 489, 495, 515, 517], "relat": [191, 207, 289, 299, 318, 323, 326, 352, 408, 421, 441, 478, 502, 503, 514, 520, 527], "linearcompress": 191, "root_linear": 191, "target_linear": 191, "while": [191, 202, 210, 328, 335, 394, 439, 440, 459, 465, 471, 476, 478, 483, 495, 497, 514, 516, 517, 519, 522], "hidden": [191, 196, 326, 439], "layer_1": 191, "act_fn": 191, "layer_2": 191, "linearcompressioniter": 191, "linear_pattern": 191, "register_pattern": [192, 326], "basepattern": [192, 194, 196], "unit": [192, 326, 434, 503, 514], "4x1": [192, 214, 215, 322, 475, 514, 528], "is_glob": [192, 326], "local": [192, 214, 215, 326, 429, 488, 492, 497, 504, 505, 514, 521], "contrast": [192, 326, 524], "keep_mask_lay": 192, "invalid_lay": 192, "max_sparsity_ratio_per_op": [192, 197, 211, 214, 215, 475, 514], "sparsiti": [192, 194, 195, 197, 198, 199, 202, 204, 205, 208, 210, 214, 215, 328, 330, 429, 438, 459, 471, 475, 526, 528], "reach": [192, 208, 214, 215, 330, 434, 458, 497, 514, 525], "min_sparsity_ratio_per_op": [192, 211, 214, 215, 475, 514], "minimum": [192, 214, 215, 441, 457, 461, 475, 486, 514, 522, 525], "target_spars": [192, 211, 214, 215, 475, 514, 516, 527], "pytorchbasepattern": [192, 207], "kerasbasepattern": 192, "get_pattern": [193, 326], "patternmha": 194, "doc": [194, 195, 214, 215, 326, 344, 345, 356, 390, 405, 406, 409, 429, 474, 475, 490, 493, 501], "md": [194, 195, 214, 215, 326, 356, 390], "n": [194, 195, 214, 215, 231, 247, 274, 288, 297, 326, 350, 409, 441, 459, 461, 462, 503, 514, 517, 522, 524], "pytorchpatternninm": 195, "out": [195, 214, 215, 230, 231, 232, 273, 274, 275, 294, 326, 331, 434, 435, 438, 459, 478, 483, 488, 489, 490, 492, 493, 495, 501, 514, 516, 517, 519], "pytorchpatternnxm": 196, "kept": [196, 326], "block_siz": [196, 326, 519], "height": [196, 243, 247, 285, 288, 326, 464, 524, 527], "width": [196, 243, 247, 285, 288, 326, 457, 464, 514, 517, 524, 527], "vertic": [196, 247, 288, 326, 524], "keraspatternnxm": 196, "register_prun": [197, 206, 328], "baseprun": [197, 202, 204, 206], "current_sparsity_ratio": [197, 328], "global_step": [197, 328], "total": [197, 247, 288, 303, 328, 356, 459, 461, 514, 519, 524, 528], "start_step": [197, 211, 214, 215, 328, 475, 514, 516], "end_step": [197, 211, 214, 215, 328, 475, 514, 516], "pruning_frequ": [197, 211, 214, 215, 475, 514], "target_sparsity_ratio": [197, 328], "show": [197, 429, 433, 462, 464, 475, 481, 496, 497, 498, 500, 503, 508, 509, 510, 522, 525, 526], "pytorchbaseprun": [197, 205], "kerasbaseprun": 197, "pytorchbasicprun": 198, "arrang": [198, 199, 204, 205, 231, 232, 235, 274, 275, 278, 459, 514], "proce": [198, 199, 204, 205], "regul": [198, 199, 204, 205], "kerasbasicprun": 198, "pytorchblockmaskprun": 199, "grad": [199, 204], "parse_valid_pruner_typ": 200, "get_prun": [200, 328], "pythonmultiheadattentionprun": 201, "mha_modul": 201, "partial": [201, 514, 517], "qkv": 201, "feedward": 201, "simultan": [201, 478, 502, 513, 516], "qkv_name": 201, "query_layer_nam": 201, "key_layer_nam": 201, "value_layer_nam": 201, "ffn_name": 201, "attention_ffn_nam": 201, "mha_nam": 201, "qkv_modul": 201, "ffn_modul": 201, "mha_compress": 201, "mhacompress": 201, "modifi": [201, 232, 275, 389, 408, 435, 441, 464, 468, 499, 500, 514, 527], "linear_lay": 201, "independ": [201, 384, 389, 441], "length": [201, 214, 215, 230, 247, 273, 288, 299, 352, 438, 459, 474, 515, 517, 519, 524], "4x": [201, 436, 517], "subsequ": [201, 440, 478, 495], "head_mask": 201, "mha_head_s": 201, "similar": [201, 211, 475, 499, 516, 522, 525, 527], "mha_scor": 201, "lock": [202, 316, 317, 471, 513, 514], "pytorchpatternlockprun": 202, "parent": [202, 203, 208, 322, 328, 330, 523], "pytorchprogressiveprun": 203, "basicprun": [203, 206], "interpol": [203, 247, 288, 474, 514, 524], "fine": [203, 230, 273, 459, 481, 514, 515, 517], "grain": [203, 514, 515, 525], "improv": [203, 434, 457, 475, 478, 495, 496, 498, 514, 515, 517, 518, 519, 525, 526, 528], "ad": [203, 230, 273, 296, 335, 349, 394, 440, 441, 461, 476, 478, 483, 486, 490, 493, 503, 514, 519, 523], "retrain": [204, 463], "pytorchretrainfreeprun": 204, "pruner_class": [204, 205], "fast": [204, 214, 215, 438, 514, 515, 519], "retrainfreeprun": [204, 206], "effect": [204, 438, 439, 514, 515], "2204": 204, "09656": 204, "sparsegptprun": [205, 206], "most": [205, 214, 215, 303, 356, 461, 475, 476, 514, 517, 519, 522, 525, 528], "sparsegpt": [205, 206, 514], "massiv": [205, 514], "One": [205, 441, 459, 464, 471, 500, 514, 515, 525], "2301": [205, 514], "00774": [205, 514], "opt": [206, 438, 483, 514, 522, 525, 528], "least": [206, 329, 434, 475, 514, 525], "templat": [206, 329, 475, 514], "tree": [206, 329, 345, 406, 503], "nlp": [206, 214, 215, 329, 483, 499, 514, 517], "huggingface_model": [206, 329, 499], "classif": [206, 230, 247, 273, 288, 303, 329, 356, 462, 466, 474, 484, 498, 506, 509, 510, 514, 515], "pytorch_prun": [206, 295, 348], "eager": [206, 329, 389, 464, 471, 517, 518, 523], "config_file_path": [206, 329], "pruner_info": [206, 329], "pruning_class": 206, "avail": [206, 214, 215, 361, 442, 444, 448, 451, 454, 465, 467, 469, 471, 488, 492, 497, 502, 503, 504, 508, 509, 510, 514, 525, 528], "regular": [207, 296, 327, 349], "register_reg": 207, "regulariz": 207, "get_reg_typ": 207, "get_reg": 207, "basereg": 207, "grouplasso": 207, "coeff": 207, "lasso": [207, 313, 471, 514], "reg_term": 207, "register_schedul": [208, 330], "get_schedul": [208, 330], "pruningschedul": 208, "gradual": [208, 330, 514], "oneshotschedul": [208, 330], "iterativeschedul": [208, 330], "get_tf_criterion": 209, "get_sparsity_ratio": 210, "elementwise_over_matmul_gemm_conv": 210, "elementwise_over_al": 210, "blockwise_over_matmul_gemm_conv": 210, "get_sparsity_ratio_tf": 210, "check_config": [210, 327], "prune_config": [210, 327], "everyth": [210, 327, 483], "reset_none_to_default": 210, "update_param": 210, "process_weight_config": 210, "global_config": [210, 312, 313, 315, 316, 317], "local_config": [210, 214, 215, 312, 313, 315, 316, 317], "default_config": 210, "pruners_info": 210, "process_yaml_config": 210, "check_key_valid": 210, "template_config": 210, "user_config": 210, "process_and_check_config": [210, 327], "process_config": [210, 327], "parse_last_linear": 210, "often": [210, 458, 462, 500, 513, 514], "act": [210, 228, 271, 433], "might": [210, 435, 497, 525], "caus": [210, 440, 458, 479, 498, 500, 514, 519], "drop": [210, 299, 327, 352, 434, 475, 476, 489, 514, 519, 522, 528], "parse_last_linear_tf": 210, "parse_to_prun": [210, 327], "parse_to_prune_tf": 210, "generate_pruner_config": 210, "dotdict": [210, 211, 215, 367, 429], "get_lay": 210, "collect_layer_input": 210, "layer_idx": 210, "layer_input": 210, "previou": [210, 440, 441, 475, 514, 520, 522, 523, 525, 526, 528], "prunerv2": 211, "pruning_typ": [211, 214, 215, 475, 514], "pruning_scop": [211, 214, 215, 475, 514], "sparsity_decay_typ": [211, 214, 215, 475, 514], "pruning_op_typ": [211, 214, 215, 475, 514], "reg_typ": 211, "criterion_reduce_typ": 211, "resume_from_pruned_checkpoint": 211, "cfg_fname": 211, "parser": 211, "quantization_conf": 211, "pruning_conf": 211, "graph_optimization_conf": [211, 294], "mixedprecision_conf": 211, "benchmark_conf": 211, "nasconfig": [211, 215, 307, 309, 436], "approach": [211, 214, 215, 306, 307, 309, 435, 436, 457, 459, 462, 471, 475, 483, 495, 498, 506, 508, 509, 510, 514, 515, 516, 519, 525, 527], "search_algorithm": [211, 215, 295, 308, 348, 436], "na": [211, 215, 295, 348, 361, 471, 528], "procedur": [211, 436, 514, 525], "defaultconf": 211, "instead": [211, 212, 215, 229, 272, 429, 481, 483, 486, 501, 514], "notat": [211, 212, 215, 429], "deep_get": [212, 367], "dot": [212, 476, 517], "person": [212, 433, 515], "john": 212, "deep": [212, 438, 439, 440, 458, 471, 472, 475, 476, 478, 480, 483, 484, 486, 489, 495, 515, 517, 525, 526, 528], "deep_set": [212, 367], "sex": [212, 433], "male": 212, "pythonic_config": 213, "random_se": [214, 215, 335, 394, 475, 527], "1978": [214, 215], "workspac": [214, 215, 428, 429, 477, 503, 508, 509, 510], "default_workspac": [214, 215], "resume_from": [214, 215, 429], "tensorboard": [214, 215, 421, 429, 439, 475, 498], "set_random_se": [214, 215, 429], "set_workspac": [214, 215, 429], "set_resume_from": [214, 215, 429], "set_tensorboard": [214, 215, 429], "directori": [214, 215, 231, 232, 274, 275, 365, 424, 426, 428, 429, 459, 464, 467, 488, 490, 492, 493, 499, 501, 523], "histori": [214, 215, 428, 429, 495, 499, 525], "nc_workspac": [214, 215, 498, 499], "datetim": [214, 215], "now": [214, 215, 247, 288, 435, 436, 441, 459, 464, 486, 516, 524, 525], "strftime": [214, 215], "d_": [214, 215], "resum": [214, 215, 218, 219, 261, 262, 333, 334, 336, 339, 340, 341, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402], "flag": [214, 215, 297, 350, 461], "visual": [214, 215, 438, 486, 495, 521, 523, 525, 526], "displai": [214, 215, 344, 345, 405, 406, 429, 495, 498], "2022": [214, 215, 438, 473, 514, 519, 522, 528], "workspace_path": [214, 215], "accuracycriterion": [214, 215, 475, 525], "rel": [214, 215, 367, 475, 498, 516, 525, 527, 528], "tolerable_loss": [214, 215, 475, 525], "higher": [214, 215, 218, 219, 261, 262, 310, 357, 390, 418, 435, 461, 462, 466, 474, 498, 514, 517, 521], "accept": [214, 215, 409, 433, 456, 458, 497, 519], "accuracy_criterion": [214, 215, 367, 475, 499, 512, 516, 525, 527], "warmup": [214, 215, 456, 475, 516], "inter_num_of_thread": [214, 215, 384, 389, 475, 516], "intra_num_of_thread": [214, 215, 384, 389, 475, 516], "benchmark": [214, 215, 250, 295, 332, 348, 367, 429, 438, 446, 477, 478, 482, 486, 489, 495, 498, 525, 526, 527, 528], "onnxrt_trt_ep": [214, 215, 476, 517], "onnxrt_cuda_ep": [214, 215, 476, 517], "inter": [214, 215], "intra": [214, 215], "quantizationconfig": 214, "post_training_static_qu": [214, 459, 475, 516, 525], "calibration_sampling_s": [214, 215, 475, 500], "op_type_dict": [214, 215, 441, 516, 517, 519, 525], "op_name_dict": [214, 215, 461, 475, 498, 500, 517, 525], "strategy_kwarg": [214, 215, 521, 525], "timeout": [214, 215, 475, 516, 525, 527], "max_trial": [214, 215, 475, 525], "quant_level": [214, 215, 498, 519, 522, 525], "posttrainingquantconfig": [214, 215, 390, 435, 438, 441, 458, 461, 466, 469, 474, 475, 477, 497, 498, 499, 500, 517, 518, 519, 521, 522, 525], "quantizationawaretrainingconfig": [214, 215, 418, 435, 463, 466, 475, 517, 518, 525], "cv": [214, 215, 514], "object_detect": [214, 215, 299, 352], "recommendation_system": [214, 215], "explicitli": [214, 215, 470, 514], "overrid": [214, 215, 429], "quantiztaion": [214, 215], "smooth_quant_arg": [214, 215, 517, 522], "gemm_to_matmul": [214, 215, 517], "graph_optimization_level": [214, 215, 516, 517], "disable_al": [214, 215, 516], "enable_bas": [214, 215], "enable_extend": [214, 215], "enable_al": [214, 215], "first_conv_or_matmul_quant": [214, 215, 517], "last_conv_or_matmul_quant": [214, 215, 517], "pre_post_process_quant": [214, 215, 517], "postprocess": [214, 215, 241, 244, 247, 251, 288, 295, 348, 356, 390, 421, 439, 475, 523, 524], "dedic": [214, 215], "quant_format": [214, 215, 293, 466, 498], "constraint": [214, 215, 294, 331, 475, 514, 521, 525, 527], "conv1": [214, 215, 517, 527], "tuning_strategi": [214, 215], "guarante": [214, 215, 475], "models": [214, 215, 367, 475, 512, 516], "footprint": [214, 215, 294, 318, 323, 331, 367, 463, 475, 512, 514, 516, 519], "earli": [214, 215, 475, 517, 525, 527], "stop": [214, 215, 475, 525, 526, 527], "field": [214, 215, 232, 275, 299, 352, 435, 439, 441, 464, 475, 521, 525, 527], "exit": [214, 215, 334, 391, 393, 475, 503, 508, 509, 510, 527], "excluded_precis": [214, 215, 518], "exclud": [214, 215, 439, 457, 518], "conserv": [214, 215, 348, 398], "use_distributed_tun": 214, "weightpruningconfig": [214, 215, 475, 513, 514], "pruning_config": [214, 215, 475, 514], "98": [214, 215, 475, 514, 516, 528], "exp": [214, 215, 475, 514], "link": [214, 215, 230, 273, 356, 390, 457, 459, 466, 488, 492, 495, 519, 528], "90": [214, 215, 519, 527, 528], "magnitude_progress": [214, 215], "snip_progress": [214, 215], "snip_momentum_progress": [214, 215], "feasibl": [214, 215], "situat": [214, 215, 464, 514], "unstructur": [214, 215, 322, 471, 514, 528], "8x1": [214, 215], "channelx1": [214, 215, 514], "1xchannel": [214, 215, 514], "itrex": [214, 215], "start": [214, 215, 247, 288, 299, 352, 395, 472, 500, 515, 524, 525, 526, 529], "togeth": [214, 215, 247, 288, 462, 472, 482, 515, 523, 524], "sort": [214, 215, 338, 399, 461, 498, 519, 525], "sinc": [214, 215, 294, 296, 318, 323, 331, 349, 462, 466, 472, 474, 489, 495, 500, 513, 519, 520], "lead": [214, 215, 462, 475, 476, 500, 514, 519, 522], "increas": [214, 215, 460, 471, 478, 495, 500, 519, 525], "cube": [214, 215, 514], "6": [214, 215, 468, 517, 522, 525, 528], "update_config": [214, 215], "knowledgedistillationlossconfig": [214, 215, 462, 463, 475, 513], "hyperparamet": [214, 215, 344, 521, 522, 525], "entropi": [214, 215, 457, 525], "groundtruth": [214, 215, 299, 352], "label": [214, 215, 218, 219, 230, 232, 233, 234, 235, 238, 243, 247, 252, 261, 262, 273, 275, 276, 277, 278, 281, 285, 288, 296, 298, 303, 349, 351, 356, 357, 390, 418, 435, 458, 459, 461, 474, 475, 517, 524], "sum": [214, 215, 303, 356, 461, 462], "distillationconfig": [214, 215, 418, 462, 463, 475, 513], "prepare_compress": [214, 215, 418, 435, 462, 463, 475, 513, 514, 517], "criterion_conf": [214, 215], "d_conf": [214, 215, 463, 475, 513], "compression_manag": [214, 215, 418, 435, 462, 463, 475, 513, 514, 517], "featur": [214, 215, 230, 231, 243, 247, 273, 274, 285, 288, 434, 438, 456, 458, 460, 462, 475, 476, 477, 478, 482, 483, 486, 495, 497, 501, 514, 515, 520, 522, 524], "distil_loss": [214, 215, 475], "lr": [214, 215, 462, 464, 475], "ni_workload_nam": 215, "onnxrt_dnnl_ep": [215, 476, 517], "onnxrt_dml_ep": [215, 517], "tuningcriterion": [215, 475, 512, 521, 525], "tuning_criterion": [215, 475, 512, 521, 525], "npu": [215, 517], "ptq": [215, 390, 435, 461, 464, 471, 475, 500, 517, 522, 523, 525], "tri": [215, 525], "meet": [215, 221, 332, 334, 391, 393, 435, 440, 512, 515, 516, 517, 519, 523, 525], "mse_v2": [215, 295, 337, 348, 398], "hawq_v2": [215, 348, 398], "docstr": [215, 409], "workload": [215, 426, 429, 497, 515], "insight": [215, 426, 438, 461, 515, 520, 525, 526], "copi": [215, 327, 429, 458, 501], "deepcopi": 215, "model_origin": [215, 390, 518], "qat_op_name_dict": 215, "low_memory_usag": 215, "hpoconfig": 215, "xgb": 215, "bo": 215, "intermediatelayersknowledgedistillationlossconfig": [215, 462], "relationship": [215, 497], "student_layer_nam": 215, "student_layer_output_process": 215, "teacher_layer_nam": 215, "teacher_layer_output_process": 215, "desir": [215, 243, 247, 285, 288, 440, 441, 514, 522, 524], "serv": [215, 365, 503, 508, 509, 510], "numer": [215, 303, 356, 441, 476, 515, 517, 519], "abbrevi": 215, "layer_nam": [215, 514], "l1": 215, "selfknowledgedistillationlossconfig": [215, 462, 475], "student1_layer_name1": 215, "teacher_layer_name1": 215, "student2_layer_name1": 215, "student1_layer_name2": 215, "teacher_layer_name2": 215, "student2_layer_name2": 215, "soft": 215, "l2": [215, 514], "hard": [215, 458, 461], "resblock": 215, "deepst": 215, "02": [215, 528], "mixedprecisionconfig": [215, 357, 409, 475, 476], "mixedprecis": [215, 304, 475], "won": [215, 517, 519], "work": [215, 294, 331, 437, 440, 458, 462, 490, 493, 501, 518, 519, 520, 522, 523], "mix_precis": [215, 348, 409, 475, 476], "converted_model": [215, 357, 475, 476], "exportconfig": 215, "14": [215, 292, 293, 466, 472, 510, 528], "dynamic_ax": [215, 293, 466], "qlinear": [215, 232, 239, 275, 282, 303, 356, 439, 485], "ax": [215, 293], "onnxqlinear2qdqconfig": 215, "onnxqlinear2qdq": 215, "torch2onnxconfig": [215, 466], "torch2onnx": [215, 290, 295, 348], "qdq_op_fp32_bia": 215, "qdq_op_int32_bia": 215, "qdq_op_fp32_bias_qdq": 215, "resnet50": [215, 438, 461, 464, 466, 476, 478, 482, 514, 517, 521, 528], "int8_onnx_config": [215, 466], "randn": [215, 466], "224": [215, 243, 285, 438, 459, 464, 466, 469, 475, 478, 497, 524, 527], "batch_siz": [215, 220, 222, 225, 226, 227, 228, 229, 230, 231, 250, 263, 265, 268, 269, 270, 271, 272, 273, 274, 293, 436, 458, 459, 464, 466, 470, 475, 478, 517], "tf2onnxconfig": [215, 466], "tf2onnx": [215, 290, 295, 348], "output_graph": 215, "dyna": [215, 295, 308, 348, 436, 471, 516], "sigopt": [216, 217, 259, 260, 295, 348, 515], "tpe": [216, 217, 259, 260, 295, 348], "sigopttunestrategi": [218, 261], "q_dataload": [218, 219, 261, 262, 333, 334, 335, 336, 338, 339, 340, 341, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 470, 525], "eval_func": [218, 219, 261, 262, 332, 333, 334, 335, 336, 338, 339, 340, 341, 357, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 409, 418, 435, 458, 459, 461, 462, 463, 464, 475, 498, 517, 518, 519, 525, 527], "eval_metr": [218, 219, 357, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 418, 474, 497, 517], "q_hook": [218, 219, 261, 262, 333, 334, 335, 336, 338, 339, 340, 341, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402], "mandatori": [218, 219, 261, 262, 390, 475, 527], "yield": [218, 219, 228, 250, 261, 262, 271, 335, 357, 390, 394, 409, 418, 458, 517, 525], "_": [218, 219, 261, 262, 390, 435, 436, 438, 439, 440, 457, 461, 462, 464, 466, 468, 475, 476, 477, 478, 484, 488, 490, 492, 493, 500, 503, 504, 512, 514, 517, 519, 520, 521, 522, 523, 525, 527], "well": [218, 219, 261, 262, 357, 390, 418, 436, 438, 459, 514, 517, 520, 522, 527], "taken": [218, 219, 261, 262, 357, 390, 418, 517], "reserv": [218, 219, 261, 262], "abl": [218, 219, 261, 262, 357, 390, 418, 486, 495, 517], "tuner": [218, 219, 261, 262, 294, 331, 357, 390, 418, 517], "scalar": [218, 219, 261, 262, 357, 390, 418, 474, 517, 522, 525], "pseudo": [218, 219, 261, 262, 390, 418, 519, 523], "someth": [218, 219, 232, 261, 262, 275, 390, 418], "fefin": [219, 262], "tpetunestrategi": [219, 262], "basedatalod": [220, 263], "basedataload": [220, 225, 227, 263, 268, 270], "last_batch": [220, 222, 225, 226, 227, 229, 250, 263, 265, 268, 269, 270, 272, 458], "rollov": [220, 222, 225, 226, 227, 229, 250, 263, 265, 268, 269, 270, 272, 458], "collate_fn": [220, 222, 223, 225, 226, 227, 229, 250, 263, 265, 266, 268, 269, 270, 272, 458, 459], "sampler": [220, 222, 224, 225, 226, 227, 229, 250, 263, 265, 267, 268, 269, 270, 272, 284, 295, 344, 405, 458, 464], "batch_sampl": [220, 222, 225, 226, 227, 229, 250, 263, 265, 268, 269, 270, 272, 458], "num_work": [220, 222, 225, 226, 227, 229, 250, 263, 265, 268, 269, 270, 272, 458, 475, 517], "pin_memori": [220, 222, 225, 226, 227, 229, 250, 263, 265, 268, 269, 270, 272, 458], "shuffl": [220, 222, 225, 226, 227, 229, 250, 263, 265, 268, 269, 270, 272, 458, 475, 517], "_generate_dataload": [220, 263], "check_dataload": 221, "default_col": [222, 265], "outer": [222, 265], "defaultdataload": [222, 229, 265, 272], "style": [223, 237, 266, 280, 409, 434, 459, 470], "drop_last": [223, 228, 266, 271], "iterablefetch": [223, 266], "indexfetch": [223, 266], "base_dataload": [224, 267, 284, 295], "default_dataload": [224, 267, 284, 295], "fetcher": [224, 267, 284, 295], "mxnet_dataload": [224, 267, 284, 295], "onnxrt_dataload": [224, 267, 284, 295, 383], "pytorch_dataload": [224, 267, 284, 295], "tensorflow_dataload": [224, 267, 284, 295, 388], "mxnetdataload": [225, 268], "onnxrtbertdataload": [226, 269], "variant": [226, 269], "onnxrtdataload": [226, 269, 383], "pytorchdataload": [227, 270], "data_sourc": [228, 271, 421], "__iter__": [228, 232, 271, 275, 458, 459, 475], "matter": [228, 271, 518], "iterablesampl": [228, 271], "squential": [228, 271], "your": [228, 230, 271, 273, 434, 458, 459, 461, 464, 473, 475, 478, 481, 482, 483, 488, 489, 490, 492, 493, 495, 497, 501, 503, 508, 509, 510, 514, 515, 521, 523, 525, 526], "clear": [228, 271, 439, 468, 474, 475], "iterabledataset": [228, 232, 271, 275], "try": [228, 271, 435, 461, 498, 514, 517, 522, 525], "indexdataset": [228, 271], "__getitem__": [228, 232, 247, 271, 275, 288, 458, 459, 475], "__len__": [228, 232, 271, 275, 459], "retriev": [228, 271, 514], "sequentialsampl": [228, 271], "batchsampl": [228, 271], "tfdatadataload": [229, 272], "tensorflow1": [229, 272], "coupl": [229, 272], "satisfi": [229, 272, 461, 472, 501], "tf1": [229, 272, 477], "although": [229, 272, 521], "tensorflowbertdataload": [229, 272], "tensorflowmodelzoobertdataload": [229, 272], "zoo": [229, 247, 272, 288, 438, 465, 469, 528], "tensorflowdataload": [229, 272, 388], "pytorchbertdataset": [230, 273], "model_typ": [230, 273, 429, 459], "tensordataset": [230, 273, 459], "repo": [230, 273, 432, 434, 459, 465, 488, 490, 492, 493, 529], "easi": [230, 273, 331, 466, 475, 498, 502, 515, 517, 521], "squad": [230, 247, 273, 288, 300, 301, 303, 353, 354, 356, 459, 474, 514, 524, 528], "distilbert": [230, 273, 438, 459, 476, 515, 528], "xlnet": [230, 273, 459, 528], "xlm": [230, 273, 459, 528], "101": [230, 273, 303, 356, 474, 504, 522, 528], "2043": [230, 273], "2001": [230, 273], "onnxrtbertdataset": [230, 273], "data_dir": [230, 273, 459], "model_name_or_path": [230, 273, 459, 475, 483, 484, 499, 506, 509, 510, 519], "max_seq_length": [230, 247, 273, 288, 459, 524], "do_lower_cas": [230, 246, 247, 273, 287, 288, 459, 524], "mrpc": [230, 273, 303, 356, 459, 474, 483, 506, 509, 510, 514, 525, 528], "dynamic_length": [230, 273, 459], "shortcut": [230, 273, 459], "token": [230, 241, 244, 247, 273, 284, 286, 288, 295, 296, 297, 348, 349, 350, 424, 459, 474, 475, 497, 498, 519, 521, 522, 524, 525], "longer": [230, 247, 273, 288, 459, 524], "truncat": [230, 247, 273, 288, 459, 524], "shorter": [230, 247, 273, 288, 459, 524], "lowercas": [230, 273, 459], "choic": [230, 273, 439, 459, 474, 501, 522], "qqp": [230, 273, 459, 474, 528], "qnli": [230, 273, 459, 474, 528], "rte": [230, 273, 459, 474, 528], "st": [230, 273, 459, 474], "cola": [230, 273, 459, 474, 528], "mnli": [230, 273, 459, 474, 528], "wnli": [230, 273, 459, 474], "mobilebert": [230, 273, 459, 462, 528], "roberta": [230, 273, 459, 528], "uncas": [230, 247, 273, 288, 459, 524, 528], "load_and_cache_exampl": [230, 273], "cach": [230, 273, 467, 517, 519], "convert_examples_to_featur": [230, 247, 273, 288], "max_length": [230, 273], "label_list": [230, 273, 303, 356], "output_mod": [230, 273], "pad_token": [230, 273], "pad_token_segment_id": [230, 273], "mask_padding_with_zero": [230, 273], "inputfeatur": [230, 247, 273, 288], "properti": [230, 273, 408, 473], "input_id": [230, 247, 273, 288, 475], "vocabulari": [230, 246, 247, 273, 287, 288, 524], "attention_mask": [230, 273, 475], "usual": [230, 273, 440, 461, 462, 500, 513, 514, 517, 519, 522], "NOT": [230, 273, 468], "token_type_id": [230, 273, 475], "segment": [230, 273, 297, 299, 350, 352, 434], "portion": [230, 273], "regress": [230, 273, 434, 461], "seq_length": [230, 273], "tensorflowbertdataset": [230, 273], "label_fil": [230, 247, 273, 288, 459, 524], "tfrecord": [230, 231, 232, 273, 274, 275, 459], "guid": [230, 273, 435, 438, 459, 462, 472, 478, 486, 495, 529], "parsedecodebert": [230, 273], "tensorflowmodelzoobertdataset": [230, 231, 273, 274], "num_cor": [230, 231, 235, 273, 274, 278, 459], "28": [230, 231, 235, 273, 274, 278, 459, 528], "coco": [231, 238, 242, 274, 281, 299, 303, 352, 356, 474, 514], "parsedecodecoco": [231, 274], "cocorecorddataset": [231, 274], "interleav": [231, 274, 459], "parallel": [231, 274, 384, 389, 459, 475, 502, 505, 525], "cocoraw": [231, 274, 459], "img_dir": [231, 274, 459], "val2017": [231, 274, 459], "anno_dir": [231, 274, 459], "annot": [231, 274, 299, 352, 409, 440, 441, 459, 474, 514, 525], "instances_val2017": [231, 274, 459], "jpg": [231, 235, 237, 274, 278, 280, 438, 459], "imag": [231, 232, 235, 237, 243, 247, 274, 275, 278, 280, 285, 288, 299, 352, 459, 464, 466, 514, 516, 522, 523, 524, 528], "coconpi": [231, 274, 459], "npy_dir": [231, 274, 459], "npy": [231, 274, 459], "tensorflowdataset": [232, 275], "pytorchdataset": [232, 275], "mxnetdataset": [232, 275], "onnxrtqldataset": [232, 275], "onnxrtitdataset": [232, 275], "IT": [232, 239, 275, 282, 515], "pytorchmxnetwrapdataset": [232, 275], "datafunc": [232, 275], "pytorchmxnetwrapfunct": [232, 247, 275, 288], "framework_dataset": [232, 275], "convent": [232, 275, 299, 352, 462], "imageclassifi": [232, 275], "tensorflow_itex": [232, 235, 237, 239, 275, 278, 280, 282, 458, 516], "onnxrt_qdq": [232, 239, 275, 282, 516], "onnxrt_qlinearop": [232, 239, 247, 275, 282, 288, 516], "onnxrt_integerop": [232, 239, 247, 275, 282, 288, 516], "pytorch_ipex": [232, 239, 275, 282, 475, 516, 527], "pytorch_fx": [232, 239, 275, 282, 475, 516], "dataset_registri": [232, 275], "dataset_typ": [232, 275], "dataset_format": [232, 275], "data_format": [232, 243, 275, 285], "raw_imag": [232, 275], "overwrit": [232, 275, 488, 492], "download_url": [232, 275], "filenam": [232, 275, 429, 459, 501], "md5": [232, 275], "address": [232, 275, 433, 476, 497, 500, 503, 515], "gen_bar_updat": [232, 275], "bar": [232, 275, 495, 515], "check_integr": [232, 275], "fpath": [232, 275], "checksum": [232, 275], "calculate_md5": [232, 275], "chunk_siz": [232, 275], "cifar10": [232, 275, 459], "cifar100": [232, 275, 459], "databas": [232, 275, 503], "www": [232, 275, 459, 528], "toronto": [232, 275, 459], "kriz": [232, 275, 459], "cifar": [232, 275, 459, 528], "tar": [232, 275, 459, 461, 490, 493], "gz": [232, 275, 459, 461, 490, 493], "manual": [232, 275, 459, 478, 484, 486, 489, 503, 508, 509, 510, 514], "subset": [232, 235, 275, 278, 459, 500], "internet": [232, 275, 459, 497], "again": [232, 275, 459, 498, 500, 518], "pytorchcifar10": [232, 275], "mxnetcifar10": [232, 275], "tensorflowcifar10": [232, 275], "pytorchcifar100": [232, 275], "mxnetcifar100": [232, 275], "tensorflowcifar100": [232, 275], "mnist": [232, 275, 459, 464], "nation": [232, 275, 433], "institut": [232, 275], "standard": [232, 247, 275, 288, 434, 440, 461, 466, 474, 524, 525], "technologi": [232, 275, 475], "fashionmnist": [232, 275, 459], "npz": [232, 275, 459], "idx1": [232, 275, 459], "ubyt": [232, 275, 459], "idx3": [232, 275, 459], "t10k": [232, 275, 459], "pytorchmnist": [232, 275], "mxnetmnist": [232, 275], "tensorflowmnist": [232, 275], "pytorchfashionmnist": [232, 275], "mxnetfashionmnist": [232, 275], "tensorflowfashionmnist": [232, 275], "imagefold": [232, 275, 459, 464, 475], "expect": [232, 275, 433, 434, 467, 495, 517, 519, 525], "subfold": [232, 275, 498], "belong": [232, 275, 361, 517], "class_1": [232, 275, 459], "xxx": [232, 275, 459, 475], "png": [232, 275, 459], "xxy": [232, 275, 459], "xxz": [232, 275, 459], "class_n": [232, 275, 459], "123": [232, 275, 459, 524], "nsdf3": [232, 275, 459], "asd932_": [232, 275, 459], "categori": [232, 275, 298, 351, 456, 459, 485], "mxnetimagefold": [232, 275], "tensorflowtfrecorddataset": [232, 275], "tensorflowimagerecord": [232, 275], "imagenet": [232, 235, 243, 275, 278, 285, 436, 461, 475, 484, 500, 514, 523, 524, 527, 528], "000": [232, 275, 438, 459], "099": [232, 275, 459], "tensorflowvocrecord": [232, 275], "pascal": [232, 275], "voc": [232, 275, 303, 356], "2012": [232, 275], "00000": [232, 275], "00004": [232, 275], "00001": [232, 275], "00003": [232, 275], "dummydataset": [233, 234, 276, 277], "127": [233, 234, 276, 277, 459, 517, 522, 528], "float32": [233, 234, 247, 276, 277, 288, 299, 352, 439, 456, 459, 475, 517, 519, 522, 524], "stand_norm": [233, 234, 276, 277, 459], "dummy_v2": [234, 277, 459], "sparse_dummy_v2": [234, 277, 459], "label_shap": [234, 277, 459], "sparsedummydataset": [234, 277], "dense_shap": [234, 277, 459], "sparse_ratio": [234, 277, 459], "imagenetraw": [235, 278, 459], "data_path": [235, 278, 459], "image_list": [235, 278, 459], "img1": [235, 278, 459], "img2": [235, 278, 459], "imgx": [235, 278, 459], "val_map": [235, 278, 459], "txt": [235, 278, 459, 461, 472, 497, 499, 500, 502, 503], "pytorchimagenetraw": [235, 278], "mxnetimagenetraw": [235, 278], "tensorflowimagenetraw": [235, 278], "inteltensorflow": [235, 237, 278, 280, 472], "tensorflowimagenetdataset": [235, 278], "onnxrtimagenetdataset": [235, 278], "bert_dataset": [236, 241, 279, 284, 295, 348], "coco_dataset": [236, 241, 279, 284, 295, 348], "dummy_dataset": [236, 241, 279, 284, 295, 348], "dummy_dataset_v2": [236, 241, 279, 284, 295, 348], "imagenet_dataset": [236, 241, 279, 284, 295, 348], "style_transfer_dataset": [236, 241, 279, 284, 295, 348], "styletransferdataset": [237, 280], "content_fold": [237, 280, 459], "style_fold": [237, 280, 459], "crop_ratio": [237, 280, 459], "resize_shap": [237, 280, 459], "256": [237, 243, 280, 285, 459, 464, 475, 524], "image_format": [237, 280, 459], "holder": [237, 280, 459], "labelbalancecocorecordfilt": [238, 281], "balanc": [238, 281, 519, 522], "labelbalancecocorawfilt": [238, 281], "tensorflowfilt": [239, 282], "onnxrtqlfilt": [239, 282], "onnxrtitfilt": [239, 282], "pytorchfilt": [239, 282], "mxnetfilt": [239, 282], "filter_registri": [239, 282], "filter_typ": [239, 282], "__call__": [239, 282], "coco_filt": [240, 241, 283, 284, 295, 348], "imagenet_transform": [241, 244, 284, 286, 295, 348], "parsedecodecocotransform": 242, "quantizedinput": [243, 285, 524], "labelshift": [243, 285, 524], "label_shift": [243, 285, 524], "parsedecodeimagenet": [243, 285, 524], "proto": [243, 247, 285, 288, 524], "parsedecodeimagenettransform": [243, 285], "tensorflowtransposelastchannel": 243, "tensorflowshiftrescal": 243, "rescal": [243, 247, 288, 524], "tensorflowresizecropimagenettransform": [243, 285], "random_crop": [243, 285, 524], "resize_sid": [243, 285, 524], "resize_method": [243, 285], "bilinear": [243, 247, 285, 288, 524], "random_flip_left_right": [243, 285, 524], "mean_valu": [243, 285, 524], "channels_last": [243, 285, 478], "subpixel": [243, 285], "rgb": [243, 285], "seri": [243, 285, 438, 472, 475, 524], "applic": [243, 285, 441, 466, 478, 495, 497, 503, 504, 508, 509, 515, 519, 522, 523, 524, 526], "crop": [243, 247, 285, 288, 459, 524], "flip": [243, 247, 285, 288, 524], "left": [243, 247, 285, 288, 489, 495, 522, 524], "std": [243, 247, 285, 288, 475, 524], "bilinearimagenettransform": [243, 285], "central_fract": [243, 285, 524], "875": [243, 285, 524], "fraction": [243, 285, 524], "onnxbilinearimagenettransform": [243, 285], "onnxresizecropimagenettransform": [243, 285], "std_valu": [243, 285], "229": [243, 285, 475], "225": [243, 285, 475], "resizewithaspectratio": [243, 285], "87": [243, 285, 528], "inter_pol": [243, 285], "cv2": [243, 285], "inter_area": [243, 285], "aspect": [243, 247, 285, 288, 524], "postprocess_cl": [245, 255, 475], "user_postprocess": [245, 255], "convert_to_unicod": [246, 287], "unicod": [246, 287], "assum": [246, 287, 299, 310, 352, 439, 468, 495], "load_vocab": [246, 287], "vocab_fil": [246, 247, 287, 288, 524], "convert_by_vocab": [246, 287], "vocab": [246, 287], "whitespace_token": [246, 287], "whitespac": [246, 287, 301, 354], "clean": [246, 287, 475], "piec": [246, 287, 296, 349, 474, 519], "fulltoken": [246, 287], "tokenzi": [246, 287], "basictoken": [246, 287], "punctuat": [246, 287, 296, 301, 349, 354], "lower": [246, 247, 287, 288, 301, 354, 395, 463, 514, 515, 517, 522, 524, 525], "wordpiecetoken": [246, 287], "unk_token": [246, 287], "unk": [246, 287], "max_input_chars_per_word": [246, 287], "200": [246, 287, 435, 504, 525], "wordpiec": [246, 247, 287, 288, 524], "concat_gener": [247, 288], "inc": [247, 288, 433, 440, 478, 485, 495, 497, 502, 515, 516, 520, 525], "tensorflowtransform": [247, 288], "mxnettransform": [247, 288], "pytorchtransform": [247, 288], "onnxrtqltransform": [247, 288], "onnxrtittransform": [247, 288], "transform_registri": [247, 288], "transform_typ": [247, 288], "basetransform": [247, 288], "tensorflowwrapfunct": [247, 288], "transform_func": [247, 288], "pytorchmxnettransform": [247, 288], "get_torchvision_map": [247, 288], "torchvis": [247, 288, 465, 469, 478, 484, 498], "composetransform": [247, 288], "transform_list": [247, 288, 524], "compos": [247, 288, 421, 524], "croptoboundingbox": [247, 288, 524], "offset_height": [247, 288, 524], "offset_width": [247, 288, 524], "target_height": [247, 288, 524], "target_width": [247, 288, 524], "box": [247, 288, 299, 303, 352, 356, 435, 474, 478, 489, 495, 523, 524, 525], "coordin": [247, 288, 335, 394, 502, 524, 525], "top": [247, 288, 294, 303, 318, 323, 331, 356, 434, 474, 495, 498, 500, 524], "corner": [247, 288, 434, 439, 441, 524], "horizont": [247, 288, 524], "mxnetcroptoboundingbox": [247, 288], "onnxrtcroptoboundingbox": [247, 288], "tensorflowcroptoboundingbox": [247, 288], "resizewithratio": [247, 288, 524], "min_dim": [247, 288, 524], "800": [247, 288, 524], "max_dim": [247, 288, 524], "1365": [247, 288, 524], "constant_valu": [247, 288], "longest": [247, 288, 524], "side": [247, 288, 459, 489, 524], "exce": [247, 288, 519, 524], "tensorflowresizewithratio": [247, 288], "permut": [247, 288, 524], "tensorflowtranspos": [247, 288], "mxnettranspos": [247, 288], "pytorchtranspos": [247, 288], "randomverticalflip": [247, 288, 524], "tensorflowrandomverticalflip": [247, 288], "randomhorizontalflip": [247, 288, 475, 524], "tensorflowrandomhorizontalflip": [247, 288], "toarrai": [247, 288, 524], "pil": [247, 288, 524], "casttftransform": [247, 288], "castonnxtransform": [247, 288], "castpytorchtransform": [247, 288], "centercroptftransform": [247, 288], "center": [247, 288, 437, 438, 472, 524, 525], "paddedcentercroptransform": [247, 288], "crop_pad": [247, 288], "resizetftransform": [247, 288], "bicub": [247, 288, 524], "resizepytorchtransform": [247, 288], "randomcroptftransform": [247, 288], "randomresizedcroppytorchtransform": [247, 288], "08": [247, 288, 524, 528], "randomresizedcropmxnettransform": [247, 288], "randomresizedcroptftransform": [247, 288], "normalizetftransform": [247, 288], "deviat": [247, 288, 461, 524], "broadcast": [247, 288, 464, 524], "rescalekeraspretraintransform": [247, 288], "rescaletftransform": [247, 288], "rescaletransform": [247, 288], "alignimagechanneltransform": [247, 288], "dim": [247, 288, 519, 522, 524], "align": [247, 288, 433, 519, 524], "must": [247, 288, 299, 352, 434, 435, 440, 456, 458, 472, 517, 524], "pytorchalignimagechannel": [247, 288], "tondarraytransform": [247, 288], "resizemxnettransform": [247, 288], "resizetransform": [247, 288], "cropresizetftransform": [247, 288], "boundari": [247, 288, 524], "area": [247, 288, 299, 352, 474, 524], "pytorchcropresizetransform": [247, 288], "mxnetcropresizetransform": [247, 288], "cropresizetransform": [247, 288], "centercroptransform": [247, 288], "mxnetnormalizetransform": [247, 288], "pytorchnormalizetransform": [247, 288], "normalizetransform": [247, 288], "randomcroptransform": [247, 288], "randomresizedcroptransform": [247, 288], "get_final_text": [247, 288], "pred_text": [247, 288], "orig_text": [247, 288], "project": [247, 288, 432, 433, 434, 501, 515, 521, 525, 529], "squadexampl": [247, 288], "qas_id": [247, 288], "question_text": [247, 288], "doc_token": [247, 288], "orig_answer_text": [247, 288], "start_posit": [247, 288], "end_posit": [247, 288], "is_imposs": [247, 288], "simpl": [247, 288, 472, 475, 514, 521, 522, 525], "answer": [247, 288, 300, 301, 353, 354, 433, 500, 514, 524, 528], "posit": [247, 288, 416, 433, 474, 478, 503, 508, 509, 510], "unique_id": [247, 288], "example_index": [247, 288], "doc_span_index": [247, 288], "token_to_orig_map": [247, 288], "token_is_max_context": [247, 288], "input_mask": [247, 288, 475], "segment_id": [247, 288, 475], "read_squad_exampl": [247, 288], "input_fil": [247, 288], "doc_strid": [247, 288, 524], "max_query_length": [247, 288, 524], "output_fn": [247, 288], "inputbatch": [247, 288], "collecttransform": [247, 288], "10833": [247, 288], "tfsquadv1posttransform": [247, 288], "n_best_siz": [247, 288, 524], "384": [247, 288, 524], "64": [247, 288, 436, 519, 522, 524, 528], "max_answer_length": [247, 288, 524], "30": [247, 288, 465, 469, 471, 524, 528], "nbest_predict": [247, 288, 524], "question": [247, 288, 300, 301, 353, 354, 433, 434, 438, 439, 472, 478, 502, 514, 522, 524, 528], "anoth": [247, 288, 296, 305, 349, 429, 461, 462, 488, 492, 524, 525], "long": [247, 288, 467, 519, 524], "document": [247, 288, 409, 440, 441, 446, 464, 476, 480, 490, 493, 494, 501, 502, 504, 514, 520, 524, 526], "chunk": [247, 288, 524], "tfmodelzoocollecttransform": [247, 288], "tfsquadv1modelzooposttransform": [247, 288], "squadv1": [247, 288, 524], "parsedecodevoctransform": [247, 288], "conf_fname_or_obj": [248, 257, 289, 294, 304, 305, 306, 307, 309, 318, 323, 331], "unnecessari": [248, 475], "setter": 250, "calib_dataload": [250, 332, 390, 435, 438, 458, 459, 461, 469, 470, 474, 475, 497, 498, 517, 518, 519], "reason": [250, 433, 440, 458, 500, 519, 523, 525], "know": [250, 464, 520], "metric_cl": [252, 356, 390, 475], "user_metr": [252, 356, 390], "alwai": [252, 299, 352, 356, 390, 461, 474, 475, 500], "recommend": [252, 356, 439, 459, 468, 486, 489, 494, 496, 514, 516, 525], "set_backend": 253, "tensorflowimagefold": 275, "qlinear2qdq": [290, 295, 348], "qlinearop": [291, 461, 471, 486, 517, 528], "check_model": 291, "onnx_qlinear_to_qdq": 291, "input_name_to_nod": 291, "destin": [291, 305], "tf_to_fp32_onnx": 292, "tf_to_int8_onnx": 292, "int8_model": [292, 293, 439], "get_node_map": 293, "fp32_onnx_path": 293, "module_node_map": 293, "get_quantizable_onnx_op": 293, "quantize_nod": 293, "dynamic_quant_export": 293, "pt_fp32_model": 293, "pt_int8_model": 293, "weight_typ": 293, "s8": 293, "static_quant_export": 293, "_quantiz": 293, "torch_to_fp32_onnx": 293, "do_constant_fold": 293, "verbos": [293, 335, 394], "torch_to_int8_onnx": 293, "achiev": [294, 331, 466, 475, 498, 513, 514, 515, 517, 522, 523, 525], "across": [294, 304, 331, 357, 460, 475, 502, 505, 514, 519, 522, 525], "variou": [294, 304, 331, 357, 441, 471, 478, 505, 514, 516, 519], "dl": [294, 304, 318, 323, 331, 357, 461, 470, 482, 495, 515, 528], "bring": [294, 331, 489, 502, 522], "unifi": [294, 331, 439, 440, 441, 458, 470, 471, 474, 475, 477], "vari": [294, 318, 323, 331, 500, 514, 522, 528], "roc": [294, 303, 318, 323, 331, 356], "flexibl": [294, 318, 323, 331, 438, 462, 502, 514, 519], "via": [294, 318, 323, 331, 433, 438, 464, 471, 475, 478, 495, 514, 515], "popular": [295, 348, 431, 438, 439, 440, 457, 462, 465, 466, 469, 475, 514, 517, 519, 525, 526], "techniqu": [295, 348, 431, 438, 471, 475, 478, 497, 513, 514, 515, 516, 517, 526, 527, 528], "bleu": [295, 297, 302, 348, 350, 355, 474, 514], "bleu_util": [295, 302, 348, 355], "coco_label_map": [295, 302, 348, 355], "coco_tool": [295, 302, 348, 355], "evaluate_squad": [295, 302, 348, 355], "f1": [295, 300, 302, 303, 348, 353, 355, 356, 464, 474, 475, 498, 521, 528], "basic_na": [295, 308, 348], "nas_util": [295, 308, 348], "pruner_legaci": [295, 348], "gradient_sensit": [295, 314, 348], "group_lasso": [295, 314, 348], "pruning_recip": [295, 348], "tile_pattern": [295, 319, 320], "logger": [295, 324, 348, 419, 422, 429], "prune_util": [295, 324, 348], "tuning_sampl": [295, 337, 343, 348, 398, 404], "tuning_spac": [295, 337, 343, 344, 346, 348, 398, 404, 405, 407], "tuning_struct": [295, 337, 343, 344, 345, 348, 398, 404, 405, 406], "auto_mixed_precis": [295, 337, 348, 398], "graph_optim": [295, 348], "mixed_precis": [295, 348, 357, 475], "model_convers": [295, 348], "pruning_v2": [295, 348], "unicoderegex": [296, 349], "hoc": [296, 349], "hack": [296, 349], "recogn": [296, 349, 525], "nondigit_punct_r": [296, 349], "compil": [296, 349, 475], "express": [296, 349, 433], "preced": [296, 349, 522, 525], "digit": [296, 349, 429, 515], "punct_nondigit_r": [296, 349], "symbol_r": [296, 349], "bleu_token": [296, 349], "mose": [296, 349], "smt": [296, 349], "mosesdecod": [296, 349], "mteval": [296, 349], "v14": [296, 349], "pl": [296, 349], "l954": [296, 349], "l983": [296, 349], "bilingu": [296, 349], "understudi": [296, 349], "qualiti": [296, 349], "machin": [296, 349, 466, 472, 481, 495, 497, 503, 515, 522, 523], "translat": [296, 297, 349, 350, 514, 525], "natur": [296, 349, 466], "approxim": [296, 297, 349, 350, 440, 474, 519], "glue": [296, 303, 349, 356, 459, 474, 475, 484], "word": [296, 349, 474, 514, 519, 528], "ngram": [296, 349, 474], "breviti": [296, 297, 349, 350, 474], "penalti": [296, 297, 349, 350, 474], "doe": [296, 349, 408, 458, 459, 474, 475, 519, 520, 524], "beam": [296, 349, 474], "tensor2tensor": [297, 350], "bleu_hook": [297, 350], "compute_bleu": [297, 350], "reference_corpu": [297, 350], "translation_corpu": [297, 350], "max_ord": [297, 350], "use_bp": [297, 350], "against": [297, 350], "gram": [297, 350], "bleu_scor": [297, 350], "third": [299, 352, 434, 473], "parti": [299, 352, 434, 473, 517], "pycocotool": [299, 352, 467, 472], "noth": [299, 352, 525], "thu": [299, 352, 475, 514, 517], "cannot": [299, 352, 435, 467, 519, 523], "jonathanhuang": [299, 352], "image_id": [299, 352, 474], "invok": [299, 352, 440], "groundtruth_dict": [299, 352], "exportgroundtruthtococo": [299, 352], "groundtruth_boxes_list": [299, 352], "groundtruth_classes_list": [299, 352], "max_num_class": [299, 352], "output_path": [299, 352], "detections_list": [299, 352], "exportdetectionstococo": [299, 352], "detection_boxes_list": [299, 352], "detection_scores_list": [299, 352], "detection_classes_list": [299, 352], "cocowrapp": [299, 352], "loadannot": [299, 352], "cocoevalwrapp": [299, 352], "agnostic_mod": [299, 352], "computemetr": [299, 352], "detection_typ": [299, 352], "bbox": [299, 352, 435, 474], "hold": [299, 335, 352, 394, 459], "iou_typ": [299, 352], "iou_thr": [299, 303, 352, 356, 474], "map_point": [299, 303, 352, 356, 474], "cocoev": [299, 352], "mscoco": [299, 352], "Then": [299, 352, 440, 461, 488, 490, 492, 493, 500, 522, 525], "exportsingleimagegroundtruthtococo": [299, 352], "next_annotation_id": [299, 352], "category_id_set": [299, 352], "groundtruth_box": [299, 352], "groundtruth_class": [299, 352], "groundtruth_mask": [299, 352], "groundtruth_is_crowd": [299, 352], "ingest": [299, 352], "here": [299, 352, 409, 440, 459, 464, 465, 466, 468, 469, 474, 483, 490, 493, 495, 498, 501, 503, 517, 520, 521, 522, 528], "exportsingleimagedetectionstococo": [299, 352], "uniqu": [299, 332, 352, 517], "assign": [299, 352, 429, 464, 516, 525], "num_gt_box": [299, 352], "num_detect": [299, 303, 352, 356, 474, 475, 527], "image_height": [299, 352], "image_width": [299, 352], "detection_mask": [299, 352], "crowd": [299, 352], "insid": [299, 352, 462, 463, 496, 514, 519, 525], "exportsingleimagedetectionboxestococo": [299, 352], "detection_box": [299, 352, 475, 527], "detection_scor": [299, 352, 475, 527], "detection_class": [299, 352, 475, 527], "exporsingleimagedetectionboxestococo": [299, 352], "exportsingleimagedetectionmaskstococo": [299, 352], "allenai": [300, 301, 353, 354], "bi": [300, 301, 353, 354], "att": [300, 301, 353, 354], "flow": [300, 301, 353, 354, 435, 436, 475], "f1_score": [300, 301, 353, 354], "ground_truth": [300, 301, 353, 354], "ground": [300, 301, 353, 354], "truth": [300, 301, 353, 354], "metric_max_over_ground_truth": [300, 301, 353, 354], "metric_fn": [300, 301, 353, 354], "exact_match_scor": [300, 353], "exact": [300, 353], "articl": [300, 301, 353, 354], "paragraph": [300, 301, 353, 354], "qa": [300, 301, 353, 354, 438], "normalize_answ": [301, 354], "newlin": [301, 354, 429], "tab": [301, 354, 495, 523], "harmon": [301, 303, 354, 356], "recal": [301, 303, 354, 356], "answer_start": [301, 354], "177": [301, 354, 528], "denver": [301, 354], "bronco": [301, 354], "nfl": [301, 354], "team": [301, 354, 433, 518], "afc": [301, 354], "super": [301, 354, 436], "bowl": [301, 354], "50": [301, 354, 436, 440, 500, 514, 522, 528], "56be4db0acb8001400a502ec": [301, 354], "form": [301, 354, 461, 462, 495], "percentag": [301, 354, 457, 519, 527], "tensorflowmetr": [303, 356], "maintain": [303, 356, 433, 434, 477, 478, 490, 493, 497, 502, 503, 514, 519, 520], "pytorchmetr": [303, 356], "mxnetmetr": [303, 356], "onnxrtqlmetr": [303, 356], "onnxrtitmetr": [303, 356], "metric_registri": [303, 356], "metric_typ": [303, 356], "decorator_metr": [303, 356], "basemetr": [303, 356, 390], "single_output": [303, 356], "hvd": [303, 356, 464], "wrappytorchmetr": [303, 356], "wrapmxnetmetr": [303, 356], "wraponnxrtmetr": [303, 356], "proport": [303, 356], "pred_list": [303, 356], "pytorchloss": [303, 356], "mae": [303, 356, 474], "compare_label": [303, 356, 390, 474], "rmse": [303, 356, 474, 525], "squar": [303, 338, 356, 399, 461, 474, 500, 525], "tensorflowtopk": [303, 356], "k": [303, 356, 390, 474, 497, 514], "among": [303, 356, 489, 522], "outcom": [303, 356], "num_correct": [303, 356], "num_sampl": [303, 356], "generaltopk": [303, 356], "cocomapv2": [303, 356, 474], "anno_path": [303, 356, 474], "map_kei": [303, 356], "detectionboxes_precis": [303, 356], "output_index_map": [303, 356, 474], "tensorflowmap": [303, 356], "tensorflowcocomap": [303, 356], "tensorflowvocmap": [303, 356], "squadf1": [303, 356, 474], "miou": [303, 356], "num_class": [303, 356], "21": [303, 356, 483, 484, 506, 509, 510, 515, 522, 528], "iou": [303, 356], "intersect": [303, 356, 439, 474], "union": [303, 356, 418, 474, 506], "onnxrtglu": [303, 356], "dlrm": [303, 356], "modelconvers": 305, "typic": [305, 332, 436, 438, 463, 465, 469, 500, 514, 528], "basicna": 306, "model_build": [306, 309], "conf_fnam": 306, "nasbas": [309, 436], "nas_registri": 310, "nas_method": 310, "create_search_space_pool": 310, "idx": [310, 459], "enumer": [310, 414, 418, 439, 462, 463, 464, 475, 513, 514, 523], "find_pareto_front": 310, "pareto": [310, 436], "front": [310, 436], "n_point": 310, "n_metric": 310, "n_pareto_point": 310, "gradientsensitivityprun": 312, "pytorchmodel": [312, 313, 315, 316, 317, 366], "overwritten": [312, 313, 315, 316, 317, 483], "grouplassoprun": 313, "legaci": 314, "basicmagnitudeprun": 315, "patternlockprun": [316, 328], "pruner_registri": 317, "clase": 317, "pruningconf": [318, 323], "tfpruningcallback": [318, 323], "input_model": [318, 323, 477, 498, 499, 500, 523], "pure": [318, 323, 514], "pattern_registri": 321, "pattern_typ": 321, "patternbas": 321, "mask_shap": [321, 322], "is_contigu": 321, "tile": 322, "tilepatternbas": 322, "tilepattern_1x1": 322, "1x1": [322, 462, 475, 514], "tilepattern_2x2": 322, "2x2": [322, 522], "tilepattern_1x16": 322, "1x16": 322, "tilepattern_4x1": 322, "tilepattern_1x2": 322, "1x2": [322, 522], "patternnxm": 326, "patternninm": 326, "reset_non_value_to_default": 327, "parse_not_to_prun": 327, "update_frequency_on_step": [328, 516], "max_sparsity_ratio_per_lay": [328, 516], "magnitudeprun": 328, "snipprun": 328, "snipmomentumprun": 328, "moreoev": 328, "quantconf": 331, "separ": [332, 433, 470, 473, 503, 505, 513, 516], "opt_model": [332, 475], "fulli": [332, 475, 503, 517, 522], "train_func": [332, 418, 464, 475, 517], "automixedprecisiontunestrategi": [333, 392], "basictunestrategi": [334, 393], "stage": [334, 339, 391, 393, 400, 462, 514, 523, 525], "polici": [334, 338, 391, 393, 399, 433, 438, 527, 529], "bayesiantunestrategi": [335, 394], "acq_max": [335, 394], "ac": [335, 394], "gp": [335, 394], "y_max": [335, 394], "n_warmup": [335, 394], "10000": [335, 394, 514], "n_iter": [335, 394], "acquisit": [335, 394], "gaussian": [335, 394, 525], "relev": [335, 394, 440, 441, 500, 514], "acq": [335, 394], "randomst": [335, 394], "scipi": [335, 394], "x_max": [335, 394], "targetspac": [335, 394], "pbound": [335, 394], "9527": [335, 394, 475, 527], "bayesianoptim": [335, 394], "exhaustivetunestrategi": [336, 396], "msetunestrategi": [338, 399], "mse_v2tunestrategi": [339, 400], "revert": [339, 347, 400, 408, 525], "randomtunestrategi": [340, 401], "strategy_registri": [341, 402, 525], "tunestrategi": [341, 402, 525], "tuningsamplerregistri": 344, "tuningsampl": [344, 405], "tuningord": [344, 405], "Not": [344, 345, 405, 406, 429, 436], "tuningspac": [344, 345, 405, 406], "tuning_order_lst": [344, 405], "initial_op_tuning_cfg": [344, 405], "modelwisetuningsampl": [344, 405], "tuning_items_prior": [344, 405], "op_dtype_dict": [344, 405], "optuningconfig": [344, 345, 346, 405, 406, 407], "optypewisetuningsampl": [344, 405], "opwisetuningsampl": [344, 405], "fallbacktuningsampl": [344, 405], "op_dtyp": [344, 405], "accumul": [344, 405, 525], "skip_first": [344, 405], "smoothquantsampl": [344, 405], "tuningitem": [345, 406], "item_typ": [345, 406], "pattern_to_intern": [345, 406], "default_dtyp": [345, 406], "pattern_to_path": [345, 406], "quant_mode_from_pattern": [345, 406], "internal_pattern": [345, 406], "initial_tuning_cfg_with_quant_mod": [345, 406], "op_name_typ": [345, 406], "step1": [345, 406], "step2": [345, 406], "complet": [345, 406, 439, 440, 514, 517, 525, 527, 528], "step3": [345, 406], "step4": [345, 406], "step5": [345, 406], "op_quant_mod": [346, 407], "ordereddefaultdict": [347, 408], "extract_data_typ": [347, 408], "sign": [347, 408, 434, 438, 441, 457, 497, 515, 517, 519, 521], "reverted_data_typ": [347, 408], "signed_flag": [347, 408], "get_adaptor_nam": [347, 408], "experiment": [348, 436, 459, 463, 464, 466, 475, 514, 516, 517, 520, 524], "base_model": [348, 359], "keras_model": [348, 359], "mxnet_model": [348, 359], "nets_factori": [348, 359], "onnx_model": [348, 359, 383, 498], "tensorflow_model": [348, 359, 388, 500], "torch_model": [348, 359], "collect_layer_histogram": [348, 422], "create_obj_from_config": [348, 422], "kl_diverg": [348, 422], "load_huggingfac": [348, 422, 475], "neural_insights_util": [348, 422], "weights_detail": [348, 422], "sub_class": [356, 390], "register_customer_metr": 356, "topk": [356, 390, 464, 474, 475, 497, 517], "frozen": [357, 365, 390, 477], "savedmodel": [357, 365, 390, 528], "onnx_ml_pb2": [357, 477], "hybirdblock": [357, 390], "basemodel": 358, "plai": [358, 515, 519, 522], "role": [358, 519, 522], "kerasmodel": 360, "get_model_fwk_nam": 361, "fwk": 361, "mxnetmodel": 362, "net": 363, "tfslimnetsfactori": 363, "get_model_typ": 365, "validate_graph_nod": 365, "validate_and_inference_input_output": 365, "output_tensor_nam": 365, "graph_sess": 365, "graph_def_sess": 365, "frozen_pb_sess": 365, "load_saved_model": 365, "saved_model_tag": 365, "signatur": 365, "saved_model_dir": 365, "metagraphdef": 365, "keras_sess": 365, "slim_sess": 365, "checkpoint_sess": 365, "estimator_sess": 365, "saved_model_sess": 365, "tensorflowbasemodel": [365, 388], "tensorflowsavedmodelmodel": 365, "tensorflowqatmodel": 365, "tensorflowcheckpointmodel": 365, "tensorflowmodel": 365, "pytorchbasemodel": 366, "pytorchfxmodel": 366, "ipexmodel": 366, "driven": [367, 438, 475, 495, 512, 523], "objective_registri": 367, "objective_custom_registri": 367, "obj_cl": 367, "eural_compressor": 367, "objective_cl": 367, "user_object": 367, "__class__": 367, "__name__": 367, "objective_cfg": 367, "usr_cfg": 367, "user_obj_cfg": 367, "easili": [367, 439, 479, 483, 495, 512, 522], "peak": [367, 512], "multiobject": 367, "metric_criterion": 367, "metric_weight": 367, "obj_criterion": 367, "obj_weight": 367, "is_measur": 367, "parserfactori": 369, "onnxrtparserfactori": 371, "onnxprofilingpars": 373, "respons": [373, 374, 378, 508, 509, 510, 517], "profilingpars": 374, "profilingresult": 375, "total_execution_tim": 375, "accelerator_execution_tim": 375, "cpu_execution_tim": 375, "op_run": 375, "op_defin": 375, "tensorflowparserfactori": 376, "tensorflowprofilingpars": 378, "profilerfactori": [379, 381, 386], "create_onnx_config": 384, "ort": 384, "sessionopt": 384, "delete_assign": 389, "create_tf_config": 389, "tf_modul": 389, "configproto": 389, "set_eager_execut": 389, "entir": [390, 418, 435, 440, 441, 457, 502, 514, 522], "autotunestrategi": 391, "conservativetunestrategi": 395, "o0": [395, 525], "who": [395, 433], "hawq_v2tunestrategi": 397, "made": [397, 439, 517, 520, 525], "impact": [397, 514, 520, 525], "tunestrategymeta": 402, "metaclass": 402, "lowerbitssampl": 405, "blockfallbacktuningsampl": 405, "op_block_lst": 405, "target_dtyp": 405, "alpha_list": 405, "weightonlyquantsampl": 405, "quantopt": 408, "quant_typ": 408, "quant_opt": 408, "preprocess_user_cfg": 408, "op_user_cfg": 408, "op_user_cfg_modifi": 408, "build_slave_faker_model": 408, "slave": [408, 525], "virtual": [408, 515], "classregist": 408, "fun": 409, "attribute1": 409, "module_debug_level1": 409, "debug": [409, 425, 461, 488, 492, 496, 525, 526], "function1": 409, "param1": 409, "param2": 409, "parameter1": 409, "parameter2": 409, "function2": 409, "pep": 409, "484": [409, 528], "output_model": [409, 475, 498, 500, 523], "function3": 409, "section": [409, 441, 461, 462, 463, 495, 498, 501, 514, 516, 519, 527], "restructuredtext": 409, "liter": 409, "generator1": 409, "example_gener": 409, "exampleclass": 409, "param3": 409, "public": [409, 433, 490, 493], "attr1": 409, "attr2": 409, "attr5": 409, "api_doc_exampl": 410, "rtnweightquantconfig": [414, 417], "weight_dtyp": 414, "weight_bit": [414, 440], "weight_group_s": 414, "weight_sym": 414, "act_dtyp": 414, "get_default_rtn_config": 414, "quant_config": [416, 417], "base_config": 416, "calib_func_arg": 416, "register_algo": 417, "algos_map": 417, "example_algo": 417, "loop": [418, 435, 436, 440, 441, 468, 505, 521, 525], "compressionmanag": 418, "deal": 418, "pruningconfig": 418, "orchestr": [418, 438, 471, 526], "on_train_begin": [418, 435, 462, 463, 475, 513, 514, 517], "train_loop": [418, 475, 513], "on_epoch_begin": [418, 421, 462, 463, 475, 513], "on_step_begin": [418, 421, 462, 463, 475, 513, 514], "on_after_compute_loss": [418, 462, 463, 475, 513], "backward": [418, 462, 463, 464, 475, 513, 514, 517, 520], "on_before_optimizer_step": [418, 462, 463, 475, 513, 514], "on_step_end": [418, 421, 462, 463, 475, 513], "on_epoch_end": [418, 421, 462, 463, 475, 513], "on_train_end": [418, 462, 463, 475, 513, 514, 517], "path_to_sav": 418, "manag": [418, 421, 475, 478, 479, 489], "top1": [418, 474, 497, 514, 517, 528], "callbacks_list": 418, "layerhistogramcollector": 419, "layer_tensor": 419, "include_lay": 419, "get_func_from_config": 421, "func_dict": 421, "get_preprocess": 421, "get_metr": 421, "get_postprocess": 421, "get_algorithm": 421, "create_dataset": 421, "cfg_preprocess": 421, "cfg_filter": 421, "create_dataload": 421, "dataloader_cfg": 421, "create_eval_func": 421, "postprocess_cfg": 421, "fp32_baselin": [421, 439], "baselin": [421, 521, 523], "create_train_func": 421, "train_cfg": 421, "Their": 421, "auxiliari": 422, "optimizedmodel": 424, "from_pretrain": [424, 475], "save_for_huggingface_upstream": [424, 475], "msg": [425, 504, 508, 509], "fatal": 425, "warn": 425, "alia": [425, 429, 480, 485], "register_neural_insights_workload": 426, "workload_loc": [426, 429], "workload_mod": 426, "workload_nam": 426, "uuid": 426, "update_neural_insights_workload": 426, "workload_uuid": 426, "update_neural_insights_workload_accuracy_data": 426, "baseline_accuraci": 426, "optimized_accuraci": 426, "get_model_path": 426, "is_int8_model": 428, "load_weight_onli": 428, "checkpoint_dir": 428, "history_cfg": 428, "best_configur": 428, "best_model_weight": 428, "snapshot": [428, 499], "cfg_from_fil": 429, "yaml_fil": [429, 459, 464], "lazyimport": 429, "lazi": 429, "till": [429, 525], "time_limit": 429, "get_siz": 429, "seen": [429, 439], "recurs": 429, "compute_spars": 429, "fault_tolerant_fil": 429, "equal_dict": 429, "d2": 429, "compare_kei": 429, "ignore_kei": 429, "cpuinfo": 429, "dump_elapsed_tim": [429, 439], "customized_msg": 429, "elaps": 429, "combine_histogram": 429, "old_hist": 429, "old": [429, 475, 520], "get_tensor_histogram": 429, "get_all_fp32_data": 429, "get_tuning_histori": 429, "tuning_history_path": 429, "offlin": [429, 433, 475, 517, 522], "str2arrai": 429, "dequantize_weight": 429, "weight_tensor": 429, "min_filter_tensor": 429, "max_filter_tensor": 429, "scale_info": 429, "captureoutputtofil": 429, "tmp_file_path": 429, "stream": [429, 528], "sy": [429, 481], "stderr": 429, "captur": 429, "statist": [429, 430], "header": [429, 467], "field_nam": 429, "output_handl": 429, "printer": 429, "global_st": 429, "load_data_from_pkl": 429, "pkl": [429, 499], "dump_data_to_loc": 429, "show_memory_info": 429, "hint": 429, "dump_class_attr": 429, "compare_object": 429, "obj1": 429, "obj2": 429, "ignore_attr": 429, "comparison": [429, 519, 520, 523], "alias_param": 429, "param_nam": 429, "param_alia": 429, "alias": 429, "print_tabl": 429, "column_map": 429, "table_entri": 429, "titl": [429, 473, 496, 525], "insert_newlin": 429, "prettyt": 429, "column": [429, 519, 522], "handler": [429, 525], "row": [429, 461, 498, 522], "decim": 429, "get_tensors_info": 429, "get_weights_detail": 429, "weightdetail": 429, "dump_tabl": 429, "file_typ": 429, "csv": [429, 436, 498, 499], "dump_table_to_csv": 429, "get_number_of_socket": 429, "platform": [429, 438, 471, 478, 486, 505, 515, 517], "opentri": 429, "activation_min": 429, "activation_max": 429, "print_op_list": 429, "get_op_list": 429, "minmax_file_path": 429, "input_model_tensor": 429, "optimized_model_tensor": 429, "activation_min_max": 429, "calculate_ms": 429, "mse_metric_gap": 429, "fp32_tensor": 429, "dequantize_tensor": 429, "euclidean": [429, 462], "distanc": [429, 462], "check_key_exist": 429, "weightsdetail": 430, "input_tensor_data": 430, "optimized_tensor_data": 430, "weightsstatist": 430, "welcom": [432, 433, 434, 438, 497, 504, 529], "interest": [433, 438, 497, 523], "foster": 433, "particip": [433, 505], "commun": [433, 497], "harass": 433, "experi": [433, 478, 500, 521, 522, 525], "everyon": 433, "regardless": 433, "ag": 433, "bodi": 433, "ethnic": 433, "characterist": 433, "gender": 433, "educ": 433, "socio": 433, "econom": 433, "race": 433, "religion": 433, "sexual": 433, "orient": 433, "contribut": [433, 438, 514], "inclus": 433, "Being": 433, "respect": [433, 468, 514, 522, 527], "viewpoint": 433, "gracefulli": 433, "focus": [433, 439], "empathi": 433, "toward": [433, 462], "member": [433, 439], "unaccept": 433, "imageri": 433, "unwelcom": 433, "troll": 433, "insult": 433, "derogatori": 433, "polit": 433, "attack": 433, "privat": 433, "publish": [433, 473, 476, 496, 522], "electron": 433, "explicit": 433, "permiss": 433, "inappropri": 433, "profession": 433, "clarifi": 433, "appropri": [433, 457, 522], "fair": 433, "action": [433, 490, 493], "edit": 433, "reject": 433, "commit": [433, 434], "wiki": 433, "issu": [433, 434, 437, 438, 472, 498, 500, 517, 523], "ban": 433, "temporarili": 433, "deem": 433, "threaten": 433, "offens": 433, "harm": 433, "mail": 433, "social": [433, 515], "media": [433, 515], "account": [433, 521, 525], "appoint": 433, "onlin": [433, 521], "event": [433, 523], "abus": 433, "report": [433, 434, 438, 505, 521], "contact": [433, 520, 521], "complaint": 433, "review": [433, 434, 438, 515], "investig": [433, 500], "circumst": [433, 516], "oblig": [433, 501], "confidenti": [433, 497], "regard": [433, 518], "incid": 433, "good": [433, 517, 525], "faith": 433, "repercuss": 433, "leadership": 433, "faq": [433, 438], "page": [433, 434, 497, 500, 501], "send": [434, 440], "view": [434, 438, 465, 486, 495, 501, 520], "star": 434, "repositori": [434, 490, 493], "button": [434, 471, 489, 495], "fork": [434, 490, 493], "clone": [434, 461, 472, 488, 492, 497, 499, 500, 502, 503], "pc": 434, "git": [434, 461, 467, 472, 497, 499, 500, 502, 503], "modif": [434, 439, 468, 483, 502], "checkout": 434, "my": 434, "push": [434, 514, 519, 522], "cover": [434, 466, 470, 515], "would": [434, 475, 499, 514, 517, 522], "adopt": [434, 478, 514, 515, 522], "certif": [434, 497], "agre": 434, "pr": [434, 458, 474, 490, 493, 520], "At": [434, 440, 501, 505, 525], "approv": 434, "solv": [434, 517, 520], "licens": 434, "azur": [434, 438, 515], "devop": 434, "ci": 434, "cloud": [434, 438, 505, 515], "deploi": [434, 462, 475, 501, 505, 519, 525], "e16": 434, "v5": 434, "scan": [434, 438], "pylint": 434, "bandit": 434, "copyright": [434, 473], "docstyl": 434, "spellcheck": 434, "dco": 434, "pytest": 434, "No": [434, 467, 475, 503, 504, 515], "failur": [434, 435], "fault": 434, "coverag": 434, "runtim": [434, 438, 439, 440, 442, 458, 461, 465, 468, 471, 476, 480, 485, 486, 516, 519, 520, 525], "submit": [434, 502, 505, 515], "bug": [434, 438], "intend": 434, "safe": 434, "collabor": [434, 438, 480, 486], "adher": 434, "toolkit": [435, 472, 478, 486, 515, 526], "tracer": 435, "resolv": [435, 437], "floatfunct": 435, "cat": [435, 466, 481, 508, 509, 510], "done": [435, 462, 463, 479, 495, 504, 508, 509, 514, 517], "10004": [435, 436, 439, 458, 462, 463, 464, 468, 471, 476, 513, 516, 519, 527], "neural_compressor": [435, 436, 438, 441, 456, 458, 459, 461, 462, 463, 464, 466, 469, 470, 474, 475, 476, 477, 497, 498, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527], "eval": [435, 458, 461, 478, 517, 523], "conduct": [435, 475, 483, 495, 525, 526], "imper": 435, "therefor": [435, 475, 498, 500, 514, 517, 519, 520, 522], "lot": [435, 500, 522], "As": [435, 440, 458, 462, 474, 475, 489, 500, 514, 519, 525], "successfulli": [435, 464, 504, 508, 509, 510, 515], "suggest": [435, 521], "traceabl": 435, "proxi": 435, "tutori": [435, 486, 515, 526], "prototyp": 435, "html": [435, 438, 440, 457, 464, 471, 490, 493, 496, 498, 504, 508, 517], "highlight": 435, "untrac": 435, "ssd": [435, 466, 528], "resnet34": [435, 528], "r34": 435, "bboxes_labels_scor": 435, "prob": 435, "45": [435, 528], "max_output": 435, "zip": [435, 504, 508, 509], "dbox": 435, "dlabel": 435, "dscore": 435, "decode_singl": 435, "autom": [436, 478, 495, 496, 515, 522], "artifici": 436, "ann": 436, "par": [436, 505], "outperform": 436, "hand": 436, "propos": [436, 439, 462, 476, 519, 522], "potenti": [436, 461, 520], "lie": [436, 457], "predictor": 436, "shown": [436, 458, 461, 462, 474, 475, 489, 498, 500, 512, 513, 514, 519, 522, 525], "figur": [436, 488, 489, 492, 519], "popul": 436, "inner": 436, "evolutionari": 436, "cycl": 436, "until": [436, 440, 525], "conclud": 436, "met": [436, 468, 517, 523], "yet": [436, 490, 493, 496, 503], "simplest": [436, 457, 481], "launcher": [436, 438, 462, 463, 486, 526], "agent": 436, "nsga2": 436, "supernet": 436, "ofa_mbv3_d234_e346_k357_w1": 436, "acc": [436, 505, 514, 523, 528], "mac": [436, 496], "num_ev": 436, "250": [436, 514], "results_csv_path": 436, "search_result": 436, "dataset_path": 436, "ilsvrc2012": 436, "aim": [436, 438, 478, 514, 522, 525, 526], "mobilenetv3": 436, "lt": [436, 459, 528], "wmt": 436, "en": 436, "de": 436, "guidelin": [437, 438], "mainstream": [438, 526], "learn": [438, 439, 440, 458, 459, 466, 470, 471, 472, 475, 476, 478, 480, 483, 484, 486, 489, 490, 493, 495, 514, 515, 517, 522, 523, 525, 526], "workflow": [438, 440, 441, 461, 462, 466, 472, 476, 490, 493, 497, 523, 526], "particular": [438, 514, 519], "wide": [438, 465, 476, 514, 517, 528], "hardwar": [438, 439, 462, 471, 475, 495, 514, 515, 516], "xeon": [438, 472, 473, 476, 515, 517, 518, 528], "scalabl": [438, 472, 476, 515, 517, 518], "processor": [438, 476, 503, 515, 517, 518], "flex": [438, 472], "amd": [438, 472, 528], "arm": [438, 471, 472, 528], "nvidia": [438, 457, 471, 472, 528], "llama2": 438, "llama": [438, 514, 515, 519, 522, 528], "mpt": [438, 514, 522, 528], "falcon": [438, 514, 522, 528], "gpt": [438, 499, 514, 522, 528], "j": [438, 499, 514, 522, 528], "bloom": [438, 514, 522, 528], "broad": [438, 471, 484, 526], "stabl": [438, 472, 514, 515], "diffus": [438, 515], "vision": [438, 466, 482, 522], "coder": [438, 471, 479, 480, 483, 486, 489, 502, 506, 515], "marketplac": [438, 496, 515], "googl": [438, 476, 515], "amazon": [438, 478, 486], "web": [438, 497, 503, 508, 509, 510, 523], "servic": [438, 495, 502, 515], "softwar": [438, 473, 514, 515, 520], "alibaba": [438, 485, 492, 493, 515], "tencent": [438, 515], "taco": [438, 515], "oliv": [438, 515], "ai": [438, 478, 515, 518, 526], "ecosystem": [438, 515], "lightn": [438, 485], "pip": [438, 461, 464, 467, 469, 472, 480, 483, 488, 490, 492, 493, 497, 498, 499, 500, 520], "wget": [438, 461, 467, 469, 497, 500], "googleapi": [438, 469, 497, 500], "v1_6": [438, 469, 497, 500], "mobilenet_v1_1": [438, 469, 497, 508], "0_224_frozen": [438, 469, 497, 508], "overview": [438, 525], "jupyterlab": [438, 478, 484, 486, 488, 492, 526], "studio": [438, 486, 495, 505, 526], "topic": 438, "int4": [438, 517, 528], "fp8": [438, 515], "innov": [438, 486, 515], "blog": [438, 515], "oct": [438, 515], "2023": [438, 510, 514, 519, 522, 528], "emnlp": [438, 515], "teq": [438, 515, 519], "sep": [438, 515], "neurip": [438, 515], "quala": [438, 515], "minilm": [438, 515, 528], "releas": [438, 472, 484, 486, 488, 492, 494, 506, 509, 510, 529], "legal": [438, 529], "request": [438, 503, 504, 505, 508, 509, 510, 517], "ask": [438, 472], "email": 438, "research": [438, 473, 522, 528], "idea": [438, 497, 514, 522, 525], "discord": 438, "join": [438, 498, 503, 508, 509], "technic": 438, "discuss": 438, "wechat": [438, 515], "img": 438, "bridg": [439, 440, 471], "vanilla": [439, 440, 471], "abcadaptor": 439, "__init__": [439, 458, 459, 474, 525], "query_fw_cap": [439, 441], "query_fused_pattern": 439, "he": 439, "besid": [439, 462, 500, 519], "describ": [439, 441, 461, 468, 497, 523], "past": [439, 519], "mainten": 439, "difficult": [439, 522], "abil": [439, 440, 459, 468, 522], "fragment": 439, "scenario": [439, 456, 462, 475, 514, 519], "granular": [439, 440, 441, 468, 471, 481, 517, 522, 527], "semant": [439, 468], "mla": [439, 476, 517], "becom": [439, 466, 514, 519], "explor": 439, "inspect_tensor": 439, "op_list": [439, 523], "iteration_list": 439, "inspect_typ": 439, "save_to_disk": 439, "quantization_cfg": 439, "set_tensor": 439, "tensor_dict": 439, "diagnosis_help": 439, "fw": 440, "outlin": [440, 441], "instruct": [440, 441, 462, 472, 476, 490, 493, 497, 498, 499, 500, 514, 515, 516, 517, 522, 528], "extend": [440, 441], "accommod": [440, 441], "incorpor": [440, 441, 463, 514, 525], "give": [440, 495, 525], "diagram": [440, 441, 461, 525], "illustr": [440, 441, 463, 525], "sequencediagram": [440, 441, 505], "autonumb": [440, 441], "query_framework_cap": 440, "opwis": 440, "optypewis": 440, "travers": [440, 441, 519, 525], "\u2776": 440, "\u2777": 440, "\u2778": 440, "\u2779": 440, "\u277a": 440, "\u277b": 440, "\u277c": 440, "These": [440, 471, 498], "chapter": 440, "node_op": 440, "confirm": 440, "chosen": [440, 457], "tune_config": 440, "int8_conv_config": 440, "optype_wise_": 440, "per_tensor": [440, 441, 468, 517, 527], "tuning_cfg_to_fw": 440, "Its": [440, 457, 514], "calib_iter": 440, "dispatch": [440, 471, 502, 505], "is_perchannel": 440, "is_asymmetr": 440, "convert_bf16": 440, "larger": [440, 514, 519, 522], "somewhat": 440, "distort": 440, "line": [440, 464, 471, 478, 483, 484, 503, 523], "explain": [441, 461, 522], "let": [441, 468, 483, 514, 516, 527], "overal": [441, 503, 527], "drive": 441, "uint4": 441, "asymmetr": [441, 517, 519, 525], "kullback": [441, 462], "leibler": [441, 462], "pytorch_cpu": 441, "1_11_capabl": 441, "cap_s8_1_11": 441, "cap_s8_1_11_conv1d": 441, "per_channel_symmetr": 441, "addition": [441, 464, 514, 525], "per_tensor_symmetr": 441, "due": [441, 466, 514, 517, 522, 523], "nativ": 441, "with_arg": 441, "qscheme": 441, "torch_dtyp": 441, "quant_min": 441, "quant_max": 441, "linux": [456, 467, 489, 495], "x86_64": 456, "aarch64": 456, "prove": [457, 519, 522], "benefici": 457, "uniform": [457, 519], "\u03b2": 457, "\u03b1": 457, "fundament": [457, 475], "primari": [457, 525], "focu": [457, 525], "essenti": [457, 467], "remaind": 457, "enhanc": [457, 478, 514, 515, 518], "resolut": 457, "extrem": 457, "still": [457, 475, 501, 515, 517, 518], "retain": 457, "noteworthi": 457, "vanhouck": 457, "vincent": 457, "andrew": 457, "senior": 457, "mark": 457, "mao": 457, "speed": [457, 475, 486, 514, 515, 517, 525], "2011": 457, "szymon": 457, "migacz": 457, "2017": 457, "mckinstri": 457, "jeffrei": 457, "l": [457, 462, 523, 525], "discov": [457, 523], "preprint": [457, 514, 519, 522], "1809": 457, "04191": 457, "2018": 457, "encount": 458, "consum": 458, "previous": 458, "lack": [458, 467], "faster": [458, 460, 466, 515, 525, 528], "Of": 458, "evenli": 458, "divid": [458, 505, 522, 525], "discard": 458, "throw": 458, "awai": 458, "draw": [458, 521, 525], "subprocess": 458, "pin": [458, 488, 492], "reshuffl": 458, "manner": [458, 462, 477], "newdataload": 458, "customis": [458, 459, 474], "ensp": [459, 524], "imagerecord": [459, 464, 527], "image_nam": 459, "cocorecord": 459, "gt": [459, 522, 524], "int64": 459, "offer": 459, "style_transf": 459, "content": [459, 503, 504, 508, 509, 510], "tfrecorddataset": 459, "labelbal": 459, "300": [459, 514, 528], "16": [459, 508, 519, 528], "helloworld": [459, 476, 524], "aid": 460, "deploy": [460, 478, 495, 515, 519, 522], "infrastructur": 460, "gap": [461, 477], "diagnos": 461, "gui": [461, 471, 500, 514], "termin": [461, 488, 489, 492, 498], "repeat": [461, 525], "durat": [461, 504, 508, 509, 521], "cd": [461, 464, 472, 497, 499, 500, 502, 503, 508, 509, 510], "setup": [461, 468, 472, 490, 493, 497, 499, 500, 502, 503, 514], "ilsvr2012": 461, "caff": 461, "berkeleyvis": 461, "caffe_ilsvrc12": 461, "xvzf": 461, "image_recognit": [461, 500, 523], "resnet50_torchvis": 461, "ptq_static": [461, 499], "resnet50_v1": [461, 464, 475], "dataset_loc": [461, 500, 508, 523], "label_path": 461, "quantiti": 461, "vec": 461, "mu": 461, "frac": [461, 522], "sigma": 461, "var": 461, "happen": 461, "dispers": [461, 498], "rule": [461, 478, 514], "v0": [461, 500, 522, 523], "cg": [461, 500, 523], "conv0": [461, 500, 523], "expens": [462, 475, 525], "power": [462, 475, 489, 515], "mobil": [462, 475, 528], "produc": 462, "logit": 462, "softmax": 462, "kd": 462, "patient": 462, "compact": [462, 475, 481, 514], "agnost": 462, "resourc": [462, 502, 505, 525], "convolut": [462, 515], "ia": 462, "attach": [462, 475, 522], "shallow": 462, "deepest": 462, "deeper": 462, "paper": [462, 514, 519, 522], "10006": [462, 463], "student_output": [462, 463], "student_loss": [462, 463], "training_func_for_nc": [462, 463], "distil_loss_conf": 462, "accordingli": [462, 486, 522], "promis": [463, 475, 514], "huge": [463, 500, 514, 519], "heavi": 463, "light": 463, "booster": 463, "degrad": [463, 514, 525], "novel": [463, 478, 489, 495], "place": [463, 472, 508, 514, 523, 525], "comb": 463, "distillation_criterion": [463, 475, 513], "q_conf": 463, "horovod": 464, "instal": [464, 467, 469, 478, 480, 483, 486, 490, 493, 495, 496, 498, 499, 500, 529], "program": [464, 473, 478, 495], "enable_eager_execut": 464, "yaml_file_path": 464, "pre_process": 464, "simpli": [464, 477, 478, 480, 483, 495, 503], "evaluation_result": 464, "evaluation_time_cost": 464, "partit": [464, 514], "distributedsampl": 464, "train_sampl": 464, "train_dataset": [464, 517], "num_replica": 464, "rank": 464, "train_load": 464, "train_kwarg": 464, "adadelta": 464, "distributedoptim": 464, "named_paramet": 464, "broadcast_paramet": 464, "root_rank": 464, "broadcast_optimizer_st": 464, "set_epoch": 464, "batch_idx": 464, "zero_grad": [464, 475, 514], "nll_loss": 464, "log_interv": 464, "0f": 464, "tloss": 464, "6f": 464, "dry_run": 464, "test_func": 464, "host": [464, 503, 505, 508, 509, 510], "num_of_process": 464, "002": 464, "ssh": [464, 495], "prompt": 464, "readm": [464, 508], "exactli": [464, 479], "recognit": [464, 466, 514, 523], "resizecropimagenet": [464, 524], "realiz": [464, 512, 518, 521], "tow": 464, "node1": [464, 508, 509], "node2": [464, 508, 509], "TO": [464, 480, 500], "your_node1_nam": 464, "your_node2_nam": 464, "resnet50_fp32_pretrained_model": 464, "nc_resnet50_v1": 464, "resnet": [464, 528], "varieti": [465, 516, 525], "demonstr": [465, 478, 508, 509, 510, 523], "10k": [465, 469], "speedup": [465, 471, 517], "2x": [465, 471], "vnni": [465, 471, 516, 517], "exchang": 466, "hope": 466, "inc_model": [466, 477], "fp32_onnx_config": 466, "verifi": 466, "vgg16": [466, 528], "mobilenet": [466, 521, 528], "rcnn": 466, "torchscript": [466, 519, 522], "unsupport": [466, 475, 514], "add_relu": 466, "conv1d_relu": 466, "conv2d_relu": 466, "group_norm": 466, "hardswish": 466, "instance_norm": 466, "layer_norm": 466, "leaky_relu": 466, "sigmoid": 466, "toolchain": [467, 515], "bare": 467, "metal": 467, "sudo": [467, 481], "apt": [467, 472, 481, 489], "python3": 467, "dev": [467, 488, 492], "distutil": 467, "libgl1": 467, "mesa": 467, "glx": 467, "libglib2": 467, "ln": 467, "sf": 467, "usr": 467, "incompat": 467, "88": [467, 521, 528], "80": [467, 519, 523, 528], "pyobject": 467, "reinstal": 467, "libgl": 467, "yum": [467, 472], "opencv": [467, 472, 489], "conda": [467, 472, 481, 489, 508, 509, 510, 520], "13": [467, 472, 497, 520, 522], "pend": [467, 504], "sqlalchemi": 467, "27": [467, 528], "alemb": 467, "forg": [467, 472], "quick": [468, 476, 514, 526, 527], "friendli": [468, 475, 515, 522, 526, 527], "dive": [468, 526], "purpos": [468, 476, 495, 497, 516, 517], "syntax": 468, "go": [468, 490, 493, 501, 516, 519, 524], "up1": 468, "up2": 468, "valid_mixed_precis": 468, "addn": 468, "grappler_optim": 468, "constfold": 468, "arithmet": 468, "debug_stripp": 468, "major": [470, 500, 517, 522], "concept": [470, 521, 526], "rather": 470, "custom_metr": 470, "refin": [470, 514], "420": 471, "geomean": 471, "snippet": 471, "upload": [471, 490, 493], "click": [471, 478, 479, 486, 489, 495, 500, 515, 523], "qintegerop": [471, 517], "plan": 471, "oneapi": [472, 515, 526], "analyt": [472, 515, 526], "success": [472, 497, 520], "11": [472, 474, 476, 497, 522, 525, 528], "frequent": 472, "pypi": [472, 490, 493], "nightli": 472, "headless": [472, 489], "fastai": 472, "consolid": 472, "latest": [472, 515, 520], "eas": [472, 480, 515], "along": [472, 514, 519], "streamlin": [472, 502, 515], "scienc": 472, "websit": 472, "anaconda": [472, 502, 503], "suit": [472, 496, 523], "esri": 472, "formerli": 472, "skylak": 472, "cascad": 472, "lake": [472, 476, 515], "cooper": [472, 476, 515], "ic": [472, 515], "sapphir": 472, "rapid": 472, "hbm": 472, "arctic": 472, "sound": 472, "pont": 472, "vecchio": 472, "cento": [472, 528], "ubuntu": 472, "22": [472, 528], "04": [472, 528], "fortensorflow": 472, "forpytorch": 472, "12": [472, 497, 528], "tf_enable_onednn_opt": 472, "onednn": [472, 476, 517], "newer": 472, "subject": 473, "accompani": [473, 525], "wish": 473, "bibtex": 473, "author": 473, "feng": 473, "tian": 473, "hanwen": 473, "haihao": [473, 514], "shen": [473, 514], "suyu": 473, "chen": 473, "howpublish": 473, "year": 473, "logo": 473, "atom": 473, "phi": 473, "pentium": 473, "vtune": 473, "corpor": 473, "subsidiari": 473, "brand": 473, "claim": 473, "popularli": 474, "industri": [474, 515], "label_map": 474, "decis": 474, "ap": 474, "curv": 474, "turn": [474, 489], "target_boxes_num": 474, "str_label": 474, "int_label": 474, "inturn": 474, "cocomap": 474, "vocmap": 474, "categor": 474, "multiclass": 474, "multilabel": 474, "newmetr": 474, "reset": 474, "reflect": [474, 524], "new_metr": 474, "deliv": [475, 515, 520], "conveni": [475, 502], "upgrad": 475, "veri": [475, 496, 500, 517, 519, 525, 526], "comprehens": [475, 526], "kind": 475, "resort": 475, "automodelforsequenceclassif": 475, "autotoken": 475, "val_dataset": [475, 517], "val_dataload": [475, 517], "worker": [475, 505, 508, 509, 510, 517], "ping_memori": [475, 517], "formul": 475, "effort": 475, "written": 475, "onnxrt_integ": [475, 527], "onnxrt_qlinear": [475, 527], "image_tensor": [475, 527], "post_training_dynamic_qu": [475, 516, 525], "1000": [475, 504, 527], "2000": 475, "sampling_s": [475, 527], "model_wis": [475, 527], "op_dict": 475, "op_wis": [475, 523, 527], "sigopt_api_token": [475, 521, 525], "sigopt_project_id": [475, 521, 525], "sigopt_experiment_nam": [475, 521, 525], "demo": 475, "600": 475, "training_arg": 475, "emul": [475, 517], "trainer": [475, 486], "briefli": [475, 522], "maxim": [475, 514, 525], "pruning_func": 475, "train_dataload": [475, 514, 517], "n_gpu": 475, "gradient_accumulation_step": 475, "clip_grad_norm_": 475, "max_grad_norm": 475, "rate": [475, 514, 517], "start_epoch": [475, 516, 527], "end_epoch": [475, 516, 527], "97": [475, 528], "newli": [475, 514], "on_after_optimizer_step": [475, 514], "layer3": [475, 514], "lr_schedul": [475, 514], "0004": 475, "nesterov": [475, 527], "randomresizedcrop": [475, 524], "totensor": [475, 524], "485": 475, "456": [475, 528], "406": [475, 528], "nepoch": 475, "cnt": 475, "loss_sum": 475, "iter_bar": 475, "tqdm": 475, "desc": 475, "teacher_logit": 475, "train_fun": 475, "training_func": 475, "recent": [475, 476], "growth": [475, 476, 514], "complex": [475, 476, 514], "significantli": [475, 476, 498, 500, 514, 525], "bandwidth": [475, 476, 519], "exit_polici": [475, 527], "determinist": 475, "meaning": [475, 513], "reli": [475, 522], "prune_conf": 475, "quantization_aware_training_conf": 475, "aforement": 475, "inset": 475, "p_conf": [475, 513], "ssd_mobilenet_v1": 475, "benchmarkconf": 475, "half": [476, 486], "sixteen": 476, "launch": [476, 496, 501], "3rd": [476, 515, 517, 518], "gen": [476, 515, 517, 518], "codenam": 476, "boost": [476, 479, 495, 514, 515], "x86": 476, "avx512": [476, 517], "vcvtne2ps2bf16": 476, "vcvtneps2bf16": 476, "vdpbf16p": 476, "fbgemm": [476, 517], "tensorrtexecutionprovid": [476, 517], "cudaexecutionprovid": [476, 517], "dnnlexecutionprovid": [476, 517], "avx512_bf16": 476, "plu": 476, "resnet18": [476, 480, 528], "persist": 477, "brought": [477, 479, 486, 517], "tf2": 477, "h5": 477, "hybridblock": 477, "0000": 477, "saved_result": [477, 499, 519], "simplifi": [478, 489, 495, 514, 515], "acquir": 478, "analysi": [478, 495, 514, 521], "heurist": [478, 495], "great": 478, "facilit": 478, "autocast": 478, "my_model": 478, "no_grad": 478, "memory_format": 478, "112": 478, "rand": [478, 522], "plugin": [478, 496], "aw": [478, 486, 505, 515, 528], "sagemak": [478, 486], "inlin": [478, 483, 486], "neural_cod": [478, 480, 482, 483, 484, 486], "bench": 478, "superbench": 478, "enjoi": [479, 483, 486], "rebuild": [479, 488, 492], "reload": [479, 496, 498, 501], "modern": [480, 519], "democrat": [480, 515], "programm": [480, 486, 495], "nano_bf16_channels_last": 480, "nano_bf16_ipex_channels_last": 480, "nano_bf16_ipex": 480, "nano_bf16": 480, "nano_fp32_channels_last": 480, "nano_fp32_ipex_channels_last": 480, "nano_fp32_ipex": 480, "nano_gpu_to_cpu": 480, "nano_int8": 480, "nano_jit_bf16_channels_last": 480, "nano_jit_bf16_ipex_channels_last": 480, "nano_jit_bf16_ipex": 480, "nano_jit_bf16": 480, "nano_jit_fp32_channels_last": 480, "nano_jit_fp32_ipex_channels_last": 480, "nano_jit_fp32_ipex": 480, "nano_jit_fp32": 480, "nano_onnxruntime_fp32": 480, "nano_onnxruntime_int8_qlinear": 480, "openvino": 480, "nano_openvino_fp32": 480, "nano_openvino_int8": 480, "bc": [481, 489], "conda_prefix": 481, "echo": 481, "tradit": [481, 514], "libjemalloc": 481, "libiomp5": 481, "home": 481, "lib": 481, "ld_preload": 481, "malloc_conf": 481, "oversize_threshold": 481, "background_thread": 481, "metadata_thp": 481, "dirty_decay_m": 481, "9000000000": 481, "muzzy_decay_m": 481, "kmp_affin": 481, "kmp_blocktim": 481, "dnnl_primitive_cache_capac": 481, "governor": 481, "cpufreq": 481, "scaling_governor": 481, "powersav": 481, "tee": 481, "pytorch_jit_script": [482, 485], "pytorch_channels_last": [482, 485], "run_bench": 482, "patch": [482, 495], "patch_path": 482, "your_patch_path": 482, "sweep": 482, "sweep_object": 482, "bench_config": 482, "bench_featur": 482, "sai": 483, "run_glu": [483, 484, 506, 509, 510], "requisit": 483, "task_nam": [483, 484, 506, 509, 510], "do_ev": [483, 484, 499, 506, 509, 510], "remain": 483, "itself": [483, 514], "run_glue_optim": 483, "static_ipex": 483, "auto_qu": 484, "v4": [484, 506, 509, 510, 528], "albert": [484, 528], "sst2": 484, "alexnet": [484, 528], "pytorch_amp": 485, "optimize_for_infer": 485, "pytorch_jit_trac": 485, "pytorch_jit_script_ofi": 485, "pytorch_jit_trace_ofi": 485, "torchdynamo": 485, "pytorch_torchdynamo_jit_script": 485, "pytorch_torchdynamo_jit_trac": 485, "pytorch_torchdynamo_jit_script_ofi": 485, "pytorch_torchdynamo_jit_trace_ofi": 485, "pytorch_inc_bf16": 485, "pytorch_inc_static_quant_fx": 485, "pytorch_inc_static_quant_ipex": 485, "pytorch_inc_dynamic_qu": 485, "pytorch_ipex_fp32": 485, "pytorch_ipex_bf16": 485, "pytorch_ipex_int8_static_qu": 485, "pytorch_ipex_int8_dynamic_qu": 485, "blade": 485, "disc": 485, "pytorch_aliblad": 485, "pytorch_lightning_bf16_cpu": 485, "tensorflow_amp": 485, "keras_amp": 485, "tensorflow_inc": 485, "keras_inc": 485, "onnx_inc_static_quant_qlinear": 485, "onnx_inc_static_quant_qdq": 485, "onnx_inc_dynamic_qu": 485, "optimum": [485, 486, 498], "pytorch_inc_huggingface_optimum_stat": 485, "pytorch_inc_huggingface_optimum_dynam": 485, "intel_extension_for_transform": 485, "bigdl": [485, 486], "nano": [485, 486], "nano_": 485, "inc_auto": 485, "delight": 486, "announc": 486, "v": [486, 495, 514, 525, 527], "500": [486, 504, 528], "jupyt": [486, 488, 489, 492], "isa": 486, "adjust": [486, 517, 522], "xpu": 486, "delta": 486, "acc_delta": 486, "int8_acc": 486, "fp32_acc": 486, "ext": [488, 490, 492, 493, 494], "lab": [488, 489, 490, 492, 493], "nodej": [488, 492], "jlpm": [488, 492], "yarn": [488, 492], "npm": [488, 489, 492], "lieu": [488, 492], "labextens": [488, 489, 492], "typescript": [488, 492], "watch": [488, 492, 501], "immedi": [488, 492, 514], "refresh": [488, 492], "browser": [488, 492, 497, 501], "wait": [488, 492, 495, 505], "rebuilt": [488, 492], "easier": [488, 492, 495, 497, 515], "symlink": [488, 492], "down": 489, "finish": [489, 505], "enter": [489, 495, 503], "blank": 489, "cell": 489, "gain": [489, 513, 515], "mkl": 489, "jemalloc": 489, "pip3": 489, "pyproject": [490, 493], "toml": [490, 493], "twine": [490, 493], "whl": [490, 493], "dist": [490, 493], "sdist": [490, 493], "bdist_wheel": [490, 493], "deprec": [490, 493, 520, 524], "frontend": [490, 493, 503], "login": [490, 493, 521], "cut": [490, 493], "admin_github_token": [490, 493], "pypi_token": [490, 493], "npm_token": [490, 493], "secret": [490, 493], "panel": [490, 493, 495], "draft": [490, 493], "changelog": [490, 493, 494], "pkg": [490, 493], "bot": [490, 493], "pick": [490, 493, 496], "feedstock": [490, 493], "hatch": 493, "notabl": 494, "vscode": [494, 496], "daili": 495, "advantag": [495, 514, 516, 525], "remot": 495, "server": [495, 497, 500, 503, 508, 509, 510], "re": [495, 501, 519], "market": 495, "uninstal": 495, "fill": [495, 521, 524, 525], "upper": 495, "sidebar": 495, "hover": 495, "track": [495, 521], "argpars": 495, "pop": [495, 505], "diff": 495, "manifest": 496, "declar": 496, "palett": 496, "registercommand": 496, "amodio": 496, "tsl": 496, "matcher": 496, "dbaeumer": 496, "eslint": [496, 501], "press": 496, "f5": 496, "ctrl": 496, "hello": 496, "world": 496, "breakpoint": 496, "consol": [496, 501], "relaunch": 496, "toolbar": 496, "node_modul": 496, "viewlet": 496, "dropdown": 496, "runner": [496, 501], "startup": 496, "bundl": 496, "neural_insight": [497, 499, 500], "tl": 497, "ui": 497, "5000": 497, "338174d13706855fc6924cec7b3a8ae8": 497, "listen": 497, "firewal": 497, "8080": 497, "cert": 497, "path_to_cert": 497, "crt": 497, "path_to_private_kei": 497, "encrypt": 497, "expos": 497, "forfeit": 497, "client": [497, 503, 510], "extern": 497, "threat": 497, "diagnost": 497, "skill": 497, "feel": [497, 501], "layoutlmv3": [498, 528], "seqev": 498, "sentencepiec": 498, "timm": 498, "fvcore": 498, "pillow": 498, "einop": 498, "textdist": 498, "setuptool": 498, "cli": 498, "hypjudi": 498, "finetun": [498, 514, 519, 528], "funsd": [498, 528], "calib_dataset": 498, "incdataset": 498, "eval_dataset": 498, "poor": [498, 523], "9049": 498, "2989": 498, "66": [498, 528], "9631": 498, "glob": 498, "panda": 498, "pd": 498, "set_opt": 498, "max_row": 498, "max_column": 498, "getmtim": 498, "activations_t": 498, "weights_tabl": [498, 499], "read_csv": 498, "nweight": 498, "descend": 498, "sorted_data": 498, "sort_valu": 498, "ascend": 498, "evid": 498, "tip": 498, "8981": 498, "7502": 498, "6b": [499, 522, 528], "run_clm": 499, "eleutherai": [499, 522, 528], "dataset_nam": 499, "wikitext": [499, 528], "dataset_config_nam": 499, "do_train": 499, "inspect_sav": 499, "inspect_result": 499, "quan": 499, "model_summari": 499, "incept": [500, 528], "v3": [500, 528], "inception_v3": [500, 523], "inceptionv3_fp32_pretrained_model": [500, 523], "bash": [500, 523], "prepare_dataset": 500, "sh": [500, 523], "raw_dir": 500, "img_raw": 500, "delet": [500, 514], "run_tun": 500, "nc_inception_v3": 500, "highest": [500, 506, 525], "satisfactori": 500, "webpag": 500, "spike": 500, "bottom": 500, "chart": [500, 517, 521, 523], "concentr": 500, "toler": 500, "But": 500, "bigger": 500, "bootstrap": 501, "localhost": [501, 503, 508, 509], "3000": 501, "lint": 501, "interact": [501, 521], "correctli": 501, "hash": [501, 504], "readi": [501, 514], "aren": 501, "transit": 501, "webpack": 501, "babel": 501, "tweak": 501, "ever": 501, "curat": 501, "suitabl": 501, "middl": [501, 522], "shouldn": 501, "understand": [501, 517, 523, 526], "wouldn": 501, "couldn": 501, "facebook": [501, 522, 528], "troubleshoot": 501, "effortlessli": 502, "grpc": [502, 503, 507, 508, 509, 511], "queue": 502, "seamlessli": [502, 514, 525], "mpi": [502, 503, 525], "neural_solut": [502, 503, 508, 509, 510], "task_monitor_port": [503, 508, 509, 510], "22222": [503, 508, 509, 510], "result_monitor_port": [503, 508, 509, 510], "33333": [503, 508, 509, 510], "restful_api_port": [503, 508, 509, 510], "hostfil": [503, 505, 508, 509, 510], "grpc_api_port": [503, 508, 509, 510], "api_typ": [503, 508, 509, 510], "conda_env": [503, 508, 509, 510], "upload_path": [503, 508, 509, 510], "8000": [503, 508, 509, 510], "monitor": [503, 508, 509, 510], "3333": [503, 508, 509, 510], "2222": [503, 508, 509, 510], "ns_workspac": [503, 508, 509, 510], "hf_model": [503, 507, 509], "curl": [503, 504, 508, 509], "task_id": [503, 508, 509, 510], "usernam": 503, "db": [503, 505], "serve_log": [503, 508, 509, 510], "frontend_grpc": 503, "task_log": 503, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 503, "task_workspac": 503, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 503, "aliv": 503, "properli": 503, "commonli": [503, 514], "hostnam": 503, "breakdown": 503, "ip": 503, "hous": 503, "host1": [503, 508, 509], "host2": [503, 508, 509], "query_id": 503, "oaa": 504, "host_ip": 504, "task_request": [504, 508, 509, 510], "tuning_info": [504, 508], "optimization_result": [504, 508], "result_path": [504, 508, 509], "closur": 504, "404": [504, 514, 528], "health": 504, "healthi": 504, "quantized_model": [504, 508, 509], "400": [504, 528], "alloc": 505, "incom": 505, "taskmonitor": 505, "cluster": [505, 508, 509, 525], "tasklaunch": 505, "resultmonitor": 505, "receiv": [505, 521], "p1": 505, "notif": 505, "p2": 505, "p3": 505, "mpirun": [505, 525], "perf": 505, "p4": 505, "four": [505, 523, 528], "classdiagram": 505, "taskdb": 505, "get_statu": 505, "update_statu": 505, "task_collect": 505, "append_task": 505, "get_all_pending_task": 505, "update_task_statu": 505, "task_db": 505, "wait_new_task": 505, "schedule_task": 505, "dispatch_task": 505, "launch_task": 505, "query_task_statu": 505, "node_list": 505, "reserve_resourc": 505, "get_node_statu": 505, "gcp": [505, 515], "script_url": [506, 508, 509, 510], "archiv": 506, "prioriti": 506, "tf_example1": [507, 508, 509], "hf_models_grpc": [507, 510], "00173": 508, "01024": 508, "task_request_distribut": 508, "custom_models_optim": 508, "7602cd63d4c849e7a686a8165a77f69d": [508, 509], "151": [508, 528], "8617": 508, "17": [508, 528], "8213": [508, 528], "number_of_socket": [508, 509], "number_of_thread": [508, 509], "cdf419910f9b4d2a8320d0e420ac1d0a": 509, "optimized_result": 509, "58": [509, 528], "3162": 509, "6488": [509, 528], "test_task_request": 510, "06": [510, 527, 528], "34": [510, 528], "55": [510, 528], "d3e10a49326449fb9d0d62f2bfc1cb43": 510, "fastapi": 511, "multi_object": 512, "benefit": 513, "instanti": 513, "neuron": 514, "art": 514, "grown": 514, "unpreced": 514, "increasingli": 514, "crucial": 514, "stand": [514, 525], "shrink": 514, "contextu": 514, "scene": 514, "haven": 514, "color": [514, 519], "lowest": [514, 525], "formula": [514, 522], "emsp": 514, "downstream": 514, "prone": 514, "co": 514, "discourag": 514, "penal": 514, "parameter": 514, "lightweight": 514, "perceptron": 514, "mlp": 514, "valuabl": [514, 523], "basi": 514, "billion": 514, "dolli": [514, 522, 528], "lm": [514, 528], "lamini": [514, 522], "worth": 514, "mention": [514, 519], "tend": 514, "exemplifi": 514, "complement": 514, "fortieth": 514, "miss": [514, 517], "pruner2": 514, "few": [514, 515, 525], "lm_head": 514, "yourself": 514, "uncertain": 514, "auto_config": 514, "quit": 514, "straightforward": [514, 519, 522], "carri": 514, "pruning_pattern": 514, "pruning_start": 514, "pruning_end": 514, "sparse_gpt": 514, "embed_out": 514, "card": 514, "hesit": 514, "causal": 514, "clm": 514, "sst": [514, 528], "25": [514, 528], "63": [514, 528], "24": [514, 525, 528], "35": [514, 528], "flan": 514, "t5": [514, 528], "english": 514, "romanian": 514, "381": 514, "yolov5": 514, "75": [514, 528], "2x1": [514, 528], "801": 514, "7895": 514, "signific": [514, 515, 519, 522], "reduct": [514, 519, 527], "namhoon": 514, "lee": 514, "thalaiyasingam": 514, "ajanthan": 514, "philip": 514, "torr": 514, "2019": 514, "zafrir": 514, "ofir": 514, "ariel": 514, "larei": 514, "boudoukh": 514, "mosh": 514, "wasserblat": 514, "2111": 514, "05754": 514, "2021": 514, "kwon": 514, "kim": 514, "mahonei": 514, "hassoun": 514, "keutzer": 514, "gholami": 514, "pp": 514, "24101": 514, "24116": 514, "frantar": [514, 519], "alistarh": 514, "medium": 515, "aug": 515, "juli": 515, "onnxcommunitymeetup2023": 515, "chatbot": 515, "june": 515, "msft": 515, "netflix": 515, "apr": 515, "mlperf": [515, 528], "5x": 515, "heterogen": 515, "mar": 515, "jan": 515, "busi": 515, "amx": 515, "4th": [515, 517], "journei": 515, "dec": 515, "mleffici": 515, "deepen": 515, "foundat": 515, "intellig": 515, "vmware": 515, "applianc": 515, "bitnami": 515, "nov": 515, "sota": 515, "plug": 515, "twitter": 515, "linkedin": 515, "zone": 515, "land": 515, "pat": 515, "keynot": 515, "intelon": 515, "chines": 515, "purif": 515, "sacrif": 515, "jun": 515, "partner": 515, "feb": 515, "joint": 515, "bilibili": 515, "gestalt": 515, "ml": 515, "doubl": 515, "reconstruct": 515, "abound": 515, "lpot": [515, 520], "nextplatform": 515, "cern": 515, "gan": 515, "3dgan": 515, "iml": 515, "workshop": 515, "asplo": 515, "18": [515, 528], "highli": [515, 519], "intelcaff": 515, "aris": 516, "henc": 516, "onnxrt_qoper": 516, "quant_aware_train": 516, "weight_compress": [516, 527], "initial_spars": [516, 527], "prune_typ": [516, 527], "basic_magnitud": [516, 527], "update_frequ": 516, "prune_domain": 516, "tile_pattern_1x1": 516, "invent": 517, "cost": [517, 519], "On": [517, 528], "theoret": [517, 519], "zeropoint": 517, "255": [517, 522], "overflow": 517, "unseen": 517, "enough": 517, "peopl": 517, "mimic": 517, "fact": 517, "ultim": 517, "pain": 517, "lossi": 517, "philosophi": 517, "neither": 517, "nor": 517, "val_load": 517, "avg": 517, "themselv": 517, "dmlexecutionprovid": 517, "ON": 518, "forc": 518, "postposttrainingquantconfig": 518, "bf16wrapper": 518, "retrac": 518, "preval": 519, "grow": 519, "demand": 519, "w8a8": 519, "trade": 519, "bottleneck": 519, "roughli": 519, "speak": 519, "capac": [519, 521], "flop": 519, "famou": 519, "approx": 519, "bmm": 519, "100x": 519, "excel": 519, "stai": [519, 522], "quantif": [519, 522], "think": 519, "intuit": [519, 522], "uniformli": 519, "qlora": 519, "invers": 519, "restor": 519, "protect": 519, "greatli": 519, "inspir": 519, "normalfloat": 519, "e2m1": 519, "bnb": 519, "805": 519, "005": 519, "91": [519, 522, 528], "stabil": 519, "weightonlylinear": 519, "date": 519, "qweight": 519, "rtn_arg": 519, "gptq_arg": 519, "use_full_length": 519, "awq_arg": 519, "compressed_model": 519, "export_compressed_model": 519, "compression_dtyp": 519, "compression_dim": 519, "scale_dtyp": 519, "omit": 519, "rtn_g32asym": 519, "gptq_g32asym": 519, "gptq_g32asym_disable_last_matmul": 519, "gptq_g128asym": 519, "awq_g32asym": 519, "meanwhil": 519, "substanti": 519, "pose": 519, "challeng": 519, "lwq": 519, "even": [519, 522], "constrain": 519, "grei": 519, "blue": 519, "rectangl": 519, "10005": 519, "ouput_dir": 519, "xiao": [519, 522], "guangxuan": [519, 522], "2211": [519, 522], "10438": [519, 522], "wei": [519, 522], "xiui": [519, 522], "suppress": [519, 522], "2209": [519, 522], "13325": [519, 522], "lin": 519, "ji": 519, "2306": 519, "00978": 519, "elia": 519, "dettmer": 519, "tim": 519, "2305": 519, "14314": 519, "site": 520, "assist": 520, "experienc": 520, "18284": 520, "absenc": 520, "safe_mod": 520, "model_from_json": 520, "defici": 520, "hinder": 520, "sed": 520, "your_script": 520, "backbon": 521, "sigopt_experiment_id": 521, "nc": [521, 525], "suffici": 521, "ordinari": 521, "latenc": [521, 525], "8266": 521, "8372": 521, "2132": 521, "83": [521, 522, 528], "7495": 521, "8299": 521, "8294": 521, "85": [521, 522, 528], "0837": 521, "8291": 521, "4469": 521, "gigant": 522, "systemat": 522, "migrat": [522, 526], "difficulti": 522, "mathemat": 522, "allevi": 522, "coarsest": 522, "finer": [522, 525], "matric": 522, "similarli": 522, "finest": 522, "consumpt": 522, "why": [522, 523], "suppos": 522, "6839": 522, "4741": 522, "7451": 522, "9301": 522, "1742": 522, "6835": 522, "q_min": 522, "q_max": 522, "q_x": 522, "clamp_": 522, "round_": 522, "w_q": 522, "00296431384049356": 522, "59": [522, 528], "172": [522, 528], "192": 522, "w_dq": 522, "1220": 522, "0500": 522, "1430": 522, "2570": 522, "1890": 522, "mseloss": 522, "1983354538679123": 522, "6848": 522, "4743": 522, "7440": 522, "9308": 522, "1749": 522, "385297635664756e": 522, "07": [522, 527, 528], "affect": 522, "quantize_per_channel": 522, "x_tmp": 522, "detach": 522, "keepdim": 522, "dequantize_per_channel": 522, "0029": [522, 528], "0036": 522, "162": [522, 528], "48": [522, 528], "72": [522, 528], "93": [522, 528], "207": 522, "139": [522, 528], "6837": 522, "4734": 522, "1751": 522, "6821": 522, "637690492221736e": 522, "6376e": 522, "3852e": 522, "cdot": 522, "quantize_per_tensor_absmax": 522, "n_bit": 522, "div_": 522, "0806": 522, "7589": 522, "6038": 522, "3815": 522, "5040": 522, "7174": 522, "5444": 522, "5826": 522, "7772": 522, "5555": 522, "3740": 522, "3253": 522, "0698": 522, "1381": 522, "5972": [522, 528], "0086": 522, "0737": 522, "8298": 522, "6883": 522, "2991": 522, "1601": 522, "6506": 522, "8246": 522, "3924": 522, "3845": 522, "8768": 522, "w_scale": 522, "x_q": 522, "x_scale": 522, "84": [522, 528], "120": 522, "0059755356051027775": 522, "89": [522, 528], "119": 522, "57": [522, 528], "006533813662827015": 522, "y_q": 522, "17509": 522, "7608": 522, "4055": 522, "16599": 522, "21020": 522, "10016": 522, "9860": 522, "22444": 522, "y_dq": 522, "6836": 522, "2970": 522, "1583": 522, "6481": 522, "8207": 522, "3911": 522, "3850": 522, "8763": 522, "though": 522, "simplic": 522, "denot": 522, "fp1": 522, "fp2": 522, "subsect": [522, 527], "x1": [522, 525], "x2": [522, 525], "herebi": 522, "sq": 522, "overhead": 522, "hardtanh": 522, "t5norm": 522, "llamanorm": 522, "groupnorm": 522, "lambada": 522, "openai": [522, 528], "sweet": 522, "spot": 522, "region": 522, "bigscienc": [522, 528], "560m": 522, "354": 522, "3542": 522, "1b7": 522, "4634": 522, "4936": 522, "3b": 522, "518": 522, "5185": 522, "7b1": [522, 528], "5764": [522, 528], "5977": 522, "bloomz": [522, 528], "3947": 522, "3930": 522, "4828": 522, "4906": 522, "5018": 522, "4980": 522, "5593": [522, 528], "5552": 522, "125m": 522, "379": 522, "3757": 522, "350m": 522, "4516": 522, "4533": 522, "5789": 522, "5742": 522, "7b": [522, 528], "6365": 522, "6404": 522, "6769": [522, 528], "6804": [522, 528], "13b": [522, 528], "6872": 522, "6814": 522, "30b": [522, 528], "7149": 522, "7128": 522, "66b": 522, "7398": 522, "7326": 522, "7361": [522, 528], "7357": 522, "7627": [522, 528], "7590": 522, "7759": [522, 528], "7840": 522, "65b": 522, "7908": 522, "7957": 522, "7392": [522, 528], "7335": [522, 528], "chat": [522, 528], "7058": [522, 528], "6994": 522, "7677": [522, 528], "7615": [522, 528], "6831": [522, 528], "mbzuai": 522, "124m": 522, "3804": 522, "3887": 522, "774m": 522, "5048": 522, "5057": 522, "5b": 522, "5443": [522, 528], "5436": 522, "mosaicml": [522, 528], "655": [522, 528], "6499": 522, "stabilityai": 522, "stablelm": 522, "4172": 522, "4149": 522, "togethercomput": 522, "redpajama": 522, "incit": 522, "6542": 522, "6735": 522, "6718": 522, "6740": [522, 528], "6569": 522, "6621": 522, "7143": 522, "7221": 522, "6895": 522, "6953": [522, 528], "databrick": [522, 528], "6866": [522, 528], "6297": 522, "6247": 522, "tiiuae": [522, 528], "6437": [522, 528], "6392": 522, "asterisk": 522, "arang": 522, "tolist": 522, "jason": 522, "emerg": 522, "transact": 522, "yvinec": 522, "edouard": 522, "proceed": 522, "cvf": 522, "winter": 522, "instrument": 523, "writer": 523, "_pre_eval_hook": 523, "_post_eval_hook": 523, "submodul": 523, "whitelist": 523, "_recordingobserv": 523, "output_tensors_dict": 523, "current_it": 523, "get_tensor_valu": 523, "_observer_forward_hook": 523, "activation_post_process": 523, "_add_observer_": 523, "named_children": 523, "leaf": 523, "add_modul": 523, "register_forward_hook": 523, "dump_tim": 523, "summarywrit": 523, "_acc": 523, "tune_": 523, "add_graph": 523, "get_observer_dict": 523, "observer_dict": 523, "is_quant": 523, "add_histogram": 523, "shell": 523, "bind_al": 523, "logdir_spec": 523, "tune_0_acc0": 523, "tune_1": 523, "tune_1_acc0": 523, "79": [523, 528], "baseline_acc_0": 523, "776": 523, "tune_1_acc_0": 523, "095": 523, "runs_v3": 523, "run_tuning_dump_tensor": 523, "inceptionv3": 523, "run_quant": 523, "topologi": 523, "nc_inceptionv3": 523, "inceptionv3_dump_tensor": 523, "eightbit": 523, "disappear": 523, "centercrop": 524, "randomcrop": 524, "cropres": 524, "decodeimag": 524, "jpeg": 524, "encodejp": 524, "alignimagechannel": 524, "68": [524, 528], "116": 524, "78": [524, 528], "103": 524, "94": [524, 528], "017": 524, "bilinearimagenet": [524, 527], "topilimag": 524, "padding_mod": 524, "border": 524, "pixel": 524, "edg": 524, "colorjitt": 524, "bright": 524, "satur": 524, "hue": 524, "jitter": 524, "tondarrai": 524, "quickli": [525, 526], "o1": 525, "human": 525, "concret": 525, "aggress": 525, "classic": 525, "flowchart": 525, "htmllabel": 525, "td": 525, "classdef": 525, "itemstyl": 525, "cce5ff": 525, "stroke": 525, "99ccff": 525, "s1": 525, "s2": 525, "s3": 525, "s4": 525, "s5": 525, "s6": 525, "s7": 525, "nbsp": 525, "subgraphstyl": 525, "ffffff": 525, "attempt": 525, "post_training_auto_qu": 525, "trial": 525, "increment": 525, "ii": 525, "spent": 525, "hawq_v2_loss": 525, "model_loss": 525, "black": 525, "compli": 525, "posterior": 525, "short": 525, "loglevel": 525, "endlessli": 525, "perspect": 525, "smbo": 525, "appl": 525, "surrog": 525, "densiti": 525, "parzen": 525, "greatest": 525, "hour": 525, "dai": 525, "next_tune_cfg": 525, "overridden": 525, "replic": 525, "replica": 525, "fed": 525, "synchron": 525, "number_of_process": 525, "run_cmd": 525, "abctunestrategi": 525, "familiar": 526, "notebook": 526, "introduct": 526, "organ": 527, "logic": 527, "mobilenet_v1": 527, "40": [527, 528], "beta_1": 527, "beta_2": 527, "epsilon": 527, "sparsecategoricalcrossentropi": 527, "sum_over_batch_s": 527, "from_logit": 527, "54": [527, 528], "19": [527, 528], "09": 528, "1x": 528, "platinum": 528, "8480": 528, "8ghz": 528, "56": 528, "ht": 528, "turbo": 528, "256gb": 528, "16x16gb": 528, "ddr5": 528, "4800": 528, "mt": 528, "bio": 528, "3a14": 528, "tel2p1": 528, "microcod": 528, "0x2b0001b0": 528, "gcc": 528, "20210514": 528, "red": 528, "hat": 528, "visit": 528, "1s4c14ins1bsthroughput": 528, "sec": 528, "74": 528, "2914": 528, "621": 528, "69x": 528, "76": 528, "23": 528, "46": 528, "31": 528, "2160": 528, "545": 528, "47": 528, "96x": 528, "resnet101": 528, "77": 528, "37": 528, "1508": 528, "428": 528, "53x": 528, "70": 528, "44": 528, "69": 528, "3290": 528, "1229": 528, "68x": 528, "38": 528, "73": 528, "2404": 528, "1048": 528, "49": 528, "29x": 528, "71": 528, "1669": 528, "33x": 528, "1073": 528, "245": 528, "38x": 528, "374": 528, "52": 528, "18x": 528, "96": 528, "5478": 528, "1756": 528, "12x": 528, "4133": 528, "1748": 528, "36x": 528, "1534": 528, "236": 528, "62": 528, "49x": 528, "vgg19": 528, "1377": 528, "197": 528, "resnetv2": 528, "39": 528, "1125": 528, "656": 528, "71x": 528, "709": 528, "367": 528, "00": 528, "93x": 528, "152": 528, "03": 528, "497": 528, "265": 528, "87x": 528, "densenet": 528, "121": 528, "557": 528, "67": 528, "61": 528, "22x": 528, "161": 528, "29": 528, "353": 528, "235": 528, "50x": 528, "169": 528, "65": 528, "41": 528, "435": 528, "385": 528, "13x": 528, "efficientnet": 528, "b0": 528, "786": 528, "723": 528, "09x": 528, "130": 528, "23x": 528, "1291": 528, "683": 528, "89x": 528, "61x": 528, "1295": 528, "453": 528, "85x": 528, "242": 528, "31x": 528, "cnn": 528, "80x": 528, "43": 528, "81x": 528, "166": 528, "07x": 528, "16x": 528, "26": 528, "173": 528, "yolov3": 528, "82": 528, "230": 528, "92": 528, "36": 528, "37x": 528, "58x": 528, "86": 528, "416": 528, "35x": 528, "88x": 528, "51": 528, "17x": 528, "75552": 528, "50803": 528, "1s56c1ins1bsthroughput": 528, "60": 528, "64x": 528, "1673": 528, "653": 528, "56x": 528, "1170": 528, "329": 528, "55x": 528, "977": 528, "335": 528, "91x": 528, "resnest50": 528, "81": 528, "10x": 528, "resnext101_32x8d": 528, "562": 528, "109": 528, "efficientnet_b0": 528, "696": 528, "667": 528, "04x": 528, "efficientnet_b3": 528, "508": 528, "397": 528, "28x": 528, "efficientnet_b7": 528, "234": 528, "149": 528, "57x": 528, "peleenet": 528, "858": 528, "588": 528, "46x": 528, "se_resnext50_32x4d": 528, "739": 528, "283": 528, "yolo": 528, "141": 528, "99x": 528, "174": 528, "camembert": 528, "395": 528, "171": 528, "30x": 528, "53": 528, "795": 528, "341": 528, "744": 528, "343": 528, "163": 528, "funnel": 528, "182": 528, "65x": 528, "399": 528, "21x": 528, "407": 528, "412": 528, "stsb": 528, "413": 528, "39x": 528, "409": 528, "75x": 528, "401": 528, "70x": 528, "76x": 528, "reform": 528, "crime": 528, "punish": 528, "446": 528, "398": 528, "lvwerra": 528, "pegasu": 528, "samsum": 528, "102": 528, "770": 528, "450": 528, "14x": 528, "whisper": 528, "25x": 528, "abeja": 528, "neox": 528, "japanes": 528, "90x": 528, "1646": 528, "657": 528, "1098": 528, "322": 528, "41x": 528, "568": 528, "19x": 528, "1383": 528, "761": 528, "82x": 528, "32x": 528, "5701": 528, "1593": 528, "2090": 528, "685": 528, "05x": 528, "resnext101_32x16d_wsl": 528, "556": 528, "01x": 528, "86x": 528, "558": 528, "11x": 528, "lambada_openai": 528, "hellaswag": 528, "winogrand": 528, "piqa": 528, "word_perplex": 528, "4954": 528, "6409": 528, "7541": 528, "6434": 528, "8816": 528, "gptqw4g128asym": 528, "679": 528, "4895": 528, "6433": 528, "7476": 528, "6399": 528, "9945": 528, "0999": 528, "gptqw4g32asym": 528, "6829": 528, "4923": 528, "6401": 528, "7486": 528, "6410": 528, "9963": 528, "0141": 528, "gptqw4g128sym": 528, "4907": 528, "6361": 528, "7443": 528, "6390": 528, "9932": 528, "1498": 528, "gptqw4g32sym": 528, "6911": 528, "4899": 528, "6448": 528, "7497": 528, "6439": 528, "0008": 528, "0927": 528, "5049": 528, "6543": 528, "7628": 528, "6497": 528, "2862": 528, "4984": 528, "6535": 528, "7568": 528, "6473": 528, "9962": 528, "4193": 528, "6885": 528, "4973": 528, "753": 528, "6455": 528, "9935": 528, "4607": 528, "decapoda": 528, "5642": 528, "6709": 528, "7835": 528, "6887": 528, "4202": 528, "7244": 528, "5603": 528, "6614": 528, "6824": 528, "9909": 528, "5881": 528, "5911": 528, "7009": 528, "7878": 528, "7106": 528, "212": 528, "7518": 528, "5843": 528, "6961": 528, "7911": 528, "4319": 528, "7572": 528, "5898": 528, "7056": 528, "7894": 528, "7105": 528, "9998": 528, "3429": 528, "7596": 528, "5841": 528, "6977": 528, "7905": 528, "7080": 528, "4916": 528, "6266": 528, "7277": 528, "8096": 528, "7350": 528, "2384": 528, "778": 528, "624": 528, "7269": 528, "8047": 528, "7334": 528, "9979": 528, "4237": 528, "7706": 528, "6239": 528, "7285": 528, "8058": 528, "7322": 528, "4697": 528, "7836": 528, "6195": 528, "7337": 528, "9983": 528, "5604": 528, "5732": 528, "648": 528, "7715": 528, "6746": 528, "7107": 528, "6982": 528, "5637": 528, "6527": 528, "7704": 528, "6713": 528, "9950": 528, "9702": 528, "5682": 528, "6575": 528, "7758": 528, "6742": 528, "9994": 528, "9317": 528, "567": 528, "6902": 528, "7353": 528, "6622": 528, "7829": 528, "6862": 528, "9942": 528, "9635": 528, "7246": 528, "5617": 528, "6756": 528, "7797": 528, "6854": 528, "9931": 528, "2799": 528, "7312": 528, "6059": 528, "7103": 528, "7077": 528, "2213": 528, "7273": 528, "6018": 528, "7088": 528, "7742": 528, "7030": 528, "9934": 528, "2538": 528, "083": 528, "7283": 528, "6053": 528, "7024": 528, "7764": 528, "7031": 528, "1889": 528, "727": 528, "5997": 528, "7018": 528, "9916": 528, "2504": 528, "7122": 528, "8984": 528, "5933": 528, "689": 528, "7851": 528, "7075": 528, "1556": 528, "448": 528, "7675": 528, "5934": 528, "7856": 528, "7111": 528, "9984": 528, "1514": 528, "927": 528, "7566": 528, "5899": 528, "7032": 528, "9953": 528, "1374": 528, "728": 528, "4628": 528, "6456": 528, "6029": 528, "6438": 528, "5799": 528, "4542": 528, "6004": 528, "9957": 528, "0626": 528, "4789": 528, "6134": 528, "7432": 528, "5525": 528, "4731": 528, "6504": 528, "7617": 528, "6094": 528, "7828": 528, "5098": 528, "7622": 528, "6505": 528, "3242": 528, "6878": 528, "5058": 528, "6393": 528, "7633": 528, "6491": 528, "9978": 528, "5514": 528, "6864": 528, "5084": 528, "6519": 528, "6509": 528, "0006": 528, "4728": 528, "6876": 528, "5045": 528, "6474": 528, "9952": 528, "6379": 528, "5282": 528, "614": 528, "7448": 528, "6312": 528, "6377": 528, "5228": 528, "5991": 528, "6261": 528, "9919": 528, "4096": 528, "neo": 528, "6224": 528, "4271": 528, "577": 528, "722": 528, "5871": 528, "9359": 528, "6123": 528, "4227": 528, "5738": 528, "7203": 528, "5823": 528, "9917": 528, "3377": 528, "615": 528, "4259": 528, "5714": 528, "7247": 528, "9951": 528, "2083": 528, "6154": 528, "4208": 528, "5777": 528, "7198": 528, "5834": 528, "9937": 528, "3121": 528, "20b": 528, "7233": 528, "5359": 528, "7753": 528, "195": 528, "7186": 528, "5328": 528, "7699": 528, "6687": 528, "9922": 528, "3463": 528, "7268": 528, "533": 528, "659": 528, "6726": 528, "2897": 528, "5718": 528, "6859": 528, "7927": 528, "6890": 528, "9324": 528, "7006": 528, "5655": 528, "6803": 528, "7965": 528, "6857": 528, "1515": 528, "5752": 528, "6748": 528, "7845": 528, "6724": 528, "5951": 528, "6472": 528, "5716": 528, "6685": 528, "784": 528, "6678": 528, "8539": 528, "6918": 528, "5819": 528, "678": 528, "6861": 528, "8863": 528, "5765": 528, "6827": 528, "7873": 528, "6832": 528, "9958": 528, "1451": 528, "storywrit": 528, "693": 528, "5477": 528, "663": 528, "6719": 528, "9125": 528, "6661": 528, "7813": 528, "6693": 528, "9961": 528, "1137": 528, "rw": 528, "6604": 528, "5419": 528, "6598": 528, "6594": 528, "7616": 528, "6484": 528, "5369": 528, "7807": 528, "6559": 528, "9947": 528, "9411": 528, "6571": 528, "5398": 528, "6582": 528, "6579": 528, "8809": 528, "652": 528, "535": 528, "7682": 528, "6532": 528, "9906": 528, "0048": 528, "5177": 528, "6669": 528, "7824": 528, "5053": 528, "6301": 528, "5142": 528, "6654": 528, "6483": 528, "9933": 528, "8146": 528, "517": 528, "9941": 528, "1566": 528, "724": 528, "1567": 528, "716": 528, "1414": 528, "718": 528, "97x": 528, "1459": 528, "721": 528, "02x": 528, "1582": 528, "752": 528, "7139": 528, "4289": 528, "66x": 528, "4080": 528, "7236": 528, "4299": 528, "6842": 528, "4496": 528, "52x": 528, "591": 528, "178": 528, "183": 528, "590": 528, "179": 528, "42x": 528, "5703": 528, "2578": 528, "5610": 528, "2603": 528, "shufflenet": 528, "6689": 528, "3690": 528, "5692": 528, "3758": 528, "51x": 528, "googlenet": 528, "1792": 528, "1111": 528, "1821": 528, "1104": 528, "squeezenet": 528, "9472": 528, "5582": 528, "9861": 528, "5566": 528, "77x": 528, "caffenet": 528, "3348": 528, "1141": 528, "3509": 528, "1142": 528, "2426": 528, "987": 528, "2208": 528, "1016": 528, "zfnet": 528, "930": 528, "532": 528, "919": 528, "417": 528, "1880": 528, "1159": 528, "62x": 528, "1798": 528, "1151": 528, "2890": 528, "1380": 528, "2548": 528, "1362": 528, "507": 528, "94x": 528, "1286": 528, "904": 528, "1121": 528, "856": 528, "829": 528, "1044": 528, "790": 528, "849": 528, "627": 528, "79x": 528, "yolov4": 528, "duc": 528, "tini": 528, "1119": 528, "ultra": 528, "8537": 528, "1934": 528, "emot": 528, "ferplu": 528, "3568": 528, "arcfac": 528, "494": 528, "244": 528, "226": 528, "392": 528, "223": 528, "integerop": 528, "473": 528, "548": 528, "964": 528, "540": 528, "394": 528, "602": 528, "487": 528, "222": 528, "20x": 528, "189": 528, "146": 528, "125": 528, "bidaf": 528, "2757": 528, "2277": 528, "gpt2": 528, "360": 528, "213": 528, "490": 528, "304": 528, "214": 528, "347": 528, "272": 528, "216": 528, "26x": 528, "489": 528, "27x": 528, "l12": 528, "h384": 528, "1054": 528, "585": 528, "1072": 528, "890": 528, "746": 528, "268": 528, "211": 528, "l6": 528, "1958": 528, "1130": 528, "73x": 528, "electra": 528, "discrimin": 528, "1797": 528, "1077": 528, "67x": 528, "1930": 528, "1139": 528, "mini": 528, "5510": 528, "3334": 528, "5627": 528, "3365": 528, "108": 528, "110": 528, "bart": 528, "15x": 528, "deberta": 528, "168": 528, "145": 528, "spanbert": 528, "63x": 528, "multilingu": 528, "113": 528, "159": 528, "40x": 528, "distilgpt2": 528, "layoutlm": 528, "layoutlmv2": 528, "codebert": 528, "47x": 528, "fcn": 528, "perplex": 528, "2788": 528, "7002": 528, "4124": 528, "9921": 528, "3950": 528, "5711": 528, "9892": 528, "9163": 528, "7240": 528, "9902": 528, "0438": 528, "7634": 528, "1186": 528, "9944": 528, "1276": 528, "70b": 528, "7543": 528, "6181": 528, "rtnw4g32asym": 528, "6496": 528, "9967": 528, "7964": 528, "6612": 528, "rtnw4g32sym": 528, "7941": 528, "7243": 528, "9971": 528, "taskdataset": 528, "accuracyspars": 528, "ratiospars": 528, "commentsbalancedor": 528, "unbalanc": 528, "answeringsquad": 528, "87f1": 528, "momentumunbalanc": 528, "momentumbalanc": 528, "90f1": 528, "59f1": 528, "23f1": 528, "classificationmrpc": 528, "52f1": 528, "26f1": 528, "classificationsst": 528, "61accuraci": 528, "recognitionimagenet": 528, "95top1": 528, "v5s6": 528, "detectioncoco": 528, "ap0": 528, "6ap0": 528, "393": 528, "584": 528, "34f1": 528, "lassounbalanc": 528, "classificationmnli": 528, "mm": 528, "allbalanc": 528, "32accuraci": 528, "sensitivitybalanc": 528, "classificationqqp": 528, "classificationqnli": 528, "54accuraci": 528, "em": 528, "mobilenetv2": 528, "wideresnet40": 528, "9522": 528, "8178": 528, "0213": 528, "8235": 528, "027": 528, "5494": 528, "7153": 528, "5540": 528, "0046": 528, "5523": 528, "vgg": 528, "bn": 528, "7022": 528, "7415": 528, "7025": 528, "0003": 528, "6739": 528, "7399": 528, "6845": 528, "0106": 528, "blendcnn": 528, "7034": 528, "8382": 528, "bilstm": 528, "8314": 528, "9403": 528, "9048": 528, "0734": 528, "7323": 528, "8256": 528, "8084": 528, "8814": 528, "7442": 528, "8371": 528, "0119": 528, "0115": 528, "tinybert": 528, "8018": 528, "8044": 528, "8363": 528, "8411": 528, "8025": 528, "8074": 528, "0007": 528, "0030": 528, "8626": 528, "9091": 528, "8782": 528, "8684": 528, "8259": 528, "0058": 528, "distilroberta": 528, "6057": 528, "6187": 528, "0130": 528, "c6i": 528, "2xlarg": 528, "c6a": 528, "c6g": 528, "a100cuda": 528, "executionprovid": 528}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [348, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [169, 0, 0, "-", "algorithm"], [172, 0, 0, "-", "benchmark"], [174, 0, 0, "-", "common"], [185, 0, 0, "-", "compression"], [213, 0, 0, "-", "conf"], [215, 0, 0, "-", "config"], [216, 0, 0, "-", "contrib"], [241, 0, 0, "-", "data"], [295, 0, 0, "-", "experimental"], [355, 0, 0, "-", "metric"], [357, 0, 0, "-", "mix_precision"], [359, 0, 0, "-", "model"], [367, 0, 0, "-", "objective"], [368, 0, 0, "-", "profiling"], [390, 0, 0, "-", "quantization"], [398, 0, 0, "-", "strategy"], [410, 0, 0, "-", "template"], [413, 0, 0, "-", "torch"], [418, 0, 0, "-", "training"], [422, 0, 0, "-", "utils"], [431, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [153, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "awq"], [150, 0, 0, "-", "bf16_convert"], [151, 0, 0, "-", "gptq"], [152, 0, 0, "-", "hawq_metric"], [154, 0, 0, "-", "layer_wise_quant"], [159, 0, 0, "-", "mixed_precision"], [160, 0, 0, "-", "model_wrapper"], [161, 0, 0, "-", "pattern_detector"], [162, 0, 0, "-", "smooth_quant"], [163, 0, 0, "-", "symbolic_trace"], [164, 0, 0, "-", "teq"], [165, 0, 0, "-", "util"], [166, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.awq": [[149, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, 1, 1, "", "BF16ModuleWrapper"], [150, 2, 1, "", "Convert"], [150, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, 1, 1, "", "GPTQ"], [151, 1, 1, "", "GPTQuantizer"], [151, 2, 1, "", "find_layers"], [151, 2, 1, "", "find_layers_name"], [151, 2, 1, "", "is_leaf"], [151, 2, 1, "", "log_quantizable_layers_per_transformer"], [151, 2, 1, "", "quantize"], [151, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, 1, 1, "", "HessianTrace"], [152, 1, 1, "", "Node_collector"], [152, 2, 1, "", "compare_weights"], [152, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[155, 0, 0, "-", "modified_pickle"], [156, 0, 0, "-", "quantize"], [157, 0, 0, "-", "torch_load"], [158, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, 3, 1, "", "PickleError"], [155, 3, 1, "", "PicklingError"], [155, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, 2, 1, "", "dowload_hf_model"], [158, 2, 1, "", "get_children"], [158, 2, 1, "", "get_module"], [158, 2, 1, "", "get_named_children"], [158, 2, 1, "", "get_super_module_by_name"], [158, 2, 1, "", "load_empty_model"], [158, 2, 1, "", "load_layer_wise_quantized_model"], [158, 2, 1, "", "load_tensor"], [158, 2, 1, "", "load_tensor_from_shard"], [158, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, 1, 1, "", "FakeAffineTensorQuantFunction"], [160, 1, 1, "", "MulLinear"], [160, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, 1, 1, "", "TorchSmoothQuant"], [162, 2, 1, "", "get_module"], [162, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, 2, 1, "", "symbolic_trace"], [163, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[164, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[165, 2, 1, "", "append_attr"], [165, 2, 1, "", "auto_copy"], [165, 2, 1, "", "calculate_quant_min_max"], [165, 2, 1, "", "calibration"], [165, 2, 1, "", "check_cfg_and_qconfig"], [165, 2, 1, "", "collate_torch_preds"], [165, 2, 1, "", "collect_weight_info"], [165, 2, 1, "", "fetch_module"], [165, 2, 1, "", "generate_activation_observer"], [165, 2, 1, "", "get_absorb_layers"], [165, 2, 1, "", "get_block_prefix"], [165, 2, 1, "", "get_depth"], [165, 2, 1, "", "get_dict_at_depth"], [165, 2, 1, "", "get_element_under_depth"], [165, 2, 1, "", "get_embedding_contiguous"], [165, 2, 1, "", "get_example_input"], [165, 2, 1, "", "get_fallback_order"], [165, 2, 1, "", "get_hidden_states"], [165, 2, 1, "", "get_module_input_output"], [165, 2, 1, "", "get_mse_order_per_fp32"], [165, 2, 1, "", "get_mse_order_per_int8"], [165, 2, 1, "", "get_op_type_by_name"], [165, 2, 1, "", "get_quantizable_ops_from_cfgs"], [165, 2, 1, "", "get_torch_version"], [165, 2, 1, "", "input2tuple"], [165, 2, 1, "", "is_fused_module"], [165, 2, 1, "", "match_datatype_pattern"], [165, 2, 1, "", "paser_cfgs"], [165, 2, 1, "", "set_module"], [165, 2, 1, "", "simple_inference"], [165, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, 2, 1, "", "awq_quantize"], [166, 2, 1, "", "gptq_quantize"], [166, 2, 1, "", "qdq_weight_actor"], [166, 2, 1, "", "qdq_weight_asym"], [166, 2, 1, "", "qdq_weight_sym"], [166, 2, 1, "", "quant_weight"], [166, 2, 1, "", "quant_weight_w_scale"], [166, 2, 1, "", "quantize_4bit"], [166, 2, 1, "", "rtn_quantize"], [166, 2, 1, "", "search_clip"], [166, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[167, 0, 0, "-", "algorithm"], [168, 0, 0, "-", "fast_bias_correction"], [170, 0, 0, "-", "smooth_quant"], [171, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[167, 1, 1, "", "ALGORITHMS"], [167, 1, 1, "", "Algorithm"], [167, 1, 1, "", "AlgorithmScheduler"], [167, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[168, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[170, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[171, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[172, 2, 1, "", "benchmark_with_raw_cmd"], [172, 2, 1, "", "call_one"], [172, 2, 1, "", "config_instance"], [172, 2, 1, "", "fit"], [172, 2, 1, "", "generate_prefix"], [172, 2, 1, "", "get_architecture"], [172, 2, 1, "", "get_bounded_threads"], [172, 2, 1, "", "get_core_ids"], [172, 2, 1, "", "get_physical_ids"], [172, 2, 1, "", "get_threads"], [172, 2, 1, "", "get_threads_per_core"], [172, 2, 1, "", "profile"], [172, 2, 1, "", "run_instance"], [172, 2, 1, "", "set_all_env_var"], [172, 2, 1, "", "set_env_var"], [172, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[173, 0, 0, "-", "base_config"], [175, 0, 0, "-", "utility"]], "neural_compressor.common.base_config": [[173, 1, 1, "", "BaseConfig"], [173, 2, 1, "", "register_config"]], "neural_compressor.compression": [[176, 0, 0, "-", "callbacks"], [178, 0, 0, "-", "distillation"], [181, 0, 0, "-", "hpo"], [187, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[176, 1, 1, "", "BaseCallbacks"], [176, 1, 1, "", "DistillationCallbacks"], [176, 1, 1, "", "PruningCallbacks"], [176, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[176, 4, 1, "", "_epoch_ran"], [176, 4, 1, "", "best_model"], [176, 4, 1, "", "best_score"], [176, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[177, 0, 0, "-", "criterions"], [179, 0, 0, "-", "optimizers"], [180, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[177, 1, 1, "", "Criterions"], [177, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [177, 1, 1, "", "KnowledgeDistillationFramework"], [177, 1, 1, "", "KnowledgeDistillationLoss"], [177, 1, 1, "", "PyTorchCriterions"], [177, 1, 1, "", "PyTorchCrossEntropyLoss"], [177, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [177, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [177, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [177, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [177, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [177, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [177, 1, 1, "", "SelfKnowledgeDistillationLoss"], [177, 1, 1, "", "TensorFlowCrossEntropyLoss"], [177, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [177, 1, 1, "", "TensorflowCriterions"], [177, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [177, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [177, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [177, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[179, 1, 1, "", "Optimizers"], [179, 1, 1, "", "PyTorchOptimizers"], [179, 1, 1, "", "PyTorchSGD"], [179, 1, 1, "", "TensorFlowAdam"], [179, 1, 1, "", "TensorFlowAdamW"], [179, 1, 1, "", "TensorFlowSGD"], [179, 1, 1, "", "TensorflowOptimizers"], [179, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[180, 2, 1, "", "get_activation"], [180, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[182, 0, 0, "-", "sa_optimizer"], [183, 0, 0, "-", "search_algorithms"], [184, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[183, 1, 1, "", "BayesianOptimizationSearcher"], [183, 1, 1, "", "GridSearcher"], [183, 1, 1, "", "RandomSearcher"], [183, 1, 1, "", "Searcher"], [183, 1, 1, "", "XgbSearcher"], [183, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[184, 1, 1, "", "BaseSearchSpace"], [184, 1, 1, "", "ContinuousSearchSpace"], [184, 1, 1, "", "DiscreteSearchSpace"], [184, 1, 1, "", "SearchSpace"], [184, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[186, 0, 0, "-", "criteria"], [189, 0, 0, "-", "model_slim"], [193, 0, 0, "-", "patterns"], [187, 2, 1, "", "prepare_pruning"], [200, 0, 0, "-", "pruners"], [206, 0, 0, "-", "pruning"], [207, 0, 0, "-", "regs"], [187, 2, 1, "", "save"], [208, 0, 0, "-", "schedulers"], [209, 0, 0, "-", "tf_criteria"], [210, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[186, 1, 1, "", "BlockMaskCriterion"], [186, 1, 1, "", "GradientCriterion"], [186, 1, 1, "", "MagnitudeCriterion"], [186, 1, 1, "", "PruningCriterion"], [186, 1, 1, "", "RetrainFreeCriterion"], [186, 1, 1, "", "SnipCriterion"], [186, 1, 1, "", "SnipMomentumCriterion"], [186, 2, 1, "", "get_criterion"], [186, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[186, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[188, 0, 0, "-", "auto_slim"], [190, 0, 0, "-", "pattern_analyzer"], [191, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[188, 2, 1, "", "generate_ffn2_pruning_config"], [188, 2, 1, "", "generate_mha_pruning_config"], [188, 2, 1, "", "model_slim"], [188, 2, 1, "", "model_slim_ffn2"], [188, 2, 1, "", "model_slim_mha"], [188, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[190, 1, 1, "", "ClassifierHeadSearcher"], [190, 1, 1, "", "ClassifierHeadSearcherTF"], [190, 1, 1, "", "JitBasicSearcher"], [190, 1, 1, "", "Linear2LinearSearcher"], [190, 1, 1, "", "RecipeSearcher"], [190, 1, 1, "", "SelfMHASearcher"], [190, 2, 1, "", "get_attributes"], [190, 2, 1, "", "get_common_module"], [190, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[190, 4, 1, "", "device"], [190, 4, 1, "", "flatten_static_graph"], [190, 4, 1, "", "model"], [190, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[190, 4, 1, "", "device"], [190, 4, 1, "", "flatten_static_graph"], [190, 4, 1, "", "model"], [190, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[190, 4, 1, "", "device"], [190, 4, 1, "", "flatten_static_graph"], [190, 4, 1, "", "model"], [190, 4, 1, "", "searching_results"], [190, 4, 1, "", "static_graph"], [190, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[190, 4, 1, "", "current_pattern"], [190, 4, 1, "", "device"], [190, 4, 1, "", "flatten_static_graph"], [190, 4, 1, "", "model"], [190, 4, 1, "", "searching_results"], [190, 4, 1, "", "static_graph"], [190, 4, 1, "", "target_layers"], [190, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[190, 4, 1, "", "model"], [190, 4, 1, "", "recipe"], [190, 4, 1, "", "searching_results"], [190, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[190, 4, 1, "", "device"], [190, 4, 1, "", "flatten_static_graph"], [190, 4, 1, "", "model"], [190, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[191, 1, 1, "", "LinearCompression"], [191, 1, 1, "", "LinearCompressionIterator"], [191, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[191, 4, 1, "", "device"], [191, 4, 1, "", "layer_1"], [191, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[191, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[192, 0, 0, "-", "base"], [193, 2, 1, "", "get_pattern"], [194, 0, 0, "-", "mha"], [195, 0, 0, "-", "ninm"], [196, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[192, 1, 1, "", "BasePattern"], [192, 1, 1, "", "KerasBasePattern"], [192, 1, 1, "", "PytorchBasePattern"], [192, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[192, 4, 1, "", "config"], [192, 4, 1, "", "invalid_layers"], [192, 4, 1, "", "is_global"], [192, 4, 1, "", "keep_mask_layers"], [192, 4, 1, "", "max_sparsity_ratio_per_op"], [192, 4, 1, "", "min_sparsity_ratio_per_op"], [192, 4, 1, "", "modules"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[192, 4, 1, "", "config"], [192, 4, 1, "", "invalid_layers"], [192, 4, 1, "", "is_global"], [192, 4, 1, "", "keep_mask_layers"], [192, 4, 1, "", "max_sparsity_ratio_per_op"], [192, 4, 1, "", "min_sparsity_ratio_per_op"], [192, 4, 1, "", "modules"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[192, 4, 1, "", "config"], [192, 4, 1, "", "invalid_layers"], [192, 4, 1, "", "is_global"], [192, 4, 1, "", "keep_mask_layers"], [192, 4, 1, "", "max_sparsity_ratio_per_op"], [192, 4, 1, "", "min_sparsity_ratio_per_op"], [192, 4, 1, "", "modules"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[194, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[194, 4, 1, "", "M"], [194, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[195, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[195, 4, 1, "", "M"], [195, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[196, 1, 1, "", "KerasPatternNxM"], [196, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[196, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[196, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[197, 0, 0, "-", "base"], [198, 0, 0, "-", "basic"], [199, 0, 0, "-", "block_mask"], [200, 2, 1, "", "get_pruner"], [201, 0, 0, "-", "mha"], [200, 2, 1, "", "parse_valid_pruner_types"], [202, 0, 0, "-", "pattern_lock"], [203, 0, 0, "-", "progressive"], [204, 0, 0, "-", "retrain_free"], [205, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[197, 1, 1, "", "BasePruner"], [197, 1, 1, "", "KerasBasePruner"], [197, 1, 1, "", "PytorchBasePruner"], [197, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[197, 4, 1, "", "config"], [197, 4, 1, "", "current_sparsity_ratio"], [197, 4, 1, "", "end_step"], [197, 4, 1, "", "global_step"], [197, 4, 1, "", "masks"], [197, 4, 1, "", "max_sparsity_ratio_per_op"], [197, 4, 1, "", "modules"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "pruning_frequency"], [197, 4, 1, "", "scheduler"], [197, 4, 1, "", "scores"], [197, 4, 1, "", "start_step"], [197, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[197, 4, 1, "", "config"], [197, 4, 1, "", "current_sparsity_ratio"], [197, 4, 1, "", "end_step"], [197, 4, 1, "", "global_step"], [197, 4, 1, "", "masks"], [197, 4, 1, "", "max_sparsity_ratio_per_op"], [197, 4, 1, "", "modules"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "pruning_frequency"], [197, 4, 1, "", "scheduler"], [197, 4, 1, "", "scores"], [197, 4, 1, "", "start_step"], [197, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[197, 4, 1, "", "config"], [197, 4, 1, "", "current_sparsity_ratio"], [197, 4, 1, "", "end_step"], [197, 4, 1, "", "global_step"], [197, 4, 1, "", "masks"], [197, 4, 1, "", "max_sparsity_ratio_per_op"], [197, 4, 1, "", "modules"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "pruning_frequency"], [197, 4, 1, "", "scheduler"], [197, 4, 1, "", "scores"], [197, 4, 1, "", "start_step"], [197, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[198, 1, 1, "", "KerasBasicPruner"], [198, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[198, 4, 1, "", "criterion"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "reg"], [198, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[198, 4, 1, "", "criterion"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "reg"], [198, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[199, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[199, 4, 1, "", "criterion"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "reg"], [199, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[201, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[201, 4, 1, "", "head_masks"], [201, 4, 1, "", "linear_layers"], [201, 4, 1, "", "mha_compressions"], [201, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[202, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[203, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[204, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[204, 4, 1, "", "criterion"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "reg"], [204, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[205, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[205, 4, 1, "", "criterion"], [205, 4, 1, "", "pattern"], [205, 4, 1, "", "reg"], [205, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[206, 1, 1, "", "BasePruning"], [206, 1, 1, "", "BasicPruning"], [206, 1, 1, "", "RetrainFreePruning"], [206, 1, 1, "", "SparseGPTPruning"], [206, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[206, 4, 1, "", "config_file_path"], [206, 4, 1, "", "model"], [206, 4, 1, "", "pruner_info"], [206, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[206, 4, 1, "", "config_file_path"], [206, 4, 1, "", "model"], [206, 4, 1, "", "pruner_info"], [206, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[206, 4, 1, "", "config_file_path"], [206, 4, 1, "", "model"], [206, 4, 1, "", "pruner_info"], [206, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[207, 1, 1, "", "BaseReg"], [207, 1, 1, "", "GroupLasso"], [207, 2, 1, "", "get_reg"], [207, 2, 1, "", "get_reg_type"], [207, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[207, 4, 1, "", "alpha"], [207, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[208, 1, 1, "", "IterativeScheduler"], [208, 1, 1, "", "OneshotScheduler"], [208, 1, 1, "", "PruningScheduler"], [208, 2, 1, "", "get_scheduler"], [208, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[208, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[209, 1, 1, "", "MagnitudeCriterion"], [209, 1, 1, "", "PruningCriterion"], [209, 2, 1, "", "get_tf_criterion"], [209, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[209, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[209, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[210, 2, 1, "", "check_config"], [210, 2, 1, "", "check_key_validity"], [210, 2, 1, "", "collect_layer_inputs"], [210, 2, 1, "", "generate_pruner_config"], [210, 2, 1, "", "get_layers"], [210, 2, 1, "", "get_sparsity_ratio"], [210, 2, 1, "", "get_sparsity_ratio_tf"], [210, 2, 1, "", "parse_last_linear"], [210, 2, 1, "", "parse_last_linear_tf"], [210, 2, 1, "", "parse_to_prune"], [210, 2, 1, "", "parse_to_prune_tf"], [210, 2, 1, "", "process_and_check_config"], [210, 2, 1, "", "process_config"], [210, 2, 1, "", "process_weight_config"], [210, 2, 1, "", "process_yaml_config"], [210, 2, 1, "", "reset_none_to_default"], [210, 2, 1, "", "update_params"]], "neural_compressor.conf": [[211, 0, 0, "-", "config"], [212, 0, 0, "-", "dotdict"], [214, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[211, 1, 1, "", "Benchmark_Conf"], [211, 1, 1, "", "Conf"], [211, 1, 1, "", "DefaultConf"], [211, 1, 1, "", "Distillation_Conf"], [211, 1, 1, "", "Graph_Optimization_Conf"], [211, 1, 1, "", "MixedPrecision_Conf"], [211, 1, 1, "", "NASConfig"], [211, 1, 1, "", "PrunerV2"], [211, 1, 1, "", "Pruning_Conf"], [211, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[212, 1, 1, "", "DotDict"], [212, 2, 1, "", "deep_get"], [212, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[214, 1, 1, "", "AccuracyCriterion"], [214, 1, 1, "", "BenchmarkConfig"], [214, 1, 1, "", "DistillationConfig"], [214, 1, 1, "", "KnowledgeDistillationLossConfig"], [214, 1, 1, "", "Options"], [214, 1, 1, "", "QuantizationConfig"], [214, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[215, 1, 1, "", "AccuracyCriterion"], [215, 1, 1, "", "BenchmarkConfig"], [215, 1, 1, "", "DistillationConfig"], [215, 1, 1, "", "DotDict"], [215, 1, 1, "", "ExportConfig"], [215, 1, 1, "", "HPOConfig"], [215, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [215, 1, 1, "", "Keras"], [215, 1, 1, "", "KnowledgeDistillationLossConfig"], [215, 1, 1, "", "MXNet"], [215, 1, 1, "", "MixedPrecisionConfig"], [215, 1, 1, "", "NASConfig"], [215, 1, 1, "", "ONNX"], [215, 1, 1, "", "ONNXQlinear2QDQConfig"], [215, 1, 1, "", "Options"], [215, 1, 1, "", "PostTrainingQuantConfig"], [215, 1, 1, "", "PyTorch"], [215, 1, 1, "", "QuantizationAwareTrainingConfig"], [215, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [215, 1, 1, "", "TF2ONNXConfig"], [215, 1, 1, "", "TensorFlow"], [215, 1, 1, "", "Torch2ONNXConfig"], [215, 1, 1, "", "TuningCriterion"], [215, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[217, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[218, 0, 0, "-", "sigopt"], [219, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[218, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[219, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[224, 0, 0, "-", "dataloaders"], [236, 0, 0, "-", "datasets"], [240, 0, 0, "-", "filters"], [244, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[220, 0, 0, "-", "base_dataloader"], [221, 0, 0, "-", "dataloader"], [222, 0, 0, "-", "default_dataloader"], [223, 0, 0, "-", "fetcher"], [225, 0, 0, "-", "mxnet_dataloader"], [226, 0, 0, "-", "onnxrt_dataloader"], [227, 0, 0, "-", "pytorch_dataloader"], [228, 0, 0, "-", "sampler"], [229, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[220, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[221, 1, 1, "", "DataLoader"], [221, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[222, 1, 1, "", "DefaultDataLoader"], [222, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[223, 1, 1, "", "Fetcher"], [223, 1, 1, "", "IndexFetcher"], [223, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[225, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[226, 1, 1, "", "ONNXRTBertDataLoader"], [226, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[227, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[228, 1, 1, "", "BatchSampler"], [228, 1, 1, "", "IterableSampler"], [228, 1, 1, "", "Sampler"], [228, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[229, 1, 1, "", "TFDataDataLoader"], [229, 1, 1, "", "TensorflowBertDataLoader"], [229, 1, 1, "", "TensorflowDataLoader"], [229, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[230, 0, 0, "-", "bert_dataset"], [231, 0, 0, "-", "coco_dataset"], [232, 0, 0, "-", "dataset"], [233, 0, 0, "-", "dummy_dataset"], [234, 0, 0, "-", "dummy_dataset_v2"], [235, 0, 0, "-", "imagenet_dataset"], [237, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[230, 1, 1, "", "InputFeatures"], [230, 1, 1, "", "ONNXRTBertDataset"], [230, 1, 1, "", "ParseDecodeBert"], [230, 1, 1, "", "PytorchBertDataset"], [230, 1, 1, "", "TensorflowBertDataset"], [230, 1, 1, "", "TensorflowModelZooBertDataset"], [230, 2, 1, "", "convert_examples_to_features"], [230, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[231, 1, 1, "", "COCONpy"], [231, 1, 1, "", "COCORaw"], [231, 1, 1, "", "COCORecordDataset"], [231, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[232, 1, 1, "", "CIFAR10"], [232, 1, 1, "", "CIFAR100"], [232, 1, 1, "", "Dataset"], [232, 1, 1, "", "Datasets"], [232, 1, 1, "", "FashionMNIST"], [232, 1, 1, "", "ImageFolder"], [232, 1, 1, "", "IterableDataset"], [232, 1, 1, "", "MNIST"], [232, 1, 1, "", "MXNetCIFAR10"], [232, 1, 1, "", "MXNetCIFAR100"], [232, 1, 1, "", "MXNetDatasets"], [232, 1, 1, "", "MXNetFashionMNIST"], [232, 1, 1, "", "MXNetImageFolder"], [232, 1, 1, "", "MXNetMNIST"], [232, 1, 1, "", "ONNXRTITDatasets"], [232, 1, 1, "", "ONNXRTQLDatasets"], [232, 1, 1, "", "PyTorchDatasets"], [232, 1, 1, "", "PytorchCIFAR10"], [232, 1, 1, "", "PytorchCIFAR100"], [232, 1, 1, "", "PytorchFashionMNIST"], [232, 1, 1, "", "PytorchMNIST"], [232, 1, 1, "", "PytorchMxnetWrapDataset"], [232, 1, 1, "", "PytorchMxnetWrapFunction"], [232, 1, 1, "", "Tensorflow"], [232, 1, 1, "", "TensorflowCIFAR10"], [232, 1, 1, "", "TensorflowCIFAR100"], [232, 1, 1, "", "TensorflowDatasets"], [232, 1, 1, "", "TensorflowFashionMNIST"], [232, 1, 1, "", "TensorflowImageRecord"], [232, 1, 1, "", "TensorflowMNIST"], [232, 1, 1, "", "TensorflowTFRecordDataset"], [232, 1, 1, "", "TensorflowVOCRecord"], [232, 2, 1, "", "calculate_md5"], [232, 2, 1, "", "check_integrity"], [232, 2, 1, "", "dataset_registry"], [232, 2, 1, "", "download_url"], [232, 5, 1, "", "framework_datasets"], [232, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[233, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[234, 1, 1, "", "DummyDataset"], [234, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[235, 1, 1, "", "ImagenetRaw"], [235, 1, 1, "", "MXNetImagenetRaw"], [235, 1, 1, "", "ONNXRTImagenetDataset"], [235, 1, 1, "", "PytorchImagenetRaw"], [235, 1, 1, "", "TensorflowImagenetDataset"], [235, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[237, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[238, 0, 0, "-", "coco_filter"], [239, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[238, 1, 1, "", "LabelBalanceCOCORawFilter"], [238, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[239, 1, 1, "", "FILTERS"], [239, 1, 1, "", "Filter"], [239, 1, 1, "", "MXNetFilters"], [239, 1, 1, "", "ONNXRTITFilters"], [239, 1, 1, "", "ONNXRTQLFilters"], [239, 1, 1, "", "PyTorchFilters"], [239, 1, 1, "", "TensorflowFilters"], [239, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[242, 0, 0, "-", "coco_transform"], [243, 0, 0, "-", "imagenet_transform"], [245, 0, 0, "-", "postprocess"], [246, 0, 0, "-", "tokenization"], [247, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[242, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[243, 1, 1, "", "BilinearImagenetTransform"], [243, 1, 1, "", "LabelShift"], [243, 1, 1, "", "ONNXResizeCropImagenetTransform"], [243, 1, 1, "", "OnnxBilinearImagenetTransform"], [243, 1, 1, "", "ParseDecodeImagenet"], [243, 1, 1, "", "ParseDecodeImagenetTransform"], [243, 1, 1, "", "QuantizedInput"], [243, 1, 1, "", "ResizeWithAspectRatio"], [243, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [243, 1, 1, "", "TensorflowShiftRescale"], [243, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[245, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[246, 1, 1, "", "BasicTokenizer"], [246, 1, 1, "", "FullTokenizer"], [246, 1, 1, "", "WordpieceTokenizer"], [246, 2, 1, "", "convert_by_vocab"], [246, 2, 1, "", "convert_to_unicode"], [246, 2, 1, "", "load_vocab"], [246, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[247, 1, 1, "", "AlignImageChannelTransform"], [247, 1, 1, "", "BaseTransform"], [247, 1, 1, "", "CastONNXTransform"], [247, 1, 1, "", "CastPyTorchTransform"], [247, 1, 1, "", "CastTFTransform"], [247, 1, 1, "", "CenterCropTFTransform"], [247, 1, 1, "", "CenterCropTransform"], [247, 1, 1, "", "CollectTransform"], [247, 1, 1, "", "ComposeTransform"], [247, 1, 1, "", "CropResizeTFTransform"], [247, 1, 1, "", "CropResizeTransform"], [247, 1, 1, "", "CropToBoundingBox"], [247, 1, 1, "", "InputFeatures"], [247, 1, 1, "", "MXNetCropResizeTransform"], [247, 1, 1, "", "MXNetCropToBoundingBox"], [247, 1, 1, "", "MXNetNormalizeTransform"], [247, 1, 1, "", "MXNetTransforms"], [247, 1, 1, "", "MXNetTranspose"], [247, 1, 1, "", "NormalizeTFTransform"], [247, 1, 1, "", "NormalizeTransform"], [247, 1, 1, "", "ONNXRTCropToBoundingBox"], [247, 1, 1, "", "ONNXRTITTransforms"], [247, 1, 1, "", "ONNXRTQLTransforms"], [247, 1, 1, "", "PaddedCenterCropTransform"], [247, 1, 1, "", "ParseDecodeVocTransform"], [247, 1, 1, "", "PyTorchAlignImageChannel"], [247, 1, 1, "", "PyTorchCropResizeTransform"], [247, 1, 1, "", "PyTorchNormalizeTransform"], [247, 1, 1, "", "PyTorchTransforms"], [247, 1, 1, "", "PyTorchTranspose"], [247, 1, 1, "", "PytorchMxnetTransform"], [247, 1, 1, "", "PytorchMxnetWrapFunction"], [247, 1, 1, "", "RandomCropTFTransform"], [247, 1, 1, "", "RandomCropTransform"], [247, 1, 1, "", "RandomHorizontalFlip"], [247, 1, 1, "", "RandomResizedCropMXNetTransform"], [247, 1, 1, "", "RandomResizedCropPytorchTransform"], [247, 1, 1, "", "RandomResizedCropTFTransform"], [247, 1, 1, "", "RandomResizedCropTransform"], [247, 1, 1, "", "RandomVerticalFlip"], [247, 1, 1, "", "RescaleKerasPretrainTransform"], [247, 1, 1, "", "RescaleTFTransform"], [247, 1, 1, "", "RescaleTransform"], [247, 1, 1, "", "ResizeMXNetTransform"], [247, 1, 1, "", "ResizePytorchTransform"], [247, 1, 1, "", "ResizeTFTransform"], [247, 1, 1, "", "ResizeTransform"], [247, 1, 1, "", "ResizeWithRatio"], [247, 1, 1, "", "SquadExample"], [247, 1, 1, "", "TFModelZooCollectTransform"], [247, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [247, 1, 1, "", "TFSquadV1PostTransform"], [247, 1, 1, "", "TRANSFORMS"], [247, 1, 1, "", "TensorflowCropToBoundingBox"], [247, 1, 1, "", "TensorflowRandomHorizontalFlip"], [247, 1, 1, "", "TensorflowRandomVerticalFlip"], [247, 1, 1, "", "TensorflowResizeWithRatio"], [247, 1, 1, "", "TensorflowTransform"], [247, 1, 1, "", "TensorflowTransforms"], [247, 1, 1, "", "TensorflowTranspose"], [247, 1, 1, "", "TensorflowWrapFunction"], [247, 1, 1, "", "ToArray"], [247, 1, 1, "", "ToNDArrayTransform"], [247, 1, 1, "", "Transforms"], [247, 1, 1, "", "Transpose"], [247, 2, 1, "", "convert_examples_to_features"], [247, 2, 1, "", "get_final_text"], [247, 2, 1, "", "get_torchvision_map"], [247, 2, 1, "", "read_squad_examples"], [247, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[248, 0, 0, "-", "benchmark"], [251, 0, 0, "-", "common"], [257, 0, 0, "-", "component"], [258, 0, 0, "-", "compression"], [259, 0, 0, "-", "contrib"], [284, 0, 0, "-", "data"], [289, 0, 0, "-", "distillation"], [290, 0, 0, "-", "export"], [294, 0, 0, "-", "graph_optimization"], [302, 0, 0, "-", "metric"], [304, 0, 0, "-", "mixed_precision"], [305, 0, 0, "-", "model_conversion"], [308, 0, 0, "-", "nas"], [314, 0, 0, "-", "pruner_legacy"], [318, 0, 0, "-", "pruning"], [319, 0, 0, "-", "pruning_recipes"], [323, 0, 0, "-", "pruning_v2"], [324, 0, 0, "-", "pytorch_pruner"], [331, 0, 0, "-", "quantization"], [332, 0, 0, "-", "scheduler"], [337, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[248, 1, 1, "", "Benchmark"], [248, 2, 1, "", "get_architecture"], [248, 2, 1, "", "get_bounded_threads"], [248, 2, 1, "", "get_core_ids"], [248, 2, 1, "", "get_physical_ids"], [248, 2, 1, "", "get_threads"], [248, 2, 1, "", "get_threads_per_core"], [248, 2, 1, "", "set_all_env_var"], [248, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[249, 0, 0, "-", "criterion"], [250, 0, 0, "-", "dataloader"], [252, 0, 0, "-", "metric"], [253, 0, 0, "-", "model"], [254, 0, 0, "-", "optimizer"], [255, 0, 0, "-", "postprocess"], [256, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[249, 1, 1, "", "Criterions"], [249, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [249, 1, 1, "", "KnowledgeDistillationFramework"], [249, 1, 1, "", "KnowledgeDistillationLoss"], [249, 1, 1, "", "PyTorchCriterions"], [249, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [249, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [249, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [249, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [249, 1, 1, "", "SelfKnowledgeDistillationLoss"], [249, 1, 1, "", "TensorflowCriterions"], [249, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [249, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[250, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[252, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[253, 1, 1, "", "Model"], [253, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[254, 1, 1, "", "Optimizers"], [254, 1, 1, "", "PyTorchOptimizers"], [254, 1, 1, "", "PyTorchSGD"], [254, 1, 1, "", "TensorFlowAdamW"], [254, 1, 1, "", "TensorFlowSGD"], [254, 1, 1, "", "TensorflowOptimizers"], [254, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[255, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[256, 2, 1, "", "get_activation"], [256, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[257, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[260, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[261, 0, 0, "-", "sigopt"], [262, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[261, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[262, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[267, 0, 0, "-", "dataloaders"], [279, 0, 0, "-", "datasets"], [283, 0, 0, "-", "filters"], [286, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[263, 0, 0, "-", "base_dataloader"], [264, 0, 0, "-", "dataloader"], [265, 0, 0, "-", "default_dataloader"], [266, 0, 0, "-", "fetcher"], [268, 0, 0, "-", "mxnet_dataloader"], [269, 0, 0, "-", "onnxrt_dataloader"], [270, 0, 0, "-", "pytorch_dataloader"], [271, 0, 0, "-", "sampler"], [272, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[263, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[265, 1, 1, "", "DefaultDataLoader"], [265, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[266, 1, 1, "", "Fetcher"], [266, 1, 1, "", "IndexFetcher"], [266, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[268, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[269, 1, 1, "", "ONNXRTBertDataLoader"], [269, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[270, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[271, 1, 1, "", "BatchSampler"], [271, 1, 1, "", "IterableSampler"], [271, 1, 1, "", "Sampler"], [271, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[272, 1, 1, "", "TFDataDataLoader"], [272, 1, 1, "", "TensorflowBertDataLoader"], [272, 1, 1, "", "TensorflowDataLoader"], [272, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[273, 0, 0, "-", "bert_dataset"], [274, 0, 0, "-", "coco_dataset"], [275, 0, 0, "-", "dataset"], [276, 0, 0, "-", "dummy_dataset"], [277, 0, 0, "-", "dummy_dataset_v2"], [278, 0, 0, "-", "imagenet_dataset"], [280, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[273, 1, 1, "", "InputFeatures"], [273, 1, 1, "", "ONNXRTBertDataset"], [273, 1, 1, "", "ParseDecodeBert"], [273, 1, 1, "", "PytorchBertDataset"], [273, 1, 1, "", "TensorflowBertDataset"], [273, 1, 1, "", "TensorflowModelZooBertDataset"], [273, 2, 1, "", "convert_examples_to_features"], [273, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[274, 1, 1, "", "COCONpy"], [274, 1, 1, "", "COCORaw"], [274, 1, 1, "", "COCORecordDataset"], [274, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[275, 1, 1, "", "CIFAR10"], [275, 1, 1, "", "CIFAR100"], [275, 1, 1, "", "Dataset"], [275, 1, 1, "", "Datasets"], [275, 1, 1, "", "FashionMNIST"], [275, 1, 1, "", "ImageFolder"], [275, 1, 1, "", "IterableDataset"], [275, 1, 1, "", "MNIST"], [275, 1, 1, "", "MXNetCIFAR10"], [275, 1, 1, "", "MXNetCIFAR100"], [275, 1, 1, "", "MXNetDatasets"], [275, 1, 1, "", "MXNetFashionMNIST"], [275, 1, 1, "", "MXNetImageFolder"], [275, 1, 1, "", "MXNetMNIST"], [275, 1, 1, "", "ONNXRTITDatasets"], [275, 1, 1, "", "ONNXRTQLDatasets"], [275, 1, 1, "", "PyTorchDatasets"], [275, 1, 1, "", "PytorchCIFAR10"], [275, 1, 1, "", "PytorchCIFAR100"], [275, 1, 1, "", "PytorchFashionMNIST"], [275, 1, 1, "", "PytorchMNIST"], [275, 1, 1, "", "PytorchMxnetWrapDataset"], [275, 1, 1, "", "PytorchMxnetWrapFunction"], [275, 1, 1, "", "TensorflowCIFAR10"], [275, 1, 1, "", "TensorflowCIFAR100"], [275, 1, 1, "", "TensorflowDatasets"], [275, 1, 1, "", "TensorflowFashionMNIST"], [275, 1, 1, "", "TensorflowImageFolder"], [275, 1, 1, "", "TensorflowImageRecord"], [275, 1, 1, "", "TensorflowMNIST"], [275, 1, 1, "", "TensorflowTFRecordDataset"], [275, 1, 1, "", "TensorflowVOCRecord"], [275, 2, 1, "", "calculate_md5"], [275, 2, 1, "", "check_integrity"], [275, 2, 1, "", "dataset_registry"], [275, 2, 1, "", "download_url"], [275, 5, 1, "", "framework_datasets"], [275, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[276, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[277, 1, 1, "", "DummyDataset"], [277, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[278, 1, 1, "", "ImagenetRaw"], [278, 1, 1, "", "MXNetImagenetRaw"], [278, 1, 1, "", "ONNXRTImagenetDataset"], [278, 1, 1, "", "PytorchImagenetRaw"], [278, 1, 1, "", "TensorflowImagenetDataset"], [278, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[280, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[281, 0, 0, "-", "coco_filter"], [282, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[281, 1, 1, "", "LabelBalanceCOCORawFilter"], [281, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[282, 1, 1, "", "FILTERS"], [282, 1, 1, "", "Filter"], [282, 1, 1, "", "MXNetFilters"], [282, 1, 1, "", "ONNXRTITFilters"], [282, 1, 1, "", "ONNXRTQLFilters"], [282, 1, 1, "", "PyTorchFilters"], [282, 1, 1, "", "TensorflowFilters"], [282, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[285, 0, 0, "-", "imagenet_transform"], [287, 0, 0, "-", "tokenization"], [288, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[285, 1, 1, "", "BilinearImagenetTransform"], [285, 1, 1, "", "LabelShift"], [285, 1, 1, "", "ONNXResizeCropImagenetTransform"], [285, 1, 1, "", "OnnxBilinearImagenetTransform"], [285, 1, 1, "", "ParseDecodeImagenet"], [285, 1, 1, "", "ParseDecodeImagenetTransform"], [285, 1, 1, "", "QuantizedInput"], [285, 1, 1, "", "ResizeWithAspectRatio"], [285, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[287, 1, 1, "", "BasicTokenizer"], [287, 1, 1, "", "FullTokenizer"], [287, 1, 1, "", "WordpieceTokenizer"], [287, 2, 1, "", "convert_by_vocab"], [287, 2, 1, "", "convert_to_unicode"], [287, 2, 1, "", "load_vocab"], [287, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[288, 1, 1, "", "AlignImageChannelTransform"], [288, 1, 1, "", "BaseTransform"], [288, 1, 1, "", "CastONNXTransform"], [288, 1, 1, "", "CastPyTorchTransform"], [288, 1, 1, "", "CastTFTransform"], [288, 1, 1, "", "CenterCropTFTransform"], [288, 1, 1, "", "CenterCropTransform"], [288, 1, 1, "", "CollectTransform"], [288, 1, 1, "", "ComposeTransform"], [288, 1, 1, "", "CropResizeTFTransform"], [288, 1, 1, "", "CropResizeTransform"], [288, 1, 1, "", "CropToBoundingBox"], [288, 1, 1, "", "InputFeatures"], [288, 1, 1, "", "MXNetCropResizeTransform"], [288, 1, 1, "", "MXNetCropToBoundingBox"], [288, 1, 1, "", "MXNetNormalizeTransform"], [288, 1, 1, "", "MXNetTransforms"], [288, 1, 1, "", "MXNetTranspose"], [288, 1, 1, "", "NormalizeTFTransform"], [288, 1, 1, "", "NormalizeTransform"], [288, 1, 1, "", "ONNXRTCropToBoundingBox"], [288, 1, 1, "", "ONNXRTITTransforms"], [288, 1, 1, "", "ONNXRTQLTransforms"], [288, 1, 1, "", "PaddedCenterCropTransform"], [288, 1, 1, "", "ParseDecodeVocTransform"], [288, 1, 1, "", "PyTorchAlignImageChannel"], [288, 1, 1, "", "PyTorchCropResizeTransform"], [288, 1, 1, "", "PyTorchNormalizeTransform"], [288, 1, 1, "", "PyTorchTransforms"], [288, 1, 1, "", "PyTorchTranspose"], [288, 1, 1, "", "PytorchMxnetTransform"], [288, 1, 1, "", "PytorchMxnetWrapFunction"], [288, 1, 1, "", "RandomCropTFTransform"], [288, 1, 1, "", "RandomCropTransform"], [288, 1, 1, "", "RandomHorizontalFlip"], [288, 1, 1, "", "RandomResizedCropMXNetTransform"], [288, 1, 1, "", "RandomResizedCropPytorchTransform"], [288, 1, 1, "", "RandomResizedCropTFTransform"], [288, 1, 1, "", "RandomResizedCropTransform"], [288, 1, 1, "", "RandomVerticalFlip"], [288, 1, 1, "", "RescaleKerasPretrainTransform"], [288, 1, 1, "", "RescaleTFTransform"], [288, 1, 1, "", "RescaleTransform"], [288, 1, 1, "", "ResizeMXNetTransform"], [288, 1, 1, "", "ResizePytorchTransform"], [288, 1, 1, "", "ResizeTFTransform"], [288, 1, 1, "", "ResizeTransform"], [288, 1, 1, "", "ResizeWithRatio"], [288, 1, 1, "", "SquadExample"], [288, 1, 1, "", "TFModelZooCollectTransform"], [288, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [288, 1, 1, "", "TFSquadV1PostTransform"], [288, 1, 1, "", "TRANSFORMS"], [288, 1, 1, "", "TensorflowCropToBoundingBox"], [288, 1, 1, "", "TensorflowRandomHorizontalFlip"], [288, 1, 1, "", "TensorflowRandomVerticalFlip"], [288, 1, 1, "", "TensorflowResizeWithRatio"], [288, 1, 1, "", "TensorflowTransform"], [288, 1, 1, "", "TensorflowTransforms"], [288, 1, 1, "", "TensorflowTranspose"], [288, 1, 1, "", "TensorflowWrapFunction"], [288, 1, 1, "", "ToArray"], [288, 1, 1, "", "ToNDArrayTransform"], [288, 1, 1, "", "Transforms"], [288, 1, 1, "", "Transpose"], [288, 2, 1, "", "convert_examples_to_features"], [288, 2, 1, "", "get_final_text"], [288, 2, 1, "", "get_torchvision_map"], [288, 2, 1, "", "read_squad_examples"], [288, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[289, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[289, 4, 1, "", "_epoch_ran"], [289, 4, 1, "", "best_model"], [289, 4, 1, "", "best_score"], [289, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[291, 0, 0, "-", "qlinear2qdq"], [292, 0, 0, "-", "tf2onnx"], [293, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[291, 2, 1, "", "check_model"], [291, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[292, 2, 1, "", "tf_to_fp32_onnx"], [292, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[293, 2, 1, "", "dynamic_quant_export"], [293, 2, 1, "", "get_node_mapping"], [293, 2, 1, "", "get_quantizable_onnx_ops"], [293, 2, 1, "", "static_quant_export"], [293, 2, 1, "", "torch_to_fp32_onnx"], [293, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[294, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[296, 0, 0, "-", "bleu"], [297, 0, 0, "-", "bleu_util"], [298, 0, 0, "-", "coco_label_map"], [299, 0, 0, "-", "coco_tools"], [300, 0, 0, "-", "evaluate_squad"], [301, 0, 0, "-", "f1"], [303, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[296, 1, 1, "", "BLEU"], [296, 1, 1, "", "UnicodeRegex"], [296, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[296, 4, 1, "", "labels"], [296, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[296, 4, 1, "", "nondigit_punct_re"], [296, 4, 1, "", "punct_nondigit_re"], [296, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[297, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[299, 1, 1, "", "COCOEvalWrapper"], [299, 1, 1, "", "COCOWrapper"], [299, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [299, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [299, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[299, 4, 1, "", "dataset"], [299, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[300, 2, 1, "", "evaluate"], [300, 2, 1, "", "exact_match_score"], [300, 2, 1, "", "f1_score"], [300, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[301, 2, 1, "", "evaluate"], [301, 2, 1, "", "f1_score"], [301, 2, 1, "", "metric_max_over_ground_truths"], [301, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[303, 1, 1, "", "Accuracy"], [303, 1, 1, "", "BaseMetric"], [303, 1, 1, "", "COCOmAPv2"], [303, 1, 1, "", "F1"], [303, 1, 1, "", "GeneralTopK"], [303, 1, 1, "", "Loss"], [303, 1, 1, "", "MAE"], [303, 1, 1, "", "METRICS"], [303, 1, 1, "", "MSE"], [303, 1, 1, "", "MXNetMetrics"], [303, 1, 1, "", "ONNXRTGLUE"], [303, 1, 1, "", "ONNXRTITMetrics"], [303, 1, 1, "", "ONNXRTQLMetrics"], [303, 1, 1, "", "PyTorchLoss"], [303, 1, 1, "", "PyTorchMetrics"], [303, 1, 1, "", "RMSE"], [303, 1, 1, "", "ROC"], [303, 1, 1, "", "SquadF1"], [303, 1, 1, "", "TensorflowCOCOMAP"], [303, 1, 1, "", "TensorflowMAP"], [303, 1, 1, "", "TensorflowMetrics"], [303, 1, 1, "", "TensorflowTopK"], [303, 1, 1, "", "TensorflowVOCMAP"], [303, 1, 1, "", "WrapMXNetMetric"], [303, 1, 1, "", "WrapONNXRTMetric"], [303, 1, 1, "", "WrapPyTorchMetric"], [303, 1, 1, "", "mIOU"], [303, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[303, 4, 1, "", "label_list"], [303, 4, 1, "", "pred_list"], [303, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[303, 4, 1, "", "k"], [303, 4, 1, "", "num_correct"], [303, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[303, 4, 1, "", "sample"], [303, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[303, 4, 1, "", "compare_label"], [303, 4, 1, "", "label_list"], [303, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[303, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[303, 4, 1, "", "compare_label"], [303, 4, 1, "", "label_list"], [303, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[303, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[303, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[303, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[303, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[303, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[303, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[303, 4, 1, "", "k"], [303, 4, 1, "", "num_correct"], [303, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[304, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[305, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[306, 0, 0, "-", "basic_nas"], [307, 0, 0, "-", "dynas"], [309, 0, 0, "-", "nas"], [310, 0, 0, "-", "nas_utils"], [311, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[306, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[307, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[309, 1, 1, "", "NAS"], [309, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[310, 2, 1, "", "create_search_space_pool"], [310, 2, 1, "", "find_pareto_front"], [310, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[311, 1, 1, "", "BayesianOptimizationSearcher"], [311, 1, 1, "", "GridSearcher"], [311, 1, 1, "", "RandomSearcher"], [311, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[312, 0, 0, "-", "gradient_sensitivity"], [313, 0, 0, "-", "group_lasso"], [315, 0, 0, "-", "magnitude"], [316, 0, 0, "-", "pattern_lock"], [317, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[312, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[313, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[315, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[316, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[317, 1, 1, "", "Pruner"], [317, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[318, 1, 1, "", "Pruning"], [318, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[318, 4, 1, "", "conf"], [318, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[320, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[321, 0, 0, "-", "pattern"], [322, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[321, 1, 1, "", "PATTERNS"], [321, 1, 1, "", "PatternBase"], [321, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[321, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[322, 1, 1, "", "TilePatternBase"], [322, 1, 1, "", "TilePattern_1x1"], [322, 1, 1, "", "TilePattern_1x16"], [322, 1, 1, "", "TilePattern_1x2"], [322, 1, 1, "", "TilePattern_2x2"], [322, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[323, 1, 1, "", "Pruning"], [323, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[323, 4, 1, "", "conf"], [323, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[325, 0, 0, "-", "logger"], [326, 0, 0, "-", "patterns"], [327, 0, 0, "-", "prune_utils"], [328, 0, 0, "-", "pruner"], [329, 0, 0, "-", "pruning"], [330, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[326, 1, 1, "", "Pattern"], [326, 1, 1, "", "PatternNInM"], [326, 1, 1, "", "PatternNxM"], [326, 2, 1, "", "get_pattern"], [326, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[326, 4, 1, "", "is_global"], [326, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[326, 4, 1, "", "M"], [326, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[326, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[327, 2, 1, "", "check_config"], [327, 2, 1, "", "parse_not_to_prune"], [327, 2, 1, "", "parse_to_prune"], [327, 2, 1, "", "process_and_check_config"], [327, 2, 1, "", "process_config"], [327, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[328, 1, 1, "", "MagnitudePruner"], [328, 1, 1, "", "PatternLockPruner"], [328, 1, 1, "", "Pruner"], [328, 1, 1, "", "SnipMomentumPruner"], [328, 1, 1, "", "SnipPruner"], [328, 2, 1, "", "get_pruner"], [328, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[328, 4, 1, "", "config"], [328, 4, 1, "", "current_sparsity_ratio"], [328, 4, 1, "", "end_step"], [328, 4, 1, "", "global_step"], [328, 4, 1, "", "masks"], [328, 4, 1, "", "max_sparsity_ratio_per_layer"], [328, 4, 1, "", "modules"], [328, 4, 1, "", "pattern"], [328, 4, 1, "", "scheduler"], [328, 4, 1, "", "scores"], [328, 4, 1, "", "start_step"], [328, 4, 1, "", "target_sparsity_ratio"], [328, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[329, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[329, 4, 1, "", "config_file_path"], [329, 4, 1, "", "model"], [329, 4, 1, "", "pruner_info"], [329, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[330, 1, 1, "", "IterativeScheduler"], [330, 1, 1, "", "OneshotScheduler"], [330, 1, 1, "", "Scheduler"], [330, 2, 1, "", "get_scheduler"], [330, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[330, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[331, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[332, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[333, 0, 0, "-", "auto_mixed_precision"], [334, 0, 0, "-", "basic"], [335, 0, 0, "-", "bayesian"], [336, 0, 0, "-", "exhaustive"], [338, 0, 0, "-", "mse"], [339, 0, 0, "-", "mse_v2"], [340, 0, 0, "-", "random"], [341, 0, 0, "-", "strategy"], [343, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[333, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[334, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[335, 1, 1, "", "BayesianOptimization"], [335, 1, 1, "", "BayesianTuneStrategy"], [335, 1, 1, "", "TargetSpace"], [335, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[336, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[338, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[339, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[340, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[341, 1, 1, "", "TuneStrategy"], [341, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[342, 0, 0, "-", "constant"], [344, 0, 0, "-", "tuning_sampler"], [345, 0, 0, "-", "tuning_space"], [346, 0, 0, "-", "tuning_structs"], [347, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[344, 1, 1, "", "FallbackTuningSampler"], [344, 1, 1, "", "ModelWiseTuningSampler"], [344, 1, 1, "", "OpTypeWiseTuningSampler"], [344, 1, 1, "", "OpWiseTuningSampler"], [344, 1, 1, "", "SmoothQuantSampler"], [344, 1, 1, "", "TuningOrder"], [344, 1, 1, "", "TuningSampler"], [344, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[345, 1, 1, "", "TuningItem"], [345, 1, 1, "", "TuningSpace"], [345, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [345, 2, 1, "", "pattern_to_internal"], [345, 2, 1, "", "pattern_to_path"], [345, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[346, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[347, 1, 1, "", "OrderedDefaultDict"], [347, 2, 1, "", "extract_data_type"], [347, 2, 1, "", "get_adaptor_name"], [347, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[349, 0, 0, "-", "bleu"], [350, 0, 0, "-", "bleu_util"], [351, 0, 0, "-", "coco_label_map"], [352, 0, 0, "-", "coco_tools"], [353, 0, 0, "-", "evaluate_squad"], [354, 0, 0, "-", "f1"], [356, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[349, 1, 1, "", "BLEU"], [349, 1, 1, "", "UnicodeRegex"], [349, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[349, 4, 1, "", "labels"], [349, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[349, 4, 1, "", "nondigit_punct_re"], [349, 4, 1, "", "punct_nondigit_re"], [349, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[350, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[352, 1, 1, "", "COCOEvalWrapper"], [352, 1, 1, "", "COCOWrapper"], [352, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [352, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [352, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[352, 4, 1, "", "dataset"], [352, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[353, 2, 1, "", "evaluate"], [353, 2, 1, "", "exact_match_score"], [353, 2, 1, "", "f1_score"], [353, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[354, 2, 1, "", "evaluate"], [354, 2, 1, "", "f1_score"], [354, 2, 1, "", "metric_max_over_ground_truths"], [354, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[356, 1, 1, "", "Accuracy"], [356, 1, 1, "", "BaseMetric"], [356, 1, 1, "", "COCOmAPv2"], [356, 1, 1, "", "F1"], [356, 1, 1, "", "GeneralTopK"], [356, 1, 1, "", "Loss"], [356, 1, 1, "", "MAE"], [356, 1, 1, "", "METRICS"], [356, 1, 1, "", "MSE"], [356, 1, 1, "", "MXNetMetrics"], [356, 1, 1, "", "Metric"], [356, 1, 1, "", "ONNXRTGLUE"], [356, 1, 1, "", "ONNXRTITMetrics"], [356, 1, 1, "", "ONNXRTQLMetrics"], [356, 1, 1, "", "PyTorchLoss"], [356, 1, 1, "", "PyTorchMetrics"], [356, 1, 1, "", "RMSE"], [356, 1, 1, "", "ROC"], [356, 1, 1, "", "SquadF1"], [356, 1, 1, "", "TensorflowCOCOMAP"], [356, 1, 1, "", "TensorflowMAP"], [356, 1, 1, "", "TensorflowMetrics"], [356, 1, 1, "", "TensorflowTopK"], [356, 1, 1, "", "TensorflowVOCMAP"], [356, 1, 1, "", "WrapMXNetMetric"], [356, 1, 1, "", "WrapONNXRTMetric"], [356, 1, 1, "", "WrapPyTorchMetric"], [356, 1, 1, "", "mIOU"], [356, 2, 1, "", "metric_registry"], [356, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[356, 4, 1, "", "label_list"], [356, 4, 1, "", "pred_list"], [356, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[356, 4, 1, "", "k"], [356, 4, 1, "", "num_correct"], [356, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[356, 4, 1, "", "sample"], [356, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[356, 4, 1, "", "compare_label"], [356, 4, 1, "", "label_list"], [356, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[356, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[356, 4, 1, "", "compare_label"], [356, 4, 1, "", "label_list"], [356, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[356, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[356, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[356, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[356, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[356, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[356, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[356, 4, 1, "", "k"], [356, 4, 1, "", "num_correct"], [356, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[357, 2, 1, "", "fit"]], "neural_compressor.model": [[358, 0, 0, "-", "base_model"], [360, 0, 0, "-", "keras_model"], [361, 0, 0, "-", "model"], [362, 0, 0, "-", "mxnet_model"], [363, 0, 0, "-", "nets_factory"], [364, 0, 0, "-", "onnx_model"], [365, 0, 0, "-", "tensorflow_model"], [366, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[358, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[360, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[361, 1, 1, "", "Model"], [361, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[362, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[363, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[364, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[365, 1, 1, "", "TensorflowBaseModel"], [365, 1, 1, "", "TensorflowCheckpointModel"], [365, 1, 1, "", "TensorflowModel"], [365, 1, 1, "", "TensorflowQATModel"], [365, 1, 1, "", "TensorflowSavedModelModel"], [365, 2, 1, "", "checkpoint_session"], [365, 2, 1, "", "estimator_session"], [365, 2, 1, "", "frozen_pb_session"], [365, 2, 1, "", "get_model_type"], [365, 2, 1, "", "graph_def_session"], [365, 2, 1, "", "graph_session"], [365, 2, 1, "", "keras_session"], [365, 2, 1, "", "load_saved_model"], [365, 2, 1, "", "saved_model_session"], [365, 2, 1, "", "slim_session"], [365, 2, 1, "", "validate_and_inference_input_output"], [365, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[366, 1, 1, "", "IPEXModel"], [366, 1, 1, "", "PyTorchBaseModel"], [366, 1, 1, "", "PyTorchFXModel"], [366, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[367, 1, 1, "", "Accuracy"], [367, 1, 1, "", "Footprint"], [367, 1, 1, "", "ModelSize"], [367, 1, 1, "", "MultiObjective"], [367, 1, 1, "", "Objective"], [367, 1, 1, "", "Performance"], [367, 2, 1, "", "objective_custom_registry"], [367, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[370, 0, 0, "-", "parser"], [380, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[369, 0, 0, "-", "factory"], [372, 0, 0, "-", "onnx_parser"], [374, 0, 0, "-", "parser"], [375, 0, 0, "-", "result"], [377, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[369, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[371, 0, 0, "-", "factory"], [373, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[371, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[373, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[374, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[375, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[376, 0, 0, "-", "factory"], [378, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[376, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[378, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[379, 0, 0, "-", "factory"], [382, 0, 0, "-", "onnxrt_profiler"], [385, 0, 0, "-", "profiler"], [387, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[379, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[381, 0, 0, "-", "factory"], [383, 0, 0, "-", "profiler"], [384, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[381, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[383, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[384, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[385, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[386, 0, 0, "-", "factory"], [388, 0, 0, "-", "profiler"], [389, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[386, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[388, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[389, 2, 1, "", "create_tf_config"], [389, 2, 1, "", "delete_assign"], [389, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[390, 2, 1, "", "fit"]], "neural_compressor.strategy": [[391, 0, 0, "-", "auto"], [392, 0, 0, "-", "auto_mixed_precision"], [393, 0, 0, "-", "basic"], [394, 0, 0, "-", "bayesian"], [395, 0, 0, "-", "conservative"], [396, 0, 0, "-", "exhaustive"], [397, 0, 0, "-", "hawq_v2"], [399, 0, 0, "-", "mse"], [400, 0, 0, "-", "mse_v2"], [401, 0, 0, "-", "random"], [402, 0, 0, "-", "strategy"], [404, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[391, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[392, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[393, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[394, 1, 1, "", "BayesianOptimization"], [394, 1, 1, "", "BayesianTuneStrategy"], [394, 1, 1, "", "TargetSpace"], [394, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[395, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[396, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[397, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[399, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[400, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[401, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[402, 1, 1, "", "TuneStrategy"], [402, 1, 1, "", "TuneStrategyMeta"], [402, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[403, 0, 0, "-", "constant"], [405, 0, 0, "-", "tuning_sampler"], [406, 0, 0, "-", "tuning_space"], [407, 0, 0, "-", "tuning_structs"], [408, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[405, 1, 1, "", "BlockFallbackTuningSampler"], [405, 1, 1, "", "FallbackTuningSampler"], [405, 1, 1, "", "LowerBitsSampler"], [405, 1, 1, "", "ModelWiseTuningSampler"], [405, 1, 1, "", "OpTypeWiseTuningSampler"], [405, 1, 1, "", "OpWiseTuningSampler"], [405, 1, 1, "", "SmoothQuantSampler"], [405, 1, 1, "", "TuningOrder"], [405, 1, 1, "", "TuningSampler"], [405, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[406, 1, 1, "", "TuningItem"], [406, 1, 1, "", "TuningSpace"], [406, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [406, 2, 1, "", "pattern_to_internal"], [406, 2, 1, "", "pattern_to_path"], [406, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[407, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[408, 1, 1, "", "ClassRegister"], [408, 1, 1, "", "OrderedDefaultDict"], [408, 1, 1, "", "QuantOptions"], [408, 1, 1, "", "QuantType"], [408, 2, 1, "", "build_slave_faker_model"], [408, 2, 1, "", "extract_data_type"], [408, 2, 1, "", "get_adaptor_name"], [408, 2, 1, "", "preprocess_user_cfg"], [408, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[409, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[409, 1, 1, "", "ExampleClass"], [409, 4, 1, "", "attribute1"], [409, 2, 1, "", "function1"], [409, 2, 1, "", "function2"], [409, 2, 1, "", "function3"], [409, 2, 1, "", "generator1"], [409, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[409, 4, 1, "", "attr1"], [409, 4, 1, "", "attr2"], [409, 4, 1, "", "attr5"]], "neural_compressor.torch": [[411, 0, 0, "-", "algorithms"], [415, 0, 0, "-", "quantization"], [417, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[412, 0, 0, "-", "rtn_quantize"]], "neural_compressor.torch.quantization": [[414, 0, 0, "-", "config"], [416, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.config": [[414, 1, 1, "", "Backend"], [414, 1, 1, "", "RTNWeightQuantConfig"], [414, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[416, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[417, 2, 1, "", "register_algo"]], "neural_compressor.training": [[418, 1, 1, "", "CallBacks"], [418, 1, 1, "", "CompressionManager"], [418, 2, 1, "", "fit"], [418, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[419, 0, 0, "-", "collect_layer_histogram"], [420, 0, 0, "-", "constant"], [421, 0, 0, "-", "create_obj_from_config"], [423, 0, 0, "-", "kl_divergence"], [424, 0, 0, "-", "load_huggingface"], [425, 0, 0, "-", "logger"], [426, 0, 0, "-", "neural_insights_utils"], [427, 0, 0, "-", "options"], [428, 0, 0, "-", "pytorch"], [429, 0, 0, "-", "utility"], [430, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[419, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[421, 2, 1, "", "create_dataloader"], [421, 2, 1, "", "create_dataset"], [421, 2, 1, "", "create_eval_func"], [421, 2, 1, "", "create_train_func"], [421, 2, 1, "", "get_algorithm"], [421, 2, 1, "", "get_func_from_config"], [421, 2, 1, "", "get_metrics"], [421, 2, 1, "", "get_postprocess"], [421, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[423, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[424, 1, 1, "", "OptimizedModel"], [424, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[425, 1, 1, "", "Logger"], [425, 2, 1, "", "debug"], [425, 2, 1, "", "error"], [425, 2, 1, "", "fatal"], [425, 2, 1, "", "info"], [425, 2, 1, "", "log"], [425, 2, 1, "", "warn"], [425, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[426, 2, 1, "", "get_model_path"], [426, 2, 1, "", "register_neural_insights_workload"], [426, 2, 1, "", "update_neural_insights_workload"], [426, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[427, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[428, 2, 1, "", "is_int8_model"], [428, 2, 1, "", "load"], [428, 2, 1, "", "load_weight_only"]], "neural_compressor.utils.utility": [[429, 1, 1, "", "CaptureOutputToFile"], [429, 1, 1, "", "CpuInfo"], [429, 2, 1, "", "Dequantize"], [429, 1, 1, "", "DotDict"], [429, 1, 1, "", "GLOBAL_STATE"], [429, 1, 1, "", "LazyImport"], [429, 1, 1, "", "MODE"], [429, 1, 1, "", "OpEntry"], [429, 1, 1, "", "Statistics"], [429, 2, 1, "", "alias_param"], [429, 2, 1, "", "calculate_mse"], [429, 2, 1, "", "check_key_exist"], [429, 2, 1, "", "combine_histogram"], [429, 2, 1, "", "compare_objects"], [429, 2, 1, "", "compute_sparsity"], [429, 2, 1, "", "dequantize_weight"], [429, 2, 1, "", "dump_class_attrs"], [429, 2, 1, "", "dump_data_to_local"], [429, 2, 1, "", "dump_elapsed_time"], [429, 2, 1, "", "dump_table"], [429, 2, 1, "", "dump_table_to_csv"], [429, 2, 1, "", "equal_dicts"], [429, 2, 1, "", "fault_tolerant_file"], [429, 2, 1, "", "get_all_fp32_data"], [429, 2, 1, "", "get_number_of_sockets"], [429, 2, 1, "", "get_op_list"], [429, 2, 1, "", "get_size"], [429, 2, 1, "", "get_tensor_histogram"], [429, 2, 1, "", "get_tensors_info"], [429, 2, 1, "", "get_tuning_history"], [429, 2, 1, "", "get_weights_details"], [429, 2, 1, "", "load_data_from_pkl"], [429, 2, 1, "", "mse_metric_gap"], [429, 2, 1, "", "print_op_list"], [429, 2, 1, "", "print_table"], [429, 2, 1, "", "recover"], [429, 2, 1, "", "set_random_seed"], [429, 2, 1, "", "set_resume_from"], [429, 2, 1, "", "set_tensorboard"], [429, 2, 1, "", "set_workspace"], [429, 2, 1, "", "show_memory_info"], [429, 2, 1, "", "singleton"], [429, 2, 1, "", "str2array"], [429, 2, 1, "", "time_limit"], [429, 2, 1, "", "version1_eq_version2"], [429, 2, 1, "", "version1_gt_version2"], [429, 2, 1, "", "version1_gte_version2"], [429, 2, 1, "", "version1_lt_version2"], [429, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[430, 1, 1, "", "WeightsDetails"], [430, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 199], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 439, 440, 442], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 179, 180, 183, 184, 186, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 285, 287, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 406, 407, 408, 409, 414, 416, 417, 418, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 179, 180, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 347, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 438, 505], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 156, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 176, 177, 179, 183, 184, 186, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 299, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 349, 352, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 373, 374, 375, 376, 378, 379, 381, 383, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 405, 406, 407, 408, 409, 414, 418, 419, 422, 423, 424, 425, 427, 429, 430, 439, 505], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 152, 157, 158, 159, 162, 163, 165, 166, 167, 169, 172, 173, 177, 179, 180, 183, 184, 186, 187, 188, 190, 192, 193, 197, 200, 206, 207, 208, 209, 210, 212, 221, 222, 230, 232, 236, 239, 240, 241, 244, 246, 247, 248, 249, 251, 253, 254, 256, 265, 273, 275, 279, 282, 283, 284, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 301, 302, 303, 310, 317, 321, 326, 327, 328, 330, 335, 341, 345, 347, 349, 350, 352, 353, 354, 355, 356, 357, 361, 365, 367, 384, 389, 390, 394, 402, 406, 408, 409, 414, 416, 417, 418, 421, 422, 424, 425, 426, 428, 429, 464], "subpackag": [2, 17, 87, 111, 112, 114, 153, 185, 187, 216, 241, 259, 284, 295, 319, 337, 348, 398], "submodul": [2, 12, 17, 29, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 153, 154, 169, 178, 181, 185, 187, 189, 193, 200, 213, 217, 224, 236, 240, 244, 251, 260, 267, 279, 283, 286, 290, 295, 302, 308, 314, 320, 324, 337, 343, 348, 355, 359, 370, 372, 377, 380, 382, 387, 398, 404, 410, 422], "packag": [2, 29, 169, 187, 193, 200, 224, 236, 240, 241, 244, 251, 267, 279, 283, 284, 286, 295, 302, 314, 319, 320, 337, 355, 359, 398, 422, 488, 490, 492, 493], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 156, 331, 390, 414, 415, 416, 435, 438, 440, 441, 453, 457, 461, 463, 466, 469, 472, 475, 476, 484, 495, 497, 498, 499, 500, 508, 509, 510, 516, 517, 518, 519, 522, 528], "separable_conv2d": 10, "mxnet": [11, 459, 474, 517, 524], "mxnet_util": [12, 13], "util": [13, 43, 148, 158, 165, 175, 180, 210, 342, 343, 344, 345, 346, 347, 384, 389, 403, 404, 405, 406, 407, 408, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 444], "onnxrt": [14, 459, 474, 524], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 440, 457], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 440, 441], "activ": [18, 498], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 522], "maxpool": 32, "norm": 33, "op": [34, 466], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 501], "unary_op": 40, "smooth_quant": [42, 162, 170], "weight_onli": [44, 166], "pytorch": [45, 428, 459, 464, 466, 474, 499, 517, 518, 523, 524, 528], "queri": [46, 439, 503, 508, 509, 510], "tensorflow": [47, 459, 464, 466, 474, 517, 518, 523, 524, 528], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 476], "bf16_convert": [50, 150], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 440], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 466, 528], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 443, 472, 517, 528], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 528], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 528], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 256], "awq": 149, "gptq": 151, "hawq_metr": 152, "layer_wise_qu": [154, 155, 156, 157, 158], "modified_pickl": 155, "torch_load": 157, "mixed_precis": [159, 304], "model_wrapp": 160, "pattern_detector": 161, "symbolic_trac": 163, "teq": 164, "algorithm": [167, 168, 169, 170, 171, 411, 412, 457, 519, 522, 525], "fast_bias_correct": 168, "weight_correct": 171, "benchmark": [172, 248, 447, 456, 461, 475, 516], "common": [173, 174, 175, 249, 250, 251, 252, 253, 254, 255, 256, 435, 467], "base_config": 173, "compress": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 258, 448, 519], "callback": 176, "distil": [177, 178, 179, 180, 289, 462, 463, 475, 516, 528], "criterion": [177, 249], "optim": [179, 254, 485, 495, 505, 508, 509, 510, 513, 514, 526], "hpo": [181, 182, 183, 184], "sa_optim": 182, "search_algorithm": [183, 311], "search_spac": 184, "pruner": [186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 317, 328], "criteria": [186, 434, 514, 525], "model_slim": [188, 189, 190, 191], "auto_slim": 188, "pattern_analyz": 190, "weight_slim": 191, "pattern": [192, 193, 194, 195, 196, 320, 321, 322, 326, 514], "base": [192, 197, 472, 504, 526], "mha": [194, 201], "ninm": 195, "nxm": 196, "basic": [198, 334, 393, 436, 525], "pattern_lock": [202, 316], "progress": [203, 501], "retrain_fre": 204, "sparse_gpt": 205, "prune": [206, 318, 329, 475, 514, 516, 528], "reg": 207, "schedul": [208, 330, 332, 514], "tf_criteria": 209, "conf": [211, 212, 213, 214], "config": [211, 215, 414, 449, 459, 512], "dotdict": 212, "pythonic_config": 214, "contrib": [216, 217, 218, 219, 259, 260, 261, 262], "strategi": [217, 218, 219, 260, 261, 262, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 454, 521, 525], "sigopt": [218, 261, 521, 525], "tpe": [219, 262, 525], "data": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 440, 441, 461, 465, 499], "dataload": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 250, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 458, 459], "base_dataload": [220, 263], "default_dataload": [222, 265], "fetcher": [223, 266], "attribut": [224, 232, 241, 275, 284, 295, 319, 359, 409, 422, 433], "mxnet_dataload": [225, 268], "onnxrt_dataload": [226, 269], "pytorch_dataload": [227, 270], "sampler": [228, 271], "tensorflow_dataload": [229, 272], "dataset": [230, 231, 232, 233, 234, 235, 236, 237, 273, 274, 275, 276, 277, 278, 279, 280, 459, 461, 470, 500], "bert_dataset": [230, 273], "coco_dataset": [231, 274], "dummy_dataset": [233, 276], "dummy_dataset_v2": [234, 277], "imagenet_dataset": [235, 278], "style_transfer_dataset": [237, 280], "filter": [238, 239, 240, 281, 282, 283], "coco_filt": [238, 281], "transform": [242, 243, 244, 245, 246, 247, 285, 286, 287, 288, 470, 524], "coco_transform": 242, "imagenet_transform": [243, 285], "postprocess": [245, 255], "token": [246, 287], "experiment": [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347], "metric": [252, 296, 297, 298, 299, 300, 301, 302, 303, 349, 350, 351, 352, 353, 354, 355, 356, 470, 474], "model": [253, 358, 359, 360, 361, 362, 363, 364, 365, 366, 440, 451, 466, 469, 472, 475, 477, 484, 498, 499, 500, 508, 509, 510, 514, 519, 522, 528], "compon": 257, "export": [290, 291, 292, 293, 466, 519], "qlinear2qdq": 291, "tf2onnx": 292, "torch2onnx": 293, "graph_optim": 294, "bleu": [296, 349], "bleu_util": [297, 350], "coco_label_map": [298, 351], "coco_tool": [299, 352], "evaluate_squad": [300, 353], "f1": [301, 354], "model_convers": 305, "na": [306, 307, 308, 309, 310, 311, 436, 516], "basic_na": 306, "dyna": 307, "nas_util": 310, "pruner_legaci": [312, 313, 314, 315, 316, 317], "gradient_sensit": 312, "group_lasso": 313, "magnitud": 315, "pruning_recip": [319, 320, 321, 322], "tile_pattern": 322, "pruning_v2": 323, "pytorch_prun": [324, 325, 326, 327, 328, 329, 330], "logger": [325, 425], "prune_util": 327, "auto_mixed_precis": [333, 392], "bayesian": [335, 394, 525], "exhaust": [336, 396, 525], "mse": [338, 399, 525], "mse_v2": [339, 400, 525], "random": [340, 401, 525], "constant": [342, 403, 420], "tuning_sampl": [344, 405], "tuning_spac": [345, 406], "tuning_struct": [346, 407], "mix_precis": 357, "base_model": 358, "keras_model": 360, "mxnet_model": 362, "nets_factori": 363, "onnx_model": 364, "tensorflow_model": 365, "torch_model": 366, "object": [367, 452, 508, 509, 510, 512], "profil": [368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 461], "parser": [369, 370, 371, 372, 373, 374, 375, 376, 377, 378], "factori": [369, 371, 376, 379, 381, 386], "onnx_pars": [371, 372, 373], "result": [375, 498, 500, 508, 509, 510], "tensorflow_pars": [376, 377, 378], "onnxrt_profil": [381, 382, 383, 384], "tensorflow_profil": [386, 387, 388, 389], "auto": [391, 489, 495, 518, 522, 525], "conserv": [395, 525], "hawq_v2": [397, 525], "templat": [409, 410, 434], "api_doc_exampl": 409, "torch": [411, 412, 413, 414, 415, 416, 417, 444, 528], "rtn_quantiz": 412, "train": [418, 435, 455, 464, 475, 514, 517], "collect_layer_histogram": 419, "create_obj_from_config": 421, "kl_diverg": 423, "load_huggingfac": 424, "neural_insights_util": 426, "option": [427, 464, 483], "weights_detail": 430, "version": 431, "intel": [432, 438, 458, 461, 471, 472, 474, 475, 481, 489, 495, 528, 529], "neural": [432, 435, 436, 438, 458, 461, 471, 472, 474, 475, 478, 482, 484, 489, 495, 497, 498, 499, 500, 502, 503, 504, 508, 509, 510, 514, 521, 526, 529], "compressor": [432, 435, 438, 458, 461, 471, 472, 474, 475, 489, 495, 521, 529], "document": [432, 438, 445, 529], "section": [432, 529], "contributor": [433, 434], "coven": [433, 434], "code": [433, 434, 436, 475, 496, 501, 519, 526], "conduct": [433, 434], "our": [433, 522], "pledg": 433, "standard": 433, "respons": [433, 504], "scope": [433, 514], "enforc": 433, "contribut": [434, 488, 492], "guidelin": 434, "creat": [434, 501], "pull": 434, "request": [434, 476, 506], "step": [434, 497, 498, 499, 500], "checklist": 434, "accept": 434, "statu": [434, 503, 504], "check": 434, "overview": [434, 505, 526], "support": [434, 435, 436, 439, 441, 456, 457, 458, 459, 461, 462, 463, 464, 466, 468, 471, 472, 474, 476, 477, 479, 480, 484, 485, 512, 513, 514, 516, 517, 519, 522, 523, 524, 527], "fx": 435, "introduct": [435, 436, 439, 440, 441, 456, 457, 458, 459, 461, 462, 463, 464, 466, 468, 471, 474, 476, 477, 495, 498, 499, 500, 512, 513, 514, 516, 517, 519, 521, 522, 523, 524, 525, 527], "mode": [435, 528], "matrix": [435, 436, 439, 456, 457, 458, 459, 461, 462, 463, 464, 466, 468, 471, 474, 476, 477, 480, 512, 513, 514, 516, 517, 519, 522, 523, 527], "get": [435, 436, 438, 439, 456, 458, 459, 461, 462, 463, 464, 468, 469, 474, 476, 478, 489, 496, 497, 501, 502, 503, 504, 512, 513, 514, 516, 517, 523, 527], "start": [435, 436, 438, 439, 456, 458, 459, 461, 462, 463, 464, 468, 469, 474, 476, 478, 479, 483, 489, 497, 501, 502, 503, 508, 509, 510, 512, 513, 514, 516, 517, 523, 527], "post": [435, 475, 504, 517], "static": [435, 517], "dynam": [435, 436, 517], "awar": [435, 475, 514, 517], "exampl": [435, 436, 439, 445, 456, 458, 459, 461, 462, 463, 464, 465, 466, 474, 475, 476, 477, 480, 484, 497, 498, 499, 500, 502, 507, 508, 509, 510, 512, 513, 514, 517, 519, 522, 523, 528], "note": [435, 520], "detail": 435, "problem": 435, "architectur": [436, 460, 471, 472], "search": [436, 495], "api": [436, 438, 439, 440, 445, 446, 456, 458, 459, 462, 463, 464, 469, 470, 474, 476, 478, 482, 496, 497, 504, 510, 512, 513, 514, 516, 526], "usag": [436, 484, 495, 504, 523, 525], "1": [436, 464, 467, 470, 475, 495, 502, 503, 528], "python": [436, 438, 458, 469, 474, 478, 482, 483, 490, 493, 497, 516, 526], "yaml": [436, 440, 459, 464, 468, 527], "2": [436, 464, 467, 470, 475, 495, 502, 503, 528], "onli": [436, 519], "advanc": [436, 501, 526], "custom": [436, 458, 474, 508, 525], "secur": [437, 464], "polici": [437, 525], "report": 437, "vulner": 437, "instal": [438, 461, 472, 479, 481, 488, 489, 492, 497, 502, 503], "from": [438, 440, 472, 475, 497, 502, 503], "pypi": [438, 484, 497], "select": [438, 489], "public": [438, 515], "event": [438, 515], "addit": 438, "commun": 438, "work": [439, 502, 517], "flow": [439, 517], "background": [439, 495], "ad": 439, "new": [439, 441, 490, 493, 525], "backend": [439, 517], "capabl": [439, 519], "implement": [439, 440], "onnxrtadaptor": 439, "how": [440, 441, 461, 498, 499, 500, 502], "add": [440, 503], "an": [440, 508, 509, 510], "list": [440, 465, 507, 524], "need": 440, "design": [440, 460, 505, 525], "framework": [440, 458, 459, 466, 468, 477, 516, 519, 522], "query_fw_cap": 440, "accord": [440, 441], "tune_cfg": 440, "prepar": [440, 461, 498, 499, 500, 521], "fp32": [440, 466], "graph": 440, "run": [440, 461, 496, 498, 499, 500, 501], "sampl": [440, 469], "iter": 440, "calcul": 440, "rang": 440, "type": [441, 514], "like": 441, "int4": 441, "few": 441, "line": 441, "chang": [441, 470, 494, 496, 520], "defin": [441, 464], "abil": 441, "specif": [441, 459], "invok": 441, "kernel": 441, "tune": [441, 517, 519, 522, 525], "configur": [441, 464, 468, 501, 516, 521, 527], "us": [441, 458, 474, 502, 503], "summari": [441, 498], "runtim": [443, 472, 517, 528], "mix": [450, 475, 476, 518], "precis": [450, 475, 476, 518], "refer": [457, 514, 517, 519, 522], "build": [458, 467, 474, 501, 502, 503], "file": [459, 468, 527], "user": [459, 464, 470, 516, 519, 526, 527], "workflow": [460, 505], "diagnosi": [461, 497], "featur": [461, 464, 468, 471, 484, 485, 489, 516, 517, 523, 527], "modifi": 461, "script": [461, 501], "see": 461, "do": [461, 478], "paramet": [461, 504], "descript": [461, 504, 506], "suggest": 461, "fallback": 461, "set": [461, 481, 495], "knowledg": [462, 528], "intermedi": 462, "layer": [462, 519, 522], "self": 462, "distribut": [464, 484, 525], "infer": 464, "evalu": 464, "pure": 464, "horovodrun": 464, "execut": 464, "releas": [465, 490, 493, 520], "appendix": 466, "frequent": 467, "ask": 467, "question": 467, "issu": [467, 520], "3": [467, 479, 495], "4": [467, 486, 495, 515], "quick": [469, 483], "valid": [469, 472, 522, 528], "incompat": [470, 520], "between": 470, "v1": 470, "face": [470, 509, 510], "built": [470, 472, 474], "infrastructur": 471, "linux": 472, "prerequisit": [472, 502, 503], "binari": 472, "sourc": [472, 497, 499, 500, 502, 503], "ai": 472, "kit": 472, "window": 472, "system": 472, "requir": [472, 488, 492, 498, 499, 500, 508], "hardwar": [472, 476, 528], "environ": [472, 481], "cpu": [472, 481, 528], "64": 472, "compat": 472, "processor": 472, "gpu": 472, "": [472, 496, 502], "xe": 472, "multipl": [472, 512, 528], "vendor": 472, "through": [472, 528], "softwar": [472, 476], "legal": 473, "inform": 473, "licens": 473, "citat": 473, "trademark": 473, "migrat": 475, "x": 475, "orchestr": [475, 513], "fp16": 476, "dure": [476, 518], "accuraci": [476, 498, 500, 517, 525], "driven": 476, "coder": [478, 482, 484, 495, 526], "what": [478, 496, 502], "we": 478, "offer": 478, "jupyt": [478, 479, 490, 493], "lab": [478, 479], "extens": [478, 488, 489, 492, 495, 496, 505, 528], "launcher": [478, 483], "contact": [478, 502], "aw": 479, "amazon": 479, "sagemak": 479, "For": 479, "studio": 479, "notebook": 479, "instanc": 479, "guid": [479, 526], "bigdl": 480, "nano": 480, "platform": [481, 521], "best": [481, 489], "perform": [481, 521], "mkl": 481, "openmp": 481, "jemalloc": 481, "numa": 481, "control": 481, "variabl": 481, "frequenc": 481, "govern": 481, "enabl": [482, 489, 495], "bench": 482, "superbench": 482, "argument": 483, "v0": 486, "highlight": 486, "other": 486, "changelog": [487, 491], "neural_compressor_ext_lab": [488, 490], "uninstal": [488, 492], "develop": [488, 492], "jupyterlab": 489, "Or": 489, "let": 489, "u": 489, "help": 489, "you": 489, "pre": 489, "requisit": 489, "make": [490, 493, 496, 501], "manual": [490, 493], "npm": [490, 493, 501], "autom": [490, 493], "publish": [490, 493], "conda": [490, 493], "forg": [490, 493], "neural_compressor_ext_lab_alibaba": [492, 493], "log": [494, 503, 504], "unreleas": 494, "vscode": 495, "open": [495, 500], "icon": 495, "5": 495, "welcom": 496, "your": 496, "v": 496, "folder": 496, "setup": 496, "up": 496, "straight": 496, "awai": 496, "explor": 496, "test": [496, 501], "go": 496, "further": 496, "insight": [497, 498, 499, 500], "tensor": [497, 522], "dump": [497, 499], "research": 497, "collabor": 497, "debug": [498, 500], "analyz": [498, 500, 501], "weight": [498, 499, 500, 519], "histogram": 500, "react": 501, "app": 501, "avail": 501, "eject": 501, "learn": [501, 502], "more": [501, 502], "bundl": 501, "size": 501, "web": 501, "deploy": [501, 514], "fail": 501, "minifi": 501, "solut": [502, 503, 504, 508, 509, 510], "why": 502, "doe": 502, "method": [502, 503], "pip": [502, 503], "end": [502, 508, 509, 510], "servic": [503, 505, 508, 509, 510], "submit": [503, 504, 508, 509, 510], "task": [503, 504, 506, 508, 509, 510], "stop": [503, 508, 509, 510], "inspect": 503, "manag": [503, 508, 509], "resourc": [503, 508, 509], "node": 503, "state": 503, "cluster": [503, 504], "remov": 503, "url": 504, "endpoint": 504, "task_id": 504, "websocket": 504, "screen": 504, "ping": 504, "download": [504, 508, 509], "doc": 505, "wip": 505, "oaa": 505, "definit": 505, "diagram": 505, "hug": [509, 510], "grpc": 510, "client": 511, "singl": 512, "One": 513, "shot": 513, "network": 514, "sparsiti": 514, "decai": 514, "regular": 514, "larg": 514, "languag": 514, "retrain": 514, "free": 514, "spars": 514, "hyperparamet": 514, "full": 515, "78": 515, "2023": 515, "24": 515, "2022": 515, "35": 515, "2021": 515, "15": [515, 528], "2018": 515, "2020": 515, "style": 516, "access": 516, "fundament": [517, 522], "scheme": 517, "ipex": 517, "approach": 517, "With": 517, "without": 517, "specifi": 517, "rule": 517, "recip": 517, "devic": 517, "turn": 518, "off": 518, "woq": [519, 528], "wise": [519, 522], "known": 520, "benefit": 521, "comparison": 521, "differ": 521, "smooth": 522, "quant": 522, "per": 522, "channel": 522, "limit": 522, "smoothquant": 522, "enhanc": 522, "alpha": 522, "engin": 522, "tensorboard": 523, "space": 525, "exit": 525, "process": 525, "zero": 526, "topic": 526, "innov": 526, "product": 526, "13": 528, "0": 528, "ptq": 528}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [183, "module-contents"], [184, "module-contents"], [186, "module-contents"], [188, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [369, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [421, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [156, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [173, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [183, "classes"], [184, "classes"], [186, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [214, "classes"], [215, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [257, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [265, "classes"], [266, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [299, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [326, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [349, "classes"], [352, "classes"], [355, "classes"], [356, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [369, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [414, "classes"], [418, "classes"], [419, "classes"], [422, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [427, "classes"], [429, "classes"], [430, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [157, "functions"], [158, "functions"], [159, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [166, "functions"], [167, "functions"], [169, "functions"], [172, "functions"], [173, "functions"], [177, "functions"], [179, "functions"], [180, "functions"], [183, "functions"], [184, "functions"], [186, "functions"], [187, "functions"], [188, "functions"], [190, "functions"], [192, "functions"], [193, "functions"], [197, "functions"], [200, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [210, "functions"], [212, "functions"], [221, "functions"], [222, "functions"], [230, "functions"], [232, "functions"], [236, "functions"], [239, "functions"], [240, "functions"], [241, "functions"], [244, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [253, "functions"], [254, "functions"], [256, "functions"], [265, "functions"], [273, "functions"], [275, "functions"], [279, "functions"], [282, "functions"], [283, "functions"], [284, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [291, "functions"], [292, "functions"], [293, "functions"], [296, "functions"], [297, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [310, "functions"], [317, "functions"], [321, "functions"], [326, "functions"], [327, "functions"], [328, "functions"], [330, "functions"], [335, "functions"], [341, "functions"], [345, "functions"], [347, "functions"], [349, "functions"], [350, "functions"], [352, "functions"], [353, "functions"], [354, "functions"], [355, "functions"], [356, "functions"], [357, "functions"], [361, "functions"], [365, "functions"], [367, "functions"], [384, "functions"], [389, "functions"], [390, "functions"], [394, "functions"], [402, "functions"], [406, "functions"], [408, "functions"], [409, "functions"], [414, "functions"], [416, "functions"], [417, "functions"], [418, "functions"], [421, "functions"], [422, "functions"], [424, "functions"], [425, "functions"], [426, "functions"], [428, "functions"], [429, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [153, "subpackages"], [185, "subpackages"], [187, "subpackages"], [216, "subpackages"], [241, "subpackages"], [259, "subpackages"], [284, "subpackages"], [295, "subpackages"], [319, "subpackages"], [337, "subpackages"], [348, "subpackages"], [398, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [153, "submodules"], [154, "submodules"], [169, "submodules"], [178, "submodules"], [181, "submodules"], [185, "submodules"], [187, "submodules"], [189, "submodules"], [193, "submodules"], [200, "submodules"], [213, "submodules"], [217, "submodules"], [224, "submodules"], [236, "submodules"], [240, "submodules"], [244, "submodules"], [251, "submodules"], [260, "submodules"], [267, "submodules"], [279, "submodules"], [283, "submodules"], [286, "submodules"], [290, "submodules"], [295, "submodules"], [302, "submodules"], [308, "submodules"], [314, "submodules"], [320, "submodules"], [324, "submodules"], [337, "submodules"], [343, "submodules"], [348, "submodules"], [355, "submodules"], [359, "submodules"], [370, "submodules"], [372, "submodules"], [377, "submodules"], [380, "submodules"], [382, "submodules"], [387, "submodules"], [398, "submodules"], [404, "submodules"], [410, "submodules"], [422, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [169, "package-contents"], [187, "package-contents"], [193, "package-contents"], [200, "package-contents"], [224, "package-contents"], [236, "package-contents"], [240, "package-contents"], [241, "package-contents"], [244, "package-contents"], [251, "package-contents"], [267, "package-contents"], [279, "package-contents"], [283, "package-contents"], [284, "package-contents"], [286, "package-contents"], [295, "package-contents"], [302, "package-contents"], [314, "package-contents"], [319, "package-contents"], [320, "package-contents"], [337, "package-contents"], [355, "package-contents"], [359, "package-contents"], [398, "package-contents"], [422, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[165, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[173, "module-neural_compressor.common.base_config"]], "neural_compressor.common": [[174, "module-neural_compressor.common"]], "neural_compressor.common.utility": [[175, "module-neural_compressor.common.utility"]], "neural_compressor.compression.callbacks": [[176, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[177, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[178, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[179, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[180, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[181, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[182, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[183, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[184, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[185, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[186, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[187, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[188, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[189, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[190, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[191, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[192, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[193, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[194, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[195, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[196, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[197, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[198, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[199, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[200, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[201, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[202, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[203, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[204, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[205, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[206, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[207, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[208, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[209, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[210, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[211, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[212, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[213, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[214, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[215, "module-neural_compressor.config"]], "neural_compressor.contrib": [[216, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[217, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[218, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[219, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[220, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[221, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[222, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[223, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[224, "module-neural_compressor.data.dataloaders"]], "Attributes": [[224, "attributes"], [232, "attributes"], [241, "attributes"], [275, "attributes"], [284, "attributes"], [295, "attributes"], [319, "attributes"], [359, "attributes"], [409, "attributes"], [422, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[225, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[226, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[227, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[228, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[229, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[230, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[231, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[232, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[233, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[234, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[235, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[236, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[237, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[238, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[239, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[240, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[241, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[242, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[243, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[244, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[245, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[246, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[247, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[248, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[249, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[250, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[251, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[252, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[253, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[254, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[255, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[256, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[257, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[258, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[259, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[260, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[261, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[262, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[266, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[267, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[268, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[271, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[272, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[273, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[274, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[275, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[276, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[277, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[278, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[279, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[280, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[281, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[282, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[283, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[284, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[285, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[286, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[287, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[288, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[289, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[290, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[291, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[292, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[293, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[294, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[295, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[296, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[297, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[298, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[299, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[300, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[301, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[302, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[303, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[304, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[305, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[306, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[307, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[308, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[309, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[310, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[311, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[312, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[313, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[314, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[315, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[316, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[317, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[318, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[319, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[320, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[321, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[322, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[323, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[324, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[325, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[326, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[327, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[328, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[329, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[330, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[331, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[332, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[333, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[334, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[335, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[336, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[337, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[338, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[339, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[340, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[341, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[342, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[343, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[344, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[345, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[346, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[347, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[348, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[349, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[350, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[351, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[352, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[353, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[354, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[355, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[356, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[357, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[358, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[359, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[360, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[361, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[362, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[363, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[364, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[365, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[366, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[367, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[368, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[369, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[370, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[371, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[372, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[373, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[374, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[375, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[376, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[377, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[378, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[379, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[380, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[381, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[382, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[383, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[384, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[385, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[386, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[387, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[388, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[389, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[390, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[391, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[392, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[393, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[394, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[395, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[396, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[397, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[398, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[399, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[400, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[401, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[402, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[403, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[404, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[405, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[406, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[407, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[408, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[409, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[410, "module-neural_compressor.template"]], "neural_compressor.torch.algorithms": [[411, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.rtn_quantize": [[412, "module-neural_compressor.torch.algorithms.rtn_quantize"]], "neural_compressor.torch": [[413, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.config": [[414, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[415, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.quantize": [[416, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils": [[417, "module-neural_compressor.torch.utils"]], "neural_compressor.training": [[418, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[419, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[420, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[421, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[422, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[423, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[424, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[425, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[426, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[427, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[428, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[429, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[430, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[431, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[432, "intel-neural-compressor-documentation"], [529, "intel-neural-compressor-documentation"]], "Sections": [[432, "sections"], [529, "sections"]], "Contributor Covenant Code of Conduct": [[433, "contributor-covenant-code-of-conduct"], [434, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[433, "our-pledge"]], "Our Standards": [[433, "our-standards"]], "Our Responsibilities": [[433, "our-responsibilities"]], "Scope": [[433, "scope"]], "Enforcement": [[433, "enforcement"]], "Attribution": [[433, "attribution"]], "Contribution Guidelines": [[434, "contribution-guidelines"]], "Create Pull Request": [[434, "create-pull-request"]], "Step-by-Step guidelines": [[434, "step-by-step-guidelines"]], "Pull Request Checklist": [[434, "pull-request-checklist"]], "Pull Request Template": [[434, "pull-request-template"]], "Pull Request Acceptance Criteria": [[434, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[434, "pull-request-status-checks-overview"]], "Support": [[434, "support"]], "FX": [[435, "fx"]], "Introduction": [[435, "introduction"], [436, "introduction"], [439, "introduction"], [440, "introduction"], [441, "introduction"], [456, "introduction"], [457, "introduction"], [458, "introduction"], [459, "introduction"], [462, "introduction"], [463, "introduction"], [464, "introduction"], [466, "introduction"], [468, "introduction"], [471, "introduction"], [474, "introduction"], [476, "introduction"], [477, "introduction"], [498, "introduction"], [499, "introduction"], [500, "introduction"], [512, "introduction"], [513, "introduction"], [514, "introduction"], [516, "introduction"], [519, "introduction"], [521, "introduction"], [522, "introduction"], [523, "introduction"], [524, "introduction"], [525, "introduction"], [527, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[435, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[435, "get-started"], [461, "get-started"], [502, "get-started"], [517, "get-started"]], "Post Training Static Quantization": [[435, "post-training-static-quantization"], [517, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[435, "post-training-dynamic-quantization"], [517, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[435, "quantization-aware-training"]], "Examples": [[435, "examples"], [436, "examples"], [456, "examples"], [458, "examples"], [459, "examples"], [462, "examples"], [463, "examples"], [464, "examples"], [465, "examples"], [466, "examples"], [475, "examples"], [476, "examples"], [477, "examples"], [513, "examples"], [514, "examples"], [517, "examples"], [519, "examples"], [523, "examples"]], "Note": [[435, "note"]], "Details": [[435, "details"]], "Common Problem": [[435, "common-problem"]], "Dynamic Quantization": [[435, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[435, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[436, "neural-architecture-search"]], "Basic NAS": [[436, "basic-nas"]], "Dynamic NAS": [[436, "dynamic-nas"]], "NAS Support Matrix": [[436, "nas-support-matrix"]], "Get Started with NAS API": [[436, "get-started-with-nas-api"]], "Basic Usage": [[436, "basic-usage"]], "1. Python code + YAML": [[436, "python-code-yaml"]], "2. Python code only": [[436, "python-code-only"]], "Advanced Usage (Custom NAS)": [[436, "advanced-usage-custom-nas"]], "Security Policy": [[437, "security-policy"]], "Report a Vulnerability": [[437, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[438, "intel-neural-compressor"], [495, "intel-neural-compressor"]], "Installation": [[438, "installation"], [472, "installation"], [489, "installation"], [497, "installation"], [502, "installation"]], "Install from pypi": [[438, "install-from-pypi"], [497, "install-from-pypi"]], "Getting Started": [[438, "getting-started"], [469, "getting-started"], [497, "getting-started"]], "Quantization with Python API": [[438, "quantization-with-python-api"], [469, "quantization-with-python-api"], [497, "quantization-with-python-api"]], "Documentation": [[438, "documentation"]], "Selected Publications/Events": [[438, "selected-publications-events"]], "Additional Content": [[438, "additional-content"]], "Communication": [[438, "communication"]], "Adaptor": [[439, "adaptor"], [442, "adaptor"]], "Adaptor Support Matrix": [[439, "adaptor-support-matrix"]], "Working Flow": [[439, "working-flow"], [517, "working-flow"]], "Get Started with Adaptor API": [[439, "get-started-with-adaptor-api"]], "Query API": [[439, "query-api"]], "Background": [[439, "background"]], "Query API Introduction": [[439, "query-api-introduction"]], "Example of Adding a New Backend Support": [[439, "example-of-adding-a-new-backend-support"]], "Capability": [[439, "capability"]], "Implement ONNXRTAdaptor Class": [[439, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[440, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[440, "api-list-that-need-to-implement"]], "Design the framework YAML": [[440, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[440, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[440, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[440, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[440, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[440, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[441, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[441, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[441, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[441, "use-the-new-data-type"]], "Summary": [[441, "summary"]], "ONNX Runtime": [[443, "onnx-runtime"]], "Torch Utils": [[444, "torch-utils"]], "API Document Example": [[445, "api-document-example"]], "APIs": [[446, "apis"]], "Benchmark": [[447, "benchmark"], [475, "benchmark"], [516, "benchmark"]], "Compression": [[448, "compression"]], "Config": [[449, "config"]], "Mix Precision": [[450, "mix-precision"], [475, "mix-precision"]], "Model": [[451, "model"], [477, "model"], [498, "model"], [500, "model"]], "Objective": [[452, "objective"], [508, "objective"], [509, "objective"], [510, "objective"], [512, "objective"]], "Quantization": [[453, "quantization"], [516, "quantization"], [517, "quantization"]], "Strategy": [[454, "strategy"]], "Training": [[455, "training"]], "Benchmarking": [[456, "benchmarking"]], "Benchmark Support Matrix": [[456, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[456, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[457, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[457, "calibration-algorithms"]], "Support Matrix": [[457, "support-matrix"], [480, "support-matrix"]], "Reference": [[457, "reference"], [514, "reference"], [517, "reference"], [519, "reference"], [522, "reference"]], "DataLoader": [[458, "dataloader"]], "Supported Framework Dataloader Matrix": [[458, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[458, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[458, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[458, "build-custom-dataloader-with-python-api"]], "Dataset": [[459, "dataset"]], "Supported Framework Dataset Matrix": [[459, "supported-framework-dataset-matrix"]], "TensorFlow": [[459, "tensorflow"], [474, "tensorflow"], [524, "tensorflow"]], "PyTorch": [[459, "pytorch"], [474, "pytorch"], [518, "pytorch"]], "MXNet": [[459, "mxnet"], [474, "mxnet"], [524, "mxnet"]], "ONNXRT": [[459, "onnxrt"], [474, "onnxrt"], [524, "onnxrt"]], "Get start with Dataset API": [[459, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[459, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[459, "user-specific-dataset"]], "Design": [[460, "design"], [525, "design"], [525, "id1"], [525, "id3"], [525, "id5"], [525, "id7"], [525, "id9"], [525, "id11"], [525, "id13"], [525, "id15"], [525, "id17"], [525, "id19"], [525, "id21"]], "Architecture": [[460, "architecture"], [471, "architecture"]], "Workflow": [[460, "workflow"]], "Diagnosis": [[461, "diagnosis"]], "Diagnosis Introduction": [[461, "diagnosis-introduction"]], "Supported Feature Matrix": [[461, "supported-feature-matrix"], [464, "supported-feature-matrix"], [468, "supported-feature-matrix"], [471, "supported-feature-matrix"], [516, "supported-feature-matrix"], [517, "supported-feature-matrix"], [523, "supported-feature-matrix"], [527, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[461, "install-intel-neural-compressor"]], "Modify script": [[461, "modify-script"]], "Quantization diagnosis": [[461, "quantization-diagnosis"]], "Benchmark diagnosis": [[461, "benchmark-diagnosis"]], "Example": [[461, "example"], [474, "example"], [480, "example"], [484, "example"], [512, "example"], [519, "example"], [522, "example"]], "Prepare dataset": [[461, "prepare-dataset"]], "Run quantization script": [[461, "run-quantization-script"]], "Run benchmark script": [[461, "run-benchmark-script"]], "See quantization data": [[461, "see-quantization-data"]], "How to do diagnosis": [[461, "how-to-do-diagnosis"]], "Parameter description": [[461, "parameter-description"]], "Diagnosis suggestions": [[461, "diagnosis-suggestions"]], "Fallback setting example": [[461, "fallback-setting-example"]], "See profiling data": [[461, "see-profiling-data"]], "Distillation": [[462, "distillation"], [475, "distillation"], [516, "distillation"]], "Knowledge Distillation": [[462, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[462, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[462, "self-distillation"]], "Distillation Support Matrix": [[462, "distillation-support-matrix"]], "Get Started with Distillation API": [[462, "get-started-with-distillation-api"]], "Distillation for Quantization": [[463, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[463, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[463, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[464, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[464, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[464, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[464, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[464, "horovodrun-execution"]], "Security": [[464, "security"]], "PyTorch Examples:": [[464, "pytorch-examples"]], "TensorFlow Examples:": [[464, "tensorflow-examples"]], "Example List": [[465, "example-list"]], "Release Data": [[465, "release-data"]], "Export": [[466, "export"]], "Supported Framework Model Matrix": [[466, "supported-framework-model-matrix"], [477, "supported-framework-model-matrix"], [519, "supported-framework-model-matrix"]], "PyTorch Model": [[466, "pytorch-model"]], "FP32 Model Export": [[466, "fp32-model-export"], [466, "id1"]], "INT8 Model Export": [[466, "int8-model-export"], [466, "id2"]], "Tensorflow Model": [[466, "tensorflow-model"]], "Appendix": [[466, "appendix"]], "Supported quantized ops": [[466, "supported-quantized-ops"]], "Frequently Asked Questions": [[467, "frequently-asked-questions"]], "Common Build Issues": [[467, "common-build-issues"]], "Issue 1:": [[467, "issue-1"]], "Issue 2:": [[467, "issue-2"]], "Issue 3:": [[467, "issue-3"]], "Issue 4:": [[467, "issue-4"]], "Framework YAML Configuration Files": [[468, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[468, "get-started-with-framework-yaml-files"]], "Quick Samples": [[469, "quick-samples"]], "Validated Models": [[469, "validated-models"], [522, "validated-models"], [528, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[470, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[470, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[470, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[471, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[472, "linux-installation"]], "Prerequisites": [[472, "prerequisites"], [472, "id1"], [502, "prerequisites"], [503, "prerequisites"]], "Install from Binary": [[472, "install-from-binary"], [472, "id2"]], "Install from Source": [[472, "install-from-source"], [472, "id3"], [497, "install-from-source"]], "Install from AI Kit": [[472, "install-from-ai-kit"]], "Windows Installation": [[472, "windows-installation"]], "System Requirements": [[472, "system-requirements"]], "Validated Hardware Environment": [[472, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[472, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[472, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[472, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[472, "validated-software-environment"]], "Legal Information": [[473, "legal-information"]], "License": [[473, "license"]], "Citation": [[473, "citation"]], "Trademarks": [[473, "trademarks"]], "Metrics": [[474, "metrics"]], "Supported Built-in Metric Matrix": [[474, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[474, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[474, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[474, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[475, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[475, "model-quantization"]], "Post-training Quantization": [[475, "post-training-quantization"]], "Quantization Aware Training": [[475, "quantization-aware-training"], [517, "quantization-aware-training"], [517, "id1"]], "Pruning": [[475, "pruning"], [514, "pruning"], [516, "pruning"]], "Orchestration": [[475, "orchestration"]], "Mixed Precision": [[476, "mixed-precision"]], "Mixed Precision Support Matrix": [[476, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[476, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[476, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[476, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[476, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[476, "get-started-with-mixed-precision-api"]], "Neural Coder": [[478, "neural-coder"], [495, "neural-coder"], [495, "id1"]], "What do we offer?": [[478, "what-do-we-offer"]], "Getting Started!": [[478, "getting-started"], [489, "getting-started"]], "Jupyter Lab Extension": [[478, "jupyter-lab-extension"]], "Python Launcher": [[478, "python-launcher"], [483, "python-launcher"]], "Python API": [[478, "python-api"]], "Contact": [[478, "contact"], [502, "contact"]], "AWS Amazon SageMaker Support": [[479, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[479, "start-jupyter-lab-3"]], "For SageMaker Studio": [[479, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[479, "for-sagemaker-notebook-instance"]], "Installation Guide": [[479, "installation-guide"]], "BigDL Nano Support": [[480, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[481, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[481, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[481, "install-numa-controller"]], "Environment Variables": [[481, "environment-variables"]], "Frequency Governers": [[481, "frequency-governers"]], "Neural Coder as Python API": [[482, "neural-coder-as-python-api"]], "Enable": [[482, "enable"]], "Bench": [[482, "bench"]], "SuperBench": [[482, "superbench"]], "Quick-Start": [[483, "quick-start"]], "Launcher Arguments (Optional)": [[483, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[484, "neural-coder-for-quantization"]], "Features Supported": [[484, "features-supported"]], "Models Supported": [[484, "models-supported"]], "Usage": [[484, "usage"], [504, "usage"], [504, "id2"], [504, "id6"], [504, "id9"], [504, "id16"], [504, "id19"], [504, "id22"], [504, "id25"], [523, "usage"], [523, "id1"], [525, "usage"], [525, "id2"], [525, "id4"], [525, "id6"], [525, "id8"], [525, "id10"], [525, "id12"], [525, "id14"], [525, "id16"], [525, "id18"], [525, "id20"], [525, "id22"]], "PyPI distribution:": [[484, "pypi-distribution"]], "Supported Optimization Features": [[485, "supported-optimization-features"]], "v0.4": [[486, "v0-4"]], "Highlights": [[486, "highlights"]], "Others": [[486, "others"]], "Changelog": [[487, "changelog"], [491, "changelog"]], "neural_compressor_ext_lab": [[488, "neural-compressor-ext-lab"]], "Requirements": [[488, "requirements"], [492, "requirements"], [498, "requirements"], [499, "requirements"], [500, "requirements"], [508, "requirements"]], "Install": [[488, "install"], [492, "install"]], "Uninstall": [[488, "uninstall"], [492, "uninstall"]], "Contributing": [[488, "contributing"], [492, "contributing"]], "Development install": [[488, "development-install"], [492, "development-install"]], "Development uninstall": [[488, "development-uninstall"], [492, "development-uninstall"]], "Packaging the extension": [[488, "packaging-the-extension"], [492, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[489, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[489, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[489, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[489, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[490, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[490, "manual-release"], [493, "manual-release"]], "Python package": [[490, "python-package"], [493, "python-package"]], "NPM package": [[490, "npm-package"], [493, "npm-package"]], "Automated releases with the Jupyter Releaser": [[490, "automated-releases-with-the-jupyter-releaser"], [493, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[490, "publishing-to-conda-forge"], [493, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[492, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[493, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[494, "change-log"]], "[Unreleased]": [[494, "unreleased"]], "Background Introduction": [[495, "background-introduction"]], "Neural Coder Extension in VSCode": [[495, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[495, "neural-coder-extension-usage"]], "1. Open": [[495, "open"]], "2. Search": [[495, "search"]], "3. Setting": [[495, "setting"]], "4. Icon": [[495, "icon"]], "5. optimization (quantization)": [[495, "optimization-quantization"]], "5.1 Enable": [[495, "enable"]], "5.2 Auto": [[495, "auto"]], "Welcome to your VS Code Extension": [[496, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[496, "what-s-in-the-folder"]], "Setup": [[496, "setup"]], "Get up and running straight away": [[496, "get-up-and-running-straight-away"]], "Make changes": [[496, "make-changes"]], "Explore the API": [[496, "explore-the-api"]], "Run tests": [[496, "run-tests"]], "Go further": [[496, "go-further"]], "Neural Insights": [[497, "neural-insights"]], "Start the Neural Insights": [[497, "start-the-neural-insights"]], "Tensor dump examples": [[497, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[497, "step-by-step-diagnosis-example"]], "Research Collaborations": [[497, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[498, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [500, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[498, "preparation"], [499, "preparation"], [500, "preparation"], [521, "preparation"]], "Running the quantization": [[498, "running-the-quantization"], [499, "running-the-quantization"], [500, "running-the-quantization"]], "Analyzing the result of quantization": [[498, "analyzing-the-result-of-quantization"], [500, "analyzing-the-result-of-quantization"]], "Weights summary": [[498, "weights-summary"]], "Activations summary": [[498, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[499, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[499, "source"], [500, "source"]], "Prepare the dataset": [[500, "prepare-the-dataset"]], "Analyzing weight histograms": [[500, "analyzing-weight-histograms"]], "Open Neural Insights": [[500, "open-neural-insights"]], "Getting Started with Create React App": [[501, "getting-started-with-create-react-app"]], "Available Scripts": [[501, "available-scripts"]], "npm start": [[501, "npm-start"]], "npm test": [[501, "npm-test"]], "npm run build": [[501, "npm-run-build"]], "npm run eject": [[501, "npm-run-eject"]], "Learn More": [[501, "learn-more"], [502, "learn-more"]], "Code Splitting": [[501, "code-splitting"]], "Analyzing the Bundle Size": [[501, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[501, "making-a-progressive-web-app"]], "Advanced Configuration": [[501, "advanced-configuration"]], "Deployment": [[501, "deployment"]], "npm run build fails to minify": [[501, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[502, "what-s-neural-solution"]], "Why Neural Solution?": [[502, "why-neural-solution"]], "How does Neural Solution Work?": [[502, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[502, "method-1-using-pip"]], "Method 2. Building from source:": [[502, "method-2-building-from-source"]], "End-to-end examples": [[502, "end-to-end-examples"]], "Get started": [[503, "get-started"]], "Install Neural Solution": [[503, "install-neural-solution"]], "Method 1. Using pip": [[503, "method-1-using-pip"]], "Method 2. Building from source": [[503, "method-2-building-from-source"]], "Start service": [[503, "start-service"]], "Submit task": [[503, "submit-task"]], "Query task status": [[503, "query-task-status"]], "Stop service": [[503, "stop-service"]], "Inspect logs": [[503, "inspect-logs"]], "Manage resource": [[503, "manage-resource"], [508, "manage-resource"], [509, "manage-resource"]], "Node States": [[503, "node-states"]], "Query cluster": [[503, "query-cluster"]], "Add node": [[503, "add-node"]], "Remove node": [[503, "remove-node"]], "Neural Solution API": [[504, "neural-solution-api"]], "Base URL": [[504, "base-url"]], "Endpoints": [[504, "endpoints"]], "GET /": [[504, "get"]], "Description": [[504, "description"], [504, "id1"], [504, "id4"], [504, "id8"], [504, "id12"], [504, "id15"], [504, "id18"], [504, "id21"], [504, "id24"]], "Responses": [[504, "responses"], [504, "id3"], [504, "id7"], [504, "id11"], [504, "id14"], [504, "id17"], [504, "id20"], [504, "id23"], [504, "id26"]], "POST /task/submit": [[504, "post-task-submit"]], "Parameters": [[504, "parameters"], [504, "id5"], [504, "id10"], [504, "id13"]], "GET /task/status/{task_id}": [[504, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[504, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[504, "websocket-task-screen-task-id"]], "GET /ping": [[504, "get-ping"]], "GET /cluster": [[504, "get-cluster"]], "GET /download/{task_id}": [[504, "get-download-task-id"]], "GET /description": [[504, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[505, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[505, "contents"]], "Overview": [[505, "overview"], [526, "overview"]], "Workflow of OaaS": [[505, "workflow-of-oaas"]], "Class definition diagram": [[505, "class-definition-diagram"]], "Extensibility": [[505, "extensibility"]], "Task request description": [[506, "task-request-description"]], "Examples List": [[507, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[508, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[508, "start-the-neural-solution-service"], [509, "start-the-neural-solution-service"], [510, "start-the-neural-solution-service"]], "Submit optimization task": [[508, "submit-optimization-task"], [509, "submit-optimization-task"], [510, "submit-optimization-task"]], "Query optimization result": [[508, "query-optimization-result"], [509, "query-optimization-result"], [510, "query-optimization-result"]], "Download optimized model": [[508, "download-optimized-model"], [509, "download-optimized-model"]], "Stop the service": [[508, "stop-the-service"], [509, "stop-the-service"], [510, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[509, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[510, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[511, "client"]], "Single Objective": [[512, "single-objective"]], "Multiple Objectives": [[512, "multiple-objectives"]], "Objective Support Matrix": [[512, "objective-support-matrix"]], "Get Started with Objective API": [[512, "get-started-with-objective-api"]], "Config Single Objective": [[512, "config-single-objective"]], "Config Multiple Objectives": [[512, "config-multiple-objectives"]], "Optimization Orchestration": [[513, "optimization-orchestration"]], "One-shot": [[513, "one-shot"]], "Orchestration Support Matrix": [[513, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[513, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[514, "neural-network-pruning"]], "Pruning Patterns": [[514, "pruning-patterns"]], "Pruning Criteria": [[514, "pruning-criteria"]], "Pruning Types": [[514, "pruning-types"]], "Pruning Schedules": [[514, "pruning-schedules"]], "Pruning Scope": [[514, "pruning-scope"]], "Sparsity Decay Types": [[514, "sparsity-decay-types"]], "Regularization": [[514, "regularization"]], "Large Language Model Pruning": [[514, "large-language-model-pruning"]], "Pruning Support Matrix": [[514, "pruning-support-matrix"]], "Get Started with Pruning API": [[514, "get-started-with-pruning-api"]], "Training-aware pruning API": [[514, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[514, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[514, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[514, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[515, "full-publications-events-78"]], "2023 (24)": [[515, "id1"]], "2022 (35)": [[515, "id2"]], "2021 (15)": [[515, "id3"]], "2018 - 2020 (4)": [[515, "id4"]], "Pythonic Style Access for Configurations": [[516, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[516, "pythonic-api-for-user-configurations"], [516, "id1"]], "Pythonic API for Framework Configurations": [[516, "pythonic-api-for-framework-configurations"], [516, "id2"]], "Get Started with Pythonic API for Configurations": [[516, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[516, "nas"]], "Quantization Introduction": [[517, "quantization-introduction"]], "Quantization Fundamentals": [[517, "quantization-fundamentals"], [522, "quantization-fundamentals"]], "Quantization Support Matrix": [[517, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[517, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[517, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[517, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[517, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[517, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[517, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[517, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[517, "post-training-quantization"]], "Specify Quantization Rules": [[517, "specify-quantization-rules"]], "Specify Quantization Recipes": [[517, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[517, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[518, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[518, "tensorflow"]], "Weight Only Quantization (WOQ)": [[519, "weight-only-quantization-woq"]], "Quantization Capability": [[519, "quantization-capability"]], "Export Compressed Model": [[519, "export-compressed-model"]], "User Code Example": [[519, "user-code-example"]], "WOQ algorithms tuning": [[519, "woq-algorithms-tuning"]], "Layer Wise Quantization": [[519, "layer-wise-quantization"]], "Supported Matrix": [[519, "supported-matrix"]], "Release": [[520, "release"]], "Release Notes": [[520, "release-notes"]], "Known Issues": [[520, "known-issues"]], "Incompatible Changes": [[520, "incompatible-changes"]], "SigOpt Strategy": [[521, "sigopt-strategy"]], "SigOpt Platform": [[521, "sigopt-platform"]], "Neural Compressor Configuration": [[521, "neural-compressor-configuration"]], "Performance": [[521, "performance"]], "Benefit of SigOpt Strategy": [[521, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[521, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[522, "smooth-quant"]], "Per-tensor & Per-channel": [[522, "per-tensor-per-channel"]], "Per-tensor example": [[522, "per-tensor-example"]], "Per-channel example": [[522, "per-channel-example"]], "Matmul quantization example": [[522, "matmul-quantization-example"]], "Per-channel limitation": [[522, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[522, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[522, "smoothquant"]], "Our enhancement:": [[522, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[522, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[522, "engineering"]], "Supported Framework Matrix": [[522, "supported-framework-matrix"]], "TensorBoard": [[523, "tensorboard"]], "Get Started with TensorBoard": [[523, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[523, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[523, "tensorflow-tensorboard"]], "PyTorch Examples": [[523, "pytorch-examples"]], "TensorFlow Examples": [[523, "tensorflow-examples"]], "Transform": [[524, "transform"]], "Transform Support List": [[524, "transform-support-list"]], "Pytorch": [[524, "pytorch"]], "Tuning Strategies": [[525, "tuning-strategies"]], "Strategy Design": [[525, "strategy-design"]], "Tuning Space": [[525, "tuning-space"]], "Exit Policy": [[525, "exit-policy"]], "Accuracy Criteria": [[525, "accuracy-criteria"]], "Tuning Process": [[525, "tuning-process"]], "Tuning Algorithms": [[525, "tuning-algorithms"]], "Auto": [[525, "auto"]], "Conservative Tuning": [[525, "conservative-tuning"]], "Basic": [[525, "basic"]], "MSE": [[525, "mse"]], "MSE_V2": [[525, "mse-v2"]], "HAWQ_V2": [[525, "hawq-v2"]], "Bayesian": [[525, "bayesian"]], "Exhaustive": [[525, "exhaustive"]], "Random": [[525, "random"]], "SigOpt": [[525, "sigopt"]], "TPE": [[525, "tpe"]], "Distributed Tuning": [[525, "distributed-tuning"]], "Customize a New Tuning Strategy": [[525, "customize-a-new-tuning-strategy"]], "User Guide": [[526, "user-guide"]], "Python-based APIs": [[526, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[526, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[526, "advanced-topics"]], "Innovations for Productivity": [[526, "innovations-for-productivity"]], "User YAML Configuration Files": [[527, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[527, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[528, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[528, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[528, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[528, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[528, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[528, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[528, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[528, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[528, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[528, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[528, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.awq"], [150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [151, "module-neural_compressor.adaptor.torch_utils.gptq"], [152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [153, "module-neural_compressor.adaptor.torch_utils"], [154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [164, "module-neural_compressor.adaptor.torch_utils.teq"], [165, "module-neural_compressor.adaptor.torch_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.weight_only"], [167, "module-neural_compressor.algorithm.algorithm"], [168, "module-neural_compressor.algorithm.fast_bias_correction"], [169, "module-neural_compressor.algorithm"], [170, "module-neural_compressor.algorithm.smooth_quant"], [171, "module-neural_compressor.algorithm.weight_correction"], [172, "module-neural_compressor.benchmark"], [173, "module-neural_compressor.common.base_config"], [174, "module-neural_compressor.common"], [175, "module-neural_compressor.common.utility"], [176, "module-neural_compressor.compression.callbacks"], [177, "module-neural_compressor.compression.distillation.criterions"], [178, "module-neural_compressor.compression.distillation"], [179, "module-neural_compressor.compression.distillation.optimizers"], [180, "module-neural_compressor.compression.distillation.utility"], [181, "module-neural_compressor.compression.hpo"], [182, "module-neural_compressor.compression.hpo.sa_optimizer"], [183, "module-neural_compressor.compression.hpo.search_algorithms"], [184, "module-neural_compressor.compression.hpo.search_space"], [185, "module-neural_compressor.compression"], [186, "module-neural_compressor.compression.pruner.criteria"], [187, "module-neural_compressor.compression.pruner"], [188, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [189, "module-neural_compressor.compression.pruner.model_slim"], [190, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [191, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [192, "module-neural_compressor.compression.pruner.patterns.base"], [193, "module-neural_compressor.compression.pruner.patterns"], [194, "module-neural_compressor.compression.pruner.patterns.mha"], [195, "module-neural_compressor.compression.pruner.patterns.ninm"], [196, "module-neural_compressor.compression.pruner.patterns.nxm"], [197, "module-neural_compressor.compression.pruner.pruners.base"], [198, "module-neural_compressor.compression.pruner.pruners.basic"], [199, "module-neural_compressor.compression.pruner.pruners.block_mask"], [200, "module-neural_compressor.compression.pruner.pruners"], [201, "module-neural_compressor.compression.pruner.pruners.mha"], [202, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [203, "module-neural_compressor.compression.pruner.pruners.progressive"], [204, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [205, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [206, "module-neural_compressor.compression.pruner.pruning"], [207, "module-neural_compressor.compression.pruner.regs"], [208, "module-neural_compressor.compression.pruner.schedulers"], [209, "module-neural_compressor.compression.pruner.tf_criteria"], [210, "module-neural_compressor.compression.pruner.utils"], [211, "module-neural_compressor.conf.config"], [212, "module-neural_compressor.conf.dotdict"], [213, "module-neural_compressor.conf"], [214, "module-neural_compressor.conf.pythonic_config"], [215, "module-neural_compressor.config"], [216, "module-neural_compressor.contrib"], [217, "module-neural_compressor.contrib.strategy"], [218, "module-neural_compressor.contrib.strategy.sigopt"], [219, "module-neural_compressor.contrib.strategy.tpe"], [220, "module-neural_compressor.data.dataloaders.base_dataloader"], [221, "module-neural_compressor.data.dataloaders.dataloader"], [222, "module-neural_compressor.data.dataloaders.default_dataloader"], [223, "module-neural_compressor.data.dataloaders.fetcher"], [224, "module-neural_compressor.data.dataloaders"], [225, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [226, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [227, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [228, "module-neural_compressor.data.dataloaders.sampler"], [229, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [230, "module-neural_compressor.data.datasets.bert_dataset"], [231, "module-neural_compressor.data.datasets.coco_dataset"], [232, "module-neural_compressor.data.datasets.dataset"], [233, "module-neural_compressor.data.datasets.dummy_dataset"], [234, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [235, "module-neural_compressor.data.datasets.imagenet_dataset"], [236, "module-neural_compressor.data.datasets"], [237, "module-neural_compressor.data.datasets.style_transfer_dataset"], [238, "module-neural_compressor.data.filters.coco_filter"], [239, "module-neural_compressor.data.filters.filter"], [240, "module-neural_compressor.data.filters"], [241, "module-neural_compressor.data"], [242, "module-neural_compressor.data.transforms.coco_transform"], [243, "module-neural_compressor.data.transforms.imagenet_transform"], [244, "module-neural_compressor.data.transforms"], [245, "module-neural_compressor.data.transforms.postprocess"], [246, "module-neural_compressor.data.transforms.tokenization"], [247, "module-neural_compressor.data.transforms.transform"], [248, "module-neural_compressor.experimental.benchmark"], [249, "module-neural_compressor.experimental.common.criterion"], [250, "module-neural_compressor.experimental.common.dataloader"], [251, "module-neural_compressor.experimental.common"], [252, "module-neural_compressor.experimental.common.metric"], [253, "module-neural_compressor.experimental.common.model"], [254, "module-neural_compressor.experimental.common.optimizer"], [255, "module-neural_compressor.experimental.common.postprocess"], [256, "module-neural_compressor.experimental.common.torch_utils"], [257, "module-neural_compressor.experimental.component"], [258, "module-neural_compressor.experimental.compression"], [259, "module-neural_compressor.experimental.contrib"], [260, "module-neural_compressor.experimental.contrib.strategy"], [261, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [262, "module-neural_compressor.experimental.contrib.strategy.tpe"], [263, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [264, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [265, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [266, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [267, "module-neural_compressor.experimental.data.dataloaders"], [268, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [269, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [270, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [271, "module-neural_compressor.experimental.data.dataloaders.sampler"], [272, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [273, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [274, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [275, "module-neural_compressor.experimental.data.datasets.dataset"], [276, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [277, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [278, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [279, "module-neural_compressor.experimental.data.datasets"], [280, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [281, "module-neural_compressor.experimental.data.filters.coco_filter"], [282, "module-neural_compressor.experimental.data.filters.filter"], [283, "module-neural_compressor.experimental.data.filters"], [284, "module-neural_compressor.experimental.data"], [285, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [286, "module-neural_compressor.experimental.data.transforms"], [287, "module-neural_compressor.experimental.data.transforms.tokenization"], [288, "module-neural_compressor.experimental.data.transforms.transform"], [289, "module-neural_compressor.experimental.distillation"], [290, "module-neural_compressor.experimental.export"], [291, "module-neural_compressor.experimental.export.qlinear2qdq"], [292, "module-neural_compressor.experimental.export.tf2onnx"], [293, "module-neural_compressor.experimental.export.torch2onnx"], [294, "module-neural_compressor.experimental.graph_optimization"], [295, "module-neural_compressor.experimental"], [296, "module-neural_compressor.experimental.metric.bleu"], [297, "module-neural_compressor.experimental.metric.bleu_util"], [298, "module-neural_compressor.experimental.metric.coco_label_map"], [299, "module-neural_compressor.experimental.metric.coco_tools"], [300, "module-neural_compressor.experimental.metric.evaluate_squad"], [301, "module-neural_compressor.experimental.metric.f1"], [302, "module-neural_compressor.experimental.metric"], [303, "module-neural_compressor.experimental.metric.metric"], [304, "module-neural_compressor.experimental.mixed_precision"], [305, "module-neural_compressor.experimental.model_conversion"], [306, "module-neural_compressor.experimental.nas.basic_nas"], [307, "module-neural_compressor.experimental.nas.dynas"], [308, "module-neural_compressor.experimental.nas"], [309, "module-neural_compressor.experimental.nas.nas"], [310, "module-neural_compressor.experimental.nas.nas_utils"], [311, "module-neural_compressor.experimental.nas.search_algorithms"], [312, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [313, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [314, "module-neural_compressor.experimental.pruner_legacy"], [315, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [316, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [317, "module-neural_compressor.experimental.pruner_legacy.pruner"], [318, "module-neural_compressor.experimental.pruning"], [319, "module-neural_compressor.experimental.pruning_recipes"], [320, "module-neural_compressor.experimental.pruning_recipes.patterns"], [321, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [322, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [323, "module-neural_compressor.experimental.pruning_v2"], [324, "module-neural_compressor.experimental.pytorch_pruner"], [325, "module-neural_compressor.experimental.pytorch_pruner.logger"], [326, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [327, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [328, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [329, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [330, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [331, "module-neural_compressor.experimental.quantization"], [332, "module-neural_compressor.experimental.scheduler"], [333, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [334, "module-neural_compressor.experimental.strategy.basic"], [335, "module-neural_compressor.experimental.strategy.bayesian"], [336, "module-neural_compressor.experimental.strategy.exhaustive"], [337, "module-neural_compressor.experimental.strategy"], [338, "module-neural_compressor.experimental.strategy.mse"], [339, "module-neural_compressor.experimental.strategy.mse_v2"], [340, "module-neural_compressor.experimental.strategy.random"], [341, "module-neural_compressor.experimental.strategy.strategy"], [342, "module-neural_compressor.experimental.strategy.utils.constant"], [343, "module-neural_compressor.experimental.strategy.utils"], [344, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [345, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [346, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [347, "module-neural_compressor.experimental.strategy.utils.utility"], [348, "module-neural_compressor"], [349, "module-neural_compressor.metric.bleu"], [350, "module-neural_compressor.metric.bleu_util"], [351, "module-neural_compressor.metric.coco_label_map"], [352, "module-neural_compressor.metric.coco_tools"], [353, "module-neural_compressor.metric.evaluate_squad"], [354, "module-neural_compressor.metric.f1"], [355, "module-neural_compressor.metric"], [356, "module-neural_compressor.metric.metric"], [357, "module-neural_compressor.mix_precision"], [358, "module-neural_compressor.model.base_model"], [359, "module-neural_compressor.model"], [360, "module-neural_compressor.model.keras_model"], [361, "module-neural_compressor.model.model"], [362, "module-neural_compressor.model.mxnet_model"], [363, "module-neural_compressor.model.nets_factory"], [364, "module-neural_compressor.model.onnx_model"], [365, "module-neural_compressor.model.tensorflow_model"], [366, "module-neural_compressor.model.torch_model"], [367, "module-neural_compressor.objective"], [368, "module-neural_compressor.profiling"], [369, "module-neural_compressor.profiling.parser.factory"], [370, "module-neural_compressor.profiling.parser"], [371, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [372, "module-neural_compressor.profiling.parser.onnx_parser"], [373, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [374, "module-neural_compressor.profiling.parser.parser"], [375, "module-neural_compressor.profiling.parser.result"], [376, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [377, "module-neural_compressor.profiling.parser.tensorflow_parser"], [378, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [379, "module-neural_compressor.profiling.profiler.factory"], [380, "module-neural_compressor.profiling.profiler"], [381, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [382, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [383, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [384, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [385, "module-neural_compressor.profiling.profiler.profiler"], [386, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [387, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [388, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [389, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [390, "module-neural_compressor.quantization"], [391, "module-neural_compressor.strategy.auto"], [392, "module-neural_compressor.strategy.auto_mixed_precision"], [393, "module-neural_compressor.strategy.basic"], [394, "module-neural_compressor.strategy.bayesian"], [395, "module-neural_compressor.strategy.conservative"], [396, "module-neural_compressor.strategy.exhaustive"], [397, "module-neural_compressor.strategy.hawq_v2"], [398, "module-neural_compressor.strategy"], [399, "module-neural_compressor.strategy.mse"], [400, "module-neural_compressor.strategy.mse_v2"], [401, "module-neural_compressor.strategy.random"], [402, "module-neural_compressor.strategy.strategy"], [403, "module-neural_compressor.strategy.utils.constant"], [404, "module-neural_compressor.strategy.utils"], [405, "module-neural_compressor.strategy.utils.tuning_sampler"], [406, "module-neural_compressor.strategy.utils.tuning_space"], [407, "module-neural_compressor.strategy.utils.tuning_structs"], [408, "module-neural_compressor.strategy.utils.utility"], [409, "module-neural_compressor.template.api_doc_example"], [410, "module-neural_compressor.template"], [411, "module-neural_compressor.torch.algorithms"], [412, "module-neural_compressor.torch.algorithms.rtn_quantize"], [413, "module-neural_compressor.torch"], [414, "module-neural_compressor.torch.quantization.config"], [415, "module-neural_compressor.torch.quantization"], [416, "module-neural_compressor.torch.quantization.quantize"], [417, "module-neural_compressor.torch.utils"], [418, "module-neural_compressor.training"], [419, "module-neural_compressor.utils.collect_layer_histogram"], [420, "module-neural_compressor.utils.constant"], [421, "module-neural_compressor.utils.create_obj_from_config"], [422, "module-neural_compressor.utils"], [423, "module-neural_compressor.utils.kl_divergence"], [424, "module-neural_compressor.utils.load_huggingface"], [425, "module-neural_compressor.utils.logger"], [426, "module-neural_compressor.utils.neural_insights_utils"], [427, "module-neural_compressor.utils.options"], [428, "module-neural_compressor.utils.pytorch"], [429, "module-neural_compressor.utils.utility"], [430, "module-neural_compressor.utils.weights_details"], [431, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[149, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[159, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[161, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[164, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[168, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[170, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[171, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[173, "neural_compressor.common.base_config.BaseConfig"]], "neural_compressor.common.base_config": [[173, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[173, "neural_compressor.common.base_config.register_config"]], "neural_compressor.common": [[174, "module-neural_compressor.common"]], "neural_compressor.common.utility": [[175, "module-neural_compressor.common.utility"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[176, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[176, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[176, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[176, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[176, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[176, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[176, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[176, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[176, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[177, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[177, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[178, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[179, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[179, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[180, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[180, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[180, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[181, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[182, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[183, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[183, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[183, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[183, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[183, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[183, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[183, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[184, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[184, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[184, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[184, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[184, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[184, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[185, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[186, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[186, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[186, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[187, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[187, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[187, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[188, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[188, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[188, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[188, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[188, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[188, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[188, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[189, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[190, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[190, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[191, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[191, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[192, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[192, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[192, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[193, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[193, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[194, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[194, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[194, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[194, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[195, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[195, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[195, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[195, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[196, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[196, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[196, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[196, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[196, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[197, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[197, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[197, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[198, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[198, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[198, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[199, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[199, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[200, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[200, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[200, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[201, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[201, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[202, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[202, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[203, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[203, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[204, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[204, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[205, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[205, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[205, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[206, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[206, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[206, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[206, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[206, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[206, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[206, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[207, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[207, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[207, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[207, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[207, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[207, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[207, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[207, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[208, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[208, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[208, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[208, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[208, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[208, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[208, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[209, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[209, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[209, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[209, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[209, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[209, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[209, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[210, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[210, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[211, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[211, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[212, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[212, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[212, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[212, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[213, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[214, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[214, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[215, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[215, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[215, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[215, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[215, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[215, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[215, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[215, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[215, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[215, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[215, "module-neural_compressor.config"]], "neural_compressor.contrib": [[216, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[217, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[218, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[218, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[219, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[219, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[220, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[220, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[221, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[221, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[221, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[222, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[222, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[222, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[223, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[223, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[223, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[223, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[224, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[225, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[225, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[226, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[226, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[226, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[227, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[227, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[228, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[228, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[228, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[228, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[228, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[229, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[230, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[230, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[231, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[231, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[231, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[231, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[231, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[232, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[232, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[233, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[233, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[234, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[234, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[234, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[235, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[235, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[235, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[235, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[235, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[235, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[235, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[236, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[237, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[237, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[238, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[238, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[238, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[239, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[239, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[240, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[241, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[242, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[242, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[243, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[243, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[244, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[245, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[245, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[246, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[246, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TRANSFORMS"], [247, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[247, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[247, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[248, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[248, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[249, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[249, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[250, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[250, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[251, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[252, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[252, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[253, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[253, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[253, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[254, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[254, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[255, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[255, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[256, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[256, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[256, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[257, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[257, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[258, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[259, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[260, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[261, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[261, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[262, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[262, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[263, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[266, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[266, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[266, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[266, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[267, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[268, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[268, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[270, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[271, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[271, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[271, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[271, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[271, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[272, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[272, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[273, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[273, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[274, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[274, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[274, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[274, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[274, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[275, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[275, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[276, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[276, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[277, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[277, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[277, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[278, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[278, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[278, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[278, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[278, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[278, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[278, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[279, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[280, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[280, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[281, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[281, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[281, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[282, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[282, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[283, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[284, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[285, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[285, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[286, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[287, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[287, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [288, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[288, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[288, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[289, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[289, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[289, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[289, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[289, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[289, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[290, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[291, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[291, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[291, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[292, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[292, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[292, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[293, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[293, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[293, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[293, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[293, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[293, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[293, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[294, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[294, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[295, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[296, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[296, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[296, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[296, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[296, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[296, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[296, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[296, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[296, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[297, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[297, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[298, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[299, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[299, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[299, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[299, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[299, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[299, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[299, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[299, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[300, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[300, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[300, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[300, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[300, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[301, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[301, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[301, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[301, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[301, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[302, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[303, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[303, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[303, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[303, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[303, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[303, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[303, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[303, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[303, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[303, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[303, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[303, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[303, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[303, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[303, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[303, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[303, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[303, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[303, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[303, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[303, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[303, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[303, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[303, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[303, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[303, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[304, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[304, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[305, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[305, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[306, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[306, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[307, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[307, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[308, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[309, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[309, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[309, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[310, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[310, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[310, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[310, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[311, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[311, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[311, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[311, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[311, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[312, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[312, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[313, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[313, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[314, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[315, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[315, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[316, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[316, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[317, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[317, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[317, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[318, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[318, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[318, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[318, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[318, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[319, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[320, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[321, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[321, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[321, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[321, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[321, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[322, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[322, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[323, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[323, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[323, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[323, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[323, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[324, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[325, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[326, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[326, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[327, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[327, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[327, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[327, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[327, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[327, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[327, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[328, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[328, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[329, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[329, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[329, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[330, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[330, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[330, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[330, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[330, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[330, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[330, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[331, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[331, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[332, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[332, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[333, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[333, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[334, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[334, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[335, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[335, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[335, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[335, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[335, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[336, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[336, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[337, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[338, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[338, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[339, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[339, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[340, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[340, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[341, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[341, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[341, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[342, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[343, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[344, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[344, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[345, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[345, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[345, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[345, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[345, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[345, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[345, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[346, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[346, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[347, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[347, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[347, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[347, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[347, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[348, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[349, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[349, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[349, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[349, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[349, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[349, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[349, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[349, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[349, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[350, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[350, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[351, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[352, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[352, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[352, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[352, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[352, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[352, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[352, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[352, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[353, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[353, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[353, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[353, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[353, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[354, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[354, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[354, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[354, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[354, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[355, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[356, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[356, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[356, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[356, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[356, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[356, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[356, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[356, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[356, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[356, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[356, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[356, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[356, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[356, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[356, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[356, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[356, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[356, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[356, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[356, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[356, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[356, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[356, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[356, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[356, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[356, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[357, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[357, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[358, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[358, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[359, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[360, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[360, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[361, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[361, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[361, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[362, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[362, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[363, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[363, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[364, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[364, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[365, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[365, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[366, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[366, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[366, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[366, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[366, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[367, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[367, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[367, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[367, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[367, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[367, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[367, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[367, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[367, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[368, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[369, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[369, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[370, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[371, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[371, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[372, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[373, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[373, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[374, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[374, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[375, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[375, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[376, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[376, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[377, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[378, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[378, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[379, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[379, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[380, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[381, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[381, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[382, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[383, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[383, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[384, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[384, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[385, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[385, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[386, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[386, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[387, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[388, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[388, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[389, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[389, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[389, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[389, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[390, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[390, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[391, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[391, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[392, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[392, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[393, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[393, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[394, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[394, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[394, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[394, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[394, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[395, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[395, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[396, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[396, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[397, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[397, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[398, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[399, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[399, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[400, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[400, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[401, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[401, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[402, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[402, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[402, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[402, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[403, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[404, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[405, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[405, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[406, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[406, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[406, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[406, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[406, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[406, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[406, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[407, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[407, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[408, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[408, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[409, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[409, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[409, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[409, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[409, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[410, "module-neural_compressor.template"]], "neural_compressor.torch.algorithms": [[411, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.rtn_quantize": [[412, "module-neural_compressor.torch.algorithms.rtn_quantize"]], "neural_compressor.torch": [[413, "module-neural_compressor.torch"]], "backend (class in neural_compressor.torch.quantization.config)": [[414, "neural_compressor.torch.quantization.config.Backend"]], "rtnweightquantconfig (class in neural_compressor.torch.quantization.config)": [[414, "neural_compressor.torch.quantization.config.RTNWeightQuantConfig"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[414, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[414, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[415, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.quantize": [[416, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[416, "neural_compressor.torch.quantization.quantize.quantize"]], "neural_compressor.torch.utils": [[417, "module-neural_compressor.torch.utils"]], "register_algo() (in module neural_compressor.torch.utils)": [[417, "neural_compressor.torch.utils.register_algo"]], "callbacks (class in neural_compressor.training)": [[418, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[418, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[418, "neural_compressor.training.fit"]], "neural_compressor.training": [[418, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[418, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[419, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[419, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[420, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[421, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[421, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[422, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[423, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[423, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[424, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[424, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[424, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[425, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[425, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[426, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[426, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[426, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[426, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[426, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[427, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[427, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[428, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[428, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[428, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[428, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[429, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[429, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[430, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[430, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[430, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[431, "module-neural_compressor.version"]]}})