Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tune/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/logger/index", "autoapi/neural_compressor/common/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/fp8/index", "autoapi/neural_compressor/torch/quantization/fp8/modules/index", "autoapi/neural_compressor/torch/quantization/fp8/observer/index", "autoapi/neural_compressor/torch/quantization/fp8/quantization_impl/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/layers/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/tune/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tune/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/logger/index.rst", "autoapi/neural_compressor/common/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/dense/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quantize/quantize_entry/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only_algos/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/modules/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/observer/index.rst", "autoapi/neural_compressor/torch/quantization/fp8/quantization_impl/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/layers/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/tune/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only_algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.fp8.quantization_impl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 164, 168, 169, 191, 201, 204, 209, 215, 331, 372, 414, 435, 507, 549, 551, 557, 563], "mask": [0, 191, 197, 199, 202, 204, 208, 209, 235, 278, 304, 333, 357, 551, 566], "adaptor_registri": [1, 475], "cl": [1, 161, 170, 182, 184, 188, 189, 197, 202, 211, 212, 213, 237, 244, 252, 254, 259, 280, 287, 293, 315, 322, 326, 331, 333, 335, 346, 361, 372, 407, 465], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 383, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 418, 426, 428, 430, 431, 433, 435, 436, 437, 442, 448, 449, 450, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 474, 509, 512, 525, 527, 529, 530, 532, 552], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 151, 160, 162, 168, 170, 175, 176, 181, 182, 184, 188, 189, 191, 195, 197, 199, 200, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 235, 236, 237, 238, 239, 243, 244, 252, 254, 257, 259, 262, 266, 267, 268, 278, 279, 280, 281, 282, 286, 287, 293, 294, 299, 301, 302, 303, 305, 306, 308, 310, 311, 312, 314, 315, 317, 318, 320, 321, 322, 323, 326, 328, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 350, 352, 354, 355, 356, 358, 359, 361, 362, 370, 372, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 411, 413, 414, 418, 426, 430, 431, 436, 437, 449, 453, 454, 455, 457, 459, 460, 464, 465, 466, 469, 471, 472, 475, 476, 477, 478, 480, 484, 487, 490, 492, 493, 494, 495, 497, 498, 500, 502, 504, 506, 507, 508, 510, 511, 512, 513, 514, 517, 518, 520, 523, 525, 526, 527, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566], "decor": [1, 16, 34, 67, 68, 70, 148, 170, 176, 184, 188, 189, 197, 202, 211, 213, 252, 259, 293, 308, 315, 322, 326, 331, 333, 335, 346, 349, 361, 372, 407, 431, 437, 453, 465, 471, 472, 475, 563], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 151, 155, 160, 162, 168, 169, 175, 177, 182, 184, 188, 189, 191, 195, 197, 202, 206, 207, 211, 213, 214, 216, 217, 219, 220, 223, 224, 233, 234, 235, 236, 237, 238, 239, 242, 251, 252, 253, 254, 259, 266, 267, 276, 277, 278, 279, 280, 281, 282, 285, 292, 293, 297, 298, 299, 301, 302, 304, 308, 309, 310, 315, 322, 323, 326, 328, 331, 333, 334, 335, 336, 337, 340, 343, 346, 349, 350, 354, 355, 357, 361, 372, 389, 394, 395, 399, 402, 404, 407, 411, 413, 414, 431, 435, 437, 453, 454, 455, 456, 457, 458, 460, 465, 469, 470, 471, 472, 475, 476, 492, 493, 495, 497, 498, 499, 500, 502, 504, 506, 508, 509, 512, 513, 514, 515, 516, 517, 519, 520, 523, 525, 527, 529, 530, 532, 534, 535, 536, 537, 538, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566], "regist": [1, 16, 34, 158, 160, 170, 176, 182, 184, 188, 189, 191, 192, 197, 198, 202, 205, 211, 212, 213, 214, 237, 244, 252, 254, 259, 280, 287, 293, 308, 315, 322, 326, 331, 333, 335, 346, 349, 361, 372, 407, 413, 428, 431, 453, 462, 472, 475, 495, 500, 511, 512, 533, 549, 560, 563], "all": [1, 13, 16, 34, 44, 45, 63, 97, 154, 160, 161, 168, 169, 170, 172, 175, 176, 181, 184, 189, 192, 197, 205, 215, 219, 220, 225, 226, 233, 237, 244, 252, 253, 259, 262, 268, 276, 280, 287, 293, 298, 301, 304, 306, 308, 315, 322, 326, 327, 331, 337, 346, 349, 354, 357, 359, 361, 363, 372, 407, 413, 428, 433, 457, 465, 469, 470, 474, 475, 476, 477, 494, 495, 500, 504, 508, 512, 515, 523, 526, 527, 530, 531, 532, 533, 534, 537, 538, 540, 541, 545, 546, 547, 550, 551, 552, 554, 556, 557, 560, 562, 563], "subclass": [1, 16, 34, 170, 184, 188, 189, 197, 202, 211, 213, 230, 234, 237, 244, 252, 259, 273, 277, 280, 287, 293, 308, 315, 322, 326, 331, 333, 335, 346, 349, 361, 372, 407, 475], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 151, 153, 154, 155, 160, 161, 165, 166, 168, 169, 170, 175, 176, 177, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 234, 235, 237, 244, 248, 252, 254, 259, 266, 267, 277, 278, 280, 287, 290, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 328, 331, 332, 333, 334, 335, 336, 340, 346, 350, 352, 354, 355, 357, 358, 359, 361, 362, 366, 370, 372, 389, 394, 395, 399, 407, 411, 413, 414, 426, 430, 431, 433, 435, 437, 449, 453, 454, 457, 460, 461, 462, 464, 465, 471, 476, 494, 495, 498, 500, 507, 511, 512, 526, 532, 533, 534, 535, 540, 545, 546, 551, 554, 555, 557, 558, 559, 560, 562, 563, 565], "framework_specific_info": [1, 3, 11, 14, 45, 47, 418, 475], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 151, 155, 158, 164, 168, 170, 176, 177, 181, 188, 189, 190, 191, 192, 198, 205, 212, 214, 220, 225, 228, 233, 235, 237, 244, 252, 262, 268, 271, 276, 278, 280, 287, 293, 308, 314, 316, 322, 323, 326, 328, 333, 343, 346, 350, 361, 363, 370, 371, 372, 404, 407, 411, 472, 474, 475, 476, 477, 495, 499, 500, 504, 512, 513, 520, 521, 523, 532, 535, 540, 543, 546, 547, 551, 552, 554, 557, 559, 560, 561, 563, 566], "framework": [1, 3, 11, 13, 14, 45, 151, 175, 176, 177, 182, 184, 192, 198, 202, 205, 209, 210, 211, 221, 222, 226, 227, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 249, 252, 254, 255, 259, 264, 265, 269, 270, 272, 274, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 293, 299, 308, 309, 336, 344, 350, 361, 362, 363, 364, 366, 405, 411, 418, 428, 457, 474, 475, 477, 493, 497, 500, 501, 505, 506, 507, 508, 511, 512, 513, 534, 535, 551, 552, 554, 558, 561, 562, 563, 564, 565, 566], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 149, 154, 157, 159, 161, 165, 169, 173, 182, 185, 193, 195, 196, 197, 201, 206, 215, 219, 220, 254, 261, 331, 332, 418, 433, 435, 447, 455, 457, 465, 474, 475, 476, 477, 499, 507, 535, 551, 557, 558, 564], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 153, 155, 156, 157, 166, 176, 183, 190, 192, 219, 220, 261, 300, 302, 332, 342, 353, 355, 387, 392, 403, 428, 442, 476, 477, 478, 493, 500, 512, 515, 535, 551, 554, 563, 564], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 195, 196, 201, 219, 220, 248, 290, 331, 389, 394, 426, 471, 492, 494, 497, 502, 532, 538, 551, 554, 557, 560, 562, 563], "activ": [2, 17, 29, 44, 141, 152, 168, 169, 185, 219, 220, 261, 350, 411, 413, 475, 476, 477, 493, 497, 499, 504, 512, 533, 534, 537, 545, 546, 547, 553, 554, 557, 560, 561, 565], "argmax": [2, 17, 29], "attent": [2, 17, 29, 164, 193, 195, 206, 219, 220, 235, 278, 469, 498, 551], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 173, 219, 220, 471, 476, 477, 512, 551, 553, 554, 563], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 219, 220, 331], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 219, 220], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 201, 219, 220, 331, 504, 535, 557, 563], "maxpool": [2, 17, 29, 129, 138, 504], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 153, 155, 166, 168, 173, 195, 219, 220, 298, 343, 350, 351, 389, 394, 400, 402, 404, 411, 412, 413, 426, 437, 453, 459, 465, 475, 476, 477, 497, 504, 512, 513, 536, 537, 551, 554, 556, 558, 560, 561, 563, 565], "pad": [2, 17, 29, 44, 71, 72, 235, 252, 278, 293, 495, 557, 562], "pool": [2, 17, 29, 542], "reduc": [2, 17, 29, 219, 220, 475, 493, 499, 512, 513, 532, 533, 551, 552, 554, 555, 556, 557, 560, 563, 565], "resiz": [2, 17, 29, 235, 236, 248, 252, 278, 279, 290, 293, 495, 562], "split": [2, 17, 29, 43, 82, 149, 169, 251, 252, 292, 293, 435, 471, 555, 557, 560, 562], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 168, 169, 175, 219, 220, 223, 224, 266, 267, 299, 336, 395, 426, 430, 449, 459, 475, 477, 495, 506, 507, 551, 554, 557, 563, 564, 565], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 152, 153, 154, 155, 156, 157, 161, 162, 163, 165, 167, 168, 169, 173, 175, 177, 181, 219, 220, 223, 224, 248, 255, 262, 266, 267, 290, 298, 299, 300, 310, 337, 343, 349, 353, 400, 402, 404, 413, 426, 433, 435, 436, 454, 455, 459, 460, 464, 465, 475, 482, 494, 495, 500, 501, 504, 506, 507, 511, 514, 515, 520, 522, 523, 526, 539, 541, 542, 544, 550, 552, 558, 561, 562, 563, 564, 565], "smooth_quant": [2, 17, 159, 168, 172, 219, 220, 353, 554, 560], "weight_onli": [2, 17, 220, 464, 555, 557], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 153, 219, 220, 350, 411, 475, 476, 504, 512, 517, 522, 526, 532, 556, 563, 566], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 154, 168, 175, 195, 215, 223, 224, 225, 234, 237, 238, 239, 240, 252, 266, 267, 268, 277, 280, 281, 282, 283, 293, 301, 309, 340, 354, 362, 390, 395, 399, 414, 428, 433, 442, 454, 470, 471, 475, 477, 494, 498, 511, 512, 513, 515, 520, 525, 527, 529, 530, 532, 534, 535, 549, 551, 552, 554, 556, 557, 560, 561, 562, 563], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 169, 174, 175, 219, 220, 248, 290, 296, 297, 298, 350, 352, 411, 413, 428, 435, 464, 465, 470, 471, 474, 475, 476, 477, 492, 495, 499, 504, 510, 512, 513, 517, 520, 522, 523, 526, 532, 535, 537, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 565], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 173, 219, 220, 231, 274, 296, 297, 298, 362, 369, 389, 463, 470, 474, 475, 476, 478, 494, 497, 501, 502, 504, 505, 507, 513, 514, 517, 522, 523, 535, 552, 553, 557, 558, 560, 563], "qdq": [2, 42, 87, 111, 112, 113, 142, 168, 169, 219, 220, 296, 297, 298, 435, 475, 497, 502, 507, 522, 523, 554, 558, 560], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 166, 220, 310, 370, 499, 500, 507, 512, 554], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 256, 300, 353, 555, 560], "layer_wise_qu": [2, 156, 220, 555], "modified_pickl": [2, 156, 157], "torch_load": [2, 156, 157], "bf16_convert": [2, 52, 87, 111, 156], "hawq_metr": [2, 156], "model_wrapp": [2, 15, 156], "pattern_detector": [2, 156], "symbolic_trac": [2, 156], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 182, 184, 214, 219, 220, 234, 235, 236, 237, 240, 242, 244, 252, 259, 277, 278, 279, 280, 283, 285, 287, 293, 297, 298, 299, 302, 304, 308, 309, 310, 336, 344, 355, 357, 361, 362, 370, 388, 389, 393, 394, 395, 405, 465, 470, 472, 474, 475, 476, 493, 494, 497, 498, 499, 501, 504, 505, 507, 508, 512, 513, 514, 522, 523, 534, 537, 551, 552, 553, 559, 560, 563, 565], "kerasadaptor": [3, 418], "kerasqueri": [3, 418], "local_config_fil": [3, 11, 14, 45, 47, 418], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 151, 152, 154, 155, 159, 160, 161, 162, 163, 165, 167, 168, 169, 175, 176, 177, 181, 182, 189, 191, 192, 193, 195, 199, 211, 215, 216, 217, 219, 220, 223, 224, 225, 227, 233, 234, 235, 236, 237, 238, 239, 240, 242, 248, 252, 253, 254, 255, 262, 266, 267, 268, 270, 276, 277, 278, 279, 280, 281, 282, 283, 285, 290, 293, 294, 297, 298, 299, 304, 308, 309, 310, 311, 314, 323, 328, 332, 336, 340, 343, 344, 346, 350, 357, 361, 362, 372, 388, 393, 394, 395, 396, 399, 400, 404, 405, 407, 411, 414, 418, 426, 428, 430, 431, 433, 437, 442, 448, 449, 450, 454, 455, 457, 460, 462, 464, 465, 475, 476, 494, 495, 511, 535, 554, 557, 561, 562, 563], "defin": [3, 11, 14, 45, 46, 86, 151, 155, 188, 189, 195, 197, 202, 203, 204, 209, 210, 211, 212, 213, 219, 220, 223, 224, 266, 267, 311, 312, 314, 315, 316, 323, 328, 331, 332, 333, 335, 362, 395, 428, 442, 454, 464, 469, 472, 475, 476, 494, 495, 498, 499, 504, 507, 511, 512, 533, 550, 551, 554, 557, 559, 560, 561, 563, 565], "queri": [3, 11, 13, 14, 45, 47, 148, 168, 195, 206, 219, 220, 418, 476, 477, 542, 554], "interfac": [3, 11, 14, 45, 46, 86, 113, 177, 216, 299, 323, 328, 336, 337, 457, 507, 512, 523, 541, 554, 558], "each": [3, 11, 14, 45, 46, 141, 148, 155, 160, 168, 169, 215, 219, 220, 233, 237, 240, 248, 252, 276, 280, 283, 290, 293, 302, 304, 305, 306, 343, 355, 357, 358, 359, 404, 435, 465, 470, 475, 476, 477, 495, 497, 498, 499, 504, 512, 517, 523, 526, 532, 540, 542, 549, 551, 555, 557, 559, 561, 562, 563, 564], "adapt": [3, 11, 14, 45, 46, 149, 469, 474, 476, 495, 523, 552], "should": [3, 11, 14, 45, 46, 55, 115, 116, 160, 181, 193, 195, 206, 219, 220, 223, 224, 233, 235, 237, 252, 257, 266, 267, 276, 278, 280, 293, 298, 302, 355, 361, 362, 395, 414, 437, 454, 465, 471, 472, 475, 476, 477, 495, 498, 500, 511, 512, 518, 527, 530, 532, 534, 535, 549, 551, 554, 557, 562, 563, 565], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 151, 152, 160, 223, 224, 230, 233, 234, 235, 237, 266, 267, 273, 276, 277, 278, 280, 301, 354, 362, 372, 395, 402, 450, 454, 477, 494, 495, 511, 512, 523, 533, 551, 554, 557, 558, 561, 563, 565], "inherit": [3, 11, 14, 45, 46, 181, 182, 207, 208, 213, 219, 232, 252, 254, 262, 275, 293, 333, 335, 472, 475, 476, 495], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 151, 169, 175, 176, 184, 215, 219, 220, 235, 236, 237, 238, 242, 244, 259, 278, 279, 280, 281, 285, 287, 317, 318, 320, 321, 322, 361, 395, 435, 437, 462, 469, 472, 475, 476, 493, 494, 497, 498, 504, 506, 510, 511, 512, 513, 514, 515, 519, 520, 522, 526, 532, 534, 540, 549, 551, 553, 557, 563, 565], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 173, 184, 219, 220, 221, 222, 226, 227, 231, 235, 236, 238, 239, 240, 241, 242, 246, 249, 252, 258, 259, 264, 265, 269, 270, 272, 274, 278, 279, 281, 282, 283, 284, 285, 289, 291, 293, 309, 344, 362, 363, 364, 366, 405, 428, 442, 471, 477, 497, 500, 506, 507, 512, 513, 521, 540, 545, 546, 547, 553, 557, 562, 563, 565], "own": [3, 11, 14, 45, 46, 74, 160, 233, 252, 276, 293, 372, 472, 476, 494, 495, 507, 511, 534, 538, 549, 557, 559, 564], "mxnetadaptor": 11, "do": [11, 14, 151, 154, 181, 211, 219, 220, 234, 235, 277, 278, 294, 298, 301, 304, 334, 354, 357, 433, 464, 469, 476, 495, 500, 504, 507, 511, 512, 527, 530, 551, 556, 558, 560, 563], "inspect": [11, 14, 558, 561], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 151, 155, 160, 161, 168, 169, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 220, 252, 293, 296, 298, 331, 333, 343, 370, 404, 435, 437, 460, 464, 465, 471, 477, 494, 495, 497, 551, 554, 558, 561, 562, 563], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 151, 153, 154, 155, 160, 168, 169, 170, 175, 184, 188, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 234, 253, 259, 266, 267, 277, 296, 298, 303, 304, 305, 306, 308, 311, 314, 315, 316, 323, 326, 328, 331, 332, 333, 334, 335, 340, 343, 349, 352, 356, 357, 358, 359, 361, 362, 370, 395, 410, 413, 414, 426, 428, 431, 433, 435, 436, 454, 455, 457, 464, 465, 471, 476, 502, 511, 551, 553, 554, 560, 561, 563], "configur": [11, 13, 14, 45, 118, 149, 153, 168, 169, 175, 176, 215, 216, 219, 220, 223, 224, 226, 237, 240, 253, 258, 266, 267, 280, 283, 294, 298, 299, 310, 311, 312, 314, 323, 328, 332, 336, 337, 343, 361, 362, 372, 395, 404, 413, 426, 430, 435, 449, 454, 456, 457, 463, 464, 471, 472, 475, 476, 495, 497, 512, 519, 533, 540, 545, 546, 547, 549, 551, 554, 557, 558, 560, 562, 563, 566], "mxnetqueri": 11, "mxnet": [12, 13, 16, 220, 230, 234, 237, 240, 244, 252, 273, 277, 280, 283, 287, 293, 299, 308, 336, 361, 362, 367, 395, 470, 474, 475, 476, 493, 494, 501, 504, 507, 508, 512, 513, 514, 553, 563, 565], "init": [12, 17, 42, 172, 183, 192, 194, 495, 511, 563], "optyp": [13, 219, 220, 296, 476], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 153, 154, 155, 160, 168, 169, 170, 182, 184, 188, 189, 195, 196, 197, 202, 211, 212, 213, 215, 217, 219, 220, 233, 235, 237, 244, 252, 254, 259, 276, 278, 280, 287, 293, 298, 301, 302, 304, 308, 315, 322, 326, 331, 333, 335, 340, 346, 350, 352, 354, 355, 357, 361, 370, 372, 399, 400, 407, 411, 413, 414, 426, 430, 431, 433, 435, 437, 453, 464, 465, 475, 476, 495, 497, 500, 502, 504, 507, 512, 513, 533, 535, 540, 541, 545, 546, 554, 555, 557, 559, 562, 563, 564, 565], "isiter": 13, "obj": [13, 105, 192, 215, 234, 277, 294, 299, 310, 311, 312, 314, 323, 328, 332, 336, 362, 372, 395, 454, 457, 465], "bool": [13, 42, 43, 44, 141, 148, 149, 151, 154, 160, 166, 168, 169, 197, 219, 220, 235, 237, 248, 252, 278, 280, 290, 293, 298, 302, 308, 331, 349, 355, 361, 410, 414, 428, 433, 435, 437, 442, 449, 460, 464, 465, 494, 495, 511, 543, 553, 562], "check": [13, 44, 67, 68, 105, 148, 149, 168, 169, 215, 226, 237, 280, 296, 332, 431, 464, 465, 474, 497, 500, 508, 516, 518, 520, 527, 530, 531, 535, 538, 541, 542, 558], "whether": [13, 43, 44, 105, 116, 148, 149, 151, 154, 160, 168, 169, 197, 219, 220, 233, 235, 248, 252, 276, 278, 290, 293, 302, 304, 308, 331, 355, 357, 361, 433, 435, 437, 457, 460, 464, 465, 475, 495, 511, 554, 557, 560, 562], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 151, 153, 155, 158, 160, 166, 168, 175, 181, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 235, 236, 237, 252, 253, 255, 266, 267, 268, 278, 279, 280, 293, 294, 299, 304, 312, 314, 317, 318, 320, 321, 322, 323, 328, 331, 332, 333, 334, 335, 336, 340, 353, 357, 361, 362, 370, 371, 389, 394, 395, 399, 413, 431, 453, 454, 457, 464, 465, 471, 472, 476, 482, 492, 494, 495, 503, 511, 512, 514, 550, 551, 553, 554, 562, 563, 564, 566], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 151, 154, 155, 158, 160, 162, 166, 168, 169, 174, 175, 177, 181, 184, 185, 191, 195, 196, 202, 207, 208, 209, 210, 211, 212, 214, 215, 219, 220, 223, 224, 225, 233, 234, 235, 236, 237, 238, 239, 242, 244, 248, 252, 253, 255, 259, 261, 262, 266, 267, 268, 276, 277, 278, 279, 280, 281, 282, 285, 287, 290, 293, 301, 304, 306, 308, 310, 315, 323, 328, 332, 333, 337, 344, 354, 357, 359, 361, 362, 372, 378, 379, 383, 395, 400, 405, 413, 414, 431, 433, 437, 449, 454, 460, 464, 465, 469, 470, 471, 472, 475, 476, 477, 478, 480, 484, 487, 490, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 525, 526, 527, 529, 530, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566], "iter": [13, 15, 105, 140, 148, 149, 151, 168, 169, 175, 196, 202, 209, 213, 219, 220, 223, 224, 228, 233, 237, 238, 255, 266, 267, 271, 276, 280, 281, 333, 335, 362, 395, 426, 430, 454, 457, 471, 472, 475, 492, 494, 495, 512, 551, 553, 554, 560, 561, 563, 565], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 151, 153, 154, 155, 160, 166, 168, 169, 170, 175, 182, 184, 188, 189, 192, 195, 197, 198, 202, 205, 211, 212, 213, 215, 217, 223, 224, 237, 244, 248, 252, 253, 254, 259, 266, 267, 280, 287, 290, 293, 298, 301, 302, 304, 305, 306, 308, 314, 315, 322, 326, 331, 332, 333, 335, 340, 346, 350, 352, 354, 355, 357, 358, 359, 361, 362, 366, 370, 372, 389, 394, 395, 399, 407, 411, 413, 414, 426, 428, 430, 431, 433, 435, 442, 449, 453, 454, 457, 462, 464, 465, 471, 472, 476, 477, 494, 495, 500, 511, 514, 545, 546, 547, 549, 551, 554, 557, 560, 561, 563], "true": [13, 43, 44, 85, 113, 146, 148, 149, 154, 160, 169, 175, 188, 219, 220, 233, 235, 237, 238, 251, 252, 253, 276, 278, 280, 281, 292, 293, 298, 302, 308, 326, 349, 355, 361, 372, 395, 410, 414, 428, 433, 435, 437, 442, 449, 457, 460, 464, 465, 476, 494, 495, 497, 500, 504, 511, 512, 515, 518, 519, 534, 535, 536, 537, 543, 545, 553, 554, 555, 557, 560, 561, 562, 563, 565], "els": [13, 148, 151, 169, 220, 233, 276, 372, 435, 462, 520, 557, 561], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 151, 152, 154, 159, 160, 166, 168, 169, 175, 182, 185, 219, 220, 225, 227, 234, 235, 237, 248, 252, 253, 254, 255, 261, 268, 270, 277, 278, 280, 290, 293, 304, 308, 357, 361, 372, 395, 414, 433, 435, 442, 457, 460, 464, 465, 475, 476, 494, 495, 504, 511, 512, 525, 529, 535, 543, 546, 547, 553, 554, 557, 560, 561, 562, 563, 565], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 154, 196, 219, 220, 234, 252, 277, 293, 340, 399, 414, 433, 493, 497, 500, 513, 514, 540, 541, 545, 546, 548, 554, 555, 560, 561, 562, 564], "ensur": [13, 252, 293, 340, 399, 500, 554, 562], "list": [13, 42, 43, 44, 54, 105, 140, 148, 149, 151, 153, 154, 155, 164, 168, 175, 176, 189, 195, 196, 201, 206, 211, 215, 219, 220, 223, 224, 228, 235, 248, 252, 253, 266, 267, 271, 278, 290, 293, 297, 298, 301, 302, 304, 305, 306, 308, 315, 323, 328, 331, 334, 349, 354, 355, 357, 358, 359, 361, 362, 370, 378, 379, 383, 395, 410, 414, 428, 433, 442, 454, 455, 465, 471, 474, 475, 495, 502, 504, 508, 510, 512, 515, 520, 522, 525, 526, 529, 537, 540, 542, 543, 549, 551, 553, 554, 556, 560, 561, 563], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 151, 153, 163, 165, 166, 167, 168, 169, 173, 195, 196, 215, 219, 220, 223, 224, 235, 236, 237, 239, 248, 251, 252, 257, 266, 267, 278, 279, 280, 282, 290, 292, 293, 296, 297, 298, 361, 362, 366, 370, 395, 435, 437, 448, 453, 454, 460, 462, 464, 465, 472, 475, 476, 492, 493, 494, 495, 497, 498, 499, 500, 502, 504, 506, 511, 512, 513, 514, 515, 520, 551, 553, 554, 557, 560, 561, 562, 565], "check_mx_vers": 13, "version": [13, 54, 104, 149, 151, 163, 168, 195, 220, 297, 298, 353, 448, 469, 471, 475, 504, 508, 509, 512, 525, 527, 529, 530, 552, 558, 560, 563, 564], "str": [13, 42, 43, 44, 140, 149, 153, 155, 160, 161, 164, 165, 166, 168, 169, 170, 182, 184, 192, 195, 219, 220, 235, 236, 237, 244, 248, 252, 254, 258, 259, 278, 279, 280, 287, 290, 293, 297, 298, 301, 302, 304, 306, 308, 315, 326, 349, 352, 354, 355, 357, 359, 361, 380, 388, 390, 393, 394, 410, 413, 414, 426, 428, 431, 435, 436, 437, 442, 453, 457, 460, 462, 465, 466, 494, 495, 511, 543, 553, 561, 562], "mx": 13, "__version__": [13, 158], "combine_cap": 13, "current": [13, 70, 104, 165, 169, 191, 192, 195, 198, 202, 205, 219, 220, 310, 317, 318, 320, 321, 322, 331, 333, 340, 344, 399, 405, 435, 465, 471, 472, 475, 477, 493, 500, 504, 512, 515, 519, 532, 540, 549, 551, 554, 557, 560, 563], "new": [13, 16, 44, 148, 149, 165, 175, 225, 237, 252, 253, 268, 280, 293, 332, 372, 428, 437, 442, 470, 474, 476, 500, 512, 513, 526, 532, 533, 534, 535, 541, 542, 545, 546, 551, 552, 554, 557, 558, 559, 562, 564, 565], "combin": [13, 168, 177, 219, 220, 223, 224, 248, 262, 266, 267, 290, 362, 395, 454, 465, 471, 475, 507, 512, 550, 552, 554, 556, 557, 562, 563], "capabl": [13, 47, 350, 411, 476, 477, 492, 504, 512, 513, 523, 534, 539, 551, 553, 554, 563, 565], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 155, 160, 168, 169, 175, 181, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 215, 219, 220, 223, 224, 235, 236, 237, 266, 267, 278, 279, 280, 294, 298, 299, 304, 305, 306, 310, 323, 326, 328, 331, 332, 333, 334, 335, 336, 357, 358, 359, 362, 395, 454, 457, 464, 493, 495, 498, 507, 511, 533, 540, 545, 546, 547, 551, 557, 561, 563, 564], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 151, 154, 168, 195, 213, 215, 220, 332, 335, 340, 399, 433, 460, 495, 500, 512, 551, 561, 562, 563, 565], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 153, 168, 195, 219, 220, 235, 248, 251, 252, 278, 290, 292, 293, 297, 304, 310, 332, 350, 357, 411, 414, 471, 476, 512, 513, 517, 554, 556, 557, 560, 562, 563], "symbol": [13, 43, 153, 166, 168, 301, 354, 362, 395, 471, 514], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 173, 175, 177, 181, 188, 192, 193, 195, 202, 203, 204, 207, 209, 210, 211, 213, 215, 219, 220, 223, 224, 231, 234, 235, 237, 252, 253, 256, 257, 266, 267, 274, 277, 278, 280, 293, 294, 296, 297, 298, 299, 300, 308, 309, 310, 311, 314, 317, 318, 320, 321, 322, 323, 328, 332, 333, 334, 335, 336, 337, 340, 343, 344, 346, 353, 361, 362, 372, 388, 393, 394, 395, 396, 399, 400, 404, 405, 407, 413, 414, 426, 430, 431, 433, 435, 436, 437, 449, 450, 453, 454, 460, 462, 464, 465, 467, 470, 471, 472, 474, 475, 477, 482, 492, 493, 494, 495, 497, 498, 499, 500, 501, 506, 507, 509, 511, 513, 515, 520, 522, 523, 526, 532, 534, 539, 541, 542, 543, 544, 549, 550, 552, 554, 558, 559, 561, 562, 563, 564, 565], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 151, 155, 158, 160, 168, 174, 185, 202, 219, 220, 228, 233, 237, 252, 256, 261, 271, 276, 280, 293, 300, 301, 305, 306, 314, 315, 337, 353, 354, 358, 359, 362, 389, 394, 395, 414, 437, 454, 465, 467, 469, 471, 472, 474, 475, 477, 493, 494, 495, 496, 497, 502, 510, 511, 512, 513, 515, 519, 520, 523, 532, 535, 536, 537, 540, 543, 549, 551, 552, 554, 557, 558, 559, 560, 561, 562, 563], "neural": [13, 155, 175, 181, 184, 197, 198, 199, 200, 211, 219, 220, 247, 248, 249, 252, 253, 256, 259, 262, 290, 291, 293, 295, 300, 307, 308, 310, 323, 328, 331, 334, 336, 337, 342, 348, 353, 360, 361, 362, 366, 373, 395, 402, 403, 409, 462, 467, 470, 475, 476, 477, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 513, 514, 516, 517, 520, 522, 523, 525, 527, 529, 530, 531, 543, 549, 550, 552, 554, 557, 558, 560, 561, 562, 563, 565, 566], "compressor": [13, 175, 181, 184, 199, 200, 211, 219, 220, 247, 248, 249, 252, 253, 256, 259, 262, 290, 291, 293, 295, 300, 307, 308, 310, 331, 334, 336, 337, 342, 348, 353, 360, 361, 362, 366, 373, 395, 403, 409, 462, 467, 470, 472, 475, 476, 477, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 513, 514, 515, 516, 520, 522, 523, 525, 527, 529, 530, 531, 534, 535, 536, 537, 539, 540, 547, 549, 550, 551, 552, 554, 557, 558, 560, 561, 562, 563, 564, 565, 566], "tupl": [13, 105, 148, 168, 189, 220, 223, 224, 248, 252, 266, 267, 290, 293, 298, 349, 362, 395, 410, 436, 450, 454, 464, 476, 495, 511, 512, 554, 562], "symnet": 13, "arg": [13, 54, 105, 149, 168, 179, 235, 236, 237, 278, 279, 280, 331, 340, 399, 414, 433, 436, 460, 461, 495, 500, 512, 521, 551, 554, 557, 560, 561, 562], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 155, 160, 165, 168, 169, 173, 195, 219, 220, 223, 224, 253, 255, 266, 267, 298, 300, 340, 350, 352, 353, 362, 388, 393, 395, 399, 411, 413, 426, 430, 435, 454, 457, 462, 465, 474, 475, 493, 494, 495, 500, 504, 505, 508, 511, 512, 513, 534, 535, 537, 540, 545, 546, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564], "descript": [13, 132, 414, 471, 476, 477, 494, 540, 544, 560], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 166, 168, 173, 471, 560, 561], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 149, 154, 161, 165, 168, 175, 184, 185, 189, 191, 192, 193, 195, 198, 205, 212, 213, 214, 215, 217, 220, 228, 252, 253, 259, 261, 271, 293, 298, 331, 333, 335, 343, 350, 352, 361, 370, 395, 404, 411, 413, 428, 431, 433, 453, 457, 460, 462, 465, 476, 493, 503, 507, 508, 510, 512, 518, 535, 537, 545, 546, 552, 557, 560, 563, 564, 567], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 153, 154, 155, 160, 161, 165, 166, 168, 170, 175, 176, 185, 188, 189, 191, 195, 197, 202, 205, 206, 211, 212, 213, 214, 215, 217, 219, 220, 235, 236, 237, 240, 244, 250, 252, 253, 257, 260, 261, 278, 279, 280, 283, 287, 293, 296, 297, 298, 303, 308, 326, 331, 333, 335, 350, 352, 356, 361, 366, 370, 372, 395, 411, 413, 426, 431, 433, 453, 455, 457, 462, 465, 470, 471, 477, 495, 497, 500, 502, 504, 509, 511, 512, 514, 518, 525, 529, 533, 534, 540, 551, 554, 558, 559, 561, 563, 565, 566], "context": [13, 437, 465, 553, 557], "prepare_model_data": 13, "nc_model": [13, 323, 328], "data_x": 13, "prepar": [13, 44, 168, 471, 474, 495, 500, 505, 534, 545, 546, 547, 551, 554], "dataload": [13, 15, 42, 44, 140, 141, 149, 152, 154, 155, 165, 168, 169, 175, 192, 193, 195, 211, 215, 223, 224, 235, 246, 256, 266, 267, 278, 289, 294, 300, 323, 328, 337, 353, 388, 393, 395, 454, 457, 471, 474, 475, 476, 497, 498, 499, 500, 505, 506, 512, 513, 534, 535, 550, 551, 554, 555, 556, 557, 560, 561, 562, 564, 565], "need": [13, 42, 105, 109, 165, 169, 175, 195, 211, 220, 223, 224, 225, 233, 234, 237, 244, 252, 255, 257, 258, 266, 267, 268, 276, 277, 280, 287, 293, 298, 337, 343, 361, 362, 372, 395, 404, 454, 464, 465, 471, 475, 494, 495, 497, 498, 500, 507, 512, 515, 517, 518, 521, 525, 526, 527, 529, 530, 532, 533, 534, 535, 536, 537, 539, 543, 545, 551, 553, 554, 555, 556, 557, 558, 560, 562, 563, 565], "run": [13, 140, 148, 160, 169, 175, 202, 215, 219, 220, 223, 224, 234, 251, 253, 266, 267, 277, 292, 332, 333, 340, 362, 395, 399, 437, 454, 475, 492, 500, 503, 504, 512, 515, 517, 519, 520, 521, 523, 525, 526, 527, 529, 530, 532, 540, 541, 542, 543, 545, 546, 547, 552, 554, 557, 558, 559, 561, 563, 565], "loader": [13, 140, 223, 224, 266, 267, 362, 395, 426, 430, 454, 460, 494, 554], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 158, 219, 220, 225, 235, 237, 255, 268, 278, 280, 304, 314, 315, 350, 357, 389, 394, 411, 413, 414, 457, 469, 472, 475, 495, 514, 525, 527, 529, 530, 533, 545, 546, 547, 551, 554, 559, 561, 563, 564], "exampl": [13, 44, 149, 151, 155, 160, 168, 169, 175, 176, 189, 195, 196, 211, 219, 220, 235, 236, 237, 248, 252, 278, 279, 280, 290, 293, 304, 305, 306, 308, 334, 357, 358, 359, 361, 362, 372, 395, 413, 414, 431, 435, 453, 454, 464, 465, 469, 474, 476, 477, 482, 506, 507, 515, 518, 519, 520, 523, 540, 543, 556, 558, 562, 563, 564, 567], "prepare_dataload": 13, "io": [13, 160, 538], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 252, 293, 455, 503, 562], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 154, 159, 160, 162, 168, 169, 192, 195, 196, 211, 215, 219, 220, 433, 437, 442, 460, 476, 494, 498, 512, 513, 515, 518, 523, 532, 551, 553, 555, 557], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 195, 296, 298, 370, 394, 475, 497, 500, 535, 539, 542, 545, 546, 547, 555, 561, 563, 566], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 149, 161, 168, 252, 293, 304, 357, 395, 453, 472, 477, 551, 560, 562], "map": [13, 43, 105, 148, 160, 168, 220, 252, 293, 296, 298, 299, 303, 305, 306, 308, 323, 328, 333, 336, 356, 358, 359, 361, 495, 500, 511, 512, 525, 529, 537, 551, 554, 557], "quantize_sym_model": 13, "qconfig": [13, 168, 464, 557, 561], "accord": [13, 122, 168, 175, 219, 220, 235, 236, 237, 252, 278, 279, 280, 293, 343, 402, 404, 457, 472, 475, 495, 500, 535, 540, 545, 546, 547, 551, 556, 560, 562, 563], "run_forward": 13, "b_filter": 13, "collector": [13, 155, 455], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 168, 215, 437, 476, 512, 534, 551, 553, 554, 557, 560, 561], "propag": [13, 100], "filter": [13, 235, 236, 237, 238, 239, 240, 242, 246, 278, 279, 280, 281, 282, 283, 285, 289, 300, 353, 465, 477, 495, 507, 551, 561], "which": [13, 42, 56, 83, 110, 149, 151, 154, 155, 160, 165, 169, 177, 191, 195, 196, 198, 202, 203, 204, 206, 209, 210, 211, 213, 215, 219, 220, 235, 236, 237, 248, 253, 278, 279, 280, 290, 301, 306, 315, 317, 318, 320, 321, 322, 326, 331, 332, 333, 335, 340, 354, 359, 361, 366, 372, 395, 399, 431, 433, 453, 465, 469, 471, 472, 475, 476, 477, 493, 494, 495, 497, 498, 500, 503, 504, 507, 511, 512, 513, 514, 516, 520, 523, 526, 532, 533, 534, 537, 540, 545, 546, 547, 550, 551, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565], "batch": [13, 149, 168, 225, 227, 228, 233, 234, 255, 268, 270, 271, 276, 277, 454, 494, 498, 499, 512, 550, 551, 554, 560, 562, 563, 566], "infer": [13, 43, 105, 140, 168, 169, 195, 299, 336, 370, 372, 395, 437, 454, 475, 476, 493, 498, 499, 512, 513, 532, 549, 551, 552, 554, 557, 560, 561, 563], "collect": [13, 16, 43, 149, 168, 250, 252, 255, 257, 258, 260, 293, 306, 308, 359, 361, 455, 465, 476, 554, 561, 563], "inform": [13, 149, 155, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 223, 224, 255, 257, 258, 266, 267, 331, 333, 334, 335, 337, 361, 465, 469, 470, 473, 474, 475, 476, 477, 478, 480, 484, 487, 490, 493, 498, 504, 512, 514, 527, 530, 533, 534, 537, 538, 540, 541, 545, 546, 551, 556, 557, 558, 560, 561, 565, 566, 567], "dure": [13, 158, 160, 197, 201, 213, 219, 220, 331, 335, 372, 465, 476, 497, 512, 514, 539, 549, 550, 551, 554, 560, 561, 565], "call": [13, 42, 160, 165, 170, 195, 203, 204, 209, 304, 333, 357, 437, 471, 472, 475, 494, 506, 521, 523, 533, 551, 554, 560, 561, 562], "prior": [13, 88, 563], "after": [13, 78, 148, 168, 193, 197, 202, 204, 209, 219, 220, 235, 248, 252, 255, 278, 290, 293, 333, 400, 414, 460, 465, 472, 476, 495, 497, 498, 499, 502, 507, 511, 512, 525, 526, 529, 533, 537, 549, 550, 551, 554, 556, 557, 559, 560, 561, 562, 563], "count": [13, 472, 495, 557], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 152, 164, 168, 169, 193, 219, 220, 234, 235, 236, 248, 252, 277, 278, 279, 290, 293, 297, 298, 302, 304, 308, 315, 355, 357, 361, 380, 389, 394, 413, 414, 426, 430, 435, 442, 460, 465, 494, 495, 511, 512, 543, 553, 557, 562], "make_symbol_block": 13, "gluon": [13, 362, 395, 514], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 153, 168, 426, 475, 477, 563], "quantizable_nod": 13, "strategi": [13, 168, 209, 219, 220, 221, 237, 264, 280, 300, 353, 474, 475, 476, 477, 482, 493, 494, 500, 507, 512, 520, 532, 537, 552, 553, 554, 556, 557, 558, 564, 565], "config": [13, 44, 115, 116, 118, 122, 168, 175, 176, 177, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 223, 224, 235, 266, 267, 278, 317, 318, 320, 321, 322, 323, 328, 331, 332, 333, 334, 335, 350, 351, 353, 362, 389, 394, 411, 412, 413, 414, 418, 426, 436, 454, 457, 464, 465, 472, 474, 476, 477, 482, 492, 494, 497, 498, 499, 500, 502, 505, 507, 511, 512, 513, 514, 534, 535, 550, 551, 553, 554, 556, 557, 559, 561, 563], "tune": [13, 45, 149, 175, 177, 219, 220, 223, 224, 235, 237, 266, 267, 278, 280, 299, 336, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 362, 372, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 426, 454, 465, 475, 476, 493, 494, 495, 497, 500, 507, 509, 512, 513, 532, 536, 539, 541, 542, 549, 551, 552, 556, 558, 559, 561, 565], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 151, 160, 161, 165, 168, 169, 175, 181, 182, 189, 191, 192, 198, 199, 200, 201, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 223, 224, 225, 228, 232, 235, 236, 237, 238, 239, 240, 242, 247, 248, 254, 255, 258, 266, 267, 268, 271, 275, 278, 279, 280, 281, 282, 283, 285, 290, 294, 296, 297, 298, 301, 304, 305, 306, 310, 315, 331, 332, 333, 335, 350, 352, 354, 357, 358, 359, 362, 370, 372, 395, 411, 413, 414, 418, 426, 428, 435, 442, 454, 457, 460, 464, 465, 469, 470, 471, 472, 475, 477, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 507, 510, 511, 513, 514, 515, 519, 520, 521, 523, 533, 535, 537, 538, 542, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 174, 219, 220, 225, 227, 228, 233, 234, 255, 268, 270, 271, 276, 277, 459, 474, 476, 494, 498, 508, 527, 530, 534, 537, 545, 552, 554, 557, 558, 560, 564, 566], "depend": [13, 223, 224, 253, 266, 267, 362, 395, 454, 470, 503, 504, 538, 553, 554, 563], "algorithm": [13, 44, 151, 154, 168, 176, 188, 216, 220, 301, 308, 316, 353, 354, 361, 431, 453, 457, 459, 472, 475, 476, 477, 498, 499, 504, 507, 510, 521, 526, 551, 554, 561, 565], "set": [13, 43, 51, 96, 105, 115, 148, 149, 160, 165, 168, 175, 184, 215, 217, 219, 220, 223, 224, 225, 235, 237, 240, 252, 253, 258, 259, 266, 267, 268, 278, 280, 283, 293, 304, 310, 323, 328, 332, 337, 357, 361, 362, 370, 394, 395, 414, 418, 453, 454, 462, 465, 469, 472, 476, 492, 494, 495, 498, 500, 502, 504, 506, 507, 508, 511, 512, 513, 515, 517, 519, 533, 534, 535, 536, 537, 538, 542, 545, 551, 553, 554, 557, 559, 560, 563, 565], "kl": [13, 16, 219, 220, 455, 459, 476, 477, 493, 504, 512, 563, 565], "minmax": [13, 16, 442, 476, 477, 493, 504, 554, 565], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 159], "calibdata": 13, "threshold": [13, 171, 455, 459, 511], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 165, 173, 182, 184, 192, 198, 205, 209, 210, 219, 220, 223, 224, 234, 235, 237, 244, 248, 252, 254, 255, 256, 259, 266, 267, 277, 278, 280, 287, 290, 293, 300, 308, 310, 315, 331, 333, 337, 344, 350, 353, 361, 362, 366, 372, 395, 405, 411, 414, 454, 457, 459, 460, 465, 467, 474, 476, 510, 512, 515, 520, 523, 526, 532, 539, 540, 543, 552, 556, 559, 563, 564], "amp": [13, 149, 515, 522, 541, 557], "wrap": [13, 105, 116, 149, 177, 182, 254, 304, 357, 437, 471, 500, 527, 530], "dataiterload": 13, "data_it": [13, 195], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 455], "8001": [13, 455, 540, 545, 546, 547], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 170, 171, 173, 174, 311, 314, 365, 367, 369, 370, 371, 475, 476, 477, 508, 514, 525, 527, 529, 530, 533, 552, 563], "up": [13, 100, 206, 252, 293, 332, 500, 501, 504, 507, 523, 527, 530, 532, 551, 552, 553, 554, 559, 562, 563, 565], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 475], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 160, 220, 225, 268, 298, 350, 411, 449, 475, 494, 498, 502, 507, 512, 515, 520, 521, 522, 523, 526, 532, 552, 563, 566], "static": [14, 41, 42, 47, 165, 173, 195, 220, 298, 350, 395, 411, 426, 428, 442, 449, 475, 476, 477, 497, 502, 507, 512, 515, 520, 521, 522, 523, 526, 532, 535, 543, 545, 546, 547, 555, 560, 563, 566], "format": [14, 18, 43, 54, 148, 168, 219, 220, 235, 236, 237, 278, 279, 280, 298, 304, 310, 350, 357, 411, 414, 460, 474, 476, 477, 495, 500, 502, 511, 512, 513, 514, 515, 537, 540, 552, 554, 557, 558], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 513, 554], "reduce_rang": [15, 41, 42, 219, 220, 477, 553], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 149, 161, 168, 169, 179, 193, 219, 220, 237, 250, 252, 257, 260, 280, 293, 349, 351, 361, 362, 363, 365, 367, 369, 370, 371, 395, 410, 412, 414, 433, 435, 436, 454, 460, 461, 464, 465, 494], "augment": 15, "dump": [15, 158, 168, 175, 298, 465, 470, 537, 554, 558, 561], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 154, 169, 433, 442, 465, 557], "percentil": [16, 44, 140, 169, 435, 493], "99": [16, 566], "999": [16, 565], "option": [16, 44, 105, 149, 151, 160, 168, 169, 197, 219, 220, 223, 224, 235, 252, 266, 267, 278, 293, 297, 298, 304, 310, 331, 337, 350, 353, 357, 361, 362, 395, 411, 413, 414, 431, 435, 437, 454, 458, 460, 465, 476, 477, 494, 495, 504, 508, 512, 526, 540, 543, 545, 546, 547, 551, 554, 557, 559, 560, 562, 563, 565], "number": [16, 44, 67, 68, 105, 140, 149, 168, 169, 189, 193, 199, 200, 219, 220, 233, 236, 248, 252, 276, 279, 290, 293, 305, 306, 308, 331, 340, 358, 359, 361, 389, 394, 399, 414, 457, 465, 492, 494, 495, 500, 511, 540, 542, 551, 554, 557, 559, 560, 562, 563], "bin": [16, 160, 161, 465, 503], "histogram": [16, 455, 465, 534, 561], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 160, 168, 174, 175, 177, 189, 191, 195, 196, 206, 214, 215, 216, 217, 219, 220, 223, 224, 235, 238, 239, 248, 252, 253, 266, 267, 278, 281, 282, 290, 293, 304, 308, 332, 340, 343, 350, 357, 361, 362, 395, 399, 404, 411, 413, 414, 437, 454, 455, 457, 465, 471, 476, 477, 493, 495, 497, 504, 511, 512, 513, 518, 535, 537, 543, 549, 551, 553, 554, 557, 558, 560, 562, 563, 565], "default": [16, 44, 97, 148, 149, 151, 160, 168, 169, 176, 177, 215, 217, 219, 220, 223, 224, 227, 235, 236, 237, 248, 252, 266, 267, 270, 278, 279, 280, 290, 293, 297, 298, 301, 310, 332, 352, 354, 361, 370, 413, 428, 431, 435, 437, 442, 449, 457, 460, 465, 471, 475, 494, 495, 504, 507, 508, 511, 512, 513, 520, 523, 525, 529, 537, 540, 545, 546, 547, 549, 551, 553, 554, 556, 557, 559, 560, 562, 563, 565], "float": [16, 43, 44, 140, 141, 149, 151, 155, 169, 197, 202, 212, 215, 219, 220, 235, 248, 278, 290, 302, 304, 305, 306, 333, 355, 357, 358, 359, 410, 414, 435, 442, 449, 462, 465, 495, 511, 553, 554, 560, 562], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 158, 168, 181, 188, 189, 191, 192, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 219, 220, 237, 252, 255, 257, 258, 280, 293, 294, 301, 304, 305, 306, 308, 311, 314, 315, 316, 323, 326, 328, 331, 332, 333, 334, 335, 340, 354, 357, 358, 359, 361, 362, 366, 370, 399, 454, 465, 470, 476, 494, 495, 501, 504, 511, 512, 514, 525, 526, 529, 532, 540, 551, 552, 554, 557, 560, 562, 563, 565], "between": [16, 42, 143, 174, 208, 219, 220, 252, 293, 305, 308, 358, 361, 389, 394, 465, 471, 475, 476, 477, 493, 497, 498, 507, 511, 512, 523, 554, 557, 558, 559, 560, 562, 563], "0": [16, 43, 44, 54, 90, 105, 148, 149, 151, 159, 160, 168, 169, 171, 173, 177, 182, 189, 191, 193, 215, 219, 220, 225, 227, 234, 235, 238, 239, 242, 248, 252, 254, 255, 268, 270, 277, 278, 281, 282, 285, 290, 293, 298, 299, 308, 315, 323, 328, 336, 361, 372, 395, 400, 414, 435, 442, 460, 471, 494, 495, 498, 500, 502, 503, 504, 508, 509, 511, 512, 513, 518, 520, 525, 529, 535, 545, 546, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565], "100": [16, 175, 177, 189, 219, 220, 237, 280, 414, 426, 430, 492, 495, 500, 506, 512, 537, 553, 554, 562, 563, 565, 566], "klcalibr": 16, "128": [16, 44, 149, 152, 154, 168, 169, 235, 238, 239, 252, 278, 281, 282, 293, 433, 442, 495, 512, 554, 557, 562, 566], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 151, 533, 534, 557], "ep": [16, 174, 513], "0001": [16, 189, 219, 220, 498, 512, 553], "smooth": [16, 140, 141, 148, 165, 173, 219, 220, 349, 551, 563], "discret": [16, 189, 563], "mai": [16, 148, 158, 160, 317, 318, 320, 321, 322, 414, 437, 469, 470, 476, 493, 497, 502, 503, 509, 513, 525, 529, 535, 538, 540, 552, 554, 557, 560, 563], "have": [16, 74, 83, 141, 148, 160, 192, 196, 198, 205, 233, 255, 276, 301, 304, 331, 333, 354, 357, 361, 395, 413, 414, 469, 470, 476, 477, 494, 495, 497, 500, 504, 509, 511, 512, 513, 515, 532, 535, 538, 540, 545, 546, 547, 549, 551, 554, 555, 557, 560, 563, 564], "been": [16, 149, 160, 192, 198, 205, 301, 331, 333, 354, 472, 477, 498, 512, 513, 532, 557, 560], "normal": [16, 33, 252, 293, 306, 359, 512, 541, 549, 557, 560, 562], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 151, 160, 163, 165, 168, 169, 171, 173, 174, 175, 182, 189, 191, 203, 204, 206, 219, 220, 225, 227, 234, 235, 236, 238, 239, 242, 243, 248, 252, 253, 254, 255, 268, 270, 277, 278, 279, 281, 282, 285, 286, 290, 293, 299, 304, 305, 306, 308, 323, 328, 333, 336, 337, 357, 358, 359, 361, 372, 395, 413, 414, 435, 442, 448, 457, 460, 465, 469, 471, 474, 475, 477, 493, 494, 495, 497, 498, 502, 504, 505, 508, 510, 511, 513, 516, 518, 534, 535, 542, 543, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565], "replac": [16, 149, 161, 165, 168, 169, 306, 359, 500, 512, 523, 558], "zero": [16, 43, 44, 149, 154, 169, 202, 215, 252, 293, 333, 433, 435, 465, 474, 537, 551, 554, 557, 560, 562, 563], "multipli": [16, 219, 220, 557], "scale": [16, 43, 44, 100, 141, 143, 149, 154, 163, 165, 167, 168, 169, 173, 174, 248, 252, 290, 293, 433, 435, 448, 554, 557, 559, 560, 562, 563], "factor": [16, 141, 151, 557, 560, 566], "take": [16, 197, 220, 223, 224, 228, 252, 257, 266, 267, 271, 293, 331, 340, 361, 362, 395, 399, 454, 469, 471, 472, 494, 497, 498, 504, 512, 532, 551, 554, 556, 557, 562, 563, 565], "correspond": [16, 155, 195, 206, 219, 220, 235, 278, 301, 304, 308, 354, 357, 361, 437, 457, 465, 475, 504, 512, 551, 553, 554, 559, 563], "amount": [16, 560], "off": [16, 67, 68, 70, 470, 557], "non": [16, 332, 465, 471, 497, 557, 563], "ref": [16, 148], "http": [16, 154, 155, 191, 199, 200, 209, 210, 211, 235, 237, 278, 280, 301, 302, 304, 305, 306, 331, 333, 334, 354, 355, 357, 358, 359, 361, 395, 433, 442, 471, 474, 495, 497, 505, 508, 509, 512, 521, 527, 530, 534, 536, 537, 538, 539, 540, 543, 545, 546, 547, 551, 558], "hanj": 16, "c": [16, 74, 237, 280, 465, 495, 503, 508, 557, 563], "illinoi": 16, "edu": [16, 237, 280, 495], "cs412": 16, "bk3": 16, "diverg": [16, 455, 459, 477, 493, 498, 563], "pdf": 16, "github": [16, 155, 199, 200, 211, 235, 278, 301, 302, 305, 306, 331, 334, 354, 355, 358, 359, 361, 395, 470, 474, 495, 497, 501, 508, 509, 512, 521, 527, 530, 534, 536, 537, 538, 539, 540, 543, 546, 547, 558], "com": [16, 155, 199, 200, 211, 235, 278, 301, 302, 305, 306, 331, 334, 354, 355, 358, 359, 361, 395, 469, 474, 495, 497, 505, 508, 509, 512, 515, 521, 534, 536, 537, 539, 540, 543, 546, 547, 558, 559, 566], "apach": [16, 509], "incub": 16, "blob": [16, 155, 199, 200, 301, 302, 305, 306, 331, 354, 355, 358, 359, 361, 395, 512, 521, 543, 546, 547], "master": [16, 199, 200, 211, 301, 302, 305, 306, 331, 334, 354, 355, 358, 359, 361, 395, 512, 563], "python": [16, 75, 148, 158, 160, 237, 256, 280, 300, 353, 414, 465, 467, 470, 471, 495, 497, 500, 503, 508, 512, 517, 523, 526, 532, 536, 537, 539, 540, 542, 545, 547, 551, 552, 562], "contrib": [16, 300, 353], "py": [16, 148, 155, 175, 202, 219, 220, 302, 304, 305, 306, 333, 355, 357, 358, 359, 414, 471, 475, 497, 500, 508, 512, 517, 519, 520, 521, 527, 530, 534, 536, 537, 539, 540, 542, 543, 545, 546, 547, 554, 558, 561], "microsoft": [16, 474, 475], "onnxruntim": [16, 219, 220, 231, 237, 244, 274, 280, 287, 309, 389, 475, 493, 494, 507, 508, 513, 535, 553], "main": [16, 154, 184, 189, 206, 211, 259, 334, 426, 430, 433, 436, 449, 471, 494, 497, 500, 512, 519, 521, 533, 542, 551, 554, 557], "tool": [16, 148, 297, 465, 474, 475, 512, 525, 529, 535, 538, 539, 540, 551, 552, 554], "arrai": [16, 43, 44, 148, 160, 252, 293, 304, 315, 357, 465, 562], "small": [16, 67, 68, 69, 70, 402, 472, 537, 538, 551, 557, 563, 566], "probabl": [16, 219, 220, 459, 557], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 193, 206, 306, 359, 469, 512, 525, 529, 538, 545, 546, 551, 561], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 161], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 151, 160, 182, 202, 223, 224, 232, 235, 254, 266, 267, 275, 278, 332, 333, 350, 395, 411, 454, 472, 477, 495, 511, 531, 551, 554, 560, 563], "qoper": [18, 34, 219, 220, 502, 535], "float16activationoper": 18, "float16": [18, 21, 43, 149, 437, 460, 495, 557], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 308, 361, 503, 511, 527, 530, 558], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 471, 560], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 351, 412], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 168, 298, 475], "mode": [41, 42, 43, 45, 110, 160, 165, 244, 287, 304, 350, 357, 370, 411, 449, 462, 464, 465, 475, 476, 497, 507, 525, 529, 537, 538, 554, 556, 557, 563], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 168, 169, 174, 219, 220, 223, 224, 266, 267, 297, 298, 308, 343, 350, 361, 400, 404, 411, 426, 430, 435, 442, 457, 460, 464, 465, 470, 474, 475, 477, 497, 504, 505, 511, 512, 513, 522, 534, 535, 536, 537, 553, 554, 556, 557, 558, 559, 560, 561, 563, 565, 566], "add_qdq_pair_to_weight": [41, 219, 220, 554], "optypes_to_exclude_output_qu": [41, 219, 220, 554], "dedicated_qdq_pair": [41, 219, 220, 554], "smoothquant": [42, 165, 168, 173, 474, 510, 552, 557, 564], "onnxrt": [42, 43, 44, 235, 237, 244, 252, 278, 280, 287, 293, 308, 361, 388, 463, 475, 497, 513, 534, 554, 566], "get_quant_dequant_output": 42, "input_data": [42, 494], "output_data": 42, "loss": [42, 182, 219, 220, 254, 299, 308, 323, 328, 336, 361, 437, 454, 493, 497, 498, 499, 500, 501, 510, 511, 512, 513, 523, 535, 537, 550, 551, 552, 554, 557, 560, 563, 565], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 168, 169, 179, 185, 195, 196, 201, 215, 217, 219, 220, 223, 224, 257, 261, 266, 267, 297, 298, 301, 331, 354, 361, 362, 370, 395, 431, 435, 437, 454, 460, 461, 465, 471, 475, 476, 498, 499, 500, 502, 504, 506, 511, 512, 514, 523, 532, 533, 535, 540, 541, 545, 546, 547, 550, 551, 553, 554, 557, 558, 560, 561, 562, 563, 565], "numpi": [42, 43, 67, 68, 70, 105, 148, 252, 293, 304, 315, 357, 503, 560, 562], "7": [42, 169, 175, 219, 220, 372, 435, 477, 492, 503, 504, 512, 551, 554, 558, 560, 563, 566], "bit": [42, 44, 149, 152, 168, 169, 219, 220, 413, 435, 477, 493, 499, 513, 552, 554, 557, 560], "execut": [42, 43, 54, 154, 160, 175, 202, 203, 204, 219, 220, 333, 337, 339, 394, 395, 396, 398, 433, 454, 457, 464, 465, 497, 498, 499, 512, 513, 517, 518, 525, 526, 529, 532, 533, 534, 535, 539, 542, 550, 551, 554, 557, 559, 563, 566], "provid": [42, 43, 44, 102, 105, 110, 149, 177, 195, 223, 224, 252, 266, 267, 293, 299, 304, 323, 328, 336, 337, 357, 362, 395, 454, 458, 460, 472, 474, 475, 476, 477, 492, 494, 497, 499, 500, 501, 507, 508, 510, 511, 512, 513, 514, 515, 519, 523, 526, 532, 533, 534, 540, 541, 551, 553, 554, 557, 560, 561, 563, 564, 565, 566], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 220, 297, 298, 502], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 151, 155, 158, 160, 168, 169, 174, 177, 181, 185, 188, 193, 195, 197, 199, 200, 201, 202, 206, 207, 208, 209, 211, 212, 213, 219, 220, 223, 224, 234, 235, 236, 237, 238, 239, 240, 242, 252, 255, 261, 262, 266, 267, 277, 278, 279, 280, 281, 282, 283, 285, 293, 301, 304, 305, 306, 308, 317, 318, 320, 321, 322, 323, 328, 331, 333, 335, 336, 337, 340, 343, 354, 357, 358, 359, 361, 362, 372, 395, 399, 404, 413, 414, 428, 437, 442, 454, 464, 465, 469, 470, 471, 472, 475, 476, 477, 493, 494, 495, 498, 499, 500, 502, 503, 504, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 523, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 545, 546, 547, 551, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564], "quant_dequant_data": 42, "qtype": [42, 43, 475], "3": [42, 44, 148, 149, 160, 204, 220, 237, 252, 280, 293, 304, 357, 414, 465, 471, 472, 474, 493, 494, 495, 498, 500, 502, 504, 505, 508, 511, 512, 513, 515, 519, 523, 525, 529, 534, 539, 540, 542, 543, 545, 549, 551, 553, 554, 557, 558, 559, 560, 562, 563, 566], "scheme": [42, 43, 44, 149, 152, 163, 168, 169, 435, 448, 475, 476, 477, 494, 504, 523, 557, 563, 565], "sym": [42, 43, 44, 149, 169, 435, 476, 477, 504, 554, 557, 565], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 155, 168, 169, 435, 465, 471, 476, 560, 561], "asym": [42, 43, 44, 149, 152, 163, 168, 169, 435, 448, 477, 504, 557, 565], "ortsmoothqu": 42, "fake": [42, 44, 113, 163, 165, 169, 173, 413, 435, 448, 512, 554, 557, 560], "channel": [42, 43, 44, 143, 165, 169, 173, 174, 193, 196, 201, 219, 220, 248, 252, 290, 293, 331, 435, 460, 474, 475, 477, 507, 508, 515, 517, 522, 537, 551, 557, 562, 566], "For": [42, 44, 149, 168, 169, 173, 195, 196, 199, 200, 211, 220, 237, 252, 280, 293, 305, 306, 308, 331, 334, 358, 359, 361, 362, 395, 435, 469, 471, 473, 475, 477, 498, 499, 500, 502, 504, 507, 515, 517, 518, 520, 523, 534, 535, 540, 551, 556, 557, 560, 561, 563, 565, 566], "more": [42, 148, 149, 165, 173, 199, 200, 252, 293, 331, 437, 472, 473, 474, 476, 493, 495, 498, 500, 502, 505, 507, 508, 510, 512, 513, 515, 523, 527, 530, 535, 540, 549, 550, 551, 556, 557, 560, 563, 564, 566], "detail": [42, 151, 165, 173, 176, 195, 252, 293, 465, 466, 469, 474, 476, 477, 493, 498, 504, 505, 506, 510, 511, 512, 513, 515, 523, 532, 540, 541, 551, 557, 558, 559, 560, 561, 563, 564], "pleas": [42, 149, 154, 155, 165, 173, 191, 199, 200, 201, 209, 210, 211, 219, 220, 235, 236, 237, 240, 278, 279, 280, 283, 331, 333, 334, 361, 395, 414, 433, 471, 472, 473, 474, 475, 492, 493, 495, 499, 500, 502, 508, 510, 511, 513, 515, 516, 520, 523, 539, 540, 541, 551, 554, 556, 557, 558, 559, 560, 563, 564], "refer": [42, 149, 154, 155, 165, 173, 191, 199, 200, 201, 209, 210, 211, 215, 219, 220, 235, 278, 301, 302, 308, 331, 333, 334, 354, 355, 361, 395, 414, 433, 471, 475, 476, 492, 494, 495, 497, 499, 500, 502, 506, 508, 509, 511, 512, 513, 515, 520, 523, 534, 535, 537, 539, 540, 541, 549, 553, 555, 558, 562, 563], "accur": [42, 154, 165, 173, 210, 433, 442, 551, 557, 560], "effici": [42, 165, 173, 472, 474, 493, 494, 498, 515, 540, 550, 551, 552, 557, 560, 563], "post": [42, 97, 98, 154, 165, 173, 209, 220, 223, 224, 266, 267, 395, 433, 442, 469, 474, 475, 476, 497, 499, 500, 502, 507, 508, 515, 521, 532, 542, 551, 552, 555, 557, 560, 561, 563], "train": [42, 57, 80, 149, 154, 165, 173, 181, 203, 204, 207, 209, 210, 219, 220, 223, 224, 235, 237, 252, 262, 266, 267, 278, 280, 293, 294, 310, 333, 353, 395, 433, 442, 457, 472, 474, 475, 476, 482, 495, 497, 498, 499, 502, 507, 513, 515, 521, 532, 537, 545, 550, 552, 555, 557, 559, 560, 563, 565], "larg": [42, 43, 165, 173, 210, 474, 494, 498, 510, 512, 552, 555, 557, 560, 566], "languag": [42, 165, 173, 210, 301, 354, 469, 474, 502, 510, 536, 552, 555, 557, 560], "2": [42, 43, 44, 54, 74, 105, 109, 149, 160, 165, 169, 171, 173, 175, 197, 203, 204, 219, 220, 236, 253, 279, 304, 306, 308, 333, 340, 357, 359, 361, 372, 399, 414, 435, 465, 471, 475, 493, 494, 495, 497, 498, 504, 507, 508, 509, 510, 511, 513, 536, 542, 543, 545, 546, 547, 549, 551, 552, 554, 555, 557, 558, 559, 560, 562, 563, 564], "spiq": [42, 165, 173, 560], "free": [42, 165, 173, 209, 223, 224, 266, 267, 395, 469, 521, 526, 534, 542, 549, 559, 560], "per": [42, 43, 44, 165, 169, 173, 175, 219, 220, 253, 435, 437, 459, 475, 477, 494, 540, 551, 556, 557, 566], "we": [42, 43, 67, 68, 70, 74, 86, 143, 160, 165, 173, 174, 175, 195, 199, 206, 219, 220, 234, 253, 255, 277, 301, 304, 354, 357, 402, 469, 471, 475, 476, 477, 494, 497, 500, 502, 504, 510, 511, 512, 519, 520, 523, 527, 530, 532, 533, 535, 538, 545, 546, 547, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 561, 563, 564], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 160, 165, 167, 169, 173, 174, 175, 184, 189, 192, 198, 205, 219, 220, 235, 253, 255, 259, 278, 298, 310, 331, 333, 344, 395, 405, 413, 414, 437, 442, 465, 474, 475, 476, 477, 492, 493, 494, 497, 498, 500, 503, 504, 510, 512, 513, 520, 533, 551, 552, 553, 554, 555, 560, 561, 563, 564, 565], "inplac": [42, 165, 449], "mean": [42, 44, 149, 165, 169, 177, 197, 206, 219, 220, 248, 252, 290, 293, 306, 308, 331, 343, 359, 361, 404, 435, 471, 476, 477, 494, 497, 500, 504, 511, 512, 518, 537, 551, 554, 555, 557, 560, 562, 563, 565, 566], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 151, 152, 155, 165, 167, 168, 169, 174, 191, 192, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 219, 220, 298, 331, 333, 350, 361, 395, 402, 411, 413, 435, 437, 442, 465, 466, 474, 475, 476, 477, 493, 497, 499, 504, 506, 510, 512, 534, 545, 549, 551, 552, 553, 554, 555, 560, 561, 563, 564, 565], "chang": [42, 96, 143, 149, 165, 174, 203, 204, 206, 207, 209, 210, 213, 219, 220, 333, 335, 402, 465, 470, 476, 494, 500, 503, 509, 512, 515, 525, 526, 529, 532, 538, 551, 561, 562, 563], "you": [42, 160, 165, 219, 220, 233, 235, 276, 278, 333, 361, 395, 437, 470, 471, 476, 494, 495, 497, 500, 508, 509, 511, 513, 515, 517, 518, 520, 525, 529, 532, 533, 534, 535, 536, 537, 538, 540, 551, 554, 557, 558, 559, 560, 561, 564], "can": [42, 43, 44, 143, 151, 155, 160, 165, 174, 188, 195, 196, 197, 202, 210, 211, 213, 219, 220, 223, 224, 234, 237, 252, 253, 255, 266, 267, 277, 280, 293, 304, 306, 308, 331, 333, 335, 357, 359, 361, 362, 372, 395, 437, 454, 465, 471, 472, 474, 475, 476, 477, 492, 494, 495, 497, 498, 499, 500, 502, 504, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 525, 526, 527, 529, 530, 532, 533, 535, 537, 538, 539, 540, 542, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566], "recov": [42, 165, 464, 465, 475, 499], "helper": [43, 45, 110, 116, 148, 168, 235, 236, 237, 251, 278, 279, 280, 292, 296, 297, 298, 370, 463], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 149, 161, 165, 168, 195, 207, 215, 220, 235, 252, 253, 278, 293, 317, 318, 320, 321, 322, 332, 333, 352, 400, 413, 449, 460, 465, 470, 495, 520, 551, 554, 562, 563, 565], "simple_progress_bar": 43, "total": [43, 202, 252, 293, 308, 333, 361, 495, 497, 551, 557, 562, 566], "progress": [43, 190, 192, 205, 237, 280, 526, 532, 534, 551, 554], "bar": [43, 237, 280, 532, 552], "case": [43, 70, 74, 151, 160, 169, 175, 220, 234, 251, 252, 253, 277, 292, 293, 299, 323, 328, 336, 372, 477, 494, 498, 499, 500, 504, 506, 511, 516, 520, 532, 533, 534, 537, 543, 546, 547, 549, 551, 552, 554, 557, 558, 560, 562, 564, 565, 566], "where": [43, 151, 160, 219, 220, 304, 308, 357, 361, 413, 465, 477, 493, 497, 498, 525, 529, 533, 560, 561], "tqdm": [43, 512], "t": [43, 67, 68, 70, 143, 151, 160, 174, 197, 219, 220, 252, 255, 293, 306, 359, 471, 475, 497, 498, 500, 512, 513, 533, 538, 551, 554, 557, 563, 565], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 219, 220, 238, 239, 248, 252, 281, 282, 290, 293, 435, 437, 460, 476, 477, 495, 497, 502, 504, 515, 537, 553, 554, 557, 560, 561, 562, 565], "its": [43, 60, 96, 148, 155, 195, 204, 207, 209, 215, 220, 231, 237, 252, 274, 280, 293, 296, 302, 303, 333, 340, 355, 356, 399, 469, 495, 498, 509, 511, 513, 523, 525, 529, 532, 533, 551, 557, 559, 562, 563], "string": [43, 45, 116, 148, 149, 154, 158, 160, 175, 182, 184, 188, 189, 195, 197, 202, 211, 212, 213, 215, 216, 219, 220, 237, 254, 259, 280, 294, 299, 301, 304, 310, 311, 312, 314, 315, 323, 328, 331, 332, 333, 334, 335, 336, 354, 357, 366, 370, 431, 433, 457, 462, 465, 511, 562], "represent": [43, 158, 469, 471, 493, 499, 551, 554], "quanttyp": [43, 413], "repres": [43, 197, 201, 202, 211, 212, 215, 237, 242, 280, 285, 304, 306, 308, 357, 359, 361, 469, 477, 493, 495, 502, 540, 551, 554, 555, 563], "make_quant_nod": 43, "make": [43, 105, 143, 174, 188, 197, 202, 211, 213, 233, 276, 331, 333, 335, 465, 469, 475, 476, 492, 494, 504, 511, 512, 520, 525, 529, 532, 534, 551, 554, 555, 556, 557, 559, 560, 563], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 220], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 149, 151, 235, 278, 465, 470, 493, 495, 511, 551, 557, 560, 563], "transpos": [43, 73, 201, 248, 252, 293, 297, 331, 557, 562], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 169, 435, 503, 504, 557, 560, 563], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 437, 513, 515, 523, 556], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 175, 236, 240, 243, 279, 283, 286, 343, 404, 511, 536, 563], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 155, 168, 248, 252, 290, 293, 301, 304, 305, 306, 308, 354, 357, 358, 359, 361, 375, 395, 402, 454, 464, 465, 469, 472, 474, 494, 497, 498, 500, 507, 509, 511, 512, 520, 521, 532, 533, 536, 540, 541, 542, 543, 549, 551, 552, 554, 557, 559, 560, 561, 562, 563, 564, 566], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 149, 169, 248, 290, 305, 306, 315, 340, 358, 359, 399, 435, 465, 511, 532, 537, 538, 554, 557, 560, 562, 563], "To": [43, 304, 357, 372, 470, 476, 477, 495, 497, 500, 513, 516, 519, 525, 527, 529, 530, 534, 538, 551, 553, 556, 557, 558, 560, 563, 565], "pack": [43, 61], "comput": [43, 44, 105, 149, 151, 155, 168, 301, 302, 305, 306, 308, 354, 355, 358, 359, 361, 437, 454, 465, 493, 494, 499, 502, 511, 512, 513, 515, 526, 535, 551, 552, 554, 557, 560, 563], "linear": [43, 149, 154, 163, 167, 168, 169, 173, 193, 195, 196, 201, 206, 215, 219, 220, 331, 433, 435, 448, 471, 498, 502, 512, 551, 557, 560, 563], "transform": [43, 50, 143, 145, 146, 147, 149, 154, 164, 167, 209, 235, 236, 237, 238, 239, 240, 242, 244, 246, 278, 279, 280, 281, 282, 283, 285, 287, 289, 300, 353, 433, 442, 449, 471, 472, 474, 493, 495, 498, 499, 500, 501, 505, 510, 512, 515, 520, 521, 522, 523, 535, 543, 546, 547, 551, 552, 556, 557, 560, 561, 563, 565, 566], "when": [43, 54, 64, 70, 148, 158, 160, 177, 196, 202, 207, 215, 219, 220, 235, 236, 244, 252, 278, 279, 287, 293, 302, 332, 333, 355, 395, 437, 454, 469, 472, 476, 494, 495, 512, 523, 525, 526, 529, 533, 534, 537, 538, 539, 541, 545, 551, 554, 557, 560, 562, 563], "uint8": [43, 169, 248, 290, 304, 352, 357, 413, 435, 475, 495, 504, 553, 554, 562, 565], "rmin": [43, 554], "rmax": [43, 554], "m": [43, 155, 169, 199, 200, 219, 220, 331, 435, 470, 498, 508, 515, 517, 520, 523, 527, 530, 540, 551, 566], "max": [43, 104, 143, 149, 169, 174, 177, 189, 219, 220, 252, 293, 305, 306, 340, 358, 359, 399, 435, 465, 474, 497, 508, 512, 535, 537, 551, 554, 557, 560, 562, 563], "ab": [43, 154, 169, 191, 209, 210, 333, 433, 435, 442, 551, 554, 560], "np": [43, 252, 293, 340, 399, 500, 542, 560, 562, 563], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 168, 191, 199, 215, 220, 238, 239, 281, 282, 305, 306, 331, 333, 343, 358, 359, 404, 455, 465, 493, 495, 511, 512, 523, 535, 549, 551, 554, 557, 559, 560, 563, 565], "quantize_data": 43, "add": [43, 53, 64, 109, 119, 148, 184, 215, 219, 220, 235, 237, 259, 278, 280, 332, 350, 411, 465, 470, 471, 477, 494, 495, 500, 502, 504, 511, 512, 527, 530, 534, 535, 542, 545, 546, 559, 560, 561, 563, 564], "necessari": [43, 211, 469, 472, 476, 514, 533, 551, 559, 563], "intermedi": [43, 155, 182, 219, 220, 254, 471, 507, 554], "full": [43, 149, 235, 236, 237, 278, 279, 280, 460, 465, 474, 493, 495, 497, 503, 509, 533, 538, 551, 557, 558], "equat": [43, 306, 308, 359, 361, 554, 560], "r": [43, 143, 174, 497, 508, 533, 534, 536, 537, 539, 540, 554, 566], "": [43, 44, 105, 143, 148, 160, 174, 177, 195, 196, 197, 201, 202, 203, 204, 207, 209, 210, 215, 216, 217, 219, 220, 234, 237, 251, 252, 253, 255, 257, 277, 280, 292, 293, 306, 331, 333, 359, 361, 362, 366, 395, 431, 437, 462, 465, 469, 470, 472, 476, 477, 497, 498, 500, 502, 504, 507, 512, 513, 520, 523, 525, 529, 532, 535, 537, 540, 550, 551, 552, 553, 554, 557, 558, 559, 560, 563, 564, 565, 566], "q": [43, 44, 107, 109, 131, 557, 560], "z": [43, 493, 498, 560], "real": [43, 238, 255, 281, 476, 493, 500, 534, 541, 552, 554], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 160, 161], "new_dtyp": 43, "cast": [43, 51, 556, 562], "info": [43, 168, 169, 179, 199, 200, 215, 250, 255, 260, 331, 366, 460, 461, 465, 471, 497, 514, 542, 547], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 465], "low": [43, 149, 223, 224, 238, 239, 266, 267, 281, 282, 299, 309, 336, 362, 475, 476, 492, 493, 495, 500, 512, 513, 537, 552, 554, 557, 560, 563], "high": [43, 238, 239, 281, 282, 495, 497, 508, 537, 552, 563], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 168, 195, 206, 216, 217, 220, 437, 465, 475, 494, 504, 506, 512, 553, 565], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 308, 315, 340, 361, 399, 465, 475, 497, 510, 518, 525, 529, 532, 533, 535, 537, 551, 557, 559, 560, 561, 563], "item": [43, 215, 217, 219, 220, 251, 292, 332, 350, 411, 431, 493, 500, 551, 560, 563], "trt_env_setup": 43, "environ": [43, 175, 253, 469, 492, 525, 529, 532, 540, 543, 545, 546, 547, 563], "variabl": [43, 158, 175, 212, 219, 220, 237, 253, 280, 340, 399, 413, 508, 551, 563], "tensorrt": [43, 493, 513, 554], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 566], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 298, 340, 399], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 197, 238, 239, 248, 252, 281, 282, 290, 293, 304, 357, 474, 495, 504, 505, 512, 534, 535, 557, 560, 562], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 152, 163, 168, 169, 413, 435, 448, 557], "has_zp": 44, "blob_siz": 44, "how": [44, 160, 169, 181, 191, 197, 203, 204, 209, 210, 219, 220, 252, 293, 294, 331, 435, 470, 471, 473, 475, 494, 495, 498, 499, 500, 506, 511, 512, 526, 527, 530, 531, 532, 534, 545, 546, 547, 551, 552, 554, 560, 562, 563, 564, 565], "mani": [44, 169, 361, 395, 435, 494, 508, 557, 563, 565], "element": [44, 149, 169, 199, 200, 215, 233, 276, 304, 331, 357, 435, 465, 495, 507, 511, 551, 557, 560], "one": [44, 109, 110, 115, 160, 168, 169, 175, 197, 201, 206, 209, 210, 211, 213, 252, 262, 293, 301, 304, 308, 310, 331, 334, 335, 354, 357, 361, 435, 437, 472, 475, 493, 498, 499, 500, 504, 507, 508, 511, 512, 513, 515, 516, 520, 521, 523, 525, 526, 529, 532, 533, 534, 537, 538, 539, 540, 542, 549, 550, 551, 553, 554, 555, 557, 558, 560, 562, 563], "zp": [44, 169, 435, 560], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 149, 163, 168, 169, 435, 448, 560], "k_block": 44, "q_weight": 44, "accuracy_level": 44, "matmulfpq4": 44, "accuraci": [44, 175, 215, 219, 220, 223, 224, 266, 267, 294, 299, 308, 323, 328, 336, 361, 362, 372, 395, 400, 414, 437, 454, 462, 471, 474, 476, 477, 493, 494, 495, 497, 499, 500, 501, 502, 510, 511, 512, 523, 532, 534, 541, 542, 545, 546, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 564, 565, 566], "level": [44, 179, 195, 400, 414, 461, 469, 542, 560, 563], "unset": 44, "jbla": 44, "kernel": [44, 173, 219, 220, 475, 476, 563], "fp16": [44, 220, 350, 411, 554], "4": [44, 54, 149, 152, 163, 168, 169, 175, 197, 206, 219, 220, 244, 247, 248, 252, 287, 290, 293, 301, 302, 304, 354, 355, 357, 413, 414, 435, 442, 448, 469, 475, 477, 492, 500, 501, 504, 507, 508, 511, 512, 520, 540, 542, 546, 551, 554, 557, 560, 562, 563, 566], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "32": [44, 149, 152, 169, 193, 413, 435, 442, 500, 506, 557, 566], "ratio": [44, 143, 174, 197, 202, 215, 219, 220, 248, 252, 290, 293, 333, 495, 512, 535, 551, 562, 566], "group": [44, 149, 151, 169, 212, 318, 435, 474, 507, 551, 557, 561, 562, 563, 566], "clip": [44, 169, 435, 557, 560], "qdq_tensor": 44, "quant": [44, 148, 168, 169, 219, 220, 350, 411, 428, 435, 471, 510, 512, 554], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 252, 293, 413, 471, 475, 497, 503, 507, 513, 518, 520, 536, 537, 538, 554, 556, 557, 560, 561, 562, 564], "divis": 44, "pade": 44, "rtn_quantiz": [44, 169, 435], "weight_config": [44, 149, 152, 154, 167, 169, 433, 435], "round": [44, 143, 149, 169, 174, 435, 442, 474, 552, 554, 557, 560], "nearst": [44, 169, 435], "method": [44, 141, 143, 149, 158, 160, 168, 169, 179, 188, 212, 219, 220, 228, 233, 234, 235, 237, 244, 252, 255, 271, 276, 277, 278, 280, 287, 293, 314, 315, 316, 350, 411, 413, 435, 437, 457, 458, 460, 461, 471, 472, 474, 493, 494, 495, 497, 498, 499, 511, 512, 550, 551, 554, 556, 557, 560, 562, 563], "modelproto": [44, 296, 362, 514], "onnxmodel": [44, 369, 388], "fc2": [44, 168, 169, 435], "rtn": [44, 168, 436, 442, 555, 557], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 163, 167, 181, 206, 208, 262, 302, 355, 426, 433, 436, 448, 469, 476, 477, 512, 515, 517, 523, 532, 536, 537, 542, 550, 551, 554, 556, 559, 560, 563, 564, 565], "salient": [44, 169, 551, 557], "apply_awq_clip": 44, "mse": [44, 168, 169, 219, 220, 300, 308, 342, 353, 361, 395, 403, 465, 497, 511, 537, 553, 557, 558], "prepare_input": 44, "n_sampl": [44, 149, 152, 168, 169], "sampl": [44, 77, 149, 168, 169, 219, 220, 228, 233, 235, 236, 237, 248, 252, 271, 276, 278, 279, 280, 290, 293, 308, 315, 340, 361, 399, 472, 494, 495, 501, 507, 533, 554, 557, 560, 562, 563, 565, 566], "session": [44, 148, 234, 277, 370, 512, 561], "awq_quant": [44, 169], "enable_auto_scal": [44, 169, 557], "enable_mse_search": [44, 169, 435, 442, 557], "awar": [44, 152, 155, 169, 181, 220, 262, 310, 331, 402, 454, 475, 476, 477, 493, 499, 500, 502, 507, 532, 542, 550, 552, 557, 563], "awq": [44, 169, 555, 557], "enabl": [44, 109, 149, 151, 155, 169, 202, 219, 220, 333, 437, 476, 477, 500, 508, 513, 515, 517, 520, 521, 523, 534, 536, 537, 539, 542, 551, 552, 557, 560, 563], "gptq": [44, 169, 435, 442, 555, 557], "w": [44, 154, 252, 293, 433, 551, 560, 562], "h": [44, 219, 220, 252, 293, 500, 540, 541, 545, 546, 547, 562], "blocksiz": 44, "percdamp": [44, 442, 557], "01": [44, 149, 219, 220, 442, 512, 553, 557, 563, 565, 566], "actord": [44, 557], "perchannel": 44, "hessian": [44, 155, 402, 557, 563], "matrix": [44, 361, 395, 474, 523, 564], "percent": 44, "averag": [44, 305, 306, 308, 358, 359, 361, 511, 512, 557, 563, 566], "diagon": [44, 557], "dampen": [44, 151], "rearrang": [44, 209, 551, 557], "consid": [44, 148, 151, 308, 361, 469, 493, 498, 533, 563], "diag": 44, "error": [44, 105, 149, 155, 160, 179, 308, 343, 361, 404, 461, 497, 511, 516, 537, 538, 541, 557, 560, 563], "gptq_quantiz": [44, 169], "get_ops_recurs": 45, "prefix": [45, 148, 153, 160, 161, 166, 168, 175, 515, 520, 561], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 153, 155, 160, 168, 188, 216, 217, 219, 220, 251, 292, 304, 311, 314, 316, 357, 431, 453, 465], "yaml": [45, 215, 216, 217, 220, 223, 224, 235, 237, 253, 266, 267, 278, 280, 294, 299, 310, 311, 312, 314, 323, 328, 336, 337, 418, 464, 465, 475, 477, 506, 511, 512, 549, 553, 561, 562], "file": [45, 105, 148, 158, 160, 161, 168, 172, 185, 211, 215, 216, 219, 220, 223, 224, 235, 236, 237, 240, 251, 252, 258, 261, 266, 267, 278, 279, 280, 283, 292, 293, 294, 299, 304, 310, 311, 312, 314, 323, 328, 332, 334, 336, 337, 357, 362, 372, 378, 379, 383, 395, 464, 465, 470, 472, 475, 476, 477, 500, 503, 506, 509, 511, 512, 514, 518, 527, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 545, 546, 547, 549, 553, 554, 557, 561, 562], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 151, 154, 177, 263, 299, 304, 336, 349, 350, 357, 361, 395, 410, 411, 414, 433, 465, 471, 478, 480, 484, 487, 490, 497, 502, 507, 508, 512, 517, 521, 522, 523, 539, 540, 544, 558, 559, 563, 567], "pytorch_ipexadaptor": 45, "intel": [45, 184, 199, 200, 211, 256, 259, 295, 300, 307, 308, 331, 334, 342, 348, 353, 360, 361, 373, 395, 403, 409, 467, 469, 470, 472, 473, 475, 476, 477, 493, 495, 496, 498, 499, 501, 502, 504, 505, 509, 510, 513, 514, 515, 520, 522, 523, 534, 535, 536, 537, 539, 540, 549, 550, 551, 552, 554, 556, 557, 558, 560, 561, 563, 564, 565], "extens": [45, 158, 160, 465, 472, 474, 475, 504, 507, 508, 510, 512, 513, 514, 516, 521, 522, 523, 527, 530, 531, 535, 551, 552, 554, 557, 560, 563, 564, 565], "ipex": [45, 162, 168, 219, 220, 464, 507, 512, 513, 517, 521, 522, 560], "pytorch_fxadaptor": 45, "fx": [45, 168, 219, 344, 405, 507, 513, 521, 522, 536, 552, 554, 556], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 195, 234, 277, 299, 363, 370, 394, 471, 475, 495, 498, 500, 506, 514, 515, 534, 537, 554, 555, 556, 561], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 149, 154, 159, 160, 162, 168, 219, 220, 433, 437, 460, 465, 474, 476, 492, 493, 507, 512, 513, 515, 517, 523, 532, 540, 552, 553, 554, 555, 556, 557, 561], "querybackendcap": [46, 475, 476], "tensorflowadaptor": 47, "stock": [47, 521, 560], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 219, 220, 297, 513, 554, 560], "tensorflowqueri": [47, 475], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 219, 512], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 350, 411, 476, 477], "graphconvert": 48, "qt_config": 48, "recip": [48, 195, 219, 220, 299, 336, 474, 512, 555, 557, 560, 563], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 476, 556], "data_load": [48, 49, 475], "calib_func": [48, 152, 168, 169, 395, 556], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 219, 553], "without": [49, 90, 148, 207, 252, 293, 333, 352, 413, 469, 498, 500, 512, 523, 534, 537, 551, 552, 553, 563, 564], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 192], "bf16convert": [50, 556], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "dequantize_cast_optim": [52, 87, 111], "biasadd": [53, 59, 64, 66, 109, 504], "convertaddtobiasaddoptim": 53, "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 154, 433, 476, 477, 497, 502, 504, 537, 560, 561, 563], "addv2": [53, 69, 504], "layout": 54, "convertlayoutoptim": 54, "convers": [54, 55, 220, 310, 470, 475, 476, 512, 513, 554, 556, 560], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 151, 183, 186, 187, 188, 190, 192, 195, 204, 209, 216, 219, 220, 256, 262, 299, 300, 316, 336, 340, 353, 399, 454, 455, 462, 465, 472, 474, 492, 497, 498, 499, 500, 504, 505, 507, 508, 510, 512, 514, 515, 517, 519, 520, 523, 526, 534, 537, 538, 539, 541, 543, 552, 553, 554, 556, 557, 559, 560, 561, 563, 565], "nchw": [54, 248], "nhwc": [54, 248], "It": [54, 160, 181, 185, 197, 223, 224, 261, 266, 267, 306, 308, 315, 331, 336, 343, 359, 361, 362, 395, 400, 404, 454, 475, 476, 477, 493, 497, 498, 512, 518, 521, 526, 532, 533, 534, 535, 537, 538, 540, 551, 554, 557, 558, 559, 563, 565], "exist": [54, 175, 217, 253, 370, 431, 465, 502, 511, 519, 563], "abov": [54, 475, 476, 477, 498, 534, 535, 537, 540, 551, 554, 560, 563], "graph_def": [54, 140, 141, 148, 297, 362, 370, 394, 395], "leakyrelu": [55, 560], "convertleakyreluoptim": 55, "below": [55, 66, 74, 219, 220, 337, 361, 395, 470, 471, 474, 475, 476, 477, 494, 497, 498, 500, 506, 511, 515, 517, 525, 526, 529, 532, 535, 540, 549, 550, 551, 553, 554, 557, 559, 560, 561, 563, 564], "subgraph": [55, 66, 105, 166, 555, 563], "mul": [55, 65, 66, 69, 169, 173, 502, 557, 560], "maximum": [55, 149, 197, 202, 219, 220, 235, 252, 278, 293, 302, 333, 340, 355, 370, 399, 477, 493, 495, 497, 512, 551, 554, 560, 562], "note": [55, 158, 201, 304, 344, 357, 405, 472, 474, 476, 477, 494, 497, 500, 502, 504, 508, 510, 512, 517, 520, 525, 529, 532, 534, 538, 540, 542, 551, 554, 557, 560, 561, 563, 564, 565], "coeffici": [55, 149, 212, 551], "less": [55, 148, 168, 219, 220, 465, 492, 498, 512, 539, 551], "than": [55, 148, 235, 252, 278, 293, 431, 437, 465, 472, 474, 492, 495, 506, 537, 545, 549, 550, 551, 554, 557, 559, 562, 563], "valid": [55, 67, 68, 105, 202, 205, 215, 219, 220, 237, 280, 304, 332, 333, 357, 370, 472, 474, 475, 495, 497, 498, 501, 504, 507, 509, 512, 523, 537, 551, 554, 557, 558], "nan": 56, "random": [56, 148, 149, 188, 219, 220, 248, 252, 290, 293, 300, 316, 340, 342, 353, 399, 403, 465, 472, 512, 551, 553, 562, 565], "convertnantorandom": 56, "const": [56, 57, 63, 64, 67, 68, 70, 82, 98], "consist": [56, 63, 470, 471, 540, 560, 563], "placehold": [57, 233, 276], "convertplaceholdertoconst": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 168, 188, 189, 190, 191, 192, 195, 196, 202, 203, 204, 205, 207, 209, 210, 212, 216, 219, 220, 237, 280, 300, 321, 322, 324, 329, 333, 350, 353, 411, 475, 495, 504, 507, 512, 533, 550, 553, 560, 563, 566], "inject": [59, 512], "dummi": [59, 195, 238, 239, 281, 282, 308, 361, 474, 495, 505, 511, 512, 534], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 471, 475, 504], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 228, 271, 414, 472, 476, 477, 494, 553, 557, 563], "fetch": [61, 168, 172, 228, 271, 476, 495, 545, 546, 547], "reshap": [61, 67, 68, 73, 560], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 165, 173, 179, 461, 471, 473, 494, 540, 560], "fold": [62, 63, 168, 169, 298, 504, 557, 560], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 149, 196, 199, 200, 219, 220, 235, 251, 252, 278, 292, 293, 302, 306, 331, 355, 359, 475, 495, 504, 551, 557, 562], "self": [63, 168, 169, 195, 219, 220, 372, 437, 475, 476, 494, 495, 507, 511, 534, 559, 561, 563], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 160, 177, 196, 219, 220, 235, 278, 400, 465, 497, 512, 525, 529, 533, 545, 546, 557, 560, 563, 565], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 504], "math": [66, 554], "fuseconvwithmathoptim": 66, "elimin": [66, 539], "sub": [66, 168, 175, 195, 253, 472, 563], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 370, 380, 476], "strip": [67, 68, 70, 83, 84, 148, 561], "port": [67, 68, 70, 534, 541], "other": [67, 68, 70, 149, 151, 158, 165, 173, 234, 277, 306, 359, 370, 469, 471, 476, 477, 497, 504, 507, 509, 512, 514, 535, 549, 551, 554, 560, 562, 563, 566], "underli": [67, 68, 70, 160], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 223, 224, 266, 267, 395, 414, 431, 437, 453, 454, 471, 475, 494, 495, 498, 499, 500, 511, 512, 554, 560, 561, 563], "entri": [67, 68, 70, 155, 184, 259, 299, 337, 426, 430, 436, 449, 465, 509], "index": [67, 68, 70, 105, 175, 215, 220, 228, 233, 237, 271, 276, 280, 315, 465, 495, 511, 533, 537, 557, 560], "everi": [67, 68, 70, 197, 200, 202, 219, 220, 331, 333, 475, 494, 520, 525, 529, 555, 557, 563], "identifi": [67, 68, 70, 160, 304, 357, 370, 540, 551, 557], "want": [67, 68, 70, 195, 219, 220, 233, 235, 276, 278, 333, 400, 437, 454, 471, 475, 494, 495, 500, 512, 520, 532, 533, 540, 549, 554, 557, 559, 561, 563], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 158, 160, 168, 192, 198, 205, 215, 304, 331, 332, 333, 357, 362, 414, 474, 534, 551, 552], "valueerror": [67, 68, 70, 168, 304, 357, 414, 503], "If": [67, 68, 70, 74, 160, 169, 175, 219, 220, 223, 224, 237, 252, 266, 267, 280, 293, 332, 362, 395, 414, 435, 437, 454, 470, 471, 476, 492, 494, 495, 500, 508, 509, 511, 512, 518, 526, 527, 530, 532, 538, 543, 549, 551, 554, 557, 559, 560, 561, 562, 563], "isn": [67, 68, 70], "present": [67, 68, 70, 497, 540, 552, 560], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 195, 237, 280, 352, 413, 495], "ha": [67, 68, 70, 74, 149, 154, 160, 201, 202, 253, 301, 331, 333, 354, 414, 433, 470, 472, 475, 476, 477, 494, 502, 507, 512, 513, 518, 532, 537, 538, 540, 543, 551, 553, 554, 556, 559, 560, 563], "access": [67, 68, 70, 216, 217, 220, 460, 465, 527, 530, 534], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 160, 168, 197, 202, 203, 204, 209, 210, 219, 220, 235, 252, 278, 293, 304, 308, 315, 331, 332, 333, 337, 339, 340, 357, 361, 396, 398, 399, 413, 414, 437, 457, 464, 465, 469, 470, 471, 472, 475, 476, 494, 495, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 518, 520, 523, 526, 532, 534, 535, 537, 538, 539, 540, 543, 549, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 220, 297, 298, 502], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 149, 227, 252, 270, 293, 495, 498, 557, 562], "instancenorm": [68, 560], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 497], "erf": 69, "layernorm": [70, 560], "fuselayernormoptim": 70, "remap": [70, 160], "smaller": [70, 252, 293, 498, 512, 551, 562], "fusedbatcnormv3": 70, "And": [70, 470, 471, 492, 512, 518, 560], "further": [70, 220, 469, 513, 514, 515, 517, 526, 532, 554], "restrict": [70, 160, 219, 220, 551, 559], "2d": [70, 560], "3d": [70, 552, 560], "kera": [70, 116, 184, 195, 215, 220, 237, 244, 259, 280, 287, 365, 370, 426, 428, 430, 476, 494, 500, 514, 522, 523, 558], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 216, 219, 220, 512, 551], "cfg": [71, 72, 168, 216, 350, 411, 457, 476, 477], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 475, 476, 477, 504, 512, 554, 557, 558, 560, 564], "ident": [74, 80, 196, 469, 498], "three": [74, 215, 235, 278, 339, 396, 398, 471, 475, 476, 493, 508, 513, 526, 540, 550, 554, 556, 559, 560, 561], "d": [74, 168, 498, 506, 533, 535, 541, 551, 566], "those": [74, 160, 343, 404, 465, 497, 498, 499, 506, 512, 513, 550, 551, 554, 563], "child": [74, 154, 161, 433, 561], "b1": 74, "c1c2": 74, "d1": [74, 465], "c1": 74, "c2": 74, "memori": [74, 149, 168, 299, 323, 328, 336, 372, 465, 493, 494, 499, 512, 513, 515, 549, 551, 554, 555, 557, 560, 563, 566], "bound": [74, 175, 189, 252, 293, 304, 340, 357, 399, 511, 562], "like": [74, 96, 98, 148, 149, 160, 195, 215, 220, 223, 224, 225, 237, 266, 267, 268, 280, 299, 308, 333, 336, 337, 361, 370, 395, 454, 470, 471, 472, 475, 476, 497, 498, 499, 507, 520, 535, 537, 550, 551, 554, 557, 558, 560, 563], "relu": [74, 78, 109, 471, 504, 560, 561], "relu6": [74, 504], "updat": [74, 151, 161, 168, 191, 197, 215, 333, 361, 395, 426, 462, 503, 510, 511, 512, 518, 523, 526, 542, 551, 557, 560, 563, 564], "graphdef": [74, 148, 370, 394, 514], "grappler": [75, 504], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 153, 163, 167, 182, 192, 234, 252, 254, 255, 257, 258, 277, 293, 304, 308, 357, 361, 366, 370, 448, 556], "leverag": [75, 460, 472, 474, 498, 502, 515, 532, 550, 554, 557, 563], "built": [75, 184, 206, 221, 222, 226, 231, 235, 236, 241, 243, 245, 246, 248, 249, 252, 257, 259, 264, 265, 269, 272, 274, 278, 279, 284, 286, 288, 289, 290, 291, 293, 337, 361, 364, 372, 395, 454, 472, 475, 495, 500, 512, 525, 529, 549, 554, 559, 562, 563, 565], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 149, 165, 173, 471, 476, 494, 507, 512, 515, 551, 554, 556, 557, 560, 561], "print": [77, 154, 155, 195, 308, 361, 414, 433, 465, 500, 511, 512, 534, 535, 551, 560, 563], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 149, 158, 160, 175, 361, 395, 431, 437, 464, 465, 470, 471, 475, 492, 495, 498, 499, 500, 506, 511, 512, 533, 540, 551, 553, 554, 556, 560, 565], "move": [78, 149, 160, 471, 538, 553, 557, 558], "squeez": [78, 471], "movesqueezeafterreluoptim": 78, "match": [78, 102, 160, 195, 304, 305, 357, 358, 498, 533, 557], "pre": [79, 116, 161, 195, 223, 224, 235, 266, 267, 278, 362, 395, 442, 454, 495, 498, 499, 512, 520, 537, 551, 552, 554, 557, 561, 563], "entranc": [79, 189, 226], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 558], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 167, 474, 552, 557, 560], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 169, 209, 220, 235, 252, 278, 293, 304, 357, 437, 465, 475, 477, 492, 494, 495, 498, 500, 504, 512, 516, 520, 525, 529, 551, 553, 554, 557, 560, 561, 562, 563], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 515, 561], "switchoptim": 85, "condit": [85, 235, 236, 237, 252, 278, 279, 280, 293, 339, 396, 398, 495, 509, 562, 563], "graphrewriterbas": 86, "abstract": [86, 177, 181, 189, 252, 293, 294, 299, 336, 475, 477, 506], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 515, 551], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 196, 237, 280, 301, 304, 354, 357, 469, 470, 471, 472, 475, 476, 477, 494, 495, 498, 499, 500, 504, 508, 509, 511, 512, 513, 514, 515, 516, 517, 525, 529, 534, 536, 537, 540, 545, 550, 551, 553, 554, 557, 560, 561, 563], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 465, 466], "th": [89, 90], "gpu": [89, 90, 97, 149, 160, 219, 220, 437, 474, 492, 507, 512, 513, 517, 523, 532, 553, 554, 555], "freezevaluewithoutcalibtransform": 90, "95": [90, 308, 361, 511, 566], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 561], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 510, 552, 566], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 372, 471, 475, 477, 494, 512, 520, 525, 529, 533, 539, 549, 551, 552, 559, 560, 563, 566], "better": [96, 219, 220, 223, 224, 266, 267, 315, 362, 395, 454, 499, 511, 513, 551, 552, 554, 557, 559, 560, 563], "perform": [96, 140, 149, 151, 175, 212, 219, 220, 235, 247, 248, 253, 278, 290, 299, 323, 328, 336, 343, 361, 372, 395, 400, 404, 437, 470, 471, 472, 475, 476, 492, 495, 496, 497, 499, 501, 502, 507, 508, 511, 512, 513, 514, 515, 517, 521, 523, 526, 532, 538, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 563, 565, 566], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 225, 250, 252, 255, 257, 258, 260, 268, 293, 372, 472, 512, 522, 526, 532, 540, 550, 554, 560, 562, 563], "postcseoptim": 98, "duplic": [98, 108, 340, 399], "quantizev2": 98, "decreas": [98, 537, 551], "size": [98, 149, 169, 199, 200, 227, 228, 234, 237, 243, 248, 252, 270, 271, 277, 280, 286, 290, 293, 331, 370, 372, 435, 465, 469, 476, 494, 495, 500, 503, 512, 532, 533, 549, 551, 554, 555, 557, 560, 562, 565, 566], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 201, 331, 551], "export": [101, 220, 300, 304, 353, 357, 474, 505, 518, 533, 535, 561, 564], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 220, 297, 298, 502], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 169, 435], "onnxopschema": 104, "domain": [104, 105, 219, 220, 551, 563], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 176, 203, 204, 209, 210, 299, 304, 336, 357, 370, 389, 394, 469, 471, 477, 493, 513, 525, 529, 532, 540, 551, 552, 560, 563], "get_max_supported_opset_vers": 104, "packag": [104, 475, 503, 508, 532, 533, 552, 558, 563], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 470, 540, 541, 545, 546, 547, 563], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 168, 235, 236, 248, 252, 278, 279, 290, 293, 378, 379, 383, 426, 476, 477, 562], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 195], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 160, 240, 252, 283, 293, 332, 495, 556, 559], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 220, 297, 298, 502], "input_shap": [105, 239, 282, 495], "input_dtyp": 105, "sometim": [105, 471, 497, 554], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 151, 211, 251, 252, 292, 293, 301, 306, 334, 354, 359, 502, 509, 521, 543, 546, 547, 551, 552, 557, 560, 562, 566], "datatyp": [105, 168, 556, 563, 566], "save_protobuf": 105, "path": [105, 140, 148, 161, 168, 195, 211, 215, 216, 235, 236, 237, 252, 278, 279, 280, 293, 294, 297, 298, 299, 310, 311, 312, 314, 323, 328, 332, 334, 336, 337, 350, 362, 370, 394, 395, 411, 460, 462, 465, 471, 472, 475, 495, 497, 500, 506, 511, 512, 513, 514, 518, 521, 532, 535, 537, 540, 545, 546, 547, 550, 557, 562, 565], "as_text": 105, "save": [105, 148, 159, 160, 192, 215, 219, 220, 237, 280, 297, 298, 337, 370, 395, 454, 455, 460, 465, 471, 475, 506, 512, 513, 514, 516, 520, 525, 529, 535, 540, 545, 546, 547, 550, 554, 555, 557, 560], "protobuf": [105, 370, 535], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 533], "dest": 105, "equal": [105, 143, 148, 174, 414, 431, 465, 551, 557], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 160, 237, 280, 308, 361, 476, 501, 505, 507, 511, 523, 532, 538, 542, 551, 553, 560, 563], "df": 105, "initialize_name_count": 105, "avoid": [105, 160, 168, 169, 235, 278, 471, 561], "conflict": [105, 503], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 252, 293, 562], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 151, 160, 197, 219, 220, 437, 470, 498, 501, 505, 515, 520, 551, 557, 558, 560, 563], "const_node_valu": 105, "graph_output": 105, "constant": [105, 298, 300, 340, 342, 348, 353, 399, 403, 409, 458, 494, 504, 535, 562], "tf": [105, 116, 141, 148, 195, 215, 234, 235, 236, 237, 252, 277, 278, 279, 280, 293, 368, 370, 500, 508, 514, 552, 556, 558, 562], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 476], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 560], "pair": [107, 219, 220, 476, 494, 512, 513, 558], "befor": [107, 109, 154, 173, 188, 197, 202, 204, 209, 211, 213, 219, 220, 235, 278, 331, 333, 335, 433, 470, 477, 494, 495, 498, 499, 500, 503, 504, 508, 512, 527, 530, 536, 537, 554, 557, 559, 561, 563], "merg": [108, 227, 270, 350, 411, 527, 530, 561, 563], "mergeduplicatedqdqoptim": 108, "y": [109, 219, 220, 252, 293, 340, 399, 497, 503, 518, 560, 562], "shareqdqforitexypatternoptim": 109, "break": [109, 500, 512], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 195, 370, 559, 560, 561], "under": [110, 219, 220, 237, 280, 431, 437, 453, 460, 464, 470, 472, 474, 495, 509, 511, 512, 515, 520, 521, 532, 540, 550, 551, 552, 555, 557, 561, 563], "singleton": [110, 465], "specifi": [110, 149, 160, 168, 175, 215, 219, 220, 223, 224, 252, 253, 266, 267, 293, 299, 304, 308, 310, 311, 314, 323, 328, 336, 337, 357, 361, 362, 395, 414, 454, 464, 465, 476, 477, 500, 504, 511, 512, 520, 534, 540, 544, 545, 546, 547, 549, 551, 553, 557, 562, 563, 565], "graphrewriterhelp": 110, "encapsul": [110, 177, 223, 224, 266, 267, 362, 395, 454, 514], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 476], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 306, 359, 475, 561, 563], "fakequant": 113, "per_channel": [113, 476, 477, 504, 554, 565], "8": [113, 149, 160, 169, 219, 220, 251, 292, 435, 442, 471, 476, 493, 504, 508, 539, 540, 551, 552, 557, 560, 563, 566], "channel_axi": [113, 171, 174], "symmetr": [113, 149, 460, 477, 554, 557, 562, 563], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 149, 158, 168, 169, 175, 220, 337, 361, 372, 464, 492, 498, 499, 515, 538, 539, 540, 544, 546, 547, 551, 552, 557, 559], "There": [115, 337, 339, 396, 398, 497, 498, 504, 507, 512, 515, 537, 539, 540, 557, 560, 563, 565], "instanc": [115, 116, 175, 219, 220, 223, 224, 253, 266, 267, 305, 306, 308, 311, 314, 317, 318, 320, 321, 322, 340, 352, 358, 359, 361, 362, 395, 399, 413, 428, 437, 454, 462, 465, 469, 470, 471, 475, 492, 512, 517, 523, 557, 563, 565, 566], "global": [115, 197, 219, 220, 317, 318, 320, 321, 322, 331, 413, 426, 465, 471, 512, 551, 553, 563], "class": [116, 158, 168, 192, 198, 205, 315, 362, 395, 471, 472, 476, 494, 495, 498, 511, 512, 523, 549, 550, 554, 558, 561, 563, 565], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 151, 203, 204, 209, 333, 494, 498, 499, 512, 551, 563], "process": [116, 140, 149, 155, 175, 197, 202, 203, 204, 211, 213, 215, 219, 220, 223, 224, 235, 236, 237, 248, 252, 253, 266, 267, 278, 279, 280, 290, 293, 331, 333, 335, 339, 340, 362, 395, 396, 398, 399, 437, 454, 464, 465, 472, 475, 476, 477, 493, 494, 495, 498, 499, 500, 502, 512, 516, 537, 539, 540, 542, 550, 551, 554, 555, 557, 560, 561, 562, 565], "model_nam": [116, 219, 220], "special": [116, 160, 195, 372, 471, 494, 511, 512, 549, 551, 557, 564], "decid": [116, 177, 219, 220, 302, 333, 355, 475, 476, 512, 554, 558, 563], "qat_clone_funct": 116, "leav": [116, 526], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 504], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 504], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 390, 394, 475], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 158, 160, 188, 220, 250, 300, 310, 314, 315, 316, 353, 428, 430, 442, 449, 457, 469, 495, 499, 500, 502, 506, 508, 512, 554, 560], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 213, 252, 293, 335, 337, 472, 497, 498, 499, 507, 512, 513, 525, 529, 540, 551, 553, 555, 560, 562, 563, 565], "staticmethod": 139, "function": [139, 140, 158, 203, 204, 209, 219, 220, 223, 224, 236, 266, 267, 279, 311, 314, 323, 328, 470, 471, 472, 475, 476, 477, 492, 494, 498, 499, 502, 506, 507, 508, 510, 511, 512, 513, 523, 533, 539, 540, 551, 554, 557, 558, 559, 560, 561, 563, 564], "smoothquantcalibr": 140, "dataset": [140, 141, 149, 168, 211, 223, 224, 225, 227, 228, 232, 233, 234, 246, 255, 266, 267, 268, 270, 271, 275, 276, 277, 289, 300, 304, 305, 306, 308, 337, 353, 357, 358, 359, 361, 362, 395, 454, 457, 472, 474, 475, 476, 494, 500, 505, 511, 512, 520, 534, 535, 545, 551, 554, 557, 558, 560, 563, 565, 566], "outlier": [140, 476, 493, 497, 537, 557, 560], "smoothquantcalibrationllm": 140, "model_path": [140, 148, 169, 497, 545], "temp_path": 140, "weight_name_map": 140, "llm": [140, 141, 149, 154, 210, 433, 474, 551, 552, 555, 557, 560], "eval_func": [140, 223, 224, 266, 267, 337, 340, 343, 344, 346, 362, 395, 396, 399, 400, 404, 405, 407, 414, 454, 471, 494, 495, 497, 498, 499, 500, 512, 535, 554, 555, 556, 557, 563, 565], "temporari": [140, 168, 465, 469], "store": [140, 189, 191, 192, 195, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 219, 220, 237, 280, 326, 333, 506], "median": 140, "autotrack": [140, 148], "smoothquantscal": 141, "alpha": [141, 159, 163, 173, 191, 212, 448, 554, 563], "scales_per_op": 141, "individu": [141, 197, 331, 389, 394, 469, 540, 551, 560], "smoothquantscalerllm": 141, "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 297], "default_opset_vers": 142, "bia": [143, 219, 220, 557, 561], "correct": [143, 174, 215, 219, 220, 304, 305, 306, 308, 332, 357, 358, 359, 361, 469, 515], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 498, 507], "our": [143, 168, 219, 220, 472, 474, 502, 512, 533, 534, 537, 559, 564], "task": [143, 235, 242, 278, 285, 308, 361, 495, 498, 499, 502, 507, 511, 512, 535, 539, 542, 551, 555, 557, 560, 566], "close": [143, 174, 493, 541], "w_int8": [143, 174], "u": [143, 174, 515, 534, 539], "w_fp32": [143, 174], "varianc": [143, 174, 497], "differ": [143, 151, 170, 174, 176, 177, 182, 188, 206, 219, 220, 228, 237, 252, 254, 271, 280, 293, 299, 308, 314, 316, 325, 336, 361, 372, 459, 469, 471, 472, 476, 494, 495, 497, 498, 500, 501, 506, 507, 511, 512, 514, 525, 529, 534, 537, 540, 549, 551, 554, 557, 560, 561, 562, 563], "wise": [143, 157, 159, 161, 169, 174, 219, 220, 340, 343, 399, 400, 404, 426, 435, 474, 476, 507, 537, 551, 557, 560, 561, 563, 564, 565], "minim": [143, 151, 174, 340, 399, 476, 477, 493, 498, 501, 511, 512, 525, 529, 551, 554, 563], "scale_c": [143, 174], "shift": [143, 174, 248, 290, 533, 562], "notic": [143, 174, 253, 509, 513, 535, 558], "first": [143, 149, 160, 168, 174, 196, 217, 219, 220, 235, 278, 304, 350, 357, 400, 411, 431, 465, 471, 472, 475, 476, 477, 495, 497, 508, 513, 517, 526, 527, 530, 533, 535, 536, 537, 553, 554, 556, 557, 559, 560, 561, 563, 565], "empir": [143, 174], "solut": [143, 174, 474, 475, 476, 503, 517, 521, 526, 552, 557, 558, 560, 563, 564], "don": [143, 174, 197, 219, 220, 471, 538, 551, 563], "min": [143, 149, 169, 174, 189, 220, 435, 465, 497, 535, 537, 551, 554, 557, 560, 562, 563], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 175, 179, 195, 378, 379, 383, 461, 471, 523, 545, 546, 547, 559, 561, 563], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 498], "1024": [146, 237, 280, 518], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 465], "version1": [148, 431, 465], "version2": [148, 431, 465], "version1_gt_version2": [148, 465], "greater": [148, 431, 465, 545, 551, 563], "version1_eq_version2": [148, 465], "version1_gte_version2": [148, 431, 465], "version1_lte_version2": [148, 465], "disable_random": 148, "seed": [148, 149, 188, 219, 220, 316, 465, 512, 565], "disabl": [148, 219, 220, 469, 532, 537, 556, 557, 560], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 244, 287, 465, 500, 506, 512, 515, 561], "is_ckpt_format": 148, "ckpt": [148, 362, 370, 395, 566], "folder": [148, 237, 242, 280, 285, 362, 395, 464, 495, 520, 525, 529, 538, 545, 546, 547, 557, 561], "is_saved_model_format": 148, "saved_model": [148, 310, 555], "get_estimator_graph": 148, "estim": [148, 149, 308, 361, 370, 563], "input_fn": [148, 370], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 151, 175, 189, 219, 220, 310, 362, 372, 395, 414, 454, 465, 471, 472, 474, 477, 492, 494, 495, 497, 498, 499, 500, 502, 505, 511, 512, 513, 514, 515, 519, 521, 534, 535, 543, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564], "scope": [148, 470, 476, 512], "onc": [148, 160, 184, 213, 259, 335, 339, 396, 398, 476, 477, 494, 532, 538, 551, 552, 563, 566], "both": [148, 220, 469, 472, 475, 499, 512, 516, 535, 537, 539, 551, 553, 554, 557, 560, 563], "compat": [148, 370, 470, 500, 514, 527, 530, 532, 551, 558], "v1": [148, 247, 248, 290, 305, 306, 308, 358, 359, 361, 370, 500, 502, 503, 511, 514, 536, 551, 558, 559, 560, 566], "suffix": 148, "time": [148, 160, 177, 219, 220, 252, 293, 308, 340, 361, 372, 399, 431, 465, 476, 494, 497, 500, 503, 512, 520, 522, 525, 529, 532, 533, 538, 541, 545, 546, 549, 551, 552, 554, 557, 559, 560, 561, 562, 563], "got": [148, 476, 503, 561], "iterator_sess_run": 148, "sess": [148, 370], "iter_op": 148, "feed_dict": [148, 234, 277], "output_tensor": [148, 370], "measur": [148, 253, 362, 459, 472, 475, 492, 497, 498, 511, 512, 557, 561, 563, 566], "integr": [148, 182, 254, 475, 512, 533, 534, 539, 557], "makeiter": 148, "feed": [148, 234, 277, 498, 551], "end": [148, 151, 202, 203, 204, 209, 219, 220, 235, 251, 252, 278, 292, 293, 333, 339, 396, 398, 475, 476, 477, 498, 499, 504, 508, 512, 526, 542, 549, 551, 561, 562, 563], "predict": [148, 252, 257, 293, 301, 305, 306, 308, 354, 358, 359, 361, 395, 472, 498, 511, 523, 557, 560, 561, 562], "pred": [148, 308, 361, 511], "collate_tf_pr": 148, "collat": [148, 168], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 207, 209, 235, 278, 333, 494, 495, 519, 551, 554, 557, 563], "strip_unused_lib": 148, "offici": [148, 301, 305, 306, 354, 358, 359, 469, 560], "r1": 148, "15": [148, 504, 508, 546], "branch": [148, 470], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 149, 155, 160, 161, 165, 195, 206, 215, 217, 219, 220, 315, 332, 370, 414, 431, 455, 457, 465, 474, 476, 534, 535, 541, 552, 557, 561, 563], "val": [148, 215, 237, 240, 280, 283, 332, 497, 512, 537], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 535], "tf_diagnosis_help": 148, "fp32_model": [148, 155, 168, 298, 465, 475, 555], "quan_model": 148, "save_path": [148, 297, 298, 475, 514], "diagnosi": [148, 219, 220, 512, 535, 536, 537, 552, 558, 564], "generate_feed_dict": 148, "input_tensor": [148, 370], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 370], "associ": [148, 160, 304, 357], "search": [148, 154, 169, 188, 189, 195, 209, 216, 220, 223, 224, 266, 267, 299, 301, 311, 314, 315, 316, 336, 340, 354, 399, 433, 435, 465, 474, 507, 511, 515, 516, 526, 551, 552, 557, 560, 561, 563, 564], "look": [148, 206, 475, 477, 504, 511, 534, 535, 537, 560, 565], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 155, 160, 175, 196, 201, 208, 213, 237, 242, 253, 280, 285, 304, 331, 335, 337, 344, 357, 405, 465, 470, 471, 472, 494, 495, 498, 500, 502, 504, 512, 513, 539, 540, 542, 551, 554, 556, 557, 559, 560, 563, 565], "apply_inlin": 148, "func": [148, 168, 465, 554, 565], "inlin": [148, 515, 520, 523], "definit": [148, 163, 228, 233, 271, 276, 448], "concret": [148, 450, 563], "new_graph_def": 148, "construct_function_from_graph_def": 148, "frozen_func": 148, "rebuild": [148, 516, 525, 529], "reconstruct": [148, 552], "new_func": 148, "parse_saved_model": 148, "output_tensor_nam": [148, 370], "_saved_model": 148, "load": [148, 158, 160, 161, 235, 251, 252, 278, 292, 293, 362, 370, 395, 464, 465, 476, 494, 525, 529, 533, 535, 553, 554, 555, 560], "reconstruct_saved_model": 148, "trackabl": 148, "destin": [148, 296, 310], "quant_weight_asym": 149, "v": [149, 151, 523, 532, 551, 563, 565], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 477, 554, 557, 563], "e": [149, 160, 197, 219, 220, 437, 469, 470, 498, 501, 505, 515, 520, 521, 525, 529, 551, 557, 560, 563], "perturb": 149, "minimum": [149, 197, 219, 220, 477, 493, 497, 512, 523, 551, 560, 563], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 169, 435], "hand": [149, 472], "issu": [149, 469, 470, 473, 474, 508, 535, 537, 554, 561], "round_st": 149, "torch": [149, 151, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 168, 169, 173, 192, 195, 196, 198, 206, 216, 219, 220, 298, 362, 395, 431, 460, 464, 471, 474, 477, 478, 498, 500, 502, 512, 513, 514, 515, 520, 523, 535, 554, 557, 560, 561], "straight": 149, "through": [149, 155, 223, 224, 266, 267, 361, 362, 395, 474, 492, 504, 506, 507, 511, 518, 539, 549, 550, 551, 553, 554, 557], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 242, 248, 285, 290, 442, 495, 500, 512, 562], "block_nam": 149, "cach": [149, 235, 278, 437, 503, 554, 557], "get_modul": [149, 161, 165], "nn": [149, 154, 161, 163, 165, 168, 169, 195, 196, 206, 219, 220, 298, 362, 395, 431, 433, 435, 436, 437, 448, 449, 450, 453, 460, 464, 471, 498, 512, 514, 557, 560, 561], "set_modul": [149, 165, 168, 453], "new_modul": [149, 161, 165, 168, 453], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 154, 433, 477], "indic": [149, 160, 181, 219, 220, 228, 233, 235, 271, 276, 278, 294, 304, 315, 357, 471, 494, 503, 535, 540, 561], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 235, 252, 278, 293, 512], "input_oth": 149, "length": [149, 206, 219, 220, 235, 252, 278, 293, 304, 357, 474, 495, 511, 552, 554, 557, 562], "id": [149, 175, 251, 253, 292, 301, 303, 304, 305, 306, 354, 356, 357, 358, 359, 511, 540, 541, 545, 546, 547, 559, 563], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 160, 237, 252, 280, 293, 465, 469, 476, 495, 527, 530, 553, 557, 562], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 193, 195, 196, 219, 220, 237, 240, 247, 248, 280, 283, 290, 299, 309, 336, 471, 474, 492, 495, 507, 512, 513, 515, 517, 520, 521, 523, 525, 526, 527, 529, 530, 532, 539, 542, 550, 551, 554, 560, 562, 563], "mix": [149, 153, 162, 219, 220, 338, 350, 362, 397, 411, 437, 474, 475, 482, 507, 515, 521, 522, 523, 564], "precis": [149, 153, 162, 219, 220, 223, 224, 266, 267, 299, 306, 308, 309, 336, 338, 350, 359, 361, 362, 372, 397, 400, 411, 437, 465, 474, 475, 476, 482, 492, 493, 499, 500, 504, 507, 515, 521, 522, 523, 552, 553, 554, 557, 560, 563, 564], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 252, 293, 449, 469, 511, 515, 540, 545, 546, 547], "dim": [149, 252, 293, 557, 560, 562], "wrappermultiblock": 149, "module_list": 149, "act": [149, 215, 233, 276, 469], "singl": [149, 191, 213, 219, 220, 228, 235, 252, 271, 278, 293, 304, 333, 335, 357, 361, 395, 471, 495, 497, 508, 538, 551, 555, 560], "get_block_nam": 149, "network": [149, 155, 191, 197, 198, 333, 402, 437, 472, 493, 498, 499, 502, 512, 534, 552, 554, 560, 563], "get_tokenizer_funct": 149, "token": [149, 235, 246, 249, 252, 278, 289, 291, 293, 300, 301, 302, 353, 354, 355, 460, 495, 511, 512, 534, 535, 557, 559, 560, 562, 563], "truncat": [149, 235, 252, 278, 293, 495, 562], "field": [149, 177, 219, 220, 237, 280, 304, 357, 471, 475, 477, 500, 512, 559, 563, 565], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 501, 505], "42": [149, 188, 220, 316, 566], "test": [149, 175, 219, 220, 252, 293, 470, 474, 497, 508, 540, 545, 566], "shuffl": [149, 225, 227, 234, 255, 268, 270, 277, 494, 512, 554], "enable_full_rang": [149, 152, 169, 435, 442, 460, 555, 557], "cuda": [149, 160, 215, 437, 513, 515, 517, 551, 554], "lr_schedul": [149, 512, 551], "dataset_nam": [149, 536], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 151, 219, 220, 498, 500, 512], "005": [149, 557], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 251, 292, 471, 541, 563], "512": 149, "sampler": [149, 225, 227, 229, 234, 255, 268, 270, 272, 277, 289, 300, 349, 410, 494, 500], "rand": [149, 515, 560], "n_block": [149, 169, 557], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 152, 169, 352, 413, 435], "signround": 149, "advanc": [149, 155, 219, 220, 469, 474, 476, 482, 510, 551, 554, 565], "cheng": 149, "wenhua": 149, "et": [149, 151, 155, 493, 557, 560], "al": [149, 151, 155, 493, 557, 560], "via": [149, 299, 323, 328, 336, 469, 474, 500, 507, 512, 515, 532, 551, 552], "sign": [149, 352, 413, 470, 474, 477, 493, 534, 552, 554, 557, 559], "gradient": [149, 151, 191, 317, 474, 507, 512, 551, 552, 566], "descent": [149, 151, 195, 474, 552], "arxiv": [149, 154, 191, 209, 210, 333, 433, 442, 474, 493, 551, 552, 557, 560], "preprint": [149, 493, 551, 557, 560], "2309": 149, "05516": 149, "2023": [149, 474, 547, 551, 557, 560, 566], "pytorch": [149, 176, 182, 184, 185, 192, 195, 198, 201, 202, 205, 210, 211, 219, 220, 234, 235, 237, 240, 244, 252, 254, 259, 261, 277, 278, 280, 283, 287, 293, 298, 299, 308, 309, 329, 331, 334, 336, 344, 353, 361, 362, 371, 395, 405, 450, 458, 465, 470, 471, 472, 474, 475, 476, 477, 493, 494, 498, 499, 501, 504, 507, 508, 510, 512, 513, 514, 515, 517, 520, 521, 522, 523, 532, 534, 543, 546, 547, 551, 552, 553, 557, 558, 560, 563, 565], "empti": [149, 161, 177, 219, 220, 518, 555], "layer1": [149, 195, 219, 220, 512, 551, 554], "layer_nam": [149, 220, 551], "rang": [149, 169, 238, 239, 252, 281, 282, 293, 414, 435, 454, 460, 474, 475, 477, 493, 495, 497, 498, 499, 500, 512, 535, 537, 550, 551, 554, 557, 560, 562], "learn": [149, 151, 474, 475, 476, 494, 495, 502, 506, 507, 508, 512, 513, 515, 517, 520, 521, 523, 526, 527, 530, 532, 551, 552, 554, 560, 561, 563, 564], "rate": [149, 151, 512, 551, 554], "schedul": [149, 190, 192, 202, 203, 204, 209, 210, 212, 219, 220, 300, 329, 333, 353, 512, 539, 540, 542, 550], "futur": [149, 173, 223, 224, 255, 266, 267, 507, 510, 512, 523, 545, 546, 547, 564], "accumul": [149, 349, 410, 563], "step": [149, 151, 191, 201, 202, 203, 204, 208, 209, 213, 219, 220, 331, 333, 335, 454, 476, 477, 497, 498, 499, 500, 512, 527, 530, 532, 545, 546, 547, 550, 551, 553, 556, 557, 559, 560, 561, 563], "squar": [149, 308, 343, 361, 404, 497, 511, 537, 563], "gap": [149, 497, 514], "addit": [149, 168, 220, 454, 476, 477, 498, 526, 534, 540, 557, 558, 563], "keyword": [149, 160, 220], "argument": [149, 160, 220, 414, 449, 472, 497, 536, 537, 540, 543, 545, 546, 547, 557], "autooptround": 149, "adamw": [149, 184, 259], "autoadamround": 149, "sgd": [151, 184, 219, 220, 259, 498, 512, 553, 565], "param": [151, 168, 175, 184, 225, 253, 259, 268, 308, 340, 361, 399, 465, 475, 514, 563], "requir": [151, 168, 169, 219, 220, 226, 337, 370, 394, 437, 471, 475, 476, 492, 493, 494, 497, 499, 500, 504, 512, 513, 514, 516, 526, 532, 534, 539, 540, 543, 546, 547, 551, 554, 557, 558, 559, 560, 561, 563, 565], "momentum": [151, 191, 333, 507, 512, 551, 565], "weight_decai": [151, 189, 512, 565], "nesterov": [151, 512, 565], "maxim": [151, 512, 551, 563], "foreach": 151, "differenti": 151, "stochast": 151, "align": [151, 252, 293, 469, 557, 562], "rule": [151, 497, 515, 551], "110mm": 151, "4pt": 151, "textbf": 151, "gamma": 151, "theta_0": 151, "f": [151, 160, 192, 498, 500, 554, 557, 560], "theta": 151, "lambda": [151, 160, 555], "decai": 151, "hspace": 151, "13mm": 151, "mu": [151, 497], "tau": 151, "textit": 151, "ex": 151, "ldot": 151, "5mm": 151, "g_t": 151, "leftarrow": 151, "nabla_": 151, "f_t": 151, "theta_": 151, "neq": 151, "10mm": 151, "15mm": 151, "_t": 151, "_": [151, 223, 224, 266, 267, 395, 471, 472, 474, 475, 476, 493, 497, 498, 500, 502, 504, 512, 513, 514, 515, 521, 525, 527, 529, 530, 537, 540, 541, 549, 551, 554, 557, 558, 559, 560, 561, 563, 565], "g_": 151, "theta_t": 151, "bf": 151, "formula": [151, 551, 560], "On": [151, 554, 566], "deep": [151, 217, 431, 474, 475, 476, 494, 507, 508, 512, 513, 515, 517, 520, 521, 523, 526, 532, 552, 554, 563, 564, 566], "l2": [151, 220, 551], "penalti": [151, 301, 302, 354, 355, 511], "instead": [151, 216, 217, 220, 234, 277, 465, 518, 520, 523, 538, 551, 557], "xdoctest": [151, 160], "skip": [151, 160, 561, 563], "9": [151, 191, 219, 220, 471, 508, 512, 551, 553, 560, 563, 565, 566], "zero_grad": [151, 500, 512, 551], "loss_fn": 151, "backward": [151, 437, 454, 498, 499, 500, 512, 550, 551, 554, 558], "subtli": 151, "sutskev": 151, "some": [151, 193, 195, 219, 220, 235, 278, 332, 476, 477, 495, 497, 502, 508, 511, 512, 534, 535, 536, 537, 540, 549, 551, 554, 556, 557, 560, 561, 563, 564, 566], "written": [151, 512], "v_": 151, "p_": 151, "denot": [151, 560], "veloc": 151, "respect": [151, 469, 504, 551, 560, 565], "contrast": [151, 197, 331, 562], "emploi": 151, "form": [151, 306, 359, 497, 498, 532], "analog": 151, "modifi": [151, 206, 237, 280, 394, 413, 471, 477, 500, 504, 536, 537, 551, 565], "d_p_list": 151, "momentum_buffer_list": 151, "has_sparse_grad": 151, "see": [151, 158, 252, 293, 301, 354, 437, 469, 470, 471, 473, 509, 512, 525, 526, 529, 532, 533, 537, 538, 557, 560, 561, 563], "actawareweightqu": 152, "example_input": [152, 162, 165, 167, 168, 169, 219, 220, 298, 464, 502], "algo": [152, 457], "bf16modulewrapp": 153, "bf16modul": 153, "mixed_precision_model": 153, "bf16_symbolic_trac": 153, "fx_sub_module_list": 153, "trace": [153, 155, 166, 168, 195, 219, 220, 298, 402, 471, 522, 563], "_description_": 153, "is_leaf": [154, 433], "judg": [154, 433], "trace_gptq_target_block": [154, 433], "module_typ": [154, 433], "modulelist": [154, 433], "sequenti": [154, 233, 276, 337, 339, 396, 398, 433, 563], "stack": [154, 433], "structur": [154, 196, 207, 208, 219, 220, 333, 351, 412, 433, 465, 507, 531, 533, 536, 545, 551, 552, 554, 561, 564, 566], "critic": [154, 206, 433, 469], "gptq_related_block": [154, 433], "embed": [154, 168, 433, 493, 551], "transformers_pr": [154, 433], "todo": [154, 235, 238, 278, 281, 304, 350, 357, 411, 433], "transformers_nam": [154, 433], "find_lay": [154, 433], "find_layers_nam": [154, 433], "log_quantizable_layers_per_transform": [154, 433], "transformer_block": [154, 433], "maxq": [154, 433], "gptquantiz": [154, 433], "nsampl": [154, 169, 433, 442, 557], "use_max_length": [154, 169, 433, 442], "pad_max_length": [154, 169, 433, 442], "layer_wis": [154, 169, 433, 442, 464, 555], "compress": [154, 300, 323, 328, 353, 372, 433, 454, 460, 467, 474, 482, 498, 507, 512, 532, 534, 549, 550, 551, 552, 554, 560, 564, 566], "pretrain": [154, 433, 460, 515, 521], "url": [154, 237, 280, 433, 470, 509, 543, 544, 551], "org": [154, 191, 209, 210, 304, 333, 357, 433, 442, 471, 497, 508, 527, 530, 551], "2210": [154, 433, 442, 557], "17323": [154, 433, 442, 557], "node_collector": 155, "hook": [155, 181, 185, 206, 261, 262, 323, 328, 457, 498, 499, 512, 551, 560, 561], "record": [155, 168, 182, 185, 235, 236, 237, 243, 254, 261, 278, 279, 280, 286, 465, 495, 537, 557, 559, 561, 563], "hessiantrac": 155, "q_model": [155, 159, 220, 310, 395, 426, 430, 471, 474, 494, 495, 497, 500, 502, 505, 506, 511, 512, 514, 534, 535, 554, 555, 556, 557], "criterion": [155, 177, 181, 183, 184, 190, 191, 197, 202, 203, 204, 206, 209, 210, 214, 219, 220, 256, 259, 300, 353, 498, 499, 512, 551, 554, 560, 563, 565], "yao": 155, "zhewei": 155, "pyhessian": 155, "len": [155, 220, 252, 293, 495, 500, 562], "2020": 155, "ieee": [155, 513, 560], "intern": [155, 233, 276, 350, 411, 494, 495, 511, 551], "confer": [155, 551, 560], "big": [155, 497, 557], "dong": 155, "zhen": 155, "hawq": [155, 402, 563], "v2": [155, 402, 494, 500, 502, 503, 508, 521, 558, 560, 563, 564, 566], "system": [155, 160, 175, 253, 465, 492, 518, 551, 566], "33": [155, 566], "18518": 155, "18529": 155, "openvinotoolkit": 155, "nncf": 155, "develop": [155, 372, 470, 471, 508, 512, 513, 515, 521, 532, 538, 551, 552, 556, 559], "hessian_trac": 155, "compare_weight": 155, "float_dict": 155, "ani": [155, 160, 304, 306, 349, 357, 359, 389, 394, 410, 414, 437, 449, 462, 465, 469, 474, 477, 500, 515, 520, 533, 534, 538, 539, 551, 559, 563], "quantized_dict": 155, "compar": [155, 308, 361, 465, 499, 511, 535, 551, 554, 557, 559, 561, 563], "being": [155, 304, 357, 477, 540], "wt_compare_dict": 155, "float_model": 155, "state_dict": [155, 500, 557, 561], "qmodel": 155, "compute_error": 155, "state": [155, 196, 437, 477, 518, 551], "weight_dict": 155, "hawq_top": 155, "enable_act": 155, "modul": [156, 157, 192, 198, 205, 313, 319, 329, 330, 471, 494, 498, 507, 511, 512, 514, 551, 553, 556, 557, 561, 564], "portabl": 158, "serial": [158, 160], "copyreg": 158, "mechan": [158, 191, 551, 559, 564], "pickler": 158, "pickletool": 158, "comment": [158, 469, 476, 495, 511, 512, 557, 562], "unpickl": [158, 160], "misc": [158, 509], "format_vers": 158, "compatible_format": 158, "except": [158, 160, 414, 465, 538, 554, 555], "pickleerror": 158, "pickl": [158, 160], "picklingerror": 158, "unpicklingerror": 158, "problem": [158, 235, 278, 308, 361, 511, 513, 533], "secur": [158, 474, 534, 552, 567], "violat": 158, "also": [158, 196, 234, 237, 252, 277, 280, 293, 301, 354, 361, 372, 395, 437, 470, 472, 475, 476, 477, 494, 497, 501, 505, 507, 511, 512, 515, 520, 525, 526, 529, 532, 533, 534, 537, 538, 549, 551, 552, 554, 556, 557, 560, 563], "includ": [158, 182, 191, 195, 197, 212, 214, 219, 220, 235, 237, 244, 252, 254, 278, 280, 287, 293, 299, 309, 331, 336, 414, 437, 465, 469, 475, 476, 477, 494, 495, 497, 508, 509, 510, 511, 512, 515, 518, 521, 526, 538, 542, 545, 546, 547, 551, 554, 556, 557, 561, 563], "necessarili": 158, "limit": [158, 189, 340, 399, 465, 474, 497, 498, 510, 554, 557, 558, 561], "attributeerror": [158, 414], "eoferror": 158, "importerror": [158, 503], "indexerror": 158, "layerwisequ": 159, "pretrained_model_name_or_path": [159, 161], "op_cfg": 159, "output_dir": [159, 460, 512, 520, 521, 536, 537, 543, 546, 547], "5": [159, 173, 182, 219, 220, 239, 248, 254, 282, 290, 308, 361, 395, 475, 495, 502, 504, 508, 511, 512, 537, 542, 545, 546, 551, 553, 554, 557, 560, 562, 563, 565, 566], "order": [159, 168, 301, 302, 337, 340, 343, 352, 354, 355, 399, 404, 413, 471, 497, 511, 535, 553, 557, 560, 561, 563], "memomeri": 159, "file_lik": 160, "map_loc": 160, "pickle_modul": [160, 192], "weights_onli": 160, "pickle_load_arg": 160, "facil": 160, "treat": [160, 494], "storag": [160, 474, 505, 511, 534, 537, 557, 560], "thei": [160, 253, 414, 469, 498, 504, 512, 520, 535, 538, 549], "deseri": 160, "were": [160, 308, 361, 518, 551], "fail": [160, 471, 494, 502, 541], "becaus": [160, 201, 206, 252, 293, 331, 471, 537, 554, 560, 562, 563], "doesn": [160, 252, 293, 475, 500, 512, 513, 533, 565], "certain": [160, 558, 559], "howev": [160, 538, 551, 557, 560], "altern": [160, 219, 220, 395], "callabl": [160, 219, 220, 306, 359, 426, 430, 436, 449, 450, 454, 494], "locat": [160, 170, 215, 252, 293, 500, 518, 525, 529, 532, 540, 554, 558, 562, 565], "resid": 160, "tag": [160, 370, 560, 561], "wa": [160, 219, 220, 475, 512, 537, 538, 541, 552, 563], "builtin": [160, 500], "device_id": 160, "either": [160, 220, 304, 357, 516, 520, 540, 550, 553, 554], "final": [160, 195, 202, 215, 333, 476, 512, 518, 549, 551, 554, 558, 563], "alreadi": [160, 175, 237, 251, 253, 280, 292, 475, 495, 507, 527, 530, 534, 543, 563], "right": [160, 248, 290, 304, 357, 469, 470, 471, 532, 538, 560, 562], "fall": [160, 168], "back": [160, 168, 252, 258, 293, 497, 532, 538], "behavior": [160, 469, 475, 476, 477, 504, 514, 557, 561, 563, 565], "wasn": 160, "appear": [160, 469, 526, 532, 534], "ones": [160, 304, 357, 551], "put": [160, 237, 280, 495, 498], "user": [160, 175, 184, 195, 207, 215, 219, 220, 223, 224, 237, 240, 244, 252, 253, 259, 266, 267, 280, 283, 287, 293, 299, 323, 328, 334, 336, 337, 361, 362, 372, 395, 400, 413, 454, 465, 471, 472, 474, 475, 476, 477, 482, 492, 494, 498, 499, 502, 504, 507, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 526, 532, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 552, 554, 555, 556, 558, 560, 561, 562, 563, 567], "register_packag": 160, "readlin": 160, "tell": [160, 361, 395, 553], "seek": [160, 557], "o": [160, 414, 508, 517, 535], "pathlik": 160, "metadata": 160, "primit": 160, "unless": [160, 504], "implicitli": 160, "known": [160, 255, 340, 399, 512, 551, 554, 561, 563], "insecur": [160, 534], "possibl": [160, 253, 437, 497, 534, 550, 551, 555, 556, 563], "construct": [160, 235, 238, 239, 242, 250, 255, 257, 258, 260, 278, 281, 282, 285, 361, 366, 370, 413, 457, 469, 476, 477, 495, 500, 551, 563], "malici": 160, "arbitrari": [160, 512, 550], "code": [160, 195, 223, 224, 253, 266, 267, 310, 334, 337, 395, 454, 471, 474, 475, 476, 477, 495, 498, 499, 500, 506, 507, 509, 511, 515, 517, 519, 520, 521, 523, 526, 532, 536, 537, 539, 540, 541, 549, 550, 551, 552, 553, 554, 559, 560, 561, 562], "never": [160, 563], "could": [160, 165, 173, 197, 223, 224, 237, 266, 267, 280, 337, 362, 395, 454, 469, 471, 499, 512, 550, 551, 554, 557, 558, 560, 564], "come": [160, 510, 563], "untrust": 160, "unsaf": 160, "tamper": 160, "trust": [160, 497, 534], "load_state_dict": 160, "ram": 160, "surg": 160, "checkpoint": [160, 370, 464, 514], "By": [160, 195, 219, 220, 301, 354, 476, 477, 511, 514, 525, 526, 529, 551, 552, 557, 563], "decod": [160, 247, 248, 290, 301, 354, 511, 562], "byte": 160, "utf": [160, 251, 292], "unicodedecodeerror": 160, "ascii": 160, "codec": 160, "0x": 160, "incorrect": 160, "extra": [160, 306, 359, 512], "encod": [160, 304, 357, 535, 562], "latin1": 160, "them": [160, 195, 235, 278, 471, 477, 494, 497, 502, 504, 506, 535, 538, 550, 551, 557, 563], "keep": [160, 206, 215, 332, 400, 471, 475, 531, 532, 558], "later": [160, 165, 173, 539, 540, 561], "byte_arrai": 160, "undefin": [160, 215, 332], "filepath": [160, 465], "pt": [160, 464, 508, 514, 536, 552, 554, 556, 557], "onto": 160, "loc": 160, "bytesio": 160, "open": [160, 256, 300, 353, 457, 467, 469, 474, 502, 503, 512, 527, 530, 533, 534, 538, 539, 540, 552, 558], "rb": 160, "buffer": 160, "get_children": 161, "get_named_children": 161, "dowload_hf_model": 161, "repo_id": 161, "cache_dir": 161, "repo_typ": 161, "revis": 161, "download": [161, 237, 280, 495, 497, 508, 537, 543, 558], "hug": [161, 474, 539, 552], "face": [161, 469, 474, 482, 515, 519, 539, 541, 552, 558, 566], "hf": [161, 510, 560, 566], "hub": [161, 474, 501, 505, 523], "load_empty_model": [161, 555], "automodelforcausallm": 161, "get_super_module_by_nam": 161, "module_nam": [161, 191, 192, 202, 203, 204, 205, 207, 208, 209, 210, 212, 214, 333, 465], "father": [161, 195], "update_modul": 161, "load_layer_wise_quantized_model": 161, "load_tensor_from_shard": 161, "shard": 161, "load_tensor": 161, "ipex_mixed_precis": 162, "fakeaffinetensorquantfunct": [163, 448], "affin": [163, 448, 554], "teqlinearfakequ": [163, 448], "orig_lay": [163, 448], "mullinear": [163, 169, 448], "input_scal": [163, 448], "detector": 164, "transformerbasedmodelblockpatterndetector": 164, "pattern_lst": 164, "block_pattern": 164, "detect": [164, 168, 195, 219, 220, 304, 308, 357, 361, 366, 470, 471, 515, 522, 523, 551, 563], "ffn": [164, 206], "torchsmoothqu": [165, 560], "q_func": [165, 223, 224, 266, 267, 340, 343, 344, 346, 396, 399, 400, 404, 405, 407, 475, 476, 512, 563], "traced_model": [165, 166], "whose": [165, 173, 197, 332, 370, 506, 560, 563], "absorb": [165, 168, 169, 173, 557], "trace_and_fuse_sub_graph": 166, "is_qat": 166, "tequant": 167, "absorb_to_lay": [167, 168, 169], "extra_config": [167, 169], "trainabl": [167, 474, 552, 557], "move_input_devic": 168, "auto": [168, 193, 195, 219, 220, 338, 353, 397, 403, 465, 471, 493, 515, 518, 520, 522, 523, 551, 554, 557], "kind": [168, 512], "forward_wrapp": 168, "get_embedding_contigu": 168, "contigu": 168, "is_fused_modul": 168, "_propagate_qconfig_help": 168, "collate_torch_pr": 168, "collate_result": 168, "input2tupl": 168, "append_attr": 168, "fx_model": 168, "fx_white_list": 168, "append": [168, 337, 340, 399, 471, 499, 512, 550], "graphmodul": [168, 471, 556], "dir": [168, 235, 278, 460, 464, 495, 503, 506], "generate_activation_observ": 168, "smooth_quant_en": 168, "observ": [168, 477, 557, 559, 561, 563], "what": [168, 202, 233, 276, 361, 395, 454, 469, 552], "check_cfg_and_qconfig": 168, "op_infos_from_cfg": 168, "output_tensor_ids_op_nam": 168, "paser_cfg": 168, "ops_nam": 168, "get_quantizable_ops_from_cfg": 168, "input_tensor_ids_op_nam": 168, "update_sq_scal": 168, "ipex_config_path": 168, "smoothquant_scale_info": 168, "ipex_config": 168, "json": [168, 236, 252, 279, 293, 464, 495, 514, 533, 540, 541, 545, 546, 547, 557, 562], "auto_copi": 168, "fetch_modul": [168, 453], "op_nam": [168, 216, 219, 220, 351, 412, 453, 465, 466, 476, 512, 551, 561], "simple_infer": 168, "get_example_input": 168, "example_inp": 168, "get_fallback_ord": 168, "confidence_batch": [168, 563], "fallback": [168, 220, 343, 344, 402, 404, 405, 502, 513, 535, 556, 563], "requantize_cfg": 168, "confid": 168, "ordered_op": 168, "get_mse_order_per_fp32": 168, "influenc": [168, 551], "last": [168, 191, 215, 219, 220, 494, 513, 515, 517, 522, 526, 554, 557, 560], "fallback_ord": 168, "get_mse_order_per_int8": 168, "get_torch_vers": 168, "match_datatype_pattern": 168, "calculate_quant_min_max": 168, "unsign": [168, 352, 413, 477, 557], "qmin": 168, "qmax": 168, "get_depth": 168, "depth": [168, 498, 556], "get_dict_at_depth": 168, "target_depth": 168, "nest": [168, 217, 431], "get_element_under_depth": 168, "ops_lst": 168, "get_op_type_by_nam": 168, "quantizable_op": 168, "collect_weight_info": 168, "fc": [168, 220, 551], "_type_": [168, 460], "get_module_input_output": 168, "module_hook_config": 168, "input_func": 168, "output_func": 168, "help": [168, 185, 261, 310, 510, 514, 515, 521, 532, 540, 545, 546, 547, 557, 563, 564], "module_name_list": 168, "fc1": [168, 169], "preprocess": [168, 219, 220, 235, 252, 278, 293, 413, 457, 500, 562], "usag": [168, 176, 234, 277, 304, 310, 337, 357, 414, 431, 453, 476, 495, 500, 501, 515, 523, 534, 540, 545, 546, 547, 549, 553, 557, 562], "input_valu": 168, "output_valu": 168, "total_valu": 168, "get_absorb_lay": 168, "supported_lay": 168, "no_absorb_lay": 168, "allow": [168, 340, 399, 437, 498, 500, 511, 512, 513, 534, 539, 551, 553, 557, 560, 563, 565], "absorpt": 168, "eg": [168, 217, 237, 280, 431, 495, 553], "absorbed_1": 168, "xx": 168, "get_block_prefix": 168, "block_list": 168, "block_num": 168, "block_prefix": 168, "get_hidden_st": 168, "calib": [168, 476], "rest": [168, 539, 540, 545, 546, 547], "part": [168, 193, 202, 331, 333, 471, 508, 513, 527, 530, 540, 542, 551, 555, 560, 564], "total_block_kwarg": 168, "total_block_arg": 168, "quantize_4bit": [169, 435], "quantil": [169, 435, 563], "nf4": [169, 435, 474, 557], "return_int": [169, 435, 442], "fp4": [169, 435, 474, 557], "q_tensor": [169, 435], "qdq_weight_asym": [169, 435], "choos": [169, 237, 280, 435, 460, 507, 520, 552, 558, 560, 563, 565], "qdq_weight_sym": [169, 435], "full_rang": [169, 435], "amax": [169, 435], "qdq_weight_actor": [169, 435], "select": [169, 212, 215, 220, 235, 278, 435, 460, 471, 472, 493, 507, 508, 532, 551, 554, 557, 561, 563], "search_clip": [169, 435], "best": [169, 181, 252, 293, 294, 299, 336, 343, 404, 435, 469, 472, 508, 515, 521, 532, 538, 549, 554, 557, 560, 562, 563], "num": [169, 435, 465], "best_clip_ratio": [169, 435], "group_dim": [169, 435, 442], "gptq_perm": [169, 435], "perm": [169, 252, 293, 435, 562], "int32": [169, 435, 460, 495, 557], "absorb_lay": 169, "absorb_dict": 169, "absorbed_lay": 169, "fc3": 169, "oom": 169, "teq_quant": 169, "quant_weight_w_scal": [169, 435], "algorithm_registri": 170, "algorithm_typ": 170, "registr": [170, 237, 244, 252, 280, 287, 293, 326], "algorithmschedul": 170, "conf": [170, 175, 181, 220, 223, 224, 253, 266, 267, 310, 317, 318, 320, 321, 322, 323, 328, 340, 343, 344, 346, 350, 362, 372, 395, 396, 399, 400, 404, 405, 407, 411, 414, 454, 471, 472, 474, 477, 492, 498, 505, 506, 512, 513, 514, 534, 536, 537, 550, 554, 555, 556, 557, 559, 560, 563], "control": [170, 219, 220, 471, 512, 538, 551, 563], "phase": [170, 472, 512, 551, 554, 556, 563], "fastbiascorrect": [171, 174], "fast_bias_correct": [172, 219, 220, 353, 554], "weight_correct": [172, 219, 220, 353, 554], "weightcorrect": 174, "1e": [174, 560, 565], "05": [174, 220, 308, 361, 511, 560, 566], "evalu": [175, 181, 197, 219, 223, 224, 235, 253, 266, 267, 278, 294, 301, 304, 305, 306, 308, 310, 354, 357, 358, 359, 361, 362, 372, 395, 454, 457, 472, 475, 476, 495, 498, 499, 506, 507, 510, 511, 512, 513, 515, 521, 523, 526, 532, 549, 551, 554, 559, 560, 561, 563, 565], "set_env_var": [175, 253], "env_var": [175, 253], "overwrite_exist": [175, 253], "env": [175, 253, 503, 545, 546, 547], "set_all_env_var": [175, 253], "physic": [175, 253, 469, 492, 540], "core": [175, 219, 220, 253, 470, 492, 509, 525, 529, 540, 566], "get_architectur": [175, 253], "architectur": [175, 253, 311, 314, 474, 492, 498, 512, 539, 551, 552, 557, 564], "get_threads_per_cor": [175, 253], "thread": [175, 219, 220, 253, 389, 394, 437, 494, 542], "get_thread": [175, 253], "get_physical_id": [175, 253], "socket": [175, 253, 465, 540, 542, 566], "get_core_id": [175, 253], "get_bounded_thread": [175, 253], "core_id": [175, 253], "bind": [175, 253], "run_inst": 175, "b_dataload": [175, 219, 220, 492, 512], "b_func": [175, 492], "benchmarkconfig": [175, 219, 220, 492, 497, 512], "goal": [175, 294, 299, 323, 328, 336, 362, 395, 476, 494, 550, 554, 563], "prefer": [175, 299, 336, 395, 551, 557], "space": [175, 188, 189, 203, 204, 209, 210, 219, 220, 223, 224, 266, 267, 299, 306, 311, 314, 315, 316, 336, 340, 343, 350, 359, 362, 395, 399, 404, 411, 469, 470, 472, 475, 476, 477, 551, 554, 560, 565], "etc": [175, 181, 251, 292, 294, 299, 306, 323, 328, 336, 359, 362, 395, 464, 474, 498, 507, 534, 538, 551, 559, 563], "generate_prefix": 175, "core_list": 175, "command": [175, 253, 454, 497, 500, 515, 517, 520, 525, 529, 533, 534, 536, 537, 538, 540], "numactl": [175, 503, 518, 526], "call_on": 175, "cmd": 175, "log_fil": [175, 388, 393], "window": [175, 492, 508, 532, 533], "config_inst": 175, "raw_cmd": 175, "multi": [175, 193, 195, 206, 304, 357, 361, 395, 472, 494, 495, 507, 512, 549, 551, 554, 563], "trigger": [175, 202, 333], "summary_benchmark": 175, "summari": [175, 454, 497, 527, 530, 561, 566], "profil": [175, 220, 353], "benchmark_with_raw_cmd": 175, "fit_with_raw_cmd": 175, "cores_per_inst": [175, 219, 220, 492, 512, 553], "num_of_inst": [175, 219, 220, 492, 512, 553], "fit": [175, 197, 219, 220, 340, 362, 395, 399, 414, 454, 471, 474, 492, 494, 495, 497, 500, 505, 506, 511, 512, 513, 514, 534, 535, 551, 554, 555, 556, 557], "pb": [175, 219, 220, 362, 370, 395, 474, 492, 500, 505, 512, 514, 534, 537, 545, 561, 566], "eval_dataload": [175, 219, 220, 223, 224, 266, 267, 337, 340, 343, 344, 346, 362, 395, 396, 399, 400, 404, 405, 407, 454, 492, 506, 511, 512, 534, 554, 555, 563], "register_config": 176, "framework_nam": 176, "algo_nam": 176, "examplealgorithm": 176, "examplealgorithmconfig": 176, "baseconfig": [176, 428, 430, 449], "white_list": [176, 428, 442], "op_name_or_module_typ": [176, 428, 442], "default_white_list": [176, 428, 442], "composableconfig": 176, "frameworkwrapp": [177, 450], "uniform": [177, 493, 557], "intend": [177, 470], "tuner": [177, 223, 224, 266, 267, 299, 336, 362, 395, 454, 554], "obtain": [177, 193, 195, 204, 209, 212, 215, 332, 437, 471, 476, 540, 551, 559, 560, 563], "basetuningconfig": 177, "quant_config": [177, 426, 430, 431, 449, 453], "timeout": [177, 219, 220, 512, 553, 563, 565], "max_trial": [177, 219, 220, 512, 563], "earli": [177, 219, 220, 512, 554, 563, 565], "stop": [177, 219, 220, 512, 563, 564, 565], "exit": [177, 219, 220, 339, 396, 398, 512, 540, 545, 546, 547, 565], "logger": [178, 300, 329, 353, 455, 458, 465], "msg": [179, 461, 541, 545, 546], "debug": [179, 414, 461, 497, 525, 529, 533, 563, 564], "fatal": [179, 461], "warn": [179, 461], "alia": [179, 461, 465, 517, 522], "compon": [181, 294, 300, 337, 353, 471, 497, 500, 508, 509, 515, 532, 540, 550, 551], "quantizationawaretrainingcallback": 181, "pruningcallback": 181, "distillationcallback": 181, "basecallback": 181, "design": [181, 234, 257, 262, 277, 361, 400, 472, 474, 512, 520, 523, 551, 554, 564], "mainli": [181, 213, 262, 335, 474, 512, 551, 554], "prune": [181, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 262, 263, 300, 317, 318, 320, 321, 322, 326, 328, 329, 331, 332, 333, 335, 337, 353, 465, 474, 500, 501, 504, 505, 507, 550, 552, 564, 565], "distil": [181, 190, 219, 220, 254, 261, 262, 300, 353, 474, 501, 505, 507, 550, 564, 565], "In": [181, 199, 200, 201, 206, 207, 208, 212, 220, 234, 262, 277, 304, 331, 333, 357, 372, 437, 469, 471, 472, 474, 475, 476, 494, 495, 497, 498, 499, 500, 511, 512, 522, 525, 526, 529, 535, 536, 537, 538, 545, 546, 547, 549, 550, 551, 554, 556, 557, 559, 560, 561, 562, 563, 564], "adaptor": [181, 219, 220, 352, 413, 418, 426, 457, 474, 477, 507, 555, 556, 558, 560, 561, 564], "deriv": [181, 191, 199, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 294, 331, 333, 335, 428, 442], "pipelin": [181, 294, 311, 312, 337, 470, 499, 512, 550], "knowledg": [181, 182, 219, 220, 254, 294, 499, 501, 505, 507, 512, 514, 565], "transfer": [181, 242, 285, 294, 495, 498, 499, 512, 560], "teacher": [181, 219, 220, 294, 498, 499, 512, 566], "student": [181, 185, 219, 220, 235, 261, 278, 294, 495, 498, 499, 566], "distillation_conf": [181, 216, 294], "_epoch_ran": [181, 294], "integ": [181, 201, 202, 219, 220, 294, 304, 308, 315, 331, 333, 357, 361, 414, 475, 477, 493, 554, 557, 560, 563], "much": [181, 191, 219, 220, 252, 293, 294, 498, 526, 560, 562], "epoch": [181, 203, 204, 209, 294, 333, 454, 494, 498, 499, 500, 512, 550, 551, 565], "ran": [181, 294], "eval_frequ": [181, 294], "frequenc": [181, 202, 219, 220, 294, 333, 512, 551, 565], "term": [181, 203, 204, 209, 210, 212, 294, 470, 493, 498, 509, 511, 549, 550, 563], "best_scor": [181, 294], "metric": [181, 219, 220, 223, 224, 256, 266, 267, 294, 299, 300, 315, 323, 328, 336, 337, 353, 362, 395, 454, 457, 472, 475, 476, 495, 497, 500, 512, 513, 534, 554, 559, 560, 561, 563, 564, 565, 566], "best_model": [181, 294, 464, 557], "found": [181, 294, 474, 498, 510, 513, 520, 537, 541, 560, 563, 566], "critet": [182, 254], "tensorflowcrossentropyloss": [182, 254], "pytorchcrossentropyloss": [182, 254], "tensorflowsparsecategoricalcrossentropi": 182, "tensorflowknowledgedistillationloss": [182, 254], "pytorchknowledgedistillationloss": [182, 254, 512], "pytorchintermediatelayersknowledgedistillationloss": [182, 254], "tensorflowcriterion": [182, 254], "pytorchcriterion": [182, 254], "criterion_registri": [182, 254], "criterion_typ": [182, 254], "registry_criterion": [182, 254], "param_dict": [182, 184, 254, 259], "crossentropyloss": [182, 219, 220, 498, 512], "sparsecategoricalcrossentropyloss": 182, "knowledgedistillationframework": [182, 254], "student_model": [182, 220, 254, 512], "teacher_model": [182, 219, 220, 254, 498, 499, 512], "knowledgedistillationloss": [182, 254, 512, 565], "temperatur": [182, 219, 220, 254, 512, 565], "loss_typ": [182, 188, 219, 220, 254, 512, 565], "ce": [182, 219, 220, 254, 512, 565], "loss_weight": [182, 219, 220, 254, 512, 565], "pytorchknowledgedistillationlosswrapp": [182, 254], "tensorflowknowledgedistillationlosswrapp": 182, "tensorflowknowledgedistillationlossextern": [182, 254], "intermediatelayersknowledgedistillationloss": [182, 254], "layer_map": [182, 220, 254, 498], "add_origin_loss": [182, 220, 254], "pytorchintermediatelayersknowledgedistillationlosswrapp": [182, 254], "selfknowledgedistillationloss": [182, 254], "selfknowledg": [182, 254], "pytorchselfknowledgedistillationloss": 182, "pytorchselfknowledgedistillationlosswrapp": 182, "multipl": [184, 193, 221, 222, 226, 227, 235, 236, 238, 239, 240, 241, 242, 246, 249, 252, 259, 264, 265, 269, 270, 272, 278, 279, 281, 282, 283, 284, 285, 289, 291, 293, 309, 362, 363, 364, 366, 372, 437, 492, 495, 502, 512, 539, 542, 550, 551, 559, 560, 563], "tensorflowoptim": [184, 259], "pytorchoptim": [184, 259], "optimizer_registri": [184, 259], "optimizer_typ": [184, 259], "cross": [184, 259, 308, 361, 506, 563], "tensorflowsgd": [184, 259], "tensorflowadamw": [184, 259], "tensorflow_addon": [184, 259], "tensorflowadam": 184, "adam": [184, 565], "pytorchsgd": [184, 259], "record_output": [185, 261], "output_process": [185, 261], "get_activ": [185, 261], "hyper": [186, 565], "sa_optim": [186, 190], "simul": [187, 477], "anneal": 187, "register_search": 188, "searcher": [188, 195, 220, 316], "registri": [188, 189, 191, 197, 202, 211, 212, 213, 214, 331, 333, 335, 472], "sure": [188, 197, 202, 211, 213, 331, 333, 335, 492, 534], "search_spac": [188, 216, 220, 311, 314, 315, 316], "gridsearch": [188, 316], "grid": [188, 220, 316, 472, 551], "whole": [188, 316, 477, 534, 554, 566], "exhaust": [188, 220, 300, 316, 342, 353, 403, 553], "randomsearch": [188, 316], "randomli": [188, 252, 293, 316, 340, 399, 472, 560, 562, 563], "bayesianoptimizationsearch": [188, 316], "bayesian": [188, 220, 300, 316, 342, 353, 403, 472, 551, 553], "xgbsearcher": 188, "higher_is_bett": [188, 219, 220, 361, 395, 563, 565], "reg": [188, 190, 192, 203, 204, 209, 210, 220], "min_train_sampl": [188, 220], "10": [188, 219, 220, 237, 280, 340, 399, 433, 442, 474, 492, 495, 502, 508, 512, 534, 535, 551, 553, 562, 563, 566], "xgboost": [188, 551], "searchspac": 189, "factori": [189, 368, 375, 377, 382, 385, 387, 392], "actual": [189, 308, 361, 500], "interv": [189, 208, 551], "continu": [189, 200, 304, 331, 357, 472, 510, 512, 533, 551, 564], "learning_r": [189, 219, 220, 512, 553, 565], "001": [189, 237, 280, 495, 500, 560, 565], "num_train_epoch": [189, 512, 551], "20": [189, 252, 293, 537, 540, 545, 546, 547, 551, 562, 565, 566], "register_searchspac": 189, "pruner": [189, 190, 300, 317, 318, 319, 320, 321, 323, 328, 329, 331, 334, 353, 512, 551, 565], "basesearchspac": 189, "discretesearchspac": 189, "continuoussearchspac": 189, "hpo": [190, 223, 266, 551], "model_slim": [190, 192, 206], "auto_slim": [190, 192, 194], "pattern_analyz": [190, 192, 194], "weight_slim": [190, 192, 194, 206], "mha": [190, 192, 198, 205, 551], "ninm": [190, 192, 198], "nxm": [190, 192, 198, 208, 219, 220, 327, 331, 551], "basic": [190, 192, 195, 197, 205, 219, 220, 251, 292, 300, 311, 331, 342, 346, 349, 353, 403, 407, 410, 454, 507, 508, 512, 534, 553, 559], "block_mask": [190, 191, 192, 205], "pattern_lock": [190, 192, 205, 219, 220, 300, 319, 353], "retrain_fre": [190, 191, 192, 205, 551], "criteria": [190, 192, 219, 220, 299, 323, 328, 331, 333, 336, 471, 532, 560], "tf_criteria": [190, 192], "callback": [190, 323, 328, 454, 457, 471, 512, 550, 551, 554], "register_criterion": [191, 214], "get_criterion": 191, "pruningcriterion": [191, 214], "about": [191, 214, 465, 469, 494, 512, 537, 538, 551, 556, 563, 564, 566], "score": [191, 197, 202, 206, 214, 219, 220, 301, 302, 304, 305, 306, 308, 333, 354, 355, 357, 358, 359, 361, 402, 457, 471, 511, 535, 549, 551, 559, 563], "magnitudecriterion": [191, 214], "magnitud": [191, 214, 219, 220, 300, 308, 319, 353, 361, 507, 551], "criterion_class": [191, 214], "determin": [191, 197, 202, 214, 219, 220, 459, 469, 471, 493, 551, 554], "gradientcriterion": 191, "absolut": [191, 219, 220, 308, 361, 511, 512, 551, 554, 563], "snipcriterion": 191, "snip": [191, 219, 220, 333, 507, 551, 566], "product": [191, 474, 507, 513, 515, 516, 532, 538, 552, 554, 559, 563], "shot": [191, 209, 210, 213, 262, 333, 335, 472, 507, 512, 551, 552, 557], "connect": [191, 333, 532, 534, 541, 551, 559], "sensit": [191, 317, 333, 507, 551], "1810": [191, 333], "02340": [191, 333], "snipmomentumcriterion": 191, "snip_momentum": [191, 219, 220, 512, 551], "preserv": [191, 493, 551, 557], "beta": 191, "blockmaskcriterion": 191, "retrainfreecriterion": 191, "pickle_protocol": 192, "_use_new_zipfile_seri": 192, "prepare_prun": [192, 551], "loss_func": [192, 211], "assertionerror": [192, 198, 205, 215, 331, 332, 333, 362], "slim": [193, 194, 195, 304, 357, 368, 370, 514, 551], "round_multipli": 193, "spars": [193, 207, 333, 495, 552], "model_slim_ffn2": 193, "perman": [193, 469, 551], "acceler": [193, 498, 512, 515, 523, 532, 535, 539, 551, 552, 556, 557, 560, 563], "directli": [193, 219, 220, 234, 277, 304, 308, 332, 357, 361, 511, 512, 519, 551, 553, 554, 561], "sprase": 193, "model_slim_mha": 193, "parse_auto_slim_config": [193, 551], "ffn2_sparsiti": [193, 551], "mha_spars": [193, 551], "generate_ffn2_pruning_config": 193, "consecut": [193, 195, 196, 551], "generate_mha_pruning_config": 193, "head": [193, 195, 199, 206, 215, 551, 566], "get_attribut": 195, "get_common_modul": 195, "layer2": [195, 512, 551, 554], "nearest": [195, 252, 293, 442, 557, 562], "print_iter": 195, "recipesearch": 195, "root": [195, 235, 236, 237, 240, 278, 279, 280, 283, 308, 361, 495, 500, 511, 512, 565], "levelwis": 195, "wai": [195, 236, 237, 240, 279, 280, 283, 472, 477, 494, 495, 497, 511, 512, 515, 518, 533, 534, 538, 539, 540, 550, 551, 554, 557, 560, 563, 565], "huggingfac": [195, 206, 235, 278, 460, 495, 501, 505, 520, 521, 522, 523, 543, 544, 546, 547, 560, 566], "bert": [195, 220, 231, 234, 235, 252, 274, 277, 278, 293, 474, 495, 498, 511, 513, 520, 543, 546, 547, 551, 562, 566], "recipe_sampl": 195, "bertattent": 195, "dens": [195, 213, 219, 220, 335, 535, 551, 566], "searching_result": 195, "jitbasicsearch": 195, "placeholder_shap": 195, "placeholder_dtyp": 195, "jit": [195, 219, 515, 517, 522, 560, 561], "script": [195, 301, 302, 305, 306, 354, 355, 358, 359, 437, 470, 500, 507, 515, 519, 522, 523, 526, 543, 545, 552], "static_graph": 195, "flatten_static_graph": 195, "target_lay": 195, "linear2linearsearch": 195, "target_op_lut": 195, "lookup": 195, "tabl": [195, 206, 465, 477, 497, 502, 535, 537, 566], "current_pattern": 195, "statu": [195, 462, 469, 494, 542, 545, 546, 547, 549, 551], "selfmhasearch": 195, "classifierheadsearch": 195, "classifi": [195, 215, 235, 278, 308, 361, 495, 498], "classifierheadsearchertf": 195, "squeezer": 196, "postcompressionutil": 196, "librari": [196, 256, 300, 353, 389, 467, 474, 508, 512, 513, 517, 526, 532, 552, 554], "relat": [196, 212, 294, 304, 323, 328, 331, 357, 413, 457, 477, 515, 539, 540, 551, 558, 565], "linearcompress": 196, "root_linear": 196, "target_linear": 196, "while": [196, 207, 215, 333, 340, 399, 437, 475, 476, 495, 501, 507, 513, 515, 520, 532, 534, 551, 553, 554, 557, 560], "hidden": [196, 201, 331, 475], "layer_1": 196, "act_fn": 196, "layer_2": 196, "linearcompressioniter": 196, "linear_pattern": 196, "register_pattern": [197, 331], "basepattern": [197, 199, 201], "unit": [197, 331, 470, 540, 551], "4x1": [197, 219, 220, 327, 512, 551, 566], "is_glob": [197, 331], "local": [197, 219, 220, 331, 437, 465, 525, 529, 534, 541, 542, 551, 559], "keep_mask_lay": 197, "invalid_lay": 197, "max_sparsity_ratio_per_op": [197, 202, 216, 219, 220, 512, 551], "sparsiti": [197, 199, 200, 202, 203, 204, 207, 209, 210, 213, 215, 219, 220, 333, 335, 465, 474, 495, 507, 512, 564, 566], "reach": [197, 213, 219, 220, 335, 470, 494, 534, 551, 563], "min_sparsity_ratio_per_op": [197, 216, 219, 220, 512, 551], "target_spars": [197, 216, 219, 220, 512, 551, 553, 565], "pytorchbasepattern": [197, 212], "kerasbasepattern": 197, "get_pattern": [198, 331], "patternmha": 199, "doc": [199, 200, 219, 220, 331, 349, 350, 361, 395, 410, 411, 414, 465, 511, 512, 527, 530, 538], "md": [199, 200, 219, 220, 331, 361, 395], "n": [199, 200, 219, 220, 236, 252, 279, 293, 302, 331, 355, 414, 477, 495, 497, 498, 540, 551, 554, 560, 562], "pytorchpatternninm": 200, "out": [200, 219, 220, 235, 236, 237, 278, 279, 280, 299, 331, 336, 449, 470, 471, 474, 495, 515, 520, 525, 526, 527, 529, 530, 532, 538, 551, 553, 554, 557], "pytorchpatternnxm": 201, "kept": [201, 331], "block_siz": [201, 331, 442, 557], "height": [201, 248, 252, 290, 293, 331, 500, 562, 565], "width": [201, 248, 252, 290, 293, 331, 493, 500, 551, 554, 562, 565], "vertic": [201, 252, 293, 331, 562], "keraspatternnxm": 201, "register_prun": [202, 211, 333], "baseprun": [202, 207, 209, 211], "current_sparsity_ratio": [202, 333], "global_step": [202, 333], "start_step": [202, 216, 219, 220, 333, 512, 551, 553], "end_step": [202, 216, 219, 220, 333, 512, 551, 553], "pruning_frequ": [202, 216, 219, 220, 512, 551], "target_sparsity_ratio": [202, 333], "show": [202, 465, 469, 498, 500, 512, 518, 533, 534, 535, 537, 540, 545, 546, 547, 560, 563, 564], "pytorchbaseprun": [202, 210], "kerasbaseprun": 202, "pytorchbasicprun": 203, "arrang": [203, 204, 209, 210, 236, 237, 240, 279, 280, 283, 495, 551], "proce": [203, 204, 209, 210], "regul": [203, 204, 209, 210], "kerasbasicprun": 203, "pytorchblockmaskprun": 204, "grad": [204, 209], "parse_valid_pruner_typ": 205, "get_prun": [205, 333], "pythonmultiheadattentionprun": 206, "mha_modul": 206, "partial": [206, 551, 554], "qkv": 206, "feedward": 206, "simultan": [206, 515, 539, 550, 553], "qkv_name": 206, "query_layer_nam": 206, "key_layer_nam": 206, "value_layer_nam": 206, "ffn_name": 206, "attention_ffn_nam": 206, "mha_nam": 206, "qkv_modul": 206, "ffn_modul": 206, "mha_compress": 206, "mhacompress": 206, "linear_lay": 206, "independ": [206, 389, 394, 477], "4x": [206, 472, 554], "subsequ": [206, 476, 515, 532], "head_mask": 206, "mha_head_s": 206, "similar": [206, 216, 512, 536, 553, 560, 563, 565], "mha_scor": 206, "lock": [207, 321, 322, 507, 550, 551], "pytorchpatternlockprun": 207, "parent": [207, 208, 213, 327, 333, 335, 561], "pytorchprogressiveprun": 208, "basicprun": [208, 211], "interpol": [208, 252, 293, 511, 551, 562], "fine": [208, 235, 278, 495, 518, 551, 552, 554], "grain": [208, 551, 552, 563], "improv": [208, 437, 470, 493, 512, 515, 532, 533, 535, 551, 552, 554, 556, 557, 563, 564, 566], "ad": [208, 235, 278, 301, 340, 354, 399, 476, 477, 497, 513, 515, 520, 523, 527, 530, 540, 551, 557, 561], "retrain": [209, 499], "pytorchretrainfreeprun": 209, "pruner_class": [209, 210], "fast": [209, 219, 220, 474, 551, 552, 557], "retrainfreeprun": [209, 211], "effect": [209, 474, 475, 551, 552], "2204": 209, "09656": 209, "sparsegptprun": [210, 211], "most": [210, 219, 220, 308, 361, 497, 512, 513, 551, 554, 557, 560, 563, 566], "sparsegpt": [210, 211, 551], "massiv": [210, 551], "One": [210, 477, 495, 500, 507, 537, 551, 552, 563], "2301": [210, 551], "00774": [210, 551], "opt": [211, 474, 510, 520, 551, 560, 563, 566], "least": [211, 334, 470, 512, 551, 563], "templat": [211, 334, 512, 551], "tree": [211, 334, 350, 411, 540], "nlp": [211, 219, 220, 334, 520, 536, 551, 554], "huggingface_model": [211, 334, 536], "classif": [211, 235, 252, 278, 293, 308, 334, 361, 498, 502, 511, 521, 535, 543, 546, 547, 551, 552], "pytorch_prun": [211, 300, 353], "eager": [211, 334, 394, 500, 507, 554, 556, 561], "config_file_path": [211, 334], "pruner_info": [211, 334], "pruning_class": 211, "avail": [211, 219, 220, 366, 478, 480, 484, 487, 490, 501, 503, 505, 507, 525, 529, 534, 539, 540, 541, 545, 546, 547, 551, 563, 566], "regular": [212, 301, 332, 354], "register_reg": 212, "regulariz": 212, "get_reg_typ": 212, "get_reg": 212, "basereg": 212, "grouplasso": 212, "coeff": 212, "lasso": [212, 318, 507, 551], "reg_term": 212, "register_schedul": [213, 335], "get_schedul": [213, 335], "pruningschedul": 213, "gradual": [213, 335, 551], "oneshotschedul": [213, 335], "iterativeschedul": [213, 335], "get_tf_criterion": 214, "get_sparsity_ratio": 215, "elementwise_over_matmul_gemm_conv": 215, "elementwise_over_al": 215, "blockwise_over_matmul_gemm_conv": 215, "get_sparsity_ratio_tf": 215, "check_config": [215, 332], "prune_config": [215, 332], "everyth": [215, 332, 520], "reset_none_to_default": 215, "update_param": 215, "process_weight_config": 215, "global_config": [215, 317, 318, 320, 321, 322], "local_config": [215, 219, 220, 317, 318, 320, 321, 322], "default_config": 215, "pruners_info": 215, "process_yaml_config": 215, "check_key_valid": 215, "template_config": 215, "user_config": 215, "process_and_check_config": [215, 332], "process_config": [215, 332], "parse_last_linear": 215, "often": [215, 494, 498, 537, 550, 551], "might": [215, 471, 534, 563], "caus": [215, 476, 494, 516, 535, 537, 551, 557], "drop": [215, 304, 332, 357, 470, 512, 513, 526, 551, 557, 560, 566], "parse_last_linear_tf": 215, "parse_to_prun": [215, 332], "parse_to_prune_tf": 215, "generate_pruner_config": 215, "dotdict": [215, 216, 220, 372, 465], "get_lay": 215, "collect_layer_input": 215, "layer_idx": 215, "layer_input": 215, "previou": [215, 476, 477, 512, 551, 558, 560, 561, 563, 564, 566], "prunerv2": 216, "pruning_typ": [216, 219, 220, 512, 551], "pruning_scop": [216, 219, 220, 512, 551], "sparsity_decay_typ": [216, 219, 220, 512, 551], "pruning_op_typ": [216, 219, 220, 512, 551], "reg_typ": 216, "criterion_reduce_typ": 216, "resume_from_pruned_checkpoint": 216, "cfg_fname": 216, "parser": 216, "quantization_conf": 216, "pruning_conf": 216, "graph_optimization_conf": [216, 299], "mixedprecision_conf": 216, "benchmark_conf": 216, "nasconfig": [216, 220, 312, 314, 472], "approach": [216, 219, 220, 311, 312, 314, 442, 471, 472, 493, 495, 498, 507, 512, 520, 532, 535, 543, 545, 546, 547, 551, 552, 553, 555, 557, 563, 565], "search_algorithm": [216, 220, 300, 313, 353, 472], "na": [216, 220, 300, 353, 366, 507, 566], "procedur": [216, 472, 551, 563], "defaultconf": 216, "notat": [216, 217, 220, 465], "deep_get": [217, 372, 431], "dot": [217, 431, 513, 554], "person": [217, 431, 469, 552], "john": [217, 431], "deep_set": [217, 372], "sex": [217, 469], "male": 217, "pythonic_config": 218, "random_se": [219, 220, 340, 399, 512, 565], "1978": [219, 220], "workspac": [219, 220, 464, 465, 514, 540, 545, 546, 547], "default_workspac": [219, 220], "resume_from": [219, 220, 465], "tensorboard": [219, 220, 457, 465, 475, 512, 535], "set_random_se": [219, 220, 465], "set_workspac": [219, 220, 465], "set_resume_from": [219, 220, 465], "set_tensorboard": [219, 220, 465], "directori": [219, 220, 236, 237, 279, 280, 370, 460, 462, 464, 465, 495, 500, 503, 525, 527, 529, 530, 536, 538, 561], "histori": [219, 220, 464, 465, 532, 536, 563], "nc_workspac": [219, 220, 535, 536], "datetim": [219, 220], "now": [219, 220, 252, 293, 471, 472, 477, 495, 500, 523, 553, 562, 563], "strftime": [219, 220], "d_": [219, 220], "resum": [219, 220, 223, 224, 266, 267, 344, 346, 396, 399, 400, 404, 405, 407], "flag": [219, 220, 302, 355, 497], "visual": [219, 220, 474, 523, 532, 559, 561, 563, 564], "displai": [219, 220, 349, 350, 410, 411, 465, 532, 535], "2022": [219, 220, 474, 509, 551, 557, 560, 566], "workspace_path": [219, 220], "accuracycriterion": [219, 220, 512, 563], "rel": [219, 220, 372, 512, 535, 553, 563, 565, 566], "tolerable_loss": [219, 220, 512, 563], "higher": [219, 220, 223, 224, 266, 267, 315, 362, 395, 454, 471, 497, 498, 502, 511, 535, 551, 554, 559], "accept": [219, 220, 414, 469, 492, 494, 534, 557], "accuracy_criterion": [219, 220, 372, 512, 536, 549, 553, 563, 565], "warmup": [219, 220, 492, 512, 553], "inter_num_of_thread": [219, 220, 389, 394, 512, 553], "intra_num_of_thread": [219, 220, 389, 394, 512, 553], "benchmark": [219, 220, 255, 300, 337, 353, 372, 465, 474, 482, 514, 515, 519, 523, 526, 532, 535, 563, 564, 565, 566], "onnxrt_trt_ep": [219, 220, 513, 554], "onnxrt_cuda_ep": [219, 220, 513, 554], "inter": [219, 220], "intra": [219, 220], "quantizationconfig": 219, "post_training_static_qu": [219, 495, 512, 553, 563], "calibration_sampling_s": [219, 220, 512, 537], "op_type_dict": [219, 220, 477, 553, 554, 557, 563], "op_name_dict": [219, 220, 497, 512, 535, 537, 554, 563], "strategy_kwarg": [219, 220, 559, 563], "quant_level": [219, 220, 535, 557, 560, 563], "posttrainingquantconfig": [219, 220, 395, 471, 474, 477, 494, 497, 502, 505, 511, 512, 514, 534, 535, 536, 537, 554, 555, 556, 557, 559, 560, 563], "quantizationawaretrainingconfig": [219, 220, 454, 471, 499, 502, 512, 554, 556, 563], "cv": [219, 220, 551], "object_detect": [219, 220, 304, 357], "recommendation_system": [219, 220], "explicitli": [219, 220, 506, 551], "overrid": [219, 220, 465], "quantiztaion": [219, 220], "smooth_quant_arg": [219, 220, 554, 560], "gemm_to_matmul": [219, 220, 554], "graph_optimization_level": [219, 220, 553, 554], "disable_al": [219, 220, 553], "enable_bas": [219, 220], "enable_extend": [219, 220], "enable_al": [219, 220], "first_conv_or_matmul_quant": [219, 220, 554], "last_conv_or_matmul_quant": [219, 220, 554], "pre_post_process_quant": [219, 220, 554], "postprocess": [219, 220, 246, 249, 252, 256, 293, 300, 353, 361, 395, 457, 475, 512, 561, 562], "dedic": [219, 220], "quant_format": [219, 220, 298, 502, 535], "constraint": [219, 220, 299, 336, 512, 551, 559, 563, 565], "conv1": [219, 220, 554, 565], "tuning_strategi": [219, 220], "guarante": [219, 220, 512], "models": [219, 220, 372, 512, 549, 553], "footprint": [219, 220, 299, 323, 328, 336, 372, 499, 512, 549, 551, 553, 555], "excluded_precis": [219, 220, 556], "exclud": [219, 220, 475, 493, 556], "conserv": [219, 220, 353, 403], "use_distributed_tun": 219, "weightpruningconfig": [219, 220, 512, 550, 551], "pruning_config": [219, 220, 512, 551], "98": [219, 220, 512, 551, 553, 566], "exp": [219, 220, 512, 551], "link": [219, 220, 235, 278, 361, 395, 493, 495, 502, 525, 529, 532, 557, 566], "90": [219, 220, 555, 565, 566], "magnitude_progress": [219, 220], "snip_progress": [219, 220], "snip_momentum_progress": [219, 220], "feasibl": [219, 220], "situat": [219, 220, 500, 551], "unstructur": [219, 220, 327, 507, 551, 566], "8x1": [219, 220], "channelx1": [219, 220, 551], "1xchannel": [219, 220, 551], "itrex": [219, 220, 560], "start": [219, 220, 252, 293, 304, 357, 400, 508, 537, 552, 562, 563, 564, 567], "togeth": [219, 220, 252, 293, 498, 508, 519, 552, 561, 562], "sort": [219, 220, 343, 404, 497, 535, 557, 563], "sinc": [219, 220, 299, 301, 323, 328, 336, 354, 498, 502, 508, 511, 526, 532, 537, 550, 557, 558], "lead": [219, 220, 498, 512, 513, 537, 551, 557, 560], "increas": [219, 220, 496, 507, 515, 532, 537, 557, 563], "cube": [219, 220, 551], "6": [219, 220, 504, 554, 560, 563, 566], "update_config": [219, 220, 426], "knowledgedistillationlossconfig": [219, 220, 498, 499, 512, 550], "hyperparamet": [219, 220, 349, 559, 560, 563], "entropi": [219, 220, 493, 563], "groundtruth": [219, 220, 304, 357], "label": [219, 220, 223, 224, 235, 237, 238, 239, 240, 243, 248, 252, 257, 266, 267, 278, 280, 281, 282, 283, 286, 290, 293, 301, 303, 308, 354, 356, 361, 362, 395, 454, 471, 494, 495, 497, 511, 512, 554, 562], "sum": [219, 220, 308, 361, 497, 498], "distillationconfig": [219, 220, 454, 498, 499, 512, 550], "prepare_compress": [219, 220, 454, 471, 498, 499, 512, 550, 551, 554], "criterion_conf": [219, 220], "d_conf": [219, 220, 499, 512, 550], "compression_manag": [219, 220, 454, 471, 498, 499, 512, 550, 551, 554], "featur": [219, 220, 235, 236, 248, 252, 278, 279, 290, 293, 470, 474, 492, 494, 496, 498, 512, 513, 514, 515, 519, 520, 523, 532, 534, 538, 551, 552, 558, 562], "distil_loss": [219, 220, 512], "ni_workload_nam": 220, "onnxrt_dnnl_ep": [220, 513, 554], "onnxrt_dml_ep": [220, 554], "tuningcriterion": [220, 512, 549, 559, 563], "tuning_criterion": [220, 512, 549, 559, 563], "npu": [220, 554], "xpu": [220, 437, 523, 554], "ptq": [220, 395, 471, 497, 500, 507, 512, 537, 554, 560, 561, 563], "tri": [220, 563], "meet": [220, 226, 337, 339, 396, 398, 471, 476, 549, 552, 553, 554, 557, 561, 563], "mse_v2": [220, 300, 342, 353, 403], "hawq_v2": [220, 353, 403], "docstr": [220, 414], "workload": [220, 462, 465, 534, 552], "insight": [220, 462, 474, 497, 552, 558, 563, 564], "copi": [220, 332, 465, 494, 538], "deepcopi": 220, "model_origin": [220, 395, 556], "qat_op_name_dict": 220, "low_memory_usag": 220, "hpoconfig": 220, "xgb": 220, "bo": 220, "intermediatelayersknowledgedistillationlossconfig": [220, 498], "relationship": [220, 534], "student_layer_nam": 220, "student_layer_output_process": 220, "teacher_layer_nam": 220, "teacher_layer_output_process": 220, "desir": [220, 248, 252, 290, 293, 476, 477, 551, 560, 562], "serv": [220, 370, 437, 540, 545, 546, 547], "numer": [220, 308, 361, 477, 513, 552, 554, 557], "abbrevi": 220, "l1": 220, "selfknowledgedistillationlossconfig": [220, 498, 512], "student1_layer_name1": 220, "teacher_layer_name1": 220, "student2_layer_name1": 220, "student1_layer_name2": 220, "teacher_layer_name2": 220, "student2_layer_name2": 220, "soft": 220, "hard": [220, 494, 497], "resblock": 220, "deepst": 220, "02": [220, 566], "mixedprecisionconfig": [220, 362, 414, 512, 513], "mixedprecis": [220, 309, 512], "won": [220, 554, 557], "work": [220, 299, 336, 437, 473, 476, 494, 498, 527, 530, 538, 556, 557, 558, 560, 561], "mix_precis": [220, 353, 414, 512, 513], "converted_model": [220, 362, 512, 513], "exportconfig": 220, "14": [220, 297, 298, 502, 508, 547, 566], "dynamic_ax": [220, 298, 502], "qlinear": [220, 237, 244, 280, 287, 308, 361, 475, 522], "ax": [220, 298], "onnxqlinear2qdqconfig": 220, "onnxqlinear2qdq": 220, "torch2onnxconfig": [220, 502], "torch2onnx": [220, 295, 300, 353], "qdq_op_fp32_bia": 220, "qdq_op_int32_bia": 220, "qdq_op_fp32_bias_qdq": 220, "resnet50": [220, 474, 497, 500, 502, 513, 515, 519, 551, 554, 559, 566], "int8_onnx_config": [220, 502], "randn": [220, 502], "224": [220, 248, 290, 474, 495, 500, 502, 505, 512, 515, 534, 562, 565], "batch_siz": [220, 225, 227, 233, 234, 235, 236, 255, 268, 270, 276, 277, 278, 279, 298, 472, 494, 495, 500, 502, 506, 512, 515, 554], "tf2onnxconfig": [220, 502], "tf2onnx": [220, 295, 300, 353], "output_graph": 220, "dyna": [220, 300, 313, 353, 472, 507, 553], "sigopt": [221, 222, 264, 265, 300, 353, 552], "tpe": [221, 222, 264, 265, 300, 353], "sigopttunestrategi": [223, 266], "q_dataload": [223, 224, 266, 267, 340, 343, 344, 346, 396, 399, 400, 404, 405, 407, 506, 563], "eval_metr": [223, 224, 362, 395, 396, 399, 400, 404, 405, 407, 454, 511, 534, 554], "q_hook": [223, 224, 266, 267, 340, 343, 344, 346, 396, 399, 400, 404, 405, 407], "mandatori": [223, 224, 266, 267, 395, 512, 565], "yield": [223, 224, 233, 255, 266, 267, 276, 340, 362, 395, 399, 414, 454, 494, 554, 563], "well": [223, 224, 266, 267, 362, 395, 454, 472, 474, 495, 551, 554, 558, 560, 565], "taken": [223, 224, 266, 267, 362, 395, 454, 554], "reserv": [223, 224, 266, 267], "abl": [223, 224, 266, 267, 362, 395, 454, 523, 532, 554], "scalar": [223, 224, 266, 267, 362, 395, 454, 511, 554, 563], "pseudo": [223, 224, 266, 267, 395, 454, 557, 561], "someth": [223, 224, 237, 266, 267, 280, 395, 454], "fefin": [224, 267], "tpetunestrategi": [224, 267], "basedatalod": [225, 268], "basedataload": [225, 230, 232, 268, 273, 275], "last_batch": [225, 227, 234, 255, 268, 270, 277, 494], "rollov": [225, 227, 234, 255, 268, 270, 277, 494], "collate_fn": [225, 227, 228, 234, 255, 268, 270, 271, 277, 494, 495], "batch_sampl": [225, 227, 234, 255, 268, 270, 277, 494], "num_work": [225, 227, 234, 255, 268, 270, 277, 494, 512, 554], "pin_memori": [225, 227, 234, 255, 268, 270, 277, 494], "_generate_dataload": [225, 268], "check_dataload": 226, "default_col": [227, 270], "outer": [227, 270], "defaultdataload": [227, 234, 270, 277], "style": [228, 242, 271, 285, 414, 470, 495, 506], "drop_last": [228, 233, 271, 276], "iterablefetch": [228, 271], "indexfetch": [228, 271], "base_dataload": [229, 272, 289, 300], "default_dataload": [229, 272, 289, 300], "fetcher": [229, 272, 289, 300], "mxnet_dataload": [229, 272, 289, 300], "onnxrt_dataload": [229, 272, 289, 300, 388], "pytorch_dataload": [229, 272, 289, 300], "tensorflow_dataload": [229, 272, 289, 300, 393], "mxnetdataload": [230, 273], "onnxrtbertdataload": [231, 274], "variant": [231, 274], "onnxrtdataload": [231, 274, 388], "pytorchdataload": [232, 275], "data_sourc": [233, 276, 457], "__iter__": [233, 237, 276, 280, 494, 495, 512], "matter": [233, 276, 556], "iterablesampl": [233, 276], "squential": [233, 276], "your": [233, 235, 276, 278, 437, 470, 494, 495, 497, 500, 509, 512, 515, 518, 519, 520, 525, 526, 527, 529, 530, 532, 534, 538, 540, 545, 546, 547, 551, 552, 559, 561, 563, 564], "clear": [233, 276, 475, 504, 511, 512], "iterabledataset": [233, 237, 276, 280], "try": [233, 276, 471, 497, 535, 551, 554, 560, 563], "indexdataset": [233, 276], "__getitem__": [233, 237, 252, 276, 280, 293, 494, 495, 512], "__len__": [233, 237, 276, 280, 495], "retriev": [233, 276, 551], "sequentialsampl": [233, 276], "batchsampl": [233, 276], "tfdatadataload": [234, 277], "tensorflow1": [234, 277], "coupl": [234, 277], "satisfi": [234, 277, 497, 508, 538], "tf1": [234, 277, 514], "although": [234, 277, 559], "tensorflowbertdataload": [234, 277], "tensorflowmodelzoobertdataload": [234, 277], "zoo": [234, 252, 277, 293, 474, 501, 505, 566], "tensorflowdataload": [234, 277, 393], "pytorchbertdataset": [235, 278], "model_typ": [235, 278, 465, 495], "tensordataset": [235, 278, 495], "repo": [235, 278, 468, 470, 495, 501, 525, 527, 529, 530, 567], "easi": [235, 278, 336, 502, 512, 535, 539, 552, 554, 557, 559], "squad": [235, 252, 278, 293, 305, 306, 308, 358, 359, 361, 495, 511, 551, 562, 566], "distilbert": [235, 278, 474, 495, 513, 552, 566], "xlnet": [235, 278, 495, 566], "xlm": [235, 278, 495, 566], "101": [235, 278, 308, 361, 511, 541, 560, 566], "2043": [235, 278], "2001": [235, 278], "onnxrtbertdataset": [235, 278], "data_dir": [235, 278, 495], "model_name_or_path": [235, 278, 495, 512, 520, 521, 536, 543, 546, 547, 555], "max_seq_length": [235, 252, 278, 293, 495, 562], "do_lower_cas": [235, 251, 252, 278, 292, 293, 495, 562], "mrpc": [235, 278, 308, 361, 495, 511, 520, 543, 546, 547, 551, 563, 566], "dynamic_length": [235, 278, 495], "shortcut": [235, 278, 495], "longer": [235, 252, 278, 293, 495, 562], "shorter": [235, 252, 278, 293, 495, 562], "lowercas": [235, 278, 495], "choic": [235, 278, 475, 495, 511, 538, 560], "qqp": [235, 278, 495, 511, 566], "qnli": [235, 278, 495, 511, 566], "rte": [235, 278, 495, 511, 566], "st": [235, 278, 495, 511], "cola": [235, 278, 495, 511, 566], "mnli": [235, 278, 495, 511, 566], "wnli": [235, 278, 495, 511], "mobilebert": [235, 278, 495, 498, 566], "roberta": [235, 278, 495, 566], "uncas": [235, 252, 278, 293, 495, 562, 566], "load_and_cache_exampl": [235, 278], "convert_examples_to_featur": [235, 252, 278, 293], "max_length": [235, 278], "label_list": [235, 278, 308, 361], "output_mod": [235, 278], "pad_token": [235, 278], "pad_token_segment_id": [235, 278], "mask_padding_with_zero": [235, 278], "inputfeatur": [235, 252, 278, 293], "properti": [235, 278, 413, 509], "vocabulari": [235, 251, 252, 278, 292, 293, 562], "attention_mask": [235, 278, 512], "usual": [235, 278, 476, 497, 498, 537, 550, 551, 554, 555, 560], "NOT": [235, 278, 504], "token_type_id": [235, 278, 512], "segment": [235, 278, 302, 304, 355, 357, 470], "portion": [235, 278], "regress": [235, 278, 470, 497], "seq_length": [235, 278], "tensorflowbertdataset": [235, 278], "label_fil": [235, 252, 278, 293, 495, 562], "tfrecord": [235, 236, 237, 278, 279, 280, 495], "guid": [235, 278, 471, 474, 495, 498, 508, 515, 523, 532, 567], "parsedecodebert": [235, 278], "tensorflowmodelzoobertdataset": [235, 236, 278, 279], "num_cor": [235, 236, 240, 278, 279, 283, 495], "28": [235, 236, 240, 278, 279, 283, 495, 566], "coco": [236, 243, 247, 279, 286, 304, 308, 357, 361, 511, 551], "parsedecodecoco": [236, 279], "cocorecorddataset": [236, 279], "interleav": [236, 279, 495], "parallel": [236, 279, 389, 394, 437, 495, 512, 539, 542, 563], "cocoraw": [236, 279, 495], "img_dir": [236, 279, 495], "val2017": [236, 279, 495], "anno_dir": [236, 279, 495], "annot": [236, 279, 304, 357, 414, 476, 477, 495, 511, 551, 563], "instances_val2017": [236, 279, 495], "jpg": [236, 240, 242, 279, 283, 285, 474, 495], "imag": [236, 237, 240, 242, 248, 252, 279, 280, 283, 285, 290, 293, 304, 357, 495, 500, 502, 551, 553, 560, 561, 562, 566], "coconpi": [236, 279, 495], "npy_dir": [236, 279, 495], "npy": [236, 279, 495], "tensorflowdataset": [237, 280], "pytorchdataset": [237, 280], "mxnetdataset": [237, 280], "onnxrtqldataset": [237, 280], "onnxrtitdataset": [237, 280], "IT": [237, 244, 280, 287, 552], "pytorchmxnetwrapdataset": [237, 280], "datafunc": [237, 280], "pytorchmxnetwrapfunct": [237, 252, 280, 293], "framework_dataset": [237, 280], "convent": [237, 280, 304, 357, 498], "imageclassifi": [237, 280], "tensorflow_itex": [237, 240, 242, 244, 280, 283, 285, 287, 494, 553], "onnxrt_qdq": [237, 244, 280, 287, 553], "onnxrt_qlinearop": [237, 244, 252, 280, 287, 293, 553], "onnxrt_integerop": [237, 244, 252, 280, 287, 293, 553], "pytorch_ipex": [237, 244, 280, 287, 512, 553, 565], "pytorch_fx": [237, 244, 280, 287, 512, 553], "dataset_registri": [237, 280], "dataset_typ": [237, 280], "dataset_format": [237, 280], "data_format": [237, 248, 280, 290], "raw_imag": [237, 280], "overwrit": [237, 280, 525, 529], "download_url": [237, 280], "filenam": [237, 280, 465, 495, 538], "md5": [237, 280], "address": [237, 280, 469, 513, 534, 537, 540, 552], "gen_bar_updat": [237, 280], "check_integr": [237, 280], "fpath": [237, 280], "checksum": [237, 280], "calculate_md5": [237, 280], "chunk_siz": [237, 280], "cifar10": [237, 280, 495], "cifar100": [237, 280, 495], "databas": [237, 280, 540], "www": [237, 280, 495, 566], "toronto": [237, 280, 495], "kriz": [237, 280, 495], "cifar": [237, 280, 495, 566], "tar": [237, 280, 495, 497, 527, 530], "gz": [237, 280, 495, 497, 527, 530], "manual": [237, 280, 495, 515, 521, 523, 526, 540, 545, 546, 547, 551], "subset": [237, 240, 280, 283, 495, 537], "internet": [237, 280, 495, 534], "again": [237, 280, 495, 535, 537, 556], "pytorchcifar10": [237, 280], "mxnetcifar10": [237, 280], "tensorflowcifar10": [237, 280], "pytorchcifar100": [237, 280], "mxnetcifar100": [237, 280], "tensorflowcifar100": [237, 280], "mnist": [237, 280, 495, 500], "nation": [237, 280, 469], "institut": [237, 280], "standard": [237, 252, 280, 293, 470, 476, 497, 502, 511, 562, 563], "technologi": [237, 280, 510, 512], "fashionmnist": [237, 280, 495], "npz": [237, 280, 495], "idx1": [237, 280, 495], "ubyt": [237, 280, 495], "idx3": [237, 280, 495], "t10k": [237, 280, 495], "pytorchmnist": [237, 280], "mxnetmnist": [237, 280], "tensorflowmnist": [237, 280], "pytorchfashionmnist": [237, 280], "mxnetfashionmnist": [237, 280], "tensorflowfashionmnist": [237, 280], "imagefold": [237, 280, 495, 500, 512], "expect": [237, 280, 469, 470, 503, 510, 532, 554, 557, 563], "subfold": [237, 280, 535], "belong": [237, 280, 366, 554], "class_1": [237, 280, 495], "xxx": [237, 280, 495, 512], "png": [237, 280, 495], "xxy": [237, 280, 495], "xxz": [237, 280, 495], "class_n": [237, 280, 495], "123": [237, 280, 495, 562], "nsdf3": [237, 280, 495], "asd932_": [237, 280, 495], "categori": [237, 280, 303, 356, 492, 495, 522], "mxnetimagefold": [237, 280], "tensorflowtfrecorddataset": [237, 280], "tensorflowimagerecord": [237, 280], "imagenet": [237, 240, 248, 280, 283, 290, 472, 497, 512, 521, 537, 551, 561, 562, 565, 566], "000": [237, 280, 474, 495], "099": [237, 280, 495], "tensorflowvocrecord": [237, 280], "pascal": [237, 280], "voc": [237, 280, 308, 361], "2012": [237, 280], "00000": [237, 280], "00004": [237, 280], "00001": [237, 280], "00003": [237, 280], "dummydataset": [238, 239, 281, 282], "127": [238, 239, 281, 282, 495, 554, 560, 566], "float32": [238, 239, 252, 281, 282, 293, 304, 357, 460, 475, 492, 495, 512, 554, 557, 560, 562], "stand_norm": [238, 239, 281, 282, 495], "dummy_v2": [239, 282, 495], "sparse_dummy_v2": [239, 282, 495], "label_shap": [239, 282, 495], "sparsedummydataset": [239, 282], "dense_shap": [239, 282, 495], "sparse_ratio": [239, 282, 495], "imagenetraw": [240, 283, 495], "data_path": [240, 283, 495], "image_list": [240, 283, 495], "img1": [240, 283, 495], "img2": [240, 283, 495], "imgx": [240, 283, 495], "val_map": [240, 283, 495], "txt": [240, 283, 495, 497, 508, 534, 536, 537, 539, 540], "pytorchimagenetraw": [240, 283], "mxnetimagenetraw": [240, 283], "tensorflowimagenetraw": [240, 283], "inteltensorflow": [240, 242, 283, 285, 508], "tensorflowimagenetdataset": [240, 283], "onnxrtimagenetdataset": [240, 283], "bert_dataset": [241, 246, 284, 289, 300, 353], "coco_dataset": [241, 246, 284, 289, 300, 353], "dummy_dataset": [241, 246, 284, 289, 300, 353], "dummy_dataset_v2": [241, 246, 284, 289, 300, 353], "imagenet_dataset": [241, 246, 284, 289, 300, 353], "style_transfer_dataset": [241, 246, 284, 289, 300, 353], "styletransferdataset": [242, 285], "content_fold": [242, 285, 495], "style_fold": [242, 285, 495], "crop_ratio": [242, 285, 495], "resize_shap": [242, 285, 495], "image_format": [242, 285, 495], "holder": [242, 285, 495], "labelbalancecocorecordfilt": [243, 286], "balanc": [243, 286, 557, 560], "labelbalancecocorawfilt": [243, 286], "tensorflowfilt": [244, 287], "onnxrtqlfilt": [244, 287], "onnxrtitfilt": [244, 287], "pytorchfilt": [244, 287], "mxnetfilt": [244, 287], "filter_registri": [244, 287], "filter_typ": [244, 287], "__call__": [244, 287], "coco_filt": [245, 246, 288, 289, 300, 353], "imagenet_transform": [246, 249, 289, 291, 300, 353], "parsedecodecocotransform": 247, "quantizedinput": [248, 290, 562], "labelshift": [248, 290, 562], "label_shift": [248, 290, 562], "parsedecodeimagenet": [248, 290, 562], "proto": [248, 252, 290, 293, 562], "parsedecodeimagenettransform": [248, 290], "tensorflowtransposelastchannel": 248, "tensorflowshiftrescal": 248, "rescal": [248, 252, 293, 562], "tensorflowresizecropimagenettransform": [248, 290], "random_crop": [248, 290, 562], "resize_sid": [248, 290, 562], "resize_method": [248, 290], "bilinear": [248, 252, 290, 293, 562], "random_flip_left_right": [248, 290, 562], "mean_valu": [248, 290, 562], "channels_last": [248, 290, 515], "subpixel": [248, 290], "rgb": [248, 290], "seri": [248, 290, 474, 508, 512, 562], "applic": [248, 290, 477, 502, 515, 532, 534, 540, 541, 545, 546, 552, 557, 560, 561, 562, 564], "crop": [248, 252, 290, 293, 495, 562], "flip": [248, 252, 290, 293, 562], "left": [248, 252, 290, 293, 526, 532, 560, 562], "std": [248, 252, 290, 293, 512, 562], "bilinearimagenettransform": [248, 290], "central_fract": [248, 290, 562], "875": [248, 290, 562], "fraction": [248, 290, 562], "onnxbilinearimagenettransform": [248, 290], "onnxresizecropimagenettransform": [248, 290], "std_valu": [248, 290], "229": [248, 290, 512], "225": [248, 290, 512], "resizewithaspectratio": [248, 290], "87": [248, 290, 566], "inter_pol": [248, 290], "cv2": [248, 290], "inter_area": [248, 290], "aspect": [248, 252, 290, 293, 562], "postprocess_cl": [250, 260, 512], "user_postprocess": [250, 260], "convert_to_unicod": [251, 292], "unicod": [251, 292], "assum": [251, 292, 304, 315, 357, 475, 504, 532], "load_vocab": [251, 292], "vocab_fil": [251, 252, 292, 293, 562], "convert_by_vocab": [251, 292], "vocab": [251, 292], "whitespace_token": [251, 292], "whitespac": [251, 292, 306, 359], "clean": [251, 292, 512], "piec": [251, 292, 301, 354, 511, 557], "fulltoken": [251, 292], "tokenzi": [251, 292], "basictoken": [251, 292], "punctuat": [251, 292, 301, 306, 354, 359], "lower": [251, 252, 292, 293, 306, 359, 400, 499, 551, 552, 554, 560, 562, 563], "wordpiecetoken": [251, 292], "unk_token": [251, 292], "unk": [251, 292], "max_input_chars_per_word": [251, 292], "wordpiec": [251, 252, 292, 293, 562], "concat_gener": [252, 293], "inc": [252, 293, 469, 476, 515, 522, 532, 534, 539, 552, 553, 558, 563], "tensorflowtransform": [252, 293], "mxnettransform": [252, 293], "pytorchtransform": [252, 293], "onnxrtqltransform": [252, 293], "onnxrtittransform": [252, 293], "transform_registri": [252, 293], "transform_typ": [252, 293], "basetransform": [252, 293], "tensorflowwrapfunct": [252, 293], "transform_func": [252, 293], "pytorchmxnettransform": [252, 293], "get_torchvision_map": [252, 293], "torchvis": [252, 293, 501, 505, 515, 521, 535], "composetransform": [252, 293], "transform_list": [252, 293, 562], "compos": [252, 293, 457, 562], "croptoboundingbox": [252, 293, 562], "offset_height": [252, 293, 562], "offset_width": [252, 293, 562], "target_height": [252, 293, 562], "target_width": [252, 293, 562], "box": [252, 293, 304, 308, 357, 361, 471, 511, 515, 526, 532, 561, 562, 563], "coordin": [252, 293, 340, 399, 539, 562, 563], "top": [252, 293, 299, 308, 323, 328, 336, 361, 470, 511, 532, 535, 537, 562], "corner": [252, 293, 470, 475, 477, 562], "horizont": [252, 293, 562], "mxnetcroptoboundingbox": [252, 293], "onnxrtcroptoboundingbox": [252, 293], "tensorflowcroptoboundingbox": [252, 293], "resizewithratio": [252, 293, 562], "min_dim": [252, 293, 562], "800": [252, 293, 562], "max_dim": [252, 293, 562], "1365": [252, 293, 562], "constant_valu": [252, 293], "longest": [252, 293, 562], "side": [252, 293, 495, 526, 562], "exce": [252, 293, 557, 562], "tensorflowresizewithratio": [252, 293], "permut": [252, 293, 562], "tensorflowtranspos": [252, 293], "mxnettranspos": [252, 293], "pytorchtranspos": [252, 293], "randomverticalflip": [252, 293, 562], "tensorflowrandomverticalflip": [252, 293], "randomhorizontalflip": [252, 293, 512, 562], "tensorflowrandomhorizontalflip": [252, 293], "toarrai": [252, 293, 562], "pil": [252, 293, 562], "casttftransform": [252, 293], "castonnxtransform": [252, 293], "castpytorchtransform": [252, 293], "centercroptftransform": [252, 293], "center": [252, 293, 473, 474, 508, 562, 563], "paddedcentercroptransform": [252, 293], "crop_pad": [252, 293], "resizetftransform": [252, 293], "bicub": [252, 293, 562], "resizepytorchtransform": [252, 293], "randomcroptftransform": [252, 293], "randomresizedcroppytorchtransform": [252, 293], "08": [252, 293, 562, 566], "randomresizedcropmxnettransform": [252, 293], "randomresizedcroptftransform": [252, 293], "normalizetftransform": [252, 293], "deviat": [252, 293, 497, 562], "broadcast": [252, 293, 500, 562], "rescalekeraspretraintransform": [252, 293], "rescaletftransform": [252, 293], "rescaletransform": [252, 293], "alignimagechanneltransform": [252, 293], "must": [252, 293, 304, 357, 437, 470, 471, 476, 492, 494, 508, 554, 562], "pytorchalignimagechannel": [252, 293], "tondarraytransform": [252, 293], "resizemxnettransform": [252, 293], "resizetransform": [252, 293], "cropresizetftransform": [252, 293], "boundari": [252, 293, 562], "area": [252, 293, 304, 357, 511, 562], "pytorchcropresizetransform": [252, 293], "mxnetcropresizetransform": [252, 293], "cropresizetransform": [252, 293], "centercroptransform": [252, 293], "mxnetnormalizetransform": [252, 293], "pytorchnormalizetransform": [252, 293], "normalizetransform": [252, 293], "randomcroptransform": [252, 293], "randomresizedcroptransform": [252, 293], "get_final_text": [252, 293], "pred_text": [252, 293], "orig_text": [252, 293], "project": [252, 293, 468, 469, 470, 538, 552, 559, 563, 567], "squadexampl": [252, 293], "qas_id": [252, 293], "question_text": [252, 293], "doc_token": [252, 293], "orig_answer_text": [252, 293], "start_posit": [252, 293], "end_posit": [252, 293], "is_imposs": [252, 293], "simpl": [252, 293, 508, 512, 551, 559, 560, 563], "answer": [252, 293, 305, 306, 358, 359, 469, 537, 551, 562, 566], "unique_id": [252, 293], "example_index": [252, 293], "doc_span_index": [252, 293], "token_to_orig_map": [252, 293], "token_is_max_context": [252, 293], "input_mask": [252, 293, 512], "segment_id": [252, 293, 512], "read_squad_exampl": [252, 293], "input_fil": [252, 293], "doc_strid": [252, 293, 562], "max_query_length": [252, 293, 562], "output_fn": [252, 293], "inputbatch": [252, 293], "collecttransform": [252, 293], "10833": [252, 293], "tfsquadv1posttransform": [252, 293], "n_best_siz": [252, 293, 562], "384": [252, 293, 562], "64": [252, 293, 472, 557, 560, 562, 566], "max_answer_length": [252, 293, 562], "30": [252, 293, 501, 505, 507, 562, 566], "nbest_predict": [252, 293, 562], "question": [252, 293, 305, 306, 358, 359, 469, 470, 474, 475, 508, 515, 539, 551, 560, 562, 566], "anoth": [252, 293, 301, 310, 354, 465, 497, 498, 525, 529, 562, 563], "long": [252, 293, 503, 557, 562], "document": [252, 293, 414, 476, 477, 482, 500, 510, 513, 517, 527, 530, 531, 538, 539, 541, 551, 558, 562, 564], "chunk": [252, 293, 562], "tfmodelzoocollecttransform": [252, 293], "tfsquadv1modelzooposttransform": [252, 293], "squadv1": [252, 293, 562], "parsedecodevoctransform": [252, 293], "conf_fname_or_obj": [253, 262, 294, 299, 309, 310, 311, 312, 314, 323, 328, 336], "unnecessari": [253, 512], "setter": 255, "calib_dataload": [255, 337, 395, 426, 430, 471, 474, 494, 495, 497, 505, 506, 511, 512, 534, 535, 554, 555, 556, 557], "reason": [255, 469, 476, 494, 537, 557, 561, 563], "know": [255, 500, 558], "metric_cl": [257, 361, 395, 512], "user_metr": [257, 361, 395], "alwai": [257, 304, 357, 361, 395, 497, 511, 512, 537, 557], "recommend": [257, 361, 437, 475, 495, 504, 523, 526, 531, 533, 551, 553, 563], "set_backend": 258, "tensorflowimagefold": 280, "qlinear2qdq": [295, 300, 353], "qlinearop": [296, 497, 507, 523, 554, 566], "check_model": 296, "onnx_qlinear_to_qdq": 296, "input_name_to_nod": 296, "tf_to_fp32_onnx": 297, "tf_to_int8_onnx": 297, "int8_model": [297, 298, 475], "get_node_map": 298, "fp32_onnx_path": 298, "module_node_map": 298, "get_quantizable_onnx_op": 298, "quantize_nod": 298, "dynamic_quant_export": 298, "pt_fp32_model": 298, "pt_int8_model": 298, "weight_typ": 298, "s8": 298, "static_quant_export": 298, "_quantiz": 298, "torch_to_fp32_onnx": 298, "do_constant_fold": 298, "torch_to_int8_onnx": 298, "achiev": [299, 336, 502, 510, 512, 535, 550, 551, 552, 554, 560, 561, 563], "across": [299, 309, 336, 362, 496, 512, 539, 542, 551, 555, 560, 563], "variou": [299, 309, 336, 362, 477, 507, 515, 542, 551, 553, 555], "dl": [299, 309, 323, 328, 336, 362, 497, 506, 519, 532, 552, 566], "bring": [299, 336, 526, 539, 560], "unifi": [299, 336, 475, 476, 477, 494, 506, 507, 511, 512, 514], "vari": [299, 323, 328, 336, 537, 551, 560, 566], "roc": [299, 308, 323, 328, 336, 361], "flexibl": [299, 323, 328, 336, 474, 498, 539, 551, 557], "popular": [300, 353, 467, 474, 475, 476, 493, 498, 501, 502, 505, 510, 512, 551, 554, 557, 563, 564], "techniqu": [300, 353, 467, 474, 507, 512, 515, 534, 550, 551, 552, 553, 554, 564, 565, 566], "bleu": [300, 302, 307, 353, 355, 360, 511, 551], "bleu_util": [300, 307, 353, 360], "coco_label_map": [300, 307, 353, 360], "coco_tool": [300, 307, 353, 360], "evaluate_squad": [300, 307, 353, 360], "f1": [300, 305, 307, 308, 353, 358, 360, 361, 500, 511, 512, 535, 559, 566], "basic_na": [300, 313, 353], "nas_util": [300, 313, 353], "pruner_legaci": [300, 353], "gradient_sensit": [300, 319, 353], "group_lasso": [300, 319, 353], "pruning_recip": [300, 353], "tile_pattern": [300, 324, 325], "prune_util": [300, 329, 353], "tuning_sampl": [300, 342, 348, 353, 403, 409], "tuning_spac": [300, 342, 348, 349, 351, 353, 403, 409, 410, 412], "tuning_struct": [300, 342, 348, 349, 350, 353, 403, 409, 410, 411], "auto_mixed_precis": [300, 342, 353, 403], "graph_optim": [300, 353], "mixed_precis": [300, 353, 362, 512], "model_convers": [300, 353], "pruning_v2": [300, 353], "unicoderegex": [301, 354], "hoc": [301, 354], "hack": [301, 354], "recogn": [301, 354, 563], "nondigit_punct_r": [301, 354], "compil": [301, 354, 512], "express": [301, 354, 469], "preced": [301, 354, 560, 563], "digit": [301, 354, 465, 552], "punct_nondigit_r": [301, 354], "symbol_r": [301, 354], "bleu_token": [301, 354], "mose": [301, 354], "smt": [301, 354], "mosesdecod": [301, 354], "mteval": [301, 354], "v14": [301, 354], "pl": [301, 354], "l954": [301, 354], "l983": [301, 354], "bilingu": [301, 354], "understudi": [301, 354], "qualiti": [301, 354], "machin": [301, 354, 502, 508, 518, 532, 534, 540, 552, 560, 561], "translat": [301, 302, 354, 355, 551, 563], "natur": [301, 354, 502], "approxim": [301, 302, 354, 355, 476, 511, 557], "glue": [301, 308, 354, 361, 495, 511, 512, 521], "word": [301, 354, 511, 551, 557, 566], "ngram": [301, 354, 511], "breviti": [301, 302, 354, 355, 511], "doe": [301, 354, 413, 494, 495, 511, 512, 557, 558, 562], "beam": [301, 354, 511], "tensor2tensor": [302, 355], "bleu_hook": [302, 355], "compute_bleu": [302, 355], "reference_corpu": [302, 355], "translation_corpu": [302, 355], "max_ord": [302, 355], "use_bp": [302, 355], "against": [302, 355], "gram": [302, 355], "bleu_scor": [302, 355], "third": [304, 357, 470, 509], "parti": [304, 357, 470, 509, 554], "pycocotool": [304, 357, 503, 508], "noth": [304, 357, 563], "thu": [304, 357, 437, 512, 551, 554], "cannot": [304, 357, 471, 503, 557, 561], "jonathanhuang": [304, 357], "image_id": [304, 357, 511], "invok": [304, 357, 437, 476], "groundtruth_dict": [304, 357], "exportgroundtruthtococo": [304, 357], "groundtruth_boxes_list": [304, 357], "groundtruth_classes_list": [304, 357], "max_num_class": [304, 357], "output_path": [304, 357], "detections_list": [304, 357], "exportdetectionstococo": [304, 357], "detection_boxes_list": [304, 357], "detection_scores_list": [304, 357], "detection_classes_list": [304, 357], "cocowrapp": [304, 357], "loadannot": [304, 357], "cocoevalwrapp": [304, 357], "agnostic_mod": [304, 357], "computemetr": [304, 357], "detection_typ": [304, 357], "bbox": [304, 357, 471, 511], "hold": [304, 340, 357, 399, 495], "iou_typ": [304, 357], "iou_thr": [304, 308, 357, 361, 511], "map_point": [304, 308, 357, 361, 511], "cocoev": [304, 357], "mscoco": [304, 357], "Then": [304, 357, 476, 497, 525, 527, 529, 530, 537, 560, 563], "exportsingleimagegroundtruthtococo": [304, 357], "next_annotation_id": [304, 357], "category_id_set": [304, 357], "groundtruth_box": [304, 357], "groundtruth_class": [304, 357], "groundtruth_mask": [304, 357], "groundtruth_is_crowd": [304, 357], "ingest": [304, 357], "here": [304, 357, 414, 476, 495, 500, 501, 502, 504, 505, 510, 511, 520, 527, 530, 532, 535, 538, 540, 554, 558, 559, 560, 566], "exportsingleimagedetectionstococo": [304, 357], "uniqu": [304, 337, 357, 554], "assign": [304, 357, 465, 500, 553, 563], "num_gt_box": [304, 357], "num_detect": [304, 308, 357, 361, 511, 512, 565], "image_height": [304, 357], "image_width": [304, 357], "detection_mask": [304, 357], "crowd": [304, 357], "insid": [304, 357, 437, 498, 499, 533, 551, 555, 563], "exportsingleimagedetectionboxestococo": [304, 357], "detection_box": [304, 357, 512, 565], "detection_scor": [304, 357, 512, 565], "detection_class": [304, 357, 512, 565], "exporsingleimagedetectionboxestococo": [304, 357], "exportsingleimagedetectionmaskstococo": [304, 357], "allenai": [305, 306, 358, 359], "bi": [305, 306, 358, 359], "att": [305, 306, 358, 359], "flow": [305, 306, 358, 359, 471, 472, 512], "f1_score": [305, 306, 358, 359], "ground_truth": [305, 306, 358, 359], "ground": [305, 306, 358, 359], "truth": [305, 306, 358, 359], "metric_max_over_ground_truth": [305, 306, 358, 359], "metric_fn": [305, 306, 358, 359], "exact_match_scor": [305, 358], "exact": [305, 358], "articl": [305, 306, 358, 359], "paragraph": [305, 306, 358, 359], "qa": [305, 306, 358, 359, 474], "normalize_answ": [306, 359], "newlin": [306, 359, 465], "tab": [306, 359, 532, 561], "harmon": [306, 308, 359, 361], "recal": [306, 308, 359, 361], "answer_start": [306, 359], "177": [306, 359, 566], "denver": [306, 359], "bronco": [306, 359], "nfl": [306, 359], "team": [306, 359, 469, 556], "afc": [306, 359], "super": [306, 359, 472], "bowl": [306, 359], "50": [306, 359, 472, 476, 537, 551, 560, 566], "56be4db0acb8001400a502ec": [306, 359], "percentag": [306, 359, 493, 557, 565], "tensorflowmetr": [308, 361], "maintain": [308, 361, 437, 469, 470, 514, 515, 527, 530, 534, 539, 540, 551, 557, 558], "pytorchmetr": [308, 361], "mxnetmetr": [308, 361], "onnxrtqlmetr": [308, 361], "onnxrtitmetr": [308, 361], "metric_registri": [308, 361], "metric_typ": [308, 361], "decorator_metr": [308, 361], "basemetr": [308, 361, 395], "single_output": [308, 361], "hvd": [308, 361, 500], "wrappytorchmetr": [308, 361], "wrapmxnetmetr": [308, 361], "wraponnxrtmetr": [308, 361], "proport": [308, 361], "pred_list": [308, 361], "pytorchloss": [308, 361], "mae": [308, 361, 511], "compare_label": [308, 361, 395, 511], "rmse": [308, 361, 511, 563], "tensorflowtopk": [308, 361], "k": [308, 361, 395, 511, 534, 551], "among": [308, 361, 526, 560], "outcom": [308, 361], "num_correct": [308, 361], "num_sampl": [308, 361], "generaltopk": [308, 361], "cocomapv2": [308, 361, 511], "anno_path": [308, 361, 511], "map_kei": [308, 361], "detectionboxes_precis": [308, 361], "output_index_map": [308, 361, 511], "tensorflowmap": [308, 361], "tensorflowcocomap": [308, 361], "tensorflowvocmap": [308, 361], "squadf1": [308, 361, 511], "miou": [308, 361], "num_class": [308, 361], "21": [308, 361, 520, 521, 543, 546, 547, 552, 560, 566], "iou": [308, 361], "intersect": [308, 361, 475, 511], "union": [308, 361, 454, 511, 543], "onnxrtglu": [308, 361], "dlrm": [308, 361], "modelconvers": 310, "typic": [310, 337, 472, 474, 499, 501, 505, 537, 551, 566], "basicna": 311, "model_build": [311, 314], "conf_fnam": 311, "nasbas": [314, 472], "nas_registri": 315, "nas_method": 315, "create_search_space_pool": 315, "idx": [315, 495], "enumer": [315, 428, 442, 454, 475, 498, 499, 500, 512, 550, 551, 561], "find_pareto_front": 315, "pareto": [315, 472], "front": [315, 472], "n_point": 315, "n_metric": 315, "n_pareto_point": 315, "gradientsensitivityprun": 317, "pytorchmodel": [317, 318, 320, 321, 322, 371], "overwritten": [317, 318, 320, 321, 322, 520], "grouplassoprun": 318, "legaci": 319, "basicmagnitudeprun": 320, "patternlockprun": [321, 333], "pruner_registri": 322, "clase": 322, "pruningconf": [323, 328], "tfpruningcallback": [323, 328], "input_model": [323, 328, 514, 535, 536, 537, 561], "pure": [323, 328, 551], "pattern_registri": 326, "pattern_typ": 326, "patternbas": 326, "mask_shap": [326, 327], "is_contigu": 326, "tile": 327, "tilepatternbas": 327, "tilepattern_1x1": 327, "1x1": [327, 498, 512, 551], "tilepattern_2x2": 327, "2x2": [327, 560], "tilepattern_1x16": 327, "1x16": 327, "tilepattern_4x1": 327, "tilepattern_1x2": 327, "1x2": [327, 560], "patternnxm": 331, "patternninm": 331, "reset_non_value_to_default": 332, "parse_not_to_prun": 332, "update_frequency_on_step": [333, 553], "max_sparsity_ratio_per_lay": [333, 553], "magnitudeprun": 333, "snipprun": 333, "snipmomentumprun": 333, "moreoev": 333, "quantconf": 336, "separ": [337, 469, 506, 509, 540, 542, 550, 553], "opt_model": [337, 512], "fulli": [337, 512, 540, 554, 560], "train_func": [337, 454, 500, 512, 554], "automixedprecisiontunestrategi": [338, 397], "basictunestrategi": [339, 398], "stage": [339, 344, 396, 398, 405, 498, 551, 561, 563], "polici": [339, 343, 396, 398, 404, 469, 474, 565, 567], "bayesiantunestrategi": [340, 399], "acq_max": [340, 399], "ac": [340, 399], "gp": [340, 399], "y_max": [340, 399], "n_warmup": [340, 399], "10000": [340, 399, 551], "n_iter": [340, 399], "acquisit": [340, 399], "gaussian": [340, 399, 563], "relev": [340, 399, 476, 477, 537, 551], "acq": [340, 399], "randomst": [340, 399], "scipi": [340, 399], "x_max": [340, 399], "targetspac": [340, 399], "pbound": [340, 399], "9527": [340, 399, 512, 565], "bayesianoptim": [340, 399], "exhaustivetunestrategi": [341, 401], "msetunestrategi": [343, 404], "mse_v2tunestrategi": [344, 405], "revert": [344, 352, 405, 413, 563], "randomtunestrategi": [345, 406], "strategy_registri": [346, 407, 563], "tunestrategi": [346, 407, 563], "tuningsamplerregistri": 349, "tuningsampl": [349, 410], "tuningord": [349, 410], "Not": [349, 350, 410, 411, 465, 472], "tuningspac": [349, 350, 410, 411], "tuning_order_lst": [349, 410], "initial_op_tuning_cfg": [349, 410], "modelwisetuningsampl": [349, 410], "tuning_items_prior": [349, 410], "op_dtype_dict": [349, 410], "optuningconfig": [349, 350, 351, 410, 411, 412], "optypewisetuningsampl": [349, 410], "opwisetuningsampl": [349, 410], "fallbacktuningsampl": [349, 410], "op_dtyp": [349, 410], "skip_first": [349, 410], "smoothquantsampl": [349, 410], "tuningitem": [350, 411], "item_typ": [350, 411], "pattern_to_intern": [350, 411], "default_dtyp": [350, 411], "pattern_to_path": [350, 411], "quant_mode_from_pattern": [350, 411], "internal_pattern": [350, 411], "initial_tuning_cfg_with_quant_mod": [350, 411], "op_name_typ": [350, 411], "step1": [350, 411], "step2": [350, 411], "complet": [350, 411, 475, 476, 551, 554, 563, 565, 566], "step3": [350, 411], "step4": [350, 411], "step5": [350, 411], "op_quant_mod": [351, 412], "ordereddefaultdict": [352, 413], "extract_data_typ": [352, 413], "reverted_data_typ": [352, 413], "signed_flag": [352, 413], "get_adaptor_nam": [352, 413], "experiment": [353, 472, 495, 499, 500, 502, 508, 512, 551, 553, 554, 558, 562], "base_model": [353, 364], "keras_model": [353, 364], "mxnet_model": [353, 364], "nets_factori": [353, 364], "onnx_model": [353, 364, 388, 535], "tensorflow_model": [353, 364, 393, 537], "torch_model": [353, 364], "collect_layer_histogram": [353, 458], "create_obj_from_config": [353, 458], "kl_diverg": [353, 458], "load_huggingfac": [353, 458, 512], "neural_insights_util": [353, 458], "weights_detail": [353, 458], "sub_class": [361, 395], "register_customer_metr": 361, "topk": [361, 395, 500, 511, 512, 534, 554], "frozen": [362, 370, 395, 514], "savedmodel": [362, 370, 395, 566], "onnx_ml_pb2": [362, 514], "hybirdblock": [362, 395], "basemodel": 363, "plai": [363, 552, 557, 560], "role": [363, 557, 560], "kerasmodel": 365, "get_model_fwk_nam": 366, "fwk": 366, "mxnetmodel": 367, "net": 368, "tfslimnetsfactori": 368, "get_model_typ": 370, "validate_graph_nod": 370, "validate_and_inference_input_output": 370, "graph_sess": 370, "graph_def_sess": 370, "frozen_pb_sess": 370, "load_saved_model": 370, "saved_model_tag": 370, "signatur": 370, "metagraphdef": 370, "keras_sess": 370, "slim_sess": 370, "checkpoint_sess": 370, "estimator_sess": 370, "saved_model_sess": 370, "tensorflowbasemodel": [370, 393], "tensorflowsavedmodelmodel": 370, "tensorflowllmmodel": 370, "exceed": 370, "2gb": 370, "tensorflowqatmodel": 370, "tensorflowcheckpointmodel": 370, "tensorflowmodel": 370, "pytorchbasemodel": 371, "pytorchfxmodel": 371, "ipexmodel": 371, "driven": [372, 474, 512, 532, 549, 561], "objective_registri": 372, "objective_custom_registri": 372, "obj_cl": 372, "eural_compressor": 372, "objective_cl": 372, "user_object": 372, "__class__": 372, "__name__": 372, "objective_cfg": 372, "usr_cfg": 372, "user_obj_cfg": 372, "easili": [372, 475, 516, 520, 532, 549, 560], "peak": [372, 549], "multiobject": 372, "metric_criterion": 372, "metric_weight": 372, "obj_criterion": 372, "obj_weight": 372, "is_measur": 372, "parserfactori": 374, "onnxrtparserfactori": 376, "onnxprofilingpars": 378, "respons": [378, 379, 383, 545, 546, 547, 554], "profilingpars": 379, "profilingresult": 380, "total_execution_tim": 380, "accelerator_execution_tim": 380, "cpu_execution_tim": 380, "op_run": 380, "op_defin": 380, "tensorflowparserfactori": 381, "tensorflowprofilingpars": 383, "profilerfactori": [384, 386, 391], "create_onnx_config": 389, "ort": 389, "sessionopt": 389, "delete_assign": 394, "create_tf_config": 394, "tf_modul": 394, "configproto": 394, "set_eager_execut": 394, "entir": [395, 454, 471, 476, 477, 493, 539, 551], "autotunestrategi": 396, "conservativetunestrategi": 400, "o0": [400, 563], "who": [400, 469], "hawq_v2tunestrategi": 402, "made": [402, 475, 554, 558, 563], "impact": [402, 551, 558, 563], "tunestrategymeta": 407, "metaclass": 407, "lowerbitssampl": 410, "blockfallbacktuningsampl": 410, "op_block_lst": 410, "target_dtyp": 410, "alpha_list": 410, "weightonlyquantsampl": 410, "quantopt": 413, "quant_typ": 413, "quant_opt": 413, "preprocess_user_cfg": 413, "op_user_cfg": 413, "op_user_cfg_modifi": 413, "build_slave_faker_model": 413, "slave": [413, 563], "virtual": [413, 552], "classregist": 413, "fun": 414, "attribute1": 414, "module_debug_level1": 414, "function1": 414, "param1": 414, "param2": 414, "parameter1": 414, "parameter2": 414, "function2": 414, "pep": 414, "484": [414, 566], "output_model": [414, 512, 535, 537, 561], "function3": 414, "section": [414, 477, 497, 498, 499, 532, 535, 538, 551, 553, 557, 565], "restructuredtext": 414, "liter": 414, "generator1": 414, "example_gener": 414, "exampleclass": 414, "param3": 414, "public": [414, 469, 527, 530], "attr1": 414, "attr2": 414, "attr5": 414, "api_doc_exampl": 415, "op_valu": 426, "staticquantconfig": [426, 428], "layer_class": 426, "parse_to_keras_tune_cfg": 426, "calib_iter": [426, 430, 476], "static_quantize_entri": 426, "weight_dtyp": [428, 442], "weight_sym": [428, 442], "weight_granular": 428, "per_tensor": [428, 476, 477, 504, 554, 565], "act_dtyp": [428, 442], "act_sym": 428, "act_granular": 428, "get_all_registered_config": 428, "base_config": [428, 430, 449], "parse_config_from_dict": 428, "config_dict": 428, "get_default_static_quant_config": 428, "quantize_model": 430, "register_algo": [431, 453], "algos_map": [431, 453], "example_algo": [431, 453], "rtnweightquantconfig": [431, 436, 442, 453], "dump_elapsed_tim": [431, 465, 475], "customized_msg": [431, 465], "elaps": [431, 465], "dataloader_len": [433, 442], "apply_gptq_quant": 433, "configs_map": [433, 436], "rtn_quantize_entri": 436, "device_typ": 437, "_dtype": 437, "cache_en": 437, "manag": [437, 454, 457, 512, 515, 516, 526], "region": [437, 560], "chosen": [437, 476, 493], "enter": [437, 526, 532, 540], "half": [437, 513, 523], "hpu": [437, 442], "float8_e4m3fn": [437, 442], "autocastmodel": 437, "affect": [437, 560], "dataparallel": 437, "distributeddataparallel": 437, "torch_dtyp": [437, 477], "weight_bit": [442, 476], "weight_group_s": 442, "double_quant_dtyp": 442, "double_quant_bit": 442, "double_quant_sym": 442, "double_quant_group_s": 442, "get_default_rtn_config": 442, "gptqconfig": 442, "act_ord": 442, "get_default_gptq_config": 442, "fp8qconfig": 442, "dtype_rang": 442, "act_algo": 442, "fp8": [442, 474, 552], "run_fn": [449, 450], "run_arg": [449, 450], "quantize_dynam": 449, "carri": [449, 551], "place": [449, 499, 508, 545, 551, 561, 563], "mutat": 449, "torchwrapp": 450, "loop": [454, 471, 472, 476, 477, 504, 542, 559, 563], "compressionmanag": 454, "deal": 454, "pruningconfig": 454, "orchestr": [454, 474, 507, 564], "on_train_begin": [454, 471, 498, 499, 512, 550, 551, 554], "train_loop": [454, 512, 550], "on_epoch_begin": [454, 457, 498, 499, 512, 550], "on_step_begin": [454, 457, 498, 499, 512, 550, 551], "on_after_compute_loss": [454, 498, 499, 512, 550], "on_before_optimizer_step": [454, 498, 499, 512, 550, 551], "on_step_end": [454, 457, 498, 499, 512, 550], "on_epoch_end": [454, 457, 498, 499, 512, 550], "on_train_end": [454, 498, 499, 512, 550, 551, 554], "path_to_sav": 454, "top1": [454, 511, 534, 551, 554, 566], "callbacks_list": 454, "layerhistogramcollector": 455, "layer_tensor": 455, "include_lay": 455, "get_func_from_config": 457, "func_dict": 457, "get_preprocess": 457, "get_metr": 457, "get_postprocess": 457, "get_algorithm": 457, "create_dataset": 457, "cfg_preprocess": 457, "cfg_filter": 457, "create_dataload": 457, "dataloader_cfg": 457, "create_eval_func": 457, "postprocess_cfg": 457, "fp32_baselin": [457, 475], "baselin": [457, 559, 560, 561], "create_train_func": 457, "train_cfg": 457, "Their": 457, "auxiliari": 458, "optimizedmodel": 460, "from_pretrain": [460, 512], "save_for_huggingface_upstream": [460, 512], "export_compressed_model": [460, 557], "saved_dir": [460, 557], "use_optimum_format": 460, "compression_dtyp": 460, "compression_dim": 460, "scale_dtyp": 460, "comoress": 460, "register_neural_insights_workload": 462, "workload_loc": [462, 465], "workload_mod": 462, "workload_nam": 462, "uuid": 462, "update_neural_insights_workload": 462, "workload_uuid": 462, "update_neural_insights_workload_accuracy_data": 462, "baseline_accuraci": 462, "optimized_accuraci": 462, "get_model_path": 462, "is_int8_model": 464, "load_weight_onli": 464, "checkpoint_dir": 464, "history_cfg": 464, "best_configur": 464, "best_model_weight": 464, "snapshot": [464, 536], "recover_model_from_json": 464, "json_file_path": 464, "cfg_from_fil": 465, "yaml_fil": [465, 495, 500], "lazyimport": 465, "lazi": 465, "till": [465, 563], "time_limit": 465, "get_siz": 465, "seen": [465, 475], "recurs": 465, "compute_spars": 465, "fault_tolerant_fil": 465, "equal_dict": 465, "d2": 465, "compare_kei": 465, "ignore_kei": 465, "ignor": [465, 493, 495, 557, 560, 563], "cpuinfo": 465, "combine_histogram": 465, "old_hist": 465, "old": [465, 512, 558], "get_tensor_histogram": 465, "get_all_fp32_data": 465, "get_tuning_histori": 465, "tuning_history_path": 465, "offlin": [465, 469, 512, 554, 560], "str2arrai": 465, "dequantize_weight": 465, "weight_tensor": 465, "min_filter_tensor": 465, "max_filter_tensor": 465, "scale_info": 465, "captureoutputtofil": 465, "tmp_file_path": 465, "stream": [465, 566], "sy": [465, 518], "stderr": 465, "captur": 465, "statist": [465, 466], "header": [465, 503], "field_nam": 465, "output_handl": 465, "printer": 465, "global_st": 465, "load_data_from_pkl": 465, "pkl": [465, 536], "dump_data_to_loc": 465, "show_memory_info": 465, "hint": 465, "dump_class_attr": 465, "compare_object": 465, "obj1": 465, "obj2": 465, "ignore_attr": 465, "comparison": [465, 557, 558, 561], "alias_param": 465, "param_nam": 465, "param_alia": 465, "alias": 465, "print_tabl": 465, "column_map": 465, "table_entri": 465, "titl": [465, 509, 533, 563], "insert_newlin": 465, "prettyt": 465, "column": [465, 557, 560], "handler": [465, 563], "row": [465, 497, 535, 560], "decim": 465, "get_tensors_info": 465, "get_weights_detail": 465, "weightdetail": 465, "dump_tabl": 465, "file_typ": 465, "csv": [465, 472, 535, 536], "dump_table_to_csv": 465, "get_number_of_socket": 465, "platform": [465, 474, 507, 515, 523, 542, 552, 554], "opentri": 465, "activation_min": 465, "activation_max": 465, "print_op_list": 465, "get_op_list": 465, "minmax_file_path": 465, "input_model_tensor": 465, "optimized_model_tensor": 465, "activation_min_max": 465, "calculate_ms": 465, "mse_metric_gap": 465, "fp32_tensor": 465, "dequantize_tensor": 465, "euclidean": [465, 498], "distanc": [465, 498], "check_key_exist": 465, "weightsdetail": 466, "input_tensor_data": 466, "optimized_tensor_data": 466, "weightsstatist": 466, "welcom": [468, 469, 470, 474, 534, 541, 567], "interest": [469, 474, 534, 561], "foster": 469, "particip": [469, 542], "commun": [469, 534], "harass": 469, "experi": [469, 515, 537, 559, 560, 563], "everyon": 469, "regardless": 469, "ag": 469, "bodi": 469, "ethnic": 469, "characterist": 469, "gender": 469, "educ": 469, "socio": 469, "econom": 469, "race": 469, "religion": 469, "sexual": 469, "orient": 469, "contribut": [469, 474, 551], "inclus": 469, "Being": 469, "viewpoint": 469, "gracefulli": 469, "focus": [469, 475], "empathi": 469, "toward": [469, 498], "member": [469, 475], "unaccept": 469, "imageri": 469, "unwelcom": 469, "troll": 469, "insult": 469, "derogatori": 469, "polit": 469, "attack": 469, "privat": 469, "publish": [469, 509, 510, 513, 533, 560], "electron": 469, "explicit": 469, "permiss": 469, "inappropri": 469, "profession": 469, "clarifi": 469, "appropri": [469, 493, 560], "fair": 469, "action": [469, 527, 530], "edit": 469, "reject": 469, "commit": [469, 470], "wiki": 469, "ban": 469, "temporarili": 469, "deem": 469, "threaten": 469, "offens": 469, "harm": 469, "mail": 469, "social": [469, 552], "media": [469, 552], "account": [469, 559, 563], "appoint": 469, "onlin": [469, 559], "event": [469, 561], "abus": 469, "report": [469, 470, 474, 542, 559], "contact": [469, 558, 559], "complaint": 469, "review": [469, 470, 474, 552], "investig": [469, 537], "circumst": [469, 553], "oblig": [469, 538], "confidenti": [469, 534], "regard": [469, 556], "incid": 469, "good": [469, 554, 563], "faith": 469, "repercuss": 469, "leadership": 469, "faq": [469, 474], "page": [469, 470, 534, 537, 538], "send": [470, 476], "view": [470, 474, 501, 523, 532, 538, 558], "star": 470, "repositori": [470, 527, 530], "button": [470, 507, 526, 532], "fork": [470, 527, 530], "clone": [470, 497, 508, 525, 529, 534, 536, 537, 539, 540], "pc": 470, "git": [470, 497, 503, 508, 534, 536, 537, 539, 540], "modif": [470, 475, 504, 520, 539], "checkout": 470, "my": 470, "push": [470, 551, 557, 560], "cover": [470, 502, 506, 552], "would": [470, 512, 536, 551, 554, 560], "adopt": [470, 515, 551, 552, 560], "certif": [470, 534], "agre": 470, "pr": [470, 494, 511, 527, 530, 558], "At": [470, 476, 538, 542, 563], "approv": 470, "solv": [470, 554, 558], "licens": 470, "azur": [470, 474, 552], "devop": 470, "ci": 470, "cloud": [470, 474, 542, 552], "deploi": [470, 498, 512, 538, 542, 557, 563], "e16": 470, "v5": 470, "scan": [470, 474], "pylint": 470, "bandit": 470, "copyright": [470, 509], "docstyl": 470, "spellcheck": 470, "dco": 470, "pytest": 470, "No": [470, 503, 512, 540, 541, 552], "failur": [470, 471], "fault": 470, "coverag": 470, "runtim": [470, 474, 475, 476, 478, 494, 497, 501, 504, 507, 513, 517, 522, 523, 553, 557, 558, 563], "submit": [470, 539, 542, 552], "bug": [470, 474], "safe": 470, "collabor": [470, 474, 517, 523], "adher": 470, "toolkit": [471, 508, 515, 523, 552, 564], "tracer": 471, "resolv": [471, 473], "floatfunct": 471, "cat": [471, 502, 518, 545, 546, 547], "done": [471, 498, 499, 516, 532, 541, 545, 546, 551, 554], "10004": [471, 472, 475, 494, 498, 499, 500, 504, 507, 513, 550, 553, 555, 557, 565], "neural_compressor": [471, 472, 474, 477, 492, 494, 495, 497, 498, 499, 500, 502, 505, 506, 511, 512, 513, 514, 534, 535, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 562, 563, 565], "eval": [471, 494, 497, 515, 554, 561], "conduct": [471, 512, 520, 532, 563, 564], "imper": 471, "therefor": [471, 512, 535, 537, 551, 554, 555, 558, 560], "lot": [471, 537, 560], "As": [471, 476, 494, 498, 511, 512, 526, 537, 551, 557, 563], "successfulli": [471, 500, 541, 545, 546, 547, 552], "suggest": [471, 559], "traceabl": 471, "proxi": 471, "tutori": [471, 523, 552, 564], "prototyp": 471, "html": [471, 474, 476, 493, 500, 507, 527, 530, 533, 535, 541, 545, 554], "highlight": 471, "untrac": 471, "ssd": [471, 502, 566], "resnet34": [471, 566], "r34": 471, "bboxes_labels_scor": 471, "prob": 471, "45": [471, 566], "max_output": 471, "zip": [471, 541, 545, 546], "dbox": 471, "dlabel": 471, "dscore": 471, "decode_singl": 471, "autom": [472, 515, 532, 533, 552, 560], "artifici": 472, "ann": 472, "par": [472, 542], "outperform": 472, "propos": [472, 475, 498, 513, 557, 560], "potenti": [472, 497, 558], "lie": [472, 493], "predictor": 472, "shown": [472, 494, 497, 498, 511, 512, 526, 535, 537, 549, 550, 551, 555, 560, 563], "figur": [472, 525, 526, 529, 555], "popul": 472, "inner": 472, "evolutionari": 472, "cycl": 472, "until": [472, 476, 563], "conclud": 472, "met": [472, 504, 554, 561], "yet": [472, 527, 530, 533, 540, 554], "simplest": [472, 493, 518], "launcher": [472, 474, 498, 499, 523, 564], "agent": 472, "nsga2": 472, "supernet": 472, "ofa_mbv3_d234_e346_k357_w1": 472, "acc": [472, 542, 551, 561, 566], "mac": [472, 533], "num_ev": 472, "250": [472, 551], "results_csv_path": 472, "search_result": 472, "dataset_path": 472, "ilsvrc2012": 472, "aim": [472, 474, 510, 515, 551, 560, 563, 564], "mobilenetv3": 472, "lt": [472, 495, 566], "wmt": 472, "en": 472, "de": 472, "guidelin": [473, 474], "mainstream": [474, 564], "workflow": [474, 476, 477, 497, 498, 502, 508, 513, 527, 530, 534, 561, 564], "particular": [474, 551, 557], "wide": [474, 501, 513, 551, 554, 566], "hardwar": [474, 475, 498, 507, 512, 532, 551, 552, 553], "xeon": [474, 508, 509, 510, 513, 552, 554, 556, 566], "scalabl": [474, 508, 510, 513, 552, 554, 556], "processor": [474, 510, 513, 540, 552, 554, 556], "flex": [474, 508], "amd": [474, 508, 566], "arm": [474, 507, 508, 566], "nvidia": [474, 493, 507, 508, 566], "llama2": 474, "falcon": [474, 510, 551, 560, 566], "gpt": [474, 510, 536, 551, 560, 566], "j": [474, 510, 536, 551, 560, 566], "bloom": [474, 551, 560, 566], "broad": [474, 507, 521, 564], "stabl": [474, 508, 551, 552], "diffus": [474, 552], "vision": [474, 502, 519, 560], "coder": [474, 507, 516, 517, 520, 523, 526, 539, 543, 552], "marketplac": [474, 533, 552], "googl": [474, 513, 552], "amazon": [474, 515, 523], "web": [474, 534, 540, 545, 546, 547, 561], "servic": [474, 532, 539, 552], "softwar": [474, 509, 551, 552, 558], "alibaba": [474, 522, 529, 530, 552], "tencent": [474, 552], "taco": [474, 552], "oliv": [474, 552], "ai": [474, 515, 552, 556, 564], "ecosystem": [474, 552], "lightn": [474, 522], "pip": [474, 497, 500, 503, 505, 508, 517, 520, 525, 527, 529, 530, 534, 535, 536, 537, 558], "wget": [474, 497, 503, 505, 534, 537], "googleapi": [474, 505, 534, 537], "v1_6": [474, 505, 534, 537], "mobilenet_v1_1": [474, 505, 534, 545], "0_224_frozen": [474, 505, 534, 545], "overview": [474, 563], "jupyterlab": [474, 515, 521, 523, 525, 529, 564], "studio": [474, 523, 532, 542, 564], "topic": 474, "int4": [474, 510, 554, 566], "innov": [474, 523, 552], "blog": [474, 552], "oct": [474, 552], "emnlp": [474, 552], "teq": [474, 552, 555, 557], "sep": [474, 552], "neurip": [474, 552], "quala": [474, 552], "minilm": [474, 552, 566], "releas": [474, 508, 521, 523, 525, 529, 531, 543, 546, 547, 567], "legal": [474, 567], "request": [474, 540, 541, 542, 545, 546, 547, 554], "ask": [474, 508], "email": 474, "research": [474, 509, 560, 566], "idea": [474, 534, 551, 560, 563], "discord": 474, "join": [474, 535, 540, 545, 546], "technic": 474, "discuss": 474, "wechat": [474, 552], "img": 474, "bridg": [475, 476, 507], "vanilla": [475, 476, 507], "abcadaptor": 475, "__init__": [475, 494, 495, 511, 563], "query_fw_cap": [475, 477], "query_fused_pattern": 475, "he": 475, "besid": [475, 498, 537, 557], "describ": [475, 477, 497, 504, 534, 561], "past": [475, 557], "mainten": 475, "difficult": [475, 560], "abil": [475, 476, 495, 504, 560], "fragment": 475, "scenario": [475, 492, 498, 512, 551, 557], "granular": [475, 476, 477, 504, 507, 518, 554, 560, 565], "semant": [475, 504], "mla": [475, 513, 554], "becom": [475, 502, 551, 557], "explor": 475, "inspect_tensor": 475, "op_list": [475, 561], "iteration_list": 475, "inspect_typ": 475, "save_to_disk": 475, "quantization_cfg": 475, "set_tensor": 475, "tensor_dict": 475, "diagnosis_help": 475, "fw": 476, "outlin": [476, 477], "instruct": [476, 477, 498, 508, 513, 527, 530, 534, 535, 536, 537, 551, 552, 553, 554, 560, 566], "extend": [476, 477], "accommod": [476, 477], "incorpor": [476, 477, 499, 551, 563], "give": [476, 532, 563], "diagram": [476, 477, 497, 563], "illustr": [476, 477, 499, 563], "sequencediagram": [476, 477, 542], "autonumb": [476, 477], "query_framework_cap": 476, "opwis": 476, "optypewis": 476, "travers": [476, 477, 557, 563], "\u2776": 476, "\u2777": 476, "\u2778": 476, "\u2779": 476, "\u277a": 476, "\u277b": 476, "\u277c": 476, "These": [476, 507, 535], "chapter": 476, "node_op": 476, "confirm": 476, "tune_config": 476, "int8_conv_config": 476, "optype_wise_": 476, "tuning_cfg_to_fw": 476, "Its": [476, 493, 551], "dispatch": [476, 507, 539, 542], "is_perchannel": 476, "is_asymmetr": 476, "convert_bf16": 476, "larger": [476, 551, 557, 560], "somewhat": 476, "distort": 476, "line": [476, 500, 507, 515, 520, 521, 540, 561], "explain": [477, 497, 560], "let": [477, 504, 520, 551, 553, 565], "overal": [477, 540, 565], "drive": 477, "uint4": 477, "kullback": [477, 498], "leibler": [477, 498], "pytorch_cpu": 477, "1_11_capabl": 477, "cap_s8_1_11": 477, "cap_s8_1_11_conv1d": 477, "per_channel_symmetr": 477, "addition": [477, 500, 551, 563], "per_tensor_symmetr": 477, "due": [477, 502, 551, 554, 560, 561], "nativ": 477, "with_arg": 477, "qscheme": 477, "quant_min": 477, "quant_max": 477, "linux": [492, 503, 508, 526, 532], "x86_64": 492, "aarch64": 492, "prove": [493, 557, 560], "benefici": 493, "\u03b2": 493, "\u03b1": 493, "fundament": [493, 512], "primari": [493, 563], "focu": [493, 563], "essenti": [493, 503], "remaind": 493, "enhanc": [493, 515, 551, 552, 556], "resolut": 493, "extrem": 493, "still": [493, 512, 538, 552, 554, 556], "retain": 493, "noteworthi": 493, "vanhouck": 493, "vincent": 493, "andrew": 493, "senior": 493, "mark": 493, "mao": 493, "speed": [493, 512, 523, 551, 552, 554, 563], "2011": 493, "szymon": 493, "migacz": 493, "2017": 493, "mckinstri": 493, "jeffrei": 493, "l": [493, 498, 561, 563], "discov": [493, 561], "1809": 493, "04191": 493, "2018": 493, "encount": 494, "consum": 494, "previous": 494, "lack": [494, 503], "faster": [494, 496, 502, 552, 563, 566], "Of": 494, "evenli": 494, "divid": [494, 542, 560, 563], "discard": 494, "throw": 494, "awai": 494, "draw": [494, 559, 563], "subprocess": 494, "pin": [494, 525, 529], "reshuffl": 494, "manner": [494, 498, 514], "newdataload": 494, "customis": [494, 495, 511], "ensp": [495, 562], "imagerecord": [495, 500, 565], "image_nam": 495, "cocorecord": 495, "gt": [495, 560, 562], "int64": 495, "offer": 495, "style_transf": 495, "content": [495, 540, 541, 545, 546, 547], "tfrecorddataset": 495, "labelbal": 495, "300": [495, 551, 566], "16": [495, 508, 545, 557, 566], "helloworld": [495, 513, 562], "aid": 496, "deploy": [496, 515, 532, 552, 555, 560], "infrastructur": 496, "diagnos": 497, "gui": [497, 507, 537, 551], "termin": [497, 525, 526, 529, 535], "repeat": [497, 563], "durat": [497, 541, 545, 546, 559], "cd": [497, 500, 508, 534, 536, 537, 539, 540, 545, 546, 547], "setup": [497, 504, 508, 527, 530, 534, 536, 537, 539, 540, 551], "ilsvr2012": 497, "caff": 497, "berkeleyvis": 497, "caffe_ilsvrc12": 497, "xvzf": 497, "image_recognit": [497, 537, 561], "resnet50_torchvis": 497, "ptq_static": [497, 536], "resnet50_v1": [497, 500, 512], "dataset_loc": [497, 537, 545, 561], "label_path": 497, "quantiti": 497, "vec": 497, "frac": [497, 560], "sigma": 497, "var": 497, "happen": 497, "dispers": [497, 535], "v0": [497, 537, 560, 561], "cg": [497, 537, 561], "conv0": [497, 537, 561], "expens": [498, 512, 563], "power": [498, 512, 526, 552], "mobil": [498, 512, 566], "produc": 498, "logit": 498, "softmax": 498, "kd": 498, "patient": 498, "compact": [498, 512, 518, 551], "agnost": 498, "resourc": [498, 539, 542, 563], "convolut": [498, 552], "ia": 498, "attach": [498, 512, 560], "shallow": 498, "deepest": 498, "deeper": 498, "paper": [498, 551, 557, 560], "10006": [498, 499], "student_output": [498, 499], "student_loss": [498, 499], "training_func_for_nc": [498, 499], "distil_loss_conf": 498, "accordingli": [498, 523, 560], "promis": [499, 512, 551], "huge": [499, 537, 551, 555], "heavi": 499, "light": 499, "booster": 499, "degrad": [499, 551, 563], "novel": [499, 515, 526, 532], "comb": 499, "distillation_criterion": [499, 512, 550], "q_conf": 499, "horovod": 500, "instal": [500, 503, 505, 515, 517, 520, 523, 527, 530, 532, 533, 535, 536, 537, 567], "program": [500, 509, 515, 532], "enable_eager_execut": 500, "yaml_file_path": 500, "pre_process": 500, "simpli": [500, 514, 515, 517, 520, 532, 540], "evaluation_result": 500, "evaluation_time_cost": 500, "partit": [500, 551], "distributedsampl": 500, "train_sampl": 500, "train_dataset": [500, 554], "num_replica": 500, "rank": 500, "train_load": 500, "train_kwarg": 500, "adadelta": 500, "distributedoptim": 500, "named_paramet": 500, "broadcast_paramet": 500, "root_rank": 500, "broadcast_optimizer_st": 500, "set_epoch": 500, "batch_idx": 500, "nll_loss": 500, "log_interv": 500, "0f": 500, "tloss": 500, "6f": 500, "dry_run": 500, "test_func": 500, "host": [500, 540, 542, 545, 546, 547], "num_of_process": 500, "002": 500, "ssh": [500, 532], "prompt": 500, "readm": [500, 545], "exactli": [500, 516], "recognit": [500, 502, 551, 561], "resizecropimagenet": [500, 562], "realiz": [500, 549, 556, 559], "tow": 500, "node1": [500, 545, 546], "node2": [500, 545, 546], "TO": [500, 517, 537], "your_node1_nam": 500, "your_node2_nam": 500, "resnet50_fp32_pretrained_model": 500, "nc_resnet50_v1": 500, "resnet": [500, 566], "varieti": [501, 553, 563], "demonstr": [501, 515, 545, 546, 547, 561], "speedup": [501, 507, 554], "2x": [501, 507], "vnni": [501, 507, 553, 554], "exchang": 502, "hope": 502, "inc_model": [502, 514], "fp32_onnx_config": 502, "verifi": [502, 510], "vgg16": [502, 566], "mobilenet": [502, 559, 566], "rcnn": 502, "torchscript": [502, 555, 560], "unsupport": [502, 512, 551], "add_relu": 502, "conv1d_relu": 502, "conv2d_relu": 502, "group_norm": 502, "hardswish": 502, "instance_norm": 502, "layer_norm": 502, "leaky_relu": 502, "sigmoid": 502, "toolchain": [503, 552], "bare": 503, "metal": 503, "sudo": [503, 518], "apt": [503, 508, 518, 526], "python3": 503, "dev": [503, 525, 529], "distutil": 503, "libgl1": 503, "mesa": 503, "glx": 503, "libglib2": 503, "ln": 503, "sf": 503, "usr": 503, "incompat": 503, "88": [503, 559, 566], "80": [503, 555, 561, 566], "pyobject": 503, "reinstal": 503, "libgl": 503, "yum": [503, 508], "opencv": [503, 508, 526], "conda": [503, 508, 518, 526, 545, 546, 547, 558], "13": [503, 508, 534, 558, 560], "pend": [503, 541], "sqlalchemi": 503, "27": [503, 566], "alemb": 503, "forg": [503, 508], "quick": [504, 513, 551, 564, 565], "friendli": [504, 512, 552, 560, 564, 565], "dive": [504, 564], "purpos": [504, 513, 532, 534, 553, 554], "syntax": 504, "go": [504, 527, 530, 538, 553, 557, 562], "up1": 504, "up2": 504, "valid_mixed_precis": 504, "addn": 504, "grappler_optim": 504, "constfold": 504, "arithmet": 504, "debug_stripp": 504, "major": [506, 537, 554, 560], "concept": [506, 559, 564], "rather": [506, 557], "custom_metr": 506, "refin": [506, 551], "420": 507, "geomean": 507, "snippet": 507, "upload": [507, 527, 530], "click": [507, 515, 516, 523, 526, 532, 537, 552, 561], "qintegerop": [507, 554], "plan": 507, "oneapi": [508, 552, 564], "analyt": [508, 552, 564], "success": [508, 534, 558], "11": [508, 511, 513, 534, 560, 563, 566], "frequent": 508, "pypi": [508, 527, 530], "nightli": 508, "headless": [508, 526], "fastai": 508, "esri": 508, "consolid": 508, "latest": [508, 552, 558], "eas": [508, 517, 552], "along": [508, 551, 557], "streamlin": [508, 539, 552], "scienc": 508, "websit": 508, "anaconda": [508, 539, 540], "suit": [508, 533, 561], "formerli": 508, "skylak": 508, "cascad": 508, "lake": [508, 513, 552], "cooper": [508, 513, 552], "ic": [508, 552], "sapphir": [508, 510], "rapid": [508, 510], "hbm": 508, "arctic": 508, "sound": 508, "pont": 508, "vecchio": 508, "cento": [508, 566], "ubuntu": 508, "22": [508, 566], "04": [508, 566], "maco": 508, "ventura": 508, "fortensorflow": 508, "forpytorch": 508, "12": [508, 534, 566], "tf_enable_onednn_opt": 508, "onednn": [508, 513, 554], "newer": 508, "subject": 509, "accompani": [509, 563], "wish": 509, "bibtex": 509, "author": 509, "feng": 509, "tian": 509, "hanwen": 509, "haihao": [509, 551], "shen": [509, 551], "suyu": 509, "chen": 509, "howpublish": 509, "year": 509, "logo": 509, "atom": 509, "phi": 509, "pentium": 509, "vtune": 509, "corpor": 509, "subsidiari": 509, "brand": 509, "claim": 509, "sq": [510, 560], "woq": 510, "4th": [510, 552, 554], "gen": [510, 513, 552, 554, 556], "codenam": [510, 513], "quickli": [510, 563, 564], "eleutherai": [510, 536, 560, 566], "6b": [510, 536, 560, 566], "facebook": [510, 538, 560, 566], "3b": [510, 560], "30b": [510, 560, 566], "llama": [510, 551, 552, 555, 557, 560, 566], "7b": [510, 560, 566], "13b": [510, 560, 566], "70b": [510, 566], "tiiuae": [510, 560, 566], "40b": 510, "soon": 510, "popularli": 511, "industri": [511, 552], "label_map": 511, "decis": 511, "ap": 511, "curv": 511, "turn": [511, 526, 555], "target_boxes_num": 511, "str_label": 511, "int_label": 511, "inturn": 511, "cocomap": 511, "vocmap": 511, "categor": 511, "multiclass": 511, "multilabel": 511, "newmetr": 511, "reset": 511, "reflect": [511, 562], "new_metr": 511, "deliv": [512, 552, 558], "conveni": [512, 539], "upgrad": 512, "veri": [512, 533, 537, 554, 557, 563, 564], "comprehens": [512, 564], "resort": 512, "automodelforsequenceclassif": 512, "autotoken": 512, "val_dataset": [512, 554], "val_dataload": [512, 554], "worker": [512, 542, 545, 546, 547, 554], "ping_memori": [512, 554], "formul": 512, "effort": 512, "onnxrt_integ": [512, 565], "onnxrt_qlinear": [512, 565], "image_tensor": [512, 565], "post_training_dynamic_qu": [512, 553, 563], "1000": [512, 541, 565], "2000": 512, "sampling_s": [512, 565], "model_wis": [512, 565], "op_dict": 512, "op_wis": [512, 561, 565], "sigopt_api_token": [512, 559, 563], "sigopt_project_id": [512, 559, 563], "sigopt_experiment_nam": [512, 559, 563], "demo": 512, "600": 512, "training_arg": 512, "emul": [512, 554], "trainer": [512, 523], "briefli": [512, 560], "pruning_func": 512, "train_dataload": [512, 551, 554], "n_gpu": 512, "gradient_accumulation_step": 512, "clip_grad_norm_": 512, "max_grad_norm": 512, "start_epoch": [512, 553, 565], "end_epoch": [512, 553, 565], "97": [512, 566], "newli": [512, 551], "on_after_optimizer_step": [512, 551], "layer3": [512, 551], "0004": 512, "randomresizedcrop": [512, 562], "totensor": [512, 562], "485": 512, "456": [512, 566], "406": [512, 566], "nepoch": 512, "cnt": 512, "loss_sum": 512, "iter_bar": 512, "desc": 512, "teacher_logit": 512, "train_fun": 512, "training_func": 512, "recent": [512, 513], "growth": [512, 513, 551], "complex": [512, 513, 551], "significantli": [512, 513, 535, 537, 551, 563], "bandwidth": [512, 513, 557], "exit_polici": [512, 565], "determinist": 512, "meaning": [512, 550], "reli": [512, 560], "prune_conf": 512, "quantization_aware_training_conf": 512, "aforement": 512, "inset": 512, "p_conf": [512, 550], "ssd_mobilenet_v1": 512, "benchmarkconf": 512, "sixteen": 513, "launch": [513, 533, 538], "3rd": [513, 552, 554, 556], "boost": [513, 516, 532, 551, 552], "x86": 513, "avx512": [513, 554], "vcvtne2ps2bf16": 513, "vcvtneps2bf16": 513, "vdpbf16p": 513, "fbgemm": [513, 554], "tensorrtexecutionprovid": [513, 554], "cudaexecutionprovid": [513, 554], "dnnlexecutionprovid": [513, 554], "avx512_bf16": 513, "plu": 513, "resnet18": [513, 517, 566], "persist": 514, "brought": [514, 516, 523, 554], "tf2": 514, "h5": 514, "hybridblock": 514, "0000": 514, "saved_result": [514, 536, 557], "simplifi": [515, 526, 532, 551, 552], "acquir": 515, "analysi": [515, 532, 551, 559], "heurist": [515, 532], "great": 515, "facilit": 515, "autocast": 515, "my_model": 515, "no_grad": 515, "memory_format": 515, "112": 515, "plugin": [515, 533], "aw": [515, 523, 542, 552, 566], "sagemak": [515, 523], "neural_cod": [515, 517, 519, 520, 521, 523], "bench": 515, "superbench": 515, "enjoi": [516, 520, 523], "reload": [516, 533, 535, 538], "modern": [517, 557], "democrat": [517, 552], "programm": [517, 523, 532], "nano_bf16_channels_last": 517, "nano_bf16_ipex_channels_last": 517, "nano_bf16_ipex": 517, "nano_bf16": 517, "nano_fp32_channels_last": 517, "nano_fp32_ipex_channels_last": 517, "nano_fp32_ipex": 517, "nano_gpu_to_cpu": 517, "nano_int8": 517, "nano_jit_bf16_channels_last": 517, "nano_jit_bf16_ipex_channels_last": 517, "nano_jit_bf16_ipex": 517, "nano_jit_bf16": 517, "nano_jit_fp32_channels_last": 517, "nano_jit_fp32_ipex_channels_last": 517, "nano_jit_fp32_ipex": 517, "nano_jit_fp32": 517, "nano_onnxruntime_fp32": 517, "nano_onnxruntime_int8_qlinear": 517, "openvino": 517, "nano_openvino_fp32": 517, "nano_openvino_int8": 517, "bc": [518, 526], "conda_prefix": 518, "echo": 518, "tradit": [518, 551], "libjemalloc": 518, "libiomp5": 518, "home": 518, "lib": 518, "ld_preload": 518, "malloc_conf": 518, "oversize_threshold": 518, "background_thread": 518, "metadata_thp": 518, "dirty_decay_m": 518, "9000000000": 518, "muzzy_decay_m": 518, "kmp_affin": 518, "kmp_blocktim": 518, "dnnl_primitive_cache_capac": 518, "governor": 518, "cpufreq": 518, "scaling_governor": 518, "powersav": 518, "tee": 518, "pytorch_jit_script": [519, 522], "pytorch_channels_last": [519, 522], "run_bench": 519, "patch": [519, 532], "patch_path": 519, "your_patch_path": 519, "sweep": 519, "sweep_object": 519, "bench_config": 519, "bench_featur": 519, "sai": 520, "run_glu": [520, 521, 543, 546, 547], "requisit": 520, "task_nam": [520, 521, 543, 546, 547], "do_ev": [520, 521, 536, 543, 546, 547], "remain": 520, "itself": [520, 551], "run_glue_optim": 520, "static_ipex": 520, "auto_qu": 521, "v4": [521, 543, 546, 547, 566], "albert": [521, 566], "sst2": 521, "alexnet": [521, 566], "pytorch_amp": 522, "optimize_for_infer": 522, "pytorch_jit_trac": 522, "pytorch_jit_script_ofi": 522, "pytorch_jit_trace_ofi": 522, "torchdynamo": 522, "pytorch_torchdynamo_jit_script": 522, "pytorch_torchdynamo_jit_trac": 522, "pytorch_torchdynamo_jit_script_ofi": 522, "pytorch_torchdynamo_jit_trace_ofi": 522, "pytorch_inc_bf16": 522, "pytorch_inc_static_quant_fx": 522, "pytorch_inc_static_quant_ipex": 522, "pytorch_inc_static_quant_ipex_xpu": 522, "pytorch_inc_dynamic_qu": 522, "pytorch_ipex_fp32": 522, "pytorch_ipex_bf16": 522, "pytorch_ipex_int8_static_qu": 522, "pytorch_ipex_int8_dynamic_qu": 522, "blade": 522, "disc": 522, "pytorch_aliblad": 522, "pytorch_lightning_bf16_cpu": 522, "tensorflow_amp": 522, "keras_amp": 522, "tensorflow_inc": 522, "keras_inc": 522, "onnx_inc_static_quant_qlinear": 522, "onnx_inc_static_quant_qdq": 522, "onnx_inc_dynamic_qu": 522, "optimum": [522, 523, 535, 557], "pytorch_inc_huggingface_optimum_stat": 522, "pytorch_inc_huggingface_optimum_dynam": 522, "intel_extension_for_transform": 522, "bigdl": [522, 523], "nano": [522, 523], "nano_": 522, "inc_auto": 522, "delight": 523, "announc": 523, "500": [523, 541, 566], "jupyt": [523, 525, 526, 529], "isa": 523, "adjust": [523, 554, 560], "delta": 523, "acc_delta": 523, "int8_acc": 523, "fp32_acc": 523, "ext": [525, 527, 529, 530, 531], "lab": [525, 526, 527, 529, 530], "nodej": [525, 529], "jlpm": [525, 529], "yarn": [525, 529], "npm": [525, 526, 529], "lieu": [525, 529], "labextens": [525, 526, 529], "typescript": [525, 529], "watch": [525, 529, 538], "immedi": [525, 529, 551], "refresh": [525, 529], "browser": [525, 529, 534, 538], "wait": [525, 529, 532, 542], "rebuilt": [525, 529], "easier": [525, 529, 532, 534, 552], "symlink": [525, 529], "down": 526, "finish": [526, 542], "blank": 526, "cell": 526, "gain": [526, 550, 552], "mkl": 526, "jemalloc": 526, "pip3": 526, "pyproject": [527, 530], "toml": [527, 530], "twine": [527, 530], "whl": [527, 530], "dist": [527, 530], "sdist": [527, 530], "bdist_wheel": [527, 530], "deprec": [527, 530, 558, 562], "frontend": [527, 530, 540, 547], "login": [527, 530, 559], "cut": [527, 530], "admin_github_token": [527, 530], "pypi_token": [527, 530], "npm_token": [527, 530], "secret": [527, 530], "panel": [527, 530, 532], "draft": [527, 530], "changelog": [527, 530, 531], "pkg": [527, 530], "bot": [527, 530], "pick": [527, 530, 533], "feedstock": [527, 530], "hatch": 530, "notabl": 531, "vscode": [531, 533], "daili": 532, "advantag": [532, 551, 553, 563], "remot": 532, "server": [532, 534, 537, 540, 545, 546, 547], "re": [532, 538, 557], "market": 532, "uninstal": 532, "fill": [532, 559, 562, 563], "upper": 532, "sidebar": 532, "hover": 532, "track": [532, 559], "argpars": 532, "pop": [532, 542], "diff": 532, "manifest": 533, "declar": 533, "palett": 533, "registercommand": 533, "amodio": 533, "tsl": 533, "matcher": 533, "dbaeumer": 533, "eslint": [533, 538], "press": 533, "f5": 533, "ctrl": 533, "hello": 533, "world": 533, "breakpoint": 533, "consol": [533, 538], "relaunch": 533, "toolbar": 533, "node_modul": 533, "viewlet": 533, "dropdown": 533, "runner": [533, 538], "startup": 533, "bundl": 533, "neural_insight": [534, 536, 537], "tl": 534, "ui": 534, "5000": 534, "338174d13706855fc6924cec7b3a8ae8": 534, "listen": 534, "firewal": 534, "8080": 534, "cert": 534, "path_to_cert": 534, "crt": 534, "path_to_private_kei": 534, "encrypt": 534, "expos": 534, "forfeit": 534, "client": [534, 540, 547], "extern": 534, "threat": 534, "diagnost": 534, "skill": 534, "feel": [534, 538], "layoutlmv3": [535, 566], "seqev": 535, "sentencepiec": 535, "timm": 535, "fvcore": 535, "pillow": 535, "einop": 535, "textdist": 535, "setuptool": 535, "cli": 535, "hypjudi": 535, "finetun": [535, 551, 557, 566], "funsd": [535, 566], "calib_dataset": 535, "incdataset": 535, "eval_dataset": 535, "poor": [535, 561], "9049": 535, "2989": 535, "66": [535, 566], "9631": 535, "glob": 535, "panda": 535, "pd": 535, "set_opt": 535, "max_row": 535, "max_column": 535, "getmtim": 535, "activations_t": 535, "weights_tabl": [535, 536], "read_csv": 535, "nweight": 535, "descend": 535, "sorted_data": 535, "sort_valu": 535, "ascend": 535, "evid": 535, "tip": 535, "8981": 535, "7502": 535, "run_clm": 536, "wikitext": [536, 566], "dataset_config_nam": 536, "do_train": 536, "inspect_sav": 536, "inspect_result": 536, "quan": 536, "model_summari": 536, "incept": [537, 566], "v3": [537, 566], "inception_v3": [537, 561], "inceptionv3_fp32_pretrained_model": [537, 561], "bash": [537, 561], "prepare_dataset": 537, "sh": [537, 561], "raw_dir": 537, "img_raw": 537, "delet": [537, 551], "run_tun": 537, "nc_inception_v3": 537, "highest": [537, 543, 563], "satisfactori": 537, "webpag": 537, "spike": 537, "bottom": 537, "chart": [537, 554, 559, 561], "concentr": 537, "toler": 537, "But": 537, "bigger": 537, "bootstrap": 538, "localhost": [538, 540, 545, 546], "3000": 538, "lint": 538, "interact": [538, 559], "correctli": 538, "hash": [538, 541], "readi": [538, 551], "aren": 538, "transit": 538, "webpack": 538, "babel": 538, "tweak": 538, "ever": 538, "curat": 538, "suitabl": 538, "middl": [538, 560], "shouldn": 538, "understand": [538, 554, 561, 564], "wouldn": 538, "couldn": 538, "troubleshoot": 538, "effortlessli": 539, "grpc": [539, 540, 544, 545, 546, 548], "queue": 539, "seamlessli": [539, 551, 563], "mpi": [539, 540, 563], "neural_solut": [539, 540, 545, 546, 547], "task_monitor_port": [540, 545, 546, 547], "22222": [540, 545, 546, 547], "result_monitor_port": [540, 545, 546, 547], "33333": [540, 545, 546, 547], "restful_api_port": [540, 545, 546, 547], "hostfil": [540, 542, 545, 546, 547], "grpc_api_port": [540, 545, 546, 547], "api_typ": [540, 545, 546, 547], "conda_env": [540, 545, 546, 547], "upload_path": [540, 545, 546, 547], "8000": [540, 545, 546, 547], "monitor": [540, 545, 546, 547], "3333": [540, 545, 546, 547], "2222": [540, 545, 546, 547], "ns_workspac": [540, 545, 546, 547], "hf_model": [540, 544, 546, 547], "curl": [540, 541, 545, 546], "task_id": [540, 545, 546, 547], "usernam": 540, "db": [540, 542], "serve_log": [540, 545, 546, 547], "frontend_grpc": 540, "task_log": 540, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 540, "task_workspac": 540, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 540, "aliv": 540, "properli": 540, "commonli": [540, 551], "hostnam": 540, "breakdown": 540, "ip": 540, "hous": 540, "host1": [540, 545, 546], "host2": [540, 545, 546], "query_id": 540, "oaa": 541, "host_ip": 541, "task_request": [541, 545, 546, 547], "tuning_info": [541, 545], "optimization_result": [541, 545], "result_path": [541, 545, 546], "closur": 541, "404": [541, 551, 566], "health": 541, "healthi": 541, "quantized_model": [541, 545, 546], "400": [541, 566], "alloc": 542, "incom": 542, "taskmonitor": 542, "cluster": [542, 545, 546, 563], "tasklaunch": 542, "resultmonitor": 542, "receiv": [542, 559], "p1": 542, "notif": 542, "p2": 542, "p3": 542, "mpirun": [542, 563], "perf": 542, "p4": 542, "four": [542, 561, 566], "classdiagram": 542, "taskdb": 542, "get_statu": 542, "update_statu": 542, "task_collect": 542, "append_task": 542, "get_all_pending_task": 542, "update_task_statu": 542, "task_db": 542, "wait_new_task": 542, "schedule_task": 542, "dispatch_task": 542, "launch_task": 542, "query_task_statu": 542, "node_list": 542, "reserve_resourc": 542, "get_node_statu": 542, "gcp": [542, 552], "script_url": [543, 545, 546, 547], "archiv": 543, "prioriti": 543, "tf_example1": [544, 545, 546], "hf_models_grpc": [544, 547], "00173": 545, "01024": 545, "task_request_distribut": 545, "custom_models_optim": 545, "7602cd63d4c849e7a686a8165a77f69d": [545, 546], "151": [545, 566], "8617": 545, "17": [545, 566], "8213": [545, 566], "number_of_socket": [545, 546], "number_of_thread": [545, 546], "cdf419910f9b4d2a8320d0e420ac1d0a": 546, "optimized_result": 546, "58": [546, 566], "3162": 546, "6488": [546, 566], "06": [547, 565, 566], "34": [547, 566], "55": [547, 566], "d3e10a49326449fb9d0d62f2bfc1cb43": 547, "fastapi": 548, "multi_object": 549, "benefit": 550, "instanti": 550, "neuron": 551, "art": 551, "grown": 551, "unpreced": 551, "increasingli": 551, "crucial": 551, "stand": [551, 563], "shrink": 551, "contextu": 551, "scene": 551, "haven": 551, "color": [551, 555], "lowest": [551, 563], "emsp": 551, "downstream": 551, "prone": 551, "co": 551, "discourag": 551, "penal": 551, "parameter": 551, "lightweight": 551, "perceptron": 551, "mlp": 551, "valuabl": [551, 561], "basi": 551, "billion": 551, "dolli": [551, 560, 566], "mpt": [551, 560, 566], "lm": [551, 566], "lamini": [551, 560], "worth": 551, "mention": [551, 557], "tend": 551, "exemplifi": 551, "complement": 551, "fortieth": 551, "miss": [551, 554], "pruner2": 551, "few": [551, 552, 560, 563], "lm_head": 551, "yourself": 551, "uncertain": 551, "auto_config": 551, "quit": 551, "straightforward": [551, 557, 560], "pruning_pattern": 551, "pruning_start": 551, "pruning_end": 551, "sparse_gpt": 551, "embed_out": 551, "card": 551, "hesit": 551, "causal": 551, "clm": 551, "sst": [551, 566], "25": [551, 566], "63": [551, 566], "24": [551, 563, 566], "35": [551, 566], "flan": 551, "t5": [551, 566], "english": 551, "romanian": 551, "381": 551, "yolov5": 551, "75": [551, 566], "2x1": [551, 566], "801": 551, "7895": 551, "signific": [551, 552, 555, 560], "reduct": [551, 555, 565], "namhoon": 551, "lee": 551, "thalaiyasingam": 551, "ajanthan": 551, "philip": 551, "torr": 551, "2019": 551, "zafrir": 551, "ofir": 551, "ariel": 551, "larei": 551, "boudoukh": 551, "mosh": 551, "wasserblat": 551, "2111": 551, "05754": 551, "2021": 551, "kwon": 551, "kim": 551, "mahonei": 551, "hassoun": 551, "keutzer": 551, "gholami": 551, "pp": 551, "24101": 551, "24116": 551, "frantar": [551, 557], "alistarh": 551, "medium": 552, "aug": 552, "juli": 552, "onnxcommunitymeetup2023": 552, "chatbot": 552, "june": 552, "msft": 552, "netflix": 552, "apr": 552, "mlperf": [552, 566], "5x": 552, "heterogen": 552, "mar": 552, "jan": 552, "busi": 552, "amx": 552, "journei": 552, "dec": 552, "mleffici": 552, "deepen": 552, "foundat": 552, "intellig": 552, "vmware": 552, "applianc": 552, "bitnami": 552, "nov": 552, "sota": 552, "plug": 552, "twitter": 552, "linkedin": 552, "zone": 552, "land": 552, "pat": 552, "keynot": 552, "intelon": 552, "chines": 552, "purif": 552, "sacrif": 552, "jun": 552, "partner": 552, "feb": 552, "joint": 552, "bilibili": 552, "gestalt": 552, "ml": 552, "doubl": 552, "abound": 552, "lpot": [552, 558], "nextplatform": 552, "cern": 552, "gan": 552, "3dgan": 552, "iml": 552, "workshop": 552, "asplo": 552, "18": [552, 566], "highli": [552, 557], "intelcaff": 552, "aris": 553, "henc": 553, "onnxrt_qoper": 553, "quant_aware_train": 553, "weight_compress": [553, 565], "initial_spars": [553, 565], "prune_typ": [553, 565], "basic_magnitud": [553, 565], "update_frequ": 553, "prune_domain": 553, "tile_pattern_1x1": 553, "invent": 554, "cost": [554, 557], "theoret": [554, 557], "zeropoint": 554, "255": [554, 560], "overflow": 554, "unseen": 554, "enough": 554, "peopl": 554, "mimic": 554, "fact": 554, "ultim": 554, "pain": 554, "lossi": 554, "philosophi": 554, "neither": 554, "nor": 554, "val_load": 554, "avg": 554, "themselv": 554, "dmlexecutionprovid": 554, "meanwhil": 555, "substanti": 555, "pose": 555, "challeng": 555, "greatli": [555, 557], "even": [555, 557, 560], "constrain": 555, "grei": 555, "blue": 555, "rectangl": 555, "w8a8": [555, 557], "10005": 555, "rtn_arg": [555, 557], "ouput_dir": 555, "fp32_model_path": 555, "int8_model_path": 555, "ON": 556, "forc": 556, "postposttrainingquantconfig": 556, "bf16wrapper": 556, "retrac": 556, "preval": 557, "grow": 557, "demand": 557, "trade": 557, "bottleneck": 557, "roughli": 557, "speak": 557, "capac": [557, 559], "flop": 557, "famou": 557, "approx": 557, "bmm": 557, "100x": 557, "excel": 557, "stai": [557, 560], "quantif": [557, 560], "think": 557, "intuit": [557, 560], "uniformli": 557, "qlora": 557, "invers": 557, "restor": 557, "protect": 557, "inspir": 557, "normalfloat": 557, "e2m1": 557, "bnb": 557, "805": 557, "91": [557, 560, 566], "stabil": 557, "weightonlylinear": 557, "date": 557, "qweight": 557, "gptq_arg": 557, "use_full_length": 557, "awq_arg": 557, "compressed_model": 557, "omit": 557, "rtn_g32asym": 557, "gptq_g32asym": 557, "gptq_g32asym_disable_last_matmul": 557, "gptq_g128asym": 557, "awq_g32asym": 557, "xiao": [557, 560], "guangxuan": [557, 560], "2211": [557, 560], "10438": [557, 560], "wei": [557, 560], "xiui": [557, 560], "suppress": [557, 560], "2209": [557, 560], "13325": [557, 560], "lin": 557, "ji": 557, "2306": 557, "00978": 557, "elia": 557, "dettmer": 557, "tim": 557, "2305": 557, "14314": 557, "site": 558, "assist": 558, "experienc": 558, "18284": 558, "absenc": 558, "safe_mod": 558, "model_from_json": 558, "defici": 558, "hinder": 558, "sed": 558, "your_script": 558, "backbon": 559, "sigopt_experiment_id": 559, "nc": [559, 563], "suffici": 559, "ordinari": 559, "latenc": [559, 563], "8266": 559, "8372": 559, "2132": 559, "83": [559, 560, 566], "7495": 559, "8299": 559, "8294": 559, "85": [559, 560, 566], "0837": 559, "8291": 559, "4469": 559, "gigant": 560, "systemat": 560, "migrat": [560, 564], "difficulti": 560, "mathemat": 560, "allevi": 560, "coarsest": 560, "finer": [560, 563], "matric": 560, "similarli": 560, "finest": 560, "consumpt": 560, "why": [560, 561], "suppos": 560, "6839": 560, "4741": 560, "7451": 560, "9301": 560, "1742": 560, "6835": 560, "q_min": 560, "q_max": 560, "q_x": 560, "clamp_": 560, "round_": 560, "w_q": 560, "00296431384049356": 560, "59": [560, 566], "172": [560, 566], "192": 560, "w_dq": 560, "2220": 560, "1510": 560, "2420": 560, "2570": 560, "0500": 560, "1890": 560, "mseloss": 560, "1983354538679123": 560, "6848": 560, "4743": 560, "7440": 560, "9308": 560, "1749": 560, "385297635664756e": 560, "07": [560, 565, 566], "quantize_per_channel": 560, "x_tmp": 560, "detach": 560, "keepdim": 560, "dequantize_per_channel": 560, "0029": [560, 566], "0036": 560, "162": [560, 566], "48": [560, 566], "72": [560, 566], "93": [560, 566], "207": 560, "139": [560, 566], "6837": 560, "4734": 560, "1751": 560, "6821": 560, "637690492221736e": 560, "6376e": 560, "3852e": 560, "cdot": 560, "quantize_per_tensor_absmax": 560, "n_bit": 560, "div_": 560, "0806": 560, "7589": 560, "6038": 560, "3815": 560, "5040": 560, "7174": 560, "5444": 560, "5826": 560, "7772": 560, "5555": 560, "3740": 560, "3253": 560, "0698": 560, "1381": 560, "5972": [560, 566], "0086": 560, "0737": 560, "8298": 560, "6883": 560, "2991": 560, "1601": 560, "6506": 560, "8246": 560, "3924": 560, "3845": 560, "8768": 560, "w_scale": 560, "x_q": 560, "x_scale": 560, "84": [560, 566], "120": 560, "0059755356051027775": 560, "89": [560, 566], "119": 560, "57": [560, 566], "006533813662827015": 560, "y_q": 560, "17509": 560, "7608": 560, "4055": 560, "16599": 560, "21020": 560, "10016": 560, "9860": 560, "22444": 560, "y_dq": 560, "6836": 560, "2970": 560, "1583": 560, "6481": 560, "8207": 560, "3911": 560, "3850": 560, "8763": 560, "though": 560, "simplic": 560, "fp1": 560, "fp2": 560, "subsect": [560, 565], "x1": [560, 563], "x2": [560, 563], "herebi": 560, "optdecoderlay": 560, "blockwis": 560, "auto_alpha_arg": 560, "overhead": 560, "hardtanh": 560, "t5norm": 560, "llamanorm": 560, "groupnorm": 560, "lambada": 560, "openai": [560, 566], "sweet": 560, "spot": 560, "bigscienc": [560, 566], "560m": 560, "354": 560, "3542": 560, "1b7": 560, "4634": 560, "4936": 560, "518": 560, "5185": 560, "7b1": [560, 566], "5764": [560, 566], "5977": 560, "bloomz": [560, 566], "3947": 560, "3930": 560, "4828": 560, "4906": 560, "5018": 560, "4980": 560, "5593": [560, 566], "5552": 560, "125m": 560, "379": 560, "3757": 560, "350m": 560, "4516": 560, "4533": 560, "5789": 560, "5742": 560, "6365": 560, "6404": 560, "6769": [560, 566], "6804": [560, 566], "6872": 560, "6814": 560, "7149": 560, "7128": 560, "66b": 560, "7398": 560, "7326": 560, "7361": [560, 566], "7357": 560, "7627": [560, 566], "7590": 560, "7759": [560, 566], "7840": 560, "65b": 560, "7908": 560, "7957": 560, "7392": [560, 566], "7335": [560, 566], "chat": [560, 566], "7058": [560, 566], "6994": 560, "7677": [560, 566], "7615": [560, 566], "6831": [560, 566], "mbzuai": 560, "124m": 560, "3804": 560, "3887": 560, "774m": 560, "5048": 560, "5057": 560, "5b": 560, "5443": [560, 566], "5436": 560, "mosaicml": [560, 566], "655": [560, 566], "6499": 560, "stabilityai": 560, "stablelm": 560, "4172": 560, "4149": 560, "togethercomput": 560, "redpajama": 560, "incit": 560, "6542": 560, "6735": 560, "6718": 560, "6740": [560, 566], "6569": 560, "6621": 560, "7143": 560, "7221": 560, "6895": 560, "6953": [560, 566], "databrick": [560, 566], "6866": [560, 566], "6297": 560, "6247": 560, "6437": [560, 566], "6392": 560, "7332": 560, "7632": 560, "asterisk": 560, "consider": 560, "arang": 560, "tolist": 560, "default_alpha": 560, "alpha_min": 560, "alpha_max": 560, "alpha_step": 560, "step_siz": 560, "shared_criterion": 560, "do_blockwis": 560, "jason": 560, "emerg": 560, "transact": 560, "yvinec": 560, "edouard": 560, "proceed": 560, "cvf": 560, "winter": 560, "instrument": 561, "writer": 561, "_pre_eval_hook": 561, "_post_eval_hook": 561, "submodul": 561, "whitelist": 561, "_recordingobserv": 561, "output_tensors_dict": 561, "current_it": 561, "get_tensor_valu": 561, "_observer_forward_hook": 561, "activation_post_process": 561, "_add_observer_": 561, "named_children": 561, "leaf": 561, "add_modul": 561, "register_forward_hook": 561, "dump_tim": 561, "summarywrit": 561, "_acc": 561, "tune_": 561, "add_graph": 561, "get_observer_dict": 561, "observer_dict": 561, "is_quant": 561, "add_histogram": 561, "shell": 561, "bind_al": 561, "logdir_spec": 561, "tune_0_acc0": 561, "tune_1": 561, "tune_1_acc0": 561, "79": [561, 566], "baseline_acc_0": 561, "776": 561, "tune_1_acc_0": 561, "095": 561, "runs_v3": 561, "run_tuning_dump_tensor": 561, "inceptionv3": 561, "run_quant": 561, "topologi": 561, "nc_inceptionv3": 561, "inceptionv3_dump_tensor": 561, "eightbit": 561, "disappear": 561, "centercrop": 562, "randomcrop": 562, "cropres": 562, "decodeimag": 562, "jpeg": 562, "encodejp": 562, "alignimagechannel": 562, "68": [562, 566], "116": 562, "78": [562, 566], "103": 562, "94": [562, 566], "017": 562, "bilinearimagenet": [562, 565], "topilimag": 562, "padding_mod": 562, "border": 562, "pixel": 562, "edg": 562, "colorjitt": 562, "bright": 562, "satur": 562, "hue": 562, "jitter": 562, "tondarrai": 562, "o1": 563, "human": 563, "aggress": 563, "classic": 563, "flowchart": 563, "htmllabel": 563, "td": 563, "classdef": 563, "itemstyl": 563, "cce5ff": 563, "stroke": 563, "99ccff": 563, "s1": 563, "s2": 563, "s3": 563, "s4": 563, "s5": 563, "s6": 563, "s7": 563, "nbsp": 563, "subgraphstyl": 563, "ffffff": 563, "attempt": 563, "post_training_auto_qu": 563, "trial": 563, "increment": 563, "ii": 563, "spent": 563, "hawq_v2_loss": 563, "model_loss": 563, "black": 563, "compli": 563, "posterior": 563, "short": 563, "loglevel": 563, "endlessli": 563, "perspect": 563, "smbo": 563, "appl": 563, "surrog": 563, "densiti": 563, "parzen": 563, "greatest": 563, "hour": 563, "dai": 563, "next_tune_cfg": 563, "overridden": 563, "replic": 563, "replica": 563, "fed": 563, "synchron": 563, "number_of_process": 563, "run_cmd": 563, "abctunestrategi": 563, "familiar": 564, "notebook": 564, "introduct": 564, "organ": 565, "logic": 565, "mobilenet_v1": 565, "40": [565, 566], "beta_1": 565, "beta_2": 565, "epsilon": 565, "sparsecategoricalcrossentropi": 565, "sum_over_batch_s": 565, "from_logit": 565, "54": [565, 566], "19": [565, 566], "09": 566, "1x": 566, "platinum": 566, "8480": 566, "8ghz": 566, "56": 566, "ht": 566, "turbo": 566, "256gb": 566, "16x16gb": 566, "ddr5": 566, "4800": 566, "mt": 566, "bio": 566, "3a14": 566, "tel2p1": 566, "microcod": 566, "0x2b0001b0": 566, "gcc": 566, "20210514": 566, "red": 566, "hat": 566, "visit": 566, "1s4c14ins1bsthroughput": 566, "sec": 566, "74": 566, "2914": 566, "621": 566, "69x": 566, "76": 566, "23": 566, "46": 566, "2160": 566, "545": 566, "47": 566, "96x": 566, "resnet101": 566, "77": 566, "37": 566, "1508": 566, "428": 566, "53x": 566, "70": 566, "44": 566, "69": 566, "3290": 566, "1229": 566, "68x": 566, "38": 566, "73": 566, "2404": 566, "1048": 566, "49": 566, "29x": 566, "71": 566, "1669": 566, "33x": 566, "1073": 566, "245": 566, "38x": 566, "374": 566, "52": 566, "18x": 566, "96": 566, "5478": 566, "1756": 566, "12x": 566, "4133": 566, "1748": 566, "36x": 566, "1534": 566, "236": 566, "62": 566, "49x": 566, "vgg19": 566, "1377": 566, "197": 566, "resnetv2": 566, "39": 566, "1125": 566, "656": 566, "71x": 566, "709": 566, "367": 566, "00": 566, "93x": 566, "152": 566, "03": 566, "497": 566, "265": 566, "87x": 566, "densenet": 566, "121": 566, "557": 566, "67": 566, "61": 566, "22x": 566, "161": 566, "29": 566, "353": 566, "235": 566, "50x": 566, "169": 566, "65": 566, "41": 566, "435": 566, "385": 566, "13x": 566, "efficientnet": 566, "b0": 566, "786": 566, "723": 566, "09x": 566, "130": 566, "23x": 566, "1291": 566, "683": 566, "89x": 566, "61x": 566, "1295": 566, "453": 566, "85x": 566, "242": 566, "31x": 566, "cnn": 566, "80x": 566, "43": 566, "81x": 566, "166": 566, "07x": 566, "16x": 566, "26": 566, "173": 566, "yolov3": 566, "82": 566, "230": 566, "92": 566, "36": 566, "37x": 566, "58x": 566, "86": 566, "416": 566, "35x": 566, "88x": 566, "51": 566, "17x": 566, "75552": 566, "50803": 566, "1s56c1ins1bsthroughput": 566, "60": 566, "64x": 566, "1673": 566, "653": 566, "56x": 566, "1170": 566, "329": 566, "55x": 566, "977": 566, "335": 566, "91x": 566, "resnest50": 566, "81": 566, "10x": 566, "resnext101_32x8d": 566, "562": 566, "109": 566, "efficientnet_b0": 566, "696": 566, "667": 566, "04x": 566, "efficientnet_b3": 566, "508": 566, "397": 566, "28x": 566, "efficientnet_b7": 566, "234": 566, "149": 566, "57x": 566, "peleenet": 566, "858": 566, "588": 566, "46x": 566, "se_resnext50_32x4d": 566, "739": 566, "283": 566, "yolo": 566, "141": 566, "99x": 566, "174": 566, "camembert": 566, "395": 566, "171": 566, "30x": 566, "53": 566, "795": 566, "341": 566, "744": 566, "343": 566, "163": 566, "funnel": 566, "182": 566, "65x": 566, "399": 566, "21x": 566, "407": 566, "412": 566, "stsb": 566, "413": 566, "39x": 566, "409": 566, "75x": 566, "401": 566, "70x": 566, "76x": 566, "reform": 566, "crime": 566, "punish": 566, "446": 566, "398": 566, "lvwerra": 566, "pegasu": 566, "samsum": 566, "102": 566, "770": 566, "450": 566, "14x": 566, "whisper": 566, "25x": 566, "abeja": 566, "neox": 566, "japanes": 566, "90x": 566, "1646": 566, "657": 566, "1098": 566, "322": 566, "41x": 566, "568": 566, "19x": 566, "1383": 566, "761": 566, "82x": 566, "32x": 566, "5701": 566, "1593": 566, "2090": 566, "685": 566, "05x": 566, "resnext101_32x16d_wsl": 566, "556": 566, "01x": 566, "86x": 566, "558": 566, "11x": 566, "lambada_openai": 566, "hellaswag": 566, "winogrand": 566, "piqa": 566, "word_perplex": 566, "4954": 566, "6409": 566, "7541": 566, "6434": 566, "8816": 566, "gptqw4g128asym": 566, "679": 566, "4895": 566, "6433": 566, "7476": 566, "6399": 566, "9945": 566, "0999": 566, "gptqw4g32asym": 566, "6829": 566, "4923": 566, "6401": 566, "7486": 566, "6410": 566, "9963": 566, "0141": 566, "gptqw4g128sym": 566, "4907": 566, "6361": 566, "7443": 566, "6390": 566, "9932": 566, "1498": 566, "gptqw4g32sym": 566, "6911": 566, "4899": 566, "6448": 566, "7497": 566, "6439": 566, "0008": 566, "0927": 566, "5049": 566, "6543": 566, "7628": 566, "6497": 566, "2862": 566, "4984": 566, "6535": 566, "7568": 566, "6473": 566, "9962": 566, "4193": 566, "6885": 566, "4973": 566, "753": 566, "6455": 566, "9935": 566, "4607": 566, "decapoda": 566, "5642": 566, "6709": 566, "7835": 566, "6887": 566, "4202": 566, "7244": 566, "5603": 566, "6614": 566, "6824": 566, "9909": 566, "5881": 566, "5911": 566, "7009": 566, "7878": 566, "7106": 566, "212": 566, "7518": 566, "5843": 566, "6961": 566, "7911": 566, "4319": 566, "7572": 566, "5898": 566, "7056": 566, "7894": 566, "7105": 566, "9998": 566, "3429": 566, "7596": 566, "5841": 566, "6977": 566, "7905": 566, "7080": 566, "4916": 566, "6266": 566, "7277": 566, "8096": 566, "7350": 566, "2384": 566, "778": 566, "624": 566, "7269": 566, "8047": 566, "7334": 566, "9979": 566, "4237": 566, "7706": 566, "6239": 566, "7285": 566, "8058": 566, "7322": 566, "4697": 566, "7836": 566, "6195": 566, "7337": 566, "9983": 566, "5604": 566, "5732": 566, "648": 566, "7715": 566, "6746": 566, "7107": 566, "6982": 566, "5637": 566, "6527": 566, "7704": 566, "6713": 566, "9950": 566, "9702": 566, "5682": 566, "6575": 566, "7758": 566, "6742": 566, "9994": 566, "9317": 566, "567": 566, "6902": 566, "7353": 566, "6622": 566, "7829": 566, "6862": 566, "9942": 566, "9635": 566, "7246": 566, "5617": 566, "6756": 566, "7797": 566, "6854": 566, "9931": 566, "2799": 566, "7312": 566, "6059": 566, "7103": 566, "7077": 566, "2213": 566, "7273": 566, "6018": 566, "7088": 566, "7742": 566, "7030": 566, "9934": 566, "2538": 566, "083": 566, "7283": 566, "6053": 566, "7024": 566, "7764": 566, "7031": 566, "1889": 566, "727": 566, "5997": 566, "7018": 566, "9916": 566, "2504": 566, "7122": 566, "8984": 566, "5933": 566, "689": 566, "7851": 566, "7075": 566, "1556": 566, "448": 566, "7675": 566, "5934": 566, "7856": 566, "7111": 566, "9984": 566, "1514": 566, "927": 566, "7566": 566, "5899": 566, "7032": 566, "9953": 566, "1374": 566, "728": 566, "4628": 566, "6456": 566, "6029": 566, "6438": 566, "5799": 566, "4542": 566, "6004": 566, "9957": 566, "0626": 566, "4789": 566, "6134": 566, "7432": 566, "5525": 566, "4731": 566, "6504": 566, "7617": 566, "6094": 566, "7828": 566, "5098": 566, "7622": 566, "6505": 566, "3242": 566, "6878": 566, "5058": 566, "6393": 566, "7633": 566, "6491": 566, "9978": 566, "5514": 566, "6864": 566, "5084": 566, "6519": 566, "6509": 566, "0006": 566, "4728": 566, "6876": 566, "5045": 566, "6474": 566, "9952": 566, "6379": 566, "5282": 566, "614": 566, "7448": 566, "6312": 566, "6377": 566, "5228": 566, "5991": 566, "6261": 566, "9919": 566, "4096": 566, "neo": 566, "6224": 566, "4271": 566, "577": 566, "722": 566, "5871": 566, "9359": 566, "6123": 566, "4227": 566, "5738": 566, "7203": 566, "5823": 566, "9917": 566, "3377": 566, "615": 566, "4259": 566, "5714": 566, "7247": 566, "9951": 566, "2083": 566, "6154": 566, "4208": 566, "5777": 566, "7198": 566, "5834": 566, "9937": 566, "3121": 566, "20b": 566, "7233": 566, "5359": 566, "7753": 566, "195": 566, "7186": 566, "5328": 566, "7699": 566, "6687": 566, "9922": 566, "3463": 566, "7268": 566, "533": 566, "659": 566, "6726": 566, "2897": 566, "5718": 566, "6859": 566, "7927": 566, "6890": 566, "9324": 566, "7006": 566, "5655": 566, "6803": 566, "7965": 566, "6857": 566, "1515": 566, "5752": 566, "6748": 566, "7845": 566, "6724": 566, "5951": 566, "6472": 566, "5716": 566, "6685": 566, "784": 566, "6678": 566, "8539": 566, "6918": 566, "5819": 566, "678": 566, "6861": 566, "8863": 566, "5765": 566, "6827": 566, "7873": 566, "6832": 566, "9958": 566, "1451": 566, "storywrit": 566, "693": 566, "5477": 566, "663": 566, "6719": 566, "9125": 566, "6661": 566, "7813": 566, "6693": 566, "9961": 566, "1137": 566, "rw": 566, "6604": 566, "5419": 566, "6598": 566, "6594": 566, "7616": 566, "6484": 566, "5369": 566, "7807": 566, "6559": 566, "9947": 566, "9411": 566, "6571": 566, "5398": 566, "6582": 566, "6579": 566, "8809": 566, "652": 566, "535": 566, "7682": 566, "6532": 566, "9906": 566, "0048": 566, "5177": 566, "6669": 566, "7824": 566, "5053": 566, "6301": 566, "5142": 566, "6654": 566, "6483": 566, "9933": 566, "8146": 566, "517": 566, "9941": 566, "1566": 566, "724": 566, "1567": 566, "716": 566, "1414": 566, "718": 566, "97x": 566, "1459": 566, "721": 566, "02x": 566, "1582": 566, "752": 566, "7139": 566, "4289": 566, "66x": 566, "4080": 566, "7236": 566, "4299": 566, "6842": 566, "4496": 566, "52x": 566, "591": 566, "178": 566, "183": 566, "590": 566, "179": 566, "42x": 566, "5703": 566, "2578": 566, "5610": 566, "2603": 566, "shufflenet": 566, "6689": 566, "3690": 566, "5692": 566, "3758": 566, "51x": 566, "googlenet": 566, "1792": 566, "1111": 566, "1821": 566, "1104": 566, "squeezenet": 566, "9472": 566, "5582": 566, "9861": 566, "5566": 566, "77x": 566, "caffenet": 566, "3348": 566, "1141": 566, "3509": 566, "1142": 566, "2426": 566, "987": 566, "2208": 566, "1016": 566, "zfnet": 566, "930": 566, "532": 566, "919": 566, "417": 566, "1880": 566, "1159": 566, "62x": 566, "1798": 566, "1151": 566, "2890": 566, "1380": 566, "2548": 566, "1362": 566, "507": 566, "94x": 566, "1286": 566, "904": 566, "1121": 566, "856": 566, "829": 566, "1044": 566, "790": 566, "849": 566, "627": 566, "79x": 566, "yolov4": 566, "duc": 566, "tini": 566, "1119": 566, "ultra": 566, "8537": 566, "1934": 566, "emot": 566, "ferplu": 566, "3568": 566, "arcfac": 566, "494": 566, "244": 566, "226": 566, "392": 566, "223": 566, "integerop": 566, "473": 566, "548": 566, "964": 566, "540": 566, "394": 566, "602": 566, "487": 566, "222": 566, "20x": 566, "189": 566, "146": 566, "125": 566, "bidaf": 566, "2757": 566, "2277": 566, "gpt2": 566, "360": 566, "213": 566, "490": 566, "304": 566, "214": 566, "347": 566, "272": 566, "216": 566, "26x": 566, "489": 566, "27x": 566, "l12": 566, "h384": 566, "1054": 566, "585": 566, "1072": 566, "890": 566, "746": 566, "268": 566, "211": 566, "l6": 566, "1958": 566, "1130": 566, "73x": 566, "electra": 566, "discrimin": 566, "1797": 566, "1077": 566, "67x": 566, "1930": 566, "1139": 566, "mini": 566, "5510": 566, "3334": 566, "5627": 566, "3365": 566, "108": 566, "110": 566, "bart": 566, "15x": 566, "deberta": 566, "168": 566, "145": 566, "spanbert": 566, "63x": 566, "multilingu": 566, "113": 566, "159": 566, "40x": 566, "distilgpt2": 566, "layoutlm": 566, "layoutlmv2": 566, "codebert": 566, "47x": 566, "fcn": 566, "perplex": 566, "2788": 566, "7002": 566, "4124": 566, "9921": 566, "3950": 566, "5711": 566, "9892": 566, "9163": 566, "7240": 566, "9902": 566, "0438": 566, "7634": 566, "1186": 566, "9944": 566, "1276": 566, "7543": 566, "6181": 566, "rtnw4g32asym": 566, "6496": 566, "9967": 566, "7964": 566, "6612": 566, "rtnw4g32sym": 566, "7941": 566, "7243": 566, "9971": 566, "taskdataset": 566, "accuracyspars": 566, "ratiospars": 566, "commentsbalancedor": 566, "unbalanc": 566, "answeringsquad": 566, "87f1": 566, "momentumunbalanc": 566, "momentumbalanc": 566, "90f1": 566, "59f1": 566, "23f1": 566, "classificationmrpc": 566, "52f1": 566, "26f1": 566, "classificationsst": 566, "61accuraci": 566, "recognitionimagenet": 566, "95top1": 566, "v5s6": 566, "detectioncoco": 566, "ap0": 566, "6ap0": 566, "393": 566, "584": 566, "34f1": 566, "lassounbalanc": 566, "classificationmnli": 566, "mm": 566, "allbalanc": 566, "32accuraci": 566, "sensitivitybalanc": 566, "classificationqqp": 566, "classificationqnli": 566, "54accuraci": 566, "em": 566, "mobilenetv2": 566, "wideresnet40": 566, "9522": 566, "8178": 566, "0213": 566, "8235": 566, "027": 566, "5494": 566, "7153": 566, "5540": 566, "0046": 566, "5523": 566, "vgg": 566, "bn": 566, "7022": 566, "7415": 566, "7025": 566, "0003": 566, "6739": 566, "7399": 566, "6845": 566, "0106": 566, "blendcnn": 566, "7034": 566, "8382": 566, "bilstm": 566, "8314": 566, "9403": 566, "9048": 566, "0734": 566, "7323": 566, "8256": 566, "8084": 566, "8814": 566, "7442": 566, "8371": 566, "0119": 566, "0115": 566, "tinybert": 566, "8018": 566, "8044": 566, "8363": 566, "8411": 566, "8025": 566, "8074": 566, "0007": 566, "0030": 566, "8626": 566, "9091": 566, "8782": 566, "8684": 566, "8259": 566, "0058": 566, "distilroberta": 566, "6057": 566, "6187": 566, "0130": 566, "c6i": 566, "2xlarg": 566, "c6a": 566, "c6g": 566, "a100cuda": 566, "executionprovid": 566}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [353, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [172, 0, 0, "-", "algorithm"], [175, 0, 0, "-", "benchmark"], [178, 0, 0, "-", "common"], [190, 0, 0, "-", "compression"], [218, 0, 0, "-", "conf"], [220, 0, 0, "-", "config"], [221, 0, 0, "-", "contrib"], [246, 0, 0, "-", "data"], [300, 0, 0, "-", "experimental"], [360, 0, 0, "-", "metric"], [362, 0, 0, "-", "mix_precision"], [364, 0, 0, "-", "model"], [372, 0, 0, "-", "objective"], [373, 0, 0, "-", "profiling"], [395, 0, 0, "-", "quantization"], [403, 0, 0, "-", "strategy"], [415, 0, 0, "-", "template"], [427, 0, 0, "-", "tensorflow"], [441, 0, 0, "-", "torch"], [454, 0, 0, "-", "training"], [458, 0, 0, "-", "utils"], [467, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [156, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[150, 0, 0, "-", "autoround"], [152, 0, 0, "-", "awq"], [153, 0, 0, "-", "bf16_convert"], [154, 0, 0, "-", "gptq"], [155, 0, 0, "-", "hawq_metric"], [157, 0, 0, "-", "layer_wise_quant"], [162, 0, 0, "-", "mixed_precision"], [163, 0, 0, "-", "model_wrapper"], [164, 0, 0, "-", "pattern_detector"], [165, 0, 0, "-", "smooth_quant"], [166, 0, 0, "-", "symbolic_trace"], [167, 0, 0, "-", "teq"], [168, 0, 0, "-", "util"], [169, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [151, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[151, 1, 1, "", "SGD"], [151, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[152, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, 1, 1, "", "BF16ModuleWrapper"], [153, 2, 1, "", "Convert"], [153, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[154, 1, 1, "", "GPTQ"], [154, 1, 1, "", "GPTQuantizer"], [154, 2, 1, "", "find_layers"], [154, 2, 1, "", "find_layers_name"], [154, 2, 1, "", "is_leaf"], [154, 2, 1, "", "log_quantizable_layers_per_transformer"], [154, 2, 1, "", "quantize"], [154, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[155, 1, 1, "", "HessianTrace"], [155, 1, 1, "", "Node_collector"], [155, 2, 1, "", "compare_weights"], [155, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[158, 0, 0, "-", "modified_pickle"], [159, 0, 0, "-", "quantize"], [160, 0, 0, "-", "torch_load"], [161, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[158, 3, 1, "", "PickleError"], [158, 3, 1, "", "PicklingError"], [158, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[159, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[160, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[161, 2, 1, "", "dowload_hf_model"], [161, 2, 1, "", "get_children"], [161, 2, 1, "", "get_module"], [161, 2, 1, "", "get_named_children"], [161, 2, 1, "", "get_super_module_by_name"], [161, 2, 1, "", "load_empty_model"], [161, 2, 1, "", "load_layer_wise_quantized_model"], [161, 2, 1, "", "load_tensor"], [161, 2, 1, "", "load_tensor_from_shard"], [161, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[162, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[163, 1, 1, "", "FakeAffineTensorQuantFunction"], [163, 1, 1, "", "MulLinear"], [163, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[164, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[165, 1, 1, "", "TorchSmoothQuant"], [165, 2, 1, "", "get_module"], [165, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[166, 2, 1, "", "symbolic_trace"], [166, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[167, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[168, 2, 1, "", "append_attr"], [168, 2, 1, "", "auto_copy"], [168, 2, 1, "", "calculate_quant_min_max"], [168, 2, 1, "", "calibration"], [168, 2, 1, "", "check_cfg_and_qconfig"], [168, 2, 1, "", "collate_torch_preds"], [168, 2, 1, "", "collect_weight_info"], [168, 2, 1, "", "fetch_module"], [168, 2, 1, "", "forward_wrapper"], [168, 2, 1, "", "generate_activation_observer"], [168, 2, 1, "", "get_absorb_layers"], [168, 2, 1, "", "get_block_prefix"], [168, 2, 1, "", "get_depth"], [168, 2, 1, "", "get_dict_at_depth"], [168, 2, 1, "", "get_element_under_depth"], [168, 2, 1, "", "get_embedding_contiguous"], [168, 2, 1, "", "get_example_input"], [168, 2, 1, "", "get_fallback_order"], [168, 2, 1, "", "get_hidden_states"], [168, 2, 1, "", "get_module_input_output"], [168, 2, 1, "", "get_mse_order_per_fp32"], [168, 2, 1, "", "get_mse_order_per_int8"], [168, 2, 1, "", "get_op_type_by_name"], [168, 2, 1, "", "get_quantizable_ops_from_cfgs"], [168, 2, 1, "", "get_torch_version"], [168, 2, 1, "", "input2tuple"], [168, 2, 1, "", "is_fused_module"], [168, 2, 1, "", "match_datatype_pattern"], [168, 2, 1, "", "move_input_device"], [168, 2, 1, "", "paser_cfgs"], [168, 2, 1, "", "set_module"], [168, 2, 1, "", "simple_inference"], [168, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[169, 2, 1, "", "awq_quantize"], [169, 2, 1, "", "gptq_quantize"], [169, 2, 1, "", "qdq_weight_actor"], [169, 2, 1, "", "qdq_weight_asym"], [169, 2, 1, "", "qdq_weight_sym"], [169, 2, 1, "", "quant_weight"], [169, 2, 1, "", "quant_weight_w_scale"], [169, 2, 1, "", "quantize_4bit"], [169, 2, 1, "", "rtn_quantize"], [169, 2, 1, "", "search_clip"], [169, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[170, 0, 0, "-", "algorithm"], [171, 0, 0, "-", "fast_bias_correction"], [173, 0, 0, "-", "smooth_quant"], [174, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[170, 1, 1, "", "ALGORITHMS"], [170, 1, 1, "", "Algorithm"], [170, 1, 1, "", "AlgorithmScheduler"], [170, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[171, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[173, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[174, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[175, 2, 1, "", "benchmark_with_raw_cmd"], [175, 2, 1, "", "call_one"], [175, 2, 1, "", "config_instance"], [175, 2, 1, "", "fit"], [175, 2, 1, "", "generate_prefix"], [175, 2, 1, "", "get_architecture"], [175, 2, 1, "", "get_bounded_threads"], [175, 2, 1, "", "get_core_ids"], [175, 2, 1, "", "get_physical_ids"], [175, 2, 1, "", "get_threads"], [175, 2, 1, "", "get_threads_per_core"], [175, 2, 1, "", "profile"], [175, 2, 1, "", "run_instance"], [175, 2, 1, "", "set_all_env_var"], [175, 2, 1, "", "set_env_var"], [175, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[176, 0, 0, "-", "base_config"], [177, 0, 0, "-", "base_tune"], [179, 0, 0, "-", "logger"], [180, 0, 0, "-", "utility"]], "neural_compressor.common.base_config": [[176, 1, 1, "", "BaseConfig"], [176, 1, 1, "", "ComposableConfig"], [176, 2, 1, "", "register_config"]], "neural_compressor.common.base_tune": [[177, 1, 1, "", "BaseTuningConfig"], [177, 1, 1, "", "FrameworkWrapper"]], "neural_compressor.common.logger": [[179, 1, 1, "", "Logger"], [179, 2, 1, "", "debug"], [179, 2, 1, "", "error"], [179, 2, 1, "", "fatal"], [179, 2, 1, "", "info"], [179, 2, 1, "", "log"], [179, 2, 1, "", "warn"], [179, 2, 1, "", "warning"]], "neural_compressor.compression": [[181, 0, 0, "-", "callbacks"], [183, 0, 0, "-", "distillation"], [186, 0, 0, "-", "hpo"], [192, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[181, 1, 1, "", "BaseCallbacks"], [181, 1, 1, "", "DistillationCallbacks"], [181, 1, 1, "", "PruningCallbacks"], [181, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[181, 4, 1, "", "_epoch_ran"], [181, 4, 1, "", "best_model"], [181, 4, 1, "", "best_score"], [181, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[182, 0, 0, "-", "criterions"], [184, 0, 0, "-", "optimizers"], [185, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[182, 1, 1, "", "Criterions"], [182, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [182, 1, 1, "", "KnowledgeDistillationFramework"], [182, 1, 1, "", "KnowledgeDistillationLoss"], [182, 1, 1, "", "PyTorchCriterions"], [182, 1, 1, "", "PyTorchCrossEntropyLoss"], [182, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [182, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [182, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [182, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [182, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [182, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [182, 1, 1, "", "SelfKnowledgeDistillationLoss"], [182, 1, 1, "", "TensorFlowCrossEntropyLoss"], [182, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [182, 1, 1, "", "TensorflowCriterions"], [182, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [182, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [182, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [182, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[184, 1, 1, "", "Optimizers"], [184, 1, 1, "", "PyTorchOptimizers"], [184, 1, 1, "", "PyTorchSGD"], [184, 1, 1, "", "TensorFlowAdam"], [184, 1, 1, "", "TensorFlowAdamW"], [184, 1, 1, "", "TensorFlowSGD"], [184, 1, 1, "", "TensorflowOptimizers"], [184, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[185, 2, 1, "", "get_activation"], [185, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[187, 0, 0, "-", "sa_optimizer"], [188, 0, 0, "-", "search_algorithms"], [189, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[188, 1, 1, "", "BayesianOptimizationSearcher"], [188, 1, 1, "", "GridSearcher"], [188, 1, 1, "", "RandomSearcher"], [188, 1, 1, "", "Searcher"], [188, 1, 1, "", "XgbSearcher"], [188, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[189, 1, 1, "", "BaseSearchSpace"], [189, 1, 1, "", "ContinuousSearchSpace"], [189, 1, 1, "", "DiscreteSearchSpace"], [189, 1, 1, "", "SearchSpace"], [189, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[191, 0, 0, "-", "criteria"], [194, 0, 0, "-", "model_slim"], [198, 0, 0, "-", "patterns"], [192, 2, 1, "", "prepare_pruning"], [205, 0, 0, "-", "pruners"], [211, 0, 0, "-", "pruning"], [212, 0, 0, "-", "regs"], [192, 2, 1, "", "save"], [213, 0, 0, "-", "schedulers"], [214, 0, 0, "-", "tf_criteria"], [215, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[191, 1, 1, "", "BlockMaskCriterion"], [191, 1, 1, "", "GradientCriterion"], [191, 1, 1, "", "MagnitudeCriterion"], [191, 1, 1, "", "PruningCriterion"], [191, 1, 1, "", "RetrainFreeCriterion"], [191, 1, 1, "", "SnipCriterion"], [191, 1, 1, "", "SnipMomentumCriterion"], [191, 2, 1, "", "get_criterion"], [191, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[191, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[193, 0, 0, "-", "auto_slim"], [195, 0, 0, "-", "pattern_analyzer"], [196, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[193, 2, 1, "", "generate_ffn2_pruning_config"], [193, 2, 1, "", "generate_mha_pruning_config"], [193, 2, 1, "", "model_slim"], [193, 2, 1, "", "model_slim_ffn2"], [193, 2, 1, "", "model_slim_mha"], [193, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[195, 1, 1, "", "ClassifierHeadSearcher"], [195, 1, 1, "", "ClassifierHeadSearcherTF"], [195, 1, 1, "", "JitBasicSearcher"], [195, 1, 1, "", "Linear2LinearSearcher"], [195, 1, 1, "", "RecipeSearcher"], [195, 1, 1, "", "SelfMHASearcher"], [195, 2, 1, "", "get_attributes"], [195, 2, 1, "", "get_common_module"], [195, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[195, 4, 1, "", "device"], [195, 4, 1, "", "flatten_static_graph"], [195, 4, 1, "", "model"], [195, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[195, 4, 1, "", "device"], [195, 4, 1, "", "flatten_static_graph"], [195, 4, 1, "", "model"], [195, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[195, 4, 1, "", "device"], [195, 4, 1, "", "flatten_static_graph"], [195, 4, 1, "", "model"], [195, 4, 1, "", "searching_results"], [195, 4, 1, "", "static_graph"], [195, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[195, 4, 1, "", "current_pattern"], [195, 4, 1, "", "device"], [195, 4, 1, "", "flatten_static_graph"], [195, 4, 1, "", "model"], [195, 4, 1, "", "searching_results"], [195, 4, 1, "", "static_graph"], [195, 4, 1, "", "target_layers"], [195, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[195, 4, 1, "", "model"], [195, 4, 1, "", "recipe"], [195, 4, 1, "", "searching_results"], [195, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[195, 4, 1, "", "device"], [195, 4, 1, "", "flatten_static_graph"], [195, 4, 1, "", "model"], [195, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[196, 1, 1, "", "LinearCompression"], [196, 1, 1, "", "LinearCompressionIterator"], [196, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[196, 4, 1, "", "device"], [196, 4, 1, "", "layer_1"], [196, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[196, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[197, 0, 0, "-", "base"], [198, 2, 1, "", "get_pattern"], [199, 0, 0, "-", "mha"], [200, 0, 0, "-", "ninm"], [201, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[197, 1, 1, "", "BasePattern"], [197, 1, 1, "", "KerasBasePattern"], [197, 1, 1, "", "PytorchBasePattern"], [197, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[197, 4, 1, "", "config"], [197, 4, 1, "", "invalid_layers"], [197, 4, 1, "", "is_global"], [197, 4, 1, "", "keep_mask_layers"], [197, 4, 1, "", "max_sparsity_ratio_per_op"], [197, 4, 1, "", "min_sparsity_ratio_per_op"], [197, 4, 1, "", "modules"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[197, 4, 1, "", "config"], [197, 4, 1, "", "invalid_layers"], [197, 4, 1, "", "is_global"], [197, 4, 1, "", "keep_mask_layers"], [197, 4, 1, "", "max_sparsity_ratio_per_op"], [197, 4, 1, "", "min_sparsity_ratio_per_op"], [197, 4, 1, "", "modules"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[197, 4, 1, "", "config"], [197, 4, 1, "", "invalid_layers"], [197, 4, 1, "", "is_global"], [197, 4, 1, "", "keep_mask_layers"], [197, 4, 1, "", "max_sparsity_ratio_per_op"], [197, 4, 1, "", "min_sparsity_ratio_per_op"], [197, 4, 1, "", "modules"], [197, 4, 1, "", "pattern"], [197, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[199, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[199, 4, 1, "", "M"], [199, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[200, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[200, 4, 1, "", "M"], [200, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[201, 1, 1, "", "KerasPatternNxM"], [201, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[201, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[201, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[202, 0, 0, "-", "base"], [203, 0, 0, "-", "basic"], [204, 0, 0, "-", "block_mask"], [205, 2, 1, "", "get_pruner"], [206, 0, 0, "-", "mha"], [205, 2, 1, "", "parse_valid_pruner_types"], [207, 0, 0, "-", "pattern_lock"], [208, 0, 0, "-", "progressive"], [209, 0, 0, "-", "retrain_free"], [210, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[202, 1, 1, "", "BasePruner"], [202, 1, 1, "", "KerasBasePruner"], [202, 1, 1, "", "PytorchBasePruner"], [202, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[202, 4, 1, "", "config"], [202, 4, 1, "", "current_sparsity_ratio"], [202, 4, 1, "", "end_step"], [202, 4, 1, "", "global_step"], [202, 4, 1, "", "masks"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "pruning_frequency"], [202, 4, 1, "", "scheduler"], [202, 4, 1, "", "scores"], [202, 4, 1, "", "start_step"], [202, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[202, 4, 1, "", "config"], [202, 4, 1, "", "current_sparsity_ratio"], [202, 4, 1, "", "end_step"], [202, 4, 1, "", "global_step"], [202, 4, 1, "", "masks"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "pruning_frequency"], [202, 4, 1, "", "scheduler"], [202, 4, 1, "", "scores"], [202, 4, 1, "", "start_step"], [202, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[202, 4, 1, "", "config"], [202, 4, 1, "", "current_sparsity_ratio"], [202, 4, 1, "", "end_step"], [202, 4, 1, "", "global_step"], [202, 4, 1, "", "masks"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "pruning_frequency"], [202, 4, 1, "", "scheduler"], [202, 4, 1, "", "scores"], [202, 4, 1, "", "start_step"], [202, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[203, 1, 1, "", "KerasBasicPruner"], [203, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[203, 4, 1, "", "criterion"], [203, 4, 1, "", "pattern"], [203, 4, 1, "", "reg"], [203, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[203, 4, 1, "", "criterion"], [203, 4, 1, "", "pattern"], [203, 4, 1, "", "reg"], [203, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[204, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[204, 4, 1, "", "criterion"], [204, 4, 1, "", "pattern"], [204, 4, 1, "", "reg"], [204, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[206, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[206, 4, 1, "", "head_masks"], [206, 4, 1, "", "linear_layers"], [206, 4, 1, "", "mha_compressions"], [206, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[207, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[208, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[209, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[209, 4, 1, "", "criterion"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "reg"], [209, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[210, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[210, 4, 1, "", "criterion"], [210, 4, 1, "", "pattern"], [210, 4, 1, "", "reg"], [210, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[211, 1, 1, "", "BasePruning"], [211, 1, 1, "", "BasicPruning"], [211, 1, 1, "", "RetrainFreePruning"], [211, 1, 1, "", "SparseGPTPruning"], [211, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[211, 4, 1, "", "config_file_path"], [211, 4, 1, "", "model"], [211, 4, 1, "", "pruner_info"], [211, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[211, 4, 1, "", "config_file_path"], [211, 4, 1, "", "model"], [211, 4, 1, "", "pruner_info"], [211, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[211, 4, 1, "", "config_file_path"], [211, 4, 1, "", "model"], [211, 4, 1, "", "pruner_info"], [211, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[212, 1, 1, "", "BaseReg"], [212, 1, 1, "", "GroupLasso"], [212, 2, 1, "", "get_reg"], [212, 2, 1, "", "get_reg_type"], [212, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[212, 4, 1, "", "alpha"], [212, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[213, 1, 1, "", "IterativeScheduler"], [213, 1, 1, "", "OneshotScheduler"], [213, 1, 1, "", "PruningScheduler"], [213, 2, 1, "", "get_scheduler"], [213, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[213, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[214, 1, 1, "", "MagnitudeCriterion"], [214, 1, 1, "", "PruningCriterion"], [214, 2, 1, "", "get_tf_criterion"], [214, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[214, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[214, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[215, 2, 1, "", "check_config"], [215, 2, 1, "", "check_key_validity"], [215, 2, 1, "", "collect_layer_inputs"], [215, 2, 1, "", "generate_pruner_config"], [215, 2, 1, "", "get_layers"], [215, 2, 1, "", "get_sparsity_ratio"], [215, 2, 1, "", "get_sparsity_ratio_tf"], [215, 2, 1, "", "parse_last_linear"], [215, 2, 1, "", "parse_last_linear_tf"], [215, 2, 1, "", "parse_to_prune"], [215, 2, 1, "", "parse_to_prune_tf"], [215, 2, 1, "", "process_and_check_config"], [215, 2, 1, "", "process_config"], [215, 2, 1, "", "process_weight_config"], [215, 2, 1, "", "process_yaml_config"], [215, 2, 1, "", "reset_none_to_default"], [215, 2, 1, "", "update_params"]], "neural_compressor.conf": [[216, 0, 0, "-", "config"], [217, 0, 0, "-", "dotdict"], [219, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[216, 1, 1, "", "Benchmark_Conf"], [216, 1, 1, "", "Conf"], [216, 1, 1, "", "DefaultConf"], [216, 1, 1, "", "Distillation_Conf"], [216, 1, 1, "", "Graph_Optimization_Conf"], [216, 1, 1, "", "MixedPrecision_Conf"], [216, 1, 1, "", "NASConfig"], [216, 1, 1, "", "PrunerV2"], [216, 1, 1, "", "Pruning_Conf"], [216, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[217, 1, 1, "", "DotDict"], [217, 2, 1, "", "deep_get"], [217, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[219, 1, 1, "", "AccuracyCriterion"], [219, 1, 1, "", "BenchmarkConfig"], [219, 1, 1, "", "DistillationConfig"], [219, 1, 1, "", "KnowledgeDistillationLossConfig"], [219, 1, 1, "", "Options"], [219, 1, 1, "", "QuantizationConfig"], [219, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[220, 1, 1, "", "AccuracyCriterion"], [220, 1, 1, "", "BenchmarkConfig"], [220, 1, 1, "", "DistillationConfig"], [220, 1, 1, "", "DotDict"], [220, 1, 1, "", "ExportConfig"], [220, 1, 1, "", "HPOConfig"], [220, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [220, 1, 1, "", "Keras"], [220, 1, 1, "", "KnowledgeDistillationLossConfig"], [220, 1, 1, "", "MXNet"], [220, 1, 1, "", "MixedPrecisionConfig"], [220, 1, 1, "", "NASConfig"], [220, 1, 1, "", "ONNX"], [220, 1, 1, "", "ONNXQlinear2QDQConfig"], [220, 1, 1, "", "Options"], [220, 1, 1, "", "PostTrainingQuantConfig"], [220, 1, 1, "", "PyTorch"], [220, 1, 1, "", "QuantizationAwareTrainingConfig"], [220, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [220, 1, 1, "", "TF2ONNXConfig"], [220, 1, 1, "", "TensorFlow"], [220, 1, 1, "", "Torch2ONNXConfig"], [220, 1, 1, "", "TuningCriterion"], [220, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[222, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[223, 0, 0, "-", "sigopt"], [224, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[223, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[224, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[229, 0, 0, "-", "dataloaders"], [241, 0, 0, "-", "datasets"], [245, 0, 0, "-", "filters"], [249, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[225, 0, 0, "-", "base_dataloader"], [226, 0, 0, "-", "dataloader"], [227, 0, 0, "-", "default_dataloader"], [228, 0, 0, "-", "fetcher"], [230, 0, 0, "-", "mxnet_dataloader"], [231, 0, 0, "-", "onnxrt_dataloader"], [232, 0, 0, "-", "pytorch_dataloader"], [233, 0, 0, "-", "sampler"], [234, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[225, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[226, 1, 1, "", "DataLoader"], [226, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[227, 1, 1, "", "DefaultDataLoader"], [227, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[228, 1, 1, "", "Fetcher"], [228, 1, 1, "", "IndexFetcher"], [228, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[230, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[231, 1, 1, "", "ONNXRTBertDataLoader"], [231, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[232, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[233, 1, 1, "", "BatchSampler"], [233, 1, 1, "", "IterableSampler"], [233, 1, 1, "", "Sampler"], [233, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[234, 1, 1, "", "TFDataDataLoader"], [234, 1, 1, "", "TensorflowBertDataLoader"], [234, 1, 1, "", "TensorflowDataLoader"], [234, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[235, 0, 0, "-", "bert_dataset"], [236, 0, 0, "-", "coco_dataset"], [237, 0, 0, "-", "dataset"], [238, 0, 0, "-", "dummy_dataset"], [239, 0, 0, "-", "dummy_dataset_v2"], [240, 0, 0, "-", "imagenet_dataset"], [242, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[235, 1, 1, "", "InputFeatures"], [235, 1, 1, "", "ONNXRTBertDataset"], [235, 1, 1, "", "ParseDecodeBert"], [235, 1, 1, "", "PytorchBertDataset"], [235, 1, 1, "", "TensorflowBertDataset"], [235, 1, 1, "", "TensorflowModelZooBertDataset"], [235, 2, 1, "", "convert_examples_to_features"], [235, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[236, 1, 1, "", "COCONpy"], [236, 1, 1, "", "COCORaw"], [236, 1, 1, "", "COCORecordDataset"], [236, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[237, 1, 1, "", "CIFAR10"], [237, 1, 1, "", "CIFAR100"], [237, 1, 1, "", "Dataset"], [237, 1, 1, "", "Datasets"], [237, 1, 1, "", "FashionMNIST"], [237, 1, 1, "", "ImageFolder"], [237, 1, 1, "", "IterableDataset"], [237, 1, 1, "", "MNIST"], [237, 1, 1, "", "MXNetCIFAR10"], [237, 1, 1, "", "MXNetCIFAR100"], [237, 1, 1, "", "MXNetDatasets"], [237, 1, 1, "", "MXNetFashionMNIST"], [237, 1, 1, "", "MXNetImageFolder"], [237, 1, 1, "", "MXNetMNIST"], [237, 1, 1, "", "ONNXRTITDatasets"], [237, 1, 1, "", "ONNXRTQLDatasets"], [237, 1, 1, "", "PyTorchDatasets"], [237, 1, 1, "", "PytorchCIFAR10"], [237, 1, 1, "", "PytorchCIFAR100"], [237, 1, 1, "", "PytorchFashionMNIST"], [237, 1, 1, "", "PytorchMNIST"], [237, 1, 1, "", "PytorchMxnetWrapDataset"], [237, 1, 1, "", "PytorchMxnetWrapFunction"], [237, 1, 1, "", "Tensorflow"], [237, 1, 1, "", "TensorflowCIFAR10"], [237, 1, 1, "", "TensorflowCIFAR100"], [237, 1, 1, "", "TensorflowDatasets"], [237, 1, 1, "", "TensorflowFashionMNIST"], [237, 1, 1, "", "TensorflowImageRecord"], [237, 1, 1, "", "TensorflowMNIST"], [237, 1, 1, "", "TensorflowTFRecordDataset"], [237, 1, 1, "", "TensorflowVOCRecord"], [237, 2, 1, "", "calculate_md5"], [237, 2, 1, "", "check_integrity"], [237, 2, 1, "", "dataset_registry"], [237, 2, 1, "", "download_url"], [237, 5, 1, "", "framework_datasets"], [237, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[238, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[239, 1, 1, "", "DummyDataset"], [239, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[240, 1, 1, "", "ImagenetRaw"], [240, 1, 1, "", "MXNetImagenetRaw"], [240, 1, 1, "", "ONNXRTImagenetDataset"], [240, 1, 1, "", "PytorchImagenetRaw"], [240, 1, 1, "", "TensorflowImagenetDataset"], [240, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[242, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[243, 0, 0, "-", "coco_filter"], [244, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[243, 1, 1, "", "LabelBalanceCOCORawFilter"], [243, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[244, 1, 1, "", "FILTERS"], [244, 1, 1, "", "Filter"], [244, 1, 1, "", "MXNetFilters"], [244, 1, 1, "", "ONNXRTITFilters"], [244, 1, 1, "", "ONNXRTQLFilters"], [244, 1, 1, "", "PyTorchFilters"], [244, 1, 1, "", "TensorflowFilters"], [244, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[247, 0, 0, "-", "coco_transform"], [248, 0, 0, "-", "imagenet_transform"], [250, 0, 0, "-", "postprocess"], [251, 0, 0, "-", "tokenization"], [252, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[247, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[248, 1, 1, "", "BilinearImagenetTransform"], [248, 1, 1, "", "LabelShift"], [248, 1, 1, "", "ONNXResizeCropImagenetTransform"], [248, 1, 1, "", "OnnxBilinearImagenetTransform"], [248, 1, 1, "", "ParseDecodeImagenet"], [248, 1, 1, "", "ParseDecodeImagenetTransform"], [248, 1, 1, "", "QuantizedInput"], [248, 1, 1, "", "ResizeWithAspectRatio"], [248, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [248, 1, 1, "", "TensorflowShiftRescale"], [248, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[250, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[251, 1, 1, "", "BasicTokenizer"], [251, 1, 1, "", "FullTokenizer"], [251, 1, 1, "", "WordpieceTokenizer"], [251, 2, 1, "", "convert_by_vocab"], [251, 2, 1, "", "convert_to_unicode"], [251, 2, 1, "", "load_vocab"], [251, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[252, 1, 1, "", "AlignImageChannelTransform"], [252, 1, 1, "", "BaseTransform"], [252, 1, 1, "", "CastONNXTransform"], [252, 1, 1, "", "CastPyTorchTransform"], [252, 1, 1, "", "CastTFTransform"], [252, 1, 1, "", "CenterCropTFTransform"], [252, 1, 1, "", "CenterCropTransform"], [252, 1, 1, "", "CollectTransform"], [252, 1, 1, "", "ComposeTransform"], [252, 1, 1, "", "CropResizeTFTransform"], [252, 1, 1, "", "CropResizeTransform"], [252, 1, 1, "", "CropToBoundingBox"], [252, 1, 1, "", "InputFeatures"], [252, 1, 1, "", "MXNetCropResizeTransform"], [252, 1, 1, "", "MXNetCropToBoundingBox"], [252, 1, 1, "", "MXNetNormalizeTransform"], [252, 1, 1, "", "MXNetTransforms"], [252, 1, 1, "", "MXNetTranspose"], [252, 1, 1, "", "NormalizeTFTransform"], [252, 1, 1, "", "NormalizeTransform"], [252, 1, 1, "", "ONNXRTCropToBoundingBox"], [252, 1, 1, "", "ONNXRTITTransforms"], [252, 1, 1, "", "ONNXRTQLTransforms"], [252, 1, 1, "", "PaddedCenterCropTransform"], [252, 1, 1, "", "ParseDecodeVocTransform"], [252, 1, 1, "", "PyTorchAlignImageChannel"], [252, 1, 1, "", "PyTorchCropResizeTransform"], [252, 1, 1, "", "PyTorchNormalizeTransform"], [252, 1, 1, "", "PyTorchTransforms"], [252, 1, 1, "", "PyTorchTranspose"], [252, 1, 1, "", "PytorchMxnetTransform"], [252, 1, 1, "", "PytorchMxnetWrapFunction"], [252, 1, 1, "", "RandomCropTFTransform"], [252, 1, 1, "", "RandomCropTransform"], [252, 1, 1, "", "RandomHorizontalFlip"], [252, 1, 1, "", "RandomResizedCropMXNetTransform"], [252, 1, 1, "", "RandomResizedCropPytorchTransform"], [252, 1, 1, "", "RandomResizedCropTFTransform"], [252, 1, 1, "", "RandomResizedCropTransform"], [252, 1, 1, "", "RandomVerticalFlip"], [252, 1, 1, "", "RescaleKerasPretrainTransform"], [252, 1, 1, "", "RescaleTFTransform"], [252, 1, 1, "", "RescaleTransform"], [252, 1, 1, "", "ResizeMXNetTransform"], [252, 1, 1, "", "ResizePytorchTransform"], [252, 1, 1, "", "ResizeTFTransform"], [252, 1, 1, "", "ResizeTransform"], [252, 1, 1, "", "ResizeWithRatio"], [252, 1, 1, "", "SquadExample"], [252, 1, 1, "", "TFModelZooCollectTransform"], [252, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [252, 1, 1, "", "TFSquadV1PostTransform"], [252, 1, 1, "", "TRANSFORMS"], [252, 1, 1, "", "TensorflowCropToBoundingBox"], [252, 1, 1, "", "TensorflowRandomHorizontalFlip"], [252, 1, 1, "", "TensorflowRandomVerticalFlip"], [252, 1, 1, "", "TensorflowResizeWithRatio"], [252, 1, 1, "", "TensorflowTransform"], [252, 1, 1, "", "TensorflowTransforms"], [252, 1, 1, "", "TensorflowTranspose"], [252, 1, 1, "", "TensorflowWrapFunction"], [252, 1, 1, "", "ToArray"], [252, 1, 1, "", "ToNDArrayTransform"], [252, 1, 1, "", "Transforms"], [252, 1, 1, "", "Transpose"], [252, 2, 1, "", "convert_examples_to_features"], [252, 2, 1, "", "get_final_text"], [252, 2, 1, "", "get_torchvision_map"], [252, 2, 1, "", "read_squad_examples"], [252, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[253, 0, 0, "-", "benchmark"], [256, 0, 0, "-", "common"], [262, 0, 0, "-", "component"], [263, 0, 0, "-", "compression"], [264, 0, 0, "-", "contrib"], [289, 0, 0, "-", "data"], [294, 0, 0, "-", "distillation"], [295, 0, 0, "-", "export"], [299, 0, 0, "-", "graph_optimization"], [307, 0, 0, "-", "metric"], [309, 0, 0, "-", "mixed_precision"], [310, 0, 0, "-", "model_conversion"], [313, 0, 0, "-", "nas"], [319, 0, 0, "-", "pruner_legacy"], [323, 0, 0, "-", "pruning"], [324, 0, 0, "-", "pruning_recipes"], [328, 0, 0, "-", "pruning_v2"], [329, 0, 0, "-", "pytorch_pruner"], [336, 0, 0, "-", "quantization"], [337, 0, 0, "-", "scheduler"], [342, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[253, 1, 1, "", "Benchmark"], [253, 2, 1, "", "get_architecture"], [253, 2, 1, "", "get_bounded_threads"], [253, 2, 1, "", "get_core_ids"], [253, 2, 1, "", "get_physical_ids"], [253, 2, 1, "", "get_threads"], [253, 2, 1, "", "get_threads_per_core"], [253, 2, 1, "", "set_all_env_var"], [253, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[254, 0, 0, "-", "criterion"], [255, 0, 0, "-", "dataloader"], [257, 0, 0, "-", "metric"], [258, 0, 0, "-", "model"], [259, 0, 0, "-", "optimizer"], [260, 0, 0, "-", "postprocess"], [261, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[254, 1, 1, "", "Criterions"], [254, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [254, 1, 1, "", "KnowledgeDistillationFramework"], [254, 1, 1, "", "KnowledgeDistillationLoss"], [254, 1, 1, "", "PyTorchCriterions"], [254, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [254, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [254, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [254, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [254, 1, 1, "", "SelfKnowledgeDistillationLoss"], [254, 1, 1, "", "TensorflowCriterions"], [254, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [254, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[255, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[257, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[258, 1, 1, "", "Model"], [258, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[259, 1, 1, "", "Optimizers"], [259, 1, 1, "", "PyTorchOptimizers"], [259, 1, 1, "", "PyTorchSGD"], [259, 1, 1, "", "TensorFlowAdamW"], [259, 1, 1, "", "TensorFlowSGD"], [259, 1, 1, "", "TensorflowOptimizers"], [259, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[260, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[261, 2, 1, "", "get_activation"], [261, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[262, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[265, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[266, 0, 0, "-", "sigopt"], [267, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[266, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[267, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[272, 0, 0, "-", "dataloaders"], [284, 0, 0, "-", "datasets"], [288, 0, 0, "-", "filters"], [291, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[268, 0, 0, "-", "base_dataloader"], [269, 0, 0, "-", "dataloader"], [270, 0, 0, "-", "default_dataloader"], [271, 0, 0, "-", "fetcher"], [273, 0, 0, "-", "mxnet_dataloader"], [274, 0, 0, "-", "onnxrt_dataloader"], [275, 0, 0, "-", "pytorch_dataloader"], [276, 0, 0, "-", "sampler"], [277, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[268, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[270, 1, 1, "", "DefaultDataLoader"], [270, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[271, 1, 1, "", "Fetcher"], [271, 1, 1, "", "IndexFetcher"], [271, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[273, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[274, 1, 1, "", "ONNXRTBertDataLoader"], [274, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[275, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[276, 1, 1, "", "BatchSampler"], [276, 1, 1, "", "IterableSampler"], [276, 1, 1, "", "Sampler"], [276, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[277, 1, 1, "", "TFDataDataLoader"], [277, 1, 1, "", "TensorflowBertDataLoader"], [277, 1, 1, "", "TensorflowDataLoader"], [277, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[278, 0, 0, "-", "bert_dataset"], [279, 0, 0, "-", "coco_dataset"], [280, 0, 0, "-", "dataset"], [281, 0, 0, "-", "dummy_dataset"], [282, 0, 0, "-", "dummy_dataset_v2"], [283, 0, 0, "-", "imagenet_dataset"], [285, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[278, 1, 1, "", "InputFeatures"], [278, 1, 1, "", "ONNXRTBertDataset"], [278, 1, 1, "", "ParseDecodeBert"], [278, 1, 1, "", "PytorchBertDataset"], [278, 1, 1, "", "TensorflowBertDataset"], [278, 1, 1, "", "TensorflowModelZooBertDataset"], [278, 2, 1, "", "convert_examples_to_features"], [278, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[279, 1, 1, "", "COCONpy"], [279, 1, 1, "", "COCORaw"], [279, 1, 1, "", "COCORecordDataset"], [279, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[280, 1, 1, "", "CIFAR10"], [280, 1, 1, "", "CIFAR100"], [280, 1, 1, "", "Dataset"], [280, 1, 1, "", "Datasets"], [280, 1, 1, "", "FashionMNIST"], [280, 1, 1, "", "ImageFolder"], [280, 1, 1, "", "IterableDataset"], [280, 1, 1, "", "MNIST"], [280, 1, 1, "", "MXNetCIFAR10"], [280, 1, 1, "", "MXNetCIFAR100"], [280, 1, 1, "", "MXNetDatasets"], [280, 1, 1, "", "MXNetFashionMNIST"], [280, 1, 1, "", "MXNetImageFolder"], [280, 1, 1, "", "MXNetMNIST"], [280, 1, 1, "", "ONNXRTITDatasets"], [280, 1, 1, "", "ONNXRTQLDatasets"], [280, 1, 1, "", "PyTorchDatasets"], [280, 1, 1, "", "PytorchCIFAR10"], [280, 1, 1, "", "PytorchCIFAR100"], [280, 1, 1, "", "PytorchFashionMNIST"], [280, 1, 1, "", "PytorchMNIST"], [280, 1, 1, "", "PytorchMxnetWrapDataset"], [280, 1, 1, "", "PytorchMxnetWrapFunction"], [280, 1, 1, "", "TensorflowCIFAR10"], [280, 1, 1, "", "TensorflowCIFAR100"], [280, 1, 1, "", "TensorflowDatasets"], [280, 1, 1, "", "TensorflowFashionMNIST"], [280, 1, 1, "", "TensorflowImageFolder"], [280, 1, 1, "", "TensorflowImageRecord"], [280, 1, 1, "", "TensorflowMNIST"], [280, 1, 1, "", "TensorflowTFRecordDataset"], [280, 1, 1, "", "TensorflowVOCRecord"], [280, 2, 1, "", "calculate_md5"], [280, 2, 1, "", "check_integrity"], [280, 2, 1, "", "dataset_registry"], [280, 2, 1, "", "download_url"], [280, 5, 1, "", "framework_datasets"], [280, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[281, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[282, 1, 1, "", "DummyDataset"], [282, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[283, 1, 1, "", "ImagenetRaw"], [283, 1, 1, "", "MXNetImagenetRaw"], [283, 1, 1, "", "ONNXRTImagenetDataset"], [283, 1, 1, "", "PytorchImagenetRaw"], [283, 1, 1, "", "TensorflowImagenetDataset"], [283, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[285, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[286, 0, 0, "-", "coco_filter"], [287, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[286, 1, 1, "", "LabelBalanceCOCORawFilter"], [286, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[287, 1, 1, "", "FILTERS"], [287, 1, 1, "", "Filter"], [287, 1, 1, "", "MXNetFilters"], [287, 1, 1, "", "ONNXRTITFilters"], [287, 1, 1, "", "ONNXRTQLFilters"], [287, 1, 1, "", "PyTorchFilters"], [287, 1, 1, "", "TensorflowFilters"], [287, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[290, 0, 0, "-", "imagenet_transform"], [292, 0, 0, "-", "tokenization"], [293, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[290, 1, 1, "", "BilinearImagenetTransform"], [290, 1, 1, "", "LabelShift"], [290, 1, 1, "", "ONNXResizeCropImagenetTransform"], [290, 1, 1, "", "OnnxBilinearImagenetTransform"], [290, 1, 1, "", "ParseDecodeImagenet"], [290, 1, 1, "", "ParseDecodeImagenetTransform"], [290, 1, 1, "", "QuantizedInput"], [290, 1, 1, "", "ResizeWithAspectRatio"], [290, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[292, 1, 1, "", "BasicTokenizer"], [292, 1, 1, "", "FullTokenizer"], [292, 1, 1, "", "WordpieceTokenizer"], [292, 2, 1, "", "convert_by_vocab"], [292, 2, 1, "", "convert_to_unicode"], [292, 2, 1, "", "load_vocab"], [292, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[293, 1, 1, "", "AlignImageChannelTransform"], [293, 1, 1, "", "BaseTransform"], [293, 1, 1, "", "CastONNXTransform"], [293, 1, 1, "", "CastPyTorchTransform"], [293, 1, 1, "", "CastTFTransform"], [293, 1, 1, "", "CenterCropTFTransform"], [293, 1, 1, "", "CenterCropTransform"], [293, 1, 1, "", "CollectTransform"], [293, 1, 1, "", "ComposeTransform"], [293, 1, 1, "", "CropResizeTFTransform"], [293, 1, 1, "", "CropResizeTransform"], [293, 1, 1, "", "CropToBoundingBox"], [293, 1, 1, "", "InputFeatures"], [293, 1, 1, "", "MXNetCropResizeTransform"], [293, 1, 1, "", "MXNetCropToBoundingBox"], [293, 1, 1, "", "MXNetNormalizeTransform"], [293, 1, 1, "", "MXNetTransforms"], [293, 1, 1, "", "MXNetTranspose"], [293, 1, 1, "", "NormalizeTFTransform"], [293, 1, 1, "", "NormalizeTransform"], [293, 1, 1, "", "ONNXRTCropToBoundingBox"], [293, 1, 1, "", "ONNXRTITTransforms"], [293, 1, 1, "", "ONNXRTQLTransforms"], [293, 1, 1, "", "PaddedCenterCropTransform"], [293, 1, 1, "", "ParseDecodeVocTransform"], [293, 1, 1, "", "PyTorchAlignImageChannel"], [293, 1, 1, "", "PyTorchCropResizeTransform"], [293, 1, 1, "", "PyTorchNormalizeTransform"], [293, 1, 1, "", "PyTorchTransforms"], [293, 1, 1, "", "PyTorchTranspose"], [293, 1, 1, "", "PytorchMxnetTransform"], [293, 1, 1, "", "PytorchMxnetWrapFunction"], [293, 1, 1, "", "RandomCropTFTransform"], [293, 1, 1, "", "RandomCropTransform"], [293, 1, 1, "", "RandomHorizontalFlip"], [293, 1, 1, "", "RandomResizedCropMXNetTransform"], [293, 1, 1, "", "RandomResizedCropPytorchTransform"], [293, 1, 1, "", "RandomResizedCropTFTransform"], [293, 1, 1, "", "RandomResizedCropTransform"], [293, 1, 1, "", "RandomVerticalFlip"], [293, 1, 1, "", "RescaleKerasPretrainTransform"], [293, 1, 1, "", "RescaleTFTransform"], [293, 1, 1, "", "RescaleTransform"], [293, 1, 1, "", "ResizeMXNetTransform"], [293, 1, 1, "", "ResizePytorchTransform"], [293, 1, 1, "", "ResizeTFTransform"], [293, 1, 1, "", "ResizeTransform"], [293, 1, 1, "", "ResizeWithRatio"], [293, 1, 1, "", "SquadExample"], [293, 1, 1, "", "TFModelZooCollectTransform"], [293, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [293, 1, 1, "", "TFSquadV1PostTransform"], [293, 1, 1, "", "TRANSFORMS"], [293, 1, 1, "", "TensorflowCropToBoundingBox"], [293, 1, 1, "", "TensorflowRandomHorizontalFlip"], [293, 1, 1, "", "TensorflowRandomVerticalFlip"], [293, 1, 1, "", "TensorflowResizeWithRatio"], [293, 1, 1, "", "TensorflowTransform"], [293, 1, 1, "", "TensorflowTransforms"], [293, 1, 1, "", "TensorflowTranspose"], [293, 1, 1, "", "TensorflowWrapFunction"], [293, 1, 1, "", "ToArray"], [293, 1, 1, "", "ToNDArrayTransform"], [293, 1, 1, "", "Transforms"], [293, 1, 1, "", "Transpose"], [293, 2, 1, "", "convert_examples_to_features"], [293, 2, 1, "", "get_final_text"], [293, 2, 1, "", "get_torchvision_map"], [293, 2, 1, "", "read_squad_examples"], [293, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[294, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[294, 4, 1, "", "_epoch_ran"], [294, 4, 1, "", "best_model"], [294, 4, 1, "", "best_score"], [294, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[296, 0, 0, "-", "qlinear2qdq"], [297, 0, 0, "-", "tf2onnx"], [298, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[296, 2, 1, "", "check_model"], [296, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[297, 2, 1, "", "tf_to_fp32_onnx"], [297, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[298, 2, 1, "", "dynamic_quant_export"], [298, 2, 1, "", "get_node_mapping"], [298, 2, 1, "", "get_quantizable_onnx_ops"], [298, 2, 1, "", "static_quant_export"], [298, 2, 1, "", "torch_to_fp32_onnx"], [298, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[299, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[301, 0, 0, "-", "bleu"], [302, 0, 0, "-", "bleu_util"], [303, 0, 0, "-", "coco_label_map"], [304, 0, 0, "-", "coco_tools"], [305, 0, 0, "-", "evaluate_squad"], [306, 0, 0, "-", "f1"], [308, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[301, 1, 1, "", "BLEU"], [301, 1, 1, "", "UnicodeRegex"], [301, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[301, 4, 1, "", "labels"], [301, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[301, 4, 1, "", "nondigit_punct_re"], [301, 4, 1, "", "punct_nondigit_re"], [301, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[302, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[304, 1, 1, "", "COCOEvalWrapper"], [304, 1, 1, "", "COCOWrapper"], [304, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [304, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [304, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[304, 4, 1, "", "dataset"], [304, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[305, 2, 1, "", "evaluate"], [305, 2, 1, "", "exact_match_score"], [305, 2, 1, "", "f1_score"], [305, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[306, 2, 1, "", "evaluate"], [306, 2, 1, "", "f1_score"], [306, 2, 1, "", "metric_max_over_ground_truths"], [306, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[308, 1, 1, "", "Accuracy"], [308, 1, 1, "", "BaseMetric"], [308, 1, 1, "", "COCOmAPv2"], [308, 1, 1, "", "F1"], [308, 1, 1, "", "GeneralTopK"], [308, 1, 1, "", "Loss"], [308, 1, 1, "", "MAE"], [308, 1, 1, "", "METRICS"], [308, 1, 1, "", "MSE"], [308, 1, 1, "", "MXNetMetrics"], [308, 1, 1, "", "ONNXRTGLUE"], [308, 1, 1, "", "ONNXRTITMetrics"], [308, 1, 1, "", "ONNXRTQLMetrics"], [308, 1, 1, "", "PyTorchLoss"], [308, 1, 1, "", "PyTorchMetrics"], [308, 1, 1, "", "RMSE"], [308, 1, 1, "", "ROC"], [308, 1, 1, "", "SquadF1"], [308, 1, 1, "", "TensorflowCOCOMAP"], [308, 1, 1, "", "TensorflowMAP"], [308, 1, 1, "", "TensorflowMetrics"], [308, 1, 1, "", "TensorflowTopK"], [308, 1, 1, "", "TensorflowVOCMAP"], [308, 1, 1, "", "WrapMXNetMetric"], [308, 1, 1, "", "WrapONNXRTMetric"], [308, 1, 1, "", "WrapPyTorchMetric"], [308, 1, 1, "", "mIOU"], [308, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[308, 4, 1, "", "label_list"], [308, 4, 1, "", "pred_list"], [308, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[308, 4, 1, "", "k"], [308, 4, 1, "", "num_correct"], [308, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[308, 4, 1, "", "sample"], [308, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[308, 4, 1, "", "compare_label"], [308, 4, 1, "", "label_list"], [308, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[308, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[308, 4, 1, "", "compare_label"], [308, 4, 1, "", "label_list"], [308, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[308, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[308, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[308, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[308, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[308, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[308, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[308, 4, 1, "", "k"], [308, 4, 1, "", "num_correct"], [308, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[309, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[310, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[311, 0, 0, "-", "basic_nas"], [312, 0, 0, "-", "dynas"], [314, 0, 0, "-", "nas"], [315, 0, 0, "-", "nas_utils"], [316, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[311, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[312, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[314, 1, 1, "", "NAS"], [314, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[315, 2, 1, "", "create_search_space_pool"], [315, 2, 1, "", "find_pareto_front"], [315, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[316, 1, 1, "", "BayesianOptimizationSearcher"], [316, 1, 1, "", "GridSearcher"], [316, 1, 1, "", "RandomSearcher"], [316, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[317, 0, 0, "-", "gradient_sensitivity"], [318, 0, 0, "-", "group_lasso"], [320, 0, 0, "-", "magnitude"], [321, 0, 0, "-", "pattern_lock"], [322, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[317, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[318, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[320, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[321, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[322, 1, 1, "", "Pruner"], [322, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[323, 1, 1, "", "Pruning"], [323, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[323, 4, 1, "", "conf"], [323, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[325, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[326, 0, 0, "-", "pattern"], [327, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[326, 1, 1, "", "PATTERNS"], [326, 1, 1, "", "PatternBase"], [326, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[326, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[327, 1, 1, "", "TilePatternBase"], [327, 1, 1, "", "TilePattern_1x1"], [327, 1, 1, "", "TilePattern_1x16"], [327, 1, 1, "", "TilePattern_1x2"], [327, 1, 1, "", "TilePattern_2x2"], [327, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[328, 1, 1, "", "Pruning"], [328, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[328, 4, 1, "", "conf"], [328, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[330, 0, 0, "-", "logger"], [331, 0, 0, "-", "patterns"], [332, 0, 0, "-", "prune_utils"], [333, 0, 0, "-", "pruner"], [334, 0, 0, "-", "pruning"], [335, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[331, 1, 1, "", "Pattern"], [331, 1, 1, "", "PatternNInM"], [331, 1, 1, "", "PatternNxM"], [331, 2, 1, "", "get_pattern"], [331, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[331, 4, 1, "", "is_global"], [331, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[331, 4, 1, "", "M"], [331, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[331, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[332, 2, 1, "", "check_config"], [332, 2, 1, "", "parse_not_to_prune"], [332, 2, 1, "", "parse_to_prune"], [332, 2, 1, "", "process_and_check_config"], [332, 2, 1, "", "process_config"], [332, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[333, 1, 1, "", "MagnitudePruner"], [333, 1, 1, "", "PatternLockPruner"], [333, 1, 1, "", "Pruner"], [333, 1, 1, "", "SnipMomentumPruner"], [333, 1, 1, "", "SnipPruner"], [333, 2, 1, "", "get_pruner"], [333, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[333, 4, 1, "", "config"], [333, 4, 1, "", "current_sparsity_ratio"], [333, 4, 1, "", "end_step"], [333, 4, 1, "", "global_step"], [333, 4, 1, "", "masks"], [333, 4, 1, "", "max_sparsity_ratio_per_layer"], [333, 4, 1, "", "modules"], [333, 4, 1, "", "pattern"], [333, 4, 1, "", "scheduler"], [333, 4, 1, "", "scores"], [333, 4, 1, "", "start_step"], [333, 4, 1, "", "target_sparsity_ratio"], [333, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[334, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[334, 4, 1, "", "config_file_path"], [334, 4, 1, "", "model"], [334, 4, 1, "", "pruner_info"], [334, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[335, 1, 1, "", "IterativeScheduler"], [335, 1, 1, "", "OneshotScheduler"], [335, 1, 1, "", "Scheduler"], [335, 2, 1, "", "get_scheduler"], [335, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[335, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[336, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[337, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[338, 0, 0, "-", "auto_mixed_precision"], [339, 0, 0, "-", "basic"], [340, 0, 0, "-", "bayesian"], [341, 0, 0, "-", "exhaustive"], [343, 0, 0, "-", "mse"], [344, 0, 0, "-", "mse_v2"], [345, 0, 0, "-", "random"], [346, 0, 0, "-", "strategy"], [348, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[338, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[339, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[340, 1, 1, "", "BayesianOptimization"], [340, 1, 1, "", "BayesianTuneStrategy"], [340, 1, 1, "", "TargetSpace"], [340, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[341, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[343, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[344, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[345, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[346, 1, 1, "", "TuneStrategy"], [346, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[347, 0, 0, "-", "constant"], [349, 0, 0, "-", "tuning_sampler"], [350, 0, 0, "-", "tuning_space"], [351, 0, 0, "-", "tuning_structs"], [352, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[349, 1, 1, "", "FallbackTuningSampler"], [349, 1, 1, "", "ModelWiseTuningSampler"], [349, 1, 1, "", "OpTypeWiseTuningSampler"], [349, 1, 1, "", "OpWiseTuningSampler"], [349, 1, 1, "", "SmoothQuantSampler"], [349, 1, 1, "", "TuningOrder"], [349, 1, 1, "", "TuningSampler"], [349, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[350, 1, 1, "", "TuningItem"], [350, 1, 1, "", "TuningSpace"], [350, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [350, 2, 1, "", "pattern_to_internal"], [350, 2, 1, "", "pattern_to_path"], [350, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[351, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[352, 1, 1, "", "OrderedDefaultDict"], [352, 2, 1, "", "extract_data_type"], [352, 2, 1, "", "get_adaptor_name"], [352, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[354, 0, 0, "-", "bleu"], [355, 0, 0, "-", "bleu_util"], [356, 0, 0, "-", "coco_label_map"], [357, 0, 0, "-", "coco_tools"], [358, 0, 0, "-", "evaluate_squad"], [359, 0, 0, "-", "f1"], [361, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[354, 1, 1, "", "BLEU"], [354, 1, 1, "", "UnicodeRegex"], [354, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[354, 4, 1, "", "labels"], [354, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[354, 4, 1, "", "nondigit_punct_re"], [354, 4, 1, "", "punct_nondigit_re"], [354, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[355, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[357, 1, 1, "", "COCOEvalWrapper"], [357, 1, 1, "", "COCOWrapper"], [357, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [357, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [357, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[357, 4, 1, "", "dataset"], [357, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[358, 2, 1, "", "evaluate"], [358, 2, 1, "", "exact_match_score"], [358, 2, 1, "", "f1_score"], [358, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[359, 2, 1, "", "evaluate"], [359, 2, 1, "", "f1_score"], [359, 2, 1, "", "metric_max_over_ground_truths"], [359, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[361, 1, 1, "", "Accuracy"], [361, 1, 1, "", "BaseMetric"], [361, 1, 1, "", "COCOmAPv2"], [361, 1, 1, "", "F1"], [361, 1, 1, "", "GeneralTopK"], [361, 1, 1, "", "Loss"], [361, 1, 1, "", "MAE"], [361, 1, 1, "", "METRICS"], [361, 1, 1, "", "MSE"], [361, 1, 1, "", "MXNetMetrics"], [361, 1, 1, "", "Metric"], [361, 1, 1, "", "ONNXRTGLUE"], [361, 1, 1, "", "ONNXRTITMetrics"], [361, 1, 1, "", "ONNXRTQLMetrics"], [361, 1, 1, "", "PyTorchLoss"], [361, 1, 1, "", "PyTorchMetrics"], [361, 1, 1, "", "RMSE"], [361, 1, 1, "", "ROC"], [361, 1, 1, "", "SquadF1"], [361, 1, 1, "", "TensorflowCOCOMAP"], [361, 1, 1, "", "TensorflowMAP"], [361, 1, 1, "", "TensorflowMetrics"], [361, 1, 1, "", "TensorflowTopK"], [361, 1, 1, "", "TensorflowVOCMAP"], [361, 1, 1, "", "WrapMXNetMetric"], [361, 1, 1, "", "WrapONNXRTMetric"], [361, 1, 1, "", "WrapPyTorchMetric"], [361, 1, 1, "", "mIOU"], [361, 2, 1, "", "metric_registry"], [361, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[361, 4, 1, "", "label_list"], [361, 4, 1, "", "pred_list"], [361, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[361, 4, 1, "", "k"], [361, 4, 1, "", "num_correct"], [361, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[361, 4, 1, "", "sample"], [361, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[361, 4, 1, "", "compare_label"], [361, 4, 1, "", "label_list"], [361, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[361, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[361, 4, 1, "", "compare_label"], [361, 4, 1, "", "label_list"], [361, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[361, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[361, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[361, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[361, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[361, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[361, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[361, 4, 1, "", "k"], [361, 4, 1, "", "num_correct"], [361, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[362, 2, 1, "", "fit"]], "neural_compressor.model": [[363, 0, 0, "-", "base_model"], [365, 0, 0, "-", "keras_model"], [366, 0, 0, "-", "model"], [367, 0, 0, "-", "mxnet_model"], [368, 0, 0, "-", "nets_factory"], [369, 0, 0, "-", "onnx_model"], [370, 0, 0, "-", "tensorflow_model"], [371, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[363, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[365, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[366, 1, 1, "", "Model"], [366, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[367, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[368, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[369, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[370, 1, 1, "", "TensorflowBaseModel"], [370, 1, 1, "", "TensorflowCheckpointModel"], [370, 1, 1, "", "TensorflowLLMModel"], [370, 1, 1, "", "TensorflowModel"], [370, 1, 1, "", "TensorflowQATModel"], [370, 1, 1, "", "TensorflowSavedModelModel"], [370, 2, 1, "", "checkpoint_session"], [370, 2, 1, "", "estimator_session"], [370, 2, 1, "", "frozen_pb_session"], [370, 2, 1, "", "get_model_type"], [370, 2, 1, "", "graph_def_session"], [370, 2, 1, "", "graph_session"], [370, 2, 1, "", "keras_session"], [370, 2, 1, "", "load_saved_model"], [370, 2, 1, "", "saved_model_session"], [370, 2, 1, "", "slim_session"], [370, 2, 1, "", "validate_and_inference_input_output"], [370, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[371, 1, 1, "", "IPEXModel"], [371, 1, 1, "", "PyTorchBaseModel"], [371, 1, 1, "", "PyTorchFXModel"], [371, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[372, 1, 1, "", "Accuracy"], [372, 1, 1, "", "Footprint"], [372, 1, 1, "", "ModelSize"], [372, 1, 1, "", "MultiObjective"], [372, 1, 1, "", "Objective"], [372, 1, 1, "", "Performance"], [372, 2, 1, "", "objective_custom_registry"], [372, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[375, 0, 0, "-", "parser"], [385, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[374, 0, 0, "-", "factory"], [377, 0, 0, "-", "onnx_parser"], [379, 0, 0, "-", "parser"], [380, 0, 0, "-", "result"], [382, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[374, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[376, 0, 0, "-", "factory"], [378, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[376, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[378, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[379, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[380, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[381, 0, 0, "-", "factory"], [383, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[381, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[383, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[384, 0, 0, "-", "factory"], [387, 0, 0, "-", "onnxrt_profiler"], [390, 0, 0, "-", "profiler"], [392, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[384, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[386, 0, 0, "-", "factory"], [388, 0, 0, "-", "profiler"], [389, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[386, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[388, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[389, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[390, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[391, 0, 0, "-", "factory"], [393, 0, 0, "-", "profiler"], [394, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[391, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[393, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[394, 2, 1, "", "create_tf_config"], [394, 2, 1, "", "delete_assign"], [394, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[395, 2, 1, "", "fit"]], "neural_compressor.strategy": [[396, 0, 0, "-", "auto"], [397, 0, 0, "-", "auto_mixed_precision"], [398, 0, 0, "-", "basic"], [399, 0, 0, "-", "bayesian"], [400, 0, 0, "-", "conservative"], [401, 0, 0, "-", "exhaustive"], [402, 0, 0, "-", "hawq_v2"], [404, 0, 0, "-", "mse"], [405, 0, 0, "-", "mse_v2"], [406, 0, 0, "-", "random"], [407, 0, 0, "-", "strategy"], [409, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[396, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[397, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[398, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[399, 1, 1, "", "BayesianOptimization"], [399, 1, 1, "", "BayesianTuneStrategy"], [399, 1, 1, "", "TargetSpace"], [399, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[400, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[401, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[402, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[404, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[405, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[406, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[407, 1, 1, "", "TuneStrategy"], [407, 1, 1, "", "TuneStrategyMeta"], [407, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[408, 0, 0, "-", "constant"], [410, 0, 0, "-", "tuning_sampler"], [411, 0, 0, "-", "tuning_space"], [412, 0, 0, "-", "tuning_structs"], [413, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[410, 1, 1, "", "BlockFallbackTuningSampler"], [410, 1, 1, "", "FallbackTuningSampler"], [410, 1, 1, "", "LowerBitsSampler"], [410, 1, 1, "", "ModelWiseTuningSampler"], [410, 1, 1, "", "OpTypeWiseTuningSampler"], [410, 1, 1, "", "OpWiseTuningSampler"], [410, 1, 1, "", "SmoothQuantSampler"], [410, 1, 1, "", "TuningOrder"], [410, 1, 1, "", "TuningSampler"], [410, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[411, 1, 1, "", "TuningItem"], [411, 1, 1, "", "TuningSpace"], [411, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [411, 2, 1, "", "pattern_to_internal"], [411, 2, 1, "", "pattern_to_path"], [411, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[412, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[413, 1, 1, "", "ClassRegister"], [413, 1, 1, "", "OrderedDefaultDict"], [413, 1, 1, "", "QuantOptions"], [413, 1, 1, "", "QuantType"], [413, 2, 1, "", "build_slave_faker_model"], [413, 2, 1, "", "extract_data_type"], [413, 2, 1, "", "get_adaptor_name"], [413, 2, 1, "", "preprocess_user_cfg"], [413, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[414, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[414, 1, 1, "", "ExampleClass"], [414, 4, 1, "", "attribute1"], [414, 2, 1, "", "function1"], [414, 2, 1, "", "function2"], [414, 2, 1, "", "function3"], [414, 2, 1, "", "generator1"], [414, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[414, 4, 1, "", "attr1"], [414, 4, 1, "", "attr2"], [414, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[416, 0, 0, "-", "algorithms"], [429, 0, 0, "-", "quantization"], [431, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[417, 0, 0, "-", "static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[418, 0, 0, "-", "keras"], [422, 0, 0, "-", "keras_utils"], [426, 0, 0, "-", "quantize_entry"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[418, 1, 1, "", "KerasAdaptor"], [418, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[419, 0, 0, "-", "conv2d"], [420, 0, 0, "-", "dense"], [421, 0, 0, "-", "depthwise_conv2d"], [423, 0, 0, "-", "pool2d"], [424, 0, 0, "-", "quantizer"], [425, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[426, 2, 1, "", "parse_to_keras_tune_cfg"], [426, 2, 1, "", "static_quantize_entry"], [426, 2, 1, "", "update_config"]], "neural_compressor.tensorflow.quantization": [[428, 0, 0, "-", "config"], [430, 0, 0, "-", "quantize"]], "neural_compressor.tensorflow.quantization.config": [[428, 1, 1, "", "Backend"], [428, 1, 1, "", "StaticQuantConfig"], [428, 2, 1, "", "get_all_registered_configs"], [428, 2, 1, "", "get_default_static_quant_config"], [428, 2, 1, "", "parse_config_from_dict"]], "neural_compressor.tensorflow.quantization.quantize": [[430, 2, 1, "", "quantize_model"]], "neural_compressor.tensorflow.utils": [[431, 2, 1, "", "deep_get"], [431, 2, 1, "", "dump_elapsed_time"], [431, 2, 1, "", "register_algo"], [431, 2, 1, "", "version1_gte_version2"]], "neural_compressor.torch": [[432, 0, 0, "-", "algorithms"], [440, 0, 0, "-", "amp"], [447, 0, 0, "-", "quantization"], [450, 0, 0, "-", "tune"], [452, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[434, 0, 0, "-", "weight_only"], [436, 0, 0, "-", "weight_only_algos"]], "neural_compressor.torch.algorithms.weight_only": [[433, 0, 0, "-", "gptq"], [435, 0, 0, "-", "rtn"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[433, 1, 1, "", "GPTQ"], [433, 1, 1, "", "GPTQuantizer"], [433, 2, 1, "", "apply_gptq_quantize"], [433, 2, 1, "", "find_layers"], [433, 2, 1, "", "find_layers_name"], [433, 2, 1, "", "is_leaf"], [433, 2, 1, "", "log_quantizable_layers_per_transformer"], [433, 2, 1, "", "quantize"], [433, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[435, 2, 1, "", "qdq_weight_actor"], [435, 2, 1, "", "qdq_weight_asym"], [435, 2, 1, "", "qdq_weight_sym"], [435, 2, 1, "", "quant_weight"], [435, 2, 1, "", "quant_weight_w_scale"], [435, 2, 1, "", "quantize_4bit"], [435, 2, 1, "", "rtn_quantize"], [435, 2, 1, "", "search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[436, 2, 1, "", "rtn_quantize_entry"]], "neural_compressor.torch.amp": [[437, 0, 0, "-", "autocast"], [439, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[437, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[438, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[442, 0, 0, "-", "config"], [443, 0, 0, "-", "fp8"], [448, 0, 0, "-", "layers"], [449, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.config": [[442, 1, 1, "", "Backend"], [442, 1, 1, "", "FP8QConfig"], [442, 1, 1, "", "GPTQConfig"], [442, 1, 1, "", "RTNWeightQuantConfig"], [442, 2, 1, "", "get_default_gptq_config"], [442, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.fp8": [[444, 0, 0, "-", "modules"], [445, 0, 0, "-", "observer"], [446, 0, 0, "-", "quantization_impl"]], "neural_compressor.torch.quantization.layers": [[448, 1, 1, "", "FakeAffineTensorQuantFunction"], [448, 1, 1, "", "MulLinear"], [448, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.quantize": [[449, 2, 1, "", "quantize"], [449, 2, 1, "", "quantize_dynamic"]], "neural_compressor.torch.tune": [[450, 1, 1, "", "TorchWrapper"]], "neural_compressor.torch.utils": [[451, 0, 0, "-", "constants"], [453, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.utility": [[453, 2, 1, "", "fetch_module"], [453, 2, 1, "", "register_algo"], [453, 2, 1, "", "set_module"]], "neural_compressor.training": [[454, 1, 1, "", "CallBacks"], [454, 1, 1, "", "CompressionManager"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[455, 0, 0, "-", "collect_layer_histogram"], [456, 0, 0, "-", "constant"], [457, 0, 0, "-", "create_obj_from_config"], [459, 0, 0, "-", "kl_divergence"], [460, 0, 0, "-", "load_huggingface"], [461, 0, 0, "-", "logger"], [462, 0, 0, "-", "neural_insights_utils"], [463, 0, 0, "-", "options"], [464, 0, 0, "-", "pytorch"], [465, 0, 0, "-", "utility"], [466, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[455, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[457, 2, 1, "", "create_dataloader"], [457, 2, 1, "", "create_dataset"], [457, 2, 1, "", "create_eval_func"], [457, 2, 1, "", "create_train_func"], [457, 2, 1, "", "get_algorithm"], [457, 2, 1, "", "get_func_from_config"], [457, 2, 1, "", "get_metrics"], [457, 2, 1, "", "get_postprocess"], [457, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[459, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[460, 1, 1, "", "OptimizedModel"], [460, 2, 1, "", "export_compressed_model"], [460, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[461, 1, 1, "", "Logger"], [461, 2, 1, "", "debug"], [461, 2, 1, "", "error"], [461, 2, 1, "", "fatal"], [461, 2, 1, "", "info"], [461, 2, 1, "", "log"], [461, 2, 1, "", "warn"], [461, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[462, 2, 1, "", "get_model_path"], [462, 2, 1, "", "register_neural_insights_workload"], [462, 2, 1, "", "update_neural_insights_workload"], [462, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[463, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[464, 2, 1, "", "is_int8_model"], [464, 2, 1, "", "load"], [464, 2, 1, "", "load_weight_only"], [464, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[465, 1, 1, "", "CaptureOutputToFile"], [465, 1, 1, "", "CpuInfo"], [465, 2, 1, "", "Dequantize"], [465, 1, 1, "", "DotDict"], [465, 1, 1, "", "GLOBAL_STATE"], [465, 1, 1, "", "LazyImport"], [465, 1, 1, "", "MODE"], [465, 1, 1, "", "OpEntry"], [465, 1, 1, "", "Statistics"], [465, 2, 1, "", "alias_param"], [465, 2, 1, "", "calculate_mse"], [465, 2, 1, "", "check_key_exist"], [465, 2, 1, "", "combine_histogram"], [465, 2, 1, "", "compare_objects"], [465, 2, 1, "", "compute_sparsity"], [465, 2, 1, "", "dequantize_weight"], [465, 2, 1, "", "dump_class_attrs"], [465, 2, 1, "", "dump_data_to_local"], [465, 2, 1, "", "dump_elapsed_time"], [465, 2, 1, "", "dump_table"], [465, 2, 1, "", "dump_table_to_csv"], [465, 2, 1, "", "equal_dicts"], [465, 2, 1, "", "fault_tolerant_file"], [465, 2, 1, "", "get_all_fp32_data"], [465, 2, 1, "", "get_number_of_sockets"], [465, 2, 1, "", "get_op_list"], [465, 2, 1, "", "get_size"], [465, 2, 1, "", "get_tensor_histogram"], [465, 2, 1, "", "get_tensors_info"], [465, 2, 1, "", "get_tuning_history"], [465, 2, 1, "", "get_weights_details"], [465, 2, 1, "", "load_data_from_pkl"], [465, 2, 1, "", "mse_metric_gap"], [465, 2, 1, "", "print_op_list"], [465, 2, 1, "", "print_table"], [465, 2, 1, "", "recover"], [465, 2, 1, "", "set_random_seed"], [465, 2, 1, "", "set_resume_from"], [465, 2, 1, "", "set_tensorboard"], [465, 2, 1, "", "set_workspace"], [465, 2, 1, "", "show_memory_info"], [465, 2, 1, "", "singleton"], [465, 2, 1, "", "str2array"], [465, 2, 1, "", "time_limit"], [465, 2, 1, "", "version1_eq_version2"], [465, 2, 1, "", "version1_gt_version2"], [465, 2, 1, "", "version1_gte_version2"], [465, 2, 1, "", "version1_lt_version2"], [465, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[466, 1, 1, "", "WeightsDetails"], [466, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 204], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 475, 476, 478], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 188, 189, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 354, 355, 357, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 383, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 418, 426, 428, 430, 431, 433, 435, 436, 437, 442, 444, 448, 449, 450, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 383, 384, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 418, 426, 428, 430, 431, 433, 435, 436, 437, 442, 448, 449, 450, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 474, 542], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 153, 154, 155, 159, 163, 164, 165, 167, 170, 171, 172, 173, 174, 176, 177, 179, 181, 182, 184, 188, 189, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 299, 300, 301, 304, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 354, 357, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 378, 379, 380, 381, 383, 384, 386, 388, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 418, 428, 433, 437, 442, 448, 450, 454, 455, 458, 459, 460, 461, 463, 465, 466, 475, 542], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 151, 153, 154, 155, 160, 161, 162, 165, 166, 168, 169, 170, 172, 175, 176, 179, 182, 184, 185, 188, 189, 191, 192, 193, 195, 197, 198, 202, 205, 211, 212, 213, 214, 215, 217, 226, 227, 235, 237, 241, 244, 245, 246, 249, 251, 252, 253, 254, 256, 258, 259, 261, 270, 278, 280, 284, 287, 288, 289, 291, 292, 293, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 315, 322, 326, 331, 332, 333, 335, 340, 346, 350, 352, 354, 355, 357, 358, 359, 360, 361, 362, 366, 370, 372, 389, 394, 395, 399, 407, 411, 413, 414, 426, 428, 430, 431, 433, 435, 436, 438, 442, 449, 453, 454, 457, 458, 460, 461, 462, 464, 465, 500], "subpackag": [2, 17, 87, 111, 112, 114, 156, 190, 192, 221, 246, 264, 289, 300, 324, 342, 353, 403], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 156, 157, 172, 178, 183, 186, 190, 192, 194, 198, 205, 218, 222, 229, 241, 245, 249, 256, 265, 272, 284, 288, 291, 295, 300, 307, 313, 319, 325, 329, 342, 348, 353, 360, 364, 375, 377, 382, 385, 387, 392, 403, 409, 415, 447, 458], "packag": [2, 29, 172, 192, 198, 205, 229, 241, 245, 246, 249, 256, 272, 284, 288, 289, 291, 300, 307, 319, 324, 325, 342, 360, 364, 403, 458, 525, 527, 529, 530], "kera": [3, 418], "keras_util": [4, 5, 6, 7, 8, 9, 10, 419, 420, 421, 422, 423, 424, 425], "conv2d": [4, 419], "dens": [5, 420], "depthwise_conv2d": [6, 421], "pool2d": [8, 423], "quantiz": [9, 41, 159, 336, 395, 424, 428, 429, 430, 442, 443, 444, 445, 446, 447, 448, 449, 471, 474, 476, 477, 489, 493, 497, 499, 502, 505, 508, 510, 512, 513, 521, 532, 534, 535, 536, 537, 545, 546, 547, 553, 554, 555, 556, 557, 560, 566], "separable_conv2d": [10, 425], "mxnet": [11, 495, 511, 554, 562], "mxnet_util": [12, 13], "util": [13, 43, 148, 161, 168, 180, 185, 215, 347, 348, 349, 350, 351, 352, 389, 394, 408, 409, 410, 411, 412, 413, 431, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 480], "onnxrt": [14, 495, 511, 562], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 476, 493], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 476, 477], "activ": [18, 535], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 560], "maxpool": 32, "norm": 33, "op": [34, 502], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 538], "unary_op": 40, "smooth_quant": [42, 165, 173], "weight_onli": [44, 169, 433, 434, 435], "pytorch": [45, 464, 495, 500, 502, 511, 536, 554, 555, 556, 561, 562, 566], "queri": [46, 475, 540, 545, 546, 547], "tensorflow": [47, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 495, 500, 502, 511, 554, 556, 561, 562, 566], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 52, 513], "bf16_convert": [50, 153], "dequantize_cast_optim": 51, "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 476], "convert_add_to_biasadd": 53, "convert_layout": 54, "convert_leakyrelu": 55, "convert_nan_to_random": 56, "convert_placeholder_to_const": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 502, 566], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 479, 508, 554, 555, 566], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 566], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 566], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 261], "autoround": [149, 150, 151], "sign_sgd": 151, "awq": 152, "gptq": [154, 433], "hawq_metr": 155, "layer_wise_qu": [157, 158, 159, 160, 161], "modified_pickl": 158, "torch_load": 160, "mixed_precis": [162, 309], "model_wrapp": 163, "pattern_detector": 164, "symbolic_trac": 166, "teq": 167, "algorithm": [170, 171, 172, 173, 174, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 433, 434, 435, 436, 493, 557, 560, 563], "fast_bias_correct": 171, "weight_correct": 174, "benchmark": [175, 253, 483, 492, 497, 512, 553], "common": [176, 177, 178, 179, 180, 254, 255, 256, 257, 258, 259, 260, 261, 471, 503], "base_config": 176, "base_tun": 177, "logger": [179, 330, 461], "compress": [181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 263, 484, 557], "callback": 181, "distil": [182, 183, 184, 185, 294, 498, 499, 512, 553, 566], "criterion": [182, 254], "optim": [184, 259, 522, 532, 542, 545, 546, 547, 550, 551, 564], "hpo": [186, 187, 188, 189], "sa_optim": 187, "search_algorithm": [188, 316], "search_spac": 189, "pruner": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 322, 333], "criteria": [191, 470, 551, 563], "model_slim": [193, 194, 195, 196], "auto_slim": 193, "pattern_analyz": 195, "weight_slim": 196, "pattern": [197, 198, 199, 200, 201, 325, 326, 327, 331, 551], "base": [197, 202, 508, 541, 564], "mha": [199, 206], "ninm": 200, "nxm": 201, "basic": [203, 339, 398, 472, 563], "pattern_lock": [207, 321], "progress": [208, 538], "retrain_fre": 209, "sparse_gpt": 210, "prune": [211, 323, 334, 512, 551, 553, 566], "reg": 212, "schedul": [213, 335, 337, 551], "tf_criteria": 214, "conf": [216, 217, 218, 219], "config": [216, 220, 428, 442, 485, 495, 549], "dotdict": 217, "pythonic_config": 219, "contrib": [221, 222, 223, 224, 264, 265, 266, 267], "strategi": [222, 223, 224, 265, 266, 267, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 490, 559, 563], "sigopt": [223, 266, 559, 563], "tpe": [224, 267, 563], "data": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 476, 477, 497, 501, 536], "dataload": [225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 255, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 494, 495], "base_dataload": [225, 268], "default_dataload": [227, 270], "fetcher": [228, 271], "attribut": [229, 237, 246, 280, 289, 300, 324, 364, 414, 458, 469], "mxnet_dataload": [230, 273], "onnxrt_dataload": [231, 274], "pytorch_dataload": [232, 275], "sampler": [233, 276], "tensorflow_dataload": [234, 277], "dataset": [235, 236, 237, 238, 239, 240, 241, 242, 278, 279, 280, 281, 282, 283, 284, 285, 495, 497, 506, 537], "bert_dataset": [235, 278], "coco_dataset": [236, 279], "dummy_dataset": [238, 281], "dummy_dataset_v2": [239, 282], "imagenet_dataset": [240, 283], "style_transfer_dataset": [242, 285], "filter": [243, 244, 245, 286, 287, 288], "coco_filt": [243, 286], "transform": [247, 248, 249, 250, 251, 252, 290, 291, 292, 293, 506, 562], "coco_transform": 247, "imagenet_transform": [248, 290], "postprocess": [250, 260], "token": [251, 292], "experiment": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "metric": [257, 301, 302, 303, 304, 305, 306, 307, 308, 354, 355, 356, 357, 358, 359, 360, 361, 506, 511], "model": [258, 363, 364, 365, 366, 367, 368, 369, 370, 371, 476, 487, 502, 505, 508, 510, 512, 514, 521, 535, 536, 537, 545, 546, 547, 551, 555, 557, 560, 566], "compon": 262, "export": [295, 296, 297, 298, 502, 557], "qlinear2qdq": 296, "tf2onnx": 297, "torch2onnx": 298, "graph_optim": 299, "bleu": [301, 354], "bleu_util": [302, 355], "coco_label_map": [303, 356], "coco_tool": [304, 357], "evaluate_squad": [305, 358], "f1": [306, 359], "model_convers": 310, "na": [311, 312, 313, 314, 315, 316, 472, 553], "basic_na": 311, "dyna": 312, "nas_util": 315, "pruner_legaci": [317, 318, 319, 320, 321, 322], "gradient_sensit": 317, "group_lasso": 318, "magnitud": 320, "pruning_recip": [324, 325, 326, 327], "tile_pattern": 327, "pruning_v2": 328, "pytorch_prun": [329, 330, 331, 332, 333, 334, 335], "prune_util": 332, "auto_mixed_precis": [338, 397], "bayesian": [340, 399, 563], "exhaust": [341, 401, 563], "mse": [343, 404, 563], "mse_v2": [344, 405, 563], "random": [345, 406, 563], "constant": [347, 408, 451, 456], "tuning_sampl": [349, 410], "tuning_spac": [350, 411], "tuning_struct": [351, 412], "mix_precis": 362, "base_model": 363, "keras_model": 365, "mxnet_model": 367, "nets_factori": 368, "onnx_model": 369, "tensorflow_model": 370, "torch_model": 371, "object": [372, 488, 545, 546, 547, 549], "profil": [373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 497], "parser": [374, 375, 376, 377, 378, 379, 380, 381, 382, 383], "factori": [374, 376, 381, 384, 386, 391], "onnx_pars": [376, 377, 378], "result": [380, 535, 537, 545, 546, 547], "tensorflow_pars": [381, 382, 383], "onnxrt_profil": [386, 387, 388, 389], "tensorflow_profil": [391, 392, 393, 394], "auto": [396, 526, 532, 556, 560, 563], "conserv": [400, 563], "hawq_v2": [402, 563], "templat": [414, 415, 470], "api_doc_exampl": 414, "static_quant": [417, 418, 419, 420, 421, 422, 423, 424, 425, 426], "quantize_entri": 426, "torch": [432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 480, 566], "rtn": 435, "weight_only_algo": 436, "amp": [437, 438, 439, 440], "autocast": 437, "fp8": [438, 439, 443, 444, 445, 446], "observ": 445, "quantization_impl": 446, "layer": [448, 498, 555, 560], "tune": [450, 477, 554, 557, 560, 563], "train": [454, 471, 491, 500, 512, 551, 554], "collect_layer_histogram": 455, "create_obj_from_config": 457, "kl_diverg": 459, "load_huggingfac": 460, "neural_insights_util": 462, "option": [463, 500, 520], "weights_detail": 466, "version": 467, "intel": [468, 474, 494, 497, 507, 508, 511, 512, 518, 526, 532, 566, 567], "neural": [468, 471, 472, 474, 494, 497, 507, 508, 511, 512, 515, 519, 521, 526, 532, 534, 535, 536, 537, 539, 540, 541, 545, 546, 547, 551, 559, 564, 567], "compressor": [468, 471, 474, 494, 497, 507, 508, 511, 512, 526, 532, 559, 567], "document": [468, 474, 481, 567], "section": [468, 567], "contributor": [469, 470], "coven": [469, 470], "code": [469, 470, 472, 512, 533, 538, 557, 564], "conduct": [469, 470], "our": [469, 560], "pledg": 469, "standard": 469, "respons": [469, 541], "scope": [469, 551], "enforc": 469, "contribut": [470, 525, 529], "guidelin": 470, "creat": [470, 538], "pull": 470, "request": [470, 513, 543], "step": [470, 534, 535, 536, 537], "checklist": 470, "accept": 470, "statu": [470, 540, 541], "check": 470, "overview": [470, 542, 564], "support": [470, 471, 472, 475, 477, 492, 493, 494, 495, 497, 498, 499, 500, 502, 504, 507, 508, 511, 513, 514, 516, 517, 521, 522, 549, 550, 551, 553, 554, 555, 557, 560, 561, 562, 565], "fx": 471, "introduct": [471, 472, 475, 476, 477, 492, 493, 494, 495, 497, 498, 499, 500, 502, 504, 507, 511, 513, 514, 532, 535, 536, 537, 549, 550, 551, 553, 554, 555, 557, 559, 560, 561, 562, 563, 565], "mode": [471, 566], "matrix": [471, 472, 475, 492, 493, 494, 495, 497, 498, 499, 500, 502, 504, 507, 511, 513, 514, 517, 549, 550, 551, 553, 554, 555, 557, 560, 561, 565], "get": [471, 472, 474, 475, 492, 494, 495, 497, 498, 499, 500, 504, 505, 511, 513, 515, 526, 533, 534, 538, 539, 540, 541, 549, 550, 551, 553, 554, 561, 565], "start": [471, 472, 474, 475, 492, 494, 495, 497, 498, 499, 500, 504, 505, 511, 513, 515, 516, 520, 526, 534, 538, 539, 540, 545, 546, 547, 549, 550, 551, 553, 554, 561, 565], "post": [471, 512, 541, 554], "static": [471, 554], "dynam": [471, 472, 554], "awar": [471, 512, 551, 554], "exampl": [471, 472, 475, 481, 492, 494, 495, 497, 498, 499, 500, 501, 502, 511, 512, 513, 514, 517, 521, 534, 535, 536, 537, 539, 544, 545, 546, 547, 549, 550, 551, 554, 555, 557, 560, 561, 566], "note": [471, 558], "detail": 471, "problem": 471, "architectur": [472, 496, 507, 508], "search": [472, 532], "api": [472, 474, 475, 476, 481, 482, 492, 494, 495, 498, 499, 500, 505, 506, 511, 513, 515, 519, 533, 534, 541, 547, 549, 550, 551, 553, 564], "usag": [472, 521, 532, 541, 560, 561, 563], "1": [472, 500, 503, 506, 512, 532, 539, 540, 566], "python": [472, 474, 494, 505, 511, 515, 519, 520, 527, 530, 534, 553, 564], "yaml": [472, 476, 495, 500, 504, 565], "2": [472, 500, 503, 506, 512, 532, 539, 540, 566], "onli": [472, 557], "advanc": [472, 538, 564], "custom": [472, 494, 511, 545, 563], "secur": [473, 500], "polici": [473, 563], "report": 473, "vulner": 473, "instal": [474, 497, 508, 516, 518, 525, 526, 529, 534, 539, 540], "from": [474, 476, 508, 512, 534, 539, 540], "pypi": [474, 521, 534], "select": [474, 526], "public": [474, 552], "event": [474, 552], "addit": 474, "commun": 474, "work": [475, 539, 554], "flow": [475, 554], "background": [475, 532], "ad": 475, "new": [475, 477, 527, 530, 563], "backend": [475, 554], "capabl": [475, 557], "implement": [475, 476], "onnxrtadaptor": 475, "how": [476, 477, 497, 535, 536, 537, 539], "add": [476, 540], "an": [476, 545, 546, 547], "list": [476, 501, 544, 562], "need": 476, "design": [476, 496, 542, 563], "framework": [476, 494, 495, 502, 504, 514, 553, 555, 557, 560], "query_fw_cap": 476, "accord": [476, 477], "tune_cfg": 476, "prepar": [476, 497, 535, 536, 537, 559], "fp32": [476, 502], "graph": 476, "run": [476, 497, 533, 535, 536, 537, 538], "sampl": [476, 505], "iter": 476, "calcul": 476, "rang": 476, "type": [477, 551], "like": 477, "int4": 477, "few": 477, "line": 477, "chang": [477, 506, 531, 533, 558], "defin": [477, 500], "abil": 477, "specif": [477, 495], "invok": 477, "kernel": 477, "configur": [477, 500, 504, 538, 553, 559, 565], "us": [477, 494, 511, 539, 540, 560], "summari": [477, 535], "runtim": [479, 508, 554, 555, 566], "mix": [486, 512, 513, 556], "precis": [486, 512, 513, 556], "refer": [493, 551, 554, 557, 560], "build": [494, 503, 511, 538, 539, 540], "file": [495, 504, 565], "user": [495, 500, 506, 553, 557, 564, 565], "workflow": [496, 542], "diagnosi": [497, 534], "featur": [497, 500, 504, 507, 521, 522, 526, 553, 554, 561, 565], "modifi": 497, "script": [497, 538], "see": 497, "do": [497, 515], "paramet": [497, 541], "descript": [497, 541, 543], "suggest": 497, "fallback": 497, "set": [497, 518, 532], "knowledg": [498, 566], "intermedi": 498, "self": 498, "distribut": [500, 521, 563], "infer": 500, "evalu": 500, "pure": 500, "horovodrun": 500, "execut": 500, "releas": [501, 527, 530, 558], "appendix": 502, "frequent": 503, "ask": 503, "question": 503, "issu": [503, 558], "3": [503, 516, 532], "4": [503, 523, 532, 552], "quick": [505, 520], "valid": [505, 508, 560, 566], "incompat": [506, 558], "between": 506, "v1": 506, "face": [506, 546, 547], "built": [506, 508, 511], "infrastructur": 507, "prerequisit": [508, 539, 540], "binari": 508, "sourc": [508, 534, 536, 537, 539, 540], "ai": 508, "kit": 508, "system": 508, "requir": [508, 525, 529, 535, 536, 537, 545], "hardwar": [508, 513, 566], "environ": [508, 518], "cpu": [508, 518, 566], "64": 508, "compat": 508, "processor": 508, "gpu": 508, "": [508, 533, 539], "xe": 508, "multipl": [508, 549, 566], "vendor": 508, "through": [508, 560, 566], "softwar": [508, 513], "legal": 509, "inform": 509, "licens": 509, "citat": 509, "trademark": 509, "llm": 510, "recip": [510, 554], "ipex": [510, 554], "kei": 510, "migrat": 512, "x": 512, "orchestr": [512, 550], "fp16": 513, "dure": [513, 556], "accuraci": [513, 535, 537, 554, 563], "driven": 513, "coder": [515, 519, 521, 532, 564], "what": [515, 533, 539], "we": 515, "offer": 515, "jupyt": [515, 516, 527, 530], "lab": [515, 516], "extens": [515, 525, 526, 529, 532, 533, 542, 566], "launcher": [515, 520], "contact": [515, 539], "aw": 516, "amazon": 516, "sagemak": 516, "For": 516, "studio": 516, "notebook": 516, "instanc": 516, "guid": [516, 564], "bigdl": 517, "nano": 517, "platform": [518, 559], "best": [518, 526], "perform": [518, 559], "mkl": 518, "openmp": 518, "jemalloc": 518, "numa": 518, "control": 518, "variabl": 518, "frequenc": 518, "govern": 518, "enabl": [519, 526, 532], "bench": 519, "superbench": 519, "argument": 520, "v0": 523, "highlight": 523, "other": 523, "changelog": [524, 528], "neural_compressor_ext_lab": [525, 527], "uninstal": [525, 529], "develop": [525, 529], "jupyterlab": 526, "Or": 526, "let": 526, "u": 526, "help": 526, "you": 526, "pre": 526, "requisit": 526, "make": [527, 530, 533, 538], "manual": [527, 530], "npm": [527, 530, 538], "autom": [527, 530], "publish": [527, 530], "conda": [527, 530], "forg": [527, 530], "neural_compressor_ext_lab_alibaba": [529, 530], "log": [531, 540, 541], "unreleas": 531, "vscode": 532, "open": [532, 537], "icon": 532, "5": 532, "welcom": 533, "your": 533, "v": 533, "folder": 533, "setup": 533, "up": 533, "straight": 533, "awai": 533, "explor": 533, "test": [533, 538], "go": 533, "further": 533, "insight": [534, 535, 536, 537], "tensor": [534, 560], "dump": [534, 536], "research": 534, "collabor": 534, "debug": [535, 537], "analyz": [535, 537, 538], "weight": [535, 536, 537, 557], "histogram": 537, "react": 538, "app": 538, "avail": 538, "eject": 538, "learn": [538, 539], "more": [538, 539], "bundl": 538, "size": 538, "web": 538, "deploy": [538, 551], "fail": 538, "minifi": 538, "solut": [539, 540, 541, 545, 546, 547], "why": 539, "doe": 539, "method": [539, 540], "pip": [539, 540], "end": [539, 545, 546, 547], "servic": [540, 542, 545, 546, 547], "submit": [540, 541, 545, 546, 547], "task": [540, 541, 543, 545, 546, 547], "stop": [540, 545, 546, 547], "inspect": 540, "manag": [540, 545, 546], "resourc": [540, 545, 546], "node": 540, "state": 540, "cluster": [540, 541], "remov": 540, "url": 541, "endpoint": 541, "task_id": 541, "websocket": 541, "screen": 541, "ping": 541, "download": [541, 545, 546], "doc": 542, "wip": 542, "oaa": 542, "definit": 542, "diagram": 542, "hug": [546, 547], "grpc": 547, "client": 548, "singl": 549, "One": 550, "shot": 550, "network": 551, "sparsiti": 551, "decai": 551, "regular": 551, "larg": 551, "languag": 551, "retrain": 551, "free": 551, "spars": 551, "hyperparamet": 551, "full": 552, "78": 552, "2023": 552, "24": 552, "2022": 552, "35": 552, "2021": 552, "15": [552, 566], "2018": 552, "2020": 552, "style": 553, "access": 553, "fundament": [554, 560], "scheme": 554, "approach": 554, "With": 554, "without": 554, "specifi": 554, "rule": 554, "devic": 554, "wise": 555, "lwq": 555, "turn": 556, "off": 556, "woq": [557, 566], "known": 558, "benefit": 559, "comparison": 559, "differ": 559, "smooth": 560, "quant": 560, "per": 560, "channel": 560, "limit": 560, "smoothquant": 560, "enhanc": 560, "alpha": 560, "engin": 560, "fix": 560, "determin": 560, "entir": 560, "each": 560, "block": 560, "tensorboard": 561, "space": 563, "exit": 563, "process": 563, "zero": 564, "topic": 564, "innov": 564, "product": 564, "13": 566, "0": 566, "ptq": 566}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [184, "module-contents"], [185, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [247, "module-contents"], [248, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [418, "module-contents"], [426, "module-contents"], [428, "module-contents"], [430, "module-contents"], [431, "module-contents"], [433, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [442, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [159, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [181, "classes"], [182, "classes"], [184, "classes"], [188, "classes"], [189, "classes"], [191, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [216, "classes"], [217, "classes"], [219, "classes"], [220, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [262, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [270, "classes"], [271, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [304, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [314, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [331, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [357, "classes"], [360, "classes"], [361, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [374, "classes"], [376, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [388, "classes"], [390, "classes"], [391, "classes"], [393, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [418, "classes"], [428, "classes"], [433, "classes"], [437, "classes"], [442, "classes"], [448, "classes"], [450, "classes"], [454, "classes"], [455, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [463, "classes"], [465, "classes"], [466, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [151, "functions"], [153, "functions"], [154, "functions"], [155, "functions"], [160, "functions"], [161, "functions"], [162, "functions"], [165, "functions"], [166, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [172, "functions"], [175, "functions"], [176, "functions"], [179, "functions"], [182, "functions"], [184, "functions"], [185, "functions"], [188, "functions"], [189, "functions"], [191, "functions"], [192, "functions"], [193, "functions"], [195, "functions"], [197, "functions"], [198, "functions"], [202, "functions"], [205, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [215, "functions"], [217, "functions"], [226, "functions"], [227, "functions"], [235, "functions"], [237, "functions"], [241, "functions"], [244, "functions"], [245, "functions"], [246, "functions"], [249, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [256, "functions"], [258, "functions"], [259, "functions"], [261, "functions"], [270, "functions"], [278, "functions"], [280, "functions"], [284, "functions"], [287, "functions"], [288, "functions"], [289, "functions"], [291, "functions"], [292, "functions"], [293, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [301, "functions"], [302, "functions"], [304, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [308, "functions"], [315, "functions"], [322, "functions"], [326, "functions"], [331, "functions"], [332, "functions"], [333, "functions"], [335, "functions"], [340, "functions"], [346, "functions"], [350, "functions"], [352, "functions"], [354, "functions"], [355, "functions"], [357, "functions"], [358, "functions"], [359, "functions"], [360, "functions"], [361, "functions"], [362, "functions"], [366, "functions"], [370, "functions"], [372, "functions"], [389, "functions"], [394, "functions"], [395, "functions"], [399, "functions"], [407, "functions"], [411, "functions"], [413, "functions"], [414, "functions"], [426, "functions"], [428, "functions"], [430, "functions"], [431, "functions"], [433, "functions"], [435, "functions"], [436, "functions"], [442, "functions"], [449, "functions"], [453, "functions"], [454, "functions"], [457, "functions"], [458, "functions"], [460, "functions"], [461, "functions"], [462, "functions"], [464, "functions"], [465, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [156, "subpackages"], [190, "subpackages"], [192, "subpackages"], [221, "subpackages"], [246, "subpackages"], [264, "subpackages"], [289, "subpackages"], [300, "subpackages"], [324, "subpackages"], [342, "subpackages"], [353, "subpackages"], [403, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [156, "submodules"], [157, "submodules"], [172, "submodules"], [178, "submodules"], [183, "submodules"], [186, "submodules"], [190, "submodules"], [192, "submodules"], [194, "submodules"], [198, "submodules"], [205, "submodules"], [218, "submodules"], [222, "submodules"], [229, "submodules"], [241, "submodules"], [245, "submodules"], [249, "submodules"], [256, "submodules"], [265, "submodules"], [272, "submodules"], [284, "submodules"], [288, "submodules"], [291, "submodules"], [295, "submodules"], [300, "submodules"], [307, "submodules"], [313, "submodules"], [319, "submodules"], [325, "submodules"], [329, "submodules"], [342, "submodules"], [348, "submodules"], [353, "submodules"], [360, "submodules"], [364, "submodules"], [375, "submodules"], [377, "submodules"], [382, "submodules"], [385, "submodules"], [387, "submodules"], [392, "submodules"], [403, "submodules"], [409, "submodules"], [415, "submodules"], [447, "submodules"], [458, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [172, "package-contents"], [192, "package-contents"], [198, "package-contents"], [205, "package-contents"], [229, "package-contents"], [241, "package-contents"], [245, "package-contents"], [246, "package-contents"], [249, "package-contents"], [256, "package-contents"], [272, "package-contents"], [284, "package-contents"], [288, "package-contents"], [289, "package-contents"], [291, "package-contents"], [300, "package-contents"], [307, "package-contents"], [319, "package-contents"], [324, "package-contents"], [325, "package-contents"], [342, "package-contents"], [360, "package-contents"], [364, "package-contents"], [403, "package-contents"], [458, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[152, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[154, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[155, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[156, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[162, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[163, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[164, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[165, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[166, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[167, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[168, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[168, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[169, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[170, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[171, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[172, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[173, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[174, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[175, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[176, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tune": [[177, "module-neural_compressor.common.base_tune"]], "neural_compressor.common": [[178, "module-neural_compressor.common"]], "neural_compressor.common.logger": [[179, "module-neural_compressor.common.logger"]], "neural_compressor.common.utility": [[180, "module-neural_compressor.common.utility"]], "neural_compressor.compression.callbacks": [[181, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[182, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[183, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[184, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[185, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[186, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[187, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[188, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[189, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[190, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[191, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[192, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[193, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[194, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[195, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[196, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[197, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[198, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[199, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[200, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[201, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[202, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[203, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[204, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[205, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[206, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[207, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[208, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[209, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[210, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[211, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[212, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[213, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[214, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[215, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[216, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[217, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[218, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[219, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[220, "module-neural_compressor.config"]], "neural_compressor.contrib": [[221, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[222, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[223, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[224, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[225, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[226, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[227, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[228, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[229, "module-neural_compressor.data.dataloaders"]], "Attributes": [[229, "attributes"], [237, "attributes"], [246, "attributes"], [280, "attributes"], [289, "attributes"], [300, "attributes"], [324, "attributes"], [364, "attributes"], [414, "attributes"], [458, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[230, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[231, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[232, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[233, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[234, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[235, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[236, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[237, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[238, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[239, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[240, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[241, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[242, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[243, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[244, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[245, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[246, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[247, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[248, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[249, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[250, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[251, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[252, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[253, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[254, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[255, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[256, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[257, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[258, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[259, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[260, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[261, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[262, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[263, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[264, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[265, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[266, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[267, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[268, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[271, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[272, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[273, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[274, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[275, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[276, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[278, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[279, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[280, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[281, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[282, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[283, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[284, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[285, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[286, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[287, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[288, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[289, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[290, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[291, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[292, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[293, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[294, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[295, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[296, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[297, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[298, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[299, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[300, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[301, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[302, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[303, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[304, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[305, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[306, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[307, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[308, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[309, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[310, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[311, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[312, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[313, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[314, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[315, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[316, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[317, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[318, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[319, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[320, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[321, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[322, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[323, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[324, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[325, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[326, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[327, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[328, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[329, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[330, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[331, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[332, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[333, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[334, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[335, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[336, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[337, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[338, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[339, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[340, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[341, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[342, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[343, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[344, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[345, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[346, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[347, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[348, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[349, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[350, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[351, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[352, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[353, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[354, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[355, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[356, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[357, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[358, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[359, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[360, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[361, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[362, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[363, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[364, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[365, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[366, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[367, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[368, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[369, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[370, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[371, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[372, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[373, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[374, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[375, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[376, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[377, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[378, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[379, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[380, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[381, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[382, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[383, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[384, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[385, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[386, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[387, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[389, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[390, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[391, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[392, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[394, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[395, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[396, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[397, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[398, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[399, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[400, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[401, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[402, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[403, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[404, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[405, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[406, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[407, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[408, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[409, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[410, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[411, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[412, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[413, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[414, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[415, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[416, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[417, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[418, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[419, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[426, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "neural_compressor.tensorflow": [[427, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.config": [[428, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[429, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[430, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.utils": [[431, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.torch.algorithms": [[432, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[433, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only": [[434, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[435, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only_algos": [[436, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "neural_compressor.torch.amp.autocast": [[437, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[438, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[439, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[440, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[441, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.config": [[442, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.fp8": [[443, "module-neural_compressor.torch.quantization.fp8"]], "neural_compressor.torch.quantization.fp8.modules": [[444, "module-neural_compressor.torch.quantization.fp8.modules"]], "neural_compressor.torch.quantization.fp8.observer": [[445, "module-neural_compressor.torch.quantization.fp8.observer"]], "neural_compressor.torch.quantization.fp8.quantization_impl": [[446, "module-neural_compressor.torch.quantization.fp8.quantization_impl"]], "neural_compressor.torch.quantization": [[447, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.layers": [[448, "module-neural_compressor.torch.quantization.layers"]], "neural_compressor.torch.quantization.quantize": [[449, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.tune": [[450, "module-neural_compressor.torch.tune"]], "neural_compressor.torch.utils.constants": [[451, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils": [[452, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[453, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[454, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[455, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[456, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[457, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[458, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[459, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[460, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[461, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[462, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[463, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[464, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[465, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[466, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[467, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[468, "intel-neural-compressor-documentation"], [567, "intel-neural-compressor-documentation"]], "Sections": [[468, "sections"], [567, "sections"]], "Contributor Covenant Code of Conduct": [[469, "contributor-covenant-code-of-conduct"], [470, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[469, "our-pledge"]], "Our Standards": [[469, "our-standards"]], "Our Responsibilities": [[469, "our-responsibilities"]], "Scope": [[469, "scope"]], "Enforcement": [[469, "enforcement"]], "Attribution": [[469, "attribution"]], "Contribution Guidelines": [[470, "contribution-guidelines"]], "Create Pull Request": [[470, "create-pull-request"]], "Step-by-Step guidelines": [[470, "step-by-step-guidelines"]], "Pull Request Checklist": [[470, "pull-request-checklist"]], "Pull Request Template": [[470, "pull-request-template"]], "Pull Request Acceptance Criteria": [[470, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[470, "pull-request-status-checks-overview"]], "Support": [[470, "support"]], "FX": [[471, "fx"]], "Introduction": [[471, "introduction"], [472, "introduction"], [475, "introduction"], [476, "introduction"], [477, "introduction"], [492, "introduction"], [493, "introduction"], [494, "introduction"], [495, "introduction"], [498, "introduction"], [499, "introduction"], [500, "introduction"], [502, "introduction"], [504, "introduction"], [507, "introduction"], [511, "introduction"], [513, "introduction"], [514, "introduction"], [535, "introduction"], [536, "introduction"], [537, "introduction"], [549, "introduction"], [550, "introduction"], [551, "introduction"], [553, "introduction"], [555, "introduction"], [557, "introduction"], [559, "introduction"], [560, "introduction"], [561, "introduction"], [562, "introduction"], [563, "introduction"], [565, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[471, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[471, "get-started"], [497, "get-started"], [539, "get-started"], [554, "get-started"]], "Post Training Static Quantization": [[471, "post-training-static-quantization"], [554, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[471, "post-training-dynamic-quantization"], [554, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[471, "quantization-aware-training"]], "Examples": [[471, "examples"], [472, "examples"], [492, "examples"], [494, "examples"], [495, "examples"], [498, "examples"], [499, "examples"], [500, "examples"], [501, "examples"], [502, "examples"], [512, "examples"], [513, "examples"], [514, "examples"], [550, "examples"], [551, "examples"], [554, "examples"], [555, "examples"], [557, "examples"], [561, "examples"]], "Note": [[471, "note"]], "Details": [[471, "details"]], "Common Problem": [[471, "common-problem"]], "Dynamic Quantization": [[471, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[471, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[472, "neural-architecture-search"]], "Basic NAS": [[472, "basic-nas"]], "Dynamic NAS": [[472, "dynamic-nas"]], "NAS Support Matrix": [[472, "nas-support-matrix"]], "Get Started with NAS API": [[472, "get-started-with-nas-api"]], "Basic Usage": [[472, "basic-usage"]], "1. Python code + YAML": [[472, "python-code-yaml"]], "2. Python code only": [[472, "python-code-only"]], "Advanced Usage (Custom NAS)": [[472, "advanced-usage-custom-nas"]], "Security Policy": [[473, "security-policy"]], "Report a Vulnerability": [[473, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[474, "intel-neural-compressor"], [532, "intel-neural-compressor"]], "Installation": [[474, "installation"], [508, "installation"], [508, "id1"], [526, "installation"], [534, "installation"], [539, "installation"]], "Install from pypi": [[474, "install-from-pypi"], [534, "install-from-pypi"]], "Getting Started": [[474, "getting-started"], [505, "getting-started"], [534, "getting-started"]], "Quantization with Python API": [[474, "quantization-with-python-api"], [505, "quantization-with-python-api"], [534, "quantization-with-python-api"]], "Documentation": [[474, "documentation"]], "Selected Publications/Events": [[474, "selected-publications-events"]], "Additional Content": [[474, "additional-content"]], "Communication": [[474, "communication"]], "Adaptor": [[475, "adaptor"], [478, "adaptor"]], "Adaptor Support Matrix": [[475, "adaptor-support-matrix"]], "Working Flow": [[475, "working-flow"], [554, "working-flow"]], "Get Started with Adaptor API": [[475, "get-started-with-adaptor-api"]], "Query API": [[475, "query-api"]], "Background": [[475, "background"]], "Query API Introduction": [[475, "query-api-introduction"]], "Example of Adding a New Backend Support": [[475, "example-of-adding-a-new-backend-support"]], "Capability": [[475, "capability"]], "Implement ONNXRTAdaptor Class": [[475, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[476, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[476, "api-list-that-need-to-implement"]], "Design the framework YAML": [[476, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[476, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[476, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[476, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[476, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[476, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[477, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[477, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[477, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[477, "use-the-new-data-type"]], "Summary": [[477, "summary"]], "ONNX Runtime": [[479, "onnx-runtime"]], "Torch Utils": [[480, "torch-utils"]], "API Document Example": [[481, "api-document-example"]], "APIs": [[482, "apis"]], "Benchmark": [[483, "benchmark"], [512, "benchmark"], [553, "benchmark"]], "Compression": [[484, "compression"]], "Config": [[485, "config"]], "Mix Precision": [[486, "mix-precision"], [512, "mix-precision"]], "Model": [[487, "model"], [514, "model"], [535, "model"], [537, "model"]], "Objective": [[488, "objective"], [545, "objective"], [546, "objective"], [547, "objective"], [549, "objective"]], "Quantization": [[489, "quantization"], [553, "quantization"], [554, "quantization"]], "Strategy": [[490, "strategy"]], "Training": [[491, "training"]], "Benchmarking": [[492, "benchmarking"]], "Benchmark Support Matrix": [[492, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[492, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[493, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[493, "calibration-algorithms"]], "Support Matrix": [[493, "support-matrix"], [517, "support-matrix"]], "Reference": [[493, "reference"], [551, "reference"], [554, "reference"], [557, "reference"], [560, "reference"]], "DataLoader": [[494, "dataloader"]], "Supported Framework Dataloader Matrix": [[494, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[494, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[494, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[494, "build-custom-dataloader-with-python-api"]], "Dataset": [[495, "dataset"]], "Supported Framework Dataset Matrix": [[495, "supported-framework-dataset-matrix"]], "TensorFlow": [[495, "tensorflow"], [511, "tensorflow"], [562, "tensorflow"]], "PyTorch": [[495, "pytorch"], [511, "pytorch"], [556, "pytorch"]], "MXNet": [[495, "mxnet"], [511, "mxnet"], [562, "mxnet"]], "ONNXRT": [[495, "onnxrt"], [511, "onnxrt"], [562, "onnxrt"]], "Get start with Dataset API": [[495, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[495, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[495, "user-specific-dataset"]], "Design": [[496, "design"], [563, "design"], [563, "id1"], [563, "id3"], [563, "id5"], [563, "id7"], [563, "id9"], [563, "id11"], [563, "id13"], [563, "id15"], [563, "id17"], [563, "id19"], [563, "id21"]], "Architecture": [[496, "architecture"], [507, "architecture"]], "Workflow": [[496, "workflow"]], "Diagnosis": [[497, "diagnosis"]], "Diagnosis Introduction": [[497, "diagnosis-introduction"]], "Supported Feature Matrix": [[497, "supported-feature-matrix"], [500, "supported-feature-matrix"], [504, "supported-feature-matrix"], [507, "supported-feature-matrix"], [553, "supported-feature-matrix"], [554, "supported-feature-matrix"], [561, "supported-feature-matrix"], [565, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[497, "install-intel-neural-compressor"]], "Modify script": [[497, "modify-script"]], "Quantization diagnosis": [[497, "quantization-diagnosis"]], "Benchmark diagnosis": [[497, "benchmark-diagnosis"]], "Example": [[497, "example"], [511, "example"], [517, "example"], [521, "example"], [549, "example"]], "Prepare dataset": [[497, "prepare-dataset"]], "Run quantization script": [[497, "run-quantization-script"]], "Run benchmark script": [[497, "run-benchmark-script"]], "See quantization data": [[497, "see-quantization-data"]], "How to do diagnosis": [[497, "how-to-do-diagnosis"]], "Parameter description": [[497, "parameter-description"]], "Diagnosis suggestions": [[497, "diagnosis-suggestions"]], "Fallback setting example": [[497, "fallback-setting-example"]], "See profiling data": [[497, "see-profiling-data"]], "Distillation": [[498, "distillation"], [512, "distillation"], [553, "distillation"]], "Knowledge Distillation": [[498, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[498, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[498, "self-distillation"]], "Distillation Support Matrix": [[498, "distillation-support-matrix"]], "Get Started with Distillation API": [[498, "get-started-with-distillation-api"]], "Distillation for Quantization": [[499, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[499, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[499, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[500, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[500, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[500, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[500, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[500, "horovodrun-execution"]], "Security": [[500, "security"]], "PyTorch Examples:": [[500, "pytorch-examples"]], "TensorFlow Examples:": [[500, "tensorflow-examples"]], "Example List": [[501, "example-list"]], "Release Data": [[501, "release-data"]], "Export": [[502, "export"]], "Supported Framework Model Matrix": [[502, "supported-framework-model-matrix"], [514, "supported-framework-model-matrix"], [555, "supported-framework-model-matrix"], [557, "supported-framework-model-matrix"]], "PyTorch Model": [[502, "pytorch-model"]], "FP32 Model Export": [[502, "fp32-model-export"], [502, "id1"]], "INT8 Model Export": [[502, "int8-model-export"], [502, "id2"]], "Tensorflow Model": [[502, "tensorflow-model"]], "Appendix": [[502, "appendix"]], "Supported quantized ops": [[502, "supported-quantized-ops"]], "Frequently Asked Questions": [[503, "frequently-asked-questions"]], "Common Build Issues": [[503, "common-build-issues"]], "Issue 1:": [[503, "issue-1"]], "Issue 2:": [[503, "issue-2"]], "Issue 3:": [[503, "issue-3"]], "Issue 4:": [[503, "issue-4"]], "Framework YAML Configuration Files": [[504, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[504, "get-started-with-framework-yaml-files"]], "Quick Samples": [[505, "quick-samples"]], "Validated Models": [[505, "validated-models"], [560, "validated-models"], [566, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[506, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[506, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[506, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[507, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[508, "prerequisites"], [539, "prerequisites"], [540, "prerequisites"]], "Install from Binary": [[508, "install-from-binary"]], "Install from Source": [[508, "install-from-source"], [534, "install-from-source"]], "Install from AI Kit": [[508, "install-from-ai-kit"]], "System Requirements": [[508, "system-requirements"]], "Validated Hardware Environment": [[508, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[508, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[508, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[508, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[508, "validated-software-environment"]], "Legal Information": [[509, "legal-information"]], "License": [[509, "license"]], "Citation": [[509, "citation"]], "Trademarks": [[509, "trademarks"]], "LLMs Quantization Recipes": [[510, "llms-quantization-recipes"]], "IPEX key models": [[510, "ipex-key-models"]], "Metrics": [[511, "metrics"]], "Supported Built-in Metric Matrix": [[511, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[511, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[511, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[511, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[512, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[512, "model-quantization"]], "Post-training Quantization": [[512, "post-training-quantization"]], "Quantization Aware Training": [[512, "quantization-aware-training"], [554, "quantization-aware-training"], [554, "id1"]], "Pruning": [[512, "pruning"], [551, "pruning"], [553, "pruning"]], "Orchestration": [[512, "orchestration"]], "Mixed Precision": [[513, "mixed-precision"]], "Mixed Precision Support Matrix": [[513, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[513, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[513, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[513, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[513, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[513, "get-started-with-mixed-precision-api"]], "Neural Coder": [[515, "neural-coder"], [532, "neural-coder"], [532, "id1"]], "What do we offer?": [[515, "what-do-we-offer"]], "Getting Started!": [[515, "getting-started"], [526, "getting-started"]], "Jupyter Lab Extension": [[515, "jupyter-lab-extension"]], "Python Launcher": [[515, "python-launcher"], [520, "python-launcher"]], "Python API": [[515, "python-api"]], "Contact": [[515, "contact"], [539, "contact"]], "AWS Amazon SageMaker Support": [[516, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[516, "start-jupyter-lab-3"]], "For SageMaker Studio": [[516, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[516, "for-sagemaker-notebook-instance"]], "Installation Guide": [[516, "installation-guide"]], "BigDL Nano Support": [[517, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[518, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[518, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[518, "install-numa-controller"]], "Environment Variables": [[518, "environment-variables"]], "Frequency Governers": [[518, "frequency-governers"]], "Neural Coder as Python API": [[519, "neural-coder-as-python-api"]], "Enable": [[519, "enable"]], "Bench": [[519, "bench"]], "SuperBench": [[519, "superbench"]], "Quick-Start": [[520, "quick-start"]], "Launcher Arguments (Optional)": [[520, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[521, "neural-coder-for-quantization"]], "Features Supported": [[521, "features-supported"]], "Models Supported": [[521, "models-supported"]], "Usage": [[521, "usage"], [541, "usage"], [541, "id2"], [541, "id6"], [541, "id9"], [541, "id16"], [541, "id19"], [541, "id22"], [541, "id25"], [560, "usage"], [561, "usage"], [561, "id1"], [563, "usage"], [563, "id2"], [563, "id4"], [563, "id6"], [563, "id8"], [563, "id10"], [563, "id12"], [563, "id14"], [563, "id16"], [563, "id18"], [563, "id20"], [563, "id22"]], "PyPI distribution:": [[521, "pypi-distribution"]], "Supported Optimization Features": [[522, "supported-optimization-features"]], "v0.4": [[523, "v0-4"]], "Highlights": [[523, "highlights"]], "Others": [[523, "others"]], "Changelog": [[524, "changelog"], [528, "changelog"]], "neural_compressor_ext_lab": [[525, "neural-compressor-ext-lab"]], "Requirements": [[525, "requirements"], [529, "requirements"], [535, "requirements"], [536, "requirements"], [537, "requirements"], [545, "requirements"]], "Install": [[525, "install"], [529, "install"]], "Uninstall": [[525, "uninstall"], [529, "uninstall"]], "Contributing": [[525, "contributing"], [529, "contributing"]], "Development install": [[525, "development-install"], [529, "development-install"]], "Development uninstall": [[525, "development-uninstall"], [529, "development-uninstall"]], "Packaging the extension": [[525, "packaging-the-extension"], [529, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[526, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[526, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[526, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[526, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[527, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[527, "manual-release"], [530, "manual-release"]], "Python package": [[527, "python-package"], [530, "python-package"]], "NPM package": [[527, "npm-package"], [530, "npm-package"]], "Automated releases with the Jupyter Releaser": [[527, "automated-releases-with-the-jupyter-releaser"], [530, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[527, "publishing-to-conda-forge"], [530, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[529, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[530, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[531, "change-log"]], "[Unreleased]": [[531, "unreleased"]], "Background Introduction": [[532, "background-introduction"]], "Neural Coder Extension in VSCode": [[532, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[532, "neural-coder-extension-usage"]], "1. Open": [[532, "open"]], "2. Search": [[532, "search"]], "3. Setting": [[532, "setting"]], "4. Icon": [[532, "icon"]], "5. optimization (quantization)": [[532, "optimization-quantization"]], "5.1 Enable": [[532, "enable"]], "5.2 Auto": [[532, "auto"]], "Welcome to your VS Code Extension": [[533, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[533, "what-s-in-the-folder"]], "Setup": [[533, "setup"]], "Get up and running straight away": [[533, "get-up-and-running-straight-away"]], "Make changes": [[533, "make-changes"]], "Explore the API": [[533, "explore-the-api"]], "Run tests": [[533, "run-tests"]], "Go further": [[533, "go-further"]], "Neural Insights": [[534, "neural-insights"]], "Start the Neural Insights": [[534, "start-the-neural-insights"]], "Tensor dump examples": [[534, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[534, "step-by-step-diagnosis-example"]], "Research Collaborations": [[534, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[535, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [537, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[535, "preparation"], [536, "preparation"], [537, "preparation"], [559, "preparation"]], "Running the quantization": [[535, "running-the-quantization"], [536, "running-the-quantization"], [537, "running-the-quantization"]], "Analyzing the result of quantization": [[535, "analyzing-the-result-of-quantization"], [537, "analyzing-the-result-of-quantization"]], "Weights summary": [[535, "weights-summary"]], "Activations summary": [[535, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[536, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[536, "source"], [537, "source"]], "Prepare the dataset": [[537, "prepare-the-dataset"]], "Analyzing weight histograms": [[537, "analyzing-weight-histograms"]], "Open Neural Insights": [[537, "open-neural-insights"]], "Getting Started with Create React App": [[538, "getting-started-with-create-react-app"]], "Available Scripts": [[538, "available-scripts"]], "npm start": [[538, "npm-start"]], "npm test": [[538, "npm-test"]], "npm run build": [[538, "npm-run-build"]], "npm run eject": [[538, "npm-run-eject"]], "Learn More": [[538, "learn-more"], [539, "learn-more"]], "Code Splitting": [[538, "code-splitting"]], "Analyzing the Bundle Size": [[538, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[538, "making-a-progressive-web-app"]], "Advanced Configuration": [[538, "advanced-configuration"]], "Deployment": [[538, "deployment"]], "npm run build fails to minify": [[538, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[539, "what-s-neural-solution"]], "Why Neural Solution?": [[539, "why-neural-solution"]], "How does Neural Solution Work?": [[539, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[539, "method-1-using-pip"]], "Method 2. Building from source:": [[539, "method-2-building-from-source"]], "End-to-end examples": [[539, "end-to-end-examples"]], "Get started": [[540, "get-started"]], "Install Neural Solution": [[540, "install-neural-solution"]], "Method 1. Using pip": [[540, "method-1-using-pip"]], "Method 2. Building from source": [[540, "method-2-building-from-source"]], "Start service": [[540, "start-service"]], "Submit task": [[540, "submit-task"]], "Query task status": [[540, "query-task-status"]], "Stop service": [[540, "stop-service"]], "Inspect logs": [[540, "inspect-logs"]], "Manage resource": [[540, "manage-resource"], [545, "manage-resource"], [546, "manage-resource"]], "Node States": [[540, "node-states"]], "Query cluster": [[540, "query-cluster"]], "Add node": [[540, "add-node"]], "Remove node": [[540, "remove-node"]], "Neural Solution API": [[541, "neural-solution-api"]], "Base URL": [[541, "base-url"]], "Endpoints": [[541, "endpoints"]], "GET /": [[541, "get"]], "Description": [[541, "description"], [541, "id1"], [541, "id4"], [541, "id8"], [541, "id12"], [541, "id15"], [541, "id18"], [541, "id21"], [541, "id24"]], "Responses": [[541, "responses"], [541, "id3"], [541, "id7"], [541, "id11"], [541, "id14"], [541, "id17"], [541, "id20"], [541, "id23"], [541, "id26"]], "POST /task/submit": [[541, "post-task-submit"]], "Parameters": [[541, "parameters"], [541, "id5"], [541, "id10"], [541, "id13"]], "GET /task/status/{task_id}": [[541, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[541, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[541, "websocket-task-screen-task-id"]], "GET /ping": [[541, "get-ping"]], "GET /cluster": [[541, "get-cluster"]], "GET /download/{task_id}": [[541, "get-download-task-id"]], "GET /description": [[541, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[542, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[542, "contents"]], "Overview": [[542, "overview"], [564, "overview"]], "Workflow of OaaS": [[542, "workflow-of-oaas"]], "Class definition diagram": [[542, "class-definition-diagram"]], "Extensibility": [[542, "extensibility"]], "Task request description": [[543, "task-request-description"]], "Examples List": [[544, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[545, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[545, "start-the-neural-solution-service"], [546, "start-the-neural-solution-service"], [547, "start-the-neural-solution-service"]], "Submit optimization task": [[545, "submit-optimization-task"], [546, "submit-optimization-task"], [547, "submit-optimization-task"]], "Query optimization result": [[545, "query-optimization-result"], [546, "query-optimization-result"], [547, "query-optimization-result"]], "Download optimized model": [[545, "download-optimized-model"], [546, "download-optimized-model"]], "Stop the service": [[545, "stop-the-service"], [546, "stop-the-service"], [547, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[546, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[547, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[548, "client"]], "Single Objective": [[549, "single-objective"]], "Multiple Objectives": [[549, "multiple-objectives"]], "Objective Support Matrix": [[549, "objective-support-matrix"]], "Get Started with Objective API": [[549, "get-started-with-objective-api"]], "Config Single Objective": [[549, "config-single-objective"]], "Config Multiple Objectives": [[549, "config-multiple-objectives"]], "Optimization Orchestration": [[550, "optimization-orchestration"]], "One-shot": [[550, "one-shot"]], "Orchestration Support Matrix": [[550, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[550, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[551, "neural-network-pruning"]], "Pruning Patterns": [[551, "pruning-patterns"]], "Pruning Criteria": [[551, "pruning-criteria"]], "Pruning Types": [[551, "pruning-types"]], "Pruning Schedules": [[551, "pruning-schedules"]], "Pruning Scope": [[551, "pruning-scope"]], "Sparsity Decay Types": [[551, "sparsity-decay-types"]], "Regularization": [[551, "regularization"]], "Large Language Model Pruning": [[551, "large-language-model-pruning"]], "Pruning Support Matrix": [[551, "pruning-support-matrix"]], "Get Started with Pruning API": [[551, "get-started-with-pruning-api"]], "Training-aware pruning API": [[551, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[551, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[551, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[551, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[552, "full-publications-events-78"]], "2023 (24)": [[552, "id1"]], "2022 (35)": [[552, "id2"]], "2021 (15)": [[552, "id3"]], "2018 - 2020 (4)": [[552, "id4"]], "Pythonic Style Access for Configurations": [[553, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[553, "pythonic-api-for-user-configurations"], [553, "id1"]], "Pythonic API for Framework Configurations": [[553, "pythonic-api-for-framework-configurations"], [553, "id2"]], "Get Started with Pythonic API for Configurations": [[553, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[553, "nas"]], "Quantization Introduction": [[554, "quantization-introduction"]], "Quantization Fundamentals": [[554, "quantization-fundamentals"], [560, "quantization-fundamentals"]], "Quantization Support Matrix": [[554, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[554, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[554, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[554, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[554, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[554, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[554, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[554, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[554, "post-training-quantization"]], "Specify Quantization Rules": [[554, "specify-quantization-rules"]], "Specify Quantization Recipes": [[554, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[554, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[555, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[555, "pytorch-framework-example"]], "ONNX Runtime framework example": [[555, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[556, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[556, "tensorflow"]], "Weight Only Quantization (WOQ)": [[557, "weight-only-quantization-woq"]], "Quantization Capability": [[557, "quantization-capability"]], "Export Compressed Model": [[557, "export-compressed-model"]], "User Code Example": [[557, "user-code-example"]], "WOQ Algorithms Tuning": [[557, "woq-algorithms-tuning"]], "User code example": [[557, "id1"]], "Release": [[558, "release"]], "Release Notes": [[558, "release-notes"]], "Known Issues": [[558, "known-issues"]], "Incompatible Changes": [[558, "incompatible-changes"]], "SigOpt Strategy": [[559, "sigopt-strategy"]], "SigOpt Platform": [[559, "sigopt-platform"]], "Neural Compressor Configuration": [[559, "neural-compressor-configuration"]], "Performance": [[559, "performance"]], "Benefit of SigOpt Strategy": [[559, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[559, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[560, "smooth-quant"]], "Per-tensor & Per-channel": [[560, "per-tensor-per-channel"]], "Per-tensor example": [[560, "per-tensor-example"]], "Per-channel example": [[560, "per-channel-example"]], "Matmul quantization example": [[560, "matmul-quantization-example"]], "Per-channel limitation": [[560, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[560, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[560, "smoothquant"]], "Our enhancement:": [[560, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[560, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[560, "engineering"]], "Using a fixed alpha": [[560, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[560, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[560, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[560, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[560, "supported-framework-matrix"]], "TensorBoard": [[561, "tensorboard"]], "Get Started with TensorBoard": [[561, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[561, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[561, "tensorflow-tensorboard"]], "PyTorch Examples": [[561, "pytorch-examples"]], "TensorFlow Examples": [[561, "tensorflow-examples"]], "Transform": [[562, "transform"]], "Transform Support List": [[562, "transform-support-list"]], "Pytorch": [[562, "pytorch"]], "Tuning Strategies": [[563, "tuning-strategies"]], "Strategy Design": [[563, "strategy-design"]], "Tuning Space": [[563, "tuning-space"]], "Exit Policy": [[563, "exit-policy"]], "Accuracy Criteria": [[563, "accuracy-criteria"]], "Tuning Process": [[563, "tuning-process"]], "Tuning Algorithms": [[563, "tuning-algorithms"]], "Auto": [[563, "auto"]], "Conservative Tuning": [[563, "conservative-tuning"]], "Basic": [[563, "basic"]], "MSE": [[563, "mse"]], "MSE_V2": [[563, "mse-v2"]], "HAWQ_V2": [[563, "hawq-v2"]], "Bayesian": [[563, "bayesian"]], "Exhaustive": [[563, "exhaustive"]], "Random": [[563, "random"]], "SigOpt": [[563, "sigopt"]], "TPE": [[563, "tpe"]], "Distributed Tuning": [[563, "distributed-tuning"]], "Customize a New Tuning Strategy": [[563, "customize-a-new-tuning-strategy"]], "User Guide": [[564, "user-guide"]], "Python-based APIs": [[564, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[564, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[564, "advanced-topics"]], "Innovations for Productivity": [[564, "innovations-for-productivity"]], "User YAML Configuration Files": [[565, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[565, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[566, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[566, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[566, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[566, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[566, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[566, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[566, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[566, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[566, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[566, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[566, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround"], [151, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [152, "module-neural_compressor.adaptor.torch_utils.awq"], [153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [154, "module-neural_compressor.adaptor.torch_utils.gptq"], [155, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [156, "module-neural_compressor.adaptor.torch_utils"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [162, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [163, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [164, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [165, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [166, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [167, "module-neural_compressor.adaptor.torch_utils.teq"], [168, "module-neural_compressor.adaptor.torch_utils.util"], [169, "module-neural_compressor.adaptor.torch_utils.weight_only"], [170, "module-neural_compressor.algorithm.algorithm"], [171, "module-neural_compressor.algorithm.fast_bias_correction"], [172, "module-neural_compressor.algorithm"], [173, "module-neural_compressor.algorithm.smooth_quant"], [174, "module-neural_compressor.algorithm.weight_correction"], [175, "module-neural_compressor.benchmark"], [176, "module-neural_compressor.common.base_config"], [177, "module-neural_compressor.common.base_tune"], [178, "module-neural_compressor.common"], [179, "module-neural_compressor.common.logger"], [180, "module-neural_compressor.common.utility"], [181, "module-neural_compressor.compression.callbacks"], [182, "module-neural_compressor.compression.distillation.criterions"], [183, "module-neural_compressor.compression.distillation"], [184, "module-neural_compressor.compression.distillation.optimizers"], [185, "module-neural_compressor.compression.distillation.utility"], [186, "module-neural_compressor.compression.hpo"], [187, "module-neural_compressor.compression.hpo.sa_optimizer"], [188, "module-neural_compressor.compression.hpo.search_algorithms"], [189, "module-neural_compressor.compression.hpo.search_space"], [190, "module-neural_compressor.compression"], [191, "module-neural_compressor.compression.pruner.criteria"], [192, "module-neural_compressor.compression.pruner"], [193, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [194, "module-neural_compressor.compression.pruner.model_slim"], [195, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [196, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [197, "module-neural_compressor.compression.pruner.patterns.base"], [198, "module-neural_compressor.compression.pruner.patterns"], [199, "module-neural_compressor.compression.pruner.patterns.mha"], [200, "module-neural_compressor.compression.pruner.patterns.ninm"], [201, "module-neural_compressor.compression.pruner.patterns.nxm"], [202, "module-neural_compressor.compression.pruner.pruners.base"], [203, "module-neural_compressor.compression.pruner.pruners.basic"], [204, "module-neural_compressor.compression.pruner.pruners.block_mask"], [205, "module-neural_compressor.compression.pruner.pruners"], [206, "module-neural_compressor.compression.pruner.pruners.mha"], [207, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [208, "module-neural_compressor.compression.pruner.pruners.progressive"], [209, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [210, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [211, "module-neural_compressor.compression.pruner.pruning"], [212, "module-neural_compressor.compression.pruner.regs"], [213, "module-neural_compressor.compression.pruner.schedulers"], [214, "module-neural_compressor.compression.pruner.tf_criteria"], [215, "module-neural_compressor.compression.pruner.utils"], [216, "module-neural_compressor.conf.config"], [217, "module-neural_compressor.conf.dotdict"], [218, "module-neural_compressor.conf"], [219, "module-neural_compressor.conf.pythonic_config"], [220, "module-neural_compressor.config"], [221, "module-neural_compressor.contrib"], [222, "module-neural_compressor.contrib.strategy"], [223, "module-neural_compressor.contrib.strategy.sigopt"], [224, "module-neural_compressor.contrib.strategy.tpe"], [225, "module-neural_compressor.data.dataloaders.base_dataloader"], [226, "module-neural_compressor.data.dataloaders.dataloader"], [227, "module-neural_compressor.data.dataloaders.default_dataloader"], [228, "module-neural_compressor.data.dataloaders.fetcher"], [229, "module-neural_compressor.data.dataloaders"], [230, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [231, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [232, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [233, "module-neural_compressor.data.dataloaders.sampler"], [234, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [235, "module-neural_compressor.data.datasets.bert_dataset"], [236, "module-neural_compressor.data.datasets.coco_dataset"], [237, "module-neural_compressor.data.datasets.dataset"], [238, "module-neural_compressor.data.datasets.dummy_dataset"], [239, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [240, "module-neural_compressor.data.datasets.imagenet_dataset"], [241, "module-neural_compressor.data.datasets"], [242, "module-neural_compressor.data.datasets.style_transfer_dataset"], [243, "module-neural_compressor.data.filters.coco_filter"], [244, "module-neural_compressor.data.filters.filter"], [245, "module-neural_compressor.data.filters"], [246, "module-neural_compressor.data"], [247, "module-neural_compressor.data.transforms.coco_transform"], [248, "module-neural_compressor.data.transforms.imagenet_transform"], [249, "module-neural_compressor.data.transforms"], [250, "module-neural_compressor.data.transforms.postprocess"], [251, "module-neural_compressor.data.transforms.tokenization"], [252, "module-neural_compressor.data.transforms.transform"], [253, "module-neural_compressor.experimental.benchmark"], [254, "module-neural_compressor.experimental.common.criterion"], [255, "module-neural_compressor.experimental.common.dataloader"], [256, "module-neural_compressor.experimental.common"], [257, "module-neural_compressor.experimental.common.metric"], [258, "module-neural_compressor.experimental.common.model"], [259, "module-neural_compressor.experimental.common.optimizer"], [260, "module-neural_compressor.experimental.common.postprocess"], [261, "module-neural_compressor.experimental.common.torch_utils"], [262, "module-neural_compressor.experimental.component"], [263, "module-neural_compressor.experimental.compression"], [264, "module-neural_compressor.experimental.contrib"], [265, "module-neural_compressor.experimental.contrib.strategy"], [266, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [267, "module-neural_compressor.experimental.contrib.strategy.tpe"], [268, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [269, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [270, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [271, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [272, "module-neural_compressor.experimental.data.dataloaders"], [273, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [274, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [275, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [276, "module-neural_compressor.experimental.data.dataloaders.sampler"], [277, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [278, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [279, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [280, "module-neural_compressor.experimental.data.datasets.dataset"], [281, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [282, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [283, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [284, "module-neural_compressor.experimental.data.datasets"], [285, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [286, "module-neural_compressor.experimental.data.filters.coco_filter"], [287, "module-neural_compressor.experimental.data.filters.filter"], [288, "module-neural_compressor.experimental.data.filters"], [289, "module-neural_compressor.experimental.data"], [290, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [291, "module-neural_compressor.experimental.data.transforms"], [292, "module-neural_compressor.experimental.data.transforms.tokenization"], [293, "module-neural_compressor.experimental.data.transforms.transform"], [294, "module-neural_compressor.experimental.distillation"], [295, "module-neural_compressor.experimental.export"], [296, "module-neural_compressor.experimental.export.qlinear2qdq"], [297, "module-neural_compressor.experimental.export.tf2onnx"], [298, "module-neural_compressor.experimental.export.torch2onnx"], [299, "module-neural_compressor.experimental.graph_optimization"], [300, "module-neural_compressor.experimental"], [301, "module-neural_compressor.experimental.metric.bleu"], [302, "module-neural_compressor.experimental.metric.bleu_util"], [303, "module-neural_compressor.experimental.metric.coco_label_map"], [304, "module-neural_compressor.experimental.metric.coco_tools"], [305, "module-neural_compressor.experimental.metric.evaluate_squad"], [306, "module-neural_compressor.experimental.metric.f1"], [307, "module-neural_compressor.experimental.metric"], [308, "module-neural_compressor.experimental.metric.metric"], [309, "module-neural_compressor.experimental.mixed_precision"], [310, "module-neural_compressor.experimental.model_conversion"], [311, "module-neural_compressor.experimental.nas.basic_nas"], [312, "module-neural_compressor.experimental.nas.dynas"], [313, "module-neural_compressor.experimental.nas"], [314, "module-neural_compressor.experimental.nas.nas"], [315, "module-neural_compressor.experimental.nas.nas_utils"], [316, "module-neural_compressor.experimental.nas.search_algorithms"], [317, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [318, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [319, "module-neural_compressor.experimental.pruner_legacy"], [320, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [321, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [322, "module-neural_compressor.experimental.pruner_legacy.pruner"], [323, "module-neural_compressor.experimental.pruning"], [324, "module-neural_compressor.experimental.pruning_recipes"], [325, "module-neural_compressor.experimental.pruning_recipes.patterns"], [326, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [327, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [328, "module-neural_compressor.experimental.pruning_v2"], [329, "module-neural_compressor.experimental.pytorch_pruner"], [330, "module-neural_compressor.experimental.pytorch_pruner.logger"], [331, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [332, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [333, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [334, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [335, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [336, "module-neural_compressor.experimental.quantization"], [337, "module-neural_compressor.experimental.scheduler"], [338, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [339, "module-neural_compressor.experimental.strategy.basic"], [340, "module-neural_compressor.experimental.strategy.bayesian"], [341, "module-neural_compressor.experimental.strategy.exhaustive"], [342, "module-neural_compressor.experimental.strategy"], [343, "module-neural_compressor.experimental.strategy.mse"], [344, "module-neural_compressor.experimental.strategy.mse_v2"], [345, "module-neural_compressor.experimental.strategy.random"], [346, "module-neural_compressor.experimental.strategy.strategy"], [347, "module-neural_compressor.experimental.strategy.utils.constant"], [348, "module-neural_compressor.experimental.strategy.utils"], [349, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [350, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [351, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [352, "module-neural_compressor.experimental.strategy.utils.utility"], [353, "module-neural_compressor"], [354, "module-neural_compressor.metric.bleu"], [355, "module-neural_compressor.metric.bleu_util"], [356, "module-neural_compressor.metric.coco_label_map"], [357, "module-neural_compressor.metric.coco_tools"], [358, "module-neural_compressor.metric.evaluate_squad"], [359, "module-neural_compressor.metric.f1"], [360, "module-neural_compressor.metric"], [361, "module-neural_compressor.metric.metric"], [362, "module-neural_compressor.mix_precision"], [363, "module-neural_compressor.model.base_model"], [364, "module-neural_compressor.model"], [365, "module-neural_compressor.model.keras_model"], [366, "module-neural_compressor.model.model"], [367, "module-neural_compressor.model.mxnet_model"], [368, "module-neural_compressor.model.nets_factory"], [369, "module-neural_compressor.model.onnx_model"], [370, "module-neural_compressor.model.tensorflow_model"], [371, "module-neural_compressor.model.torch_model"], [372, "module-neural_compressor.objective"], [373, "module-neural_compressor.profiling"], [374, "module-neural_compressor.profiling.parser.factory"], [375, "module-neural_compressor.profiling.parser"], [376, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [377, "module-neural_compressor.profiling.parser.onnx_parser"], [378, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [379, "module-neural_compressor.profiling.parser.parser"], [380, "module-neural_compressor.profiling.parser.result"], [381, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [382, "module-neural_compressor.profiling.parser.tensorflow_parser"], [383, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [384, "module-neural_compressor.profiling.profiler.factory"], [385, "module-neural_compressor.profiling.profiler"], [386, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [387, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [389, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [390, "module-neural_compressor.profiling.profiler.profiler"], [391, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [392, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [394, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [395, "module-neural_compressor.quantization"], [396, "module-neural_compressor.strategy.auto"], [397, "module-neural_compressor.strategy.auto_mixed_precision"], [398, "module-neural_compressor.strategy.basic"], [399, "module-neural_compressor.strategy.bayesian"], [400, "module-neural_compressor.strategy.conservative"], [401, "module-neural_compressor.strategy.exhaustive"], [402, "module-neural_compressor.strategy.hawq_v2"], [403, "module-neural_compressor.strategy"], [404, "module-neural_compressor.strategy.mse"], [405, "module-neural_compressor.strategy.mse_v2"], [406, "module-neural_compressor.strategy.random"], [407, "module-neural_compressor.strategy.strategy"], [408, "module-neural_compressor.strategy.utils.constant"], [409, "module-neural_compressor.strategy.utils"], [410, "module-neural_compressor.strategy.utils.tuning_sampler"], [411, "module-neural_compressor.strategy.utils.tuning_space"], [412, "module-neural_compressor.strategy.utils.tuning_structs"], [413, "module-neural_compressor.strategy.utils.utility"], [414, "module-neural_compressor.template.api_doc_example"], [415, "module-neural_compressor.template"], [416, "module-neural_compressor.tensorflow.algorithms"], [417, "module-neural_compressor.tensorflow.algorithms.static_quantize"], [418, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"], [419, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"], [420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"], [421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"], [422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"], [423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"], [424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"], [425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"], [426, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"], [427, "module-neural_compressor.tensorflow"], [428, "module-neural_compressor.tensorflow.quantization.config"], [429, "module-neural_compressor.tensorflow.quantization"], [430, "module-neural_compressor.tensorflow.quantization.quantize"], [431, "module-neural_compressor.tensorflow.utils"], [432, "module-neural_compressor.torch.algorithms"], [433, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [434, "module-neural_compressor.torch.algorithms.weight_only"], [435, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [436, "module-neural_compressor.torch.algorithms.weight_only_algos"], [437, "module-neural_compressor.torch.amp.autocast"], [438, "module-neural_compressor.torch.amp.fp8.functions"], [439, "module-neural_compressor.torch.amp.fp8"], [440, "module-neural_compressor.torch.amp"], [441, "module-neural_compressor.torch"], [442, "module-neural_compressor.torch.quantization.config"], [443, "module-neural_compressor.torch.quantization.fp8"], [444, "module-neural_compressor.torch.quantization.fp8.modules"], [445, "module-neural_compressor.torch.quantization.fp8.observer"], [446, "module-neural_compressor.torch.quantization.fp8.quantization_impl"], [447, "module-neural_compressor.torch.quantization"], [448, "module-neural_compressor.torch.quantization.layers"], [449, "module-neural_compressor.torch.quantization.quantize"], [450, "module-neural_compressor.torch.tune"], [451, "module-neural_compressor.torch.utils.constants"], [452, "module-neural_compressor.torch.utils"], [453, "module-neural_compressor.torch.utils.utility"], [454, "module-neural_compressor.training"], [455, "module-neural_compressor.utils.collect_layer_histogram"], [456, "module-neural_compressor.utils.constant"], [457, "module-neural_compressor.utils.create_obj_from_config"], [458, "module-neural_compressor.utils"], [459, "module-neural_compressor.utils.kl_divergence"], [460, "module-neural_compressor.utils.load_huggingface"], [461, "module-neural_compressor.utils.logger"], [462, "module-neural_compressor.utils.neural_insights_utils"], [463, "module-neural_compressor.utils.options"], [464, "module-neural_compressor.utils.pytorch"], [465, "module-neural_compressor.utils.utility"], [466, "module-neural_compressor.utils.weights_details"], [467, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround": [[150, "module-neural_compressor.adaptor.torch_utils.autoround"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[151, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[151, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[151, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[152, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[152, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[153, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[153, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[153, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[153, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[154, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[154, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[155, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[155, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[156, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[159, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[162, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[162, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[163, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[163, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[163, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[163, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[164, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[164, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[165, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[165, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[165, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[165, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[166, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[166, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[166, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[167, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[167, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[168, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[168, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[169, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[169, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[170, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[170, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[171, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[171, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[172, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[173, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[173, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[174, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[174, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[175, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[175, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[176, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[176, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[176, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[176, "neural_compressor.common.base_config.register_config"]], "basetuningconfig (class in neural_compressor.common.base_tune)": [[177, "neural_compressor.common.base_tune.BaseTuningConfig"]], "frameworkwrapper (class in neural_compressor.common.base_tune)": [[177, "neural_compressor.common.base_tune.FrameworkWrapper"]], "neural_compressor.common.base_tune": [[177, "module-neural_compressor.common.base_tune"]], "neural_compressor.common": [[178, "module-neural_compressor.common"]], "logger (class in neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.Logger"]], "debug() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.debug"]], "error() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.error"]], "fatal() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.fatal"]], "info() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.info"]], "log() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.log"]], "neural_compressor.common.logger": [[179, "module-neural_compressor.common.logger"]], "warn() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.warn"]], "warning() (in module neural_compressor.common.logger)": [[179, "neural_compressor.common.logger.warning"]], "neural_compressor.common.utility": [[180, "module-neural_compressor.common.utility"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[181, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[181, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[181, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[181, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[181, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[181, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[181, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[181, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[181, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[182, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[182, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[183, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[184, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[184, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[185, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[185, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[185, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[186, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[187, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[188, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[188, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[188, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[188, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[188, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[188, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[188, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[189, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[189, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[189, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[189, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[189, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[189, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[190, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[191, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[191, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[191, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[192, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[192, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[192, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[193, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[193, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[193, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[193, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[193, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[193, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[193, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[194, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[195, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[195, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[196, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[196, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[197, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[197, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[197, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[198, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[198, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[199, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[199, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[199, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[199, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[200, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[200, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[200, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[200, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[201, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[201, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[201, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[201, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[201, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[202, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[202, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[203, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[203, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[203, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[203, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[204, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[204, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[204, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[205, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[205, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[205, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[206, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[206, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[206, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[207, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[207, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[208, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[208, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[209, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[209, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[210, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[210, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[210, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[211, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[211, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[211, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[211, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[211, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[211, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[211, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[212, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[212, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[212, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[212, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[212, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[212, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[212, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[212, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[213, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[213, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[213, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[213, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[213, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[213, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[213, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[214, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[214, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[214, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[214, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[214, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[214, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[214, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[215, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[215, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[216, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[216, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[217, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[217, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[217, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[217, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[218, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[219, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[219, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[220, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[220, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[220, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[220, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[220, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[220, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[220, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[220, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[220, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[220, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[220, "module-neural_compressor.config"]], "neural_compressor.contrib": [[221, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[222, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[223, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[223, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[224, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[224, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[225, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[225, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[226, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[226, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[226, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[227, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[227, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[227, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[228, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[228, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[228, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[228, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[229, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[230, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[230, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[231, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[231, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[231, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[232, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[232, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[233, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[233, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[233, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[233, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[233, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[234, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[234, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[235, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[235, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[236, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[236, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[236, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[236, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[236, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[237, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[237, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[238, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[238, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[239, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[239, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[239, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[240, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[240, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[240, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[240, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[240, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[240, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[240, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[241, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[242, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[242, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[243, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[243, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[243, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[244, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[244, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[245, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[246, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[247, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[247, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[248, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[248, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[249, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[250, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[250, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[251, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[251, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TRANSFORMS"], [252, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[252, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[252, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[253, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[253, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[254, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[254, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[255, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[255, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[256, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[257, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[257, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[258, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[258, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[258, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[259, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[259, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[260, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[260, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[261, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[261, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[261, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[262, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[262, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[263, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[264, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[265, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[266, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[266, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[267, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[267, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[268, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[268, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[270, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[270, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[270, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[271, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[271, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[271, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[271, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[272, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[273, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[273, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[274, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[274, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[274, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[275, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[275, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[276, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[276, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[276, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[276, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[276, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[278, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[278, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[279, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[279, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[279, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[279, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[279, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[280, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[280, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[281, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[281, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[282, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[282, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[282, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[283, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[283, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[283, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[283, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[283, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[283, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[283, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[284, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[285, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[285, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[286, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[286, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[286, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[287, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[287, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[288, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[289, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[290, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[290, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[291, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[292, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[292, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [293, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[293, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[293, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[294, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[294, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[294, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[294, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[294, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[294, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[295, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[296, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[296, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[296, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[297, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[297, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[297, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[298, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[298, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[298, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[298, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[298, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[298, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[298, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[299, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[299, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[300, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[301, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[301, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[301, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[301, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[301, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[301, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[301, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[301, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[301, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[302, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[302, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[303, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[304, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[304, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[304, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[304, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[304, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[304, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[304, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[304, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[305, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[305, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[305, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[305, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[305, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[306, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[306, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[306, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[306, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[306, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[307, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[308, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[308, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[308, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[308, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[308, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[308, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[308, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[308, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[308, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[308, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[308, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[308, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[308, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[308, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[308, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[308, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[308, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[308, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[308, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[308, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[308, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[308, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[308, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[308, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[308, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[308, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[309, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[309, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[310, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[310, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[311, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[311, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[312, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[312, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[313, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[314, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[314, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[314, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[315, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[315, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[315, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[315, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[316, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[316, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[316, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[316, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[316, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[317, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[317, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[318, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[318, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[319, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[320, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[320, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[321, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[321, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[322, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[322, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[322, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[323, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[323, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[323, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[323, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[323, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[324, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[325, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[326, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[326, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[327, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[327, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[327, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[327, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[327, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[327, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[327, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[328, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[328, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[328, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[328, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[328, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[329, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[330, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[331, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[331, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[332, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[332, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[332, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[332, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[332, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[332, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[332, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[333, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[333, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[334, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[334, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[334, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[334, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[334, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[334, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[335, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[335, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[335, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[335, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[335, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[335, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[335, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[336, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[336, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[337, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[337, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[338, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[338, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[339, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[339, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[340, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[340, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[340, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[340, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[340, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[341, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[341, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[342, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[343, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[343, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[344, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[344, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[345, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[345, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[346, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[346, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[346, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[347, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[348, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[349, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[349, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[350, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[350, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[350, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[350, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[350, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[350, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[350, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[351, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[351, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[352, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[352, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[352, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[352, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[352, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[353, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[354, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[354, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[354, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[354, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[354, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[354, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[354, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[354, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[354, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[355, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[355, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[356, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[357, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[357, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[357, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[357, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[357, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[357, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[357, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[357, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[358, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[358, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[358, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[358, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[358, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[359, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[359, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[359, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[359, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[359, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[360, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[361, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[361, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[361, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[361, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[361, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[361, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[361, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[361, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[361, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[361, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[361, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[361, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[361, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[361, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[361, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[361, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[361, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[361, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[361, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[361, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[361, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[361, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[361, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[361, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[361, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[361, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[362, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[362, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[363, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[363, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[364, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[365, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[365, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[366, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[366, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[366, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[367, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[367, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[368, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[368, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[369, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[369, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[370, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[370, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[371, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[371, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[371, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[371, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[371, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[372, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[372, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[372, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[372, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[372, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[372, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[372, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[372, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[372, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[373, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[374, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[374, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[375, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[376, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[376, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[377, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[378, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[378, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[379, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[379, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[380, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[380, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[381, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[381, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[382, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[383, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[383, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[384, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[384, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[385, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[386, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[386, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[387, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[388, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[388, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[389, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[389, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[390, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[390, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[391, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[391, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[392, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[393, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[393, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[394, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[394, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[394, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[394, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[395, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[395, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[396, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[396, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[397, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[397, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[398, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[398, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[399, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[399, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[399, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[399, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[399, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[400, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[400, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[401, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[401, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[402, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[402, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[403, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[404, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[404, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[405, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[405, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[406, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[406, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[407, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[407, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[407, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[407, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[408, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[409, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[410, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[410, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[411, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[411, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[411, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[411, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[411, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[411, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[411, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[412, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[412, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[413, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[413, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[414, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[414, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[414, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[414, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[414, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[415, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[416, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.static_quantize": [[417, "module-neural_compressor.tensorflow.algorithms.static_quantize"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[418, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quantize.keras)": [[418, "neural_compressor.tensorflow.algorithms.static_quantize.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras": [[418, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d": [[419, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense": [[420, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d": [[421, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils": [[422, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d": [[423, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer": [[424, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d": [[425, "module-neural_compressor.tensorflow.algorithms.static_quantize.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry": [[426, "module-neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry"]], "parse_to_keras_tune_cfg() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[426, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.parse_to_keras_tune_cfg"]], "static_quantize_entry() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[426, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.static_quantize_entry"]], "update_config() (in module neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry)": [[426, "neural_compressor.tensorflow.algorithms.static_quantize.quantize_entry.update_config"]], "neural_compressor.tensorflow": [[427, "module-neural_compressor.tensorflow"]], "backend (class in neural_compressor.tensorflow.quantization.config)": [[428, "neural_compressor.tensorflow.quantization.config.Backend"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[428, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.quantization.config)": [[428, "neural_compressor.tensorflow.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[428, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[428, "module-neural_compressor.tensorflow.quantization.config"]], "parse_config_from_dict() (in module neural_compressor.tensorflow.quantization.config)": [[428, "neural_compressor.tensorflow.quantization.config.parse_config_from_dict"]], "neural_compressor.tensorflow.quantization": [[429, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[430, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[430, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "deep_get() (in module neural_compressor.tensorflow.utils)": [[431, "neural_compressor.tensorflow.utils.deep_get"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils)": [[431, "neural_compressor.tensorflow.utils.dump_elapsed_time"]], "neural_compressor.tensorflow.utils": [[431, "module-neural_compressor.tensorflow.utils"]], "register_algo() (in module neural_compressor.tensorflow.utils)": [[431, "neural_compressor.tensorflow.utils.register_algo"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils)": [[431, "neural_compressor.tensorflow.utils.version1_gte_version2"]], "neural_compressor.torch.algorithms": [[432, "module-neural_compressor.torch.algorithms"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "apply_gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.apply_gptq_quantize"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[433, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[433, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only": [[434, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[435, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[435, "neural_compressor.torch.algorithms.weight_only.rtn.search_clip"]], "neural_compressor.torch.algorithms.weight_only_algos": [[436, "module-neural_compressor.torch.algorithms.weight_only_algos"]], "rtn_quantize_entry() (in module neural_compressor.torch.algorithms.weight_only_algos)": [[436, "neural_compressor.torch.algorithms.weight_only_algos.rtn_quantize_entry"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[437, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[437, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[438, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[439, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[440, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[441, "module-neural_compressor.torch"]], "backend (class in neural_compressor.torch.quantization.config)": [[442, "neural_compressor.torch.quantization.config.Backend"]], "fp8qconfig (class in neural_compressor.torch.quantization.config)": [[442, "neural_compressor.torch.quantization.config.FP8QConfig"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[442, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnweightquantconfig (class in neural_compressor.torch.quantization.config)": [[442, "neural_compressor.torch.quantization.config.RTNWeightQuantConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[442, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[442, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[442, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization.fp8": [[443, "module-neural_compressor.torch.quantization.fp8"]], "neural_compressor.torch.quantization.fp8.modules": [[444, "module-neural_compressor.torch.quantization.fp8.modules"]], "neural_compressor.torch.quantization.fp8.observer": [[445, "module-neural_compressor.torch.quantization.fp8.observer"]], "neural_compressor.torch.quantization.fp8.quantization_impl": [[446, "module-neural_compressor.torch.quantization.fp8.quantization_impl"]], "neural_compressor.torch.quantization": [[447, "module-neural_compressor.torch.quantization"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.quantization.layers)": [[448, "neural_compressor.torch.quantization.layers.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.quantization.layers)": [[448, "neural_compressor.torch.quantization.layers.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.quantization.layers)": [[448, "neural_compressor.torch.quantization.layers.TEQLinearFakeQuant"]], "neural_compressor.torch.quantization.layers": [[448, "module-neural_compressor.torch.quantization.layers"]], "neural_compressor.torch.quantization.quantize": [[449, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[449, "neural_compressor.torch.quantization.quantize.quantize"]], "quantize_dynamic() (in module neural_compressor.torch.quantization.quantize)": [[449, "neural_compressor.torch.quantization.quantize.quantize_dynamic"]], "torchwrapper (class in neural_compressor.torch.tune)": [[450, "neural_compressor.torch.tune.TorchWrapper"]], "neural_compressor.torch.tune": [[450, "module-neural_compressor.torch.tune"]], "neural_compressor.torch.utils.constants": [[451, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils": [[452, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[453, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[453, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[454, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[454, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[454, "neural_compressor.training.fit"]], "neural_compressor.training": [[454, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[454, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[455, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[455, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[456, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[457, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[457, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[458, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[459, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[459, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[460, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[460, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[460, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[460, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[461, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[461, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[462, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[462, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[462, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[462, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[462, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[463, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[463, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[464, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[464, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[464, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[464, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[464, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[465, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[465, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[466, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[466, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[466, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[467, "module-neural_compressor.version"]]}})