Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (78)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 161, 165, 166, 183, 193, 196, 201, 207, 323, 364, 406, 461, 502, 504, 509, 512, 515], "mask": [0, 183, 189, 191, 194, 196, 200, 201, 227, 270, 296, 325, 349, 504, 518], "adaptor_registri": [1, 429], "cl": [1, 158, 167, 174, 176, 180, 181, 189, 194, 203, 204, 205, 229, 236, 244, 246, 251, 272, 279, 285, 307, 314, 318, 323, 325, 327, 338, 353, 364, 399, 419], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 428, 463, 465, 478, 480, 482, 483, 485, 505], "The": [1, 3, 11, 14, 16, 34, 53, 74, 113, 119, 121, 140, 148, 157, 159, 165, 167, 172, 173, 174, 176, 180, 181, 183, 187, 189, 191, 192, 194, 195, 196, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 227, 228, 229, 230, 231, 235, 236, 244, 246, 249, 251, 254, 258, 259, 260, 270, 271, 272, 273, 274, 278, 279, 285, 286, 291, 293, 294, 295, 297, 298, 300, 302, 303, 304, 306, 307, 309, 310, 312, 313, 314, 315, 318, 320, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 342, 344, 346, 347, 348, 350, 351, 353, 354, 362, 364, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 403, 405, 406, 408, 409, 411, 413, 414, 418, 419, 420, 423, 425, 426, 429, 430, 431, 432, 434, 438, 441, 444, 446, 447, 448, 449, 451, 452, 454, 456, 458, 460, 461, 462, 464, 465, 466, 467, 470, 471, 473, 476, 478, 479, 480, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "decor": [1, 16, 34, 67, 68, 70, 148, 167, 176, 180, 181, 189, 194, 203, 205, 244, 251, 285, 300, 307, 314, 318, 323, 325, 327, 338, 341, 353, 364, 399, 419, 425, 426, 429, 515], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 152, 157, 159, 165, 166, 172, 174, 176, 180, 181, 183, 187, 189, 194, 198, 199, 203, 205, 206, 208, 209, 211, 212, 215, 216, 225, 226, 227, 228, 229, 230, 231, 234, 243, 244, 245, 246, 251, 258, 259, 268, 269, 270, 271, 272, 273, 274, 277, 284, 285, 289, 290, 291, 293, 294, 296, 300, 301, 302, 307, 314, 315, 318, 320, 323, 325, 326, 327, 328, 329, 332, 335, 338, 341, 342, 346, 347, 349, 353, 364, 381, 386, 387, 391, 394, 396, 399, 403, 405, 406, 408, 409, 410, 411, 412, 419, 423, 424, 425, 426, 429, 430, 446, 447, 449, 451, 452, 453, 454, 456, 458, 460, 462, 463, 465, 466, 467, 468, 469, 470, 472, 473, 476, 478, 480, 482, 483, 485, 487, 488, 489, 490, 491, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518], "regist": [1, 16, 34, 155, 157, 167, 174, 176, 180, 181, 183, 184, 189, 190, 194, 197, 203, 204, 205, 206, 229, 236, 244, 246, 251, 272, 279, 285, 300, 307, 314, 318, 323, 325, 327, 338, 341, 353, 364, 399, 405, 416, 426, 429, 449, 454, 464, 465, 486, 502, 512, 515], "all": [1, 13, 16, 34, 44, 45, 63, 97, 151, 157, 158, 165, 166, 167, 169, 172, 173, 176, 181, 184, 189, 197, 207, 211, 212, 217, 218, 225, 229, 236, 244, 245, 251, 254, 260, 268, 272, 279, 285, 290, 293, 296, 298, 300, 307, 314, 318, 319, 323, 329, 338, 341, 346, 349, 351, 353, 355, 364, 399, 405, 411, 419, 423, 424, 428, 429, 430, 431, 448, 449, 454, 458, 462, 465, 468, 476, 479, 480, 483, 484, 485, 486, 487, 490, 491, 493, 494, 498, 499, 500, 503, 504, 505, 507, 508, 509, 512, 514, 515], "subclass": [1, 16, 34, 167, 176, 180, 181, 189, 194, 203, 205, 222, 226, 229, 236, 244, 251, 265, 269, 272, 279, 285, 300, 307, 314, 318, 323, 325, 327, 338, 341, 353, 364, 399, 429], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 150, 151, 152, 157, 158, 162, 163, 165, 166, 167, 172, 173, 174, 176, 178, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 226, 227, 229, 236, 240, 244, 246, 251, 258, 259, 269, 270, 272, 279, 282, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 298, 300, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 318, 320, 323, 324, 325, 326, 327, 328, 332, 338, 342, 344, 346, 347, 349, 350, 351, 353, 354, 358, 362, 364, 381, 386, 387, 391, 399, 403, 405, 406, 408, 411, 415, 416, 418, 419, 425, 430, 448, 449, 452, 454, 461, 464, 465, 479, 485, 486, 487, 488, 493, 498, 499, 504, 507, 509, 510, 511, 512, 514, 515, 517], "framework_specific_info": [1, 3, 11, 14, 45, 47, 429], "base": [1, 3, 11, 13, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 152, 155, 161, 165, 167, 173, 180, 181, 182, 183, 184, 190, 197, 204, 206, 212, 217, 220, 225, 227, 229, 236, 244, 254, 260, 263, 268, 270, 272, 279, 285, 300, 306, 308, 314, 315, 318, 320, 325, 335, 338, 342, 353, 355, 362, 363, 364, 396, 399, 403, 426, 428, 429, 430, 431, 449, 453, 454, 458, 465, 466, 473, 474, 476, 485, 488, 493, 496, 499, 500, 504, 505, 507, 509, 511, 512, 513, 515, 518], "framework": [1, 3, 11, 13, 14, 45, 172, 174, 176, 184, 190, 194, 197, 201, 202, 203, 213, 214, 218, 219, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 241, 244, 246, 247, 251, 256, 257, 261, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 285, 291, 300, 301, 328, 336, 342, 353, 354, 355, 356, 358, 397, 403, 411, 428, 429, 431, 447, 451, 454, 455, 459, 460, 461, 462, 464, 465, 466, 487, 488, 504, 505, 507, 510, 513, 514, 515, 516, 517, 518], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 151, 154, 156, 158, 162, 166, 170, 174, 177, 185, 187, 188, 189, 193, 198, 207, 211, 212, 246, 253, 323, 324, 409, 411, 419, 429, 430, 431, 453, 461, 488, 504, 510], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 150, 152, 153, 154, 163, 175, 182, 184, 211, 212, 253, 292, 294, 324, 334, 345, 347, 379, 384, 395, 430, 431, 432, 447, 454, 465, 468, 488, 504, 507, 512, 515, 516], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 187, 188, 193, 211, 212, 240, 282, 323, 381, 386, 425, 446, 448, 451, 456, 485, 491, 504, 507, 509, 512, 514, 515], "activ": [2, 17, 29, 44, 141, 149, 165, 166, 177, 211, 212, 253, 342, 403, 405, 429, 430, 431, 447, 451, 453, 458, 465, 486, 487, 490, 498, 499, 500, 506, 507, 509, 512, 513, 517], "argmax": [2, 17, 29], "attent": [2, 17, 29, 161, 185, 187, 198, 211, 212, 227, 270, 423, 452, 504], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 170, 211, 212, 425, 430, 431, 465, 504, 506, 507, 515], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 211, 212, 323], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 211, 212], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 52, 59, 65, 73, 94, 109, 128, 137, 193, 211, 212, 323, 458, 488, 509, 515], "maxpool": [2, 17, 29, 129, 138, 458], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 150, 152, 163, 165, 170, 187, 211, 212, 290, 335, 342, 343, 381, 386, 392, 394, 396, 403, 404, 405, 413, 419, 429, 430, 431, 451, 458, 465, 466, 489, 490, 504, 507, 508, 510, 512, 513, 515, 517], "pad": [2, 17, 29, 44, 71, 72, 227, 244, 270, 285, 449, 509, 514], "pool": [2, 17, 29, 495], "reduc": [2, 17, 29, 211, 212, 429, 447, 453, 465, 466, 485, 486, 504, 505, 507, 508, 509, 512, 515, 517], "resiz": [2, 17, 29, 227, 228, 240, 244, 270, 271, 282, 285, 449, 514], "split": [2, 17, 29, 43, 82, 166, 243, 244, 284, 285, 425, 509, 512, 514], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 165, 166, 172, 211, 212, 215, 216, 258, 259, 291, 328, 387, 413, 429, 431, 449, 460, 461, 504, 507, 509, 515, 516, 517], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 151, 152, 153, 154, 158, 159, 160, 162, 164, 165, 166, 170, 172, 173, 211, 212, 215, 216, 240, 247, 254, 258, 259, 282, 290, 291, 292, 302, 329, 335, 341, 345, 392, 394, 396, 405, 408, 409, 413, 418, 419, 429, 436, 448, 449, 454, 455, 458, 460, 461, 464, 467, 468, 473, 475, 476, 479, 492, 494, 495, 497, 503, 505, 510, 513, 514, 515, 516, 517], "smooth_quant": [2, 17, 156, 169, 211, 212, 345, 507, 512], "weight_onli": [2, 17, 212, 418, 509], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 57, 87, 111, 150, 211, 212, 342, 403, 429, 430, 458, 465, 470, 475, 479, 485, 508, 515, 518], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 151, 162, 165, 172, 187, 207, 215, 216, 217, 226, 229, 230, 231, 232, 244, 258, 259, 260, 269, 272, 273, 274, 275, 285, 293, 301, 332, 346, 354, 382, 387, 391, 406, 408, 424, 425, 429, 431, 448, 452, 464, 465, 466, 468, 473, 478, 480, 482, 483, 485, 487, 488, 502, 504, 505, 507, 508, 509, 512, 513, 514, 515], "int8": [2, 18, 19, 43, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 166, 171, 172, 211, 212, 240, 282, 288, 289, 290, 342, 344, 403, 405, 418, 419, 424, 425, 428, 429, 430, 431, 446, 449, 453, 458, 465, 466, 470, 473, 475, 476, 479, 485, 488, 490, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 170, 211, 212, 223, 266, 288, 289, 290, 354, 361, 381, 417, 424, 428, 429, 430, 432, 448, 451, 455, 456, 458, 459, 461, 466, 467, 470, 475, 476, 488, 505, 506, 509, 510, 512, 515], "qdq": [2, 42, 87, 111, 112, 113, 142, 165, 166, 211, 212, 288, 289, 290, 429, 451, 456, 461, 475, 476, 507, 510, 512], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 163, 212, 302, 362, 453, 454, 461, 465, 507], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 248, 292, 345, 509, 512], "layer_wise_qu": [2, 153, 212, 509], "modified_pickl": [2, 153, 154], "torch_load": [2, 153, 154], "bf16_convert": [2, 51, 87, 111, 153], "hawq_metr": [2, 153], "model_wrapp": [2, 15, 153], "pattern_detector": [2, 153], "symbolic_trac": [2, 153], "tensorflow": [2, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 174, 176, 206, 211, 212, 226, 227, 228, 229, 232, 234, 236, 244, 251, 269, 270, 271, 272, 275, 277, 279, 285, 289, 290, 291, 294, 296, 300, 301, 302, 328, 336, 347, 349, 353, 354, 362, 380, 381, 385, 386, 387, 397, 419, 424, 426, 428, 429, 430, 447, 448, 451, 452, 453, 455, 458, 459, 461, 462, 465, 466, 467, 475, 476, 487, 490, 504, 505, 506, 511, 512, 515, 517], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 45, 47], "none": [3, 13, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 151, 152, 156, 157, 158, 159, 160, 162, 164, 165, 166, 172, 173, 174, 181, 183, 184, 185, 187, 191, 203, 207, 208, 209, 211, 212, 215, 216, 217, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 240, 244, 245, 246, 247, 254, 258, 259, 260, 262, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 282, 285, 286, 289, 290, 291, 296, 300, 301, 302, 303, 306, 315, 320, 324, 328, 332, 335, 337, 338, 342, 349, 353, 354, 364, 380, 385, 386, 387, 388, 391, 392, 396, 398, 399, 403, 406, 408, 409, 411, 416, 418, 419, 429, 430, 448, 449, 464, 488, 507, 509, 513, 514, 515], "defin": [3, 11, 45, 46, 86, 152, 180, 181, 187, 189, 194, 195, 196, 201, 202, 203, 204, 205, 211, 212, 215, 216, 258, 259, 303, 304, 306, 307, 308, 315, 320, 323, 324, 325, 327, 354, 387, 408, 418, 423, 426, 429, 430, 448, 449, 452, 453, 458, 461, 464, 465, 486, 503, 504, 507, 509, 511, 512, 513, 515, 517], "queri": [3, 11, 13, 45, 47, 148, 165, 187, 198, 211, 212, 430, 431, 495, 507], "interfac": [3, 11, 45, 46, 86, 113, 208, 291, 315, 320, 328, 329, 411, 461, 465, 476, 494, 507, 510], "each": [3, 11, 45, 46, 141, 148, 152, 157, 165, 166, 207, 211, 212, 225, 229, 232, 240, 244, 268, 272, 275, 282, 285, 294, 296, 297, 298, 335, 347, 349, 350, 351, 396, 419, 424, 429, 430, 431, 449, 451, 452, 453, 458, 465, 470, 476, 479, 485, 493, 495, 502, 504, 509, 511, 512, 513, 514, 515, 516], "adapt": [3, 11, 45, 46, 423, 428, 430, 449, 476, 505], "should": [3, 11, 45, 46, 54, 115, 116, 157, 173, 185, 187, 198, 211, 212, 215, 216, 225, 227, 229, 244, 249, 258, 259, 268, 270, 272, 285, 290, 294, 347, 353, 354, 387, 406, 408, 419, 425, 426, 429, 430, 431, 449, 452, 454, 464, 465, 471, 480, 483, 485, 487, 488, 502, 504, 507, 509, 514, 515, 517], "implement": [3, 11, 45, 46, 110, 143, 147, 149, 157, 215, 216, 222, 225, 226, 227, 229, 258, 259, 265, 268, 269, 270, 272, 293, 346, 354, 364, 387, 394, 408, 431, 448, 449, 464, 465, 476, 486, 504, 507, 509, 510, 513, 515, 517], "inherit": [3, 11, 45, 46, 173, 174, 199, 200, 205, 211, 224, 244, 246, 254, 267, 285, 325, 327, 426, 429, 430, 449], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 166, 172, 176, 207, 211, 212, 227, 228, 229, 230, 234, 236, 251, 270, 271, 272, 273, 277, 279, 309, 310, 312, 313, 314, 353, 387, 416, 423, 426, 429, 430, 447, 448, 451, 452, 458, 460, 464, 465, 466, 467, 468, 472, 473, 475, 479, 485, 487, 493, 502, 504, 506, 509, 515, 517], "backend": [3, 11, 15, 41, 42, 45, 46, 170, 176, 211, 212, 213, 214, 218, 219, 223, 227, 228, 230, 231, 232, 233, 234, 238, 241, 244, 250, 251, 256, 257, 261, 262, 264, 266, 270, 271, 273, 274, 275, 276, 277, 281, 283, 285, 301, 336, 354, 355, 356, 358, 397, 425, 431, 451, 454, 460, 461, 465, 466, 474, 493, 498, 499, 500, 506, 509, 514, 515, 517], "own": [3, 11, 45, 46, 74, 157, 225, 244, 268, 285, 364, 426, 430, 448, 449, 461, 464, 487, 491, 502, 509, 511, 516], "mxnetadaptor": 11, "do": [11, 14, 151, 173, 203, 211, 212, 226, 227, 269, 270, 286, 290, 293, 296, 326, 346, 349, 418, 423, 430, 449, 454, 458, 461, 464, 465, 480, 483, 504, 508, 510, 512, 515], "inspect": [11, 14, 510, 513], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 148, 152, 157, 158, 165, 166, 183, 184, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 212, 244, 285, 288, 290, 323, 325, 335, 362, 396, 419, 425, 431, 448, 449, 451, 504, 507, 510, 513, 514, 515], "dict": [11, 13, 14, 44, 45, 116, 148, 150, 151, 152, 157, 162, 165, 166, 167, 172, 176, 180, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 226, 245, 251, 258, 259, 269, 288, 290, 295, 296, 297, 298, 300, 303, 306, 307, 308, 315, 318, 320, 323, 324, 325, 326, 327, 332, 335, 341, 344, 348, 349, 350, 351, 353, 354, 362, 387, 402, 405, 406, 408, 409, 411, 418, 419, 425, 430, 456, 464, 504, 506, 507, 512, 513, 515], "configur": [11, 13, 14, 45, 118, 150, 165, 166, 172, 207, 208, 211, 212, 215, 216, 218, 229, 232, 245, 250, 258, 259, 272, 275, 286, 290, 291, 302, 303, 304, 306, 315, 320, 324, 328, 329, 335, 353, 354, 364, 387, 396, 405, 408, 410, 411, 417, 418, 425, 426, 429, 430, 449, 451, 465, 472, 486, 493, 498, 499, 500, 502, 504, 507, 509, 510, 514, 515, 518], "mxnetqueri": 11, "mxnet": [12, 13, 16, 212, 222, 226, 229, 232, 236, 244, 265, 269, 272, 275, 279, 285, 291, 300, 328, 353, 354, 359, 387, 424, 428, 429, 430, 447, 448, 455, 458, 461, 462, 465, 466, 467, 506, 515, 517], "init": [12, 17, 42, 169, 175, 184, 186, 449, 464, 515], "optyp": [13, 211, 212, 288, 430], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 150, 151, 152, 157, 165, 166, 167, 174, 176, 180, 181, 187, 188, 189, 194, 203, 204, 205, 207, 209, 211, 212, 225, 227, 229, 236, 244, 246, 251, 268, 270, 272, 279, 285, 290, 293, 294, 296, 300, 307, 314, 318, 323, 325, 327, 332, 338, 342, 344, 346, 347, 349, 353, 362, 364, 391, 392, 399, 403, 405, 406, 418, 419, 429, 430, 449, 451, 454, 456, 458, 461, 465, 466, 486, 488, 493, 494, 498, 499, 507, 509, 511, 514, 515, 516, 517], "isiter": 13, "obj": [13, 105, 184, 207, 226, 269, 286, 291, 302, 303, 304, 306, 315, 320, 324, 328, 354, 364, 387, 408, 411, 419], "bool": [13, 42, 43, 44, 141, 148, 151, 157, 163, 165, 166, 189, 211, 212, 227, 229, 240, 244, 270, 272, 282, 285, 290, 294, 300, 323, 341, 347, 353, 402, 406, 418, 419, 448, 449, 464, 496, 506, 514], "check": [13, 44, 67, 68, 105, 148, 165, 166, 207, 218, 229, 272, 288, 324, 418, 419, 428, 451, 454, 462, 469, 471, 473, 480, 483, 484, 488, 491, 494, 495, 510], "whether": [13, 43, 44, 105, 116, 148, 151, 157, 165, 166, 189, 211, 212, 225, 227, 240, 244, 268, 270, 282, 285, 294, 296, 300, 323, 347, 349, 353, 411, 418, 419, 429, 449, 464, 507, 509, 512, 514], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 150, 152, 155, 157, 163, 165, 172, 173, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 227, 228, 229, 244, 245, 247, 258, 259, 260, 270, 271, 272, 285, 286, 291, 296, 304, 306, 309, 310, 312, 313, 314, 315, 320, 323, 324, 325, 326, 327, 328, 332, 345, 349, 353, 354, 362, 363, 381, 386, 387, 391, 405, 408, 411, 418, 419, 425, 426, 430, 436, 446, 448, 449, 457, 464, 465, 467, 503, 504, 506, 507, 514, 515, 516, 518], "i": [13, 43, 44, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 143, 148, 151, 152, 155, 157, 159, 163, 165, 166, 171, 172, 173, 176, 177, 183, 187, 188, 194, 199, 200, 201, 202, 203, 204, 206, 207, 211, 212, 215, 216, 217, 225, 226, 227, 228, 229, 230, 231, 234, 236, 240, 244, 245, 247, 251, 253, 254, 258, 259, 260, 268, 269, 270, 271, 272, 273, 274, 277, 279, 282, 285, 293, 296, 298, 300, 302, 307, 315, 320, 324, 325, 329, 336, 346, 349, 351, 353, 354, 364, 370, 371, 375, 387, 392, 397, 405, 406, 408, 418, 419, 423, 424, 425, 426, 429, 430, 431, 432, 434, 438, 441, 444, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 476, 478, 479, 480, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518], "iter": [13, 15, 105, 140, 148, 165, 166, 172, 188, 194, 201, 205, 211, 212, 215, 216, 220, 225, 229, 230, 247, 258, 259, 263, 268, 272, 273, 325, 327, 354, 387, 408, 411, 425, 426, 429, 446, 448, 449, 465, 504, 506, 507, 512, 513, 515, 517], "return": [13, 16, 44, 45, 53, 67, 68, 70, 74, 105, 116, 148, 150, 151, 152, 157, 163, 165, 166, 167, 172, 174, 176, 180, 181, 184, 187, 189, 190, 194, 197, 203, 204, 205, 207, 209, 215, 216, 229, 236, 240, 244, 245, 246, 251, 258, 259, 272, 279, 282, 285, 290, 293, 294, 296, 297, 298, 300, 306, 307, 314, 318, 323, 324, 325, 327, 332, 338, 342, 344, 346, 347, 349, 350, 351, 353, 354, 358, 362, 364, 381, 386, 387, 391, 399, 403, 405, 406, 408, 411, 416, 418, 419, 425, 426, 430, 431, 448, 449, 454, 464, 467, 498, 499, 500, 502, 504, 507, 509, 512, 513, 515], "true": [13, 43, 44, 85, 113, 146, 148, 151, 157, 166, 172, 180, 211, 212, 225, 227, 229, 230, 243, 244, 245, 268, 270, 272, 273, 284, 285, 290, 294, 300, 318, 341, 347, 353, 364, 387, 402, 406, 411, 418, 419, 430, 448, 449, 451, 454, 458, 464, 465, 468, 471, 472, 487, 488, 489, 490, 496, 498, 506, 507, 509, 512, 513, 514, 515, 517], "els": [13, 148, 166, 212, 225, 268, 364, 416, 473, 509, 513], "fals": [13, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 151, 156, 157, 163, 165, 166, 172, 174, 177, 211, 212, 217, 219, 222, 223, 226, 227, 229, 240, 244, 245, 246, 247, 253, 260, 262, 265, 266, 269, 270, 272, 282, 285, 296, 300, 349, 353, 364, 387, 406, 411, 418, 419, 429, 430, 448, 449, 458, 464, 465, 478, 482, 488, 496, 499, 500, 506, 507, 509, 512, 513, 514, 515, 517], "boolean": 13, "ensure_list": 13, "x": [13, 54, 74, 151, 188, 211, 212, 226, 244, 269, 285, 332, 391, 406, 447, 451, 454, 466, 467, 493, 494, 498, 499, 501, 507, 509, 512, 513, 514, 516], "ensur": [13, 244, 285, 332, 391, 454, 507, 514], "list": [13, 42, 43, 53, 105, 140, 148, 150, 151, 152, 161, 165, 172, 181, 187, 188, 193, 198, 203, 207, 211, 212, 215, 216, 220, 227, 240, 244, 245, 258, 259, 263, 270, 282, 285, 289, 290, 293, 294, 296, 297, 298, 300, 307, 315, 320, 323, 326, 341, 346, 347, 349, 350, 351, 353, 354, 362, 370, 371, 375, 387, 402, 406, 408, 409, 419, 425, 428, 429, 449, 456, 458, 462, 465, 468, 473, 475, 478, 479, 482, 490, 493, 495, 496, 502, 504, 506, 507, 508, 512, 513, 515], "input": [13, 15, 42, 43, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 150, 160, 162, 163, 164, 165, 166, 170, 187, 188, 207, 211, 212, 215, 216, 227, 228, 229, 231, 240, 243, 244, 249, 258, 259, 270, 271, 272, 274, 282, 284, 285, 288, 289, 290, 353, 354, 358, 362, 387, 408, 416, 418, 419, 426, 429, 430, 446, 447, 448, 449, 451, 452, 453, 454, 456, 458, 460, 464, 465, 466, 467, 468, 473, 504, 506, 507, 509, 512, 513, 514, 517], "check_mx_vers": 13, "version": [13, 53, 104, 160, 165, 187, 212, 289, 290, 345, 423, 425, 429, 458, 462, 463, 465, 478, 480, 482, 483, 505, 510, 512, 515, 516], "str": [13, 42, 44, 140, 150, 152, 157, 158, 161, 162, 163, 165, 166, 167, 174, 176, 184, 187, 203, 211, 212, 227, 228, 229, 236, 240, 244, 246, 250, 251, 270, 271, 272, 279, 282, 285, 289, 290, 293, 294, 296, 298, 300, 307, 318, 341, 344, 346, 347, 349, 351, 353, 372, 380, 382, 385, 386, 402, 405, 406, 411, 416, 419, 420, 448, 449, 464, 496, 506, 513, 514], "mx": 13, "__version__": [13, 155], "combine_cap": 13, "current": [13, 70, 104, 162, 166, 183, 184, 187, 190, 194, 197, 211, 212, 302, 309, 310, 312, 313, 314, 323, 325, 332, 336, 391, 397, 419, 425, 426, 429, 431, 447, 454, 458, 465, 468, 472, 485, 493, 502, 504, 507, 509, 512, 515], "new": [13, 16, 44, 148, 162, 172, 217, 229, 244, 245, 260, 272, 285, 324, 364, 424, 428, 430, 454, 465, 466, 479, 485, 486, 487, 488, 494, 495, 498, 499, 504, 505, 507, 509, 510, 511, 514, 516, 517], "combin": [13, 165, 211, 212, 215, 216, 240, 254, 258, 259, 282, 354, 387, 408, 419, 425, 429, 461, 465, 503, 505, 507, 508, 509, 514, 515], "capabl": [13, 47, 342, 403, 430, 431, 446, 458, 465, 466, 476, 487, 492, 504, 506, 507, 515, 517], "contain": [13, 67, 68, 70, 74, 139, 148, 152, 157, 162, 165, 166, 172, 173, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 211, 212, 215, 216, 227, 228, 229, 258, 259, 270, 271, 272, 286, 290, 291, 296, 297, 298, 302, 315, 318, 320, 323, 324, 325, 326, 327, 328, 349, 350, 351, 354, 387, 408, 411, 418, 447, 449, 452, 461, 464, 486, 493, 498, 499, 500, 504, 509, 513, 515, 516], "make_nc_model": 13, "target": [13, 42, 43, 102, 151, 187, 205, 207, 212, 324, 327, 332, 391, 449, 454, 465, 504, 513, 514, 515, 517], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 142, 150, 165, 187, 211, 212, 227, 240, 243, 244, 270, 282, 284, 285, 289, 296, 302, 324, 342, 349, 403, 406, 425, 430, 465, 466, 470, 507, 508, 509, 512, 514, 515], "symbol": [13, 150, 163, 165, 293, 346, 354, 387, 425, 467], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 151, 152, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 170, 172, 173, 180, 184, 185, 187, 194, 195, 196, 199, 201, 202, 203, 205, 207, 211, 212, 215, 216, 223, 226, 227, 229, 244, 245, 248, 249, 258, 259, 266, 269, 270, 272, 285, 286, 288, 289, 290, 291, 292, 300, 301, 302, 303, 306, 309, 310, 312, 313, 314, 315, 320, 324, 325, 326, 327, 328, 329, 332, 335, 337, 338, 345, 353, 354, 364, 380, 385, 386, 387, 388, 391, 392, 396, 398, 399, 405, 406, 408, 414, 416, 418, 419, 421, 424, 425, 426, 428, 429, 431, 436, 446, 447, 448, 449, 451, 452, 453, 454, 455, 460, 461, 463, 464, 466, 468, 473, 475, 476, 479, 485, 487, 492, 494, 495, 496, 497, 502, 503, 505, 507, 510, 511, 513, 514, 515, 516, 517], "an": [13, 67, 68, 70, 105, 141, 143, 152, 155, 157, 165, 171, 177, 194, 211, 212, 220, 225, 229, 244, 248, 253, 263, 268, 272, 285, 292, 293, 297, 298, 306, 307, 329, 345, 346, 350, 351, 354, 381, 386, 387, 406, 408, 419, 421, 423, 425, 426, 428, 429, 431, 447, 448, 449, 450, 451, 456, 464, 465, 466, 468, 472, 473, 476, 485, 488, 489, 490, 493, 496, 502, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515], "neural": [13, 152, 172, 173, 176, 189, 190, 191, 192, 203, 211, 212, 239, 240, 241, 244, 245, 248, 251, 254, 282, 283, 285, 287, 292, 299, 300, 302, 315, 320, 323, 326, 328, 329, 334, 340, 345, 352, 353, 354, 358, 365, 387, 394, 395, 401, 416, 421, 424, 429, 430, 431, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 466, 467, 469, 470, 473, 475, 476, 478, 480, 482, 483, 484, 496, 502, 503, 505, 507, 509, 510, 512, 513, 514, 515, 517, 518], "compressor": [13, 172, 173, 176, 191, 192, 203, 211, 212, 239, 240, 241, 244, 245, 248, 251, 254, 282, 283, 285, 287, 292, 299, 300, 302, 323, 326, 328, 329, 334, 340, 345, 352, 353, 354, 358, 365, 387, 395, 401, 416, 421, 424, 426, 429, 430, 431, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 466, 467, 468, 469, 473, 475, 476, 478, 480, 482, 483, 484, 487, 488, 489, 490, 492, 493, 502, 503, 504, 505, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518], "tupl": [13, 105, 148, 165, 181, 212, 215, 216, 240, 244, 258, 259, 282, 285, 290, 341, 354, 387, 402, 408, 430, 449, 464, 465, 507, 514], "symnet": 13, "arg": [13, 53, 105, 165, 227, 228, 229, 270, 271, 272, 323, 332, 391, 406, 414, 415, 449, 454, 465, 474, 504, 507, 509, 512, 513, 514], "aux": 13, "data": [13, 42, 43, 44, 55, 105, 140, 148, 152, 157, 162, 165, 166, 170, 187, 211, 212, 215, 216, 245, 247, 258, 259, 290, 292, 332, 342, 344, 345, 354, 380, 385, 387, 391, 403, 405, 408, 411, 416, 419, 428, 429, 447, 448, 449, 454, 458, 459, 462, 464, 465, 466, 487, 488, 490, 493, 498, 499, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "descript": [13, 132, 406, 425, 430, 431, 448, 493, 497, 512], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 163, 165, 170, 425, 512, 513], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 45, 67, 68, 70, 104, 105, 148, 151, 158, 162, 165, 172, 176, 177, 181, 183, 184, 185, 187, 190, 197, 204, 205, 206, 207, 209, 212, 220, 244, 245, 251, 253, 263, 285, 290, 323, 325, 327, 335, 342, 344, 353, 362, 387, 396, 403, 405, 411, 416, 419, 430, 447, 457, 461, 462, 465, 471, 488, 490, 498, 499, 505, 509, 512, 515, 516, 519], "name": [13, 43, 45, 53, 67, 68, 70, 104, 105, 110, 116, 140, 148, 150, 151, 152, 157, 158, 162, 163, 165, 167, 172, 177, 180, 181, 183, 187, 189, 194, 197, 198, 203, 204, 205, 206, 207, 209, 211, 212, 227, 228, 229, 232, 236, 242, 244, 245, 249, 252, 253, 270, 271, 272, 275, 279, 285, 288, 289, 290, 295, 300, 318, 323, 325, 327, 342, 344, 348, 353, 358, 362, 364, 387, 403, 405, 409, 411, 416, 419, 424, 425, 431, 449, 451, 454, 456, 458, 463, 464, 465, 467, 471, 478, 482, 486, 487, 493, 504, 507, 510, 511, 513, 515, 517, 518], "context": [13, 419, 506, 509], "prepare_model_data": 13, "nc_model": [13, 315, 320], "data_x": 13, "prepar": [13, 44, 165, 425, 428, 449, 454, 459, 487, 498, 499, 500, 504, 507], "dataload": [13, 15, 42, 44, 140, 141, 149, 151, 152, 162, 165, 166, 172, 184, 185, 187, 203, 207, 215, 216, 227, 238, 248, 258, 259, 270, 281, 286, 292, 315, 320, 329, 345, 380, 385, 387, 408, 411, 425, 428, 429, 430, 451, 452, 453, 454, 459, 460, 465, 466, 487, 488, 503, 504, 507, 508, 509, 512, 513, 514, 516, 517], "need": [13, 42, 105, 109, 162, 166, 172, 187, 203, 212, 215, 216, 217, 225, 226, 229, 236, 244, 247, 249, 250, 258, 259, 260, 268, 269, 272, 279, 285, 290, 329, 335, 353, 354, 364, 387, 396, 408, 418, 419, 425, 429, 448, 449, 451, 452, 454, 461, 465, 468, 470, 471, 474, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 490, 492, 496, 498, 504, 506, 507, 508, 509, 510, 512, 514, 515, 517], "run": [13, 140, 148, 157, 166, 172, 194, 207, 211, 212, 215, 216, 226, 243, 245, 258, 259, 269, 284, 324, 325, 332, 354, 387, 391, 408, 429, 446, 454, 457, 458, 465, 468, 470, 472, 473, 474, 476, 478, 479, 480, 482, 483, 485, 493, 494, 495, 496, 498, 499, 500, 505, 507, 509, 510, 511, 513, 515, 517], "loader": [13, 140, 215, 216, 258, 259, 354, 387, 408, 414, 448, 507], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 155, 211, 212, 217, 227, 229, 247, 260, 270, 272, 296, 306, 307, 342, 349, 381, 386, 403, 405, 406, 411, 423, 426, 429, 449, 467, 478, 480, 482, 483, 486, 498, 499, 500, 504, 507, 511, 513, 515, 516], "exampl": [13, 44, 152, 157, 165, 166, 172, 181, 187, 188, 203, 211, 212, 227, 228, 229, 240, 244, 270, 271, 272, 282, 285, 296, 297, 298, 300, 326, 349, 350, 351, 353, 354, 364, 387, 405, 406, 408, 419, 423, 428, 430, 431, 436, 460, 461, 468, 471, 472, 473, 476, 493, 496, 508, 510, 514, 515, 516, 519], "prepare_dataload": 13, "io": [13, 157, 491], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 244, 285, 409, 457, 514], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 151, 156, 157, 166, 184, 187, 188, 203, 207, 211, 212, 430, 448, 452, 465, 466, 468, 471, 476, 485, 504, 506, 509], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 187, 288, 290, 362, 386, 429, 451, 454, 488, 492, 495, 498, 499, 500, 509, 513, 515, 518], "given": [13, 16, 67, 68, 70, 104, 105, 116, 148, 158, 165, 244, 285, 296, 349, 387, 426, 431, 504, 512, 514], "map": [13, 43, 105, 148, 157, 212, 244, 285, 288, 290, 291, 295, 297, 298, 300, 315, 320, 325, 328, 348, 350, 351, 353, 449, 454, 464, 465, 478, 482, 490, 504, 507, 509], "quantize_sym_model": 13, "qconfig": [13, 165, 418, 509, 513], "accord": [13, 122, 165, 172, 211, 212, 227, 228, 229, 244, 270, 271, 272, 285, 335, 394, 396, 411, 426, 429, 449, 454, 488, 493, 498, 499, 500, 504, 508, 512, 514, 515], "run_forward": 13, "b_filter": 13, "collector": [13, 152, 409], "pre_batch": 13, "post_batch": 13, "forward": [13, 207, 430, 465, 487, 504, 506, 507, 509, 512, 513], "propag": [13, 100], "filter": [13, 227, 228, 229, 230, 231, 232, 234, 238, 270, 271, 272, 273, 274, 275, 277, 281, 292, 345, 419, 431, 449, 461, 504, 513], "which": [13, 42, 55, 83, 110, 151, 152, 157, 162, 166, 183, 187, 188, 190, 194, 195, 196, 198, 201, 202, 203, 205, 207, 211, 212, 227, 228, 229, 240, 245, 270, 271, 272, 282, 293, 298, 307, 309, 310, 312, 313, 314, 318, 323, 324, 325, 327, 332, 346, 351, 353, 358, 364, 387, 391, 419, 423, 425, 426, 429, 430, 431, 447, 448, 449, 451, 452, 454, 457, 458, 461, 464, 465, 466, 467, 469, 473, 476, 479, 485, 486, 487, 490, 493, 498, 499, 500, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517], "batch": [13, 165, 217, 219, 220, 225, 226, 247, 260, 262, 263, 268, 269, 408, 448, 452, 453, 465, 503, 504, 514, 515, 518], "infer": [13, 105, 165, 166, 187, 291, 328, 362, 364, 387, 408, 429, 430, 447, 452, 453, 465, 466, 485, 502, 504, 505, 507, 509, 512, 513, 515], "collect": [13, 16, 43, 165, 242, 244, 247, 249, 250, 252, 285, 298, 300, 351, 353, 409, 419, 430, 507, 513, 515], "inform": [13, 152, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 212, 215, 216, 247, 249, 250, 258, 259, 323, 325, 326, 327, 329, 353, 419, 423, 424, 427, 428, 429, 430, 431, 432, 434, 438, 441, 444, 447, 452, 458, 465, 467, 480, 483, 486, 487, 490, 491, 493, 494, 498, 499, 504, 508, 509, 510, 513, 517, 518, 519], "dure": [13, 140, 155, 157, 189, 193, 205, 211, 212, 323, 327, 364, 419, 430, 451, 465, 467, 492, 502, 503, 504, 507, 512, 513, 517], "call": [13, 42, 157, 162, 167, 187, 195, 196, 201, 296, 325, 349, 425, 426, 429, 448, 460, 474, 476, 486, 504, 507, 512, 513, 514], "prior": [13, 88, 515], "after": [13, 78, 165, 185, 189, 194, 196, 201, 211, 212, 227, 240, 244, 247, 270, 282, 285, 325, 392, 406, 419, 426, 430, 449, 451, 452, 453, 456, 461, 464, 465, 478, 479, 482, 486, 490, 502, 503, 504, 507, 508, 509, 511, 512, 513, 514, 515], "count": [13, 426, 449, 509], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 161, 165, 166, 185, 211, 212, 226, 227, 228, 240, 244, 269, 270, 271, 282, 285, 289, 290, 294, 296, 300, 307, 347, 349, 353, 372, 381, 386, 405, 406, 419, 448, 449, 464, 465, 496, 506, 509, 514], "make_symbol_block": 13, "gluon": [13, 354, 387, 467], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 150, 165, 429, 431, 515], "quantizable_nod": 13, "strategi": [13, 165, 201, 211, 212, 213, 229, 256, 272, 292, 345, 428, 429, 430, 431, 436, 447, 448, 454, 461, 465, 473, 485, 490, 505, 506, 507, 508, 509, 510, 516, 517], "config": [13, 44, 115, 116, 118, 122, 165, 172, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 215, 216, 227, 258, 259, 270, 309, 310, 312, 313, 314, 315, 320, 323, 324, 325, 326, 327, 342, 343, 345, 354, 381, 386, 403, 404, 405, 406, 408, 411, 418, 419, 426, 428, 430, 431, 436, 446, 448, 451, 452, 453, 454, 456, 459, 461, 464, 465, 466, 467, 487, 488, 503, 504, 506, 507, 508, 509, 511, 513, 515], "tune": [13, 45, 172, 211, 212, 215, 216, 227, 229, 258, 259, 270, 272, 291, 328, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 354, 364, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 405, 408, 419, 429, 430, 447, 448, 449, 451, 454, 461, 463, 465, 466, 485, 489, 492, 494, 495, 502, 504, 505, 508, 510, 511, 513, 517], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 157, 158, 162, 165, 166, 172, 173, 174, 181, 183, 184, 190, 191, 192, 193, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 215, 216, 217, 220, 224, 227, 228, 229, 230, 231, 232, 234, 239, 240, 246, 247, 250, 258, 259, 260, 263, 267, 270, 271, 272, 273, 274, 275, 277, 282, 286, 288, 289, 290, 293, 296, 297, 298, 302, 307, 323, 324, 325, 327, 342, 344, 346, 349, 350, 351, 354, 362, 364, 387, 403, 405, 406, 408, 411, 418, 419, 423, 424, 425, 426, 429, 431, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 461, 464, 466, 467, 468, 472, 473, 474, 476, 486, 488, 490, 491, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 171, 211, 212, 217, 219, 220, 222, 223, 225, 226, 247, 260, 262, 263, 265, 266, 268, 269, 413, 428, 430, 448, 452, 462, 480, 483, 487, 490, 498, 505, 507, 509, 510, 512, 516, 518], "depend": [13, 215, 216, 245, 258, 259, 354, 387, 408, 424, 457, 458, 491, 506, 507, 515], "algorithm": [13, 44, 151, 162, 165, 180, 208, 212, 293, 300, 308, 345, 346, 353, 411, 413, 426, 429, 430, 431, 452, 453, 458, 461, 474, 479, 504, 507, 513, 517], "set": [13, 43, 57, 96, 105, 115, 148, 157, 162, 165, 172, 176, 207, 209, 211, 212, 215, 216, 217, 227, 229, 232, 244, 245, 250, 251, 258, 259, 260, 270, 272, 275, 285, 296, 302, 315, 320, 324, 329, 349, 353, 354, 362, 386, 387, 406, 408, 416, 419, 423, 426, 430, 446, 448, 449, 452, 454, 456, 458, 460, 461, 462, 464, 465, 466, 468, 470, 472, 486, 487, 488, 489, 490, 491, 495, 498, 504, 506, 507, 509, 511, 512, 515, 517], "kl": [13, 16, 211, 212, 409, 413, 430, 431, 447, 458, 465, 515, 517], "minmax": [13, 16, 430, 431, 447, 458, 507, 517], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 156], "calibdata": 13, "threshold": [13, 168, 409, 413, 464], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 97, 104, 162, 170, 174, 176, 184, 190, 197, 201, 202, 211, 212, 215, 216, 226, 227, 229, 236, 240, 244, 246, 247, 248, 251, 258, 259, 269, 270, 272, 279, 282, 285, 292, 300, 302, 307, 323, 325, 329, 336, 342, 345, 353, 354, 358, 364, 387, 397, 403, 406, 408, 411, 413, 419, 421, 428, 430, 465, 468, 473, 476, 479, 485, 492, 493, 496, 505, 508, 511, 515, 516], "amp": [13, 468, 475, 494, 509], "wrap": [13, 105, 116, 174, 246, 296, 349, 425, 454, 480, 483], "dataiterload": 13, "data_it": [13, 187], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 409], "8001": [13, 409, 493, 498, 499, 500], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 167, 168, 170, 171, 303, 306, 357, 359, 361, 362, 363, 429, 430, 431, 462, 467, 478, 480, 482, 483, 486, 505, 515], "up": [13, 100, 198, 244, 285, 324, 454, 455, 458, 461, 476, 480, 483, 485, 504, 505, 506, 507, 511, 514, 515, 517], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 429], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 140], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 466, 507], "reduce_rang": [15, 41, 42, 211, 212, 431, 506], "augment": 15, "dump": [15, 155, 165, 172, 290, 419, 424, 490, 507, 510, 513], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 151, 166, 419, 509], "percentil": [16, 44, 140, 166, 447], "99": [16, 518], "999": [16, 517], "option": [16, 44, 105, 157, 165, 166, 189, 211, 212, 215, 216, 227, 244, 258, 259, 270, 285, 289, 290, 296, 302, 323, 329, 342, 345, 349, 353, 354, 387, 403, 405, 406, 408, 412, 419, 430, 431, 448, 449, 458, 462, 465, 479, 493, 496, 498, 499, 500, 504, 507, 509, 511, 514, 515, 517], "number": [16, 44, 67, 68, 105, 140, 165, 166, 181, 185, 191, 192, 211, 212, 225, 228, 240, 244, 268, 271, 282, 285, 297, 298, 300, 323, 332, 350, 351, 353, 381, 386, 391, 406, 411, 419, 446, 448, 449, 454, 464, 493, 495, 504, 507, 509, 511, 512, 514, 515], "bin": [16, 157, 158, 419, 457], "histogram": [16, 409, 419, 487, 513], "valu": [16, 43, 44, 55, 67, 68, 70, 89, 90, 105, 143, 148, 157, 165, 171, 172, 181, 183, 187, 188, 198, 206, 207, 208, 209, 211, 212, 215, 216, 227, 230, 231, 240, 244, 245, 258, 259, 270, 273, 274, 282, 285, 296, 300, 324, 332, 335, 342, 349, 353, 354, 387, 391, 396, 403, 405, 406, 408, 409, 411, 419, 425, 430, 431, 447, 449, 451, 458, 464, 465, 466, 471, 488, 490, 496, 502, 504, 506, 507, 509, 510, 512, 514, 515, 517], "default": [16, 44, 97, 148, 157, 165, 166, 207, 209, 211, 212, 215, 216, 219, 227, 228, 229, 240, 244, 258, 259, 262, 270, 271, 272, 282, 285, 289, 290, 293, 302, 324, 344, 346, 353, 362, 405, 411, 419, 425, 429, 448, 449, 458, 461, 462, 464, 465, 466, 473, 476, 478, 482, 490, 493, 498, 499, 500, 502, 504, 506, 507, 508, 509, 511, 512, 514, 515, 517], "float": [16, 43, 44, 140, 141, 152, 166, 189, 194, 204, 207, 211, 212, 227, 240, 270, 282, 294, 296, 297, 298, 325, 347, 349, 350, 351, 402, 406, 416, 419, 449, 464, 506, 507, 512, 514], "A": [16, 54, 74, 75, 103, 116, 140, 141, 148, 155, 165, 173, 180, 181, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 229, 244, 247, 249, 250, 272, 285, 286, 293, 296, 297, 298, 300, 303, 306, 307, 308, 315, 318, 320, 323, 324, 325, 326, 327, 332, 346, 349, 350, 351, 353, 354, 358, 362, 391, 408, 419, 424, 430, 448, 449, 455, 458, 464, 465, 467, 478, 479, 482, 485, 493, 504, 505, 507, 509, 512, 514, 515, 517], "between": [16, 42, 143, 171, 200, 211, 212, 244, 285, 297, 300, 350, 353, 381, 386, 419, 425, 429, 430, 431, 447, 451, 452, 461, 464, 465, 476, 507, 509, 510, 511, 512, 514, 515], "0": [16, 43, 44, 53, 90, 105, 148, 156, 157, 165, 166, 168, 170, 174, 181, 183, 185, 207, 211, 212, 217, 219, 222, 223, 226, 227, 230, 231, 234, 240, 244, 246, 247, 260, 262, 265, 266, 269, 270, 273, 274, 277, 282, 285, 290, 291, 300, 307, 315, 320, 328, 353, 364, 387, 392, 406, 425, 448, 449, 452, 454, 456, 457, 458, 462, 463, 464, 465, 466, 471, 473, 478, 482, 488, 498, 499, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517], "100": [16, 172, 181, 211, 212, 229, 272, 406, 446, 449, 454, 460, 465, 490, 506, 507, 514, 515, 517, 518], "klcalibr": 16, "128": [16, 44, 149, 151, 165, 166, 227, 230, 231, 244, 270, 273, 274, 285, 449, 465, 507, 509, 514, 518], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 486, 487, 509], "ep": [16, 171, 466], "0001": [16, 181, 211, 212, 452, 465, 506], "smooth": [16, 140, 141, 148, 162, 170, 211, 212, 341, 504, 515], "discret": [16, 181, 515], "mai": [16, 148, 155, 157, 309, 310, 312, 313, 314, 406, 423, 424, 430, 447, 451, 456, 457, 463, 466, 478, 482, 488, 491, 493, 505, 507, 509, 515], "have": [16, 74, 83, 141, 148, 157, 184, 188, 190, 197, 225, 247, 268, 293, 296, 323, 325, 346, 349, 353, 387, 405, 406, 423, 424, 430, 431, 448, 449, 451, 454, 458, 463, 464, 465, 466, 468, 485, 488, 491, 493, 498, 499, 500, 502, 504, 507, 509, 512, 515, 516], "been": [16, 157, 184, 190, 197, 293, 323, 325, 346, 426, 431, 452, 465, 466, 485, 509, 512], "normal": [16, 33, 244, 285, 298, 351, 465, 494, 502, 509, 512, 514], "1": [16, 42, 43, 44, 54, 74, 89, 105, 109, 113, 146, 148, 157, 160, 162, 165, 166, 168, 170, 171, 172, 174, 181, 183, 195, 196, 198, 211, 212, 217, 219, 222, 223, 226, 227, 228, 230, 231, 234, 235, 240, 244, 245, 246, 247, 260, 262, 265, 266, 269, 270, 271, 273, 274, 277, 278, 282, 285, 291, 296, 297, 298, 300, 315, 320, 325, 328, 329, 349, 350, 351, 353, 364, 387, 405, 406, 411, 419, 423, 425, 428, 429, 431, 447, 448, 449, 451, 452, 456, 458, 459, 462, 464, 466, 469, 471, 487, 488, 495, 496, 498, 499, 500, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517], "replac": [16, 158, 162, 165, 166, 298, 351, 454, 465, 476, 510], "zero": [16, 43, 44, 151, 166, 194, 207, 244, 285, 325, 419, 428, 490, 504, 507, 509, 512, 514, 515], "multipli": [16, 211, 212, 509], "scale": [16, 43, 44, 100, 141, 143, 151, 160, 162, 164, 165, 166, 170, 171, 240, 244, 282, 285, 507, 509, 511, 512, 514, 515], "factor": [16, 141, 509, 512, 518], "take": [16, 189, 212, 215, 216, 220, 244, 249, 258, 259, 263, 285, 323, 332, 353, 354, 387, 391, 408, 423, 425, 426, 448, 451, 452, 458, 465, 485, 504, 507, 508, 509, 514, 515, 517], "correspond": [16, 152, 187, 198, 211, 212, 227, 270, 293, 296, 300, 346, 349, 353, 411, 419, 429, 458, 465, 504, 506, 507, 511, 515], "amount": 16, "off": [16, 67, 68, 70, 424, 509], "non": [16, 324, 419, 425, 451, 509, 515], "ref": [16, 148], "http": [16, 151, 152, 183, 191, 192, 201, 202, 203, 227, 229, 270, 272, 293, 294, 296, 297, 298, 323, 325, 326, 346, 347, 349, 350, 351, 353, 387, 425, 428, 449, 451, 459, 462, 463, 465, 474, 480, 483, 487, 489, 490, 491, 492, 493, 496, 498, 499, 500, 504, 510], "hanj": 16, "c": [16, 74, 229, 272, 419, 449, 457, 462, 509, 515], "illinoi": 16, "edu": [16, 229, 272, 449], "cs412": 16, "bk3": 16, "diverg": [16, 409, 413, 431, 447, 452, 515], "pdf": 16, "github": [16, 152, 191, 192, 203, 227, 270, 293, 294, 297, 298, 323, 326, 346, 347, 350, 351, 353, 387, 424, 428, 449, 451, 455, 462, 463, 465, 474, 480, 483, 487, 489, 490, 491, 492, 493, 496, 499, 500, 510], "com": [16, 152, 191, 192, 203, 227, 270, 293, 294, 297, 298, 323, 326, 346, 347, 350, 351, 353, 387, 423, 428, 449, 451, 459, 462, 463, 465, 468, 474, 487, 489, 490, 492, 493, 496, 499, 500, 510, 511, 518], "apach": [16, 463], "incub": 16, "blob": [16, 152, 191, 192, 293, 294, 297, 298, 323, 346, 347, 350, 351, 353, 387, 465, 474, 496, 499, 500], "master": [16, 191, 192, 203, 293, 294, 297, 298, 323, 326, 346, 347, 350, 351, 353, 387, 465, 515], "python": [16, 75, 148, 155, 157, 229, 248, 272, 292, 345, 406, 419, 421, 424, 425, 449, 451, 454, 457, 462, 465, 470, 476, 479, 485, 489, 490, 492, 493, 495, 498, 500, 504, 505, 514], "contrib": [16, 292, 345], "py": [16, 148, 152, 172, 194, 211, 212, 294, 296, 297, 298, 325, 347, 349, 350, 351, 406, 425, 429, 451, 454, 462, 465, 470, 472, 473, 474, 480, 483, 487, 489, 490, 492, 493, 495, 496, 498, 499, 500, 507, 510, 513], "microsoft": [16, 428, 429], "onnxruntim": [16, 211, 212, 223, 229, 236, 266, 272, 279, 301, 381, 429, 447, 448, 461, 462, 466, 488, 506], "main": [16, 151, 176, 181, 198, 203, 251, 326, 425, 448, 451, 454, 465, 472, 474, 486, 495, 504, 507, 509], "tool": [16, 148, 289, 419, 428, 429, 465, 478, 482, 488, 491, 492, 493, 504, 505, 507], "arrai": [16, 43, 44, 148, 157, 244, 285, 296, 307, 349, 419, 514], "small": [16, 67, 68, 69, 70, 394, 426, 490, 491, 504, 509, 515, 518], "probabl": [16, 211, 212, 413, 509], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 185, 198, 298, 351, 423, 465, 478, 482, 491, 498, 499, 504, 513], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 158], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 157, 174, 194, 215, 216, 224, 227, 246, 258, 259, 267, 270, 324, 325, 342, 387, 403, 408, 426, 431, 449, 464, 484, 504, 507, 512, 515], "qoper": [18, 34, 211, 212, 456, 488], "format": [18, 43, 53, 148, 211, 212, 227, 228, 229, 270, 271, 272, 290, 296, 302, 342, 349, 403, 406, 428, 430, 431, 449, 454, 456, 464, 465, 466, 467, 468, 490, 493, 505, 507, 510], "float16activationoper": 18, "float16": [18, 21, 43, 449, 509], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 300, 353, 457, 464, 480, 483, 510], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 425, 512], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 148, 343, 404], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 165, 290, 429], "mode": [41, 42, 43, 45, 110, 157, 162, 236, 279, 296, 342, 349, 362, 403, 416, 418, 419, 429, 430, 451, 461, 478, 482, 490, 491, 507, 508, 509, 515], "static": [41, 42, 47, 162, 170, 187, 212, 290, 342, 387, 403, 429, 430, 431, 451, 456, 461, 465, 468, 473, 474, 475, 476, 479, 485, 488, 496, 498, 499, 500, 512, 515, 518], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 79, 131, 136, 143, 165, 166, 171, 211, 212, 215, 216, 258, 259, 289, 290, 300, 335, 342, 353, 392, 396, 403, 411, 418, 419, 424, 428, 429, 431, 451, 458, 459, 464, 465, 466, 475, 487, 488, 489, 490, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518], "add_qdq_pair_to_weight": [41, 211, 212, 507], "optypes_to_exclude_output_qu": [41, 211, 212, 507], "dedicated_qdq_pair": [41, 211, 212, 507], "smoothquant": [42, 162, 165, 170, 428, 505, 509, 516], "onnxrt": [42, 43, 44, 227, 229, 236, 244, 270, 272, 279, 285, 300, 353, 380, 417, 429, 451, 466, 487, 507, 518], "get_quant_dequant_output": 42, "input_data": [42, 448], "output_data": 42, "loss": [42, 174, 211, 212, 246, 291, 300, 315, 320, 328, 353, 408, 447, 451, 452, 453, 454, 455, 464, 465, 466, 476, 488, 490, 503, 504, 505, 507, 509, 512, 515, 517], "output": [42, 43, 44, 53, 57, 59, 74, 98, 105, 110, 148, 165, 166, 177, 187, 188, 193, 207, 209, 211, 212, 215, 216, 249, 253, 258, 259, 289, 290, 293, 323, 346, 353, 354, 362, 387, 408, 414, 415, 419, 425, 429, 430, 452, 453, 454, 456, 458, 460, 464, 465, 467, 476, 485, 486, 488, 493, 494, 498, 499, 500, 503, 504, 506, 507, 509, 510, 512, 513, 514, 515, 517], "numpi": [42, 43, 67, 68, 70, 105, 148, 244, 285, 296, 307, 349, 457, 512, 514], "7": [42, 166, 172, 211, 212, 364, 431, 446, 457, 458, 462, 465, 504, 507, 510, 512, 515, 518], "bit": [42, 44, 149, 165, 166, 211, 212, 405, 431, 447, 453, 466, 505, 507, 509, 512], "execut": [42, 43, 53, 151, 157, 172, 194, 195, 196, 211, 212, 325, 329, 331, 386, 387, 388, 390, 408, 411, 418, 419, 451, 452, 453, 465, 466, 470, 471, 478, 479, 482, 485, 486, 487, 488, 492, 495, 503, 504, 507, 509, 511, 515, 518], "provid": [42, 43, 102, 105, 110, 187, 215, 216, 244, 258, 259, 285, 291, 296, 315, 320, 328, 329, 349, 354, 387, 408, 412, 414, 426, 428, 429, 430, 431, 446, 448, 451, 453, 454, 455, 461, 462, 464, 465, 466, 467, 468, 472, 476, 479, 485, 486, 487, 493, 494, 504, 506, 507, 509, 512, 513, 515, 516, 517, 518], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 212, 289, 290, 456], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 152, 155, 157, 165, 166, 171, 173, 177, 180, 185, 187, 189, 191, 192, 193, 194, 198, 199, 200, 201, 203, 204, 205, 211, 212, 215, 216, 226, 227, 228, 229, 230, 231, 232, 234, 244, 247, 253, 254, 258, 259, 269, 270, 271, 272, 273, 274, 275, 277, 285, 293, 296, 297, 298, 300, 309, 310, 312, 313, 314, 315, 320, 323, 325, 327, 328, 329, 332, 335, 346, 349, 350, 351, 353, 354, 364, 387, 391, 396, 405, 406, 408, 418, 419, 423, 424, 425, 426, 429, 430, 431, 447, 448, 449, 452, 453, 454, 456, 457, 458, 461, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 476, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 498, 499, 500, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "quant_dequant_data": 42, "qtype": [42, 43, 429], "3": [42, 148, 157, 196, 212, 229, 244, 272, 285, 296, 349, 406, 419, 425, 426, 428, 447, 448, 449, 452, 454, 456, 458, 459, 462, 464, 465, 466, 468, 472, 476, 478, 482, 487, 492, 493, 495, 496, 498, 502, 504, 506, 507, 509, 510, 511, 512, 514, 515, 518], "scheme": [42, 43, 44, 149, 160, 165, 166, 429, 430, 431, 448, 458, 476, 509, 515, 517], "sym": [42, 43, 44, 166, 430, 431, 458, 507, 509, 517], "dequant": [42, 43, 44, 57, 88, 91, 92, 93, 94, 96, 152, 165, 166, 419, 425, 430, 512, 513], "asym": [42, 43, 44, 149, 160, 165, 166, 431, 458, 509, 517], "ortsmoothqu": 42, "fake": [42, 44, 113, 160, 162, 166, 170, 405, 465, 507, 509, 512], "channel": [42, 43, 44, 143, 162, 166, 170, 171, 185, 188, 193, 211, 212, 240, 244, 282, 285, 323, 428, 429, 431, 461, 462, 468, 470, 475, 490, 504, 509, 514, 518], "For": [42, 44, 165, 166, 170, 187, 188, 191, 192, 203, 212, 229, 244, 272, 285, 297, 298, 300, 323, 326, 350, 351, 353, 354, 387, 423, 425, 427, 429, 431, 452, 453, 454, 456, 458, 461, 468, 470, 471, 473, 476, 487, 488, 493, 504, 508, 509, 512, 513, 515, 517, 518], "more": [42, 148, 162, 170, 191, 192, 244, 285, 323, 426, 427, 428, 430, 447, 449, 452, 454, 456, 459, 461, 462, 465, 466, 468, 476, 480, 483, 488, 493, 502, 503, 504, 508, 509, 512, 515, 516, 518], "detail": [42, 162, 170, 187, 244, 285, 419, 420, 423, 428, 430, 431, 447, 452, 458, 459, 460, 464, 465, 466, 468, 476, 485, 493, 494, 504, 509, 510, 511, 513, 515, 516], "pleas": [42, 151, 152, 162, 170, 183, 191, 192, 193, 201, 202, 203, 211, 212, 227, 228, 229, 232, 270, 271, 272, 275, 323, 325, 326, 353, 387, 406, 425, 426, 427, 428, 429, 446, 447, 449, 453, 454, 456, 462, 464, 466, 468, 469, 473, 476, 492, 493, 494, 504, 507, 508, 509, 510, 511, 512, 515, 516], "refer": [42, 151, 152, 162, 170, 183, 191, 192, 193, 201, 202, 203, 207, 211, 212, 227, 270, 293, 294, 300, 323, 325, 326, 346, 347, 353, 387, 406, 425, 429, 430, 446, 448, 449, 451, 453, 454, 456, 460, 462, 463, 464, 465, 466, 468, 473, 476, 487, 488, 490, 492, 493, 494, 502, 506, 510, 514, 515], "accur": [42, 151, 162, 170, 202, 504, 509, 512], "effici": [42, 162, 170, 426, 428, 447, 448, 452, 468, 493, 503, 504, 505, 509, 512, 515], "post": [42, 97, 98, 151, 162, 170, 201, 212, 215, 216, 258, 259, 387, 423, 428, 429, 430, 451, 453, 454, 456, 461, 462, 468, 474, 485, 495, 504, 505, 509, 512, 513, 515], "train": [42, 56, 80, 151, 162, 170, 173, 195, 196, 199, 201, 202, 211, 212, 215, 216, 227, 229, 244, 254, 258, 259, 270, 272, 285, 286, 302, 325, 345, 387, 411, 426, 428, 429, 430, 436, 449, 451, 452, 453, 456, 461, 466, 468, 474, 485, 490, 498, 503, 505, 509, 511, 512, 515, 517], "larg": [42, 43, 162, 170, 202, 428, 448, 452, 465, 505, 509, 512, 518], "languag": [42, 162, 170, 202, 293, 346, 423, 428, 456, 489, 505, 509, 512], "2": [42, 43, 53, 74, 105, 109, 157, 162, 166, 168, 170, 172, 189, 195, 196, 211, 212, 228, 245, 271, 296, 298, 300, 325, 332, 349, 351, 353, 364, 391, 406, 419, 425, 429, 447, 448, 449, 451, 452, 458, 461, 462, 463, 464, 466, 489, 495, 496, 498, 499, 500, 502, 504, 505, 507, 509, 510, 511, 512, 514, 515, 516], "spiq": [42, 162, 170, 512], "free": [42, 162, 170, 201, 215, 216, 258, 259, 387, 423, 474, 479, 487, 495, 502, 511, 512], "per": [42, 43, 44, 162, 166, 170, 172, 211, 212, 245, 413, 429, 431, 448, 493, 504, 508, 509, 518], "we": [42, 43, 67, 68, 70, 74, 86, 143, 157, 162, 170, 171, 172, 187, 191, 198, 211, 212, 226, 245, 247, 269, 293, 296, 346, 349, 394, 423, 425, 429, 430, 431, 448, 451, 454, 456, 458, 464, 465, 472, 473, 476, 480, 483, 485, 486, 488, 491, 498, 499, 500, 502, 503, 504, 506, 507, 509, 510, 511, 512, 513, 515, 516], "onli": [42, 44, 53, 63, 70, 86, 109, 115, 143, 157, 162, 164, 166, 170, 171, 172, 176, 181, 184, 190, 197, 211, 212, 227, 245, 247, 251, 270, 290, 302, 323, 325, 336, 387, 397, 405, 406, 419, 428, 429, 430, 431, 446, 447, 448, 451, 452, 454, 457, 458, 465, 466, 473, 486, 504, 505, 506, 507, 512, 513, 515, 516, 517], "inplac": [42, 162], "mean": [42, 44, 162, 166, 189, 198, 211, 212, 240, 244, 282, 285, 298, 300, 323, 335, 351, 353, 396, 425, 430, 431, 448, 451, 454, 458, 464, 465, 471, 490, 504, 507, 509, 512, 514, 515, 517, 518], "weight": [42, 43, 44, 60, 61, 122, 141, 143, 148, 149, 152, 162, 164, 165, 166, 171, 183, 184, 188, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 211, 212, 290, 323, 325, 342, 353, 387, 394, 403, 405, 419, 420, 428, 429, 430, 431, 447, 451, 453, 458, 460, 465, 487, 498, 502, 504, 505, 506, 507, 512, 513, 515, 516, 517], "chang": [42, 96, 143, 162, 171, 195, 196, 198, 199, 201, 202, 205, 211, 212, 325, 327, 394, 419, 424, 430, 448, 454, 457, 463, 465, 468, 478, 479, 482, 485, 491, 504, 513, 514, 515], "you": [42, 157, 162, 211, 212, 225, 227, 268, 270, 325, 353, 387, 424, 425, 430, 448, 449, 451, 454, 462, 463, 464, 466, 468, 470, 471, 473, 478, 482, 485, 486, 487, 488, 489, 490, 491, 493, 504, 507, 510, 511, 512, 513, 516], "can": [42, 44, 143, 152, 157, 162, 171, 180, 187, 188, 189, 194, 202, 203, 205, 211, 212, 215, 216, 226, 229, 244, 245, 247, 258, 259, 269, 272, 285, 296, 298, 300, 323, 325, 327, 349, 351, 353, 354, 364, 387, 408, 419, 425, 426, 428, 429, 430, 431, 446, 448, 449, 451, 452, 453, 454, 456, 458, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 478, 479, 480, 482, 483, 485, 486, 488, 490, 491, 492, 493, 495, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518], "recov": [42, 162, 419, 429, 453], "helper": [43, 45, 110, 116, 148, 165, 227, 228, 229, 243, 270, 271, 272, 284, 288, 289, 290, 362, 417], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 211, 212, 230, 231, 240, 244, 273, 274, 282, 285, 430, 431, 449, 451, 456, 458, 468, 490, 506, 507, 509, 512, 513, 514, 517], "its": [43, 60, 96, 148, 152, 187, 196, 199, 201, 207, 212, 223, 229, 244, 266, 272, 285, 288, 294, 295, 325, 332, 347, 348, 391, 423, 449, 452, 463, 464, 466, 476, 478, 482, 485, 486, 504, 509, 511, 514, 515], "string": [43, 45, 116, 148, 151, 155, 157, 172, 174, 176, 180, 181, 187, 189, 194, 203, 204, 205, 207, 208, 211, 212, 229, 246, 251, 272, 286, 291, 293, 296, 302, 303, 304, 306, 307, 315, 320, 323, 324, 325, 326, 327, 328, 346, 349, 358, 362, 411, 416, 419, 464, 512, 514], "represent": [43, 155, 423, 425, 447, 453, 504, 507], "quanttyp": [43, 405], "repres": [43, 189, 193, 194, 203, 204, 207, 229, 234, 272, 277, 296, 298, 300, 349, 351, 353, 423, 431, 447, 449, 456, 493, 504, 507, 509, 515], "make_quant_nod": 43, "make": [43, 105, 143, 171, 180, 189, 194, 203, 205, 225, 268, 323, 325, 327, 419, 423, 429, 430, 446, 448, 458, 464, 465, 473, 478, 482, 485, 487, 504, 507, 508, 509, 511, 512, 515], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 212], "dequantizelinear": 43, "is_b_transpos": 43, "inuput": 43, "b": [43, 74, 227, 270, 419, 424, 447, 449, 464, 504, 509, 512, 515], "transpos": [43, 73, 193, 240, 244, 285, 289, 323, 514], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 166, 457, 458, 509, 512, 515], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 466, 468, 476, 508], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 172, 228, 232, 235, 271, 275, 278, 335, 396, 464, 489, 515], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 152, 165, 240, 244, 282, 285, 293, 296, 297, 298, 300, 346, 349, 350, 351, 353, 367, 387, 394, 408, 418, 419, 423, 426, 428, 448, 451, 452, 454, 461, 463, 464, 465, 473, 474, 485, 486, 489, 493, 494, 495, 496, 502, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 518], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44], "point": [43, 44, 166, 240, 282, 297, 298, 307, 332, 350, 351, 391, 419, 464, 485, 490, 491, 507, 509, 512, 514, 515], "To": [43, 296, 349, 364, 424, 430, 431, 449, 451, 454, 466, 469, 472, 478, 480, 482, 483, 487, 491, 504, 506, 508, 509, 510, 512, 515, 517], "pack": [43, 61], "comput": [43, 105, 152, 165, 293, 294, 297, 298, 300, 346, 347, 350, 351, 353, 408, 419, 447, 448, 453, 456, 464, 465, 466, 468, 479, 488, 504, 505, 507, 509, 512, 515], "linear": [43, 151, 160, 164, 165, 166, 170, 185, 187, 188, 193, 198, 207, 211, 212, 323, 425, 452, 456, 465, 504, 509, 512, 515], "transform": [43, 50, 143, 145, 146, 147, 151, 161, 164, 201, 227, 228, 229, 230, 231, 232, 234, 236, 238, 270, 271, 272, 273, 274, 275, 277, 279, 281, 292, 345, 425, 426, 428, 447, 449, 452, 453, 454, 455, 459, 465, 468, 473, 474, 475, 476, 488, 496, 499, 500, 504, 505, 508, 509, 512, 513, 515, 517, 518], "when": [43, 53, 64, 70, 148, 155, 157, 188, 194, 199, 207, 211, 212, 227, 228, 236, 244, 270, 271, 279, 285, 294, 324, 325, 347, 387, 408, 423, 426, 430, 448, 449, 465, 476, 478, 479, 482, 486, 487, 490, 491, 492, 494, 498, 504, 507, 509, 512, 514, 515], "uint8": [43, 166, 240, 282, 296, 344, 349, 405, 429, 449, 458, 506, 507, 514, 517], "rmin": [43, 507], "rmax": [43, 507], "m": [43, 152, 166, 191, 192, 211, 212, 323, 424, 452, 462, 468, 470, 473, 476, 480, 483, 493, 504, 518], "where": [43, 157, 211, 212, 296, 300, 349, 353, 405, 419, 431, 447, 451, 452, 478, 482, 486, 512, 513], "max": [43, 104, 143, 166, 171, 181, 211, 212, 244, 285, 297, 298, 332, 350, 351, 391, 419, 428, 451, 462, 465, 488, 490, 504, 507, 509, 512, 514, 515], "ab": [43, 151, 166, 183, 201, 202, 325, 504, 507, 512], "np": [43, 244, 285, 332, 391, 454, 495, 512, 514, 515], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 165, 183, 191, 207, 212, 230, 231, 273, 274, 297, 298, 323, 325, 335, 350, 351, 396, 409, 419, 447, 449, 464, 465, 476, 488, 502, 504, 507, 509, 511, 512, 515, 517], "quantize_data": 43, "add": [43, 52, 64, 109, 119, 148, 176, 207, 211, 212, 227, 229, 251, 270, 272, 324, 342, 403, 419, 424, 425, 431, 448, 449, 454, 456, 458, 464, 465, 480, 483, 487, 488, 495, 498, 499, 511, 512, 513, 515, 516], "necessari": [43, 203, 423, 426, 430, 467, 486, 504, 511, 515], "intermedi": [43, 152, 174, 211, 212, 246, 425, 461, 507], "full": [43, 227, 228, 229, 270, 271, 272, 419, 428, 447, 449, 451, 457, 463, 486, 491, 504, 509, 510], "equat": [43, 298, 300, 351, 353, 507, 512], "r": [43, 143, 171, 451, 462, 486, 487, 489, 490, 492, 493, 507, 518], "": [43, 44, 105, 143, 148, 157, 171, 187, 188, 189, 193, 194, 195, 196, 199, 201, 202, 207, 208, 209, 211, 212, 226, 229, 243, 244, 245, 247, 249, 269, 272, 284, 285, 298, 323, 325, 351, 353, 354, 358, 387, 416, 419, 423, 424, 426, 430, 431, 451, 452, 454, 456, 458, 461, 465, 466, 473, 476, 478, 482, 485, 488, 490, 493, 503, 504, 505, 506, 507, 509, 510, 511, 512, 515, 516, 517, 518], "q": [43, 44, 107, 109, 131, 509, 512], "z": [43, 447, 452, 512], "real": [43, 230, 247, 273, 430, 447, 454, 487, 494, 505, 507], "origin": [43, 44, 158, 162, 165, 187, 199, 207, 212, 227, 244, 245, 270, 285, 309, 310, 312, 313, 314, 324, 325, 344, 392, 405, 419, 424, 449, 473, 504, 507, 514, 515, 517], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 157, 158], "new_dtyp": 43, "cast": [43, 57, 508, 514], "info": [43, 162, 165, 166, 191, 192, 207, 242, 247, 252, 323, 358, 415, 419, 425, 451, 467, 495, 500], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 419], "low": [43, 215, 216, 230, 231, 258, 259, 273, 274, 291, 301, 328, 354, 429, 430, 446, 447, 449, 454, 465, 466, 490, 505, 507, 509, 512, 515], "high": [43, 230, 231, 273, 274, 449, 451, 462, 490, 505, 515], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 165, 187, 198, 208, 209, 212, 419, 429, 448, 458, 460, 465, 506, 517], "kwarg": [43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 158, 165, 166, 185, 211, 212, 229, 242, 244, 249, 252, 272, 285, 341, 343, 353, 354, 355, 357, 359, 361, 362, 363, 387, 402, 404, 406, 408, 414, 415, 418, 419, 448], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 300, 307, 332, 353, 391, 419, 429, 451, 471, 478, 482, 485, 486, 488, 490, 504, 509, 511, 512, 513, 515], "item": [43, 207, 209, 211, 212, 243, 284, 324, 342, 403, 447, 454, 504, 512, 515], "trt_env_setup": 43, "environ": [43, 172, 245, 423, 446, 478, 482, 485, 493, 496, 498, 499, 500, 515], "variabl": [43, 155, 172, 204, 211, 212, 229, 245, 272, 332, 391, 405, 462, 504, 515], "tensorrt": [43, 447, 466, 507], "to_numpi": 43, "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 160, 165, 166, 405, 509], "has_zp": 44, "blob_siz": 44, "how": [44, 157, 166, 173, 183, 189, 195, 196, 201, 202, 211, 212, 244, 285, 286, 323, 424, 425, 427, 429, 448, 449, 452, 453, 454, 460, 464, 465, 479, 480, 483, 484, 485, 487, 498, 499, 500, 504, 505, 507, 512, 514, 515, 516, 517], "mani": [44, 166, 353, 387, 448, 462, 509, 515, 517], "element": [44, 166, 191, 192, 207, 225, 268, 296, 323, 349, 419, 449, 461, 464, 504, 509, 512], "one": [44, 109, 110, 115, 157, 165, 166, 172, 189, 193, 198, 201, 202, 203, 205, 244, 254, 285, 293, 296, 300, 302, 323, 326, 327, 346, 349, 353, 426, 429, 447, 452, 453, 454, 458, 461, 462, 464, 465, 466, 468, 469, 473, 474, 476, 478, 479, 482, 485, 486, 487, 490, 491, 492, 493, 495, 502, 503, 504, 506, 507, 509, 510, 512, 514, 515], "zp": [44, 166, 512], "make_matmul_weight_only_nod": 44, "weight_shap": 44, "num_bit": [44, 113, 160, 165, 166, 512], "k_block": 44, "q_weight": 44, "matmulfpq4": 44, "shape": [44, 105, 148, 189, 230, 231, 240, 244, 273, 274, 282, 285, 296, 349, 428, 449, 458, 459, 465, 487, 488, 509, 512, 514], "matmulnbit": 44, "new_init": 44, "matmul_weight_only_nod": 44, "quant_tensor": 44, "4": [44, 53, 149, 160, 165, 166, 172, 189, 198, 211, 212, 236, 239, 240, 244, 279, 282, 285, 293, 294, 296, 346, 347, 349, 405, 406, 423, 429, 431, 446, 454, 455, 458, 461, 462, 464, 465, 473, 493, 495, 499, 504, 507, 509, 512, 514, 515, 518], "32": [44, 149, 166, 185, 405, 454, 460, 509, 518], "ratio": [44, 143, 171, 189, 194, 207, 211, 212, 240, 244, 282, 285, 325, 449, 465, 488, 504, 514, 518], "group": [44, 166, 204, 310, 428, 461, 504, 509, 513, 514, 515, 518], "clip": [44, 166, 509, 512], "qdq_tensor": 44, "quant": [44, 148, 165, 166, 211, 212, 342, 403, 425, 465, 507], "pad_tensor": 44, "rowi": 44, "so": [44, 105, 244, 285, 405, 425, 429, 451, 457, 461, 466, 471, 473, 489, 490, 491, 507, 508, 509, 512, 513, 514, 516], "divis": 44, "pade": 44, "rtn_quantiz": [44, 166], "weight_config": [44, 149, 151, 164, 166], "round": [44, 143, 166, 171, 428, 505, 507, 509, 512], "nearst": [44, 166], "method": [44, 141, 143, 155, 157, 165, 166, 180, 204, 211, 212, 220, 225, 226, 227, 229, 236, 244, 247, 263, 268, 269, 270, 272, 279, 285, 306, 307, 308, 342, 403, 405, 411, 412, 414, 415, 425, 426, 428, 447, 448, 449, 451, 452, 453, 464, 465, 503, 504, 507, 508, 509, 512, 514, 515], "modelproto": [44, 288, 354, 467], "onnxmodel": [44, 361, 380], "fc2": [44, 165, 166], "rtn": [44, 165, 509], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 160, 164, 173, 198, 200, 254, 294, 347, 423, 430, 431, 465, 468, 470, 476, 485, 489, 490, 495, 503, 504, 507, 508, 511, 512, 515, 516, 517], "salient": [44, 166, 504, 509], "apply_awq_clip": 44, "mse": [44, 165, 166, 211, 212, 292, 300, 334, 345, 353, 387, 395, 419, 451, 464, 490, 506, 509, 510], "prepare_input": 44, "n_sampl": [44, 149, 165, 166], "sampl": [44, 77, 165, 166, 211, 212, 220, 225, 227, 228, 229, 240, 244, 263, 268, 270, 271, 272, 282, 285, 300, 307, 332, 353, 391, 426, 448, 449, 455, 461, 486, 507, 509, 512, 514, 515, 517, 518], "session": [44, 148, 226, 269, 362, 465, 513], "awq_quant": [44, 166], "enable_auto_scal": [44, 166, 509], "enable_mse_search": [44, 166, 509], "awar": [44, 149, 152, 166, 173, 212, 254, 302, 323, 394, 408, 429, 430, 431, 447, 453, 454, 456, 461, 485, 495, 503, 505, 509, 515], "awq": [44, 166, 509], "enabl": [44, 109, 152, 166, 194, 211, 212, 325, 430, 431, 454, 462, 466, 468, 470, 473, 474, 476, 487, 489, 490, 492, 495, 504, 505, 509, 515], "gptq": [44, 166, 509], "w": [44, 151, 244, 285, 504, 512, 514], "h": [44, 211, 212, 244, 285, 454, 493, 494, 498, 499, 500, 514], "blocksiz": 44, "percdamp": [44, 509], "01": [44, 211, 212, 465, 506, 509, 515, 517, 518], "actord": [44, 509], "perchannel": 44, "hessian": [44, 152, 394, 509, 515], "matrix": [44, 353, 387, 428, 476, 516], "percent": 44, "averag": [44, 297, 298, 300, 350, 351, 353, 464, 465, 509, 515, 518], "diagon": [44, 509], "dampen": 44, "rearrang": [44, 201, 504, 509], "consid": [44, 148, 300, 353, 423, 447, 452, 486, 515], "diag": 44, "error": [44, 105, 152, 157, 300, 335, 353, 396, 415, 451, 464, 469, 490, 491, 494, 509, 512, 515], "gptq_quantiz": [44, 166], "get_ops_recurs": 45, "prefix": [45, 148, 150, 157, 158, 163, 165, 172, 468, 473, 513], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 150, 152, 157, 165, 180, 208, 209, 211, 212, 243, 284, 296, 303, 306, 308, 349, 419], "yaml": [45, 207, 208, 209, 212, 215, 216, 227, 229, 245, 258, 259, 270, 272, 286, 291, 302, 303, 304, 306, 315, 320, 328, 329, 418, 419, 429, 431, 460, 464, 465, 502, 506, 513, 514], "file": [45, 105, 148, 155, 157, 158, 162, 165, 169, 177, 203, 207, 208, 211, 212, 215, 216, 227, 228, 229, 232, 243, 244, 250, 253, 258, 259, 270, 271, 272, 275, 284, 285, 286, 291, 296, 302, 303, 304, 306, 315, 320, 324, 326, 328, 329, 349, 354, 364, 370, 371, 375, 387, 418, 419, 424, 426, 429, 430, 431, 454, 457, 460, 463, 464, 465, 467, 471, 480, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 498, 499, 500, 502, 506, 507, 509, 513, 514], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 151, 255, 291, 296, 328, 341, 342, 349, 353, 387, 402, 403, 406, 419, 425, 432, 434, 438, 441, 444, 451, 456, 461, 465, 470, 474, 475, 476, 492, 493, 497, 510, 511, 515, 519], "pytorch_ipexadaptor": 45, "intel": [45, 176, 191, 192, 203, 248, 251, 287, 292, 299, 300, 323, 326, 334, 340, 345, 352, 353, 365, 387, 395, 401, 421, 423, 424, 426, 427, 429, 430, 431, 447, 449, 450, 452, 453, 455, 456, 458, 459, 463, 466, 467, 468, 473, 475, 476, 487, 488, 489, 490, 492, 493, 502, 503, 504, 505, 507, 508, 510, 512, 513, 515, 516, 517], "extens": [45, 155, 157, 419, 426, 428, 429, 458, 461, 462, 465, 466, 467, 469, 474, 475, 476, 480, 483, 484, 488, 504, 505, 507, 512, 515, 516, 517], "ipex": [45, 159, 165, 211, 212, 461, 465, 466, 470, 474, 475, 512], "pytorch_fxadaptor": 45, "fx": [45, 165, 211, 336, 397, 461, 466, 474, 475, 489, 505, 507, 508], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 187, 226, 269, 291, 355, 362, 386, 425, 429, 449, 452, 454, 460, 467, 468, 487, 490, 507, 508, 513], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "querybackendcap": [46, 429, 430], "tensorflowadaptor": 47, "stock": [47, 474, 512], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 211, 212, 289, 466, 507, 512], "tensorflowqueri": [47, 429], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 211, 465], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 342, 403, 430, 431], "graphconvert": 48, "qt_config": 48, "recip": [48, 187, 211, 212, 291, 328, 465, 509, 512, 515], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 430, 508], "data_load": [48, 49, 429], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 211, 506], "without": [49, 90, 148, 199, 244, 285, 325, 344, 405, 423, 452, 454, 465, 476, 487, 490, 504, 505, 506, 515, 516], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 184], "bf16convert": [50, 508], "biasadd": [52, 59, 64, 66, 109, 458], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 143, 151, 430, 431, 451, 456, 458, 490, 512, 513, 515], "addv2": [52, 69, 458], "layout": 53, "convertlayoutoptim": 53, "convers": [53, 54, 212, 302, 424, 429, 430, 465, 466, 507, 508, 512], "optim": [53, 74, 75, 79, 80, 116, 118, 175, 178, 179, 180, 182, 184, 187, 196, 201, 208, 211, 212, 248, 254, 291, 292, 308, 328, 332, 345, 391, 408, 409, 416, 419, 426, 428, 446, 451, 452, 453, 454, 458, 459, 461, 462, 465, 467, 468, 470, 472, 473, 476, 479, 487, 490, 491, 492, 494, 496, 505, 506, 507, 508, 509, 511, 512, 513, 515, 517], "nchw": [53, 240], "nhwc": [53, 240], "It": [53, 157, 173, 177, 189, 215, 216, 253, 258, 259, 298, 300, 307, 323, 328, 335, 351, 353, 354, 387, 392, 396, 408, 429, 430, 431, 447, 451, 452, 465, 471, 474, 479, 485, 486, 487, 488, 490, 491, 493, 504, 507, 509, 510, 511, 515, 517], "exist": [53, 172, 209, 245, 362, 419, 456, 464, 472, 515], "abov": [53, 429, 430, 431, 452, 487, 488, 490, 493, 504, 507, 512, 515], "graph_def": [53, 148, 289, 354, 362, 386, 387], "leakyrelu": [54, 512], "convertleakyreluoptim": 54, "below": [54, 66, 74, 211, 212, 329, 353, 387, 424, 425, 428, 429, 430, 431, 448, 451, 452, 454, 460, 464, 468, 470, 478, 479, 482, 485, 488, 493, 502, 503, 504, 506, 507, 509, 511, 512, 513, 515, 516], "subgraph": [54, 66, 105, 163, 515], "mul": [54, 65, 66, 69, 166, 170, 456, 509, 512], "maximum": [54, 189, 194, 211, 212, 227, 244, 270, 285, 294, 325, 332, 347, 391, 431, 447, 449, 451, 465, 504, 507, 512, 514], "note": [54, 155, 193, 296, 336, 349, 397, 426, 428, 430, 431, 448, 451, 454, 456, 458, 462, 465, 470, 473, 478, 482, 485, 487, 491, 493, 495, 504, 507, 509, 512, 513, 515, 516, 517], "coeffici": [54, 204, 504], "less": [54, 148, 165, 211, 212, 419, 446, 452, 465, 492, 504], "than": [54, 148, 227, 244, 270, 285, 419, 426, 428, 446, 449, 460, 490, 498, 502, 503, 504, 507, 509, 511, 514, 515], "valid": [54, 67, 68, 105, 194, 197, 207, 211, 212, 229, 272, 296, 324, 325, 349, 362, 426, 428, 429, 449, 451, 452, 455, 458, 461, 463, 465, 476, 490, 504, 507, 509, 510], "nan": 55, "random": [55, 148, 180, 211, 212, 240, 244, 282, 285, 292, 308, 332, 334, 345, 391, 395, 419, 426, 465, 504, 506, 514, 517], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98], "consist": [55, 63, 424, 425, 493, 512, 515], "placehold": [56, 225, 268], "convertplaceholdertoconst": 56, "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 165, 180, 181, 182, 183, 184, 187, 188, 194, 195, 196, 197, 199, 201, 202, 204, 208, 211, 212, 229, 272, 292, 313, 314, 316, 321, 325, 342, 345, 403, 429, 449, 458, 461, 465, 486, 503, 506, 512, 515, 518], "inject": [59, 465], "dummi": [59, 187, 230, 231, 273, 274, 300, 353, 428, 449, 459, 464, 465, 487], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 425, 429, 458], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 220, 263, 406, 426, 430, 431, 448, 506, 509, 515], "fetch": [61, 165, 169, 220, 263, 430, 449, 498, 499, 500], "reshap": [61, 67, 68, 73, 512], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 162, 170, 415, 425, 427, 448, 493, 512], "fold": [62, 63, 165, 166, 290, 458, 509, 512], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 188, 191, 192, 211, 212, 227, 243, 244, 270, 284, 285, 294, 298, 323, 347, 351, 429, 449, 458, 504, 509, 514], "self": [63, 165, 166, 187, 211, 212, 364, 429, 430, 448, 449, 461, 464, 487, 511, 513, 515], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 157, 188, 211, 212, 227, 270, 392, 419, 451, 465, 478, 482, 486, 498, 499, 509, 512, 515, 517], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 458], "math": [66, 507], "fuseconvwithmathoptim": 66, "elimin": [66, 492], "sub": [66, 165, 172, 187, 245, 426, 515], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 362, 372, 430], "strip": [67, 68, 70, 83, 84, 148, 513], "port": [67, 68, 70, 487, 494], "other": [67, 68, 70, 155, 162, 170, 226, 269, 298, 351, 362, 423, 425, 430, 431, 451, 458, 461, 463, 465, 467, 488, 502, 504, 507, 512, 514, 515, 518], "underli": [67, 68, 70, 157], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 215, 216, 258, 259, 387, 406, 408, 425, 429, 448, 449, 452, 453, 454, 464, 465, 507, 512, 513, 515], "entri": [67, 68, 70, 152, 176, 251, 291, 329, 419, 463], "index": [67, 68, 70, 105, 172, 207, 212, 220, 225, 229, 263, 268, 272, 307, 419, 449, 464, 486, 490, 512], "everi": [67, 68, 70, 189, 192, 194, 211, 212, 323, 325, 429, 448, 473, 478, 482, 509, 515], "identifi": [67, 68, 70, 157, 296, 349, 362, 493, 504, 509], "want": [67, 68, 70, 187, 211, 212, 225, 227, 268, 270, 325, 392, 408, 425, 429, 448, 449, 454, 465, 473, 485, 486, 493, 502, 511, 513, 515], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 155, 157, 165, 184, 190, 197, 207, 296, 323, 324, 325, 349, 354, 406, 428, 487, 504, 505], "valueerror": [67, 68, 70, 165, 296, 349, 406, 457], "If": [67, 68, 70, 74, 157, 166, 172, 211, 212, 215, 216, 229, 244, 258, 259, 272, 285, 324, 354, 387, 406, 408, 424, 425, 430, 446, 448, 449, 454, 462, 463, 464, 465, 471, 479, 480, 483, 485, 491, 496, 502, 504, 507, 509, 511, 512, 513, 514, 515], "isn": [67, 68, 70], "t": [67, 68, 70, 143, 157, 171, 189, 211, 212, 244, 247, 285, 298, 351, 425, 429, 451, 452, 454, 465, 466, 486, 491, 504, 507, 509, 515, 517], "present": [67, 68, 70, 451, 493, 505, 512], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 187, 229, 272, 344, 405, 449], "ha": [67, 68, 70, 74, 151, 157, 193, 194, 245, 293, 323, 325, 346, 406, 424, 426, 429, 430, 431, 448, 456, 461, 465, 466, 471, 485, 490, 491, 493, 496, 504, 506, 507, 508, 511, 512, 515], "access": [67, 68, 70, 208, 209, 212, 414, 419, 480, 483, 487], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 157, 165, 189, 194, 195, 196, 201, 202, 211, 212, 227, 244, 270, 285, 296, 300, 307, 323, 324, 325, 329, 331, 332, 349, 353, 388, 390, 391, 405, 406, 411, 418, 419, 423, 424, 425, 426, 429, 430, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 473, 476, 479, 485, 487, 488, 490, 491, 492, 493, 496, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 212, 289, 290, 456], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 219, 244, 262, 285, 449, 452, 514], "instancenorm": [68, 512], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 451], "erf": 69, "layernorm": [70, 512], "fuselayernormoptim": 70, "remap": [70, 157], "smaller": [70, 244, 285, 452, 465, 504, 514], "case": [70, 74, 157, 166, 172, 212, 226, 243, 244, 245, 269, 284, 285, 291, 315, 320, 328, 364, 431, 448, 452, 453, 454, 458, 460, 464, 469, 473, 485, 486, 487, 490, 496, 499, 500, 502, 504, 505, 507, 509, 510, 514, 516, 517, 518], "fusedbatcnormv3": 70, "And": [70, 424, 425, 446, 465, 471, 512], "further": [70, 212, 423, 466, 467, 468, 470, 479, 485, 507], "restrict": [70, 157, 211, 212, 504, 511], "2d": [70, 512], "3d": [70, 505, 512], "kera": [70, 116, 176, 187, 207, 212, 229, 236, 251, 272, 279, 357, 362, 430, 448, 454, 467, 475, 476, 510], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 208, 211, 212, 465, 504], "cfg": [71, 72, 165, 208, 342, 403, 411, 430, 431], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 429, 430, 431, 458, 465, 507, 509, 510, 512, 516], "ident": [74, 80, 188, 423, 452], "three": [74, 207, 227, 270, 331, 388, 390, 425, 429, 430, 447, 462, 466, 479, 493, 503, 507, 508, 511, 512, 513], "d": [74, 165, 452, 460, 486, 488, 494, 504, 518], "those": [74, 157, 335, 396, 419, 451, 452, 453, 460, 465, 466, 503, 504, 507, 515], "child": [74, 151, 158, 513], "b1": 74, "c1c2": 74, "d1": [74, 419], "c1": 74, "c2": 74, "memori": [74, 165, 291, 315, 320, 328, 364, 419, 447, 448, 453, 465, 466, 468, 502, 504, 507, 509, 512, 515, 518], "bound": [74, 172, 181, 244, 285, 296, 332, 349, 391, 464, 514], "like": [74, 96, 98, 148, 157, 187, 207, 212, 215, 216, 217, 229, 258, 259, 260, 272, 291, 300, 325, 328, 329, 353, 362, 387, 408, 424, 425, 426, 429, 430, 451, 452, 453, 461, 473, 488, 490, 503, 504, 507, 509, 510, 512, 515], "relu": [74, 78, 109, 425, 458, 512, 513], "relu6": [74, 458], "updat": [74, 158, 162, 165, 183, 189, 207, 325, 353, 387, 416, 457, 464, 465, 471, 476, 479, 495, 504, 509, 512, 515, 516], "graphdef": [74, 148, 362, 386, 467], "grappler": [75, 458], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 150, 160, 164, 174, 184, 226, 244, 246, 247, 249, 250, 269, 285, 296, 300, 349, 353, 358, 362, 508], "leverag": [75, 426, 428, 452, 456, 468, 485, 503, 507, 509, 515], "built": [75, 176, 198, 213, 214, 218, 223, 227, 228, 233, 235, 237, 238, 240, 241, 244, 249, 251, 256, 257, 261, 264, 266, 270, 271, 276, 278, 280, 281, 282, 283, 285, 329, 353, 356, 364, 387, 408, 426, 429, 449, 454, 465, 478, 482, 502, 507, 511, 514, 515, 517], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 162, 170, 425, 430, 448, 461, 465, 468, 504, 507, 508, 509, 512, 513], "print": [77, 151, 152, 187, 300, 353, 406, 419, 454, 464, 465, 487, 488, 504, 512, 515], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 155, 157, 172, 353, 387, 419, 424, 425, 429, 446, 449, 452, 453, 454, 460, 464, 465, 486, 493, 504, 506, 507, 508, 512, 517], "move": [78, 157, 425, 491, 506, 509, 510], "squeez": [78, 425], "movesqueezeafterreluoptim": 78, "match": [78, 102, 157, 187, 296, 297, 349, 350, 452, 486, 509], "pre": [79, 116, 158, 187, 215, 216, 227, 258, 259, 270, 354, 387, 408, 449, 452, 453, 465, 473, 490, 504, 505, 507, 509, 513, 515], "entranc": [79, 181, 218], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 510], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 164, 428, 505, 509, 512], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 166, 201, 212, 227, 244, 270, 285, 296, 349, 419, 429, 431, 446, 448, 449, 452, 454, 458, 465, 469, 473, 478, 482, 504, 506, 507, 509, 512, 513, 514, 515], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 468, 513], "switchoptim": 85, "condit": [85, 227, 228, 229, 244, 270, 271, 272, 285, 331, 388, 390, 449, 463, 514, 515], "graphrewriterbas": 86, "abstract": [86, 173, 181, 244, 285, 286, 291, 328, 429, 431, 460], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 468, 504], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 188, 229, 272, 293, 296, 346, 349, 423, 424, 425, 426, 429, 430, 431, 448, 449, 452, 453, 454, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 478, 482, 487, 489, 490, 493, 498, 503, 504, 506, 507, 509, 512, 513, 515], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 419, 420], "th": [89, 90], "gpu": [89, 90, 97, 157, 211, 212, 428, 446, 461, 465, 466, 470, 476, 485, 506, 507, 509], "freezevaluewithoutcalibtransform": 90, "95": [90, 300, 353, 464, 518], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 151, 156, 157, 211, 212, 419, 428, 430, 446, 447, 461, 465, 466, 468, 470, 476, 485, 493, 505, 506, 507, 508, 509, 513], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 513], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 505, 518], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 364, 425, 429, 431, 448, 465, 473, 478, 482, 486, 492, 502, 504, 505, 511, 512, 515, 518], "better": [96, 211, 212, 215, 216, 258, 259, 307, 354, 387, 408, 453, 464, 466, 504, 505, 507, 509, 511, 515], "perform": [96, 140, 172, 204, 211, 212, 227, 239, 240, 245, 270, 282, 291, 315, 320, 328, 335, 353, 364, 387, 392, 396, 424, 425, 426, 429, 430, 446, 449, 450, 451, 453, 455, 456, 461, 462, 464, 465, 466, 467, 468, 470, 474, 476, 479, 485, 491, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 515, 517, 518], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 217, 242, 244, 247, 249, 250, 252, 260, 285, 364, 426, 465, 475, 479, 485, 493, 503, 507, 512, 514, 515], "postcseoptim": 98, "duplic": [98, 108, 332, 391], "quantizev2": 98, "decreas": [98, 490, 504], "size": [98, 166, 191, 192, 219, 220, 226, 229, 235, 240, 244, 262, 263, 269, 272, 278, 282, 285, 323, 364, 419, 423, 430, 448, 449, 454, 457, 465, 485, 486, 502, 504, 509, 512, 514, 517, 518], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 193, 323, 504], "export": [101, 212, 292, 296, 345, 349, 428, 459, 471, 486, 488, 513, 516], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 212, 289, 290, 456], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 166], "onnxopschema": 104, "domain": [104, 105, 211, 212, 504, 515], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 195, 196, 201, 202, 291, 296, 328, 349, 362, 381, 386, 423, 425, 431, 447, 466, 478, 482, 485, 493, 504, 505, 512, 515], "get_max_supported_opset_vers": 104, "packag": [104, 429, 457, 462, 485, 486, 505, 510, 515], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 424, 493, 494, 498, 499, 500, 515], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 165, 227, 228, 240, 244, 270, 271, 282, 285, 370, 371, 375, 430, 431, 514], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 187], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 157, 232, 244, 275, 285, 324, 449, 508, 511], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 212, 289, 290, 456], "input_shap": [105, 231, 274, 449], "input_dtyp": 105, "sometim": [105, 425, 451, 507], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 203, 243, 244, 284, 285, 293, 298, 326, 346, 351, 456, 463, 474, 496, 499, 500, 504, 505, 509, 512, 514, 518], "datatyp": [105, 165, 508, 515, 518], "save_protobuf": 105, "path": [105, 148, 158, 162, 165, 187, 203, 207, 208, 227, 228, 229, 244, 270, 271, 272, 285, 286, 289, 290, 291, 302, 303, 304, 306, 315, 320, 324, 326, 328, 329, 342, 354, 362, 386, 387, 403, 416, 419, 425, 426, 429, 449, 451, 454, 460, 464, 465, 466, 467, 471, 474, 485, 488, 490, 493, 498, 499, 500, 503, 509, 514, 517], "as_text": 105, "save": [105, 156, 157, 184, 207, 211, 212, 229, 272, 289, 290, 329, 362, 387, 408, 409, 414, 419, 425, 429, 460, 465, 466, 467, 469, 473, 478, 482, 488, 493, 498, 499, 500, 503, 507, 509, 512], "protobuf": [105, 488], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 486], "dest": 105, "equal": [105, 143, 148, 171, 406, 419, 504, 509], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 157, 229, 272, 300, 353, 430, 455, 459, 461, 464, 476, 485, 491, 495, 504, 506, 512, 515], "df": 105, "initialize_name_count": 105, "avoid": [105, 157, 165, 166, 227, 270, 425, 513], "conflict": [105, 457], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 244, 285, 514], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 157, 189, 211, 212, 424, 452, 455, 459, 468, 473, 504, 509, 510, 512, 515], "const_node_valu": 105, "graph_output": 105, "constant": [105, 290, 292, 332, 334, 340, 345, 391, 395, 401, 412, 448, 458, 488, 514], "tf": [105, 116, 148, 187, 207, 226, 227, 228, 229, 244, 269, 270, 271, 272, 285, 360, 362, 454, 467, 505, 508, 510, 514], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 430], "quantized_nod": 107, "dq": [107, 109, 131, 512], "pair": [107, 211, 212, 430, 448, 465, 466, 510], "befor": [107, 109, 151, 170, 180, 189, 194, 196, 201, 203, 205, 211, 212, 227, 270, 323, 325, 327, 424, 431, 448, 449, 452, 453, 454, 457, 458, 462, 465, 480, 483, 489, 490, 507, 509, 511, 513, 515], "merg": [108, 219, 262, 342, 403, 480, 483, 513, 515], "mergeduplicatedqdqoptim": 108, "y": [109, 211, 212, 244, 285, 332, 391, 451, 457, 471, 512, 514], "shareqdqforitexypatternoptim": 109, "break": [109, 454, 465], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 187, 362, 511, 512, 513], "under": [110, 211, 212, 229, 272, 418, 424, 426, 428, 449, 463, 464, 465, 468, 473, 474, 485, 493, 503, 504, 505, 509, 513, 515], "singleton": [110, 419], "specifi": [110, 157, 165, 172, 207, 211, 212, 215, 216, 244, 245, 258, 259, 285, 291, 296, 300, 302, 303, 306, 315, 320, 328, 329, 349, 353, 354, 387, 406, 408, 418, 419, 430, 431, 454, 458, 464, 465, 473, 487, 493, 497, 498, 499, 500, 502, 504, 506, 509, 514, 515, 517], "graphrewriterhelp": 110, "encapsul": [110, 215, 216, 258, 259, 354, 387, 408, 467], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 430], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 298, 351, 429, 513, 515], "fakequant": 113, "per_channel": [113, 430, 431, 458, 507, 517], "8": [113, 157, 166, 211, 212, 243, 284, 425, 430, 447, 458, 462, 492, 493, 504, 505, 509, 512, 515, 518], "channel_axi": [113, 168, 171], "symmetr": [113, 431, 507, 509, 514, 515], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 155, 165, 166, 172, 212, 329, 353, 364, 418, 446, 452, 453, 468, 491, 492, 493, 497, 499, 500, 504, 505, 509, 511], "There": [115, 329, 331, 388, 390, 451, 452, 458, 461, 465, 468, 490, 492, 493, 509, 512, 515, 517], "instanc": [115, 116, 172, 211, 212, 215, 216, 245, 258, 259, 297, 298, 300, 303, 306, 309, 310, 312, 313, 314, 332, 344, 350, 351, 353, 354, 387, 391, 405, 408, 416, 419, 423, 424, 425, 429, 446, 465, 470, 476, 509, 515, 517, 518], "global": [115, 189, 211, 212, 309, 310, 312, 313, 314, 323, 405, 419, 425, 465, 504, 506, 515], "class": [116, 155, 165, 184, 190, 197, 307, 354, 387, 425, 426, 430, 448, 449, 452, 464, 465, 476, 502, 503, 507, 510, 513, 515, 517], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 195, 196, 201, 325, 448, 452, 453, 465, 504, 515], "process": [116, 140, 152, 172, 189, 194, 195, 196, 203, 205, 207, 211, 212, 215, 216, 227, 228, 229, 240, 244, 245, 258, 259, 270, 271, 272, 282, 285, 323, 325, 327, 331, 332, 354, 387, 388, 390, 391, 408, 418, 419, 426, 429, 430, 431, 447, 448, 449, 452, 453, 454, 456, 465, 469, 490, 492, 493, 495, 503, 504, 507, 509, 512, 513, 514, 517], "model_nam": [116, 211, 212], "special": [116, 157, 187, 364, 425, 448, 464, 465, 502, 504, 516], "decid": [116, 211, 212, 294, 325, 347, 429, 430, 465, 507, 510, 515], "qat_clone_funct": 116, "leav": [116, 479], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 458], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 458], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 382, 386, 429], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 155, 157, 180, 212, 242, 292, 302, 306, 307, 308, 345, 411, 423, 449, 453, 454, 456, 460, 462, 465, 507, 512], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 205, 244, 285, 327, 329, 426, 451, 452, 453, 461, 465, 466, 478, 482, 493, 504, 506, 512, 514, 515, 517], "staticmethod": 139, "function": [139, 155, 195, 196, 201, 211, 212, 215, 216, 228, 258, 259, 271, 303, 306, 315, 320, 424, 425, 426, 429, 430, 431, 446, 448, 452, 453, 456, 460, 461, 462, 464, 465, 466, 476, 486, 492, 493, 504, 507, 509, 510, 511, 512, 513, 515, 516], "smoothquantcalibr": 140, "dataset": [140, 141, 165, 203, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 238, 247, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 281, 292, 296, 297, 298, 300, 329, 345, 349, 350, 351, 353, 354, 387, 408, 411, 426, 428, 429, 430, 448, 454, 459, 464, 465, 473, 487, 488, 498, 504, 507, 509, 510, 512, 515, 517, 518], "outlier": [140, 430, 447, 451, 490, 509, 512], "ignor": [140, 419, 447, 449, 509, 512, 515], "smoothquantscal": 141, "alpha": [141, 156, 160, 170, 183, 204, 507, 515], "scales_per_op": 141, "individu": [141, 189, 323, 381, 386, 423, 493, 504, 512], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 289], "default_opset_vers": 142, "bia": [143, 211, 212, 509, 513], "correct": [143, 171, 207, 211, 212, 296, 297, 298, 300, 324, 349, 350, 351, 353, 423, 468], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 452, 461], "our": [143, 162, 165, 211, 212, 426, 428, 456, 465, 486, 487, 490, 511, 516], "task": [143, 227, 234, 270, 277, 300, 353, 449, 452, 453, 456, 461, 464, 465, 488, 492, 495, 504, 509, 512, 518], "close": [143, 171, 447, 494], "w_int8": [143, 171], "u": [143, 171, 468, 487, 492], "w_fp32": [143, 171], "varianc": [143, 171, 451], "differ": [143, 167, 171, 174, 180, 198, 211, 212, 220, 229, 244, 246, 263, 272, 285, 291, 300, 306, 308, 317, 328, 353, 364, 413, 423, 425, 426, 430, 448, 449, 451, 452, 454, 455, 460, 461, 464, 465, 467, 478, 482, 487, 490, 493, 502, 504, 507, 512, 513, 514, 515], "wise": [143, 154, 156, 158, 166, 171, 211, 212, 332, 335, 391, 392, 396, 430, 461, 490, 504, 513, 515, 517], "minim": [143, 171, 332, 391, 430, 431, 447, 452, 455, 464, 465, 478, 482, 504, 507, 515], "scale_c": [143, 171], "shift": [143, 171, 240, 282, 486, 514], "notic": [143, 171, 245, 463, 466, 488, 510], "first": [143, 157, 165, 171, 188, 209, 211, 212, 227, 270, 296, 342, 349, 392, 403, 419, 425, 426, 429, 430, 431, 449, 451, 462, 466, 470, 479, 480, 483, 486, 488, 489, 490, 506, 507, 508, 509, 511, 512, 513, 515, 517], "empir": [143, 171], "solut": [143, 171, 428, 429, 430, 457, 470, 474, 479, 505, 509, 510, 512, 515, 516], "don": [143, 171, 189, 211, 212, 425, 491, 504, 515], "min": [143, 166, 171, 181, 212, 419, 451, 488, 490, 504, 507, 509, 512, 514, 515], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 172, 187, 370, 371, 375, 415, 425, 476, 498, 499, 500, 511, 513, 515], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 452], "1024": [146, 229, 272, 471], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 419], "version1": [148, 419], "version2": [148, 419], "version1_gt_version2": [148, 419], "greater": [148, 419, 498, 504, 515], "version1_eq_version2": [148, 419], "version1_gte_version2": [148, 419], "version1_lte_version2": [148, 419], "disable_random": 148, "seed": [148, 180, 211, 212, 308, 419, 465, 517], "disabl": [148, 211, 212, 423, 485, 490, 508, 509], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 236, 279, 419, 454, 460, 465, 468, 513], "is_ckpt_format": 148, "model_path": [148, 166, 451, 498], "ckpt": [148, 354, 362, 387, 518], "folder": [148, 229, 234, 272, 277, 354, 387, 418, 449, 473, 478, 482, 491, 498, 499, 500, 509, 513], "is_saved_model_format": 148, "saved_model": [148, 302, 509], "get_estimator_graph": 148, "estim": [148, 300, 353, 362, 515], "input_fn": [148, 362], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 172, 181, 211, 212, 302, 354, 364, 387, 406, 408, 419, 425, 426, 428, 431, 446, 448, 449, 451, 452, 453, 454, 456, 459, 464, 465, 466, 467, 468, 472, 474, 487, 488, 496, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "scope": [148, 424, 430, 465], "onc": [148, 157, 176, 205, 251, 327, 331, 388, 390, 430, 431, 448, 485, 491, 504, 505, 515, 518], "both": [148, 212, 423, 426, 429, 453, 465, 469, 488, 490, 492, 504, 506, 507, 509, 512, 515], "compat": [148, 362, 424, 454, 467, 480, 483, 485, 504, 510], "v1": [148, 239, 240, 282, 297, 298, 300, 350, 351, 353, 362, 454, 456, 457, 464, 467, 489, 504, 510, 511, 512, 518], "suffix": 148, "time": [148, 157, 211, 212, 244, 285, 300, 332, 353, 364, 391, 419, 430, 448, 451, 454, 457, 465, 473, 475, 478, 482, 485, 486, 491, 494, 498, 499, 502, 504, 505, 507, 509, 511, 513, 514, 515], "got": [148, 430, 457, 513], "iterator_sess_run": 148, "sess": [148, 362], "iter_op": 148, "feed_dict": [148, 226, 269], "output_tensor": [148, 362], "measur": [148, 245, 354, 413, 426, 429, 446, 451, 452, 464, 465, 509, 513, 515, 518], "integr": [148, 174, 246, 429, 465, 486, 487, 492, 509], "makeiter": 148, "feed": [148, 226, 269, 452, 504], "end": [148, 194, 195, 196, 201, 211, 212, 227, 243, 244, 270, 284, 285, 325, 331, 388, 390, 429, 430, 431, 452, 453, 458, 462, 465, 479, 495, 502, 504, 513, 514, 515], "predict": [148, 244, 249, 285, 293, 297, 298, 300, 346, 350, 351, 353, 387, 426, 452, 464, 476, 509, 512, 513, 514], "pred": [148, 300, 353, 464], "collate_tf_pr": 148, "collat": [148, 165], "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 199, 201, 227, 270, 325, 448, 449, 472, 504, 509, 512, 515], "strip_unused_lib": 148, "offici": [148, 293, 297, 298, 346, 350, 351, 423, 512], "r1": 148, "15": [148, 458, 462, 499], "branch": [148, 424], "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 152, 157, 158, 162, 187, 198, 207, 209, 211, 212, 307, 324, 362, 406, 409, 411, 419, 428, 430, 487, 488, 494, 505, 509, 513, 515], "val": [148, 207, 229, 232, 272, 275, 324, 451, 465, 490], "tensor_v": 148, "int8_node_name_revers": 148, "revers": [148, 488], "tf_diagnosis_help": 148, "fp32_model": [148, 152, 165, 290, 419, 429, 509], "quan_model": 148, "save_path": [148, 289, 290, 429, 467], "diagnosi": [148, 211, 212, 465, 488, 489, 490, 505, 510, 516], "generate_feed_dict": 148, "input_tensor": [148, 362], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 362], "associ": [148, 157, 296, 349], "search": [148, 151, 166, 180, 181, 187, 201, 208, 212, 215, 216, 258, 259, 291, 293, 303, 306, 307, 308, 328, 332, 346, 391, 419, 428, 461, 464, 468, 469, 479, 504, 505, 509, 513, 515, 516], "look": [148, 198, 429, 431, 458, 464, 487, 488, 490, 517], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 152, 157, 172, 188, 193, 200, 205, 229, 234, 245, 272, 277, 296, 323, 327, 329, 336, 349, 397, 419, 424, 425, 426, 448, 449, 452, 454, 456, 458, 465, 466, 492, 493, 495, 504, 507, 508, 509, 511, 512, 515, 517], "actawareweightqu": 149, "example_input": [149, 159, 162, 164, 165, 166, 211, 212, 290, 456], "calib_func": [149, 165, 166, 387, 508], "data_typ": [149, 166, 344, 405], "enable_full_rang": [149, 166, 509], "algo": [149, 411], "torch": [150, 151, 152, 153, 154, 157, 158, 160, 161, 162, 163, 165, 166, 170, 184, 187, 188, 190, 198, 208, 211, 212, 290, 354, 387, 418, 425, 428, 431, 432, 452, 454, 456, 465, 466, 467, 468, 473, 476, 488, 507, 509, 512, 513], "bf16modulewrapp": 150, "bf16modul": 150, "mix": [150, 159, 211, 212, 330, 342, 354, 389, 403, 428, 429, 436, 461, 468, 474, 475, 476, 516], "precis": [150, 159, 211, 212, 215, 216, 258, 259, 291, 298, 300, 301, 328, 330, 342, 351, 353, 354, 364, 389, 392, 403, 419, 428, 429, 430, 436, 446, 447, 453, 454, 458, 461, 468, 474, 475, 476, 505, 506, 507, 509, 512, 515, 516], "mixed_precision_model": 150, "bf16_symbolic_trac": 150, "fx_sub_module_list": 150, "trace": [150, 152, 163, 165, 187, 211, 212, 290, 394, 425, 475, 515], "_description_": 150, "is_leaf": 151, "judg": 151, "nn": [151, 158, 160, 162, 165, 166, 187, 188, 198, 211, 212, 290, 354, 387, 418, 425, 452, 465, 467, 509, 512, 513], "trace_gptq_target_block": 151, "module_typ": 151, "modulelist": 151, "sequenti": [151, 225, 268, 329, 331, 388, 390, 515], "stack": 151, "structur": [151, 188, 199, 200, 211, 212, 325, 343, 404, 419, 461, 484, 486, 489, 498, 504, 505, 507, 513, 516, 518], "critic": [151, 198, 423], "llm": [151, 202, 428, 504, 505, 509, 512], "gptq_related_block": 151, "embed": [151, 165, 447, 504], "transformers_pr": 151, "todo": [151, 227, 230, 270, 273, 296, 342, 349, 403], "transformers_nam": 151, "find_lay": 151, "conv1d": [151, 431], "find_layers_nam": 151, "log_quantizable_layers_per_transform": 151, "transformer_block": 151, "maxq": 151, "gptquantiz": 151, "nsampl": [151, 166, 509], "use_max_length": [151, 166], "pad_max_length": [151, 166], "layer_wis": [151, 166, 418, 509], "compress": [151, 292, 315, 320, 345, 364, 408, 421, 428, 436, 452, 461, 465, 485, 487, 502, 503, 504, 505, 507, 512, 516, 518], "pretrain": [151, 414, 468, 474], "url": [151, 229, 272, 424, 463, 496, 497, 504], "arxiv": [151, 183, 201, 202, 325, 428, 447, 504, 505, 509, 512], "org": [151, 183, 201, 202, 296, 325, 349, 425, 451, 462, 480, 483, 504], "2210": [151, 509], "17323": [151, 509], "node_collector": 152, "hook": [152, 173, 177, 198, 253, 254, 315, 320, 411, 452, 453, 465, 504, 512, 513], "record": [152, 165, 174, 177, 227, 228, 229, 235, 246, 253, 270, 271, 272, 278, 419, 449, 490, 511, 513, 515], "hessiantrac": 152, "q_model": [152, 156, 212, 302, 387, 425, 428, 448, 449, 451, 454, 456, 459, 460, 464, 465, 467, 487, 488, 507, 508, 509], "criterion": [152, 173, 175, 176, 182, 183, 189, 194, 195, 196, 198, 201, 202, 206, 211, 212, 248, 251, 292, 345, 452, 453, 465, 504, 507, 512, 515, 517], "yao": 152, "zhewei": 152, "et": [152, 447, 509, 512], "al": [152, 447, 509, 512], "pyhessian": 152, "network": [152, 183, 189, 190, 325, 394, 426, 447, 452, 453, 456, 465, 487, 505, 507, 512, 515], "through": [152, 215, 216, 258, 259, 353, 354, 387, 428, 446, 458, 460, 461, 464, 471, 492, 502, 503, 504, 506, 507, 509, 512], "len": [152, 212, 244, 285, 449, 454, 514], "2020": 152, "ieee": [152, 466, 512], "intern": [152, 225, 268, 342, 403, 448, 449, 464, 504], "confer": [152, 504, 512], "big": [152, 451, 509], "dong": 152, "zhen": 152, "hawq": [152, 394, 515], "v2": [152, 394, 448, 454, 456, 457, 462, 474, 510, 512, 515, 516, 518], "advanc": [152, 211, 212, 423, 428, 430, 436, 504, 507, 517], "system": [152, 157, 172, 245, 419, 446, 471, 504, 518], "33": [152, 518], "18518": 152, "18529": 152, "openvinotoolkit": 152, "nncf": 152, "develop": [152, 364, 424, 425, 462, 465, 466, 468, 474, 485, 491, 504, 505, 508, 511], "hessian_trac": 152, "compare_weight": 152, "float_dict": 152, "ani": [152, 157, 296, 298, 341, 349, 351, 381, 386, 402, 406, 416, 419, 423, 428, 431, 454, 468, 473, 486, 487, 491, 492, 504, 511, 515], "quantized_dict": 152, "compar": [152, 300, 353, 419, 453, 464, 488, 504, 507, 509, 511, 512, 513, 515], "being": [152, 296, 349, 431, 493], "wt_compare_dict": 152, "float_model": 152, "state_dict": [152, 454, 509, 513], "qmodel": 152, "compute_error": 152, "state": [152, 188, 431, 471, 504], "weight_dict": 152, "hawq_top": 152, "enable_act": 152, "modul": [153, 154, 184, 190, 197, 305, 311, 321, 322, 425, 448, 452, 461, 464, 465, 467, 504, 506, 508, 509, 513, 516], "portabl": 155, "serial": [155, 157], "see": [155, 244, 285, 293, 346, 423, 424, 425, 427, 463, 465, 478, 479, 482, 485, 486, 490, 491, 509, 512, 513, 515], "copyreg": 155, "mechan": [155, 183, 504, 511, 516], "pickler": 155, "pickletool": 155, "comment": [155, 423, 430, 449, 464, 465, 509, 514], "unpickl": [155, 157], "load": [155, 157, 158, 227, 243, 244, 270, 284, 285, 354, 362, 387, 418, 419, 430, 448, 478, 482, 486, 488, 506, 507, 509, 512], "misc": [155, 463], "format_vers": 155, "compatible_format": 155, "except": [155, 157, 406, 419, 491, 507, 509], "pickleerror": 155, "pickl": [155, 157], "picklingerror": 155, "unpicklingerror": 155, "problem": [155, 227, 270, 300, 353, 464, 466, 486], "secur": [155, 428, 487, 505, 519], "violat": 155, "also": [155, 188, 226, 229, 244, 269, 272, 285, 293, 346, 353, 364, 387, 424, 426, 429, 430, 431, 448, 451, 455, 459, 461, 464, 465, 468, 473, 478, 479, 482, 485, 486, 487, 490, 491, 502, 504, 505, 507, 508, 509, 512, 515], "includ": [155, 174, 183, 187, 189, 204, 206, 211, 212, 227, 229, 236, 244, 246, 270, 272, 279, 285, 291, 301, 323, 328, 406, 419, 423, 429, 430, 431, 448, 449, 451, 462, 463, 464, 465, 468, 471, 474, 479, 491, 495, 498, 499, 500, 504, 507, 508, 509, 513, 515], "necessarili": 155, "limit": [155, 181, 332, 391, 419, 428, 451, 452, 509, 510, 513], "attributeerror": [155, 406], "eoferror": 155, "importerror": [155, 457], "indexerror": 155, "layerwisequ": 156, "pretrained_model_name_or_path": [156, 158], "op_cfg": 156, "output_dir": [156, 414, 465, 473, 474, 489, 490, 496, 499, 500], "5": [156, 170, 174, 211, 212, 231, 240, 246, 274, 282, 300, 353, 387, 429, 449, 456, 458, 464, 465, 490, 495, 498, 499, 504, 506, 507, 509, 512, 514, 515, 517, 518], "order": [156, 165, 293, 294, 329, 332, 335, 344, 346, 347, 391, 396, 405, 425, 451, 464, 488, 506, 509, 512, 513, 515], "memomeri": 156, "f": [157, 184, 452, 454, 507, 509, 512], "file_lik": 157, "map_loc": 157, "pickle_modul": [157, 184], "weights_onli": 157, "pickle_load_arg": 157, "facil": 157, "treat": [157, 448], "storag": [157, 428, 459, 464, 487, 490, 509, 512], "thei": [157, 245, 406, 423, 452, 458, 465, 473, 488, 491, 502], "deseri": 157, "were": [157, 300, 353, 471, 504], "fail": [157, 425, 448, 456, 494], "e": [157, 189, 211, 212, 423, 424, 452, 455, 459, 468, 473, 474, 478, 482, 504, 509, 512, 515], "becaus": [157, 193, 198, 244, 285, 323, 425, 490, 507, 512, 514, 515], "doesn": [157, 244, 285, 429, 454, 465, 466, 486, 517], "certain": [157, 510, 511], "howev": [157, 491, 504, 509, 512], "dynam": [157, 212, 217, 260, 290, 342, 403, 429, 448, 452, 456, 461, 465, 468, 473, 474, 475, 476, 479, 485, 505, 515, 518], "altern": [157, 211, 212, 387], "argument": [157, 212, 406, 426, 451, 489, 490, 493, 496, 498, 499, 500, 509], "callabl": [157, 211, 212, 298, 351, 408, 448], "locat": [157, 167, 207, 244, 285, 454, 471, 478, 482, 485, 493, 507, 510, 514, 517], "resid": 157, "tag": [157, 362, 512, 513], "wa": [157, 211, 212, 429, 465, 490, 491, 494, 505, 515], "builtin": [157, 454], "cuda": [157, 207, 466, 468, 470, 504, 507], "device_id": 157, "either": [157, 212, 296, 349, 469, 473, 493, 503, 506, 507], "final": [157, 187, 194, 207, 325, 430, 465, 471, 502, 504, 507, 510, 515], "alreadi": [157, 172, 229, 243, 245, 272, 284, 429, 449, 461, 480, 483, 487, 496, 515], "right": [157, 240, 282, 296, 349, 423, 424, 425, 485, 491, 512, 514], "otherwis": [157, 229, 244, 272, 285, 419, 423, 430, 449, 480, 483, 506, 509, 514], "fall": [157, 165], "back": [157, 165, 244, 250, 285, 451, 485, 491], "behavior": [157, 423, 429, 430, 431, 458, 467, 509, 513, 515, 517], "wasn": 157, "indic": [157, 173, 211, 212, 220, 225, 227, 263, 268, 270, 286, 296, 307, 349, 425, 448, 457, 488, 493, 513], "appear": [157, 423, 479, 485, 487], "ones": [157, 296, 349, 504], "put": [157, 229, 272, 449, 452], "user": [157, 172, 176, 187, 199, 207, 211, 212, 215, 216, 229, 232, 236, 244, 245, 251, 258, 259, 272, 275, 279, 285, 291, 315, 320, 326, 328, 329, 353, 354, 364, 387, 392, 405, 408, 419, 425, 426, 428, 429, 430, 431, 436, 446, 448, 452, 453, 456, 458, 461, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 479, 485, 492, 493, 494, 495, 498, 499, 500, 502, 503, 504, 505, 507, 508, 510, 512, 513, 514, 515, 519], "register_packag": 157, "readlin": 157, "tell": [157, 353, 387, 506], "seek": 157, "o": [157, 406, 462, 470, 488], "pathlik": 157, "metadata": 157, "primit": 157, "keyword": [157, 212], "unless": [157, 458], "implicitli": 157, "known": [157, 247, 332, 391, 465, 504, 513, 515], "insecur": [157, 487], "possibl": [157, 245, 451, 487, 503, 504, 508, 509, 515], "construct": [157, 227, 230, 231, 234, 242, 247, 249, 250, 252, 270, 273, 274, 277, 353, 358, 362, 405, 411, 423, 430, 431, 449, 454, 504, 515], "malici": 157, "arbitrari": [157, 465, 503], "code": [157, 187, 215, 216, 245, 258, 259, 302, 326, 329, 387, 408, 425, 428, 429, 430, 431, 449, 452, 453, 454, 460, 461, 463, 464, 468, 470, 472, 473, 474, 476, 479, 485, 489, 490, 492, 493, 494, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514], "never": [157, 515], "could": [157, 162, 170, 189, 215, 216, 229, 258, 259, 272, 329, 354, 387, 408, 423, 425, 453, 465, 503, 504, 507, 509, 510, 512, 516], "come": [157, 515], "untrust": 157, "unsaf": 157, "tamper": 157, "trust": [157, 451, 487], "load_state_dict": 157, "ram": 157, "surg": 157, "checkpoint": [157, 362, 418, 467], "By": [157, 187, 211, 212, 293, 346, 430, 431, 464, 467, 478, 479, 482, 504, 505, 509, 515], "decod": [157, 239, 240, 282, 293, 346, 464, 514], "byte": 157, "utf": [157, 243, 284], "unicodedecodeerror": 157, "ascii": 157, "codec": 157, "0x": 157, "incorrect": 157, "extra": [157, 298, 351, 465], "encod": [157, 296, 349, 488, 514], "latin1": 157, "them": [157, 187, 227, 270, 425, 431, 448, 451, 456, 458, 460, 488, 491, 503, 504, 509, 515], "keep": [157, 198, 207, 324, 392, 425, 429, 484, 485, 510], "later": [157, 162, 170, 492, 493, 513], "byte_arrai": 157, "xdoctest": 157, "skip": [157, 513, 515], "undefin": [157, 207, 324], "filepath": [157, 419], "pt": [157, 418, 467, 489, 505, 507, 508, 509], "onto": 157, "lambda": [157, 509], "loc": 157, "bytesio": 157, "open": [157, 248, 292, 345, 411, 421, 423, 428, 456, 457, 465, 480, 483, 486, 487, 491, 492, 493, 505, 510], "rb": 157, "buffer": 157, "get_modul": [158, 162], "get_children": 158, "get_named_children": 158, "dowload_hf_model": 158, "repo_id": 158, "cache_dir": 158, "repo_typ": 158, "revis": 158, "download": [158, 229, 272, 449, 451, 462, 490, 496, 510], "hug": [158, 428, 492, 505], "face": [158, 423, 428, 436, 468, 472, 492, 494, 505, 510, 518], "hf": [158, 512, 518], "hub": [158, 428, 455, 459, 476], "load_empty_model": [158, 509], "automodelforcausallm": 158, "empti": [158, 211, 212, 471, 509], "get_super_module_by_nam": 158, "module_nam": [158, 183, 184, 194, 195, 196, 197, 199, 200, 201, 202, 204, 206, 325, 419], "father": [158, 187], "update_modul": 158, "new_modul": [158, 162, 165], "load_layer_wise_quantized_model": 158, "load_tensor_from_shard": 158, "shard": 158, "load_tensor": 158, "ipex_mixed_precis": 159, "definit": [160, 220, 225, 263, 268], "fakeaffinetensorquantfunct": 160, "affin": [160, 507], "teqlinearfakequ": 160, "orig_lay": 160, "mullinear": [160, 166], "input_scal": 160, "detector": 161, "transformerbasedmodelblockpatterndetector": 161, "pattern_lst": 161, "block_pattern": 161, "detect": [161, 165, 187, 211, 212, 296, 300, 349, 353, 358, 424, 425, 468, 475, 476, 504, 515], "ffn": [161, 198], "set_modul": [162, 165], "torchsmoothqu": [162, 512], "q_func": [162, 215, 216, 258, 259, 332, 335, 337, 338, 388, 391, 392, 396, 398, 399, 429, 430, 465, 515], "traced_model": [162, 163], "whose": [162, 170, 189, 324, 460, 512, 515], "absorb": [162, 165, 166, 170, 509], "update_sq_scal": [162, 165], "ipex_config_path": [162, 165], "smoothquant_scale_info": [162, 165], "ipex_config": [162, 165], "json": [162, 165, 228, 244, 271, 285, 418, 449, 467, 486, 493, 494, 498, 499, 500, 509, 514], "temporari": [162, 165, 419, 423], "trace_and_fuse_sub_graph": 163, "is_qat": 163, "tequant": 164, "absorb_to_lay": [164, 165, 166], "extra_config": [164, 166], "trainabl": [164, 428, 505, 509], "get_embedding_contigu": 165, "contigu": 165, "is_fused_modul": 165, "_propagate_qconfig_help": 165, "collate_torch_pr": 165, "collate_result": 165, "input2tupl": 165, "append_attr": 165, "fx_model": 165, "fx_white_list": 165, "append": [165, 329, 332, 391, 425, 453, 465, 503], "graphmodul": [165, 425, 508], "addit": [165, 212, 408, 430, 431, 452, 479, 487, 493, 509, 510, 515], "dir": [165, 227, 270, 418, 449, 457, 460], "generate_activation_observ": 165, "observ": [165, 431, 509, 511, 513, 515], "what": [165, 194, 225, 268, 353, 387, 408, 423, 505], "check_cfg_and_qconfig": 165, "op_infos_from_cfg": 165, "output_tensor_ids_op_nam": 165, "paser_cfg": 165, "ops_nam": 165, "get_quantizable_ops_from_cfg": 165, "input_tensor_ids_op_nam": 165, "auto_copi": 165, "fetch_modul": 165, "op_nam": [165, 208, 211, 212, 343, 404, 419, 420, 430, 465, 504, 513], "simple_infer": 165, "get_example_input": 165, "example_inp": 165, "get_fallback_ord": 165, "confidence_batch": [165, 515], "fallback": [165, 212, 335, 336, 394, 396, 397, 456, 466, 488, 508, 515], "requantize_cfg": 165, "confid": 165, "ordered_op": 165, "get_mse_order_per_fp32": 165, "influenc": [165, 504], "last": [165, 183, 207, 211, 212, 448, 466, 468, 470, 475, 479, 507, 509, 512], "fallback_ord": 165, "get_mse_order_per_int8": 165, "get_torch_vers": 165, "match_datatype_pattern": 165, "calculate_quant_min_max": 165, "unsign": [165, 344, 405, 431, 509], "qmin": 165, "qmax": 165, "get_depth": 165, "depth": [165, 452, 508], "get_dict_at_depth": 165, "target_depth": 165, "nest": [165, 209], "get_element_under_depth": 165, "ops_lst": 165, "get_op_type_by_nam": 165, "quantizable_op": 165, "collect_weight_info": 165, "fc": [165, 212, 504], "param": [165, 172, 176, 217, 245, 251, 260, 300, 332, 353, 391, 419, 429, 467, 515], "_type_": 165, "get_module_input_output": 165, "module_hook_config": 165, "input_func": 165, "output_func": 165, "help": [165, 177, 253, 302, 467, 468, 474, 485, 493, 498, 499, 500, 509, 515, 516], "module_name_list": 165, "requir": [165, 166, 211, 212, 218, 329, 362, 386, 425, 429, 430, 446, 447, 448, 451, 453, 454, 458, 465, 466, 467, 469, 479, 485, 487, 492, 493, 496, 499, 500, 504, 507, 509, 510, 511, 512, 513, 515, 517], "fc1": [165, 166], "preprocess": [165, 211, 212, 227, 244, 270, 285, 405, 411, 454, 514], "usag": [165, 226, 269, 296, 302, 329, 349, 406, 430, 449, 454, 455, 468, 476, 487, 493, 498, 499, 500, 502, 506, 509, 514], "input_valu": 165, "output_valu": 165, "total_valu": 165, "get_absorb_lay": 165, "supported_lay": 165, "no_absorb_lay": 165, "allow": [165, 332, 391, 452, 454, 464, 465, 466, 487, 492, 504, 506, 509, 512, 515, 517], "absorpt": 165, "eg": [165, 209, 229, 272, 449, 506], "absorbed_1": 165, "xx": 165, "get_block_prefix": 165, "block_list": 165, "block_num": 165, "block_prefix": 165, "get_hidden_st": 165, "func": [165, 419, 507, 517], "calib": [165, 430], "rest": [165, 492, 493, 498, 499, 500], "part": [165, 185, 194, 323, 325, 425, 462, 466, 480, 483, 493, 495, 504, 512, 516], "total_block_kwarg": 165, "total_block_arg": 165, "quantize_4bit": 166, "quantil": [166, 515], "nf4": [166, 428, 509], "return_int": 166, "fp4": [166, 428, 509], "q_tensor": 166, "qdq_weight_asym": 166, "choos": [166, 229, 272, 461, 473, 505, 510, 512, 515, 517], "qdq_weight_sym": 166, "full_rang": 166, "rang": [166, 230, 231, 244, 273, 274, 285, 406, 408, 428, 429, 431, 447, 449, 451, 452, 453, 454, 465, 488, 490, 503, 504, 507, 509, 512, 514], "amax": 166, "qdq_weight_actor": 166, "select": [166, 204, 207, 212, 227, 270, 425, 426, 447, 461, 462, 485, 504, 507, 509, 513, 515], "quant_weight": 166, "search_clip": 166, "best": [166, 173, 244, 285, 286, 291, 328, 335, 396, 423, 426, 462, 468, 474, 485, 491, 502, 507, 509, 512, 514, 515], "num": [166, 419], "best_clip_ratio": 166, "group_dim": 166, "gptq_perm": 166, "perm": [166, 244, 285, 514], "int32": [166, 449, 509], "absorb_lay": 166, "absorb_dict": 166, "absorbed_lay": 166, "fc3": 166, "n_block": [166, 509], "oom": 166, "teq_quant": 166, "quant_weight_w_scal": 166, "algorithm_registri": 167, "algorithm_typ": 167, "registr": [167, 229, 236, 244, 272, 279, 285, 318], "algorithmschedul": 167, "conf": [167, 172, 173, 212, 215, 216, 245, 258, 259, 302, 309, 310, 312, 313, 314, 315, 320, 332, 335, 337, 338, 342, 354, 364, 387, 388, 391, 392, 396, 398, 399, 403, 406, 408, 425, 426, 428, 431, 446, 452, 459, 460, 465, 466, 467, 487, 489, 490, 503, 507, 508, 509, 511, 512, 515], "control": [167, 211, 212, 425, 465, 491, 504, 515], "phase": [167, 426, 465, 504, 507, 508, 515], "fastbiascorrect": [168, 171], "fast_bias_correct": [169, 211, 212, 345, 507], "weight_correct": [169, 211, 212, 345, 507], "kernel": [170, 211, 212, 429, 430, 515], "futur": [170, 215, 216, 247, 258, 259, 461, 465, 476, 498, 499, 500, 516], "weightcorrect": 171, "1e": [171, 512, 517], "05": [171, 212, 300, 353, 464, 512, 518], "evalu": [172, 173, 189, 211, 215, 216, 227, 245, 258, 259, 270, 286, 293, 296, 297, 298, 300, 302, 346, 349, 350, 351, 353, 354, 364, 387, 408, 411, 426, 429, 430, 449, 452, 453, 460, 461, 464, 465, 466, 468, 474, 476, 479, 485, 502, 504, 507, 511, 512, 513, 515, 517], "set_env_var": [172, 245], "env_var": [172, 245], "overwrite_exist": [172, 245], "env": [172, 245, 457, 498, 499, 500], "set_all_env_var": [172, 245], "physic": [172, 245, 423, 446, 493], "core": [172, 211, 212, 245, 424, 446, 463, 478, 482, 493, 518], "get_architectur": [172, 245], "architectur": [172, 245, 303, 306, 428, 446, 452, 465, 492, 504, 505, 509, 516], "get_threads_per_cor": [172, 245], "thread": [172, 211, 212, 245, 381, 386, 448, 495], "get_thread": [172, 245], "get_physical_id": [172, 245], "socket": [172, 245, 419, 493, 495, 518], "get_core_id": [172, 245], "id": [172, 243, 245, 284, 293, 295, 296, 297, 298, 346, 348, 349, 350, 351, 464, 493, 494, 498, 499, 500, 511, 515], "get_bounded_thread": [172, 245], "core_id": [172, 245], "bind": [172, 245], "run_inst": 172, "b_dataload": [172, 211, 212, 446, 465], "b_func": [172, 446], "benchmarkconfig": [172, 211, 212, 446, 451, 465], "accuraci": [172, 207, 211, 212, 215, 216, 258, 259, 286, 291, 300, 315, 320, 328, 353, 354, 364, 387, 392, 406, 408, 416, 425, 428, 430, 431, 447, 448, 449, 451, 453, 454, 455, 456, 464, 465, 476, 485, 487, 494, 495, 498, 499, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 516, 517, 518], "goal": [172, 286, 291, 315, 320, 328, 354, 387, 430, 448, 503, 507, 515], "prefer": [172, 291, 328, 387, 504, 509], "space": [172, 180, 181, 195, 196, 201, 202, 211, 212, 215, 216, 258, 259, 291, 298, 303, 306, 307, 308, 328, 332, 335, 342, 351, 354, 387, 391, 396, 403, 423, 424, 426, 429, 430, 431, 504, 507, 517], "etc": [172, 173, 243, 284, 286, 291, 298, 315, 320, 328, 351, 354, 387, 418, 428, 452, 461, 487, 491, 504, 511, 515], "generate_prefix": 172, "core_list": 172, "command": [172, 245, 408, 451, 454, 468, 470, 473, 478, 482, 486, 487, 489, 490, 491, 493], "numactl": [172, 457, 471, 479], "call_on": 172, "cmd": 172, "log_fil": [172, 380, 385], "window": [172, 446, 485, 486], "config_inst": 172, "raw_cmd": 172, "multi": [172, 185, 187, 198, 296, 349, 353, 387, 426, 448, 449, 461, 465, 502, 504, 507, 515], "trigger": [172, 194, 325], "summary_benchmark": 172, "summari": [172, 408, 451, 480, 483, 513, 518], "profil": [172, 212, 345], "benchmark_with_raw_cmd": 172, "fit_with_raw_cmd": 172, "cores_per_inst": [172, 211, 212, 446, 465, 506], "num_of_inst": [172, 211, 212, 446, 465, 506], "test": [172, 211, 212, 244, 285, 424, 428, 451, 462, 493, 498, 518], "fit": [172, 189, 211, 212, 332, 354, 387, 391, 406, 408, 425, 428, 446, 448, 449, 451, 454, 459, 460, 464, 465, 466, 467, 487, 488, 504, 507, 508, 509], "pb": [172, 211, 212, 354, 362, 387, 428, 446, 454, 459, 465, 467, 487, 490, 498, 513, 518], "eval_dataload": [172, 211, 212, 215, 216, 258, 259, 329, 332, 335, 337, 338, 354, 387, 388, 391, 392, 396, 398, 399, 408, 446, 460, 464, 465, 487, 507, 509, 515], "compon": [173, 286, 292, 329, 345, 425, 451, 454, 462, 463, 468, 485, 493, 503, 504], "quantizationawaretrainingcallback": 173, "pruningcallback": 173, "distillationcallback": 173, "basecallback": 173, "design": [173, 226, 249, 254, 269, 353, 392, 426, 428, 465, 473, 476, 504, 507, 516], "mainli": [173, 205, 254, 327, 428, 465, 504, 507], "prune": [173, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 211, 212, 254, 255, 292, 309, 310, 312, 313, 314, 318, 320, 321, 323, 324, 325, 327, 329, 345, 419, 428, 454, 455, 458, 459, 461, 503, 505, 516, 517], "distil": [173, 182, 211, 212, 246, 253, 254, 292, 345, 428, 455, 459, 461, 503, 516, 517], "In": [173, 191, 192, 193, 198, 199, 200, 204, 212, 226, 254, 269, 296, 323, 325, 349, 364, 423, 425, 426, 428, 429, 430, 448, 449, 451, 452, 453, 454, 464, 465, 475, 478, 479, 482, 488, 489, 490, 491, 498, 499, 500, 502, 503, 504, 507, 508, 509, 511, 512, 513, 514, 515, 516], "adaptor": [173, 211, 212, 344, 405, 411, 428, 431, 461, 508, 509, 510, 512, 513, 516], "deriv": [173, 183, 191, 192, 193, 199, 200, 201, 202, 203, 204, 205, 206, 286, 323, 325, 327], "pipelin": [173, 286, 303, 304, 329, 424, 453, 465, 503], "knowledg": [173, 174, 211, 212, 246, 286, 453, 455, 459, 461, 465, 467, 517], "transfer": [173, 234, 277, 286, 449, 452, 453, 465, 512], "teacher": [173, 211, 212, 286, 452, 453, 465, 518], "student": [173, 177, 211, 212, 227, 253, 270, 286, 449, 452, 453, 518], "distillation_conf": [173, 208, 286], "_epoch_ran": [173, 286], "integ": [173, 193, 194, 211, 212, 286, 296, 300, 307, 323, 325, 349, 353, 406, 429, 431, 447, 507, 509, 512, 515], "much": [173, 183, 211, 212, 244, 285, 286, 452, 479, 512, 514], "epoch": [173, 195, 196, 201, 286, 325, 408, 448, 452, 453, 454, 465, 503, 504, 517], "ran": [173, 286], "eval_frequ": [173, 286], "frequenc": [173, 194, 211, 212, 286, 325, 465, 504, 517], "term": [173, 195, 196, 201, 202, 204, 286, 424, 447, 452, 463, 464, 502, 503, 515], "best_scor": [173, 286], "metric": [173, 211, 212, 215, 216, 248, 258, 259, 286, 291, 292, 307, 315, 320, 328, 329, 345, 354, 387, 408, 411, 426, 429, 430, 449, 451, 454, 465, 466, 487, 507, 511, 512, 513, 515, 516, 517, 518], "best_model": [173, 286, 418, 509], "found": [173, 286, 428, 452, 466, 473, 490, 494, 512, 515, 518], "critet": [174, 246], "tensorflowcrossentropyloss": [174, 246], "pytorchcrossentropyloss": [174, 246], "tensorflowsparsecategoricalcrossentropi": 174, "tensorflowknowledgedistillationloss": [174, 246], "pytorchknowledgedistillationloss": [174, 246, 465], "pytorchintermediatelayersknowledgedistillationloss": [174, 246], "tensorflowcriterion": [174, 246], "pytorchcriterion": [174, 246], "criterion_registri": [174, 246], "criterion_typ": [174, 246], "registry_criterion": [174, 246], "param_dict": [174, 176, 246, 251], "crossentropyloss": [174, 211, 212, 452, 465], "sparsecategoricalcrossentropyloss": 174, "pytorch": [174, 176, 177, 184, 187, 190, 193, 194, 197, 202, 203, 211, 212, 226, 227, 229, 232, 236, 244, 246, 251, 253, 269, 270, 272, 275, 279, 285, 290, 291, 300, 301, 321, 323, 326, 328, 336, 345, 353, 354, 363, 387, 397, 412, 419, 424, 425, 426, 428, 429, 430, 431, 447, 448, 452, 453, 455, 458, 461, 462, 465, 466, 467, 468, 470, 473, 474, 475, 476, 485, 487, 496, 499, 500, 504, 505, 506, 509, 510, 512, 515, 517], "knowledgedistillationframework": [174, 246], "student_model": [174, 212, 246, 465], "teacher_model": [174, 211, 212, 246, 452, 453, 465], "knowledgedistillationloss": [174, 246, 465, 517], "temperatur": [174, 211, 212, 246, 465, 517], "loss_typ": [174, 180, 211, 212, 246, 465, 517], "ce": [174, 211, 212, 246, 465, 517], "loss_weight": [174, 211, 212, 246, 465, 517], "pytorchknowledgedistillationlosswrapp": [174, 246], "tensorflowknowledgedistillationlosswrapp": 174, "tensorflowknowledgedistillationlossextern": [174, 246], "intermediatelayersknowledgedistillationloss": [174, 246], "layer_map": [174, 212, 246, 452], "add_origin_loss": [174, 212, 246], "pytorchintermediatelayersknowledgedistillationlosswrapp": [174, 246], "selfknowledgedistillationloss": [174, 246], "selfknowledg": [174, 246], "pytorchselfknowledgedistillationloss": 174, "pytorchselfknowledgedistillationlosswrapp": 174, "multipl": [176, 185, 213, 214, 218, 219, 227, 228, 230, 231, 232, 233, 234, 238, 241, 244, 251, 256, 257, 261, 262, 264, 270, 271, 273, 274, 275, 276, 277, 281, 283, 285, 301, 354, 355, 356, 358, 364, 446, 449, 456, 465, 492, 495, 503, 504, 511, 512, 515], "tensorflowoptim": [176, 251], "pytorchoptim": [176, 251], "optimizer_registri": [176, 251], "optimizer_typ": [176, 251], "cross": [176, 251, 300, 353, 460, 515], "tensorflowsgd": [176, 251], "sgd": [176, 211, 212, 251, 452, 465, 506, 517], "tensorflowadamw": [176, 251], "tensorflow_addon": [176, 251], "adamw": [176, 251], "tensorflowadam": 176, "adam": [176, 517], "pytorchsgd": [176, 251], "record_output": [177, 253], "output_process": [177, 253], "get_activ": [177, 253], "hyper": [178, 517], "sa_optim": [178, 182], "simul": [179, 431], "anneal": 179, "register_search": 180, "searcher": [180, 187, 212, 308], "registri": [180, 181, 183, 189, 194, 203, 204, 205, 206, 323, 325, 327, 426], "sure": [180, 189, 194, 203, 205, 323, 325, 327, 446, 487], "search_spac": [180, 208, 212, 303, 306, 307, 308], "gridsearch": [180, 308], "grid": [180, 212, 308, 426, 504], "whole": [180, 308, 431, 487, 507, 518], "exhaust": [180, 212, 292, 308, 334, 345, 395, 506], "randomsearch": [180, 308], "randomli": [180, 244, 285, 308, 332, 391, 426, 512, 514, 515], "bayesianoptimizationsearch": [180, 308], "42": [180, 212, 308, 518], "bayesian": [180, 212, 292, 308, 334, 345, 395, 426, 504, 506], "xgbsearcher": 180, "higher_is_bett": [180, 211, 212, 353, 387, 515, 517], "reg": [180, 182, 184, 195, 196, 201, 202, 212], "min_train_sampl": [180, 212], "10": [180, 211, 212, 229, 272, 332, 391, 428, 446, 449, 456, 462, 465, 487, 488, 504, 506, 514, 515, 518], "xgboost": [180, 504], "searchspac": 181, "factori": [181, 360, 367, 369, 374, 377, 379, 384], "actual": [181, 300, 353, 454], "interv": [181, 200, 504], "store": [181, 183, 184, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 211, 212, 229, 272, 318, 325, 460], "continu": [181, 192, 296, 323, 349, 426, 465, 486, 504, 516], "learning_r": [181, 211, 212, 465, 506, 517], "001": [181, 229, 272, 449, 454, 512, 517], "num_train_epoch": [181, 465, 504], "20": [181, 244, 285, 490, 493, 498, 499, 500, 504, 514, 517, 518], "weight_decai": [181, 465, 517], "register_searchspac": 181, "pruner": [181, 182, 292, 309, 310, 311, 312, 313, 315, 320, 321, 323, 326, 345, 465, 504, 517], "basesearchspac": 181, "discretesearchspac": 181, "continuoussearchspac": 181, "hpo": [182, 215, 258, 504], "model_slim": [182, 184, 198], "auto_slim": [182, 184, 186], "pattern_analyz": [182, 184, 186], "weight_slim": [182, 184, 186, 198], "mha": [182, 184, 190, 197, 504], "ninm": [182, 184, 190], "nxm": [182, 184, 190, 200, 211, 212, 319, 323, 504], "basic": [182, 184, 187, 189, 197, 211, 212, 243, 284, 292, 303, 323, 334, 338, 341, 345, 395, 399, 402, 408, 461, 462, 465, 487, 506, 511], "block_mask": [182, 183, 184, 197], "pattern_lock": [182, 184, 197, 211, 212, 292, 311, 345], "progress": [182, 184, 197, 229, 272, 479, 485, 487, 504, 507], "retrain_fre": [182, 183, 184, 197, 504], "criteria": [182, 184, 211, 212, 291, 315, 320, 323, 325, 328, 425, 485, 512], "schedul": [182, 184, 194, 195, 196, 201, 202, 204, 211, 212, 292, 321, 325, 345, 465, 492, 493, 495, 503], "tf_criteria": [182, 184], "callback": [182, 315, 320, 408, 411, 425, 465, 503, 504, 507], "register_criterion": [183, 206], "get_criterion": 183, "pruningcriterion": [183, 206], "about": [183, 206, 419, 423, 448, 465, 490, 491, 504, 508, 515, 516, 518], "score": [183, 189, 194, 198, 206, 211, 212, 293, 294, 296, 297, 298, 300, 325, 346, 347, 349, 350, 351, 353, 394, 411, 425, 464, 488, 502, 504, 511, 515], "magnitudecriterion": [183, 206], "magnitud": [183, 206, 211, 212, 292, 300, 311, 345, 353, 461, 504], "criterion_class": [183, 206], "determin": [183, 189, 194, 206, 211, 212, 413, 423, 425, 447, 504, 507, 512], "gradientcriterion": 183, "gradient": [183, 309, 428, 461, 465, 504, 505, 518], "absolut": [183, 211, 212, 300, 353, 464, 465, 504, 507, 515], "snipcriterion": 183, "snip": [183, 211, 212, 325, 461, 504, 518], "product": [183, 428, 461, 466, 468, 469, 485, 491, 505, 507, 511, 515], "singl": [183, 205, 211, 212, 220, 227, 244, 263, 270, 285, 296, 325, 327, 349, 353, 387, 425, 449, 451, 462, 491, 504, 509, 512], "shot": [183, 201, 202, 205, 254, 325, 327, 426, 461, 465, 504, 505, 509], "connect": [183, 325, 485, 487, 494, 504, 511], "sensit": [183, 309, 325, 461, 504], "1810": [183, 325], "02340": [183, 325], "snipmomentumcriterion": 183, "snip_momentum": [183, 211, 212, 465, 504], "momentum": [183, 325, 461, 465, 504, 517], "preserv": [183, 447, 504, 509], "step": [183, 193, 194, 195, 196, 200, 201, 205, 211, 212, 323, 325, 327, 408, 430, 431, 451, 452, 453, 454, 465, 480, 483, 485, 498, 499, 500, 503, 504, 506, 508, 509, 511, 512, 513, 515], "beta": 183, "blockmaskcriterion": 183, "9": [183, 211, 212, 425, 462, 465, 504, 506, 512, 515, 517, 518], "retrainfreecriterion": 183, "pickle_protocol": 184, "_use_new_zipfile_seri": 184, "prepare_prun": [184, 504], "loss_func": [184, 203], "assertionerror": [184, 190, 197, 207, 323, 324, 325, 354], "auto": [185, 187, 211, 212, 330, 345, 389, 395, 419, 425, 447, 468, 471, 473, 475, 476, 504, 507, 509], "slim": [185, 186, 187, 296, 349, 360, 362, 467, 504], "round_multipli": 185, "spars": [185, 199, 325, 449, 505], "automat": [185, 187, 188, 211, 212, 229, 232, 239, 240, 272, 275, 282, 291, 301, 328, 425, 428, 446, 449, 461, 465, 466, 468, 470, 473, 474, 476, 478, 479, 480, 482, 483, 485, 492, 495, 503, 504, 507, 512, 514, 515], "model_slim_ffn2": 185, "some": [185, 187, 211, 212, 227, 270, 324, 430, 431, 449, 451, 456, 462, 464, 465, 487, 488, 489, 490, 493, 502, 504, 507, 508, 509, 512, 513, 515, 516, 518], "perman": [185, 423, 504], "obtain": [185, 187, 196, 201, 204, 207, 324, 425, 430, 493, 504, 511, 512, 515], "acceler": [185, 452, 465, 468, 476, 485, 488, 492, 504, 505, 508, 509, 512, 515], "directli": [185, 211, 212, 226, 269, 296, 300, 324, 349, 353, 464, 465, 472, 504, 506, 507, 513], "sprase": 185, "model_slim_mha": 185, "parse_auto_slim_config": [185, 504], "ffn2_sparsiti": [185, 504], "mha_spars": [185, 504], "generate_ffn2_pruning_config": 185, "consecut": [185, 187, 188, 504], "generate_mha_pruning_config": 185, "head": [185, 187, 191, 198, 207, 504, 518], "get_attribut": 187, "level": [187, 392, 406, 415, 423, 495, 512, 515], "descent": [187, 428, 505], "get_common_modul": 187, "layer1": [187, 211, 212, 465, 504, 507], "layer2": [187, 465, 504, 507], "nearest": [187, 244, 285, 509, 514], "print_iter": 187, "recipesearch": 187, "root": [187, 227, 228, 229, 232, 270, 271, 272, 275, 300, 353, 449, 454, 464, 465, 517], "levelwis": 187, "wai": [187, 228, 229, 232, 271, 272, 275, 426, 431, 448, 449, 451, 464, 465, 468, 471, 486, 487, 491, 492, 493, 503, 504, 507, 509, 512, 515, 517], "huggingfac": [187, 198, 227, 270, 414, 449, 455, 459, 473, 474, 475, 476, 496, 497, 499, 500, 512, 518], "bert": [187, 212, 223, 226, 227, 244, 266, 269, 270, 285, 428, 449, 452, 464, 466, 473, 496, 499, 500, 504, 514, 518], "recipe_sampl": 187, "bertattent": 187, "dens": [187, 205, 211, 212, 327, 488, 504, 518], "searching_result": 187, "jitbasicsearch": 187, "placeholder_shap": 187, "placeholder_dtyp": 187, "jit": [187, 211, 468, 470, 475, 512, 513], "script": [187, 293, 294, 297, 298, 346, 347, 350, 351, 424, 454, 461, 468, 472, 475, 476, 479, 496, 498, 505], "static_graph": 187, "flatten_static_graph": 187, "target_lay": 187, "linear2linearsearch": 187, "target_op_lut": 187, "lookup": 187, "tabl": [187, 198, 419, 431, 451, 456, 488, 490, 518], "current_pattern": 187, "statu": [187, 416, 423, 448, 495, 498, 499, 500, 502, 504], "selfmhasearch": 187, "classifierheadsearch": 187, "classifi": [187, 207, 227, 270, 300, 353, 449, 452], "classifierheadsearchertf": 187, "squeezer": 188, "postcompressionutil": 188, "librari": [188, 248, 292, 345, 381, 421, 428, 462, 465, 466, 470, 479, 485, 505, 507], "relat": [188, 204, 286, 296, 315, 320, 323, 349, 405, 411, 431, 468, 492, 493, 504, 510, 517], "linearcompress": 188, "root_linear": 188, "target_linear": 188, "while": [188, 199, 207, 325, 332, 391, 429, 430, 449, 455, 461, 466, 468, 473, 485, 487, 504, 506, 507, 509, 512], "hidden": [188, 193, 323, 429], "layer_1": 188, "act_fn": 188, "layer_2": 188, "linearcompressioniter": 188, "linear_pattern": 188, "register_pattern": [189, 323], "basepattern": [189, 191, 193], "unit": [189, 323, 424, 493, 504], "4x1": [189, 211, 212, 319, 465, 504, 518], "is_glob": [189, 323], "local": [189, 211, 212, 323, 419, 478, 482, 487, 494, 495, 504, 511], "contrast": [189, 323, 514], "keep_mask_lay": 189, "invalid_lay": 189, "max_sparsity_ratio_per_op": [189, 194, 208, 211, 212, 465, 504], "sparsiti": [189, 191, 192, 194, 195, 196, 199, 201, 202, 205, 207, 211, 212, 325, 327, 419, 428, 449, 461, 465, 516, 518], "reach": [189, 205, 211, 212, 327, 424, 448, 487, 504, 515], "min_sparsity_ratio_per_op": [189, 208, 211, 212, 465, 504], "minimum": [189, 211, 212, 431, 447, 451, 465, 476, 504, 512, 515], "target_spars": [189, 208, 211, 212, 465, 504, 506, 517], "pytorchbasepattern": [189, 204], "kerasbasepattern": 189, "get_pattern": [190, 323], "patternmha": 191, "doc": [191, 192, 211, 212, 323, 341, 342, 353, 387, 402, 403, 406, 419, 464, 465, 480, 483, 491], "md": [191, 192, 211, 212, 323, 353, 387], "n": [191, 192, 211, 212, 228, 244, 271, 285, 294, 323, 347, 406, 431, 449, 451, 452, 493, 504, 507, 512, 514], "pytorchpatternninm": 192, "out": [192, 211, 212, 227, 228, 229, 270, 271, 272, 291, 323, 328, 424, 425, 428, 449, 468, 473, 478, 479, 480, 482, 483, 485, 491, 504, 506, 507, 509], "pytorchpatternnxm": 193, "kept": [193, 323], "block_siz": [193, 323, 509], "height": [193, 240, 244, 282, 285, 323, 454, 514, 517], "width": [193, 240, 244, 282, 285, 323, 447, 454, 504, 507, 514, 517], "vertic": [193, 244, 285, 323, 514], "keraspatternnxm": 193, "register_prun": [194, 203, 325], "baseprun": [194, 199, 201, 203], "current_sparsity_ratio": [194, 325], "global_step": [194, 325], "total": [194, 244, 285, 300, 325, 353, 449, 451, 504, 509, 514, 518], "start_step": [194, 208, 211, 212, 325, 465, 504, 506], "end_step": [194, 208, 211, 212, 325, 465, 504, 506], "pruning_frequ": [194, 208, 211, 212, 465, 504], "target_sparsity_ratio": [194, 325], "show": [194, 419, 423, 452, 454, 465, 471, 486, 487, 488, 490, 493, 498, 499, 500, 512, 515, 516], "pytorchbaseprun": [194, 202], "kerasbaseprun": 194, "pytorchbasicprun": 195, "arrang": [195, 196, 201, 202, 228, 229, 232, 271, 272, 275, 449, 504], "proce": [195, 196, 201, 202], "regul": [195, 196, 201, 202], "kerasbasicprun": 195, "pytorchblockmaskprun": 196, "grad": [196, 201], "parse_valid_pruner_typ": 197, "get_prun": [197, 325], "pythonmultiheadattentionprun": 198, "mha_modul": 198, "partial": [198, 504, 507], "qkv": 198, "feedward": 198, "simultan": [198, 468, 492, 503, 506], "qkv_name": 198, "query_layer_nam": 198, "key_layer_nam": 198, "value_layer_nam": 198, "ffn_name": 198, "attention_ffn_nam": 198, "mha_nam": 198, "qkv_modul": 198, "ffn_modul": 198, "mha_compress": 198, "mhacompress": 198, "modifi": [198, 229, 272, 386, 405, 425, 431, 454, 458, 489, 490, 504, 517], "linear_lay": 198, "independ": [198, 381, 386, 431], "length": [198, 211, 212, 227, 244, 270, 285, 296, 349, 428, 449, 464, 505, 507, 509, 514], "4x": [198, 426, 507], "subsequ": [198, 430, 468, 485], "head_mask": 198, "mha_head_s": 198, "similar": [198, 208, 465, 489, 506, 512, 515, 517], "mha_scor": 198, "lock": [199, 313, 314, 461, 503, 504], "pytorchpatternlockprun": 199, "parent": [199, 200, 205, 319, 325, 327, 513], "pytorchprogressiveprun": 200, "basicprun": [200, 203], "interpol": [200, 244, 285, 464, 504, 514], "fine": [200, 227, 270, 449, 471, 504, 505, 507], "grain": [200, 504, 505, 515], "improv": [200, 424, 447, 465, 468, 485, 486, 488, 504, 505, 507, 508, 509, 515, 516, 518], "ad": [200, 227, 270, 293, 332, 346, 391, 430, 431, 451, 466, 468, 473, 476, 480, 483, 493, 504, 509, 513], "retrain": [201, 453], "pytorchretrainfreeprun": 201, "pruner_class": [201, 202], "fast": [201, 211, 212, 428, 504, 505, 509], "retrainfreeprun": [201, 203], "effect": [201, 428, 429, 504, 505], "2204": 201, "09656": 201, "sparsegptprun": [202, 203], "most": [202, 211, 212, 300, 353, 451, 465, 466, 504, 507, 509, 512, 515, 518], "sparsegpt": [202, 203, 504], "massiv": [202, 504], "One": [202, 431, 449, 454, 461, 490, 504, 505, 515], "2301": [202, 504], "00774": [202, 504], "opt": [203, 428, 473, 504, 512, 515, 518], "least": [203, 326, 424, 465, 504, 515], "templat": [203, 326, 465, 504], "tree": [203, 326, 342, 403, 493], "nlp": [203, 211, 212, 326, 473, 489, 504, 507], "huggingface_model": [203, 326, 489], "classif": [203, 227, 244, 270, 285, 300, 326, 353, 452, 456, 464, 474, 488, 496, 499, 500, 504, 505], "pytorch_prun": [203, 292, 345], "eager": [203, 326, 386, 454, 461, 507, 508, 513], "config_file_path": [203, 326], "pruner_info": [203, 326], "pruning_class": 203, "avail": [203, 211, 212, 358, 432, 434, 438, 441, 444, 455, 457, 459, 461, 478, 482, 487, 492, 493, 494, 498, 499, 500, 504, 515, 518], "regular": [204, 293, 324, 346], "register_reg": 204, "regulariz": 204, "get_reg_typ": 204, "get_reg": 204, "basereg": 204, "grouplasso": 204, "coeff": 204, "lasso": [204, 310, 461, 504], "reg_term": 204, "register_schedul": [205, 327], "get_schedul": [205, 327], "pruningschedul": 205, "gradual": [205, 327, 504], "oneshotschedul": [205, 327], "iterativeschedul": [205, 327], "get_tf_criterion": 206, "get_sparsity_ratio": 207, "elementwise_over_matmul_gemm_conv": 207, "elementwise_over_al": 207, "blockwise_over_matmul_gemm_conv": 207, "get_sparsity_ratio_tf": 207, "check_config": [207, 324], "prune_config": [207, 324], "everyth": [207, 324, 473], "reset_none_to_default": 207, "update_param": 207, "process_weight_config": 207, "global_config": [207, 309, 310, 312, 313, 314], "local_config": [207, 211, 212, 309, 310, 312, 313, 314], "default_config": 207, "pruners_info": 207, "process_yaml_config": 207, "check_key_valid": 207, "template_config": 207, "user_config": 207, "process_and_check_config": [207, 324], "process_config": [207, 324], "parse_last_linear": 207, "often": [207, 448, 452, 490, 503, 504], "act": [207, 225, 268, 423], "might": [207, 425, 487, 515], "caus": [207, 430, 448, 469, 488, 490, 504, 509], "drop": [207, 296, 324, 349, 424, 465, 466, 479, 504, 509, 512, 518], "parse_last_linear_tf": 207, "parse_to_prun": [207, 324], "parse_to_prune_tf": 207, "generate_pruner_config": 207, "dotdict": [207, 208, 212, 364, 419], "get_lay": 207, "collect_layer_input": 207, "layer_idx": 207, "layer_input": 207, "previou": [207, 430, 431, 465, 504, 510, 512, 513, 515, 516, 518], "prunerv2": 208, "pruning_typ": [208, 211, 212, 465, 504], "pruning_scop": [208, 211, 212, 465, 504], "sparsity_decay_typ": [208, 211, 212, 465, 504], "pruning_op_typ": [208, 211, 212, 465, 504], "reg_typ": 208, "criterion_reduce_typ": 208, "resume_from_pruned_checkpoint": 208, "cfg_fname": 208, "parser": 208, "quantization_conf": 208, "pruning_conf": 208, "graph_optimization_conf": [208, 291], "mixedprecision_conf": 208, "benchmark_conf": 208, "nasconfig": [208, 212, 304, 306, 426], "approach": [208, 211, 212, 303, 304, 306, 425, 426, 447, 449, 452, 461, 465, 473, 485, 488, 496, 498, 499, 500, 504, 505, 506, 509, 515, 517], "search_algorithm": [208, 212, 292, 305, 345, 426], "na": [208, 212, 292, 345, 358, 461, 518], "procedur": [208, 426, 504, 515], "defaultconf": 208, "instead": [208, 209, 212, 226, 269, 419, 471, 473, 476, 491, 504], "notat": [208, 209, 212, 419], "deep_get": [209, 364], "dot": [209, 466, 507], "person": [209, 423, 505], "john": 209, "deep": [209, 428, 429, 430, 448, 461, 462, 465, 466, 468, 470, 473, 474, 476, 479, 485, 505, 507, 515, 516, 518], "deep_set": [209, 364], "sex": [209, 423], "male": 209, "pythonic_config": 210, "random_se": [211, 212, 332, 391, 465, 517], "1978": [211, 212], "workspac": [211, 212, 418, 419, 467, 493, 498, 499, 500], "default_workspac": [211, 212], "resume_from": [211, 212, 419], "tensorboard": [211, 212, 411, 419, 429, 465, 488], "set_random_se": [211, 212, 419], "set_workspac": [211, 212, 419], "set_resume_from": [211, 212, 419], "set_tensorboard": [211, 212, 419], "directori": [211, 212, 228, 229, 271, 272, 362, 414, 416, 418, 419, 449, 454, 457, 478, 480, 482, 483, 489, 491, 513], "histori": [211, 212, 418, 419, 485, 489, 515], "nc_workspac": [211, 212, 488, 489], "datetim": [211, 212], "now": [211, 212, 244, 285, 425, 426, 431, 449, 454, 476, 506, 514, 515], "strftime": [211, 212], "d_": [211, 212], "resum": [211, 212, 215, 216, 258, 259, 337, 338, 388, 391, 392, 396, 398, 399], "flag": [211, 212, 294, 347, 451], "visual": [211, 212, 428, 476, 485, 511, 513, 515, 516], "displai": [211, 212, 341, 342, 402, 403, 419, 485, 488], "2022": [211, 212, 428, 463, 504, 509, 512, 518], "workspace_path": [211, 212], "accuracycriterion": [211, 212, 465, 515], "rel": [211, 212, 364, 465, 488, 506, 515, 517, 518], "tolerable_loss": [211, 212, 465, 515], "higher": [211, 212, 215, 216, 258, 259, 307, 354, 387, 408, 425, 451, 452, 456, 464, 488, 504, 507, 511], "accept": [211, 212, 406, 423, 446, 448, 487, 509], "accuracy_criterion": [211, 212, 364, 465, 489, 502, 506, 515, 517], "warmup": [211, 212, 446, 465, 506], "inter_num_of_thread": [211, 212, 381, 386, 465, 506], "intra_num_of_thread": [211, 212, 381, 386, 465, 506], "benchmark": [211, 212, 247, 292, 329, 345, 364, 419, 428, 436, 467, 468, 472, 476, 479, 485, 488, 515, 516, 517, 518], "onnxrt_trt_ep": [211, 212, 466, 507], "onnxrt_cuda_ep": [211, 212, 466, 507], "inter": [211, 212], "intra": [211, 212], "quantizationconfig": 211, "post_training_static_qu": [211, 449, 465, 506, 515], "calibration_sampling_s": [211, 212, 465, 490], "op_type_dict": [211, 212, 431, 506, 507, 509, 515], "op_name_dict": [211, 212, 451, 465, 488, 490, 507, 515], "strategy_kwarg": [211, 212, 511, 515], "timeout": [211, 212, 465, 506, 515, 517], "max_trial": [211, 212, 465, 515], "quant_level": [211, 212, 488, 509, 512, 515], "posttrainingquantconfig": [211, 212, 387, 425, 428, 431, 448, 451, 456, 459, 464, 465, 467, 487, 488, 489, 490, 507, 508, 509, 511, 512, 515], "quantizationawaretrainingconfig": [211, 212, 408, 425, 453, 456, 465, 507, 508, 515], "cv": [211, 212, 504], "object_detect": [211, 212, 296, 349], "recommendation_system": [211, 212], "explicitli": [211, 212, 460, 504], "overrid": [211, 212, 419], "quantiztaion": [211, 212], "smooth_quant_arg": [211, 212, 507, 512], "gemm_to_matmul": [211, 212, 507], "graph_optimization_level": [211, 212, 506, 507], "disable_al": [211, 212, 506], "enable_bas": [211, 212], "enable_extend": [211, 212], "enable_al": [211, 212], "first_conv_or_matmul_quant": [211, 212, 507], "last_conv_or_matmul_quant": [211, 212, 507], "pre_post_process_quant": [211, 212, 507], "postprocess": [211, 212, 238, 241, 244, 248, 285, 292, 345, 353, 387, 411, 429, 465, 513, 514], "dedic": [211, 212], "quant_format": [211, 212, 290, 456, 488], "constraint": [211, 212, 291, 328, 465, 504, 511, 515, 517], "conv1": [211, 212, 507, 517], "tuning_strategi": [211, 212], "guarante": [211, 212, 465], "models": [211, 212, 364, 465, 502, 506], "footprint": [211, 212, 291, 315, 320, 328, 364, 453, 465, 502, 504, 506, 509], "earli": [211, 212, 465, 507, 515, 517], "stop": [211, 212, 465, 515, 516, 517], "field": [211, 212, 229, 272, 296, 349, 425, 429, 431, 454, 465, 511, 515, 517], "exit": [211, 212, 331, 388, 390, 465, 493, 498, 499, 500, 517], "excluded_precis": [211, 212, 508], "exclud": [211, 212, 429, 447, 508], "conserv": [211, 212, 345, 395], "use_distributed_tun": 211, "weightpruningconfig": [211, 212, 465, 503, 504], "pruning_config": [211, 212, 465, 504], "98": [211, 212, 465, 504, 506, 518], "exp": [211, 212, 465, 504], "link": [211, 212, 227, 270, 353, 387, 447, 449, 456, 478, 482, 485, 509, 518], "90": [211, 212, 509, 517, 518], "magnitude_progress": [211, 212], "snip_progress": [211, 212], "snip_momentum_progress": [211, 212], "feasibl": [211, 212], "situat": [211, 212, 454, 504], "unstructur": [211, 212, 319, 461, 504, 518], "8x1": [211, 212], "channelx1": [211, 212, 504], "1xchannel": [211, 212, 504], "itrex": [211, 212], "start": [211, 212, 244, 285, 296, 349, 392, 462, 490, 505, 514, 515, 516, 519], "togeth": [211, 212, 244, 285, 452, 462, 472, 505, 513, 514], "sort": [211, 212, 335, 396, 451, 488, 509, 515], "sinc": [211, 212, 291, 293, 315, 320, 328, 346, 452, 456, 462, 464, 479, 485, 490, 503, 509, 510], "lead": [211, 212, 452, 465, 466, 490, 504, 509, 512], "increas": [211, 212, 450, 461, 468, 485, 490, 509, 515], "cube": [211, 212, 504], "6": [211, 212, 458, 507, 512, 515, 518], "update_config": [211, 212], "knowledgedistillationlossconfig": [211, 212, 452, 453, 465, 503], "hyperparamet": [211, 212, 341, 511, 512, 515], "entropi": [211, 212, 447, 515], "groundtruth": [211, 212, 296, 349], "label": [211, 212, 215, 216, 227, 229, 230, 231, 232, 235, 240, 244, 249, 258, 259, 270, 272, 273, 274, 275, 278, 282, 285, 293, 295, 300, 346, 348, 353, 354, 387, 408, 425, 448, 449, 451, 464, 465, 507, 514], "sum": [211, 212, 300, 353, 451, 452], "distillationconfig": [211, 212, 408, 452, 453, 465, 503], "prepare_compress": [211, 212, 408, 425, 452, 453, 465, 503, 504, 507], "criterion_conf": [211, 212], "d_conf": [211, 212, 453, 465, 503], "compression_manag": [211, 212, 408, 425, 452, 453, 465, 503, 504, 507], "featur": [211, 212, 227, 228, 240, 244, 270, 271, 282, 285, 424, 428, 446, 448, 450, 452, 465, 466, 467, 468, 472, 473, 476, 485, 487, 491, 504, 505, 510, 512, 514], "distil_loss": [211, 212, 465], "lr": [211, 212, 452, 454, 465], "ni_workload_nam": 212, "onnxrt_dnnl_ep": [212, 466, 507], "onnxrt_dml_ep": [212, 507], "tuningcriterion": [212, 465, 502, 511, 515], "tuning_criterion": [212, 465, 502, 511, 515], "npu": [212, 507], "ptq": [212, 387, 425, 451, 454, 461, 465, 490, 507, 512, 513, 515], "tri": [212, 515], "meet": [212, 218, 329, 331, 388, 390, 425, 430, 502, 505, 506, 507, 509, 513, 515], "mse_v2": [212, 292, 334, 345, 395], "hawq_v2": [212, 345, 395], "docstr": [212, 406], "workload": [212, 416, 419, 487, 505], "insight": [212, 416, 428, 451, 505, 510, 515, 516], "copi": [212, 324, 419, 448, 491], "deepcopi": 212, "model_origin": [212, 387, 508], "qat_op_name_dict": 212, "low_memory_usag": 212, "hpoconfig": 212, "xgb": 212, "bo": 212, "intermediatelayersknowledgedistillationlossconfig": [212, 452], "relationship": [212, 487], "student_layer_nam": 212, "student_layer_output_process": 212, "teacher_layer_nam": 212, "teacher_layer_output_process": 212, "desir": [212, 240, 244, 282, 285, 430, 431, 504, 512, 514], "serv": [212, 362, 493, 498, 499, 500], "numer": [212, 300, 353, 431, 466, 505, 507, 509], "abbrevi": 212, "layer_nam": [212, 504], "l1": 212, "selfknowledgedistillationlossconfig": [212, 452, 465], "student1_layer_name1": 212, "teacher_layer_name1": 212, "student2_layer_name1": 212, "student1_layer_name2": 212, "teacher_layer_name2": 212, "student2_layer_name2": 212, "soft": 212, "l2": [212, 504], "hard": [212, 448, 451], "resblock": 212, "deepst": 212, "02": [212, 518], "mixedprecisionconfig": [212, 354, 406, 465, 466], "mixedprecis": [212, 301, 465], "fp16": [212, 342, 403, 507], "won": [212, 507, 509], "work": [212, 291, 328, 427, 430, 448, 452, 480, 483, 491, 508, 509, 510, 512, 513], "mix_precis": [212, 345, 406, 465, 466], "converted_model": [212, 354, 465, 466], "exportconfig": 212, "14": [212, 289, 290, 456, 462, 500, 518], "dynamic_ax": [212, 290, 456], "qlinear": [212, 229, 236, 272, 279, 300, 353, 429, 475], "ax": [212, 290], "onnxqlinear2qdqconfig": 212, "onnxqlinear2qdq": 212, "torch2onnxconfig": [212, 456], "torch2onnx": [212, 287, 292, 345], "qdq_op_fp32_bia": 212, "qdq_op_int32_bia": 212, "qdq_op_fp32_bias_qdq": 212, "resnet50": [212, 428, 451, 454, 456, 466, 468, 472, 504, 507, 511, 518], "int8_onnx_config": [212, 456], "randn": [212, 456], "224": [212, 240, 282, 428, 449, 454, 456, 459, 465, 468, 487, 514, 517], "batch_siz": [212, 217, 219, 222, 223, 225, 226, 227, 228, 247, 260, 262, 265, 266, 268, 269, 270, 271, 290, 426, 448, 449, 454, 456, 460, 465, 468, 507], "tf2onnxconfig": [212, 456], "tf2onnx": [212, 287, 292, 345], "output_graph": 212, "dyna": [212, 292, 305, 345, 426, 461, 506], "sigopt": [213, 214, 256, 257, 292, 345, 505], "tpe": [213, 214, 256, 257, 292, 345], "sigopttunestrategi": [215, 258], "q_dataload": [215, 216, 258, 259, 332, 335, 337, 338, 388, 391, 392, 396, 398, 399, 460, 515], "eval_func": [215, 216, 258, 259, 329, 332, 335, 337, 338, 354, 387, 388, 391, 392, 396, 398, 399, 406, 408, 425, 448, 449, 451, 452, 453, 454, 465, 488, 507, 508, 509, 515, 517], "eval_metr": [215, 216, 354, 387, 388, 391, 392, 396, 398, 399, 408, 464, 487, 507], "q_hook": [215, 216, 258, 259, 332, 335, 337, 338, 388, 391, 392, 396, 398, 399], "mandatori": [215, 216, 258, 259, 387, 465, 517], "yield": [215, 216, 225, 247, 258, 259, 268, 332, 354, 387, 391, 406, 408, 448, 507, 515], "_": [215, 216, 258, 259, 387, 425, 426, 428, 429, 430, 447, 451, 452, 454, 456, 458, 465, 466, 467, 468, 474, 478, 480, 482, 483, 490, 493, 494, 502, 504, 507, 509, 510, 511, 512, 513, 515, 517], "well": [215, 216, 258, 259, 354, 387, 408, 426, 428, 449, 504, 507, 510, 512, 517], "taken": [215, 216, 258, 259, 354, 387, 408, 507], "reserv": [215, 216, 258, 259], "abl": [215, 216, 258, 259, 354, 387, 408, 476, 485, 507], "tuner": [215, 216, 258, 259, 291, 328, 354, 387, 408, 507], "scalar": [215, 216, 258, 259, 354, 387, 408, 464, 507, 512, 515], "pseudo": [215, 216, 258, 259, 387, 408, 509, 513], "someth": [215, 216, 229, 258, 259, 272, 387, 408], "fefin": [216, 259], "tpetunestrategi": [216, 259], "basedatalod": [217, 260], "basedataload": [217, 222, 224, 260, 265, 267], "last_batch": [217, 219, 222, 223, 226, 247, 260, 262, 265, 266, 269, 448], "rollov": [217, 219, 222, 223, 226, 247, 260, 262, 265, 266, 269, 448], "collate_fn": [217, 219, 220, 222, 223, 226, 247, 260, 262, 263, 265, 266, 269, 448, 449], "sampler": [217, 219, 221, 222, 223, 226, 247, 260, 262, 264, 265, 266, 269, 281, 292, 341, 402, 448, 454], "batch_sampl": [217, 219, 222, 223, 226, 247, 260, 262, 265, 266, 269, 448], "num_work": [217, 219, 222, 223, 226, 247, 260, 262, 265, 266, 269, 448, 465, 507], "pin_memori": [217, 219, 222, 223, 226, 247, 260, 262, 265, 266, 269, 448], "shuffl": [217, 219, 222, 223, 226, 247, 260, 262, 265, 266, 269, 448, 465, 507], "_generate_dataload": [217, 260], "check_dataload": 218, "default_col": [219, 262], "outer": [219, 262], "defaultdataload": [219, 226, 262, 269], "style": [220, 234, 263, 277, 406, 424, 449, 460], "drop_last": [220, 225, 263, 268], "iterablefetch": [220, 263], "indexfetch": [220, 263], "base_dataload": [221, 264, 281, 292], "default_dataload": [221, 264, 281, 292], "fetcher": [221, 264, 281, 292], "mxnet_dataload": [221, 264, 281, 292], "onnxrt_dataload": [221, 264, 281, 292, 380], "pytorch_dataload": [221, 264, 281, 292], "tensorflow_dataload": [221, 264, 281, 292, 385], "mxnetdataload": [222, 265], "onnxrtbertdataload": [223, 266], "variant": [223, 266], "onnxrtdataload": [223, 266, 380], "pytorchdataload": [224, 267], "data_sourc": [225, 268, 411], "__iter__": [225, 229, 268, 272, 448, 449, 465], "matter": [225, 268, 508], "iterablesampl": [225, 268], "squential": [225, 268], "your": [225, 227, 268, 270, 424, 448, 449, 451, 454, 463, 465, 468, 471, 472, 473, 478, 479, 480, 482, 483, 485, 487, 491, 493, 498, 499, 500, 504, 505, 511, 513, 515, 516], "clear": [225, 268, 429, 458, 464, 465], "iterabledataset": [225, 229, 268, 272], "try": [225, 268, 425, 451, 488, 504, 507, 512, 515], "indexdataset": [225, 268], "__getitem__": [225, 229, 244, 268, 272, 285, 448, 449, 465], "__len__": [225, 229, 268, 272, 449], "retriev": [225, 268, 504], "sequentialsampl": [225, 268], "batchsampl": [225, 268], "tfdatadataload": [226, 269], "tensorflow1": [226, 269], "coupl": [226, 269], "satisfi": [226, 269, 451, 462, 491], "tf1": [226, 269, 467], "although": [226, 269, 511], "tensorflowbertdataload": [226, 269], "tensorflowmodelzoobertdataload": [226, 269], "zoo": [226, 244, 269, 285, 428, 455, 459, 518], "tensorflowdataload": [226, 269, 385], "pytorchbertdataset": [227, 270], "model_typ": [227, 270, 419, 449], "tensordataset": [227, 270, 449], "repo": [227, 270, 422, 424, 449, 455, 478, 480, 482, 483, 519], "easi": [227, 270, 328, 456, 465, 488, 492, 505, 507, 511], "squad": [227, 244, 270, 285, 297, 298, 300, 350, 351, 353, 449, 464, 504, 514, 518], "distilbert": [227, 270, 428, 449, 466, 505, 518], "xlnet": [227, 270, 449, 518], "xlm": [227, 270, 449, 518], "101": [227, 270, 300, 353, 464, 494, 512, 518], "2043": [227, 270], "2001": [227, 270], "onnxrtbertdataset": [227, 270], "data_dir": [227, 270, 449], "model_name_or_path": [227, 270, 449, 465, 473, 474, 489, 496, 499, 500, 509], "max_seq_length": [227, 244, 270, 285, 449, 514], "do_lower_cas": [227, 243, 244, 270, 284, 285, 449, 514], "mrpc": [227, 270, 300, 353, 449, 464, 473, 496, 499, 500, 504, 515, 518], "dynamic_length": [227, 270, 449], "shortcut": [227, 270, 449], "token": [227, 238, 241, 244, 270, 281, 283, 285, 292, 293, 294, 345, 346, 347, 414, 449, 464, 465, 487, 488, 509, 511, 512, 514, 515], "longer": [227, 244, 270, 285, 449, 514], "truncat": [227, 244, 270, 285, 449, 514], "shorter": [227, 244, 270, 285, 449, 514], "lowercas": [227, 270, 449], "choic": [227, 270, 429, 449, 464, 491, 512], "qqp": [227, 270, 449, 464, 518], "qnli": [227, 270, 449, 464, 518], "rte": [227, 270, 449, 464, 518], "st": [227, 270, 449, 464], "cola": [227, 270, 449, 464, 518], "mnli": [227, 270, 449, 464, 518], "wnli": [227, 270, 449, 464], "mobilebert": [227, 270, 449, 452, 518], "roberta": [227, 270, 449, 518], "uncas": [227, 244, 270, 285, 449, 514, 518], "load_and_cache_exampl": [227, 270], "cach": [227, 270, 457, 507, 509], "convert_examples_to_featur": [227, 244, 270, 285], "max_length": [227, 270], "label_list": [227, 270, 300, 353], "output_mod": [227, 270], "pad_token": [227, 270], "pad_token_segment_id": [227, 270], "mask_padding_with_zero": [227, 270], "inputfeatur": [227, 244, 270, 285], "properti": [227, 270, 405, 463], "input_id": [227, 244, 270, 285, 465], "vocabulari": [227, 243, 244, 270, 284, 285, 514], "attention_mask": [227, 270, 465], "usual": [227, 270, 430, 451, 452, 490, 503, 504, 507, 509, 512], "NOT": [227, 270, 458], "token_type_id": [227, 270, 465], "segment": [227, 270, 294, 296, 347, 349, 424], "portion": [227, 270], "regress": [227, 270, 424, 451], "seq_length": [227, 270], "tensorflowbertdataset": [227, 270], "label_fil": [227, 244, 270, 285, 449, 514], "tfrecord": [227, 228, 229, 270, 271, 272, 449], "guid": [227, 270, 425, 428, 449, 452, 462, 468, 476, 485, 519], "parsedecodebert": [227, 270], "tensorflowmodelzoobertdataset": [227, 228, 270, 271], "num_cor": [227, 228, 232, 270, 271, 275, 449], "28": [227, 228, 232, 270, 271, 275, 449, 518], "coco": [228, 235, 239, 271, 278, 296, 300, 349, 353, 464, 504], "parsedecodecoco": [228, 271], "cocorecorddataset": [228, 271], "interleav": [228, 271, 449], "parallel": [228, 271, 381, 386, 449, 465, 492, 495, 515], "cocoraw": [228, 271, 449], "img_dir": [228, 271, 449], "val2017": [228, 271, 449], "anno_dir": [228, 271, 449], "annot": [228, 271, 296, 349, 406, 430, 431, 449, 464, 504, 515], "instances_val2017": [228, 271, 449], "jpg": [228, 232, 234, 271, 275, 277, 428, 449], "imag": [228, 229, 232, 234, 240, 244, 271, 272, 275, 277, 282, 285, 296, 349, 449, 454, 456, 504, 506, 512, 513, 514, 518], "coconpi": [228, 271, 449], "npy_dir": [228, 271, 449], "npy": [228, 271, 449], "tensorflowdataset": [229, 272], "pytorchdataset": [229, 272], "mxnetdataset": [229, 272], "onnxrtqldataset": [229, 272], "onnxrtitdataset": [229, 272], "IT": [229, 236, 272, 279, 505], "pytorchmxnetwrapdataset": [229, 272], "datafunc": [229, 272], "pytorchmxnetwrapfunct": [229, 244, 272, 285], "framework_dataset": [229, 272], "convent": [229, 272, 296, 349, 452], "imageclassifi": [229, 272], "tensorflow_itex": [229, 232, 234, 236, 272, 275, 277, 279, 448, 506], "onnxrt_qdq": [229, 236, 272, 279, 506], "onnxrt_qlinearop": [229, 236, 244, 272, 279, 285, 506], "onnxrt_integerop": [229, 236, 244, 272, 279, 285, 506], "pytorch_ipex": [229, 236, 272, 279, 465, 506, 517], "pytorch_fx": [229, 236, 272, 279, 465, 506], "dataset_registri": [229, 272], "dataset_typ": [229, 272], "dataset_format": [229, 272], "data_format": [229, 240, 272, 282], "raw_imag": [229, 272], "overwrit": [229, 272, 478, 482], "download_url": [229, 272], "filenam": [229, 272, 419, 449, 491], "md5": [229, 272], "address": [229, 272, 423, 466, 487, 490, 493, 505], "gen_bar_updat": [229, 272], "bar": [229, 272, 485, 505], "check_integr": [229, 272], "fpath": [229, 272], "checksum": [229, 272], "calculate_md5": [229, 272], "chunk_siz": [229, 272], "cifar10": [229, 272, 449], "cifar100": [229, 272, 449], "databas": [229, 272, 493], "www": [229, 272, 449, 518], "toronto": [229, 272, 449], "kriz": [229, 272, 449], "cifar": [229, 272, 449, 518], "tar": [229, 272, 449, 451, 480, 483], "gz": [229, 272, 449, 451, 480, 483], "manual": [229, 272, 449, 468, 474, 476, 479, 493, 498, 499, 500, 504], "subset": [229, 232, 272, 275, 449, 490], "internet": [229, 272, 449, 487], "again": [229, 272, 449, 488, 490, 508], "pytorchcifar10": [229, 272], "mxnetcifar10": [229, 272], "tensorflowcifar10": [229, 272], "pytorchcifar100": [229, 272], "mxnetcifar100": [229, 272], "tensorflowcifar100": [229, 272], "mnist": [229, 272, 449, 454], "nation": [229, 272, 423], "institut": [229, 272], "standard": [229, 244, 272, 285, 424, 430, 451, 456, 464, 514, 515], "technologi": [229, 272, 465], "fashionmnist": [229, 272, 449], "npz": [229, 272, 449], "idx1": [229, 272, 449], "ubyt": [229, 272, 449], "idx3": [229, 272, 449], "t10k": [229, 272, 449], "pytorchmnist": [229, 272], "mxnetmnist": [229, 272], "tensorflowmnist": [229, 272], "pytorchfashionmnist": [229, 272], "mxnetfashionmnist": [229, 272], "tensorflowfashionmnist": [229, 272], "imagefold": [229, 272, 449, 454, 465], "expect": [229, 272, 423, 424, 457, 485, 507, 509, 515], "subfold": [229, 272, 488], "belong": [229, 272, 358, 507], "class_1": [229, 272, 449], "xxx": [229, 272, 449, 465], "png": [229, 272, 449], "xxy": [229, 272, 449], "xxz": [229, 272, 449], "class_n": [229, 272, 449], "123": [229, 272, 449, 514], "nsdf3": [229, 272, 449], "asd932_": [229, 272, 449], "categori": [229, 272, 295, 348, 446, 449, 475], "mxnetimagefold": [229, 272], "tensorflowtfrecorddataset": [229, 272], "tensorflowimagerecord": [229, 272], "imagenet": [229, 232, 240, 272, 275, 282, 426, 451, 465, 474, 490, 504, 513, 514, 517, 518], "000": [229, 272, 428, 449], "099": [229, 272, 449], "tensorflowvocrecord": [229, 272], "pascal": [229, 272], "voc": [229, 272, 300, 353], "2012": [229, 272], "00000": [229, 272], "00004": [229, 272], "00001": [229, 272], "00003": [229, 272], "dummydataset": [230, 231, 273, 274], "127": [230, 231, 273, 274, 449, 507, 512, 518], "float32": [230, 231, 244, 273, 274, 285, 296, 349, 429, 446, 449, 465, 507, 509, 512, 514], "stand_norm": [230, 231, 273, 274, 449], "dummy_v2": [231, 274, 449], "sparse_dummy_v2": [231, 274, 449], "label_shap": [231, 274, 449], "sparsedummydataset": [231, 274], "dense_shap": [231, 274, 449], "sparse_ratio": [231, 274, 449], "imagenetraw": [232, 275, 449], "data_path": [232, 275, 449], "image_list": [232, 275, 449], "img1": [232, 275, 449], "img2": [232, 275, 449], "imgx": [232, 275, 449], "val_map": [232, 275, 449], "txt": [232, 275, 449, 451, 462, 487, 489, 490, 492, 493], "pytorchimagenetraw": [232, 275], "mxnetimagenetraw": [232, 275], "tensorflowimagenetraw": [232, 275], "inteltensorflow": [232, 234, 275, 277, 462], "tensorflowimagenetdataset": [232, 275], "onnxrtimagenetdataset": [232, 275], "bert_dataset": [233, 238, 276, 281, 292, 345], "coco_dataset": [233, 238, 276, 281, 292, 345], "dummy_dataset": [233, 238, 276, 281, 292, 345], "dummy_dataset_v2": [233, 238, 276, 281, 292, 345], "imagenet_dataset": [233, 238, 276, 281, 292, 345], "style_transfer_dataset": [233, 238, 276, 281, 292, 345], "styletransferdataset": [234, 277], "content_fold": [234, 277, 449], "style_fold": [234, 277, 449], "crop_ratio": [234, 277, 449], "resize_shap": [234, 277, 449], "256": [234, 240, 277, 282, 449, 454, 465, 514], "image_format": [234, 277, 449], "holder": [234, 277, 449], "labelbalancecocorecordfilt": [235, 278], "balanc": [235, 278, 509, 512], "labelbalancecocorawfilt": [235, 278], "tensorflowfilt": [236, 279], "onnxrtqlfilt": [236, 279], "onnxrtitfilt": [236, 279], "pytorchfilt": [236, 279], "mxnetfilt": [236, 279], "filter_registri": [236, 279], "filter_typ": [236, 279], "__call__": [236, 279], "coco_filt": [237, 238, 280, 281, 292, 345], "imagenet_transform": [238, 241, 281, 283, 292, 345], "parsedecodecocotransform": 239, "quantizedinput": [240, 282, 514], "labelshift": [240, 282, 514], "label_shift": [240, 282, 514], "parsedecodeimagenet": [240, 282, 514], "proto": [240, 244, 282, 285, 514], "parsedecodeimagenettransform": [240, 282], "tensorflowtransposelastchannel": 240, "tensorflowshiftrescal": 240, "rescal": [240, 244, 285, 514], "tensorflowresizecropimagenettransform": [240, 282], "random_crop": [240, 282, 514], "resize_sid": [240, 282, 514], "resize_method": [240, 282], "bilinear": [240, 244, 282, 285, 514], "random_flip_left_right": [240, 282, 514], "mean_valu": [240, 282, 514], "channels_last": [240, 282, 468], "subpixel": [240, 282], "rgb": [240, 282], "seri": [240, 282, 428, 462, 465, 514], "applic": [240, 282, 431, 456, 468, 485, 487, 493, 494, 498, 499, 505, 509, 512, 513, 514, 516], "crop": [240, 244, 282, 285, 449, 514], "flip": [240, 244, 282, 285, 514], "left": [240, 244, 282, 285, 479, 485, 512, 514], "std": [240, 244, 282, 285, 465, 514], "bilinearimagenettransform": [240, 282], "central_fract": [240, 282, 514], "875": [240, 282, 514], "fraction": [240, 282, 514], "onnxbilinearimagenettransform": [240, 282], "onnxresizecropimagenettransform": [240, 282], "std_valu": [240, 282], "229": [240, 282, 465], "225": [240, 282, 465], "resizewithaspectratio": [240, 282], "87": [240, 282, 518], "inter_pol": [240, 282], "cv2": [240, 282], "inter_area": [240, 282], "aspect": [240, 244, 282, 285, 514], "postprocess_cl": [242, 252, 465], "user_postprocess": [242, 252], "convert_to_unicod": [243, 284], "unicod": [243, 284], "assum": [243, 284, 296, 307, 349, 429, 458, 485], "load_vocab": [243, 284], "vocab_fil": [243, 244, 284, 285, 514], "convert_by_vocab": [243, 284], "vocab": [243, 284], "whitespace_token": [243, 284], "whitespac": [243, 284, 298, 351], "clean": [243, 284, 465], "piec": [243, 284, 293, 346, 464, 509], "fulltoken": [243, 284], "tokenzi": [243, 284], "basictoken": [243, 284], "punctuat": [243, 284, 293, 298, 346, 351], "lower": [243, 244, 284, 285, 298, 351, 392, 453, 504, 505, 507, 512, 514, 515], "wordpiecetoken": [243, 284], "unk_token": [243, 284], "unk": [243, 284], "max_input_chars_per_word": [243, 284], "200": [243, 284, 425, 494, 515], "wordpiec": [243, 244, 284, 285, 514], "concat_gener": [244, 285], "inc": [244, 285, 423, 430, 468, 475, 485, 487, 492, 505, 506, 510, 515], "tensorflowtransform": [244, 285], "mxnettransform": [244, 285], "pytorchtransform": [244, 285], "onnxrtqltransform": [244, 285], "onnxrtittransform": [244, 285], "transform_registri": [244, 285], "transform_typ": [244, 285], "basetransform": [244, 285], "tensorflowwrapfunct": [244, 285], "transform_func": [244, 285], "pytorchmxnettransform": [244, 285], "get_torchvision_map": [244, 285], "torchvis": [244, 285, 455, 459, 468, 474, 488], "composetransform": [244, 285], "transform_list": [244, 285, 514], "compos": [244, 285, 411, 514], "croptoboundingbox": [244, 285, 514], "offset_height": [244, 285, 514], "offset_width": [244, 285, 514], "target_height": [244, 285, 514], "target_width": [244, 285, 514], "box": [244, 285, 296, 300, 349, 353, 425, 464, 468, 479, 485, 513, 514, 515], "coordin": [244, 285, 332, 391, 492, 514, 515], "top": [244, 285, 291, 300, 315, 320, 328, 353, 424, 464, 485, 488, 490, 514], "corner": [244, 285, 424, 429, 431, 514], "horizont": [244, 285, 514], "mxnetcroptoboundingbox": [244, 285], "onnxrtcroptoboundingbox": [244, 285], "tensorflowcroptoboundingbox": [244, 285], "resizewithratio": [244, 285, 514], "min_dim": [244, 285, 514], "800": [244, 285, 514], "max_dim": [244, 285, 514], "1365": [244, 285, 514], "constant_valu": [244, 285], "longest": [244, 285, 514], "side": [244, 285, 449, 479, 514], "exce": [244, 285, 509, 514], "tensorflowresizewithratio": [244, 285], "permut": [244, 285, 514], "tensorflowtranspos": [244, 285], "mxnettranspos": [244, 285], "pytorchtranspos": [244, 285], "randomverticalflip": [244, 285, 514], "tensorflowrandomverticalflip": [244, 285], "randomhorizontalflip": [244, 285, 465, 514], "tensorflowrandomhorizontalflip": [244, 285], "toarrai": [244, 285, 514], "pil": [244, 285, 514], "casttftransform": [244, 285], "castonnxtransform": [244, 285], "castpytorchtransform": [244, 285], "centercroptftransform": [244, 285], "center": [244, 285, 427, 428, 462, 514, 515], "paddedcentercroptransform": [244, 285], "crop_pad": [244, 285], "resizetftransform": [244, 285], "bicub": [244, 285, 514], "resizepytorchtransform": [244, 285], "randomcroptftransform": [244, 285], "randomresizedcroppytorchtransform": [244, 285], "08": [244, 285, 514, 518], "randomresizedcropmxnettransform": [244, 285], "randomresizedcroptftransform": [244, 285], "normalizetftransform": [244, 285], "deviat": [244, 285, 451, 514], "broadcast": [244, 285, 454, 514], "rescalekeraspretraintransform": [244, 285], "rescaletftransform": [244, 285], "rescaletransform": [244, 285], "alignimagechanneltransform": [244, 285], "dim": [244, 285, 509, 512, 514], "align": [244, 285, 423, 509, 514], "must": [244, 285, 296, 349, 424, 425, 430, 446, 448, 462, 507, 514], "pytorchalignimagechannel": [244, 285], "tondarraytransform": [244, 285], "resizemxnettransform": [244, 285], "resizetransform": [244, 285], "cropresizetftransform": [244, 285], "boundari": [244, 285, 514], "area": [244, 285, 296, 349, 464, 514], "pytorchcropresizetransform": [244, 285], "mxnetcropresizetransform": [244, 285], "cropresizetransform": [244, 285], "centercroptransform": [244, 285], "mxnetnormalizetransform": [244, 285], "pytorchnormalizetransform": [244, 285], "normalizetransform": [244, 285], "randomcroptransform": [244, 285], "randomresizedcroptransform": [244, 285], "get_final_text": [244, 285], "pred_text": [244, 285], "orig_text": [244, 285], "project": [244, 285, 422, 423, 424, 491, 505, 511, 515, 519], "squadexampl": [244, 285], "qas_id": [244, 285], "question_text": [244, 285], "doc_token": [244, 285], "orig_answer_text": [244, 285], "start_posit": [244, 285], "end_posit": [244, 285], "is_imposs": [244, 285], "simpl": [244, 285, 462, 465, 504, 511, 512, 515], "answer": [244, 285, 297, 298, 350, 351, 423, 490, 504, 514, 518], "posit": [244, 285, 423, 464, 468, 493, 498, 499, 500], "unique_id": [244, 285], "example_index": [244, 285], "doc_span_index": [244, 285], "token_to_orig_map": [244, 285], "token_is_max_context": [244, 285], "input_mask": [244, 285, 465], "segment_id": [244, 285, 465], "read_squad_exampl": [244, 285], "input_fil": [244, 285], "doc_strid": [244, 285, 514], "max_query_length": [244, 285, 514], "output_fn": [244, 285], "inputbatch": [244, 285], "collecttransform": [244, 285], "10833": [244, 285], "tfsquadv1posttransform": [244, 285], "n_best_siz": [244, 285, 514], "384": [244, 285, 514], "64": [244, 285, 426, 509, 512, 514, 518], "max_answer_length": [244, 285, 514], "30": [244, 285, 455, 459, 461, 514, 518], "nbest_predict": [244, 285, 514], "question": [244, 285, 297, 298, 350, 351, 423, 424, 428, 429, 462, 468, 492, 504, 512, 514, 518], "anoth": [244, 285, 293, 302, 346, 419, 451, 452, 478, 482, 514, 515], "long": [244, 285, 457, 509, 514], "document": [244, 285, 406, 430, 431, 436, 454, 466, 470, 480, 483, 484, 491, 492, 494, 504, 510, 514, 516], "chunk": [244, 285, 514], "tfmodelzoocollecttransform": [244, 285], "tfsquadv1modelzooposttransform": [244, 285], "squadv1": [244, 285, 514], "parsedecodevoctransform": [244, 285], "conf_fname_or_obj": [245, 254, 286, 291, 301, 302, 303, 304, 306, 315, 320, 328], "unnecessari": [245, 465], "setter": 247, "calib_dataload": [247, 329, 387, 425, 428, 448, 449, 451, 459, 460, 464, 465, 487, 488, 507, 508, 509], "reason": [247, 423, 430, 448, 490, 509, 513, 515], "know": [247, 454, 510], "metric_cl": [249, 353, 387, 465], "user_metr": [249, 353, 387], "alwai": [249, 296, 349, 353, 387, 451, 464, 465, 490], "recommend": [249, 353, 429, 449, 458, 476, 479, 484, 486, 504, 506, 515], "set_backend": 250, "tensorflowimagefold": 272, "qlinear2qdq": [287, 292, 345], "qlinearop": [288, 451, 461, 476, 507, 518], "check_model": 288, "onnx_qlinear_to_qdq": 288, "input_name_to_nod": 288, "destin": [288, 302], "tf_to_fp32_onnx": 289, "tf_to_int8_onnx": 289, "int8_model": [289, 290, 429], "get_node_map": 290, "fp32_onnx_path": 290, "module_node_map": 290, "get_quantizable_onnx_op": 290, "quantize_nod": 290, "dynamic_quant_export": 290, "pt_fp32_model": 290, "pt_int8_model": 290, "weight_typ": 290, "s8": 290, "static_quant_export": 290, "_quantiz": 290, "torch_to_fp32_onnx": 290, "do_constant_fold": 290, "verbos": [290, 332, 391], "torch_to_int8_onnx": 290, "achiev": [291, 328, 456, 465, 488, 503, 504, 505, 507, 512, 513, 515], "across": [291, 301, 328, 354, 450, 465, 492, 495, 504, 509, 512, 515], "variou": [291, 301, 328, 354, 431, 461, 468, 495, 504, 506, 509], "dl": [291, 301, 315, 320, 328, 354, 451, 460, 472, 485, 505, 518], "bring": [291, 328, 479, 492, 512], "unifi": [291, 328, 429, 430, 431, 448, 460, 461, 464, 465, 467], "vari": [291, 315, 320, 328, 490, 504, 512, 518], "roc": [291, 300, 315, 320, 328, 353], "flexibl": [291, 315, 320, 328, 428, 452, 492, 504, 509], "via": [291, 315, 320, 328, 423, 428, 454, 461, 465, 468, 485, 504, 505], "popular": [292, 345, 421, 428, 429, 430, 447, 452, 455, 456, 459, 465, 504, 507, 509, 515, 516], "techniqu": [292, 345, 421, 428, 461, 465, 468, 487, 503, 504, 505, 506, 507, 516, 517, 518], "bleu": [292, 294, 299, 345, 347, 352, 464, 504], "bleu_util": [292, 299, 345, 352], "coco_label_map": [292, 299, 345, 352], "coco_tool": [292, 299, 345, 352], "evaluate_squad": [292, 299, 345, 352], "f1": [292, 297, 299, 300, 345, 350, 352, 353, 454, 464, 465, 488, 511, 518], "basic_na": [292, 305, 345], "nas_util": [292, 305, 345], "pruner_legaci": [292, 345], "gradient_sensit": [292, 311, 345], "group_lasso": [292, 311, 345], "pruning_recip": [292, 345], "tile_pattern": [292, 316, 317], "logger": [292, 321, 345, 409, 412, 419], "prune_util": [292, 321, 345], "tuning_sampl": [292, 334, 340, 345, 395, 401], "tuning_spac": [292, 334, 340, 341, 343, 345, 395, 401, 402, 404], "tuning_struct": [292, 334, 340, 341, 342, 345, 395, 401, 402, 403], "auto_mixed_precis": [292, 334, 345, 395], "graph_optim": [292, 345], "mixed_precis": [292, 345, 354, 465], "model_convers": [292, 345], "pruning_v2": [292, 345], "unicoderegex": [293, 346], "hoc": [293, 346], "hack": [293, 346], "recogn": [293, 346, 515], "nondigit_punct_r": [293, 346], "compil": [293, 346, 465], "express": [293, 346, 423], "preced": [293, 346, 512, 515], "digit": [293, 346, 419, 505], "punct_nondigit_r": [293, 346], "symbol_r": [293, 346], "bleu_token": [293, 346], "mose": [293, 346], "smt": [293, 346], "mosesdecod": [293, 346], "mteval": [293, 346], "v14": [293, 346], "pl": [293, 346], "l954": [293, 346], "l983": [293, 346], "bilingu": [293, 346], "understudi": [293, 346], "qualiti": [293, 346], "machin": [293, 346, 456, 462, 471, 485, 487, 493, 505, 512, 513], "translat": [293, 294, 346, 347, 504, 515], "natur": [293, 346, 456], "approxim": [293, 294, 346, 347, 430, 464, 509], "glue": [293, 300, 346, 353, 449, 464, 465, 474], "word": [293, 346, 464, 504, 509, 518], "ngram": [293, 346, 464], "breviti": [293, 294, 346, 347, 464], "penalti": [293, 294, 346, 347, 464], "doe": [293, 346, 405, 448, 449, 464, 465, 509, 510, 514], "beam": [293, 346, 464], "tensor2tensor": [294, 347], "bleu_hook": [294, 347], "compute_bleu": [294, 347], "reference_corpu": [294, 347], "translation_corpu": [294, 347], "max_ord": [294, 347], "use_bp": [294, 347], "against": [294, 347], "gram": [294, 347], "bleu_scor": [294, 347], "third": [296, 349, 424, 463], "parti": [296, 349, 424, 463, 507], "pycocotool": [296, 349, 457, 462], "noth": [296, 349, 515], "thu": [296, 349, 465, 504, 507], "cannot": [296, 349, 425, 457, 509, 513], "jonathanhuang": [296, 349], "image_id": [296, 349, 464], "invok": [296, 349, 430], "groundtruth_dict": [296, 349], "exportgroundtruthtococo": [296, 349], "groundtruth_boxes_list": [296, 349], "groundtruth_classes_list": [296, 349], "max_num_class": [296, 349], "output_path": [296, 349], "detections_list": [296, 349], "exportdetectionstococo": [296, 349], "detection_boxes_list": [296, 349], "detection_scores_list": [296, 349], "detection_classes_list": [296, 349], "cocowrapp": [296, 349], "loadannot": [296, 349], "cocoevalwrapp": [296, 349], "agnostic_mod": [296, 349], "computemetr": [296, 349], "detection_typ": [296, 349], "bbox": [296, 349, 425, 464], "hold": [296, 332, 349, 391, 449], "iou_typ": [296, 349], "iou_thr": [296, 300, 349, 353, 464], "map_point": [296, 300, 349, 353, 464], "cocoev": [296, 349], "mscoco": [296, 349], "Then": [296, 349, 430, 451, 478, 480, 482, 483, 490, 512, 515], "exportsingleimagegroundtruthtococo": [296, 349], "next_annotation_id": [296, 349], "category_id_set": [296, 349], "groundtruth_box": [296, 349], "groundtruth_class": [296, 349], "groundtruth_mask": [296, 349], "groundtruth_is_crowd": [296, 349], "ingest": [296, 349], "here": [296, 349, 406, 430, 449, 454, 455, 456, 458, 459, 464, 473, 480, 483, 485, 488, 491, 493, 507, 510, 511, 512, 518], "exportsingleimagedetectionstococo": [296, 349], "uniqu": [296, 329, 349, 507], "assign": [296, 349, 419, 454, 506, 515], "num_gt_box": [296, 349], "num_detect": [296, 300, 349, 353, 464, 465, 517], "image_height": [296, 349], "image_width": [296, 349], "detection_mask": [296, 349], "crowd": [296, 349], "insid": [296, 349, 452, 453, 486, 504, 509, 515], "exportsingleimagedetectionboxestococo": [296, 349], "detection_box": [296, 349, 465, 517], "detection_scor": [296, 349, 465, 517], "detection_class": [296, 349, 465, 517], "exporsingleimagedetectionboxestococo": [296, 349], "exportsingleimagedetectionmaskstococo": [296, 349], "allenai": [297, 298, 350, 351], "bi": [297, 298, 350, 351], "att": [297, 298, 350, 351], "flow": [297, 298, 350, 351, 425, 426, 465], "f1_score": [297, 298, 350, 351], "ground_truth": [297, 298, 350, 351], "ground": [297, 298, 350, 351], "truth": [297, 298, 350, 351], "metric_max_over_ground_truth": [297, 298, 350, 351], "metric_fn": [297, 298, 350, 351], "exact_match_scor": [297, 350], "exact": [297, 350], "articl": [297, 298, 350, 351], "paragraph": [297, 298, 350, 351], "qa": [297, 298, 350, 351, 428], "normalize_answ": [298, 351], "newlin": [298, 351, 419], "tab": [298, 351, 485, 513], "harmon": [298, 300, 351, 353], "recal": [298, 300, 351, 353], "answer_start": [298, 351], "177": [298, 351, 518], "denver": [298, 351], "bronco": [298, 351], "nfl": [298, 351], "team": [298, 351, 423, 508], "afc": [298, 351], "super": [298, 351, 426], "bowl": [298, 351], "50": [298, 351, 426, 430, 490, 504, 512, 518], "56be4db0acb8001400a502ec": [298, 351], "form": [298, 351, 451, 452, 485], "percentag": [298, 351, 447, 509, 517], "tensorflowmetr": [300, 353], "maintain": [300, 353, 423, 424, 467, 468, 480, 483, 487, 492, 493, 504, 509, 510], "pytorchmetr": [300, 353], "mxnetmetr": [300, 353], "onnxrtqlmetr": [300, 353], "onnxrtitmetr": [300, 353], "metric_registri": [300, 353], "metric_typ": [300, 353], "decorator_metr": [300, 353], "basemetr": [300, 353, 387], "single_output": [300, 353], "hvd": [300, 353, 454], "wrappytorchmetr": [300, 353], "wrapmxnetmetr": [300, 353], "wraponnxrtmetr": [300, 353], "proport": [300, 353], "pred_list": [300, 353], "pytorchloss": [300, 353], "mae": [300, 353, 464], "compare_label": [300, 353, 387, 464], "rmse": [300, 353, 464, 515], "squar": [300, 335, 353, 396, 451, 464, 490, 515], "tensorflowtopk": [300, 353], "k": [300, 353, 387, 464, 487, 504], "among": [300, 353, 479, 512], "outcom": [300, 353], "num_correct": [300, 353], "num_sampl": [300, 353], "generaltopk": [300, 353], "cocomapv2": [300, 353, 464], "anno_path": [300, 353, 464], "map_kei": [300, 353], "detectionboxes_precis": [300, 353], "output_index_map": [300, 353, 464], "tensorflowmap": [300, 353], "tensorflowcocomap": [300, 353], "tensorflowvocmap": [300, 353], "squadf1": [300, 353, 464], "miou": [300, 353], "num_class": [300, 353], "21": [300, 353, 473, 474, 496, 499, 500, 505, 512, 518], "iou": [300, 353], "intersect": [300, 353, 429, 464], "union": [300, 353, 408, 464, 496], "onnxrtglu": [300, 353], "dlrm": [300, 353], "modelconvers": 302, "typic": [302, 329, 426, 428, 453, 455, 459, 490, 504, 518], "basicna": 303, "model_build": [303, 306], "conf_fnam": 303, "nasbas": [306, 426], "nas_registri": 307, "nas_method": 307, "create_search_space_pool": 307, "idx": [307, 449], "enumer": [307, 408, 429, 452, 453, 454, 465, 503, 504, 513], "find_pareto_front": 307, "pareto": [307, 426], "front": [307, 426], "n_point": 307, "n_metric": 307, "n_pareto_point": 307, "gradientsensitivityprun": 309, "pytorchmodel": [309, 310, 312, 313, 314, 363], "overwritten": [309, 310, 312, 313, 314, 473], "grouplassoprun": 310, "legaci": 311, "basicmagnitudeprun": 312, "patternlockprun": [313, 325], "pruner_registri": 314, "clase": 314, "pruningconf": [315, 320], "tfpruningcallback": [315, 320], "input_model": [315, 320, 467, 488, 489, 490, 513], "pure": [315, 320, 504], "pattern_registri": 318, "pattern_typ": 318, "patternbas": 318, "mask_shap": [318, 319], "is_contigu": 318, "tile": 319, "tilepatternbas": 319, "tilepattern_1x1": 319, "1x1": [319, 452, 465, 504], "tilepattern_2x2": 319, "2x2": [319, 512], "tilepattern_1x16": 319, "1x16": 319, "tilepattern_4x1": 319, "tilepattern_1x2": 319, "1x2": [319, 512], "patternnxm": 323, "patternninm": 323, "reset_non_value_to_default": 324, "parse_not_to_prun": 324, "update_frequency_on_step": [325, 506], "max_sparsity_ratio_per_lay": [325, 506], "magnitudeprun": 325, "snipprun": 325, "snipmomentumprun": 325, "moreoev": 325, "quantconf": 328, "separ": [329, 423, 460, 463, 493, 495, 503, 506], "opt_model": [329, 465], "fulli": [329, 465, 493, 507, 512], "train_func": [329, 408, 454, 465, 507], "automixedprecisiontunestrategi": [330, 389], "basictunestrategi": [331, 390], "stage": [331, 336, 388, 390, 397, 452, 504, 513, 515], "polici": [331, 335, 388, 390, 396, 423, 428, 517, 519], "bayesiantunestrategi": [332, 391], "acq_max": [332, 391], "ac": [332, 391], "gp": [332, 391], "y_max": [332, 391], "n_warmup": [332, 391], "10000": [332, 391, 504], "n_iter": [332, 391], "acquisit": [332, 391], "gaussian": [332, 391, 515], "relev": [332, 391, 430, 431, 490, 504], "acq": [332, 391], "randomst": [332, 391], "scipi": [332, 391], "x_max": [332, 391], "targetspac": [332, 391], "pbound": [332, 391], "9527": [332, 391, 465, 517], "bayesianoptim": [332, 391], "exhaustivetunestrategi": [333, 393], "msetunestrategi": [335, 396], "mse_v2tunestrategi": [336, 397], "revert": [336, 344, 397, 405, 515], "randomtunestrategi": [337, 398], "strategy_registri": [338, 399, 515], "tunestrategi": [338, 399, 515], "tuningsamplerregistri": 341, "tuningsampl": [341, 402], "tuningord": [341, 402], "Not": [341, 342, 402, 403, 419, 426], "tuningspac": [341, 342, 402, 403], "tuning_order_lst": [341, 402], "initial_op_tuning_cfg": [341, 402], "modelwisetuningsampl": [341, 402], "tuning_items_prior": [341, 402], "op_dtype_dict": [341, 402], "optuningconfig": [341, 342, 343, 402, 403, 404], "optypewisetuningsampl": [341, 402], "opwisetuningsampl": [341, 402], "fallbacktuningsampl": [341, 402], "op_dtyp": [341, 402], "accumul": [341, 402, 515], "skip_first": [341, 402], "smoothquantsampl": [341, 402], "tuningitem": [342, 403], "item_typ": [342, 403], "pattern_to_intern": [342, 403], "default_dtyp": [342, 403], "pattern_to_path": [342, 403], "quant_mode_from_pattern": [342, 403], "internal_pattern": [342, 403], "initial_tuning_cfg_with_quant_mod": [342, 403], "op_name_typ": [342, 403], "step1": [342, 403], "step2": [342, 403], "complet": [342, 403, 429, 430, 504, 507, 515, 517, 518], "step3": [342, 403], "step4": [342, 403], "step5": [342, 403], "op_quant_mod": [343, 404], "ordereddefaultdict": [344, 405], "extract_data_typ": [344, 405], "sign": [344, 405, 424, 428, 431, 447, 487, 505, 507, 509, 511], "reverted_data_typ": [344, 405], "signed_flag": [344, 405], "get_adaptor_nam": [344, 405], "experiment": [345, 426, 449, 453, 454, 456, 465, 504, 506, 507, 510, 514], "base_model": [345, 356], "keras_model": [345, 356], "mxnet_model": [345, 356], "nets_factori": [345, 356], "onnx_model": [345, 356, 380, 488], "tensorflow_model": [345, 356, 385, 490], "torch_model": [345, 356], "collect_layer_histogram": [345, 412], "create_obj_from_config": [345, 412], "kl_diverg": [345, 412], "load_huggingfac": [345, 412, 465], "neural_insights_util": [345, 412], "weights_detail": [345, 412], "sub_class": [353, 387], "register_customer_metr": 353, "topk": [353, 387, 454, 464, 465, 487, 507], "frozen": [354, 362, 387, 467], "savedmodel": [354, 362, 387, 518], "onnx_ml_pb2": [354, 467], "hybirdblock": [354, 387], "basemodel": 355, "plai": [355, 505, 509, 512], "role": [355, 509, 512], "kerasmodel": 357, "get_model_fwk_nam": 358, "fwk": 358, "mxnetmodel": 359, "net": 360, "tfslimnetsfactori": 360, "get_model_typ": 362, "validate_graph_nod": 362, "validate_and_inference_input_output": 362, "output_tensor_nam": 362, "graph_sess": 362, "graph_def_sess": 362, "frozen_pb_sess": 362, "load_saved_model": 362, "saved_model_tag": 362, "signatur": 362, "saved_model_dir": 362, "metagraphdef": 362, "keras_sess": 362, "slim_sess": 362, "checkpoint_sess": 362, "estimator_sess": 362, "saved_model_sess": 362, "tensorflowbasemodel": [362, 385], "tensorflowsavedmodelmodel": 362, "tensorflowqatmodel": 362, "tensorflowcheckpointmodel": 362, "tensorflowmodel": 362, "pytorchbasemodel": 363, "pytorchfxmodel": 363, "ipexmodel": 363, "driven": [364, 428, 465, 485, 502, 513], "objective_registri": 364, "objective_custom_registri": 364, "obj_cl": 364, "eural_compressor": 364, "objective_cl": 364, "user_object": 364, "__class__": 364, "__name__": 364, "objective_cfg": 364, "usr_cfg": 364, "user_obj_cfg": 364, "easili": [364, 429, 469, 473, 485, 502, 512], "peak": [364, 502], "multiobject": 364, "metric_criterion": 364, "metric_weight": 364, "obj_criterion": 364, "obj_weight": 364, "is_measur": 364, "parserfactori": 366, "onnxrtparserfactori": 368, "onnxprofilingpars": 370, "respons": [370, 371, 375, 498, 499, 500, 507], "profilingpars": 371, "profilingresult": 372, "total_execution_tim": 372, "accelerator_execution_tim": 372, "cpu_execution_tim": 372, "op_run": 372, "op_defin": 372, "tensorflowparserfactori": 373, "tensorflowprofilingpars": 375, "profilerfactori": [376, 378, 383], "create_onnx_config": 381, "ort": 381, "sessionopt": 381, "delete_assign": 386, "create_tf_config": 386, "tf_modul": 386, "configproto": 386, "set_eager_execut": 386, "entir": [387, 408, 425, 430, 431, 447, 492, 504, 512], "autotunestrategi": 388, "conservativetunestrategi": 392, "o0": [392, 515], "who": [392, 423], "hawq_v2tunestrategi": 394, "made": [394, 429, 507, 510, 515], "impact": [394, 504, 510, 515], "tunestrategymeta": 399, "metaclass": 399, "lowerbitssampl": 402, "blockfallbacktuningsampl": 402, "op_block_lst": 402, "target_dtyp": 402, "alpha_list": 402, "weightonlyquantsampl": 402, "quantopt": 405, "quant_typ": 405, "quant_opt": 405, "preprocess_user_cfg": 405, "op_user_cfg": 405, "op_user_cfg_modifi": 405, "build_slave_faker_model": 405, "slave": [405, 515], "virtual": [405, 505], "classregist": 405, "fun": 406, "attribute1": 406, "module_debug_level1": 406, "debug": [406, 415, 451, 478, 482, 486, 515, 516], "function1": 406, "param1": 406, "param2": 406, "parameter1": 406, "parameter2": 406, "function2": 406, "pep": 406, "484": [406, 518], "output_model": [406, 465, 488, 490, 513], "function3": 406, "section": [406, 431, 451, 452, 453, 485, 488, 491, 504, 506, 509, 517], "restructuredtext": 406, "liter": 406, "generator1": 406, "example_gener": 406, "exampleclass": 406, "param3": 406, "public": [406, 423, 480, 483], "attr1": 406, "attr2": 406, "attr5": 406, "api_doc_exampl": 407, "loop": [408, 425, 426, 430, 431, 458, 495, 511, 515], "compressionmanag": 408, "deal": 408, "pruningconfig": 408, "orchestr": [408, 428, 461, 516], "on_train_begin": [408, 425, 452, 453, 465, 503, 504, 507], "train_loop": [408, 465, 503], "on_epoch_begin": [408, 411, 452, 453, 465, 503], "on_step_begin": [408, 411, 452, 453, 465, 503, 504], "on_after_compute_loss": [408, 452, 453, 465, 503], "backward": [408, 452, 453, 454, 465, 503, 504, 507, 510], "on_before_optimizer_step": [408, 452, 453, 465, 503, 504], "on_step_end": [408, 411, 452, 453, 465, 503], "on_epoch_end": [408, 411, 452, 453, 465, 503], "on_train_end": [408, 452, 453, 465, 503, 504, 507], "path_to_sav": 408, "manag": [408, 411, 465, 468, 469, 479], "top1": [408, 464, 487, 504, 507, 518], "callbacks_list": 408, "layerhistogramcollector": 409, "layer_tensor": 409, "include_lay": 409, "get_func_from_config": 411, "func_dict": 411, "get_preprocess": 411, "get_metr": 411, "get_postprocess": 411, "get_algorithm": 411, "create_dataset": 411, "cfg_preprocess": 411, "cfg_filter": 411, "create_dataload": 411, "dataloader_cfg": 411, "create_eval_func": 411, "postprocess_cfg": 411, "fp32_baselin": [411, 429], "baselin": [411, 511, 513], "create_train_func": 411, "train_cfg": 411, "Their": 411, "auxiliari": 412, "optimizedmodel": 414, "from_pretrain": [414, 465], "save_for_huggingface_upstream": [414, 465], "msg": [415, 494, 498, 499], "fatal": 415, "warn": 415, "alia": [415, 419, 470, 475], "register_neural_insights_workload": 416, "workload_loc": [416, 419], "workload_mod": 416, "workload_nam": 416, "uuid": 416, "update_neural_insights_workload": 416, "workload_uuid": 416, "update_neural_insights_workload_accuracy_data": 416, "baseline_accuraci": 416, "optimized_accuraci": 416, "get_model_path": 416, "is_int8_model": 418, "load_weight_onli": 418, "checkpoint_dir": 418, "history_cfg": 418, "best_configur": 418, "best_model_weight": 418, "snapshot": [418, 489], "cfg_from_fil": 419, "yaml_fil": [419, 449, 454], "lazyimport": 419, "lazi": 419, "till": [419, 515], "time_limit": 419, "get_siz": 419, "seen": [419, 429], "recurs": 419, "compute_spars": 419, "fault_tolerant_fil": 419, "equal_dict": 419, "d2": 419, "compare_kei": 419, "ignore_kei": 419, "cpuinfo": 419, "dump_elapsed_tim": [419, 429], "customized_msg": 419, "elaps": 419, "combine_histogram": 419, "old_hist": 419, "old": [419, 465, 510], "get_tensor_histogram": 419, "get_all_fp32_data": 419, "get_tuning_histori": 419, "tuning_history_path": 419, "offlin": [419, 423, 465, 507, 512], "str2arrai": 419, "dequantize_weight": 419, "weight_tensor": 419, "min_filter_tensor": 419, "max_filter_tensor": 419, "scale_info": 419, "captureoutputtofil": 419, "tmp_file_path": 419, "stream": [419, 518], "sy": [419, 471], "stderr": 419, "captur": 419, "statist": [419, 420], "header": [419, 457], "field_nam": 419, "output_handl": 419, "printer": 419, "global_st": 419, "load_data_from_pkl": 419, "pkl": [419, 489], "dump_data_to_loc": 419, "show_memory_info": 419, "hint": 419, "dump_class_attr": 419, "compare_object": 419, "obj1": 419, "obj2": 419, "ignore_attr": 419, "comparison": [419, 509, 510, 513], "alias_param": 419, "param_nam": 419, "param_alia": 419, "alias": 419, "print_tabl": 419, "column_map": 419, "table_entri": 419, "titl": [419, 463, 486, 515], "insert_newlin": 419, "prettyt": 419, "column": [419, 509, 512], "handler": [419, 515], "row": [419, 451, 488, 512], "decim": 419, "get_tensors_info": 419, "get_weights_detail": 419, "weightdetail": 419, "dump_tabl": 419, "file_typ": 419, "csv": [419, 426, 488, 489], "dump_table_to_csv": 419, "get_number_of_socket": 419, "platform": [419, 428, 461, 468, 476, 495, 505, 507], "opentri": 419, "activation_min": 419, "activation_max": 419, "print_op_list": 419, "get_op_list": 419, "minmax_file_path": 419, "input_model_tensor": 419, "optimized_model_tensor": 419, "activation_min_max": 419, "calculate_ms": 419, "mse_metric_gap": 419, "fp32_tensor": 419, "dequantize_tensor": 419, "euclidean": [419, 452], "distanc": [419, 452], "check_key_exist": 419, "weightsdetail": 420, "input_tensor_data": 420, "optimized_tensor_data": 420, "weightsstatist": 420, "welcom": [422, 423, 424, 428, 487, 494, 519], "interest": [423, 428, 487, 513], "foster": 423, "particip": [423, 495], "commun": [423, 487], "harass": 423, "experi": [423, 468, 490, 511, 512, 515], "everyon": 423, "regardless": 423, "ag": 423, "bodi": 423, "ethnic": 423, "characterist": 423, "gender": 423, "educ": 423, "socio": 423, "econom": 423, "race": 423, "religion": 423, "sexual": 423, "orient": 423, "contribut": [423, 428, 504], "inclus": 423, "Being": 423, "respect": [423, 458, 504, 512, 517], "viewpoint": 423, "gracefulli": 423, "focus": [423, 429], "empathi": 423, "toward": [423, 452], "member": [423, 429], "unaccept": 423, "imageri": 423, "unwelcom": 423, "troll": 423, "insult": 423, "derogatori": 423, "polit": 423, "attack": 423, "privat": 423, "publish": [423, 463, 466, 486, 512], "electron": 423, "explicit": 423, "permiss": 423, "inappropri": 423, "profession": 423, "clarifi": 423, "appropri": [423, 447, 512], "fair": 423, "action": [423, 480, 483], "edit": 423, "reject": 423, "commit": [423, 424], "wiki": 423, "issu": [423, 424, 427, 428, 462, 488, 490, 507, 513], "ban": 423, "temporarili": 423, "deem": 423, "threaten": 423, "offens": 423, "harm": 423, "mail": 423, "social": [423, 505], "media": [423, 505], "account": [423, 511, 515], "appoint": 423, "onlin": [423, 511], "event": [423, 513], "abus": 423, "report": [423, 424, 428, 495, 511], "contact": [423, 510, 511], "complaint": 423, "review": [423, 424, 428, 505], "investig": [423, 490], "circumst": [423, 506], "oblig": [423, 491], "confidenti": [423, 487], "regard": [423, 508], "incid": 423, "good": [423, 507, 515], "faith": 423, "repercuss": 423, "leadership": 423, "faq": [423, 428], "page": [423, 424, 487, 490, 491], "send": [424, 430], "view": [424, 428, 455, 476, 485, 491, 510], "star": 424, "repositori": [424, 480, 483], "button": [424, 461, 479, 485], "fork": [424, 480, 483], "clone": [424, 451, 462, 478, 482, 487, 489, 490, 492, 493], "pc": 424, "git": [424, 451, 457, 462, 487, 489, 490, 492, 493], "modif": [424, 429, 458, 473, 492], "checkout": 424, "my": 424, "push": [424, 504, 509, 512], "cover": [424, 456, 460, 505], "would": [424, 465, 489, 504, 507, 512], "adopt": [424, 468, 504, 505, 512], "certif": [424, 487], "agre": 424, "pr": [424, 448, 464, 480, 483, 510], "At": [424, 430, 491, 495, 515], "approv": 424, "solv": [424, 507, 510], "licens": 424, "azur": [424, 428, 505], "devop": 424, "ci": 424, "cloud": [424, 428, 495, 505], "deploi": [424, 452, 465, 491, 495, 509, 515], "e16": 424, "v5": 424, "scan": [424, 428], "pylint": 424, "bandit": 424, "copyright": [424, 463], "docstyl": 424, "spellcheck": 424, "dco": 424, "pytest": 424, "No": [424, 457, 465, 493, 494, 505], "failur": [424, 425], "fault": 424, "coverag": 424, "runtim": [424, 428, 429, 430, 432, 448, 451, 455, 458, 461, 466, 470, 475, 476, 506, 509, 510, 515], "submit": [424, 492, 495, 505], "bug": [424, 428], "intend": 424, "safe": 424, "collabor": [424, 428, 470, 476], "adher": 424, "toolkit": [425, 462, 468, 476, 505, 516], "tracer": 425, "resolv": [425, 427], "floatfunct": 425, "cat": [425, 456, 471, 498, 499, 500], "done": [425, 452, 453, 469, 485, 494, 498, 499, 504, 507], "10004": [425, 426, 429, 448, 452, 453, 454, 458, 461, 466, 503, 506, 509, 517], "neural_compressor": [425, 426, 428, 431, 446, 448, 449, 451, 452, 453, 454, 456, 459, 460, 464, 465, 466, 467, 487, 488, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 517], "eval": [425, 448, 451, 468, 507, 513], "conduct": [425, 465, 473, 485, 515, 516], "imper": 425, "therefor": [425, 465, 488, 490, 504, 507, 509, 510, 512], "lot": [425, 490, 512], "As": [425, 430, 448, 452, 464, 465, 479, 490, 504, 509, 515], "successfulli": [425, 454, 494, 498, 499, 500, 505], "suggest": [425, 511], "traceabl": 425, "proxi": 425, "tutori": [425, 476, 505, 516], "prototyp": 425, "html": [425, 428, 430, 447, 454, 461, 480, 483, 486, 488, 494, 498, 507], "highlight": 425, "untrac": 425, "ssd": [425, 456, 518], "resnet34": [425, 518], "r34": 425, "bboxes_labels_scor": 425, "prob": 425, "45": [425, 518], "max_output": 425, "zip": [425, 494, 498, 499], "dbox": 425, "dlabel": 425, "dscore": 425, "decode_singl": 425, "autom": [426, 468, 485, 486, 505, 512], "artifici": 426, "ann": 426, "par": [426, 495], "outperform": 426, "hand": 426, "propos": [426, 429, 452, 466, 509, 512], "potenti": [426, 451, 510], "lie": [426, 447], "predictor": 426, "shown": [426, 448, 451, 452, 464, 465, 479, 488, 490, 502, 503, 504, 509, 512, 515], "figur": [426, 478, 479, 482, 509], "popul": 426, "inner": 426, "evolutionari": 426, "cycl": 426, "until": [426, 430, 515], "conclud": 426, "met": [426, 458, 507, 513], "yet": [426, 480, 483, 486, 493], "simplest": [426, 447, 471], "launcher": [426, 428, 452, 453, 476, 516], "agent": 426, "nsga2": 426, "supernet": 426, "ofa_mbv3_d234_e346_k357_w1": 426, "acc": [426, 495, 504, 513, 518], "mac": [426, 486], "num_ev": 426, "250": [426, 504], "results_csv_path": 426, "search_result": 426, "dataset_path": 426, "ilsvrc2012": 426, "aim": [426, 428, 468, 504, 512, 515, 516], "mobilenetv3": 426, "lt": [426, 449, 518], "wmt": 426, "en": 426, "de": 426, "guidelin": [427, 428], "mainstream": [428, 516], "learn": [428, 429, 430, 448, 449, 456, 460, 461, 462, 465, 466, 468, 470, 473, 474, 476, 479, 480, 483, 485, 504, 505, 507, 512, 513, 515, 516], "workflow": [428, 430, 431, 451, 452, 456, 462, 466, 480, 483, 487, 513, 516], "particular": [428, 504, 509], "wide": [428, 455, 466, 504, 507, 518], "hardwar": [428, 429, 452, 461, 465, 485, 504, 505, 506], "xeon": [428, 462, 463, 466, 505, 507, 508, 518], "scalabl": [428, 462, 466, 505, 507, 508], "processor": [428, 466, 493, 505, 507, 508], "flex": [428, 462], "amd": [428, 462, 518], "arm": [428, 461, 462, 518], "nvidia": [428, 447, 461, 462, 518], "llama2": 428, "llama": [428, 504, 505, 509, 512, 518], "mpt": [428, 504, 512, 518], "falcon": [428, 504, 512, 518], "gpt": [428, 489, 504, 512, 518], "j": [428, 489, 504, 512, 518], "bloom": [428, 504, 512, 518], "broad": [428, 461, 474, 516], "stabl": [428, 462, 504, 505], "diffus": [428, 505], "vision": [428, 456, 472, 512], "coder": [428, 461, 469, 470, 473, 476, 479, 492, 496, 505], "marketplac": [428, 486, 505], "googl": [428, 466, 505], "amazon": [428, 468, 476], "web": [428, 487, 493, 498, 499, 500, 513], "servic": [428, 485, 492, 505], "softwar": [428, 463, 504, 505, 510], "alibaba": [428, 475, 482, 483, 505], "tencent": [428, 505], "taco": [428, 505], "oliv": [428, 505], "ai": [428, 468, 505, 508, 516], "ecosystem": [428, 505], "lightn": [428, 475], "pip": [428, 451, 454, 457, 459, 462, 470, 473, 478, 480, 482, 483, 487, 488, 489, 490, 510], "wget": [428, 451, 457, 459, 487, 490], "googleapi": [428, 459, 487, 490], "v1_6": [428, 459, 487, 490], "mobilenet_v1_1": [428, 459, 487, 498], "0_224_frozen": [428, 459, 487, 498], "overview": [428, 515], "jupyterlab": [428, 468, 474, 476, 478, 482, 516], "studio": [428, 476, 485, 495, 516], "topic": 428, "int4": [428, 507, 518], "fp8": [428, 505], "innov": [428, 476, 505], "blog": [428, 505], "oct": [428, 505], "2023": [428, 500, 504, 509, 512, 518], "emnlp": [428, 505], "teq": [428, 505, 509], "sep": [428, 505], "neurip": [428, 505], "quala": [428, 505], "minilm": [428, 505, 518], "releas": [428, 462, 474, 476, 478, 482, 484, 496, 499, 500, 519], "legal": [428, 519], "request": [428, 493, 494, 495, 498, 499, 500, 507], "ask": [428, 462], "email": 428, "research": [428, 463, 512, 518], "idea": [428, 487, 504, 512, 515], "discord": 428, "join": [428, 488, 493, 498, 499], "technic": 428, "discuss": 428, "wechat": [428, 505], "img": 428, "bridg": [429, 430, 461], "vanilla": [429, 430, 461], "abcadaptor": 429, "__init__": [429, 448, 449, 464, 515], "query_fw_cap": [429, 431], "query_fused_pattern": 429, "he": 429, "besid": [429, 452, 490, 509], "describ": [429, 431, 451, 458, 487, 513], "past": [429, 509], "mainten": 429, "difficult": [429, 512], "abil": [429, 430, 449, 458, 512], "fragment": 429, "scenario": [429, 446, 452, 465, 504, 509], "granular": [429, 430, 431, 458, 461, 471, 507, 512, 517], "semant": [429, 458], "mla": [429, 466, 507], "becom": [429, 456, 504, 509], "explor": 429, "inspect_tensor": 429, "op_list": [429, 513], "iteration_list": 429, "inspect_typ": 429, "save_to_disk": 429, "quantization_cfg": 429, "set_tensor": 429, "tensor_dict": 429, "diagnosis_help": 429, "fw": 430, "outlin": [430, 431], "instruct": [430, 431, 452, 462, 466, 480, 483, 487, 488, 489, 490, 504, 505, 506, 507, 512, 518], "extend": [430, 431], "accommod": [430, 431], "incorpor": [430, 431, 453, 504, 515], "give": [430, 485, 515], "diagram": [430, 431, 451, 515], "illustr": [430, 431, 453, 515], "sequencediagram": [430, 431, 495], "autonumb": [430, 431], "query_framework_cap": 430, "opwis": 430, "optypewis": 430, "travers": [430, 431, 509, 515], "\u2776": 430, "\u2777": 430, "\u2778": 430, "\u2779": 430, "\u277a": 430, "\u277b": 430, "\u277c": 430, "These": [430, 461, 488], "chapter": 430, "node_op": 430, "confirm": 430, "chosen": [430, 447], "tune_config": 430, "int8_conv_config": 430, "optype_wise_": 430, "per_tensor": [430, 431, 458, 507, 517], "tuning_cfg_to_fw": 430, "Its": [430, 447, 504], "calib_iter": 430, "dispatch": [430, 461, 492, 495], "is_perchannel": 430, "is_asymmetr": 430, "weight_bit": 430, "convert_bf16": 430, "larger": [430, 504, 509, 512], "somewhat": 430, "distort": 430, "line": [430, 454, 461, 468, 473, 474, 493, 513], "explain": [431, 451, 512], "let": [431, 458, 473, 504, 506, 517], "overal": [431, 493, 517], "drive": 431, "uint4": 431, "asymmetr": [431, 507, 509, 515], "kullback": [431, 452], "leibler": [431, 452], "pytorch_cpu": 431, "1_11_capabl": 431, "cap_s8_1_11": 431, "cap_s8_1_11_conv1d": 431, "per_channel_symmetr": 431, "addition": [431, 454, 504, 515], "per_tensor_symmetr": 431, "due": [431, 456, 504, 507, 512, 513], "nativ": 431, "with_arg": 431, "qscheme": 431, "torch_dtyp": 431, "quant_min": 431, "quant_max": 431, "linux": [446, 457, 479, 485], "x86_64": 446, "aarch64": 446, "prove": [447, 509, 512], "benefici": 447, "uniform": [447, 509], "\u03b2": 447, "\u03b1": 447, "fundament": [447, 465], "primari": [447, 515], "focu": [447, 515], "essenti": [447, 457], "remaind": 447, "enhanc": [447, 468, 504, 505, 508], "resolut": 447, "extrem": 447, "still": [447, 465, 491, 505, 507, 508], "retain": 447, "noteworthi": 447, "vanhouck": 447, "vincent": 447, "andrew": 447, "senior": 447, "mark": 447, "mao": 447, "speed": [447, 465, 476, 504, 505, 507, 515], "2011": 447, "szymon": 447, "migacz": 447, "2017": 447, "mckinstri": 447, "jeffrei": 447, "l": [447, 452, 513, 515], "discov": [447, 513], "preprint": [447, 504, 509, 512], "1809": 447, "04191": 447, "2018": 447, "encount": 448, "consum": 448, "previous": 448, "lack": [448, 457], "faster": [448, 450, 456, 505, 515, 518], "Of": 448, "evenli": 448, "divid": [448, 495, 512, 515], "discard": 448, "throw": 448, "awai": 448, "draw": [448, 511, 515], "subprocess": 448, "pin": [448, 478, 482], "reshuffl": 448, "manner": [448, 452, 467], "newdataload": 448, "customis": [448, 449, 464], "ensp": [449, 514], "imagerecord": [449, 454, 517], "image_nam": 449, "cocorecord": 449, "gt": [449, 512, 514], "int64": 449, "offer": 449, "style_transf": 449, "content": [449, 493, 494, 498, 499, 500], "tfrecorddataset": 449, "labelbal": 449, "300": [449, 504, 518], "16": [449, 498, 509, 518], "helloworld": [449, 466, 514], "aid": 450, "deploy": [450, 468, 485, 505, 509, 512], "infrastructur": 450, "gap": [451, 467], "diagnos": 451, "gui": [451, 461, 490, 504], "termin": [451, 478, 479, 482, 488], "repeat": [451, 515], "durat": [451, 494, 498, 499, 511], "cd": [451, 454, 462, 487, 489, 490, 492, 493, 498, 499, 500], "setup": [451, 458, 462, 480, 483, 487, 489, 490, 492, 493, 504], "ilsvr2012": 451, "caff": 451, "berkeleyvis": 451, "caffe_ilsvrc12": 451, "xvzf": 451, "image_recognit": [451, 490, 513], "resnet50_torchvis": 451, "ptq_static": [451, 489], "resnet50_v1": [451, 454, 465], "dataset_loc": [451, 490, 498, 513], "label_path": 451, "quantiti": 451, "vec": 451, "mu": 451, "frac": [451, 512], "sigma": 451, "var": 451, "happen": 451, "dispers": [451, 488], "rule": [451, 468, 504], "v0": [451, 490, 512, 513], "cg": [451, 490, 513], "conv0": [451, 490, 513], "expens": [452, 465, 515], "power": [452, 465, 479, 505], "mobil": [452, 465, 518], "produc": 452, "logit": 452, "softmax": 452, "kd": 452, "patient": 452, "compact": [452, 465, 471, 504], "agnost": 452, "resourc": [452, 492, 495, 515], "convolut": [452, 505], "ia": 452, "attach": [452, 465, 512], "shallow": 452, "deepest": 452, "deeper": 452, "paper": [452, 504, 509, 512], "10006": [452, 453], "student_output": [452, 453], "student_loss": [452, 453], "training_func_for_nc": [452, 453], "distil_loss_conf": 452, "accordingli": [452, 476, 512], "promis": [453, 465, 504], "huge": [453, 490, 504, 509], "heavi": 453, "light": 453, "booster": 453, "degrad": [453, 504, 515], "novel": [453, 468, 479, 485], "place": [453, 462, 498, 504, 513, 515], "comb": 453, "distillation_criterion": [453, 465, 503], "q_conf": 453, "horovod": 454, "instal": [454, 457, 459, 468, 470, 473, 476, 480, 483, 485, 486, 488, 489, 490, 519], "program": [454, 463, 468, 485], "enable_eager_execut": 454, "yaml_file_path": 454, "pre_process": 454, "simpli": [454, 467, 468, 470, 473, 485, 493], "evaluation_result": 454, "evaluation_time_cost": 454, "partit": [454, 504], "distributedsampl": 454, "train_sampl": 454, "train_dataset": [454, 507], "num_replica": 454, "rank": 454, "train_load": 454, "train_kwarg": 454, "adadelta": 454, "distributedoptim": 454, "named_paramet": 454, "broadcast_paramet": 454, "root_rank": 454, "broadcast_optimizer_st": 454, "set_epoch": 454, "batch_idx": 454, "zero_grad": [454, 465, 504], "nll_loss": 454, "log_interv": 454, "0f": 454, "tloss": 454, "6f": 454, "dry_run": 454, "test_func": 454, "host": [454, 493, 495, 498, 499, 500], "num_of_process": 454, "002": 454, "ssh": [454, 485], "prompt": 454, "readm": [454, 498], "exactli": [454, 469], "recognit": [454, 456, 504, 513], "resizecropimagenet": [454, 514], "realiz": [454, 502, 508, 511], "tow": 454, "node1": [454, 498, 499], "node2": [454, 498, 499], "TO": [454, 470, 490], "your_node1_nam": 454, "your_node2_nam": 454, "resnet50_fp32_pretrained_model": 454, "nc_resnet50_v1": 454, "resnet": [454, 518], "varieti": [455, 506, 515], "demonstr": [455, 468, 498, 499, 500, 513], "10k": [455, 459], "speedup": [455, 461, 507], "2x": [455, 461], "vnni": [455, 461, 506, 507], "exchang": 456, "hope": 456, "inc_model": [456, 467], "fp32_onnx_config": 456, "verifi": 456, "vgg16": [456, 518], "mobilenet": [456, 511, 518], "rcnn": 456, "torchscript": [456, 509, 512], "unsupport": [456, 465, 504], "add_relu": 456, "conv1d_relu": 456, "conv2d_relu": 456, "group_norm": 456, "hardswish": 456, "instance_norm": 456, "layer_norm": 456, "leaky_relu": 456, "sigmoid": 456, "toolchain": [457, 505], "bare": 457, "metal": 457, "sudo": [457, 471], "apt": [457, 462, 471, 479], "python3": 457, "dev": [457, 478, 482], "distutil": 457, "libgl1": 457, "mesa": 457, "glx": 457, "libglib2": 457, "ln": 457, "sf": 457, "usr": 457, "incompat": 457, "88": [457, 511, 518], "80": [457, 509, 513, 518], "pyobject": 457, "reinstal": 457, "libgl": 457, "yum": [457, 462], "opencv": [457, 462, 479], "conda": [457, 462, 471, 479, 498, 499, 500, 510], "13": [457, 462, 487, 510, 512], "pend": [457, 494], "sqlalchemi": 457, "27": [457, 518], "alemb": 457, "forg": [457, 462], "quick": [458, 466, 504, 516, 517], "friendli": [458, 465, 505, 512, 516, 517], "dive": [458, 516], "purpos": [458, 466, 485, 487, 506, 507], "syntax": 458, "go": [458, 480, 483, 491, 506, 514], "up1": 458, "up2": 458, "valid_mixed_precis": 458, "addn": 458, "grappler_optim": 458, "constfold": 458, "arithmet": 458, "debug_stripp": 458, "major": [460, 490, 507, 512], "concept": [460, 511, 516], "rather": 460, "custom_metr": 460, "refin": [460, 504], "420": 461, "geomean": 461, "snippet": 461, "upload": [461, 480, 483], "click": [461, 468, 469, 476, 479, 485, 490, 505, 513], "qintegerop": [461, 507], "plan": 461, "oneapi": [462, 505, 516], "analyt": [462, 505, 516], "success": [462, 487, 510], "11": [462, 464, 466, 487, 512, 515, 518], "frequent": 462, "pypi": [462, 480, 483], "nightli": 462, "headless": [462, 479], "fastai": 462, "consolid": 462, "latest": [462, 505, 510], "eas": [462, 470, 505], "along": [462, 504, 509], "streamlin": [462, 492, 505], "scienc": 462, "websit": 462, "anaconda": [462, 492, 493], "suit": [462, 486, 513], "esri": 462, "formerli": 462, "skylak": 462, "cascad": 462, "lake": [462, 466, 505], "cooper": [462, 466, 505], "ic": [462, 505], "sapphir": 462, "rapid": 462, "hbm": 462, "arctic": 462, "sound": 462, "pont": 462, "vecchio": 462, "cento": [462, 518], "ubuntu": 462, "22": [462, 518], "04": [462, 518], "fortensorflow": 462, "forpytorch": 462, "12": [462, 487, 518], "tf_enable_onednn_opt": 462, "onednn": [462, 466, 507], "newer": 462, "subject": 463, "accompani": [463, 515], "wish": 463, "bibtex": 463, "author": 463, "feng": 463, "tian": 463, "hanwen": 463, "haihao": [463, 504], "shen": [463, 504], "suyu": 463, "chen": 463, "howpublish": 463, "year": 463, "logo": 463, "atom": 463, "phi": 463, "pentium": 463, "vtune": 463, "corpor": 463, "subsidiari": 463, "brand": 463, "claim": 463, "popularli": 464, "industri": [464, 505], "label_map": 464, "decis": 464, "ap": 464, "curv": 464, "turn": [464, 479], "target_boxes_num": 464, "str_label": 464, "int_label": 464, "inturn": 464, "cocomap": 464, "vocmap": 464, "categor": 464, "multiclass": 464, "multilabel": 464, "newmetr": 464, "reset": 464, "reflect": [464, 514], "new_metr": 464, "deliv": [465, 505, 510], "conveni": [465, 492], "upgrad": 465, "veri": [465, 486, 490, 507, 509, 515, 516], "comprehens": [465, 516], "kind": 465, "resort": 465, "automodelforsequenceclassif": 465, "autotoken": 465, "val_dataset": [465, 507], "val_dataload": [465, 507], "worker": [465, 495, 498, 499, 500, 507], "ping_memori": [465, 507], "formul": 465, "effort": 465, "written": 465, "onnxrt_integ": [465, 517], "onnxrt_qlinear": [465, 517], "image_tensor": [465, 517], "post_training_dynamic_qu": [465, 506, 515], "1000": [465, 494, 517], "2000": 465, "sampling_s": [465, 517], "model_wis": [465, 517], "op_dict": 465, "op_wis": [465, 513, 517], "sigopt_api_token": [465, 511, 515], "sigopt_project_id": [465, 511, 515], "sigopt_experiment_nam": [465, 511, 515], "demo": 465, "600": 465, "training_arg": 465, "emul": [465, 507], "trainer": [465, 476], "briefli": [465, 512], "maxim": [465, 504, 515], "pruning_func": 465, "train_dataload": [465, 504, 507], "n_gpu": 465, "gradient_accumulation_step": 465, "clip_grad_norm_": 465, "max_grad_norm": 465, "rate": [465, 504, 507], "start_epoch": [465, 506, 517], "end_epoch": [465, 506, 517], "97": [465, 518], "newli": [465, 504], "on_after_optimizer_step": [465, 504], "layer3": [465, 504], "lr_schedul": [465, 504], "0004": 465, "nesterov": [465, 517], "randomresizedcrop": [465, 514], "totensor": [465, 514], "485": 465, "456": [465, 518], "406": [465, 518], "nepoch": 465, "cnt": 465, "loss_sum": 465, "iter_bar": 465, "tqdm": 465, "desc": 465, "teacher_logit": 465, "train_fun": 465, "training_func": 465, "recent": [465, 466], "growth": [465, 466, 504], "complex": [465, 466, 504], "significantli": [465, 466, 488, 490, 504, 515], "bandwidth": [465, 466, 509], "exit_polici": [465, 517], "determinist": 465, "meaning": [465, 503], "reli": [465, 512], "prune_conf": 465, "quantization_aware_training_conf": 465, "aforement": 465, "inset": 465, "p_conf": [465, 503], "ssd_mobilenet_v1": 465, "benchmarkconf": 465, "half": [466, 476], "sixteen": 466, "launch": [466, 486, 491], "3rd": [466, 505, 507, 508], "gen": [466, 505, 507, 508], "codenam": 466, "boost": [466, 469, 485, 504, 505], "x86": 466, "avx512": [466, 507], "vcvtne2ps2bf16": 466, "vcvtneps2bf16": 466, "vdpbf16p": 466, "fbgemm": [466, 507], "tensorrtexecutionprovid": [466, 507], "cudaexecutionprovid": [466, 507], "dnnlexecutionprovid": [466, 507], "avx512_bf16": 466, "plu": 466, "resnet18": [466, 470, 518], "persist": 467, "brought": [467, 469, 476, 507], "tf2": 467, "h5": 467, "hybridblock": 467, "0000": 467, "saved_result": [467, 489, 509], "simplifi": [468, 479, 485, 504, 505], "acquir": 468, "analysi": [468, 485, 504, 511], "heurist": [468, 485], "great": 468, "facilit": 468, "autocast": 468, "my_model": 468, "no_grad": 468, "memory_format": 468, "112": 468, "rand": [468, 512], "plugin": [468, 486], "aw": [468, 476, 495, 505, 518], "sagemak": [468, 476], "inlin": [468, 473, 476], "neural_cod": [468, 470, 472, 473, 474, 476], "bench": 468, "superbench": 468, "enjoi": [469, 473, 476], "rebuild": [469, 478, 482], "reload": [469, 486, 488, 491], "modern": [470, 509], "democrat": [470, 505], "programm": [470, 476, 485], "nano_bf16_channels_last": 470, "nano_bf16_ipex_channels_last": 470, "nano_bf16_ipex": 470, "nano_bf16": 470, "nano_fp32_channels_last": 470, "nano_fp32_ipex_channels_last": 470, "nano_fp32_ipex": 470, "nano_gpu_to_cpu": 470, "nano_int8": 470, "nano_jit_bf16_channels_last": 470, "nano_jit_bf16_ipex_channels_last": 470, "nano_jit_bf16_ipex": 470, "nano_jit_bf16": 470, "nano_jit_fp32_channels_last": 470, "nano_jit_fp32_ipex_channels_last": 470, "nano_jit_fp32_ipex": 470, "nano_jit_fp32": 470, "nano_onnxruntime_fp32": 470, "nano_onnxruntime_int8_qlinear": 470, "openvino": 470, "nano_openvino_fp32": 470, "nano_openvino_int8": 470, "bc": [471, 479], "conda_prefix": 471, "echo": 471, "tradit": [471, 504], "libjemalloc": 471, "libiomp5": 471, "home": 471, "lib": 471, "ld_preload": 471, "malloc_conf": 471, "oversize_threshold": 471, "background_thread": 471, "metadata_thp": 471, "dirty_decay_m": 471, "9000000000": 471, "muzzy_decay_m": 471, "kmp_affin": 471, "kmp_blocktim": 471, "dnnl_primitive_cache_capac": 471, "governor": 471, "cpufreq": 471, "scaling_governor": 471, "powersav": 471, "tee": 471, "pytorch_jit_script": [472, 475], "pytorch_channels_last": [472, 475], "run_bench": 472, "patch": [472, 485], "patch_path": 472, "your_patch_path": 472, "sweep": 472, "sweep_object": 472, "bench_config": 472, "bench_featur": 472, "sai": 473, "run_glu": [473, 474, 496, 499, 500], "requisit": 473, "task_nam": [473, 474, 496, 499, 500], "do_ev": [473, 474, 489, 496, 499, 500], "remain": 473, "itself": [473, 504], "run_glue_optim": 473, "static_ipex": 473, "auto_qu": 474, "v4": [474, 496, 499, 500, 518], "albert": [474, 518], "sst2": 474, "alexnet": [474, 518], "pytorch_amp": 475, "optimize_for_infer": 475, "pytorch_jit_trac": 475, "pytorch_jit_script_ofi": 475, "pytorch_jit_trace_ofi": 475, "torchdynamo": 475, "pytorch_torchdynamo_jit_script": 475, "pytorch_torchdynamo_jit_trac": 475, "pytorch_torchdynamo_jit_script_ofi": 475, "pytorch_torchdynamo_jit_trace_ofi": 475, "pytorch_inc_bf16": 475, "pytorch_inc_static_quant_fx": 475, "pytorch_inc_static_quant_ipex": 475, "pytorch_inc_dynamic_qu": 475, "pytorch_ipex_fp32": 475, "pytorch_ipex_bf16": 475, "pytorch_ipex_int8_static_qu": 475, "pytorch_ipex_int8_dynamic_qu": 475, "blade": 475, "disc": 475, "pytorch_aliblad": 475, "pytorch_lightning_bf16_cpu": 475, "tensorflow_amp": 475, "keras_amp": 475, "tensorflow_inc": 475, "keras_inc": 475, "onnx_inc_static_quant_qlinear": 475, "onnx_inc_static_quant_qdq": 475, "onnx_inc_dynamic_qu": 475, "optimum": [475, 476, 488], "pytorch_inc_huggingface_optimum_stat": 475, "pytorch_inc_huggingface_optimum_dynam": 475, "intel_extension_for_transform": 475, "bigdl": [475, 476], "nano": [475, 476], "nano_": 475, "inc_auto": 475, "delight": 476, "announc": 476, "v": [476, 485, 504, 515, 517], "500": [476, 494, 518], "jupyt": [476, 478, 479, 482], "isa": 476, "adjust": [476, 507, 512], "xpu": 476, "delta": 476, "acc_delta": 476, "int8_acc": 476, "fp32_acc": 476, "ext": [478, 480, 482, 483, 484], "lab": [478, 479, 480, 482, 483], "nodej": [478, 482], "jlpm": [478, 482], "yarn": [478, 482], "npm": [478, 479, 482], "lieu": [478, 482], "labextens": [478, 479, 482], "typescript": [478, 482], "watch": [478, 482, 491], "immedi": [478, 482, 504], "refresh": [478, 482], "browser": [478, 482, 487, 491], "wait": [478, 482, 485, 495], "rebuilt": [478, 482], "easier": [478, 482, 485, 487, 505], "symlink": [478, 482], "down": 479, "finish": [479, 495], "enter": [479, 485, 493], "blank": 479, "cell": 479, "gain": [479, 503, 505], "mkl": 479, "jemalloc": 479, "pip3": 479, "pyproject": [480, 483], "toml": [480, 483], "twine": [480, 483], "whl": [480, 483], "dist": [480, 483], "sdist": [480, 483], "bdist_wheel": [480, 483], "deprec": [480, 483, 510, 514], "frontend": [480, 483, 493], "login": [480, 483, 511], "cut": [480, 483], "admin_github_token": [480, 483], "pypi_token": [480, 483], "npm_token": [480, 483], "secret": [480, 483], "panel": [480, 483, 485], "draft": [480, 483], "changelog": [480, 483, 484], "pkg": [480, 483], "bot": [480, 483], "pick": [480, 483, 486], "feedstock": [480, 483], "hatch": 483, "notabl": 484, "vscode": [484, 486], "daili": 485, "advantag": [485, 504, 506, 515], "remot": 485, "server": [485, 487, 490, 493, 498, 499, 500], "re": [485, 491, 509], "market": 485, "uninstal": 485, "fill": [485, 511, 514, 515], "upper": 485, "sidebar": 485, "hover": 485, "track": [485, 511], "argpars": 485, "pop": [485, 495], "diff": 485, "manifest": 486, "declar": 486, "palett": 486, "registercommand": 486, "amodio": 486, "tsl": 486, "matcher": 486, "dbaeumer": 486, "eslint": [486, 491], "press": 486, "f5": 486, "ctrl": 486, "hello": 486, "world": 486, "breakpoint": 486, "consol": [486, 491], "relaunch": 486, "toolbar": 486, "node_modul": 486, "viewlet": 486, "dropdown": 486, "runner": [486, 491], "startup": 486, "bundl": 486, "neural_insight": [487, 489, 490], "tl": 487, "ui": 487, "5000": 487, "338174d13706855fc6924cec7b3a8ae8": 487, "listen": 487, "firewal": 487, "8080": 487, "cert": 487, "path_to_cert": 487, "crt": 487, "path_to_private_kei": 487, "encrypt": 487, "expos": 487, "forfeit": 487, "client": [487, 493, 500], "extern": 487, "threat": 487, "diagnost": 487, "skill": 487, "feel": [487, 491], "layoutlmv3": [488, 518], "seqev": 488, "sentencepiec": 488, "timm": 488, "fvcore": 488, "pillow": 488, "einop": 488, "textdist": 488, "setuptool": 488, "cli": 488, "hypjudi": 488, "finetun": [488, 504, 509, 518], "funsd": [488, 518], "calib_dataset": 488, "incdataset": 488, "eval_dataset": 488, "poor": [488, 513], "9049": 488, "2989": 488, "66": [488, 518], "9631": 488, "glob": 488, "panda": 488, "pd": 488, "set_opt": 488, "max_row": 488, "max_column": 488, "getmtim": 488, "activations_t": 488, "weights_tabl": [488, 489], "read_csv": 488, "nweight": 488, "descend": 488, "sorted_data": 488, "sort_valu": 488, "ascend": 488, "evid": 488, "tip": 488, "8981": 488, "7502": 488, "6b": [489, 512, 518], "run_clm": 489, "eleutherai": [489, 512, 518], "dataset_nam": 489, "wikitext": [489, 518], "dataset_config_nam": 489, "do_train": 489, "inspect_sav": 489, "inspect_result": 489, "quan": 489, "model_summari": 489, "incept": [490, 518], "v3": [490, 518], "inception_v3": [490, 513], "inceptionv3_fp32_pretrained_model": [490, 513], "bash": [490, 513], "prepare_dataset": 490, "sh": [490, 513], "raw_dir": 490, "img_raw": 490, "delet": [490, 504], "run_tun": 490, "nc_inception_v3": 490, "highest": [490, 496, 515], "satisfactori": 490, "webpag": 490, "spike": 490, "bottom": 490, "chart": [490, 507, 511, 513], "concentr": 490, "toler": 490, "But": 490, "bigger": 490, "bootstrap": 491, "localhost": [491, 493, 498, 499], "3000": 491, "lint": 491, "interact": [491, 511], "correctli": 491, "hash": [491, 494], "readi": [491, 504], "aren": 491, "transit": 491, "webpack": 491, "babel": 491, "tweak": 491, "ever": 491, "curat": 491, "suitabl": 491, "middl": [491, 512], "shouldn": 491, "understand": [491, 507, 513, 516], "wouldn": 491, "couldn": 491, "facebook": [491, 512, 518], "troubleshoot": 491, "effortlessli": 492, "grpc": [492, 493, 497, 498, 499, 501], "queue": 492, "seamlessli": [492, 504, 515], "mpi": [492, 493, 515], "neural_solut": [492, 493, 498, 499, 500], "task_monitor_port": [493, 498, 499, 500], "22222": [493, 498, 499, 500], "result_monitor_port": [493, 498, 499, 500], "33333": [493, 498, 499, 500], "restful_api_port": [493, 498, 499, 500], "hostfil": [493, 495, 498, 499, 500], "grpc_api_port": [493, 498, 499, 500], "api_typ": [493, 498, 499, 500], "conda_env": [493, 498, 499, 500], "upload_path": [493, 498, 499, 500], "8000": [493, 498, 499, 500], "monitor": [493, 498, 499, 500], "3333": [493, 498, 499, 500], "2222": [493, 498, 499, 500], "ns_workspac": [493, 498, 499, 500], "hf_model": [493, 497, 499], "curl": [493, 494, 498, 499], "task_id": [493, 498, 499, 500], "usernam": 493, "db": [493, 495], "serve_log": [493, 498, 499, 500], "frontend_grpc": 493, "task_log": 493, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 493, "task_workspac": 493, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 493, "aliv": 493, "properli": 493, "commonli": [493, 504], "hostnam": 493, "breakdown": 493, "ip": 493, "hous": 493, "host1": [493, 498, 499], "host2": [493, 498, 499], "query_id": 493, "oaa": 494, "host_ip": 494, "task_request": [494, 498, 499, 500], "tuning_info": [494, 498], "optimization_result": [494, 498], "result_path": [494, 498, 499], "closur": 494, "404": [494, 504, 518], "health": 494, "healthi": 494, "quantized_model": [494, 498, 499], "400": [494, 518], "alloc": 495, "incom": 495, "taskmonitor": 495, "cluster": [495, 498, 499, 515], "tasklaunch": 495, "resultmonitor": 495, "receiv": [495, 511], "p1": 495, "notif": 495, "p2": 495, "p3": 495, "mpirun": [495, 515], "perf": 495, "p4": 495, "four": [495, 513, 518], "classdiagram": 495, "taskdb": 495, "get_statu": 495, "update_statu": 495, "task_collect": 495, "append_task": 495, "get_all_pending_task": 495, "update_task_statu": 495, "task_db": 495, "wait_new_task": 495, "schedule_task": 495, "dispatch_task": 495, "launch_task": 495, "query_task_statu": 495, "node_list": 495, "reserve_resourc": 495, "get_node_statu": 495, "gcp": [495, 505], "script_url": [496, 498, 499, 500], "archiv": 496, "prioriti": 496, "tf_example1": [497, 498, 499], "hf_models_grpc": [497, 500], "00173": 498, "01024": 498, "task_request_distribut": 498, "custom_models_optim": 498, "7602cd63d4c849e7a686a8165a77f69d": [498, 499], "151": [498, 518], "8617": 498, "17": [498, 518], "8213": [498, 518], "number_of_socket": [498, 499], "number_of_thread": [498, 499], "cdf419910f9b4d2a8320d0e420ac1d0a": 499, "optimized_result": 499, "58": [499, 518], "3162": 499, "6488": [499, 518], "test_task_request": 500, "06": [500, 517, 518], "34": [500, 518], "55": [500, 518], "d3e10a49326449fb9d0d62f2bfc1cb43": 500, "fastapi": 501, "multi_object": 502, "benefit": 503, "instanti": 503, "neuron": 504, "art": 504, "grown": 504, "unpreced": 504, "increasingli": 504, "crucial": 504, "stand": [504, 515], "shrink": 504, "contextu": 504, "scene": 504, "haven": 504, "color": [504, 509], "lowest": [504, 515], "formula": [504, 512], "emsp": 504, "downstream": 504, "prone": 504, "co": 504, "discourag": 504, "penal": 504, "parameter": 504, "lightweight": 504, "perceptron": 504, "mlp": 504, "valuabl": [504, 513], "basi": 504, "billion": 504, "dolli": [504, 512, 518], "lm": [504, 518], "lamini": [504, 512], "worth": 504, "mention": [504, 509], "tend": 504, "exemplifi": 504, "complement": 504, "fortieth": 504, "miss": [504, 507], "pruner2": 504, "few": [504, 505, 515], "lm_head": 504, "yourself": 504, "uncertain": 504, "auto_config": 504, "quit": 504, "straightforward": [504, 509, 512], "carri": 504, "pruning_pattern": 504, "pruning_start": 504, "pruning_end": 504, "sparse_gpt": 504, "embed_out": 504, "card": 504, "hesit": 504, "causal": 504, "clm": 504, "sst": [504, 518], "25": [504, 518], "63": [504, 518], "24": [504, 515, 518], "35": [504, 518], "flan": 504, "t5": [504, 518], "english": 504, "romanian": 504, "381": 504, "yolov5": 504, "75": [504, 518], "2x1": [504, 518], "801": 504, "7895": 504, "signific": [504, 505, 509, 512], "reduct": [504, 509, 517], "namhoon": 504, "lee": 504, "thalaiyasingam": 504, "ajanthan": 504, "philip": 504, "torr": 504, "2019": 504, "zafrir": 504, "ofir": 504, "ariel": 504, "larei": 504, "boudoukh": 504, "mosh": 504, "wasserblat": 504, "2111": 504, "05754": 504, "2021": 504, "kwon": 504, "kim": 504, "mahonei": 504, "hassoun": 504, "keutzer": 504, "gholami": 504, "pp": 504, "24101": 504, "24116": 504, "frantar": [504, 509], "alistarh": 504, "medium": 505, "aug": 505, "juli": 505, "onnxcommunitymeetup2023": 505, "chatbot": 505, "june": 505, "msft": 505, "netflix": 505, "apr": 505, "mlperf": [505, 518], "5x": 505, "heterogen": 505, "mar": 505, "jan": 505, "busi": 505, "amx": 505, "4th": [505, 507], "journei": 505, "dec": 505, "mleffici": 505, "deepen": 505, "foundat": 505, "intellig": 505, "vmware": 505, "applianc": 505, "bitnami": 505, "nov": 505, "sota": 505, "plug": 505, "twitter": 505, "linkedin": 505, "zone": 505, "land": 505, "pat": 505, "keynot": 505, "intelon": 505, "chines": 505, "purif": 505, "sacrif": 505, "jun": 505, "partner": 505, "feb": 505, "joint": 505, "bilibili": 505, "gestalt": 505, "ml": 505, "doubl": 505, "reconstruct": 505, "abound": 505, "lpot": [505, 510], "nextplatform": 505, "cern": 505, "gan": 505, "3dgan": 505, "iml": 505, "workshop": 505, "asplo": 505, "18": [505, 518], "highli": [505, 509], "intelcaff": 505, "aris": 506, "henc": 506, "onnxrt_qoper": 506, "quant_aware_train": 506, "weight_compress": [506, 517], "initial_spars": [506, 517], "prune_typ": [506, 517], "basic_magnitud": [506, 517], "update_frequ": 506, "prune_domain": 506, "tile_pattern_1x1": 506, "invent": 507, "cost": [507, 509], "On": [507, 518], "theoret": [507, 509], "zeropoint": 507, "255": [507, 512], "overflow": 507, "unseen": 507, "enough": 507, "peopl": 507, "mimic": 507, "fact": 507, "ultim": 507, "pain": 507, "lossi": 507, "philosophi": 507, "neither": 507, "nor": 507, "val_load": 507, "avg": 507, "themselv": 507, "dmlexecutionprovid": 507, "ON": 508, "forc": 508, "postposttrainingquantconfig": 508, "bf16wrapper": 508, "retrac": 508, "preval": 509, "grow": 509, "demand": 509, "w8a8": 509, "trade": 509, "bottleneck": 509, "roughli": 509, "speak": 509, "capac": [509, 511], "flop": 509, "famou": 509, "approx": 509, "bmm": 509, "100x": 509, "excel": 509, "stai": [509, 512], "quantif": [509, 512], "think": 509, "intuit": [509, 512], "uniformli": 509, "qlora": 509, "invers": 509, "restor": 509, "protect": 509, "greatli": 509, "inspir": 509, "normalfloat": 509, "e2m1": 509, "bnb": 509, "805": 509, "005": 509, "91": [509, 512, 518], "stabil": 509, "weightonlylinear": 509, "date": 509, "qweight": 509, "rtn_arg": 509, "gptq_arg": 509, "use_full_length": 509, "awq_arg": 509, "compressed_model": 509, "export_compressed_model": 509, "compression_dtyp": 509, "compression_dim": 509, "scale_dtyp": 509, "omit": 509, "rtn_g32asym": 509, "gptq_g32asym": 509, "gptq_g32asym_disable_last_matmul": 509, "gptq_g128asym": 509, "awq_g32asym": 509, "meanwhil": 509, "substanti": 509, "pose": 509, "challeng": 509, "lwq": 509, "even": [509, 512], "constrain": 509, "grei": 509, "blue": 509, "rectangl": 509, "10005": 509, "ouput_dir": 509, "xiao": [509, 512], "guangxuan": [509, 512], "2211": [509, 512], "10438": [509, 512], "wei": [509, 512], "xiui": [509, 512], "suppress": [509, 512], "2209": [509, 512], "13325": [509, 512], "lin": 509, "ji": 509, "2306": 509, "00978": 509, "elia": 509, "dettmer": 509, "tim": 509, "2305": 509, "14314": 509, "site": 510, "assist": 510, "experienc": 510, "18284": 510, "absenc": 510, "safe_mod": 510, "model_from_json": 510, "defici": 510, "hinder": 510, "sed": 510, "your_script": 510, "backbon": 511, "sigopt_experiment_id": 511, "nc": [511, 515], "suffici": 511, "ordinari": 511, "latenc": [511, 515], "8266": 511, "8372": 511, "2132": 511, "83": [511, 512, 518], "7495": 511, "8299": 511, "8294": 511, "85": [511, 512, 518], "0837": 511, "8291": 511, "4469": 511, "gigant": 512, "systemat": 512, "migrat": [512, 516], "difficulti": 512, "mathemat": 512, "allevi": 512, "coarsest": 512, "finer": [512, 515], "matric": 512, "similarli": 512, "finest": 512, "consumpt": 512, "why": [512, 513], "suppos": 512, "6839": 512, "4741": 512, "7451": 512, "9301": 512, "1742": 512, "6835": 512, "q_min": 512, "q_max": 512, "q_x": 512, "clamp_": 512, "round_": 512, "w_q": 512, "00296431384049356": 512, "59": [512, 518], "172": [512, 518], "192": 512, "w_dq": 512, "1220": 512, "0500": 512, "1430": 512, "2570": 512, "1890": 512, "mseloss": 512, "1983354538679123": 512, "6848": 512, "4743": 512, "7440": 512, "9308": 512, "1749": 512, "385297635664756e": 512, "07": [512, 517, 518], "affect": 512, "quantize_per_channel": 512, "x_tmp": 512, "detach": 512, "keepdim": 512, "dequantize_per_channel": 512, "0029": [512, 518], "0036": 512, "162": [512, 518], "48": [512, 518], "72": [512, 518], "93": [512, 518], "207": 512, "139": [512, 518], "6837": 512, "4734": 512, "1751": 512, "6821": 512, "637690492221736e": 512, "6376e": 512, "3852e": 512, "cdot": 512, "quantize_per_tensor_absmax": 512, "n_bit": 512, "div_": 512, "0806": 512, "7589": 512, "6038": 512, "3815": 512, "5040": 512, "7174": 512, "5444": 512, "5826": 512, "7772": 512, "5555": 512, "3740": 512, "3253": 512, "0698": 512, "1381": 512, "5972": [512, 518], "0086": 512, "0737": 512, "8298": 512, "6883": 512, "2991": 512, "1601": 512, "6506": 512, "8246": 512, "3924": 512, "3845": 512, "8768": 512, "w_scale": 512, "x_q": 512, "x_scale": 512, "84": [512, 518], "120": 512, "0059755356051027775": 512, "89": [512, 518], "119": 512, "57": [512, 518], "006533813662827015": 512, "y_q": 512, "17509": 512, "7608": 512, "4055": 512, "16599": 512, "21020": 512, "10016": 512, "9860": 512, "22444": 512, "y_dq": 512, "6836": 512, "2970": 512, "1583": 512, "6481": 512, "8207": 512, "3911": 512, "3850": 512, "8763": 512, "though": 512, "simplic": 512, "denot": 512, "fp1": 512, "fp2": 512, "subsect": [512, 517], "x1": [512, 515], "x2": [512, 515], "herebi": 512, "sq": 512, "overhead": 512, "hardtanh": 512, "t5norm": 512, "llamanorm": 512, "groupnorm": 512, "lambada": 512, "openai": [512, 518], "sweet": 512, "spot": 512, "region": 512, "bigscienc": [512, 518], "560m": 512, "354": 512, "3542": 512, "1b7": 512, "4634": 512, "4936": 512, "3b": 512, "518": 512, "5185": 512, "7b1": [512, 518], "5764": [512, 518], "5977": 512, "bloomz": [512, 518], "3947": 512, "3930": 512, "4828": 512, "4906": 512, "5018": 512, "4980": 512, "5593": [512, 518], "5552": 512, "125m": 512, "379": 512, "3757": 512, "350m": 512, "4516": 512, "4533": 512, "5789": 512, "5742": 512, "7b": [512, 518], "6365": 512, "6404": 512, "6769": [512, 518], "6804": [512, 518], "13b": [512, 518], "6872": 512, "6814": 512, "30b": [512, 518], "7149": 512, "7128": 512, "66b": 512, "7398": 512, "7326": 512, "7361": [512, 518], "7357": 512, "7627": [512, 518], "7590": 512, "7759": [512, 518], "7840": 512, "65b": 512, "7908": 512, "7957": 512, "7392": [512, 518], "7335": [512, 518], "chat": [512, 518], "7058": [512, 518], "6994": 512, "6831": [512, 518], "mbzuai": 512, "124m": 512, "3804": 512, "3887": 512, "774m": 512, "5048": 512, "5057": 512, "5b": 512, "5443": [512, 518], "5436": 512, "mosaicml": [512, 518], "655": [512, 518], "6499": 512, "stabilityai": 512, "stablelm": 512, "4172": 512, "4149": 512, "togethercomput": 512, "redpajama": 512, "incit": 512, "6542": 512, "6735": 512, "6718": 512, "6740": [512, 518], "6569": 512, "6621": 512, "7143": 512, "7221": 512, "6895": 512, "6953": [512, 518], "databrick": [512, 518], "6866": [512, 518], "6297": 512, "6247": 512, "tiiuae": [512, 518], "6437": [512, 518], "6392": 512, "asterisk": 512, "arang": 512, "tolist": 512, "jason": 512, "emerg": 512, "transact": 512, "yvinec": 512, "edouard": 512, "proceed": 512, "cvf": 512, "winter": 512, "instrument": 513, "writer": 513, "_pre_eval_hook": 513, "_post_eval_hook": 513, "submodul": 513, "whitelist": 513, "_recordingobserv": 513, "output_tensors_dict": 513, "current_it": 513, "get_tensor_valu": 513, "_observer_forward_hook": 513, "activation_post_process": 513, "_add_observer_": 513, "named_children": 513, "leaf": 513, "add_modul": 513, "register_forward_hook": 513, "dump_tim": 513, "summarywrit": 513, "_acc": 513, "tune_": 513, "add_graph": 513, "get_observer_dict": 513, "observer_dict": 513, "is_quant": 513, "add_histogram": 513, "shell": 513, "bind_al": 513, "logdir_spec": 513, "tune_0_acc0": 513, "tune_1": 513, "tune_1_acc0": 513, "79": [513, 518], "baseline_acc_0": 513, "776": 513, "tune_1_acc_0": 513, "095": 513, "runs_v3": 513, "run_tuning_dump_tensor": 513, "inceptionv3": 513, "run_quant": 513, "topologi": 513, "nc_inceptionv3": 513, "inceptionv3_dump_tensor": 513, "eightbit": 513, "disappear": 513, "centercrop": 514, "randomcrop": 514, "cropres": 514, "decodeimag": 514, "jpeg": 514, "encodejp": 514, "alignimagechannel": 514, "68": [514, 518], "116": 514, "78": [514, 518], "103": 514, "94": [514, 518], "017": 514, "bilinearimagenet": [514, 517], "topilimag": 514, "padding_mod": 514, "border": 514, "pixel": 514, "edg": 514, "colorjitt": 514, "bright": 514, "satur": 514, "hue": 514, "jitter": 514, "tondarrai": 514, "quickli": [515, 516], "o1": 515, "human": 515, "concret": 515, "aggress": 515, "classic": 515, "flowchart": 515, "htmllabel": 515, "td": 515, "classdef": 515, "itemstyl": 515, "cce5ff": 515, "stroke": 515, "99ccff": 515, "s1": 515, "s2": 515, "s3": 515, "s4": 515, "s5": 515, "s6": 515, "s7": 515, "nbsp": 515, "subgraphstyl": 515, "ffffff": 515, "attempt": 515, "post_training_auto_qu": 515, "trial": 515, "increment": 515, "ii": 515, "spent": 515, "hawq_v2_loss": 515, "model_loss": 515, "black": 515, "compli": 515, "posterior": 515, "short": 515, "loglevel": 515, "endlessli": 515, "perspect": 515, "smbo": 515, "appl": 515, "surrog": 515, "densiti": 515, "parzen": 515, "greatest": 515, "hour": 515, "dai": 515, "next_tune_cfg": 515, "overridden": 515, "replic": 515, "replica": 515, "fed": 515, "synchron": 515, "number_of_process": 515, "run_cmd": 515, "abctunestrategi": 515, "familiar": 516, "notebook": 516, "introduct": 516, "organ": 517, "logic": 517, "mobilenet_v1": 517, "40": [517, 518], "beta_1": 517, "beta_2": 517, "epsilon": 517, "sparsecategoricalcrossentropi": 517, "sum_over_batch_s": 517, "from_logit": 517, "54": [517, 518], "19": [517, 518], "09": 518, "1x": 518, "platinum": 518, "8480": 518, "8ghz": 518, "56": 518, "ht": 518, "turbo": 518, "256gb": 518, "16x16gb": 518, "ddr5": 518, "4800": 518, "mt": 518, "bio": 518, "3a14": 518, "tel2p1": 518, "microcod": 518, "0x2b0001b0": 518, "gcc": 518, "20210514": 518, "red": 518, "hat": 518, "visit": 518, "1s4c14ins1bsthroughput": 518, "sec": 518, "74": 518, "2914": 518, "621": 518, "69x": 518, "76": 518, "23": 518, "46": 518, "31": 518, "2160": 518, "545": 518, "47": 518, "96x": 518, "resnet101": 518, "77": 518, "37": 518, "1508": 518, "428": 518, "53x": 518, "70": 518, "44": 518, "69": 518, "3290": 518, "1229": 518, "68x": 518, "38": 518, "73": 518, "2404": 518, "1048": 518, "49": 518, "29x": 518, "71": 518, "1669": 518, "33x": 518, "1073": 518, "245": 518, "38x": 518, "374": 518, "52": 518, "18x": 518, "96": 518, "5478": 518, "1756": 518, "12x": 518, "4133": 518, "1748": 518, "36x": 518, "1534": 518, "236": 518, "62": 518, "49x": 518, "vgg19": 518, "1377": 518, "197": 518, "resnetv2": 518, "39": 518, "1125": 518, "656": 518, "71x": 518, "709": 518, "367": 518, "00": 518, "93x": 518, "152": 518, "03": 518, "497": 518, "265": 518, "87x": 518, "densenet": 518, "121": 518, "557": 518, "67": 518, "61": 518, "22x": 518, "161": 518, "29": 518, "353": 518, "235": 518, "50x": 518, "169": 518, "65": 518, "41": 518, "435": 518, "385": 518, "13x": 518, "efficientnet": 518, "b0": 518, "786": 518, "723": 518, "09x": 518, "130": 518, "23x": 518, "1291": 518, "683": 518, "89x": 518, "61x": 518, "1295": 518, "453": 518, "85x": 518, "242": 518, "31x": 518, "cnn": 518, "80x": 518, "43": 518, "81x": 518, "166": 518, "07x": 518, "16x": 518, "26": 518, "173": 518, "yolov3": 518, "82": 518, "230": 518, "92": 518, "36": 518, "37x": 518, "58x": 518, "86": 518, "416": 518, "35x": 518, "88x": 518, "51": 518, "17x": 518, "75552": 518, "50803": 518, "1s56c1ins1bsthroughput": 518, "60": 518, "64x": 518, "1673": 518, "653": 518, "56x": 518, "1170": 518, "329": 518, "55x": 518, "977": 518, "335": 518, "91x": 518, "resnest50": 518, "81": 518, "10x": 518, "resnext101_32x8d": 518, "562": 518, "109": 518, "efficientnet_b0": 518, "696": 518, "667": 518, "04x": 518, "efficientnet_b3": 518, "508": 518, "397": 518, "28x": 518, "efficientnet_b7": 518, "234": 518, "149": 518, "57x": 518, "peleenet": 518, "858": 518, "588": 518, "46x": 518, "se_resnext50_32x4d": 518, "739": 518, "283": 518, "yolo": 518, "141": 518, "99x": 518, "174": 518, "camembert": 518, "395": 518, "171": 518, "30x": 518, "53": 518, "795": 518, "341": 518, "744": 518, "343": 518, "163": 518, "funnel": 518, "182": 518, "65x": 518, "399": 518, "21x": 518, "407": 518, "412": 518, "stsb": 518, "413": 518, "39x": 518, "409": 518, "75x": 518, "401": 518, "70x": 518, "76x": 518, "reform": 518, "crime": 518, "punish": 518, "446": 518, "398": 518, "lvwerra": 518, "pegasu": 518, "samsum": 518, "102": 518, "770": 518, "450": 518, "14x": 518, "whisper": 518, "25x": 518, "abeja": 518, "neox": 518, "japanes": 518, "90x": 518, "1646": 518, "657": 518, "1098": 518, "322": 518, "41x": 518, "568": 518, "19x": 518, "1383": 518, "761": 518, "82x": 518, "32x": 518, "5701": 518, "1593": 518, "2090": 518, "685": 518, "05x": 518, "resnext101_32x16d_wsl": 518, "556": 518, "01x": 518, "86x": 518, "558": 518, "11x": 518, "lambada_openai": 518, "hellaswag": 518, "winogrand": 518, "piqa": 518, "word_perplex": 518, "4954": 518, "6409": 518, "7541": 518, "6434": 518, "8816": 518, "gptqw4g128asym": 518, "679": 518, "4895": 518, "6433": 518, "7476": 518, "6399": 518, "9945": 518, "0999": 518, "gptqw4g32asym": 518, "6829": 518, "4923": 518, "6401": 518, "7486": 518, "6410": 518, "9963": 518, "0141": 518, "gptqw4g128sym": 518, "4907": 518, "6361": 518, "7443": 518, "6390": 518, "9932": 518, "1498": 518, "gptqw4g32sym": 518, "6911": 518, "4899": 518, "6448": 518, "7497": 518, "6439": 518, "0008": 518, "0927": 518, "5049": 518, "6543": 518, "7628": 518, "6497": 518, "2862": 518, "4984": 518, "6535": 518, "7568": 518, "6473": 518, "9962": 518, "4193": 518, "6885": 518, "4973": 518, "753": 518, "6455": 518, "9935": 518, "4607": 518, "decapoda": 518, "5642": 518, "6709": 518, "7835": 518, "6887": 518, "4202": 518, "7244": 518, "5603": 518, "6614": 518, "6824": 518, "9909": 518, "5881": 518, "5911": 518, "7009": 518, "7878": 518, "7106": 518, "212": 518, "7518": 518, "5843": 518, "6961": 518, "7911": 518, "4319": 518, "7572": 518, "5898": 518, "7056": 518, "7894": 518, "7105": 518, "9998": 518, "3429": 518, "7596": 518, "5841": 518, "6977": 518, "7905": 518, "7080": 518, "4916": 518, "6266": 518, "7277": 518, "8096": 518, "7350": 518, "2384": 518, "778": 518, "624": 518, "7269": 518, "8047": 518, "7334": 518, "9979": 518, "4237": 518, "7706": 518, "6239": 518, "7285": 518, "8058": 518, "7322": 518, "4697": 518, "7836": 518, "6195": 518, "7337": 518, "9983": 518, "5604": 518, "5732": 518, "648": 518, "7715": 518, "6746": 518, "7107": 518, "6982": 518, "5637": 518, "6527": 518, "7704": 518, "6713": 518, "9950": 518, "9702": 518, "5682": 518, "6575": 518, "7758": 518, "6742": 518, "9994": 518, "9317": 518, "567": 518, "6902": 518, "7353": 518, "6622": 518, "7829": 518, "6862": 518, "9942": 518, "9635": 518, "7246": 518, "5617": 518, "6756": 518, "7797": 518, "6854": 518, "9931": 518, "2799": 518, "7312": 518, "6059": 518, "7103": 518, "7077": 518, "2213": 518, "7273": 518, "6018": 518, "7088": 518, "7742": 518, "7030": 518, "9934": 518, "2538": 518, "083": 518, "7283": 518, "6053": 518, "7024": 518, "7764": 518, "7031": 518, "1889": 518, "727": 518, "5997": 518, "7018": 518, "9916": 518, "2504": 518, "7677": 518, "7122": 518, "8984": 518, "5933": 518, "689": 518, "7851": 518, "7075": 518, "1556": 518, "448": 518, "7675": 518, "5934": 518, "7856": 518, "7111": 518, "9984": 518, "1514": 518, "927": 518, "7566": 518, "5899": 518, "7032": 518, "9953": 518, "1374": 518, "728": 518, "4628": 518, "6456": 518, "6029": 518, "6438": 518, "5799": 518, "4542": 518, "6004": 518, "9957": 518, "0626": 518, "4789": 518, "6134": 518, "7432": 518, "5525": 518, "4731": 518, "6504": 518, "7617": 518, "6094": 518, "7828": 518, "5098": 518, "7622": 518, "6505": 518, "3242": 518, "6878": 518, "5058": 518, "6393": 518, "7633": 518, "6491": 518, "9978": 518, "5514": 518, "6864": 518, "5084": 518, "6519": 518, "6509": 518, "0006": 518, "4728": 518, "6876": 518, "5045": 518, "6474": 518, "9952": 518, "6379": 518, "5282": 518, "614": 518, "7448": 518, "6312": 518, "6377": 518, "5228": 518, "5991": 518, "6261": 518, "9919": 518, "4096": 518, "neo": 518, "6224": 518, "4271": 518, "577": 518, "722": 518, "5871": 518, "9359": 518, "6123": 518, "4227": 518, "5738": 518, "7203": 518, "5823": 518, "9917": 518, "3377": 518, "615": 518, "4259": 518, "5714": 518, "7247": 518, "9951": 518, "2083": 518, "6154": 518, "4208": 518, "5777": 518, "7198": 518, "5834": 518, "9937": 518, "3121": 518, "20b": 518, "7233": 518, "5359": 518, "7753": 518, "195": 518, "7186": 518, "5328": 518, "7699": 518, "6687": 518, "9922": 518, "3463": 518, "7268": 518, "533": 518, "659": 518, "6726": 518, "2897": 518, "5718": 518, "6859": 518, "7927": 518, "6890": 518, "9324": 518, "7006": 518, "5655": 518, "6803": 518, "7965": 518, "6857": 518, "1515": 518, "5752": 518, "6748": 518, "7845": 518, "6724": 518, "5951": 518, "6472": 518, "5716": 518, "6685": 518, "784": 518, "6678": 518, "8539": 518, "6918": 518, "5819": 518, "678": 518, "6861": 518, "8863": 518, "5765": 518, "6827": 518, "7873": 518, "6832": 518, "9958": 518, "1451": 518, "storywrit": 518, "693": 518, "5477": 518, "663": 518, "6719": 518, "9125": 518, "6661": 518, "7813": 518, "6693": 518, "9961": 518, "1137": 518, "rw": 518, "6604": 518, "5419": 518, "6598": 518, "6594": 518, "7616": 518, "6484": 518, "5369": 518, "7807": 518, "6559": 518, "9947": 518, "9411": 518, "6571": 518, "5398": 518, "6582": 518, "6579": 518, "8809": 518, "652": 518, "535": 518, "7682": 518, "6532": 518, "9906": 518, "0048": 518, "5177": 518, "6669": 518, "7824": 518, "5053": 518, "6301": 518, "5142": 518, "6654": 518, "6483": 518, "9933": 518, "8146": 518, "517": 518, "9941": 518, "1566": 518, "724": 518, "1567": 518, "716": 518, "1414": 518, "718": 518, "97x": 518, "1459": 518, "721": 518, "02x": 518, "1582": 518, "752": 518, "7139": 518, "4289": 518, "66x": 518, "4080": 518, "7236": 518, "4299": 518, "6842": 518, "4496": 518, "52x": 518, "591": 518, "178": 518, "183": 518, "590": 518, "179": 518, "42x": 518, "5703": 518, "2578": 518, "5610": 518, "2603": 518, "shufflenet": 518, "6689": 518, "3690": 518, "5692": 518, "3758": 518, "51x": 518, "googlenet": 518, "1792": 518, "1111": 518, "1821": 518, "1104": 518, "squeezenet": 518, "9472": 518, "5582": 518, "9861": 518, "5566": 518, "77x": 518, "caffenet": 518, "3348": 518, "1141": 518, "3509": 518, "1142": 518, "2426": 518, "987": 518, "2208": 518, "1016": 518, "zfnet": 518, "930": 518, "532": 518, "919": 518, "417": 518, "1880": 518, "1159": 518, "62x": 518, "1798": 518, "1151": 518, "2890": 518, "1380": 518, "2548": 518, "1362": 518, "507": 518, "94x": 518, "1286": 518, "904": 518, "1121": 518, "856": 518, "829": 518, "1044": 518, "790": 518, "849": 518, "627": 518, "79x": 518, "yolov4": 518, "duc": 518, "tini": 518, "1119": 518, "ultra": 518, "8537": 518, "1934": 518, "emot": 518, "ferplu": 518, "3568": 518, "arcfac": 518, "494": 518, "244": 518, "226": 518, "392": 518, "223": 518, "integerop": 518, "473": 518, "548": 518, "964": 518, "540": 518, "394": 518, "602": 518, "487": 518, "222": 518, "20x": 518, "189": 518, "146": 518, "125": 518, "bidaf": 518, "2757": 518, "2277": 518, "gpt2": 518, "360": 518, "213": 518, "490": 518, "304": 518, "214": 518, "347": 518, "272": 518, "216": 518, "26x": 518, "489": 518, "27x": 518, "l12": 518, "h384": 518, "1054": 518, "585": 518, "1072": 518, "890": 518, "746": 518, "268": 518, "211": 518, "l6": 518, "1958": 518, "1130": 518, "73x": 518, "electra": 518, "discrimin": 518, "1797": 518, "1077": 518, "67x": 518, "1930": 518, "1139": 518, "mini": 518, "5510": 518, "3334": 518, "5627": 518, "3365": 518, "108": 518, "110": 518, "bart": 518, "15x": 518, "deberta": 518, "168": 518, "145": 518, "spanbert": 518, "63x": 518, "multilingu": 518, "113": 518, "159": 518, "40x": 518, "distilgpt2": 518, "layoutlm": 518, "layoutlmv2": 518, "codebert": 518, "47x": 518, "fcn": 518, "perplex": 518, "2788": 518, "7002": 518, "4124": 518, "9921": 518, "3950": 518, "5711": 518, "9892": 518, "9163": 518, "7240": 518, "9902": 518, "0438": 518, "7634": 518, "1186": 518, "9944": 518, "7615": 518, "1276": 518, "70b": 518, "7543": 518, "6181": 518, "rtnw4g32asym": 518, "6496": 518, "9967": 518, "7964": 518, "6612": 518, "rtnw4g32sym": 518, "7941": 518, "7243": 518, "9971": 518, "taskdataset": 518, "accuracyspars": 518, "ratiospars": 518, "commentsbalancedor": 518, "unbalanc": 518, "answeringsquad": 518, "87f1": 518, "momentumunbalanc": 518, "momentumbalanc": 518, "90f1": 518, "59f1": 518, "23f1": 518, "classificationmrpc": 518, "52f1": 518, "26f1": 518, "classificationsst": 518, "61accuraci": 518, "recognitionimagenet": 518, "95top1": 518, "v5s6": 518, "detectioncoco": 518, "ap0": 518, "6ap0": 518, "393": 518, "584": 518, "34f1": 518, "lassounbalanc": 518, "classificationmnli": 518, "mm": 518, "allbalanc": 518, "32accuraci": 518, "sensitivitybalanc": 518, "classificationqqp": 518, "classificationqnli": 518, "54accuraci": 518, "em": 518, "mobilenetv2": 518, "wideresnet40": 518, "9522": 518, "8178": 518, "0213": 518, "8235": 518, "027": 518, "5494": 518, "7153": 518, "5540": 518, "0046": 518, "5523": 518, "vgg": 518, "bn": 518, "7022": 518, "7415": 518, "7025": 518, "0003": 518, "6739": 518, "7399": 518, "6845": 518, "0106": 518, "blendcnn": 518, "7034": 518, "8382": 518, "bilstm": 518, "8314": 518, "9403": 518, "9048": 518, "0734": 518, "7323": 518, "8256": 518, "8084": 518, "8814": 518, "7442": 518, "8371": 518, "0119": 518, "0115": 518, "tinybert": 518, "8018": 518, "8044": 518, "8363": 518, "8411": 518, "8025": 518, "8074": 518, "0007": 518, "0030": 518, "8626": 518, "9091": 518, "8782": 518, "8684": 518, "8259": 518, "0058": 518, "distilroberta": 518, "6057": 518, "6187": 518, "0130": 518, "c6i": 518, "2xlarg": 518, "c6a": 518, "c6g": 518, "a100cuda": 518, "executionprovid": 518}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [345, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [169, 0, 0, "-", "algorithm"], [172, 0, 0, "-", "benchmark"], [182, 0, 0, "-", "compression"], [210, 0, 0, "-", "conf"], [212, 0, 0, "-", "config"], [213, 0, 0, "-", "contrib"], [238, 0, 0, "-", "data"], [292, 0, 0, "-", "experimental"], [352, 0, 0, "-", "metric"], [354, 0, 0, "-", "mix_precision"], [356, 0, 0, "-", "model"], [364, 0, 0, "-", "objective"], [365, 0, 0, "-", "profiling"], [387, 0, 0, "-", "quantization"], [395, 0, 0, "-", "strategy"], [407, 0, 0, "-", "template"], [408, 0, 0, "-", "training"], [412, 0, 0, "-", "utils"], [421, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [153, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "awq"], [150, 0, 0, "-", "bf16_convert"], [151, 0, 0, "-", "gptq"], [152, 0, 0, "-", "hawq_metric"], [154, 0, 0, "-", "layer_wise_quant"], [159, 0, 0, "-", "mixed_precision"], [160, 0, 0, "-", "model_wrapper"], [161, 0, 0, "-", "pattern_detector"], [162, 0, 0, "-", "smooth_quant"], [163, 0, 0, "-", "symbolic_trace"], [164, 0, 0, "-", "teq"], [165, 0, 0, "-", "util"], [166, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.awq": [[149, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, 1, 1, "", "BF16ModuleWrapper"], [150, 2, 1, "", "Convert"], [150, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, 1, 1, "", "GPTQ"], [151, 1, 1, "", "GPTQuantizer"], [151, 2, 1, "", "find_layers"], [151, 2, 1, "", "find_layers_name"], [151, 2, 1, "", "is_leaf"], [151, 2, 1, "", "log_quantizable_layers_per_transformer"], [151, 2, 1, "", "quantize"], [151, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, 1, 1, "", "HessianTrace"], [152, 1, 1, "", "Node_collector"], [152, 2, 1, "", "compare_weights"], [152, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[155, 0, 0, "-", "modified_pickle"], [156, 0, 0, "-", "quantize"], [157, 0, 0, "-", "torch_load"], [158, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, 3, 1, "", "PickleError"], [155, 3, 1, "", "PicklingError"], [155, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, 2, 1, "", "dowload_hf_model"], [158, 2, 1, "", "get_children"], [158, 2, 1, "", "get_module"], [158, 2, 1, "", "get_named_children"], [158, 2, 1, "", "get_super_module_by_name"], [158, 2, 1, "", "load_empty_model"], [158, 2, 1, "", "load_layer_wise_quantized_model"], [158, 2, 1, "", "load_tensor"], [158, 2, 1, "", "load_tensor_from_shard"], [158, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, 1, 1, "", "FakeAffineTensorQuantFunction"], [160, 1, 1, "", "MulLinear"], [160, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, 1, 1, "", "TorchSmoothQuant"], [162, 2, 1, "", "get_module"], [162, 2, 1, "", "set_module"], [162, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, 2, 1, "", "symbolic_trace"], [163, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[164, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[165, 2, 1, "", "append_attr"], [165, 2, 1, "", "auto_copy"], [165, 2, 1, "", "calculate_quant_min_max"], [165, 2, 1, "", "calibration"], [165, 2, 1, "", "check_cfg_and_qconfig"], [165, 2, 1, "", "collate_torch_preds"], [165, 2, 1, "", "collect_weight_info"], [165, 2, 1, "", "fetch_module"], [165, 2, 1, "", "generate_activation_observer"], [165, 2, 1, "", "get_absorb_layers"], [165, 2, 1, "", "get_block_prefix"], [165, 2, 1, "", "get_depth"], [165, 2, 1, "", "get_dict_at_depth"], [165, 2, 1, "", "get_element_under_depth"], [165, 2, 1, "", "get_embedding_contiguous"], [165, 2, 1, "", "get_example_input"], [165, 2, 1, "", "get_fallback_order"], [165, 2, 1, "", "get_hidden_states"], [165, 2, 1, "", "get_module_input_output"], [165, 2, 1, "", "get_mse_order_per_fp32"], [165, 2, 1, "", "get_mse_order_per_int8"], [165, 2, 1, "", "get_op_type_by_name"], [165, 2, 1, "", "get_quantizable_ops_from_cfgs"], [165, 2, 1, "", "get_torch_version"], [165, 2, 1, "", "input2tuple"], [165, 2, 1, "", "is_fused_module"], [165, 2, 1, "", "match_datatype_pattern"], [165, 2, 1, "", "paser_cfgs"], [165, 2, 1, "", "set_module"], [165, 2, 1, "", "simple_inference"], [165, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, 2, 1, "", "awq_quantize"], [166, 2, 1, "", "gptq_quantize"], [166, 2, 1, "", "qdq_weight_actor"], [166, 2, 1, "", "qdq_weight_asym"], [166, 2, 1, "", "qdq_weight_sym"], [166, 2, 1, "", "quant_weight"], [166, 2, 1, "", "quant_weight_w_scale"], [166, 2, 1, "", "quantize_4bit"], [166, 2, 1, "", "rtn_quantize"], [166, 2, 1, "", "search_clip"], [166, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[167, 0, 0, "-", "algorithm"], [168, 0, 0, "-", "fast_bias_correction"], [170, 0, 0, "-", "smooth_quant"], [171, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[167, 1, 1, "", "ALGORITHMS"], [167, 1, 1, "", "Algorithm"], [167, 1, 1, "", "AlgorithmScheduler"], [167, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[168, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[170, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[171, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[172, 2, 1, "", "benchmark_with_raw_cmd"], [172, 2, 1, "", "call_one"], [172, 2, 1, "", "config_instance"], [172, 2, 1, "", "fit"], [172, 2, 1, "", "generate_prefix"], [172, 2, 1, "", "get_architecture"], [172, 2, 1, "", "get_bounded_threads"], [172, 2, 1, "", "get_core_ids"], [172, 2, 1, "", "get_physical_ids"], [172, 2, 1, "", "get_threads"], [172, 2, 1, "", "get_threads_per_core"], [172, 2, 1, "", "profile"], [172, 2, 1, "", "run_instance"], [172, 2, 1, "", "set_all_env_var"], [172, 2, 1, "", "set_env_var"], [172, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[173, 0, 0, "-", "callbacks"], [175, 0, 0, "-", "distillation"], [178, 0, 0, "-", "hpo"], [184, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[173, 1, 1, "", "BaseCallbacks"], [173, 1, 1, "", "DistillationCallbacks"], [173, 1, 1, "", "PruningCallbacks"], [173, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[173, 4, 1, "", "_epoch_ran"], [173, 4, 1, "", "best_model"], [173, 4, 1, "", "best_score"], [173, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[174, 0, 0, "-", "criterions"], [176, 0, 0, "-", "optimizers"], [177, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[174, 1, 1, "", "Criterions"], [174, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [174, 1, 1, "", "KnowledgeDistillationFramework"], [174, 1, 1, "", "KnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchCriterions"], [174, 1, 1, "", "PyTorchCrossEntropyLoss"], [174, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [174, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [174, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [174, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [174, 1, 1, "", "SelfKnowledgeDistillationLoss"], [174, 1, 1, "", "TensorFlowCrossEntropyLoss"], [174, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [174, 1, 1, "", "TensorflowCriterions"], [174, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [174, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [174, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [174, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[176, 1, 1, "", "Optimizers"], [176, 1, 1, "", "PyTorchOptimizers"], [176, 1, 1, "", "PyTorchSGD"], [176, 1, 1, "", "TensorFlowAdam"], [176, 1, 1, "", "TensorFlowAdamW"], [176, 1, 1, "", "TensorFlowSGD"], [176, 1, 1, "", "TensorflowOptimizers"], [176, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[177, 2, 1, "", "get_activation"], [177, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[179, 0, 0, "-", "sa_optimizer"], [180, 0, 0, "-", "search_algorithms"], [181, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[180, 1, 1, "", "BayesianOptimizationSearcher"], [180, 1, 1, "", "GridSearcher"], [180, 1, 1, "", "RandomSearcher"], [180, 1, 1, "", "Searcher"], [180, 1, 1, "", "XgbSearcher"], [180, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[181, 1, 1, "", "BaseSearchSpace"], [181, 1, 1, "", "ContinuousSearchSpace"], [181, 1, 1, "", "DiscreteSearchSpace"], [181, 1, 1, "", "SearchSpace"], [181, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[183, 0, 0, "-", "criteria"], [186, 0, 0, "-", "model_slim"], [190, 0, 0, "-", "patterns"], [184, 2, 1, "", "prepare_pruning"], [197, 0, 0, "-", "pruners"], [203, 0, 0, "-", "pruning"], [204, 0, 0, "-", "regs"], [184, 2, 1, "", "save"], [205, 0, 0, "-", "schedulers"], [206, 0, 0, "-", "tf_criteria"], [207, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[183, 1, 1, "", "BlockMaskCriterion"], [183, 1, 1, "", "GradientCriterion"], [183, 1, 1, "", "MagnitudeCriterion"], [183, 1, 1, "", "PruningCriterion"], [183, 1, 1, "", "RetrainFreeCriterion"], [183, 1, 1, "", "SnipCriterion"], [183, 1, 1, "", "SnipMomentumCriterion"], [183, 2, 1, "", "get_criterion"], [183, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[183, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[185, 0, 0, "-", "auto_slim"], [187, 0, 0, "-", "pattern_analyzer"], [188, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[185, 2, 1, "", "generate_ffn2_pruning_config"], [185, 2, 1, "", "generate_mha_pruning_config"], [185, 2, 1, "", "model_slim"], [185, 2, 1, "", "model_slim_ffn2"], [185, 2, 1, "", "model_slim_mha"], [185, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[187, 1, 1, "", "ClassifierHeadSearcher"], [187, 1, 1, "", "ClassifierHeadSearcherTF"], [187, 1, 1, "", "JitBasicSearcher"], [187, 1, 1, "", "Linear2LinearSearcher"], [187, 1, 1, "", "RecipeSearcher"], [187, 1, 1, "", "SelfMHASearcher"], [187, 2, 1, "", "get_attributes"], [187, 2, 1, "", "get_common_module"], [187, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[187, 4, 1, "", "device"], [187, 4, 1, "", "flatten_static_graph"], [187, 4, 1, "", "model"], [187, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[187, 4, 1, "", "device"], [187, 4, 1, "", "flatten_static_graph"], [187, 4, 1, "", "model"], [187, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[187, 4, 1, "", "device"], [187, 4, 1, "", "flatten_static_graph"], [187, 4, 1, "", "model"], [187, 4, 1, "", "searching_results"], [187, 4, 1, "", "static_graph"], [187, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[187, 4, 1, "", "current_pattern"], [187, 4, 1, "", "device"], [187, 4, 1, "", "flatten_static_graph"], [187, 4, 1, "", "model"], [187, 4, 1, "", "searching_results"], [187, 4, 1, "", "static_graph"], [187, 4, 1, "", "target_layers"], [187, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[187, 4, 1, "", "model"], [187, 4, 1, "", "recipe"], [187, 4, 1, "", "searching_results"], [187, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[187, 4, 1, "", "device"], [187, 4, 1, "", "flatten_static_graph"], [187, 4, 1, "", "model"], [187, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[188, 1, 1, "", "LinearCompression"], [188, 1, 1, "", "LinearCompressionIterator"], [188, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[188, 4, 1, "", "device"], [188, 4, 1, "", "layer_1"], [188, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[188, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[189, 0, 0, "-", "base"], [190, 2, 1, "", "get_pattern"], [191, 0, 0, "-", "mha"], [192, 0, 0, "-", "ninm"], [193, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[189, 1, 1, "", "BasePattern"], [189, 1, 1, "", "KerasBasePattern"], [189, 1, 1, "", "PytorchBasePattern"], [189, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[189, 4, 1, "", "config"], [189, 4, 1, "", "invalid_layers"], [189, 4, 1, "", "is_global"], [189, 4, 1, "", "keep_mask_layers"], [189, 4, 1, "", "max_sparsity_ratio_per_op"], [189, 4, 1, "", "min_sparsity_ratio_per_op"], [189, 4, 1, "", "modules"], [189, 4, 1, "", "pattern"], [189, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[189, 4, 1, "", "config"], [189, 4, 1, "", "invalid_layers"], [189, 4, 1, "", "is_global"], [189, 4, 1, "", "keep_mask_layers"], [189, 4, 1, "", "max_sparsity_ratio_per_op"], [189, 4, 1, "", "min_sparsity_ratio_per_op"], [189, 4, 1, "", "modules"], [189, 4, 1, "", "pattern"], [189, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[189, 4, 1, "", "config"], [189, 4, 1, "", "invalid_layers"], [189, 4, 1, "", "is_global"], [189, 4, 1, "", "keep_mask_layers"], [189, 4, 1, "", "max_sparsity_ratio_per_op"], [189, 4, 1, "", "min_sparsity_ratio_per_op"], [189, 4, 1, "", "modules"], [189, 4, 1, "", "pattern"], [189, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[191, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[191, 4, 1, "", "M"], [191, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[192, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[192, 4, 1, "", "M"], [192, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[193, 1, 1, "", "KerasPatternNxM"], [193, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[193, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[193, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[194, 0, 0, "-", "base"], [195, 0, 0, "-", "basic"], [196, 0, 0, "-", "block_mask"], [197, 2, 1, "", "get_pruner"], [198, 0, 0, "-", "mha"], [197, 2, 1, "", "parse_valid_pruner_types"], [199, 0, 0, "-", "pattern_lock"], [200, 0, 0, "-", "progressive"], [201, 0, 0, "-", "retrain_free"], [202, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[194, 1, 1, "", "BasePruner"], [194, 1, 1, "", "KerasBasePruner"], [194, 1, 1, "", "PytorchBasePruner"], [194, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[194, 4, 1, "", "config"], [194, 4, 1, "", "current_sparsity_ratio"], [194, 4, 1, "", "end_step"], [194, 4, 1, "", "global_step"], [194, 4, 1, "", "masks"], [194, 4, 1, "", "max_sparsity_ratio_per_op"], [194, 4, 1, "", "modules"], [194, 4, 1, "", "pattern"], [194, 4, 1, "", "pruning_frequency"], [194, 4, 1, "", "scheduler"], [194, 4, 1, "", "scores"], [194, 4, 1, "", "start_step"], [194, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[194, 4, 1, "", "config"], [194, 4, 1, "", "current_sparsity_ratio"], [194, 4, 1, "", "end_step"], [194, 4, 1, "", "global_step"], [194, 4, 1, "", "masks"], [194, 4, 1, "", "max_sparsity_ratio_per_op"], [194, 4, 1, "", "modules"], [194, 4, 1, "", "pattern"], [194, 4, 1, "", "pruning_frequency"], [194, 4, 1, "", "scheduler"], [194, 4, 1, "", "scores"], [194, 4, 1, "", "start_step"], [194, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[194, 4, 1, "", "config"], [194, 4, 1, "", "current_sparsity_ratio"], [194, 4, 1, "", "end_step"], [194, 4, 1, "", "global_step"], [194, 4, 1, "", "masks"], [194, 4, 1, "", "max_sparsity_ratio_per_op"], [194, 4, 1, "", "modules"], [194, 4, 1, "", "pattern"], [194, 4, 1, "", "pruning_frequency"], [194, 4, 1, "", "scheduler"], [194, 4, 1, "", "scores"], [194, 4, 1, "", "start_step"], [194, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[195, 1, 1, "", "KerasBasicPruner"], [195, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[195, 4, 1, "", "criterion"], [195, 4, 1, "", "pattern"], [195, 4, 1, "", "reg"], [195, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[195, 4, 1, "", "criterion"], [195, 4, 1, "", "pattern"], [195, 4, 1, "", "reg"], [195, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[196, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[196, 4, 1, "", "criterion"], [196, 4, 1, "", "pattern"], [196, 4, 1, "", "reg"], [196, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[198, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[198, 4, 1, "", "head_masks"], [198, 4, 1, "", "linear_layers"], [198, 4, 1, "", "mha_compressions"], [198, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[199, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[200, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[201, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[201, 4, 1, "", "criterion"], [201, 4, 1, "", "pattern"], [201, 4, 1, "", "reg"], [201, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[202, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[202, 4, 1, "", "criterion"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "reg"], [202, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[203, 1, 1, "", "BasePruning"], [203, 1, 1, "", "BasicPruning"], [203, 1, 1, "", "RetrainFreePruning"], [203, 1, 1, "", "SparseGPTPruning"], [203, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[203, 4, 1, "", "config_file_path"], [203, 4, 1, "", "model"], [203, 4, 1, "", "pruner_info"], [203, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[203, 4, 1, "", "config_file_path"], [203, 4, 1, "", "model"], [203, 4, 1, "", "pruner_info"], [203, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[203, 4, 1, "", "config_file_path"], [203, 4, 1, "", "model"], [203, 4, 1, "", "pruner_info"], [203, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[204, 1, 1, "", "BaseReg"], [204, 1, 1, "", "GroupLasso"], [204, 2, 1, "", "get_reg"], [204, 2, 1, "", "get_reg_type"], [204, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[204, 4, 1, "", "alpha"], [204, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[205, 1, 1, "", "IterativeScheduler"], [205, 1, 1, "", "OneshotScheduler"], [205, 1, 1, "", "PruningScheduler"], [205, 2, 1, "", "get_scheduler"], [205, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[205, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[206, 1, 1, "", "MagnitudeCriterion"], [206, 1, 1, "", "PruningCriterion"], [206, 2, 1, "", "get_tf_criterion"], [206, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[206, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[206, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[207, 2, 1, "", "check_config"], [207, 2, 1, "", "check_key_validity"], [207, 2, 1, "", "collect_layer_inputs"], [207, 2, 1, "", "generate_pruner_config"], [207, 2, 1, "", "get_layers"], [207, 2, 1, "", "get_sparsity_ratio"], [207, 2, 1, "", "get_sparsity_ratio_tf"], [207, 2, 1, "", "parse_last_linear"], [207, 2, 1, "", "parse_last_linear_tf"], [207, 2, 1, "", "parse_to_prune"], [207, 2, 1, "", "parse_to_prune_tf"], [207, 2, 1, "", "process_and_check_config"], [207, 2, 1, "", "process_config"], [207, 2, 1, "", "process_weight_config"], [207, 2, 1, "", "process_yaml_config"], [207, 2, 1, "", "reset_none_to_default"], [207, 2, 1, "", "update_params"]], "neural_compressor.conf": [[208, 0, 0, "-", "config"], [209, 0, 0, "-", "dotdict"], [211, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[208, 1, 1, "", "Benchmark_Conf"], [208, 1, 1, "", "Conf"], [208, 1, 1, "", "DefaultConf"], [208, 1, 1, "", "Distillation_Conf"], [208, 1, 1, "", "Graph_Optimization_Conf"], [208, 1, 1, "", "MixedPrecision_Conf"], [208, 1, 1, "", "NASConfig"], [208, 1, 1, "", "PrunerV2"], [208, 1, 1, "", "Pruning_Conf"], [208, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[209, 1, 1, "", "DotDict"], [209, 2, 1, "", "deep_get"], [209, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[211, 1, 1, "", "AccuracyCriterion"], [211, 1, 1, "", "BenchmarkConfig"], [211, 1, 1, "", "DistillationConfig"], [211, 1, 1, "", "KnowledgeDistillationLossConfig"], [211, 1, 1, "", "Options"], [211, 1, 1, "", "QuantizationConfig"], [211, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[212, 1, 1, "", "AccuracyCriterion"], [212, 1, 1, "", "BenchmarkConfig"], [212, 1, 1, "", "DistillationConfig"], [212, 1, 1, "", "DotDict"], [212, 1, 1, "", "ExportConfig"], [212, 1, 1, "", "HPOConfig"], [212, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [212, 1, 1, "", "Keras"], [212, 1, 1, "", "KnowledgeDistillationLossConfig"], [212, 1, 1, "", "MXNet"], [212, 1, 1, "", "MixedPrecisionConfig"], [212, 1, 1, "", "NASConfig"], [212, 1, 1, "", "ONNX"], [212, 1, 1, "", "ONNXQlinear2QDQConfig"], [212, 1, 1, "", "Options"], [212, 1, 1, "", "PostTrainingQuantConfig"], [212, 1, 1, "", "PyTorch"], [212, 1, 1, "", "QuantizationAwareTrainingConfig"], [212, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [212, 1, 1, "", "TF2ONNXConfig"], [212, 1, 1, "", "TensorFlow"], [212, 1, 1, "", "Torch2ONNXConfig"], [212, 1, 1, "", "TuningCriterion"], [212, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[214, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[215, 0, 0, "-", "sigopt"], [216, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[215, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[216, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[221, 0, 0, "-", "dataloaders"], [233, 0, 0, "-", "datasets"], [237, 0, 0, "-", "filters"], [241, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[217, 0, 0, "-", "base_dataloader"], [218, 0, 0, "-", "dataloader"], [219, 0, 0, "-", "default_dataloader"], [220, 0, 0, "-", "fetcher"], [222, 0, 0, "-", "mxnet_dataloader"], [223, 0, 0, "-", "onnxrt_dataloader"], [224, 0, 0, "-", "pytorch_dataloader"], [225, 0, 0, "-", "sampler"], [226, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[217, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[218, 1, 1, "", "DataLoader"], [218, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[219, 1, 1, "", "DefaultDataLoader"], [219, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[220, 1, 1, "", "Fetcher"], [220, 1, 1, "", "IndexFetcher"], [220, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[222, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[223, 1, 1, "", "ONNXRTBertDataLoader"], [223, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[224, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[225, 1, 1, "", "BatchSampler"], [225, 1, 1, "", "IterableSampler"], [225, 1, 1, "", "Sampler"], [225, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[226, 1, 1, "", "TFDataDataLoader"], [226, 1, 1, "", "TensorflowBertDataLoader"], [226, 1, 1, "", "TensorflowDataLoader"], [226, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[227, 0, 0, "-", "bert_dataset"], [228, 0, 0, "-", "coco_dataset"], [229, 0, 0, "-", "dataset"], [230, 0, 0, "-", "dummy_dataset"], [231, 0, 0, "-", "dummy_dataset_v2"], [232, 0, 0, "-", "imagenet_dataset"], [234, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[227, 1, 1, "", "InputFeatures"], [227, 1, 1, "", "ONNXRTBertDataset"], [227, 1, 1, "", "ParseDecodeBert"], [227, 1, 1, "", "PytorchBertDataset"], [227, 1, 1, "", "TensorflowBertDataset"], [227, 1, 1, "", "TensorflowModelZooBertDataset"], [227, 2, 1, "", "convert_examples_to_features"], [227, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[228, 1, 1, "", "COCONpy"], [228, 1, 1, "", "COCORaw"], [228, 1, 1, "", "COCORecordDataset"], [228, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[229, 1, 1, "", "CIFAR10"], [229, 1, 1, "", "CIFAR100"], [229, 1, 1, "", "Dataset"], [229, 1, 1, "", "Datasets"], [229, 1, 1, "", "FashionMNIST"], [229, 1, 1, "", "ImageFolder"], [229, 1, 1, "", "IterableDataset"], [229, 1, 1, "", "MNIST"], [229, 1, 1, "", "MXNetCIFAR10"], [229, 1, 1, "", "MXNetCIFAR100"], [229, 1, 1, "", "MXNetDatasets"], [229, 1, 1, "", "MXNetFashionMNIST"], [229, 1, 1, "", "MXNetImageFolder"], [229, 1, 1, "", "MXNetMNIST"], [229, 1, 1, "", "ONNXRTITDatasets"], [229, 1, 1, "", "ONNXRTQLDatasets"], [229, 1, 1, "", "PyTorchDatasets"], [229, 1, 1, "", "PytorchCIFAR10"], [229, 1, 1, "", "PytorchCIFAR100"], [229, 1, 1, "", "PytorchFashionMNIST"], [229, 1, 1, "", "PytorchMNIST"], [229, 1, 1, "", "PytorchMxnetWrapDataset"], [229, 1, 1, "", "PytorchMxnetWrapFunction"], [229, 1, 1, "", "Tensorflow"], [229, 1, 1, "", "TensorflowCIFAR10"], [229, 1, 1, "", "TensorflowCIFAR100"], [229, 1, 1, "", "TensorflowDatasets"], [229, 1, 1, "", "TensorflowFashionMNIST"], [229, 1, 1, "", "TensorflowImageRecord"], [229, 1, 1, "", "TensorflowMNIST"], [229, 1, 1, "", "TensorflowTFRecordDataset"], [229, 1, 1, "", "TensorflowVOCRecord"], [229, 2, 1, "", "calculate_md5"], [229, 2, 1, "", "check_integrity"], [229, 2, 1, "", "dataset_registry"], [229, 2, 1, "", "download_url"], [229, 5, 1, "", "framework_datasets"], [229, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[230, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[231, 1, 1, "", "DummyDataset"], [231, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[232, 1, 1, "", "ImagenetRaw"], [232, 1, 1, "", "MXNetImagenetRaw"], [232, 1, 1, "", "ONNXRTImagenetDataset"], [232, 1, 1, "", "PytorchImagenetRaw"], [232, 1, 1, "", "TensorflowImagenetDataset"], [232, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[234, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[235, 0, 0, "-", "coco_filter"], [236, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[235, 1, 1, "", "LabelBalanceCOCORawFilter"], [235, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[236, 1, 1, "", "FILTERS"], [236, 1, 1, "", "Filter"], [236, 1, 1, "", "MXNetFilters"], [236, 1, 1, "", "ONNXRTITFilters"], [236, 1, 1, "", "ONNXRTQLFilters"], [236, 1, 1, "", "PyTorchFilters"], [236, 1, 1, "", "TensorflowFilters"], [236, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[239, 0, 0, "-", "coco_transform"], [240, 0, 0, "-", "imagenet_transform"], [242, 0, 0, "-", "postprocess"], [243, 0, 0, "-", "tokenization"], [244, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[239, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[240, 1, 1, "", "BilinearImagenetTransform"], [240, 1, 1, "", "LabelShift"], [240, 1, 1, "", "ONNXResizeCropImagenetTransform"], [240, 1, 1, "", "OnnxBilinearImagenetTransform"], [240, 1, 1, "", "ParseDecodeImagenet"], [240, 1, 1, "", "ParseDecodeImagenetTransform"], [240, 1, 1, "", "QuantizedInput"], [240, 1, 1, "", "ResizeWithAspectRatio"], [240, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [240, 1, 1, "", "TensorflowShiftRescale"], [240, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[242, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[243, 1, 1, "", "BasicTokenizer"], [243, 1, 1, "", "FullTokenizer"], [243, 1, 1, "", "WordpieceTokenizer"], [243, 2, 1, "", "convert_by_vocab"], [243, 2, 1, "", "convert_to_unicode"], [243, 2, 1, "", "load_vocab"], [243, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[244, 1, 1, "", "AlignImageChannelTransform"], [244, 1, 1, "", "BaseTransform"], [244, 1, 1, "", "CastONNXTransform"], [244, 1, 1, "", "CastPyTorchTransform"], [244, 1, 1, "", "CastTFTransform"], [244, 1, 1, "", "CenterCropTFTransform"], [244, 1, 1, "", "CenterCropTransform"], [244, 1, 1, "", "CollectTransform"], [244, 1, 1, "", "ComposeTransform"], [244, 1, 1, "", "CropResizeTFTransform"], [244, 1, 1, "", "CropResizeTransform"], [244, 1, 1, "", "CropToBoundingBox"], [244, 1, 1, "", "InputFeatures"], [244, 1, 1, "", "MXNetCropResizeTransform"], [244, 1, 1, "", "MXNetCropToBoundingBox"], [244, 1, 1, "", "MXNetNormalizeTransform"], [244, 1, 1, "", "MXNetTransforms"], [244, 1, 1, "", "MXNetTranspose"], [244, 1, 1, "", "NormalizeTFTransform"], [244, 1, 1, "", "NormalizeTransform"], [244, 1, 1, "", "ONNXRTCropToBoundingBox"], [244, 1, 1, "", "ONNXRTITTransforms"], [244, 1, 1, "", "ONNXRTQLTransforms"], [244, 1, 1, "", "PaddedCenterCropTransform"], [244, 1, 1, "", "ParseDecodeVocTransform"], [244, 1, 1, "", "PyTorchAlignImageChannel"], [244, 1, 1, "", "PyTorchCropResizeTransform"], [244, 1, 1, "", "PyTorchNormalizeTransform"], [244, 1, 1, "", "PyTorchTransforms"], [244, 1, 1, "", "PyTorchTranspose"], [244, 1, 1, "", "PytorchMxnetTransform"], [244, 1, 1, "", "PytorchMxnetWrapFunction"], [244, 1, 1, "", "RandomCropTFTransform"], [244, 1, 1, "", "RandomCropTransform"], [244, 1, 1, "", "RandomHorizontalFlip"], [244, 1, 1, "", "RandomResizedCropMXNetTransform"], [244, 1, 1, "", "RandomResizedCropPytorchTransform"], [244, 1, 1, "", "RandomResizedCropTFTransform"], [244, 1, 1, "", "RandomResizedCropTransform"], [244, 1, 1, "", "RandomVerticalFlip"], [244, 1, 1, "", "RescaleKerasPretrainTransform"], [244, 1, 1, "", "RescaleTFTransform"], [244, 1, 1, "", "RescaleTransform"], [244, 1, 1, "", "ResizeMXNetTransform"], [244, 1, 1, "", "ResizePytorchTransform"], [244, 1, 1, "", "ResizeTFTransform"], [244, 1, 1, "", "ResizeTransform"], [244, 1, 1, "", "ResizeWithRatio"], [244, 1, 1, "", "SquadExample"], [244, 1, 1, "", "TFModelZooCollectTransform"], [244, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [244, 1, 1, "", "TFSquadV1PostTransform"], [244, 1, 1, "", "TRANSFORMS"], [244, 1, 1, "", "TensorflowCropToBoundingBox"], [244, 1, 1, "", "TensorflowRandomHorizontalFlip"], [244, 1, 1, "", "TensorflowRandomVerticalFlip"], [244, 1, 1, "", "TensorflowResizeWithRatio"], [244, 1, 1, "", "TensorflowTransform"], [244, 1, 1, "", "TensorflowTransforms"], [244, 1, 1, "", "TensorflowTranspose"], [244, 1, 1, "", "TensorflowWrapFunction"], [244, 1, 1, "", "ToArray"], [244, 1, 1, "", "ToNDArrayTransform"], [244, 1, 1, "", "Transforms"], [244, 1, 1, "", "Transpose"], [244, 2, 1, "", "convert_examples_to_features"], [244, 2, 1, "", "get_final_text"], [244, 2, 1, "", "get_torchvision_map"], [244, 2, 1, "", "read_squad_examples"], [244, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[245, 0, 0, "-", "benchmark"], [248, 0, 0, "-", "common"], [254, 0, 0, "-", "component"], [255, 0, 0, "-", "compression"], [256, 0, 0, "-", "contrib"], [281, 0, 0, "-", "data"], [286, 0, 0, "-", "distillation"], [287, 0, 0, "-", "export"], [291, 0, 0, "-", "graph_optimization"], [299, 0, 0, "-", "metric"], [301, 0, 0, "-", "mixed_precision"], [302, 0, 0, "-", "model_conversion"], [305, 0, 0, "-", "nas"], [311, 0, 0, "-", "pruner_legacy"], [315, 0, 0, "-", "pruning"], [316, 0, 0, "-", "pruning_recipes"], [320, 0, 0, "-", "pruning_v2"], [321, 0, 0, "-", "pytorch_pruner"], [328, 0, 0, "-", "quantization"], [329, 0, 0, "-", "scheduler"], [334, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[245, 1, 1, "", "Benchmark"], [245, 2, 1, "", "get_architecture"], [245, 2, 1, "", "get_bounded_threads"], [245, 2, 1, "", "get_core_ids"], [245, 2, 1, "", "get_physical_ids"], [245, 2, 1, "", "get_threads"], [245, 2, 1, "", "get_threads_per_core"], [245, 2, 1, "", "set_all_env_var"], [245, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[246, 0, 0, "-", "criterion"], [247, 0, 0, "-", "dataloader"], [249, 0, 0, "-", "metric"], [250, 0, 0, "-", "model"], [251, 0, 0, "-", "optimizer"], [252, 0, 0, "-", "postprocess"], [253, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[246, 1, 1, "", "Criterions"], [246, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [246, 1, 1, "", "KnowledgeDistillationFramework"], [246, 1, 1, "", "KnowledgeDistillationLoss"], [246, 1, 1, "", "PyTorchCriterions"], [246, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [246, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [246, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [246, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [246, 1, 1, "", "SelfKnowledgeDistillationLoss"], [246, 1, 1, "", "TensorflowCriterions"], [246, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [246, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[247, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[249, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[250, 1, 1, "", "Model"], [250, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[251, 1, 1, "", "Optimizers"], [251, 1, 1, "", "PyTorchOptimizers"], [251, 1, 1, "", "PyTorchSGD"], [251, 1, 1, "", "TensorFlowAdamW"], [251, 1, 1, "", "TensorFlowSGD"], [251, 1, 1, "", "TensorflowOptimizers"], [251, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[252, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[253, 2, 1, "", "get_activation"], [253, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[254, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[257, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[258, 0, 0, "-", "sigopt"], [259, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[258, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[259, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[264, 0, 0, "-", "dataloaders"], [276, 0, 0, "-", "datasets"], [280, 0, 0, "-", "filters"], [283, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[260, 0, 0, "-", "base_dataloader"], [261, 0, 0, "-", "dataloader"], [262, 0, 0, "-", "default_dataloader"], [263, 0, 0, "-", "fetcher"], [265, 0, 0, "-", "mxnet_dataloader"], [266, 0, 0, "-", "onnxrt_dataloader"], [267, 0, 0, "-", "pytorch_dataloader"], [268, 0, 0, "-", "sampler"], [269, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[260, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[262, 1, 1, "", "DefaultDataLoader"], [262, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[263, 1, 1, "", "Fetcher"], [263, 1, 1, "", "IndexFetcher"], [263, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[265, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[266, 1, 1, "", "ONNXRTBertDataLoader"], [266, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[267, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[268, 1, 1, "", "BatchSampler"], [268, 1, 1, "", "IterableSampler"], [268, 1, 1, "", "Sampler"], [268, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[269, 1, 1, "", "TFDataDataLoader"], [269, 1, 1, "", "TensorflowBertDataLoader"], [269, 1, 1, "", "TensorflowDataLoader"], [269, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[270, 0, 0, "-", "bert_dataset"], [271, 0, 0, "-", "coco_dataset"], [272, 0, 0, "-", "dataset"], [273, 0, 0, "-", "dummy_dataset"], [274, 0, 0, "-", "dummy_dataset_v2"], [275, 0, 0, "-", "imagenet_dataset"], [277, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[270, 1, 1, "", "InputFeatures"], [270, 1, 1, "", "ONNXRTBertDataset"], [270, 1, 1, "", "ParseDecodeBert"], [270, 1, 1, "", "PytorchBertDataset"], [270, 1, 1, "", "TensorflowBertDataset"], [270, 1, 1, "", "TensorflowModelZooBertDataset"], [270, 2, 1, "", "convert_examples_to_features"], [270, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[271, 1, 1, "", "COCONpy"], [271, 1, 1, "", "COCORaw"], [271, 1, 1, "", "COCORecordDataset"], [271, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[272, 1, 1, "", "CIFAR10"], [272, 1, 1, "", "CIFAR100"], [272, 1, 1, "", "Dataset"], [272, 1, 1, "", "Datasets"], [272, 1, 1, "", "FashionMNIST"], [272, 1, 1, "", "ImageFolder"], [272, 1, 1, "", "IterableDataset"], [272, 1, 1, "", "MNIST"], [272, 1, 1, "", "MXNetCIFAR10"], [272, 1, 1, "", "MXNetCIFAR100"], [272, 1, 1, "", "MXNetDatasets"], [272, 1, 1, "", "MXNetFashionMNIST"], [272, 1, 1, "", "MXNetImageFolder"], [272, 1, 1, "", "MXNetMNIST"], [272, 1, 1, "", "ONNXRTITDatasets"], [272, 1, 1, "", "ONNXRTQLDatasets"], [272, 1, 1, "", "PyTorchDatasets"], [272, 1, 1, "", "PytorchCIFAR10"], [272, 1, 1, "", "PytorchCIFAR100"], [272, 1, 1, "", "PytorchFashionMNIST"], [272, 1, 1, "", "PytorchMNIST"], [272, 1, 1, "", "PytorchMxnetWrapDataset"], [272, 1, 1, "", "PytorchMxnetWrapFunction"], [272, 1, 1, "", "TensorflowCIFAR10"], [272, 1, 1, "", "TensorflowCIFAR100"], [272, 1, 1, "", "TensorflowDatasets"], [272, 1, 1, "", "TensorflowFashionMNIST"], [272, 1, 1, "", "TensorflowImageFolder"], [272, 1, 1, "", "TensorflowImageRecord"], [272, 1, 1, "", "TensorflowMNIST"], [272, 1, 1, "", "TensorflowTFRecordDataset"], [272, 1, 1, "", "TensorflowVOCRecord"], [272, 2, 1, "", "calculate_md5"], [272, 2, 1, "", "check_integrity"], [272, 2, 1, "", "dataset_registry"], [272, 2, 1, "", "download_url"], [272, 5, 1, "", "framework_datasets"], [272, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[273, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[274, 1, 1, "", "DummyDataset"], [274, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[275, 1, 1, "", "ImagenetRaw"], [275, 1, 1, "", "MXNetImagenetRaw"], [275, 1, 1, "", "ONNXRTImagenetDataset"], [275, 1, 1, "", "PytorchImagenetRaw"], [275, 1, 1, "", "TensorflowImagenetDataset"], [275, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[277, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[278, 0, 0, "-", "coco_filter"], [279, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[278, 1, 1, "", "LabelBalanceCOCORawFilter"], [278, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[279, 1, 1, "", "FILTERS"], [279, 1, 1, "", "Filter"], [279, 1, 1, "", "MXNetFilters"], [279, 1, 1, "", "ONNXRTITFilters"], [279, 1, 1, "", "ONNXRTQLFilters"], [279, 1, 1, "", "PyTorchFilters"], [279, 1, 1, "", "TensorflowFilters"], [279, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[282, 0, 0, "-", "imagenet_transform"], [284, 0, 0, "-", "tokenization"], [285, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[282, 1, 1, "", "BilinearImagenetTransform"], [282, 1, 1, "", "LabelShift"], [282, 1, 1, "", "ONNXResizeCropImagenetTransform"], [282, 1, 1, "", "OnnxBilinearImagenetTransform"], [282, 1, 1, "", "ParseDecodeImagenet"], [282, 1, 1, "", "ParseDecodeImagenetTransform"], [282, 1, 1, "", "QuantizedInput"], [282, 1, 1, "", "ResizeWithAspectRatio"], [282, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[284, 1, 1, "", "BasicTokenizer"], [284, 1, 1, "", "FullTokenizer"], [284, 1, 1, "", "WordpieceTokenizer"], [284, 2, 1, "", "convert_by_vocab"], [284, 2, 1, "", "convert_to_unicode"], [284, 2, 1, "", "load_vocab"], [284, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[285, 1, 1, "", "AlignImageChannelTransform"], [285, 1, 1, "", "BaseTransform"], [285, 1, 1, "", "CastONNXTransform"], [285, 1, 1, "", "CastPyTorchTransform"], [285, 1, 1, "", "CastTFTransform"], [285, 1, 1, "", "CenterCropTFTransform"], [285, 1, 1, "", "CenterCropTransform"], [285, 1, 1, "", "CollectTransform"], [285, 1, 1, "", "ComposeTransform"], [285, 1, 1, "", "CropResizeTFTransform"], [285, 1, 1, "", "CropResizeTransform"], [285, 1, 1, "", "CropToBoundingBox"], [285, 1, 1, "", "InputFeatures"], [285, 1, 1, "", "MXNetCropResizeTransform"], [285, 1, 1, "", "MXNetCropToBoundingBox"], [285, 1, 1, "", "MXNetNormalizeTransform"], [285, 1, 1, "", "MXNetTransforms"], [285, 1, 1, "", "MXNetTranspose"], [285, 1, 1, "", "NormalizeTFTransform"], [285, 1, 1, "", "NormalizeTransform"], [285, 1, 1, "", "ONNXRTCropToBoundingBox"], [285, 1, 1, "", "ONNXRTITTransforms"], [285, 1, 1, "", "ONNXRTQLTransforms"], [285, 1, 1, "", "PaddedCenterCropTransform"], [285, 1, 1, "", "ParseDecodeVocTransform"], [285, 1, 1, "", "PyTorchAlignImageChannel"], [285, 1, 1, "", "PyTorchCropResizeTransform"], [285, 1, 1, "", "PyTorchNormalizeTransform"], [285, 1, 1, "", "PyTorchTransforms"], [285, 1, 1, "", "PyTorchTranspose"], [285, 1, 1, "", "PytorchMxnetTransform"], [285, 1, 1, "", "PytorchMxnetWrapFunction"], [285, 1, 1, "", "RandomCropTFTransform"], [285, 1, 1, "", "RandomCropTransform"], [285, 1, 1, "", "RandomHorizontalFlip"], [285, 1, 1, "", "RandomResizedCropMXNetTransform"], [285, 1, 1, "", "RandomResizedCropPytorchTransform"], [285, 1, 1, "", "RandomResizedCropTFTransform"], [285, 1, 1, "", "RandomResizedCropTransform"], [285, 1, 1, "", "RandomVerticalFlip"], [285, 1, 1, "", "RescaleKerasPretrainTransform"], [285, 1, 1, "", "RescaleTFTransform"], [285, 1, 1, "", "RescaleTransform"], [285, 1, 1, "", "ResizeMXNetTransform"], [285, 1, 1, "", "ResizePytorchTransform"], [285, 1, 1, "", "ResizeTFTransform"], [285, 1, 1, "", "ResizeTransform"], [285, 1, 1, "", "ResizeWithRatio"], [285, 1, 1, "", "SquadExample"], [285, 1, 1, "", "TFModelZooCollectTransform"], [285, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [285, 1, 1, "", "TFSquadV1PostTransform"], [285, 1, 1, "", "TRANSFORMS"], [285, 1, 1, "", "TensorflowCropToBoundingBox"], [285, 1, 1, "", "TensorflowRandomHorizontalFlip"], [285, 1, 1, "", "TensorflowRandomVerticalFlip"], [285, 1, 1, "", "TensorflowResizeWithRatio"], [285, 1, 1, "", "TensorflowTransform"], [285, 1, 1, "", "TensorflowTransforms"], [285, 1, 1, "", "TensorflowTranspose"], [285, 1, 1, "", "TensorflowWrapFunction"], [285, 1, 1, "", "ToArray"], [285, 1, 1, "", "ToNDArrayTransform"], [285, 1, 1, "", "Transforms"], [285, 1, 1, "", "Transpose"], [285, 2, 1, "", "convert_examples_to_features"], [285, 2, 1, "", "get_final_text"], [285, 2, 1, "", "get_torchvision_map"], [285, 2, 1, "", "read_squad_examples"], [285, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[286, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[286, 4, 1, "", "_epoch_ran"], [286, 4, 1, "", "best_model"], [286, 4, 1, "", "best_score"], [286, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[288, 0, 0, "-", "qlinear2qdq"], [289, 0, 0, "-", "tf2onnx"], [290, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[288, 2, 1, "", "check_model"], [288, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[289, 2, 1, "", "tf_to_fp32_onnx"], [289, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[290, 2, 1, "", "dynamic_quant_export"], [290, 2, 1, "", "get_node_mapping"], [290, 2, 1, "", "get_quantizable_onnx_ops"], [290, 2, 1, "", "static_quant_export"], [290, 2, 1, "", "torch_to_fp32_onnx"], [290, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[291, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[293, 0, 0, "-", "bleu"], [294, 0, 0, "-", "bleu_util"], [295, 0, 0, "-", "coco_label_map"], [296, 0, 0, "-", "coco_tools"], [297, 0, 0, "-", "evaluate_squad"], [298, 0, 0, "-", "f1"], [300, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[293, 1, 1, "", "BLEU"], [293, 1, 1, "", "UnicodeRegex"], [293, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[293, 4, 1, "", "labels"], [293, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[293, 4, 1, "", "nondigit_punct_re"], [293, 4, 1, "", "punct_nondigit_re"], [293, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[294, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[296, 1, 1, "", "COCOEvalWrapper"], [296, 1, 1, "", "COCOWrapper"], [296, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [296, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [296, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[296, 4, 1, "", "dataset"], [296, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[297, 2, 1, "", "evaluate"], [297, 2, 1, "", "exact_match_score"], [297, 2, 1, "", "f1_score"], [297, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[298, 2, 1, "", "evaluate"], [298, 2, 1, "", "f1_score"], [298, 2, 1, "", "metric_max_over_ground_truths"], [298, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[300, 1, 1, "", "Accuracy"], [300, 1, 1, "", "BaseMetric"], [300, 1, 1, "", "COCOmAPv2"], [300, 1, 1, "", "F1"], [300, 1, 1, "", "GeneralTopK"], [300, 1, 1, "", "Loss"], [300, 1, 1, "", "MAE"], [300, 1, 1, "", "METRICS"], [300, 1, 1, "", "MSE"], [300, 1, 1, "", "MXNetMetrics"], [300, 1, 1, "", "ONNXRTGLUE"], [300, 1, 1, "", "ONNXRTITMetrics"], [300, 1, 1, "", "ONNXRTQLMetrics"], [300, 1, 1, "", "PyTorchLoss"], [300, 1, 1, "", "PyTorchMetrics"], [300, 1, 1, "", "RMSE"], [300, 1, 1, "", "ROC"], [300, 1, 1, "", "SquadF1"], [300, 1, 1, "", "TensorflowCOCOMAP"], [300, 1, 1, "", "TensorflowMAP"], [300, 1, 1, "", "TensorflowMetrics"], [300, 1, 1, "", "TensorflowTopK"], [300, 1, 1, "", "TensorflowVOCMAP"], [300, 1, 1, "", "WrapMXNetMetric"], [300, 1, 1, "", "WrapONNXRTMetric"], [300, 1, 1, "", "WrapPyTorchMetric"], [300, 1, 1, "", "mIOU"], [300, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[300, 4, 1, "", "label_list"], [300, 4, 1, "", "pred_list"], [300, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[300, 4, 1, "", "k"], [300, 4, 1, "", "num_correct"], [300, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[300, 4, 1, "", "sample"], [300, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[300, 4, 1, "", "compare_label"], [300, 4, 1, "", "label_list"], [300, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[300, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[300, 4, 1, "", "compare_label"], [300, 4, 1, "", "label_list"], [300, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[300, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[300, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[300, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[300, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[300, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[300, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[300, 4, 1, "", "k"], [300, 4, 1, "", "num_correct"], [300, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[301, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[302, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[303, 0, 0, "-", "basic_nas"], [304, 0, 0, "-", "dynas"], [306, 0, 0, "-", "nas"], [307, 0, 0, "-", "nas_utils"], [308, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[303, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[304, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[306, 1, 1, "", "NAS"], [306, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[307, 2, 1, "", "create_search_space_pool"], [307, 2, 1, "", "find_pareto_front"], [307, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[308, 1, 1, "", "BayesianOptimizationSearcher"], [308, 1, 1, "", "GridSearcher"], [308, 1, 1, "", "RandomSearcher"], [308, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[309, 0, 0, "-", "gradient_sensitivity"], [310, 0, 0, "-", "group_lasso"], [312, 0, 0, "-", "magnitude"], [313, 0, 0, "-", "pattern_lock"], [314, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[309, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[310, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[312, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[313, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[314, 1, 1, "", "Pruner"], [314, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[315, 1, 1, "", "Pruning"], [315, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[315, 4, 1, "", "conf"], [315, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[317, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[318, 0, 0, "-", "pattern"], [319, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[318, 1, 1, "", "PATTERNS"], [318, 1, 1, "", "PatternBase"], [318, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[318, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[319, 1, 1, "", "TilePatternBase"], [319, 1, 1, "", "TilePattern_1x1"], [319, 1, 1, "", "TilePattern_1x16"], [319, 1, 1, "", "TilePattern_1x2"], [319, 1, 1, "", "TilePattern_2x2"], [319, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[320, 1, 1, "", "Pruning"], [320, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[320, 4, 1, "", "conf"], [320, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[322, 0, 0, "-", "logger"], [323, 0, 0, "-", "patterns"], [324, 0, 0, "-", "prune_utils"], [325, 0, 0, "-", "pruner"], [326, 0, 0, "-", "pruning"], [327, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[323, 1, 1, "", "Pattern"], [323, 1, 1, "", "PatternNInM"], [323, 1, 1, "", "PatternNxM"], [323, 2, 1, "", "get_pattern"], [323, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[323, 4, 1, "", "is_global"], [323, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[323, 4, 1, "", "M"], [323, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[323, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[324, 2, 1, "", "check_config"], [324, 2, 1, "", "parse_not_to_prune"], [324, 2, 1, "", "parse_to_prune"], [324, 2, 1, "", "process_and_check_config"], [324, 2, 1, "", "process_config"], [324, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[325, 1, 1, "", "MagnitudePruner"], [325, 1, 1, "", "PatternLockPruner"], [325, 1, 1, "", "Pruner"], [325, 1, 1, "", "SnipMomentumPruner"], [325, 1, 1, "", "SnipPruner"], [325, 2, 1, "", "get_pruner"], [325, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[325, 4, 1, "", "config"], [325, 4, 1, "", "current_sparsity_ratio"], [325, 4, 1, "", "end_step"], [325, 4, 1, "", "global_step"], [325, 4, 1, "", "masks"], [325, 4, 1, "", "max_sparsity_ratio_per_layer"], [325, 4, 1, "", "modules"], [325, 4, 1, "", "pattern"], [325, 4, 1, "", "scheduler"], [325, 4, 1, "", "scores"], [325, 4, 1, "", "start_step"], [325, 4, 1, "", "target_sparsity_ratio"], [325, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[326, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[326, 4, 1, "", "config_file_path"], [326, 4, 1, "", "model"], [326, 4, 1, "", "pruner_info"], [326, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[327, 1, 1, "", "IterativeScheduler"], [327, 1, 1, "", "OneshotScheduler"], [327, 1, 1, "", "Scheduler"], [327, 2, 1, "", "get_scheduler"], [327, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[327, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[328, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[329, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[330, 0, 0, "-", "auto_mixed_precision"], [331, 0, 0, "-", "basic"], [332, 0, 0, "-", "bayesian"], [333, 0, 0, "-", "exhaustive"], [335, 0, 0, "-", "mse"], [336, 0, 0, "-", "mse_v2"], [337, 0, 0, "-", "random"], [338, 0, 0, "-", "strategy"], [340, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[330, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[331, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[332, 1, 1, "", "BayesianOptimization"], [332, 1, 1, "", "BayesianTuneStrategy"], [332, 1, 1, "", "TargetSpace"], [332, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[333, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[335, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[336, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[337, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[338, 1, 1, "", "TuneStrategy"], [338, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[339, 0, 0, "-", "constant"], [341, 0, 0, "-", "tuning_sampler"], [342, 0, 0, "-", "tuning_space"], [343, 0, 0, "-", "tuning_structs"], [344, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[341, 1, 1, "", "FallbackTuningSampler"], [341, 1, 1, "", "ModelWiseTuningSampler"], [341, 1, 1, "", "OpTypeWiseTuningSampler"], [341, 1, 1, "", "OpWiseTuningSampler"], [341, 1, 1, "", "SmoothQuantSampler"], [341, 1, 1, "", "TuningOrder"], [341, 1, 1, "", "TuningSampler"], [341, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[342, 1, 1, "", "TuningItem"], [342, 1, 1, "", "TuningSpace"], [342, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [342, 2, 1, "", "pattern_to_internal"], [342, 2, 1, "", "pattern_to_path"], [342, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[343, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[344, 1, 1, "", "OrderedDefaultDict"], [344, 2, 1, "", "extract_data_type"], [344, 2, 1, "", "get_adaptor_name"], [344, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[346, 0, 0, "-", "bleu"], [347, 0, 0, "-", "bleu_util"], [348, 0, 0, "-", "coco_label_map"], [349, 0, 0, "-", "coco_tools"], [350, 0, 0, "-", "evaluate_squad"], [351, 0, 0, "-", "f1"], [353, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[346, 1, 1, "", "BLEU"], [346, 1, 1, "", "UnicodeRegex"], [346, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[346, 4, 1, "", "labels"], [346, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[346, 4, 1, "", "nondigit_punct_re"], [346, 4, 1, "", "punct_nondigit_re"], [346, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[347, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[349, 1, 1, "", "COCOEvalWrapper"], [349, 1, 1, "", "COCOWrapper"], [349, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [349, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [349, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[349, 4, 1, "", "dataset"], [349, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[350, 2, 1, "", "evaluate"], [350, 2, 1, "", "exact_match_score"], [350, 2, 1, "", "f1_score"], [350, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[351, 2, 1, "", "evaluate"], [351, 2, 1, "", "f1_score"], [351, 2, 1, "", "metric_max_over_ground_truths"], [351, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[353, 1, 1, "", "Accuracy"], [353, 1, 1, "", "BaseMetric"], [353, 1, 1, "", "COCOmAPv2"], [353, 1, 1, "", "F1"], [353, 1, 1, "", "GeneralTopK"], [353, 1, 1, "", "Loss"], [353, 1, 1, "", "MAE"], [353, 1, 1, "", "METRICS"], [353, 1, 1, "", "MSE"], [353, 1, 1, "", "MXNetMetrics"], [353, 1, 1, "", "Metric"], [353, 1, 1, "", "ONNXRTGLUE"], [353, 1, 1, "", "ONNXRTITMetrics"], [353, 1, 1, "", "ONNXRTQLMetrics"], [353, 1, 1, "", "PyTorchLoss"], [353, 1, 1, "", "PyTorchMetrics"], [353, 1, 1, "", "RMSE"], [353, 1, 1, "", "ROC"], [353, 1, 1, "", "SquadF1"], [353, 1, 1, "", "TensorflowCOCOMAP"], [353, 1, 1, "", "TensorflowMAP"], [353, 1, 1, "", "TensorflowMetrics"], [353, 1, 1, "", "TensorflowTopK"], [353, 1, 1, "", "TensorflowVOCMAP"], [353, 1, 1, "", "WrapMXNetMetric"], [353, 1, 1, "", "WrapONNXRTMetric"], [353, 1, 1, "", "WrapPyTorchMetric"], [353, 1, 1, "", "mIOU"], [353, 2, 1, "", "metric_registry"], [353, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[353, 4, 1, "", "label_list"], [353, 4, 1, "", "pred_list"], [353, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[353, 4, 1, "", "k"], [353, 4, 1, "", "num_correct"], [353, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[353, 4, 1, "", "sample"], [353, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[353, 4, 1, "", "compare_label"], [353, 4, 1, "", "label_list"], [353, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[353, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[353, 4, 1, "", "compare_label"], [353, 4, 1, "", "label_list"], [353, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[353, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[353, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[353, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[353, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[353, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[353, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[353, 4, 1, "", "k"], [353, 4, 1, "", "num_correct"], [353, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[354, 2, 1, "", "fit"]], "neural_compressor.model": [[355, 0, 0, "-", "base_model"], [357, 0, 0, "-", "keras_model"], [358, 0, 0, "-", "model"], [359, 0, 0, "-", "mxnet_model"], [360, 0, 0, "-", "nets_factory"], [361, 0, 0, "-", "onnx_model"], [362, 0, 0, "-", "tensorflow_model"], [363, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[355, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[357, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[358, 1, 1, "", "Model"], [358, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[359, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[360, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[361, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[362, 1, 1, "", "TensorflowBaseModel"], [362, 1, 1, "", "TensorflowCheckpointModel"], [362, 1, 1, "", "TensorflowModel"], [362, 1, 1, "", "TensorflowQATModel"], [362, 1, 1, "", "TensorflowSavedModelModel"], [362, 2, 1, "", "checkpoint_session"], [362, 2, 1, "", "estimator_session"], [362, 2, 1, "", "frozen_pb_session"], [362, 2, 1, "", "get_model_type"], [362, 2, 1, "", "graph_def_session"], [362, 2, 1, "", "graph_session"], [362, 2, 1, "", "keras_session"], [362, 2, 1, "", "load_saved_model"], [362, 2, 1, "", "saved_model_session"], [362, 2, 1, "", "slim_session"], [362, 2, 1, "", "validate_and_inference_input_output"], [362, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[363, 1, 1, "", "IPEXModel"], [363, 1, 1, "", "PyTorchBaseModel"], [363, 1, 1, "", "PyTorchFXModel"], [363, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[364, 1, 1, "", "Accuracy"], [364, 1, 1, "", "Footprint"], [364, 1, 1, "", "ModelSize"], [364, 1, 1, "", "MultiObjective"], [364, 1, 1, "", "Objective"], [364, 1, 1, "", "Performance"], [364, 2, 1, "", "objective_custom_registry"], [364, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[367, 0, 0, "-", "parser"], [377, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[366, 0, 0, "-", "factory"], [369, 0, 0, "-", "onnx_parser"], [371, 0, 0, "-", "parser"], [372, 0, 0, "-", "result"], [374, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[366, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[368, 0, 0, "-", "factory"], [370, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[368, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[370, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[371, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[372, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[373, 0, 0, "-", "factory"], [375, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[373, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[375, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[376, 0, 0, "-", "factory"], [379, 0, 0, "-", "onnxrt_profiler"], [382, 0, 0, "-", "profiler"], [384, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[376, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[378, 0, 0, "-", "factory"], [380, 0, 0, "-", "profiler"], [381, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[378, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[380, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[381, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[382, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[383, 0, 0, "-", "factory"], [385, 0, 0, "-", "profiler"], [386, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[383, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[385, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[386, 2, 1, "", "create_tf_config"], [386, 2, 1, "", "delete_assign"], [386, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[387, 2, 1, "", "fit"]], "neural_compressor.strategy": [[388, 0, 0, "-", "auto"], [389, 0, 0, "-", "auto_mixed_precision"], [390, 0, 0, "-", "basic"], [391, 0, 0, "-", "bayesian"], [392, 0, 0, "-", "conservative"], [393, 0, 0, "-", "exhaustive"], [394, 0, 0, "-", "hawq_v2"], [396, 0, 0, "-", "mse"], [397, 0, 0, "-", "mse_v2"], [398, 0, 0, "-", "random"], [399, 0, 0, "-", "strategy"], [401, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[388, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[389, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[390, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[391, 1, 1, "", "BayesianOptimization"], [391, 1, 1, "", "BayesianTuneStrategy"], [391, 1, 1, "", "TargetSpace"], [391, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[392, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[393, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[394, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[396, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[397, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[398, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[399, 1, 1, "", "TuneStrategy"], [399, 1, 1, "", "TuneStrategyMeta"], [399, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[400, 0, 0, "-", "constant"], [402, 0, 0, "-", "tuning_sampler"], [403, 0, 0, "-", "tuning_space"], [404, 0, 0, "-", "tuning_structs"], [405, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[402, 1, 1, "", "BlockFallbackTuningSampler"], [402, 1, 1, "", "FallbackTuningSampler"], [402, 1, 1, "", "LowerBitsSampler"], [402, 1, 1, "", "ModelWiseTuningSampler"], [402, 1, 1, "", "OpTypeWiseTuningSampler"], [402, 1, 1, "", "OpWiseTuningSampler"], [402, 1, 1, "", "SmoothQuantSampler"], [402, 1, 1, "", "TuningOrder"], [402, 1, 1, "", "TuningSampler"], [402, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[403, 1, 1, "", "TuningItem"], [403, 1, 1, "", "TuningSpace"], [403, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [403, 2, 1, "", "pattern_to_internal"], [403, 2, 1, "", "pattern_to_path"], [403, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[404, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[405, 1, 1, "", "ClassRegister"], [405, 1, 1, "", "OrderedDefaultDict"], [405, 1, 1, "", "QuantOptions"], [405, 1, 1, "", "QuantType"], [405, 2, 1, "", "build_slave_faker_model"], [405, 2, 1, "", "extract_data_type"], [405, 2, 1, "", "get_adaptor_name"], [405, 2, 1, "", "preprocess_user_cfg"], [405, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[406, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[406, 1, 1, "", "ExampleClass"], [406, 4, 1, "", "attribute1"], [406, 2, 1, "", "function1"], [406, 2, 1, "", "function2"], [406, 2, 1, "", "function3"], [406, 2, 1, "", "generator1"], [406, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[406, 4, 1, "", "attr1"], [406, 4, 1, "", "attr2"], [406, 4, 1, "", "attr5"]], "neural_compressor.training": [[408, 1, 1, "", "CallBacks"], [408, 1, 1, "", "CompressionManager"], [408, 2, 1, "", "fit"], [408, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[409, 0, 0, "-", "collect_layer_histogram"], [410, 0, 0, "-", "constant"], [411, 0, 0, "-", "create_obj_from_config"], [413, 0, 0, "-", "kl_divergence"], [414, 0, 0, "-", "load_huggingface"], [415, 0, 0, "-", "logger"], [416, 0, 0, "-", "neural_insights_utils"], [417, 0, 0, "-", "options"], [418, 0, 0, "-", "pytorch"], [419, 0, 0, "-", "utility"], [420, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[409, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[411, 2, 1, "", "create_dataloader"], [411, 2, 1, "", "create_dataset"], [411, 2, 1, "", "create_eval_func"], [411, 2, 1, "", "create_train_func"], [411, 2, 1, "", "get_algorithm"], [411, 2, 1, "", "get_func_from_config"], [411, 2, 1, "", "get_metrics"], [411, 2, 1, "", "get_postprocess"], [411, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[413, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[414, 1, 1, "", "OptimizedModel"], [414, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[415, 1, 1, "", "Logger"], [415, 2, 1, "", "debug"], [415, 2, 1, "", "error"], [415, 2, 1, "", "fatal"], [415, 2, 1, "", "info"], [415, 2, 1, "", "log"], [415, 2, 1, "", "warn"], [415, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[416, 2, 1, "", "get_model_path"], [416, 2, 1, "", "register_neural_insights_workload"], [416, 2, 1, "", "update_neural_insights_workload"], [416, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[417, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[418, 2, 1, "", "is_int8_model"], [418, 2, 1, "", "load"], [418, 2, 1, "", "load_weight_only"]], "neural_compressor.utils.utility": [[419, 1, 1, "", "CaptureOutputToFile"], [419, 1, 1, "", "CpuInfo"], [419, 2, 1, "", "Dequantize"], [419, 1, 1, "", "DotDict"], [419, 1, 1, "", "GLOBAL_STATE"], [419, 1, 1, "", "LazyImport"], [419, 1, 1, "", "MODE"], [419, 1, 1, "", "OpEntry"], [419, 1, 1, "", "Statistics"], [419, 2, 1, "", "alias_param"], [419, 2, 1, "", "calculate_mse"], [419, 2, 1, "", "check_key_exist"], [419, 2, 1, "", "combine_histogram"], [419, 2, 1, "", "compare_objects"], [419, 2, 1, "", "compute_sparsity"], [419, 2, 1, "", "dequantize_weight"], [419, 2, 1, "", "dump_class_attrs"], [419, 2, 1, "", "dump_data_to_local"], [419, 2, 1, "", "dump_elapsed_time"], [419, 2, 1, "", "dump_table"], [419, 2, 1, "", "dump_table_to_csv"], [419, 2, 1, "", "equal_dicts"], [419, 2, 1, "", "fault_tolerant_file"], [419, 2, 1, "", "get_all_fp32_data"], [419, 2, 1, "", "get_number_of_sockets"], [419, 2, 1, "", "get_op_list"], [419, 2, 1, "", "get_size"], [419, 2, 1, "", "get_tensor_histogram"], [419, 2, 1, "", "get_tensors_info"], [419, 2, 1, "", "get_tuning_history"], [419, 2, 1, "", "get_weights_details"], [419, 2, 1, "", "load_data_from_pkl"], [419, 2, 1, "", "mse_metric_gap"], [419, 2, 1, "", "print_op_list"], [419, 2, 1, "", "print_table"], [419, 2, 1, "", "recover"], [419, 2, 1, "", "set_random_seed"], [419, 2, 1, "", "set_resume_from"], [419, 2, 1, "", "set_tensorboard"], [419, 2, 1, "", "set_workspace"], [419, 2, 1, "", "show_memory_info"], [419, 2, 1, "", "singleton"], [419, 2, 1, "", "str2array"], [419, 2, 1, "", "time_limit"], [419, 2, 1, "", "version1_eq_version2"], [419, 2, 1, "", "version1_gt_version2"], [419, 2, 1, "", "version1_gte_version2"], [419, 2, 1, "", "version1_lt_version2"], [419, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[420, 1, 1, "", "WeightsDetails"], [420, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 196], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 429, 430, 432], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 180, 181, 183, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 313, 314, 315, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 346, 347, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 428, 495], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 156, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 174, 176, 180, 181, 183, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 291, 292, 293, 296, 299, 300, 301, 302, 303, 304, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 341, 342, 343, 344, 346, 349, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 370, 371, 372, 373, 375, 376, 378, 380, 382, 383, 385, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 402, 403, 404, 405, 406, 408, 409, 412, 413, 414, 415, 417, 419, 420, 429, 495], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 150, 151, 152, 157, 158, 159, 162, 163, 165, 166, 167, 169, 172, 174, 176, 177, 180, 181, 183, 184, 185, 187, 189, 190, 194, 197, 203, 204, 205, 206, 207, 209, 218, 219, 227, 229, 233, 236, 237, 238, 241, 243, 244, 245, 246, 248, 250, 251, 253, 262, 270, 272, 276, 279, 280, 281, 283, 284, 285, 288, 289, 290, 293, 294, 296, 297, 298, 299, 300, 307, 314, 318, 323, 324, 325, 327, 332, 338, 342, 344, 346, 347, 349, 350, 351, 352, 353, 354, 358, 362, 364, 381, 386, 387, 391, 399, 403, 405, 406, 408, 411, 412, 414, 415, 416, 418, 419, 454], "subpackag": [2, 17, 87, 111, 112, 114, 153, 182, 184, 213, 238, 256, 281, 292, 316, 334, 345, 395], "submodul": [2, 12, 17, 29, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 153, 154, 169, 175, 178, 182, 184, 186, 190, 197, 210, 214, 221, 233, 237, 241, 248, 257, 264, 276, 280, 283, 287, 292, 299, 305, 311, 317, 321, 334, 340, 345, 352, 356, 367, 369, 374, 377, 379, 384, 395, 401, 407, 412], "packag": [2, 29, 169, 184, 190, 197, 221, 233, 237, 238, 241, 248, 264, 276, 280, 281, 283, 292, 299, 311, 316, 317, 334, 352, 356, 395, 412, 478, 480, 482, 483], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 156, 328, 387, 425, 428, 430, 431, 443, 447, 451, 453, 456, 459, 462, 465, 466, 474, 485, 487, 488, 489, 490, 498, 499, 500, 506, 507, 508, 509, 512, 518], "separable_conv2d": 10, "mxnet": [11, 449, 464, 507, 514], "mxnet_util": [12, 13], "util": [13, 43, 148, 158, 165, 177, 207, 339, 340, 341, 342, 343, 344, 381, 386, 400, 401, 402, 403, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 434], "onnxrt": [14, 449, 464, 514], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 430, 447], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 430, 431], "activ": [18, 488], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 512], "maxpool": 32, "norm": 33, "op": [34, 456], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 491], "unary_op": 40, "smooth_quant": [42, 162, 170], "weight_onli": [44, 166], "pytorch": [45, 418, 449, 454, 456, 464, 489, 507, 508, 513, 514, 518], "queri": [46, 429, 493, 498, 499, 500], "tensorflow": [47, 449, 454, 456, 464, 507, 508, 513, 514, 518], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 466], "bf16_convert": [50, 150], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 430], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 456, 518], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 433, 462, 507, 518], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 518], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 518], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 253], "awq": 149, "gptq": 151, "hawq_metr": 152, "layer_wise_qu": [154, 155, 156, 157, 158], "modified_pickl": 155, "torch_load": 157, "mixed_precis": [159, 301], "model_wrapp": 160, "pattern_detector": 161, "symbolic_trac": 163, "teq": 164, "algorithm": [167, 168, 169, 170, 171, 447, 509, 512, 515], "fast_bias_correct": 168, "weight_correct": 171, "benchmark": [172, 245, 437, 446, 451, 465, 506], "compress": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 255, 438, 509], "callback": 173, "distil": [174, 175, 176, 177, 286, 452, 453, 465, 506, 518], "criterion": [174, 246], "optim": [176, 251, 475, 485, 495, 498, 499, 500, 503, 504, 516], "hpo": [178, 179, 180, 181], "sa_optim": 179, "search_algorithm": [180, 308], "search_spac": 181, "pruner": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 314, 325], "criteria": [183, 424, 504, 515], "model_slim": [185, 186, 187, 188], "auto_slim": 185, "pattern_analyz": 187, "weight_slim": 188, "pattern": [189, 190, 191, 192, 193, 317, 318, 319, 323, 504], "base": [189, 194, 462, 494, 516], "mha": [191, 198], "ninm": 192, "nxm": 193, "basic": [195, 331, 390, 426, 515], "pattern_lock": [199, 313], "progress": [200, 491], "retrain_fre": 201, "sparse_gpt": 202, "prune": [203, 315, 326, 465, 504, 506, 518], "reg": 204, "schedul": [205, 327, 329, 504], "tf_criteria": 206, "conf": [208, 209, 210, 211], "config": [208, 212, 439, 449, 502], "dotdict": 209, "pythonic_config": 211, "contrib": [213, 214, 215, 216, 256, 257, 258, 259], "strategi": [214, 215, 216, 257, 258, 259, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 444, 511, 515], "sigopt": [215, 258, 511, 515], "tpe": [216, 259, 515], "data": [217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 430, 431, 451, 455, 489], "dataload": [217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 247, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 448, 449], "base_dataload": [217, 260], "default_dataload": [219, 262], "fetcher": [220, 263], "attribut": [221, 229, 238, 272, 281, 292, 316, 356, 406, 412, 423], "mxnet_dataload": [222, 265], "onnxrt_dataload": [223, 266], "pytorch_dataload": [224, 267], "sampler": [225, 268], "tensorflow_dataload": [226, 269], "dataset": [227, 228, 229, 230, 231, 232, 233, 234, 270, 271, 272, 273, 274, 275, 276, 277, 449, 451, 460, 490], "bert_dataset": [227, 270], "coco_dataset": [228, 271], "dummy_dataset": [230, 273], "dummy_dataset_v2": [231, 274], "imagenet_dataset": [232, 275], "style_transfer_dataset": [234, 277], "filter": [235, 236, 237, 278, 279, 280], "coco_filt": [235, 278], "transform": [239, 240, 241, 242, 243, 244, 282, 283, 284, 285, 460, 514], "coco_transform": 239, "imagenet_transform": [240, 282], "postprocess": [242, 252], "token": [243, 284], "experiment": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344], "common": [246, 247, 248, 249, 250, 251, 252, 253, 425, 457], "metric": [249, 293, 294, 295, 296, 297, 298, 299, 300, 346, 347, 348, 349, 350, 351, 352, 353, 460, 464], "model": [250, 355, 356, 357, 358, 359, 360, 361, 362, 363, 430, 441, 456, 459, 462, 465, 467, 474, 488, 489, 490, 498, 499, 500, 504, 509, 512, 518], "compon": 254, "export": [287, 288, 289, 290, 456, 509], "qlinear2qdq": 288, "tf2onnx": 289, "torch2onnx": 290, "graph_optim": 291, "bleu": [293, 346], "bleu_util": [294, 347], "coco_label_map": [295, 348], "coco_tool": [296, 349], "evaluate_squad": [297, 350], "f1": [298, 351], "model_convers": 302, "na": [303, 304, 305, 306, 307, 308, 426, 506], "basic_na": 303, "dyna": 304, "nas_util": 307, "pruner_legaci": [309, 310, 311, 312, 313, 314], "gradient_sensit": 309, "group_lasso": 310, "magnitud": 312, "pruning_recip": [316, 317, 318, 319], "tile_pattern": 319, "pruning_v2": 320, "pytorch_prun": [321, 322, 323, 324, 325, 326, 327], "logger": [322, 415], "prune_util": 324, "auto_mixed_precis": [330, 389], "bayesian": [332, 391, 515], "exhaust": [333, 393, 515], "mse": [335, 396, 515], "mse_v2": [336, 397, 515], "random": [337, 398, 515], "constant": [339, 400, 410], "tuning_sampl": [341, 402], "tuning_spac": [342, 403], "tuning_struct": [343, 404], "mix_precis": 354, "base_model": 355, "keras_model": 357, "mxnet_model": 359, "nets_factori": 360, "onnx_model": 361, "tensorflow_model": 362, "torch_model": 363, "object": [364, 442, 498, 499, 500, 502], "profil": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 451], "parser": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "factori": [366, 368, 373, 376, 378, 383], "onnx_pars": [368, 369, 370], "result": [372, 488, 490, 498, 499, 500], "tensorflow_pars": [373, 374, 375], "onnxrt_profil": [378, 379, 380, 381], "tensorflow_profil": [383, 384, 385, 386], "auto": [388, 479, 485, 508, 512, 515], "conserv": [392, 515], "hawq_v2": [394, 515], "templat": [406, 407, 424], "api_doc_exampl": 406, "train": [408, 425, 445, 454, 465, 504, 507], "collect_layer_histogram": 409, "create_obj_from_config": 411, "kl_diverg": 413, "load_huggingfac": 414, "neural_insights_util": 416, "option": [417, 454, 473], "weights_detail": 420, "version": 421, "intel": [422, 428, 448, 451, 461, 462, 464, 465, 471, 479, 485, 518, 519], "neural": [422, 425, 426, 428, 448, 451, 461, 462, 464, 465, 468, 472, 474, 479, 485, 487, 488, 489, 490, 492, 493, 494, 498, 499, 500, 504, 511, 516, 519], "compressor": [422, 425, 428, 448, 451, 461, 462, 464, 465, 479, 485, 511, 519], "document": [422, 428, 435, 519], "section": [422, 519], "contributor": [423, 424], "coven": [423, 424], "code": [423, 424, 426, 465, 486, 491, 509, 516], "conduct": [423, 424], "our": [423, 512], "pledg": 423, "standard": 423, "respons": [423, 494], "scope": [423, 504], "enforc": 423, "contribut": [424, 478, 482], "guidelin": 424, "creat": [424, 491], "pull": 424, "request": [424, 466, 496], "step": [424, 487, 488, 489, 490], "checklist": 424, "accept": 424, "statu": [424, 493, 494], "check": 424, "overview": [424, 495, 516], "support": [424, 425, 426, 429, 431, 446, 447, 448, 449, 451, 452, 453, 454, 456, 458, 461, 462, 464, 466, 467, 469, 470, 474, 475, 502, 503, 504, 506, 507, 509, 512, 513, 514, 517], "fx": 425, "introduct": [425, 426, 429, 430, 431, 446, 447, 448, 449, 451, 452, 453, 454, 456, 458, 461, 464, 466, 467, 485, 488, 489, 490, 502, 503, 504, 506, 507, 509, 511, 512, 513, 514, 515, 517], "mode": [425, 518], "matrix": [425, 426, 429, 446, 447, 448, 449, 451, 452, 453, 454, 456, 458, 461, 464, 466, 467, 470, 502, 503, 504, 506, 507, 509, 512, 513, 517], "get": [425, 426, 428, 429, 446, 448, 449, 451, 452, 453, 454, 458, 459, 464, 466, 468, 479, 486, 487, 491, 492, 493, 494, 502, 503, 504, 506, 507, 513, 517], "start": [425, 426, 428, 429, 446, 448, 449, 451, 452, 453, 454, 458, 459, 464, 466, 468, 469, 473, 479, 487, 491, 492, 493, 498, 499, 500, 502, 503, 504, 506, 507, 513, 517], "post": [425, 465, 494, 507], "static": [425, 507], "dynam": [425, 426, 507], "awar": [425, 465, 504, 507], "exampl": [425, 426, 429, 435, 446, 448, 449, 451, 452, 453, 454, 455, 456, 464, 465, 466, 467, 470, 474, 487, 488, 489, 490, 492, 497, 498, 499, 500, 502, 503, 504, 507, 509, 512, 513, 518], "note": [425, 510], "detail": 425, "problem": 425, "architectur": [426, 450, 461, 462], "search": [426, 485], "api": [426, 428, 429, 430, 435, 436, 446, 448, 449, 452, 453, 454, 459, 460, 464, 466, 468, 472, 486, 487, 494, 500, 502, 503, 504, 506, 516], "usag": [426, 474, 485, 494, 513, 515], "1": [426, 454, 457, 460, 465, 485, 492, 493, 518], "python": [426, 428, 448, 459, 464, 468, 472, 473, 480, 483, 487, 506, 516], "yaml": [426, 430, 449, 454, 458, 517], "2": [426, 454, 457, 460, 465, 485, 492, 493, 518], "onli": [426, 509], "advanc": [426, 491, 516], "custom": [426, 448, 464, 498, 515], "secur": [427, 454], "polici": [427, 515], "report": 427, "vulner": 427, "instal": [428, 451, 462, 469, 471, 478, 479, 482, 487, 492, 493], "from": [428, 430, 462, 465, 487, 492, 493], "pypi": [428, 474, 487], "select": [428, 479], "public": [428, 505], "event": [428, 505], "addit": 428, "commun": 428, "work": [429, 492, 507], "flow": [429, 507], "background": [429, 485], "ad": 429, "new": [429, 431, 480, 483, 515], "backend": [429, 507], "capabl": [429, 509], "implement": [429, 430], "onnxrtadaptor": 429, "how": [430, 431, 451, 488, 489, 490, 492], "add": [430, 493], "an": [430, 498, 499, 500], "list": [430, 455, 497, 514], "need": 430, "design": [430, 450, 495, 515], "framework": [430, 448, 449, 456, 458, 467, 506, 509, 512], "query_fw_cap": 430, "accord": [430, 431], "tune_cfg": 430, "prepar": [430, 451, 488, 489, 490, 511], "fp32": [430, 456], "graph": 430, "run": [430, 451, 486, 488, 489, 490, 491], "sampl": [430, 459], "iter": 430, "calcul": 430, "rang": 430, "type": [431, 504], "like": 431, "int4": 431, "few": 431, "line": 431, "chang": [431, 460, 484, 486, 510], "defin": [431, 454], "abil": 431, "specif": [431, 449], "invok": 431, "kernel": 431, "tune": [431, 507, 509, 512, 515], "configur": [431, 454, 458, 491, 506, 511, 517], "us": [431, 448, 464, 492, 493], "summari": [431, 488], "runtim": [433, 462, 507, 518], "torch": [434, 518], "mix": [440, 465, 466, 508], "precis": [440, 465, 466, 508], "refer": [447, 504, 507, 509, 512], "build": [448, 457, 464, 491, 492, 493], "file": [449, 458, 517], "user": [449, 454, 460, 506, 509, 516, 517], "workflow": [450, 495], "diagnosi": [451, 487], "featur": [451, 454, 458, 461, 474, 475, 479, 506, 507, 513, 517], "modifi": 451, "script": [451, 491], "see": 451, "do": [451, 468], "paramet": [451, 494], "descript": [451, 494, 496], "suggest": 451, "fallback": 451, "set": [451, 471, 485], "knowledg": [452, 518], "intermedi": 452, "layer": [452, 509, 512], "self": 452, "distribut": [454, 474, 515], "infer": 454, "evalu": 454, "pure": 454, "horovodrun": 454, "execut": 454, "releas": [455, 480, 483, 510], "appendix": 456, "frequent": 457, "ask": 457, "question": 457, "issu": [457, 510], "3": [457, 469, 485], "4": [457, 476, 485, 505], "quick": [459, 473], "valid": [459, 462, 512, 518], "incompat": [460, 510], "between": 460, "v1": 460, "face": [460, 499, 500], "built": [460, 462, 464], "infrastructur": 461, "linux": 462, "prerequisit": [462, 492, 493], "binari": 462, "sourc": [462, 487, 489, 490, 492, 493], "ai": 462, "kit": 462, "window": 462, "system": 462, "requir": [462, 478, 482, 488, 489, 490, 498], "hardwar": [462, 466, 518], "environ": [462, 471], "cpu": [462, 471, 518], "64": 462, "compat": 462, "processor": 462, "gpu": 462, "": [462, 486, 492], "xe": 462, "multipl": [462, 502, 518], "vendor": 462, "through": [462, 518], "softwar": [462, 466], "legal": 463, "inform": 463, "licens": 463, "citat": 463, "trademark": 463, "migrat": 465, "x": 465, "orchestr": [465, 503], "fp16": 466, "dure": [466, 508], "accuraci": [466, 488, 490, 507, 515], "driven": 466, "coder": [468, 472, 474, 485, 516], "what": [468, 486, 492], "we": 468, "offer": 468, "jupyt": [468, 469, 480, 483], "lab": [468, 469], "extens": [468, 478, 479, 482, 485, 486, 495, 518], "launcher": [468, 473], "contact": [468, 492], "aw": 469, "amazon": 469, "sagemak": 469, "For": 469, "studio": 469, "notebook": 469, "instanc": 469, "guid": [469, 516], "bigdl": 470, "nano": 470, "platform": [471, 511], "best": [471, 479], "perform": [471, 511], "mkl": 471, "openmp": 471, "jemalloc": 471, "numa": 471, "control": 471, "variabl": 471, "frequenc": 471, "govern": 471, "enabl": [472, 479, 485], "bench": 472, "superbench": 472, "argument": 473, "v0": 476, "highlight": 476, "other": 476, "changelog": [477, 481], "neural_compressor_ext_lab": [478, 480], "uninstal": [478, 482], "develop": [478, 482], "jupyterlab": 479, "Or": 479, "let": 479, "u": 479, "help": 479, "you": 479, "pre": 479, "requisit": 479, "make": [480, 483, 486, 491], "manual": [480, 483], "npm": [480, 483, 491], "autom": [480, 483], "publish": [480, 483], "conda": [480, 483], "forg": [480, 483], "neural_compressor_ext_lab_alibaba": [482, 483], "log": [484, 493, 494], "unreleas": 484, "vscode": 485, "open": [485, 490], "icon": 485, "5": 485, "welcom": 486, "your": 486, "v": 486, "folder": 486, "setup": 486, "up": 486, "straight": 486, "awai": 486, "explor": 486, "test": [486, 491], "go": 486, "further": 486, "insight": [487, 488, 489, 490], "tensor": [487, 512], "dump": [487, 489], "research": 487, "collabor": 487, "debug": [488, 490], "analyz": [488, 490, 491], "weight": [488, 489, 490, 509], "histogram": 490, "react": 491, "app": 491, "avail": 491, "eject": 491, "learn": [491, 492], "more": [491, 492], "bundl": 491, "size": 491, "web": 491, "deploy": [491, 504], "fail": 491, "minifi": 491, "solut": [492, 493, 494, 498, 499, 500], "why": 492, "doe": 492, "method": [492, 493], "pip": [492, 493], "end": [492, 498, 499, 500], "servic": [493, 495, 498, 499, 500], "submit": [493, 494, 498, 499, 500], "task": [493, 494, 496, 498, 499, 500], "stop": [493, 498, 499, 500], "inspect": 493, "manag": [493, 498, 499], "resourc": [493, 498, 499], "node": 493, "state": 493, "cluster": [493, 494], "remov": 493, "url": 494, "endpoint": 494, "task_id": 494, "websocket": 494, "screen": 494, "ping": 494, "download": [494, 498, 499], "doc": 495, "wip": 495, "oaa": 495, "definit": 495, "diagram": 495, "hug": [499, 500], "grpc": 500, "client": 501, "singl": 502, "One": 503, "shot": 503, "network": 504, "sparsiti": 504, "decai": 504, "regular": 504, "larg": 504, "languag": 504, "retrain": 504, "free": 504, "spars": 504, "hyperparamet": 504, "full": 505, "78": 505, "2023": 505, "24": 505, "2022": 505, "35": 505, "2021": 505, "15": [505, 518], "2018": 505, "2020": 505, "style": 506, "access": 506, "fundament": [507, 512], "scheme": 507, "ipex": 507, "approach": 507, "With": 507, "without": 507, "specifi": 507, "rule": 507, "recip": 507, "devic": 507, "turn": 508, "off": 508, "woq": [509, 518], "wise": [509, 512], "known": 510, "benefit": 511, "comparison": 511, "differ": 511, "smooth": 512, "quant": 512, "per": 512, "channel": 512, "limit": 512, "smoothquant": 512, "enhanc": 512, "alpha": 512, "engin": 512, "tensorboard": 513, "space": 515, "exit": 515, "process": 515, "zero": 516, "topic": 516, "innov": 516, "product": 516, "13": 518, "0": 518, "ptq": 518}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [176, "module-contents"], [177, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [185, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [156, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [164, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [254, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [262, "classes"], [263, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [296, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [306, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [323, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [346, "classes"], [349, "classes"], [352, "classes"], [353, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [368, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [375, "classes"], [376, "classes"], [378, "classes"], [380, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [408, "classes"], [409, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [417, "classes"], [419, "classes"], [420, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [157, "functions"], [158, "functions"], [159, "functions"], [162, "functions"], [163, "functions"], [165, "functions"], [166, "functions"], [167, "functions"], [169, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [177, "functions"], [180, "functions"], [181, "functions"], [183, "functions"], [184, "functions"], [185, "functions"], [187, "functions"], [189, "functions"], [190, "functions"], [194, "functions"], [197, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [206, "functions"], [207, "functions"], [209, "functions"], [218, "functions"], [219, "functions"], [227, "functions"], [229, "functions"], [233, "functions"], [236, "functions"], [237, "functions"], [238, "functions"], [241, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [246, "functions"], [248, "functions"], [250, "functions"], [251, "functions"], [253, "functions"], [262, "functions"], [270, "functions"], [272, "functions"], [276, "functions"], [279, "functions"], [280, "functions"], [281, "functions"], [283, "functions"], [284, "functions"], [285, "functions"], [288, "functions"], [289, "functions"], [290, "functions"], [293, "functions"], [294, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [307, "functions"], [314, "functions"], [318, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [327, "functions"], [332, "functions"], [338, "functions"], [342, "functions"], [344, "functions"], [346, "functions"], [347, "functions"], [349, "functions"], [350, "functions"], [351, "functions"], [352, "functions"], [353, "functions"], [354, "functions"], [358, "functions"], [362, "functions"], [364, "functions"], [381, "functions"], [386, "functions"], [387, "functions"], [391, "functions"], [399, "functions"], [403, "functions"], [405, "functions"], [406, "functions"], [408, "functions"], [411, "functions"], [412, "functions"], [414, "functions"], [415, "functions"], [416, "functions"], [418, "functions"], [419, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [153, "subpackages"], [182, "subpackages"], [184, "subpackages"], [213, "subpackages"], [238, "subpackages"], [256, "subpackages"], [281, "subpackages"], [292, "subpackages"], [316, "subpackages"], [334, "subpackages"], [345, "subpackages"], [395, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [153, "submodules"], [154, "submodules"], [169, "submodules"], [175, "submodules"], [178, "submodules"], [182, "submodules"], [184, "submodules"], [186, "submodules"], [190, "submodules"], [197, "submodules"], [210, "submodules"], [214, "submodules"], [221, "submodules"], [233, "submodules"], [237, "submodules"], [241, "submodules"], [248, "submodules"], [257, "submodules"], [264, "submodules"], [276, "submodules"], [280, "submodules"], [283, "submodules"], [287, "submodules"], [292, "submodules"], [299, "submodules"], [305, "submodules"], [311, "submodules"], [317, "submodules"], [321, "submodules"], [334, "submodules"], [340, "submodules"], [345, "submodules"], [352, "submodules"], [356, "submodules"], [367, "submodules"], [369, "submodules"], [374, "submodules"], [377, "submodules"], [379, "submodules"], [384, "submodules"], [395, "submodules"], [401, "submodules"], [407, "submodules"], [412, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [169, "package-contents"], [184, "package-contents"], [190, "package-contents"], [197, "package-contents"], [221, "package-contents"], [233, "package-contents"], [237, "package-contents"], [238, "package-contents"], [241, "package-contents"], [248, "package-contents"], [264, "package-contents"], [276, "package-contents"], [280, "package-contents"], [281, "package-contents"], [283, "package-contents"], [292, "package-contents"], [299, "package-contents"], [311, "package-contents"], [316, "package-contents"], [317, "package-contents"], [334, "package-contents"], [352, "package-contents"], [356, "package-contents"], [395, "package-contents"], [412, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[165, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[173, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[174, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[175, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[176, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[177, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[178, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[179, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[180, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[181, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[182, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[183, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[184, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[185, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[186, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[187, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[188, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[189, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[190, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[191, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[192, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[193, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[194, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[195, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[196, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[197, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[198, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[199, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[200, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[201, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[202, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[203, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[204, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[205, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[206, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[207, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[208, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[209, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[210, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[211, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[212, "module-neural_compressor.config"]], "neural_compressor.contrib": [[213, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[214, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[215, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[216, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[217, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[218, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[219, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[220, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[221, "module-neural_compressor.data.dataloaders"]], "Attributes": [[221, "attributes"], [229, "attributes"], [238, "attributes"], [272, "attributes"], [281, "attributes"], [292, "attributes"], [316, "attributes"], [356, "attributes"], [406, "attributes"], [412, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[222, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[223, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[224, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[225, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[226, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[227, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[228, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[229, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[230, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[231, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[232, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[233, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[234, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[235, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[236, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[237, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[238, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[239, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[240, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[241, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[242, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[243, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[244, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[245, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[246, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[247, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[248, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[249, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[250, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[251, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[252, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[253, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[254, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[255, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[256, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[257, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[258, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[259, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[260, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[261, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[262, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[263, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[264, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[266, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[267, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[268, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[270, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[271, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[272, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[273, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[274, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[275, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[276, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[277, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[278, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[279, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[280, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[281, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[282, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[283, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[284, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[285, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[286, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[287, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[288, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[289, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[290, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[291, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[292, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[293, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[294, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[295, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[296, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[297, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[298, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[299, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[300, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[301, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[302, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[303, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[304, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[305, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[306, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[307, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[308, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[309, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[310, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[311, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[312, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[313, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[314, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[315, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[316, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[317, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[318, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[319, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[320, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[321, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[322, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[323, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[324, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[325, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[326, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[327, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[328, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[329, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[330, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[331, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[332, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[333, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[334, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[335, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[336, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[337, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[338, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[339, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[340, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[341, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[342, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[343, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[344, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[345, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[346, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[347, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[348, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[349, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[350, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[351, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[352, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[353, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[354, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[355, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[356, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[357, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[358, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[359, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[360, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[361, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[362, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[363, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[364, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[365, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[366, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[367, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[368, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[369, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[370, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[371, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[372, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[373, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[374, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[375, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[376, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[377, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[379, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[380, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[381, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[382, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[384, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[385, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[386, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[387, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[388, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[389, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[390, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[391, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[392, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[393, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[394, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[395, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[396, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[397, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[398, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[399, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[400, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[401, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[402, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[403, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[404, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[405, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[406, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[407, "module-neural_compressor.template"]], "neural_compressor.training": [[408, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[409, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[410, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[411, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[412, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[413, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[414, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[415, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[416, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[417, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[418, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[419, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[420, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[421, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[422, "intel-neural-compressor-documentation"], [519, "intel-neural-compressor-documentation"]], "Sections": [[422, "sections"], [519, "sections"]], "Contributor Covenant Code of Conduct": [[423, "contributor-covenant-code-of-conduct"], [424, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[423, "our-pledge"]], "Our Standards": [[423, "our-standards"]], "Our Responsibilities": [[423, "our-responsibilities"]], "Scope": [[423, "scope"]], "Enforcement": [[423, "enforcement"]], "Attribution": [[423, "attribution"]], "Contribution Guidelines": [[424, "contribution-guidelines"]], "Create Pull Request": [[424, "create-pull-request"]], "Step-by-Step guidelines": [[424, "step-by-step-guidelines"]], "Pull Request Checklist": [[424, "pull-request-checklist"]], "Pull Request Template": [[424, "pull-request-template"]], "Pull Request Acceptance Criteria": [[424, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[424, "pull-request-status-checks-overview"]], "Support": [[424, "support"]], "FX": [[425, "fx"]], "Introduction": [[425, "introduction"], [426, "introduction"], [429, "introduction"], [430, "introduction"], [431, "introduction"], [446, "introduction"], [447, "introduction"], [448, "introduction"], [449, "introduction"], [452, "introduction"], [453, "introduction"], [454, "introduction"], [456, "introduction"], [458, "introduction"], [461, "introduction"], [464, "introduction"], [466, "introduction"], [467, "introduction"], [488, "introduction"], [489, "introduction"], [490, "introduction"], [502, "introduction"], [503, "introduction"], [504, "introduction"], [506, "introduction"], [509, "introduction"], [511, "introduction"], [512, "introduction"], [513, "introduction"], [514, "introduction"], [515, "introduction"], [517, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[425, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[425, "get-started"], [451, "get-started"], [492, "get-started"], [507, "get-started"]], "Post Training Static Quantization": [[425, "post-training-static-quantization"], [507, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[425, "post-training-dynamic-quantization"], [507, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[425, "quantization-aware-training"]], "Examples": [[425, "examples"], [426, "examples"], [446, "examples"], [448, "examples"], [449, "examples"], [452, "examples"], [453, "examples"], [454, "examples"], [455, "examples"], [456, "examples"], [465, "examples"], [466, "examples"], [467, "examples"], [503, "examples"], [504, "examples"], [507, "examples"], [509, "examples"], [513, "examples"]], "Note": [[425, "note"]], "Details": [[425, "details"]], "Common Problem": [[425, "common-problem"]], "Dynamic Quantization": [[425, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[425, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[426, "neural-architecture-search"]], "Basic NAS": [[426, "basic-nas"]], "Dynamic NAS": [[426, "dynamic-nas"]], "NAS Support Matrix": [[426, "nas-support-matrix"]], "Get Started with NAS API": [[426, "get-started-with-nas-api"]], "Basic Usage": [[426, "basic-usage"]], "1. Python code + YAML": [[426, "python-code-yaml"]], "2. Python code only": [[426, "python-code-only"]], "Advanced Usage (Custom NAS)": [[426, "advanced-usage-custom-nas"]], "Security Policy": [[427, "security-policy"]], "Report a Vulnerability": [[427, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[428, "intel-neural-compressor"], [485, "intel-neural-compressor"]], "Installation": [[428, "installation"], [462, "installation"], [479, "installation"], [487, "installation"], [492, "installation"]], "Install from pypi": [[428, "install-from-pypi"], [487, "install-from-pypi"]], "Getting Started": [[428, "getting-started"], [459, "getting-started"], [487, "getting-started"]], "Quantization with Python API": [[428, "quantization-with-python-api"], [459, "quantization-with-python-api"], [487, "quantization-with-python-api"]], "Documentation": [[428, "documentation"]], "Selected Publications/Events": [[428, "selected-publications-events"]], "Additional Content": [[428, "additional-content"]], "Communication": [[428, "communication"]], "Adaptor": [[429, "adaptor"], [432, "adaptor"]], "Adaptor Support Matrix": [[429, "adaptor-support-matrix"]], "Working Flow": [[429, "working-flow"], [507, "working-flow"]], "Get Started with Adaptor API": [[429, "get-started-with-adaptor-api"]], "Query API": [[429, "query-api"]], "Background": [[429, "background"]], "Query API Introduction": [[429, "query-api-introduction"]], "Example of Adding a New Backend Support": [[429, "example-of-adding-a-new-backend-support"]], "Capability": [[429, "capability"]], "Implement ONNXRTAdaptor Class": [[429, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[430, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[430, "api-list-that-need-to-implement"]], "Design the framework YAML": [[430, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[430, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[430, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[430, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[430, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[430, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[431, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[431, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[431, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[431, "use-the-new-data-type"]], "Summary": [[431, "summary"]], "ONNX Runtime": [[433, "onnx-runtime"]], "Torch Utils": [[434, "torch-utils"]], "API Document Example": [[435, "api-document-example"]], "APIs": [[436, "apis"]], "Benchmark": [[437, "benchmark"], [465, "benchmark"], [506, "benchmark"]], "Compression": [[438, "compression"]], "Config": [[439, "config"]], "Mix Precision": [[440, "mix-precision"], [465, "mix-precision"]], "Model": [[441, "model"], [467, "model"], [488, "model"], [490, "model"]], "Objective": [[442, "objective"], [498, "objective"], [499, "objective"], [500, "objective"], [502, "objective"]], "Quantization": [[443, "quantization"], [506, "quantization"], [507, "quantization"]], "Strategy": [[444, "strategy"]], "Training": [[445, "training"]], "Benchmarking": [[446, "benchmarking"]], "Benchmark Support Matrix": [[446, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[446, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[447, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[447, "calibration-algorithms"]], "Support Matrix": [[447, "support-matrix"], [470, "support-matrix"]], "Reference": [[447, "reference"], [504, "reference"], [507, "reference"], [509, "reference"], [512, "reference"]], "DataLoader": [[448, "dataloader"]], "Supported Framework Dataloader Matrix": [[448, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[448, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[448, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[448, "build-custom-dataloader-with-python-api"]], "Dataset": [[449, "dataset"]], "Supported Framework Dataset Matrix": [[449, "supported-framework-dataset-matrix"]], "TensorFlow": [[449, "tensorflow"], [464, "tensorflow"], [514, "tensorflow"]], "PyTorch": [[449, "pytorch"], [464, "pytorch"], [508, "pytorch"]], "MXNet": [[449, "mxnet"], [464, "mxnet"], [514, "mxnet"]], "ONNXRT": [[449, "onnxrt"], [464, "onnxrt"], [514, "onnxrt"]], "Get start with Dataset API": [[449, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[449, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[449, "user-specific-dataset"]], "Design": [[450, "design"], [515, "design"], [515, "id1"], [515, "id3"], [515, "id5"], [515, "id7"], [515, "id9"], [515, "id11"], [515, "id13"], [515, "id15"], [515, "id17"], [515, "id19"], [515, "id21"]], "Architecture": [[450, "architecture"], [461, "architecture"]], "Workflow": [[450, "workflow"]], "Diagnosis": [[451, "diagnosis"]], "Diagnosis Introduction": [[451, "diagnosis-introduction"]], "Supported Feature Matrix": [[451, "supported-feature-matrix"], [454, "supported-feature-matrix"], [458, "supported-feature-matrix"], [461, "supported-feature-matrix"], [506, "supported-feature-matrix"], [507, "supported-feature-matrix"], [513, "supported-feature-matrix"], [517, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[451, "install-intel-neural-compressor"]], "Modify script": [[451, "modify-script"]], "Quantization diagnosis": [[451, "quantization-diagnosis"]], "Benchmark diagnosis": [[451, "benchmark-diagnosis"]], "Example": [[451, "example"], [464, "example"], [470, "example"], [474, "example"], [502, "example"], [509, "example"], [512, "example"]], "Prepare dataset": [[451, "prepare-dataset"]], "Run quantization script": [[451, "run-quantization-script"]], "Run benchmark script": [[451, "run-benchmark-script"]], "See quantization data": [[451, "see-quantization-data"]], "How to do diagnosis": [[451, "how-to-do-diagnosis"]], "Parameter description": [[451, "parameter-description"]], "Diagnosis suggestions": [[451, "diagnosis-suggestions"]], "Fallback setting example": [[451, "fallback-setting-example"]], "See profiling data": [[451, "see-profiling-data"]], "Distillation": [[452, "distillation"], [465, "distillation"], [506, "distillation"]], "Knowledge Distillation": [[452, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[452, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[452, "self-distillation"]], "Distillation Support Matrix": [[452, "distillation-support-matrix"]], "Get Started with Distillation API": [[452, "get-started-with-distillation-api"]], "Distillation for Quantization": [[453, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[453, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[453, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[454, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[454, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[454, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[454, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[454, "horovodrun-execution"]], "Security": [[454, "security"]], "PyTorch Examples:": [[454, "pytorch-examples"]], "TensorFlow Examples:": [[454, "tensorflow-examples"]], "Example List": [[455, "example-list"]], "Release Data": [[455, "release-data"]], "Export": [[456, "export"]], "Supported Framework Model Matrix": [[456, "supported-framework-model-matrix"], [467, "supported-framework-model-matrix"], [509, "supported-framework-model-matrix"]], "PyTorch Model": [[456, "pytorch-model"]], "FP32 Model Export": [[456, "fp32-model-export"], [456, "id1"]], "INT8 Model Export": [[456, "int8-model-export"], [456, "id2"]], "Tensorflow Model": [[456, "tensorflow-model"]], "Appendix": [[456, "appendix"]], "Supported quantized ops": [[456, "supported-quantized-ops"]], "Frequently Asked Questions": [[457, "frequently-asked-questions"]], "Common Build Issues": [[457, "common-build-issues"]], "Issue 1:": [[457, "issue-1"]], "Issue 2:": [[457, "issue-2"]], "Issue 3:": [[457, "issue-3"]], "Issue 4:": [[457, "issue-4"]], "Framework YAML Configuration Files": [[458, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[458, "get-started-with-framework-yaml-files"]], "Quick Samples": [[459, "quick-samples"]], "Validated Models": [[459, "validated-models"], [512, "validated-models"], [518, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[460, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[460, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[460, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[461, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[462, "linux-installation"]], "Prerequisites": [[462, "prerequisites"], [462, "id1"], [492, "prerequisites"], [493, "prerequisites"]], "Install from Binary": [[462, "install-from-binary"], [462, "id2"]], "Install from Source": [[462, "install-from-source"], [462, "id3"], [487, "install-from-source"]], "Install from AI Kit": [[462, "install-from-ai-kit"]], "Windows Installation": [[462, "windows-installation"]], "System Requirements": [[462, "system-requirements"]], "Validated Hardware Environment": [[462, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[462, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[462, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[462, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[462, "validated-software-environment"]], "Legal Information": [[463, "legal-information"]], "License": [[463, "license"]], "Citation": [[463, "citation"]], "Trademarks": [[463, "trademarks"]], "Metrics": [[464, "metrics"]], "Supported Built-in Metric Matrix": [[464, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[464, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[464, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[464, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[465, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[465, "model-quantization"]], "Post-training Quantization": [[465, "post-training-quantization"]], "Quantization Aware Training": [[465, "quantization-aware-training"], [507, "quantization-aware-training"], [507, "id1"]], "Pruning": [[465, "pruning"], [504, "pruning"], [506, "pruning"]], "Orchestration": [[465, "orchestration"]], "Mixed Precision": [[466, "mixed-precision"]], "Mixed Precision Support Matrix": [[466, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[466, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[466, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[466, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[466, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[466, "get-started-with-mixed-precision-api"]], "Neural Coder": [[468, "neural-coder"], [485, "neural-coder"], [485, "id1"]], "What do we offer?": [[468, "what-do-we-offer"]], "Getting Started!": [[468, "getting-started"], [479, "getting-started"]], "Jupyter Lab Extension": [[468, "jupyter-lab-extension"]], "Python Launcher": [[468, "python-launcher"], [473, "python-launcher"]], "Python API": [[468, "python-api"]], "Contact": [[468, "contact"], [492, "contact"]], "AWS Amazon SageMaker Support": [[469, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[469, "start-jupyter-lab-3"]], "For SageMaker Studio": [[469, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[469, "for-sagemaker-notebook-instance"]], "Installation Guide": [[469, "installation-guide"]], "BigDL Nano Support": [[470, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[471, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[471, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[471, "install-numa-controller"]], "Environment Variables": [[471, "environment-variables"]], "Frequency Governers": [[471, "frequency-governers"]], "Neural Coder as Python API": [[472, "neural-coder-as-python-api"]], "Enable": [[472, "enable"]], "Bench": [[472, "bench"]], "SuperBench": [[472, "superbench"]], "Quick-Start": [[473, "quick-start"]], "Launcher Arguments (Optional)": [[473, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[474, "neural-coder-for-quantization"]], "Features Supported": [[474, "features-supported"]], "Models Supported": [[474, "models-supported"]], "Usage": [[474, "usage"], [494, "usage"], [494, "id2"], [494, "id6"], [494, "id9"], [494, "id16"], [494, "id19"], [494, "id22"], [494, "id25"], [513, "usage"], [513, "id1"], [515, "usage"], [515, "id2"], [515, "id4"], [515, "id6"], [515, "id8"], [515, "id10"], [515, "id12"], [515, "id14"], [515, "id16"], [515, "id18"], [515, "id20"], [515, "id22"]], "PyPI distribution:": [[474, "pypi-distribution"]], "Supported Optimization Features": [[475, "supported-optimization-features"]], "v0.4": [[476, "v0-4"]], "Highlights": [[476, "highlights"]], "Others": [[476, "others"]], "Changelog": [[477, "changelog"], [481, "changelog"]], "neural_compressor_ext_lab": [[478, "neural-compressor-ext-lab"]], "Requirements": [[478, "requirements"], [482, "requirements"], [488, "requirements"], [489, "requirements"], [490, "requirements"], [498, "requirements"]], "Install": [[478, "install"], [482, "install"]], "Uninstall": [[478, "uninstall"], [482, "uninstall"]], "Contributing": [[478, "contributing"], [482, "contributing"]], "Development install": [[478, "development-install"], [482, "development-install"]], "Development uninstall": [[478, "development-uninstall"], [482, "development-uninstall"]], "Packaging the extension": [[478, "packaging-the-extension"], [482, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[479, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[479, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[479, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[479, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[480, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[480, "manual-release"], [483, "manual-release"]], "Python package": [[480, "python-package"], [483, "python-package"]], "NPM package": [[480, "npm-package"], [483, "npm-package"]], "Automated releases with the Jupyter Releaser": [[480, "automated-releases-with-the-jupyter-releaser"], [483, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[480, "publishing-to-conda-forge"], [483, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[482, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[483, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[484, "change-log"]], "[Unreleased]": [[484, "unreleased"]], "Background Introduction": [[485, "background-introduction"]], "Neural Coder Extension in VSCode": [[485, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[485, "neural-coder-extension-usage"]], "1. Open": [[485, "open"]], "2. Search": [[485, "search"]], "3. Setting": [[485, "setting"]], "4. Icon": [[485, "icon"]], "5. optimization (quantization)": [[485, "optimization-quantization"]], "5.1 Enable": [[485, "enable"]], "5.2 Auto": [[485, "auto"]], "Welcome to your VS Code Extension": [[486, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[486, "what-s-in-the-folder"]], "Setup": [[486, "setup"]], "Get up and running straight away": [[486, "get-up-and-running-straight-away"]], "Make changes": [[486, "make-changes"]], "Explore the API": [[486, "explore-the-api"]], "Run tests": [[486, "run-tests"]], "Go further": [[486, "go-further"]], "Neural Insights": [[487, "neural-insights"]], "Start the Neural Insights": [[487, "start-the-neural-insights"]], "Tensor dump examples": [[487, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[487, "step-by-step-diagnosis-example"]], "Research Collaborations": [[487, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[488, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [490, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[488, "preparation"], [489, "preparation"], [490, "preparation"], [511, "preparation"]], "Running the quantization": [[488, "running-the-quantization"], [489, "running-the-quantization"], [490, "running-the-quantization"]], "Analyzing the result of quantization": [[488, "analyzing-the-result-of-quantization"], [490, "analyzing-the-result-of-quantization"]], "Weights summary": [[488, "weights-summary"]], "Activations summary": [[488, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[489, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[489, "source"], [490, "source"]], "Prepare the dataset": [[490, "prepare-the-dataset"]], "Analyzing weight histograms": [[490, "analyzing-weight-histograms"]], "Open Neural Insights": [[490, "open-neural-insights"]], "Getting Started with Create React App": [[491, "getting-started-with-create-react-app"]], "Available Scripts": [[491, "available-scripts"]], "npm start": [[491, "npm-start"]], "npm test": [[491, "npm-test"]], "npm run build": [[491, "npm-run-build"]], "npm run eject": [[491, "npm-run-eject"]], "Learn More": [[491, "learn-more"], [492, "learn-more"]], "Code Splitting": [[491, "code-splitting"]], "Analyzing the Bundle Size": [[491, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[491, "making-a-progressive-web-app"]], "Advanced Configuration": [[491, "advanced-configuration"]], "Deployment": [[491, "deployment"]], "npm run build fails to minify": [[491, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[492, "what-s-neural-solution"]], "Why Neural Solution?": [[492, "why-neural-solution"]], "How does Neural Solution Work?": [[492, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[492, "method-1-using-pip"]], "Method 2. Building from source:": [[492, "method-2-building-from-source"]], "End-to-end examples": [[492, "end-to-end-examples"]], "Get started": [[493, "get-started"]], "Install Neural Solution": [[493, "install-neural-solution"]], "Method 1. Using pip": [[493, "method-1-using-pip"]], "Method 2. Building from source": [[493, "method-2-building-from-source"]], "Start service": [[493, "start-service"]], "Submit task": [[493, "submit-task"]], "Query task status": [[493, "query-task-status"]], "Stop service": [[493, "stop-service"]], "Inspect logs": [[493, "inspect-logs"]], "Manage resource": [[493, "manage-resource"], [498, "manage-resource"], [499, "manage-resource"]], "Node States": [[493, "node-states"]], "Query cluster": [[493, "query-cluster"]], "Add node": [[493, "add-node"]], "Remove node": [[493, "remove-node"]], "Neural Solution API": [[494, "neural-solution-api"]], "Base URL": [[494, "base-url"]], "Endpoints": [[494, "endpoints"]], "GET /": [[494, "get"]], "Description": [[494, "description"], [494, "id1"], [494, "id4"], [494, "id8"], [494, "id12"], [494, "id15"], [494, "id18"], [494, "id21"], [494, "id24"]], "Responses": [[494, "responses"], [494, "id3"], [494, "id7"], [494, "id11"], [494, "id14"], [494, "id17"], [494, "id20"], [494, "id23"], [494, "id26"]], "POST /task/submit": [[494, "post-task-submit"]], "Parameters": [[494, "parameters"], [494, "id5"], [494, "id10"], [494, "id13"]], "GET /task/status/{task_id}": [[494, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[494, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[494, "websocket-task-screen-task-id"]], "GET /ping": [[494, "get-ping"]], "GET /cluster": [[494, "get-cluster"]], "GET /download/{task_id}": [[494, "get-download-task-id"]], "GET /description": [[494, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[495, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[495, "contents"]], "Overview": [[495, "overview"], [516, "overview"]], "Workflow of OaaS": [[495, "workflow-of-oaas"]], "Class definition diagram": [[495, "class-definition-diagram"]], "Extensibility": [[495, "extensibility"]], "Task request description": [[496, "task-request-description"]], "Examples List": [[497, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[498, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[498, "start-the-neural-solution-service"], [499, "start-the-neural-solution-service"], [500, "start-the-neural-solution-service"]], "Submit optimization task": [[498, "submit-optimization-task"], [499, "submit-optimization-task"], [500, "submit-optimization-task"]], "Query optimization result": [[498, "query-optimization-result"], [499, "query-optimization-result"], [500, "query-optimization-result"]], "Download optimized model": [[498, "download-optimized-model"], [499, "download-optimized-model"]], "Stop the service": [[498, "stop-the-service"], [499, "stop-the-service"], [500, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[499, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[500, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[501, "client"]], "Single Objective": [[502, "single-objective"]], "Multiple Objectives": [[502, "multiple-objectives"]], "Objective Support Matrix": [[502, "objective-support-matrix"]], "Get Started with Objective API": [[502, "get-started-with-objective-api"]], "Config Single Objective": [[502, "config-single-objective"]], "Config Multiple Objectives": [[502, "config-multiple-objectives"]], "Optimization Orchestration": [[503, "optimization-orchestration"]], "One-shot": [[503, "one-shot"]], "Orchestration Support Matrix": [[503, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[503, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[504, "neural-network-pruning"]], "Pruning Patterns": [[504, "pruning-patterns"]], "Pruning Criteria": [[504, "pruning-criteria"]], "Pruning Types": [[504, "pruning-types"]], "Pruning Schedules": [[504, "pruning-schedules"]], "Pruning Scope": [[504, "pruning-scope"]], "Sparsity Decay Types": [[504, "sparsity-decay-types"]], "Regularization": [[504, "regularization"]], "Large Language Model Pruning": [[504, "large-language-model-pruning"]], "Pruning Support Matrix": [[504, "pruning-support-matrix"]], "Get Started with Pruning API": [[504, "get-started-with-pruning-api"]], "Training-aware pruning API": [[504, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[504, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[504, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[504, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (78)": [[505, "full-publications-events-78"]], "2023 (24)": [[505, "id1"]], "2022 (35)": [[505, "id2"]], "2021 (15)": [[505, "id3"]], "2018 - 2020 (4)": [[505, "id4"]], "Pythonic Style Access for Configurations": [[506, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[506, "pythonic-api-for-user-configurations"], [506, "id1"]], "Pythonic API for Framework Configurations": [[506, "pythonic-api-for-framework-configurations"], [506, "id2"]], "Get Started with Pythonic API for Configurations": [[506, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[506, "nas"]], "Quantization Introduction": [[507, "quantization-introduction"]], "Quantization Fundamentals": [[507, "quantization-fundamentals"], [512, "quantization-fundamentals"]], "Quantization Support Matrix": [[507, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[507, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[507, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[507, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[507, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[507, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[507, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[507, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[507, "post-training-quantization"]], "Specify Quantization Rules": [[507, "specify-quantization-rules"]], "Specify Quantization Recipes": [[507, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[507, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[508, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[508, "tensorflow"]], "Weight Only Quantization (WOQ)": [[509, "weight-only-quantization-woq"]], "Quantization Capability": [[509, "quantization-capability"]], "Export Compressed Model": [[509, "export-compressed-model"]], "User Code Example": [[509, "user-code-example"]], "WOQ algorithms tuning": [[509, "woq-algorithms-tuning"]], "Layer Wise Quantization": [[509, "layer-wise-quantization"]], "Supported Matrix": [[509, "supported-matrix"]], "Release": [[510, "release"]], "Release Notes": [[510, "release-notes"]], "Known Issues": [[510, "known-issues"]], "Incompatible Changes": [[510, "incompatible-changes"]], "SigOpt Strategy": [[511, "sigopt-strategy"]], "SigOpt Platform": [[511, "sigopt-platform"]], "Neural Compressor Configuration": [[511, "neural-compressor-configuration"]], "Performance": [[511, "performance"]], "Benefit of SigOpt Strategy": [[511, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[511, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[512, "smooth-quant"]], "Per-tensor & Per-channel": [[512, "per-tensor-per-channel"]], "Per-tensor example": [[512, "per-tensor-example"]], "Per-channel example": [[512, "per-channel-example"]], "Matmul quantization example": [[512, "matmul-quantization-example"]], "Per-channel limitation": [[512, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[512, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[512, "smoothquant"]], "Our enhancement:": [[512, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[512, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[512, "engineering"]], "Supported Framework Matrix": [[512, "supported-framework-matrix"]], "TensorBoard": [[513, "tensorboard"]], "Get Started with TensorBoard": [[513, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[513, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[513, "tensorflow-tensorboard"]], "PyTorch Examples": [[513, "pytorch-examples"]], "TensorFlow Examples": [[513, "tensorflow-examples"]], "Transform": [[514, "transform"]], "Transform Support List": [[514, "transform-support-list"]], "Pytorch": [[514, "pytorch"]], "Tuning Strategies": [[515, "tuning-strategies"]], "Strategy Design": [[515, "strategy-design"]], "Tuning Space": [[515, "tuning-space"]], "Exit Policy": [[515, "exit-policy"]], "Accuracy Criteria": [[515, "accuracy-criteria"]], "Tuning Process": [[515, "tuning-process"]], "Tuning Algorithms": [[515, "tuning-algorithms"]], "Auto": [[515, "auto"]], "Conservative Tuning": [[515, "conservative-tuning"]], "Basic": [[515, "basic"]], "MSE": [[515, "mse"]], "MSE_V2": [[515, "mse-v2"]], "HAWQ_V2": [[515, "hawq-v2"]], "Bayesian": [[515, "bayesian"]], "Exhaustive": [[515, "exhaustive"]], "Random": [[515, "random"]], "SigOpt": [[515, "sigopt"]], "TPE": [[515, "tpe"]], "Distributed Tuning": [[515, "distributed-tuning"]], "Customize a New Tuning Strategy": [[515, "customize-a-new-tuning-strategy"]], "User Guide": [[516, "user-guide"]], "Python-based APIs": [[516, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[516, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[516, "advanced-topics"]], "Innovations for Productivity": [[516, "innovations-for-productivity"]], "User YAML Configuration Files": [[517, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[517, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[518, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[518, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[518, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[518, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[518, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[518, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[518, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[518, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[518, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[518, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[518, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.awq"], [150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [151, "module-neural_compressor.adaptor.torch_utils.gptq"], [152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [153, "module-neural_compressor.adaptor.torch_utils"], [154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [164, "module-neural_compressor.adaptor.torch_utils.teq"], [165, "module-neural_compressor.adaptor.torch_utils.util"], [166, "module-neural_compressor.adaptor.torch_utils.weight_only"], [167, "module-neural_compressor.algorithm.algorithm"], [168, "module-neural_compressor.algorithm.fast_bias_correction"], [169, "module-neural_compressor.algorithm"], [170, "module-neural_compressor.algorithm.smooth_quant"], [171, "module-neural_compressor.algorithm.weight_correction"], [172, "module-neural_compressor.benchmark"], [173, "module-neural_compressor.compression.callbacks"], [174, "module-neural_compressor.compression.distillation.criterions"], [175, "module-neural_compressor.compression.distillation"], [176, "module-neural_compressor.compression.distillation.optimizers"], [177, "module-neural_compressor.compression.distillation.utility"], [178, "module-neural_compressor.compression.hpo"], [179, "module-neural_compressor.compression.hpo.sa_optimizer"], [180, "module-neural_compressor.compression.hpo.search_algorithms"], [181, "module-neural_compressor.compression.hpo.search_space"], [182, "module-neural_compressor.compression"], [183, "module-neural_compressor.compression.pruner.criteria"], [184, "module-neural_compressor.compression.pruner"], [185, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [186, "module-neural_compressor.compression.pruner.model_slim"], [187, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [188, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [189, "module-neural_compressor.compression.pruner.patterns.base"], [190, "module-neural_compressor.compression.pruner.patterns"], [191, "module-neural_compressor.compression.pruner.patterns.mha"], [192, "module-neural_compressor.compression.pruner.patterns.ninm"], [193, "module-neural_compressor.compression.pruner.patterns.nxm"], [194, "module-neural_compressor.compression.pruner.pruners.base"], [195, "module-neural_compressor.compression.pruner.pruners.basic"], [196, "module-neural_compressor.compression.pruner.pruners.block_mask"], [197, "module-neural_compressor.compression.pruner.pruners"], [198, "module-neural_compressor.compression.pruner.pruners.mha"], [199, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [200, "module-neural_compressor.compression.pruner.pruners.progressive"], [201, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [202, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [203, "module-neural_compressor.compression.pruner.pruning"], [204, "module-neural_compressor.compression.pruner.regs"], [205, "module-neural_compressor.compression.pruner.schedulers"], [206, "module-neural_compressor.compression.pruner.tf_criteria"], [207, "module-neural_compressor.compression.pruner.utils"], [208, "module-neural_compressor.conf.config"], [209, "module-neural_compressor.conf.dotdict"], [210, "module-neural_compressor.conf"], [211, "module-neural_compressor.conf.pythonic_config"], [212, "module-neural_compressor.config"], [213, "module-neural_compressor.contrib"], [214, "module-neural_compressor.contrib.strategy"], [215, "module-neural_compressor.contrib.strategy.sigopt"], [216, "module-neural_compressor.contrib.strategy.tpe"], [217, "module-neural_compressor.data.dataloaders.base_dataloader"], [218, "module-neural_compressor.data.dataloaders.dataloader"], [219, "module-neural_compressor.data.dataloaders.default_dataloader"], [220, "module-neural_compressor.data.dataloaders.fetcher"], [221, "module-neural_compressor.data.dataloaders"], [222, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [223, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [224, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [225, "module-neural_compressor.data.dataloaders.sampler"], [226, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [227, "module-neural_compressor.data.datasets.bert_dataset"], [228, "module-neural_compressor.data.datasets.coco_dataset"], [229, "module-neural_compressor.data.datasets.dataset"], [230, "module-neural_compressor.data.datasets.dummy_dataset"], [231, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [232, "module-neural_compressor.data.datasets.imagenet_dataset"], [233, "module-neural_compressor.data.datasets"], [234, "module-neural_compressor.data.datasets.style_transfer_dataset"], [235, "module-neural_compressor.data.filters.coco_filter"], [236, "module-neural_compressor.data.filters.filter"], [237, "module-neural_compressor.data.filters"], [238, "module-neural_compressor.data"], [239, "module-neural_compressor.data.transforms.coco_transform"], [240, "module-neural_compressor.data.transforms.imagenet_transform"], [241, "module-neural_compressor.data.transforms"], [242, "module-neural_compressor.data.transforms.postprocess"], [243, "module-neural_compressor.data.transforms.tokenization"], [244, "module-neural_compressor.data.transforms.transform"], [245, "module-neural_compressor.experimental.benchmark"], [246, "module-neural_compressor.experimental.common.criterion"], [247, "module-neural_compressor.experimental.common.dataloader"], [248, "module-neural_compressor.experimental.common"], [249, "module-neural_compressor.experimental.common.metric"], [250, "module-neural_compressor.experimental.common.model"], [251, "module-neural_compressor.experimental.common.optimizer"], [252, "module-neural_compressor.experimental.common.postprocess"], [253, "module-neural_compressor.experimental.common.torch_utils"], [254, "module-neural_compressor.experimental.component"], [255, "module-neural_compressor.experimental.compression"], [256, "module-neural_compressor.experimental.contrib"], [257, "module-neural_compressor.experimental.contrib.strategy"], [258, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [259, "module-neural_compressor.experimental.contrib.strategy.tpe"], [260, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [261, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [262, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [263, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [264, "module-neural_compressor.experimental.data.dataloaders"], [265, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [266, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [267, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [268, "module-neural_compressor.experimental.data.dataloaders.sampler"], [269, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [270, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [271, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [272, "module-neural_compressor.experimental.data.datasets.dataset"], [273, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [274, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [275, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [276, "module-neural_compressor.experimental.data.datasets"], [277, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [278, "module-neural_compressor.experimental.data.filters.coco_filter"], [279, "module-neural_compressor.experimental.data.filters.filter"], [280, "module-neural_compressor.experimental.data.filters"], [281, "module-neural_compressor.experimental.data"], [282, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [283, "module-neural_compressor.experimental.data.transforms"], [284, "module-neural_compressor.experimental.data.transforms.tokenization"], [285, "module-neural_compressor.experimental.data.transforms.transform"], [286, "module-neural_compressor.experimental.distillation"], [287, "module-neural_compressor.experimental.export"], [288, "module-neural_compressor.experimental.export.qlinear2qdq"], [289, "module-neural_compressor.experimental.export.tf2onnx"], [290, "module-neural_compressor.experimental.export.torch2onnx"], [291, "module-neural_compressor.experimental.graph_optimization"], [292, "module-neural_compressor.experimental"], [293, "module-neural_compressor.experimental.metric.bleu"], [294, "module-neural_compressor.experimental.metric.bleu_util"], [295, "module-neural_compressor.experimental.metric.coco_label_map"], [296, "module-neural_compressor.experimental.metric.coco_tools"], [297, "module-neural_compressor.experimental.metric.evaluate_squad"], [298, "module-neural_compressor.experimental.metric.f1"], [299, "module-neural_compressor.experimental.metric"], [300, "module-neural_compressor.experimental.metric.metric"], [301, "module-neural_compressor.experimental.mixed_precision"], [302, "module-neural_compressor.experimental.model_conversion"], [303, "module-neural_compressor.experimental.nas.basic_nas"], [304, "module-neural_compressor.experimental.nas.dynas"], [305, "module-neural_compressor.experimental.nas"], [306, "module-neural_compressor.experimental.nas.nas"], [307, "module-neural_compressor.experimental.nas.nas_utils"], [308, "module-neural_compressor.experimental.nas.search_algorithms"], [309, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [310, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [311, "module-neural_compressor.experimental.pruner_legacy"], [312, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [313, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [314, "module-neural_compressor.experimental.pruner_legacy.pruner"], [315, "module-neural_compressor.experimental.pruning"], [316, "module-neural_compressor.experimental.pruning_recipes"], [317, "module-neural_compressor.experimental.pruning_recipes.patterns"], [318, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [319, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [320, "module-neural_compressor.experimental.pruning_v2"], [321, "module-neural_compressor.experimental.pytorch_pruner"], [322, "module-neural_compressor.experimental.pytorch_pruner.logger"], [323, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [324, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [325, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [326, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [327, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [328, "module-neural_compressor.experimental.quantization"], [329, "module-neural_compressor.experimental.scheduler"], [330, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [331, "module-neural_compressor.experimental.strategy.basic"], [332, "module-neural_compressor.experimental.strategy.bayesian"], [333, "module-neural_compressor.experimental.strategy.exhaustive"], [334, "module-neural_compressor.experimental.strategy"], [335, "module-neural_compressor.experimental.strategy.mse"], [336, "module-neural_compressor.experimental.strategy.mse_v2"], [337, "module-neural_compressor.experimental.strategy.random"], [338, "module-neural_compressor.experimental.strategy.strategy"], [339, "module-neural_compressor.experimental.strategy.utils.constant"], [340, "module-neural_compressor.experimental.strategy.utils"], [341, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [342, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [343, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [344, "module-neural_compressor.experimental.strategy.utils.utility"], [345, "module-neural_compressor"], [346, "module-neural_compressor.metric.bleu"], [347, "module-neural_compressor.metric.bleu_util"], [348, "module-neural_compressor.metric.coco_label_map"], [349, "module-neural_compressor.metric.coco_tools"], [350, "module-neural_compressor.metric.evaluate_squad"], [351, "module-neural_compressor.metric.f1"], [352, "module-neural_compressor.metric"], [353, "module-neural_compressor.metric.metric"], [354, "module-neural_compressor.mix_precision"], [355, "module-neural_compressor.model.base_model"], [356, "module-neural_compressor.model"], [357, "module-neural_compressor.model.keras_model"], [358, "module-neural_compressor.model.model"], [359, "module-neural_compressor.model.mxnet_model"], [360, "module-neural_compressor.model.nets_factory"], [361, "module-neural_compressor.model.onnx_model"], [362, "module-neural_compressor.model.tensorflow_model"], [363, "module-neural_compressor.model.torch_model"], [364, "module-neural_compressor.objective"], [365, "module-neural_compressor.profiling"], [366, "module-neural_compressor.profiling.parser.factory"], [367, "module-neural_compressor.profiling.parser"], [368, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [369, "module-neural_compressor.profiling.parser.onnx_parser"], [370, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [371, "module-neural_compressor.profiling.parser.parser"], [372, "module-neural_compressor.profiling.parser.result"], [373, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [374, "module-neural_compressor.profiling.parser.tensorflow_parser"], [375, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [376, "module-neural_compressor.profiling.profiler.factory"], [377, "module-neural_compressor.profiling.profiler"], [378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [379, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [380, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [381, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [382, "module-neural_compressor.profiling.profiler.profiler"], [383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [384, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [385, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [386, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [387, "module-neural_compressor.quantization"], [388, "module-neural_compressor.strategy.auto"], [389, "module-neural_compressor.strategy.auto_mixed_precision"], [390, "module-neural_compressor.strategy.basic"], [391, "module-neural_compressor.strategy.bayesian"], [392, "module-neural_compressor.strategy.conservative"], [393, "module-neural_compressor.strategy.exhaustive"], [394, "module-neural_compressor.strategy.hawq_v2"], [395, "module-neural_compressor.strategy"], [396, "module-neural_compressor.strategy.mse"], [397, "module-neural_compressor.strategy.mse_v2"], [398, "module-neural_compressor.strategy.random"], [399, "module-neural_compressor.strategy.strategy"], [400, "module-neural_compressor.strategy.utils.constant"], [401, "module-neural_compressor.strategy.utils"], [402, "module-neural_compressor.strategy.utils.tuning_sampler"], [403, "module-neural_compressor.strategy.utils.tuning_space"], [404, "module-neural_compressor.strategy.utils.tuning_structs"], [405, "module-neural_compressor.strategy.utils.utility"], [406, "module-neural_compressor.template.api_doc_example"], [407, "module-neural_compressor.template"], [408, "module-neural_compressor.training"], [409, "module-neural_compressor.utils.collect_layer_histogram"], [410, "module-neural_compressor.utils.constant"], [411, "module-neural_compressor.utils.create_obj_from_config"], [412, "module-neural_compressor.utils"], [413, "module-neural_compressor.utils.kl_divergence"], [414, "module-neural_compressor.utils.load_huggingface"], [415, "module-neural_compressor.utils.logger"], [416, "module-neural_compressor.utils.neural_insights_utils"], [417, "module-neural_compressor.utils.options"], [418, "module-neural_compressor.utils.pytorch"], [419, "module-neural_compressor.utils.utility"], [420, "module-neural_compressor.utils.weights_details"], [421, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[149, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[149, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[150, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[150, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[151, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[151, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[152, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[152, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[153, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[158, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[158, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[159, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[159, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[160, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[160, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[161, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[161, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[162, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[162, "neural_compressor.adaptor.torch_utils.smooth_quant.update_sq_scale"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[163, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[163, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[164, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[164, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[165, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[165, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[166, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[166, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[167, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[167, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[168, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[168, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[169, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[170, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[170, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[171, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[171, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[172, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[172, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[173, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[173, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[173, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[174, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[174, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[175, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[176, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[176, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[177, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[177, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[177, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[178, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[179, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[180, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[180, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[180, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[180, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[180, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[180, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[180, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[181, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[181, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[181, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[181, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[181, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[181, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[182, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[183, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[183, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[183, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[184, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[184, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[184, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[185, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[185, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[185, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[185, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[185, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[185, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[185, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[186, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[187, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[187, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[188, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[188, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[189, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[189, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[189, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[190, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[190, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[191, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[191, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[191, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[191, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[192, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[192, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[192, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[192, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[193, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[193, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[193, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[193, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[193, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[194, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[194, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[194, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[195, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[195, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[195, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[196, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[196, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[196, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[197, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[197, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[197, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[198, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[198, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[199, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[199, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[200, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[200, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[201, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[201, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[201, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[202, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[202, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[202, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[203, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[203, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[203, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[203, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[203, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[203, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[203, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[204, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[204, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[204, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[204, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[204, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[204, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[204, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[204, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[205, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[205, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[205, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[205, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[205, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[205, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[205, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[206, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[206, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[206, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[206, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[206, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[206, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[206, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[207, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[207, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[208, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[208, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[209, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[209, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[209, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[209, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[210, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[211, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[211, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[212, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[212, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[212, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[212, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[212, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[212, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[212, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[212, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[212, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[212, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[212, "module-neural_compressor.config"]], "neural_compressor.contrib": [[213, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[214, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[215, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[215, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[216, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[216, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[217, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[217, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[218, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[218, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[218, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[219, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[219, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[219, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[220, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[220, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[220, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[220, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[221, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[222, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[222, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[223, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[223, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[223, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[224, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[224, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[225, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[225, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[225, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[225, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[225, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[226, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[226, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[227, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[227, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[228, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[228, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[228, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[228, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[228, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[229, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[229, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[230, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[230, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[231, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[231, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[231, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[232, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[232, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[232, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[232, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[232, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[232, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[232, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[233, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[234, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[234, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[235, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[235, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[235, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[236, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[236, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[237, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[238, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[239, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[239, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[240, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[240, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[241, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[242, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[242, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[243, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[243, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TRANSFORMS"], [244, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[244, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[244, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[245, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[245, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[246, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[246, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[247, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[247, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[248, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[249, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[249, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[250, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[250, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[250, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[251, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[251, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[252, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[252, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[253, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[253, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[253, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[254, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[254, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[255, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[256, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[257, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[258, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[258, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[259, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[259, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[260, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[260, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[261, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[262, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[262, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[262, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[263, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[263, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[263, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[263, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[264, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[265, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[265, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[266, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[267, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[267, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[268, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[268, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[268, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[268, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[268, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[269, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[269, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[270, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[270, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[271, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[271, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[271, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[271, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[271, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[272, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[272, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[273, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[273, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[274, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[274, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[274, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[275, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[275, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[275, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[275, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[275, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[275, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[275, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[276, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[277, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[277, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[278, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[278, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[278, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[279, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[279, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[280, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[281, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[282, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[282, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[283, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[284, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[284, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [285, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[285, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[285, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[286, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[286, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[286, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[286, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[286, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[286, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[287, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[288, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[288, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[288, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[289, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[289, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[289, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[290, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[290, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[290, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[290, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[290, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[290, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[290, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[291, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[291, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[292, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[293, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[293, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[293, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[293, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[293, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[293, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[293, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[293, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[293, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[294, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[294, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[295, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[296, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[296, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[296, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[296, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[296, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[296, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[296, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[296, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[297, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[297, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[297, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[297, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[297, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[298, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[298, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[298, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[298, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[298, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[299, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[300, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[300, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[300, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[300, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[300, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[300, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[300, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[300, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[300, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[300, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[300, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[300, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[300, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[300, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[300, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[300, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[300, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[300, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[300, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[300, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[300, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[300, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[300, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[300, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[300, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[300, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[301, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[301, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[302, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[302, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[303, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[303, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[304, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[304, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[305, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[306, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[306, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[306, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[307, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[307, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[307, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[307, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[308, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[308, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[308, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[308, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[308, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[309, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[309, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[310, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[310, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[311, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[312, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[312, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[313, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[313, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[314, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[314, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[314, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[315, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[315, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[315, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[315, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[315, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[316, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[317, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[318, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[318, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[318, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[318, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[318, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[319, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[319, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[319, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[319, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[319, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[319, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[319, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[320, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[320, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[320, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[320, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[320, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[321, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[322, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[323, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[323, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[324, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[324, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[324, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[324, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[324, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[324, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[324, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[325, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[325, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[326, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[326, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[326, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[327, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[327, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[327, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[327, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[327, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[327, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[327, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[328, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[328, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[329, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[329, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[330, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[330, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[331, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[331, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[332, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[332, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[332, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[332, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[332, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[333, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[333, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[334, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[335, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[335, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[336, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[336, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[337, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[337, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[338, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[338, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[338, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[339, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[340, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[341, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[341, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[342, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[342, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[342, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[342, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[342, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[342, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[342, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[343, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[343, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[344, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[344, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[344, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[344, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[344, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[345, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[346, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[346, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[346, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[346, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[346, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[346, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[346, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[346, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[346, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[347, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[347, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[348, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[349, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[349, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[349, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[349, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[349, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[349, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[349, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[349, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[350, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[350, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[350, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[350, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[350, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[351, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[351, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[351, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[351, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[351, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[352, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[353, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[353, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[353, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[353, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[353, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[353, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[353, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[353, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[353, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[353, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[353, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[353, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[353, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[353, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[353, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[353, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[353, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[353, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[353, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[353, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[353, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[353, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[353, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[353, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[353, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[353, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[354, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[354, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[355, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[355, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[356, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[357, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[357, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[358, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[358, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[358, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[359, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[359, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[360, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[360, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[361, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[361, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[362, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[362, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[363, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[363, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[363, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[363, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[363, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[364, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[364, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[364, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[364, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[364, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[364, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[364, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[364, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[364, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[365, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[366, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[366, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[367, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[368, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[368, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[369, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[370, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[370, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[371, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[371, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[372, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[372, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[373, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[373, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[374, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[375, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[375, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[376, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[376, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[377, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[378, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[379, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[380, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[380, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[381, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[381, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[382, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[382, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[383, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[384, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[385, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[385, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[386, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[386, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[386, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[386, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[387, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[387, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[388, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[388, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[389, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[389, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[390, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[390, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[391, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[391, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[391, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[391, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[391, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[392, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[392, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[393, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[393, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[394, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[394, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[395, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[396, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[396, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[397, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[397, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[398, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[398, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[399, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[399, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[399, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[399, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[400, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[401, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[402, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[402, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[403, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[403, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[403, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[403, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[403, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[403, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[403, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[404, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[404, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[405, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[405, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[406, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[406, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[406, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[406, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[406, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[407, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[408, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[408, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[408, "neural_compressor.training.fit"]], "neural_compressor.training": [[408, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[408, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[409, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[409, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[410, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[411, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[411, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[412, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[413, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[413, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[414, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[414, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[414, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[415, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[415, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[416, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[416, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[416, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[416, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[416, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[417, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[417, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[418, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[418, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[418, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[418, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[419, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[419, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[420, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[420, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[420, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[421, "module-neural_compressor.version"]]}})