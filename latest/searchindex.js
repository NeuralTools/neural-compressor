Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index", "autoapi/neural_compressor/adaptor/torch_utils/awq/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/distillation/optimizers/index", "autoapi/neural_compressor/compression/distillation/utility/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/dsnot/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/index", "autoapi/neural_compressor/compression/pruner/wanda/prune/index", "autoapi/neural_compressor/compression/pruner/wanda/utils/index", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/onnxrt/algorithms/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index", "autoapi/neural_compressor/onnxrt/index", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index", "autoapi/neural_compressor/onnxrt/quantization/autotune/index", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index", "autoapi/neural_compressor/onnxrt/quantization/config/index", "autoapi/neural_compressor/onnxrt/quantization/index", "autoapi/neural_compressor/onnxrt/quantization/quantize/index", "autoapi/neural_compressor/onnxrt/utils/index", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index", "autoapi/neural_compressor/onnxrt/utils/utility/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/dense/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/pool2d/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/quantizer/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index", "autoapi/neural_compressor/torch/algorithms/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index", "autoapi/neural_compressor/torch/algorithms/weight_only/index", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index", "autoapi/neural_compressor/torch/amp/autocast/index", "autoapi/neural_compressor/torch/amp/fp8/functions/index", "autoapi/neural_compressor/torch/amp/fp8/index", "autoapi/neural_compressor/torch/amp/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/modules/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/torch/utils/constants/index", "autoapi/neural_compressor/torch/utils/environ/index", "autoapi/neural_compressor/torch/utils/index", "autoapi/neural_compressor/torch/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/neural_insights/README", "docs/source/neural_insights/docs/source/onnx_accuracy_debug", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode", "docs/source/neural_insights/docs/source/tf_accuracy_debug", "docs/source/neural_insights/gui/README", "docs/source/neural_solution/README", "docs/source/neural_solution/docs/source/README", "docs/source/neural_solution/docs/source/description_api", "docs/source/neural_solution/docs/source/ns_design_doc", "docs/source/neural_solution/docs/source/template/task_request_description", "docs/source/neural_solution/examples/README", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README", "docs/source/neural_solution/examples/hf_models/README", "docs/source/neural_solution/examples/hf_models_grpc/README", "docs/source/neural_solution/frontend/README", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/export/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/autoround/sign_sgd/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/awq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/distillation/optimizers/index.rst", "autoapi/neural_compressor/compression/distillation/utility/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/dsnot/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/prune/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/utils/index.rst", "autoapi/neural_compressor/compression/pruner/wanda/wrapper/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/calibrator/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/smoother/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/onnxrt/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/onnxrt/index.rst", "autoapi/neural_compressor/onnxrt/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/onnxrt/quantization/autotune/index.rst", "autoapi/neural_compressor/onnxrt/quantization/calibrate/index.rst", "autoapi/neural_compressor/onnxrt/quantization/config/index.rst", "autoapi/neural_compressor/onnxrt/quantization/index.rst", "autoapi/neural_compressor/onnxrt/quantization/quantize/index.rst", "autoapi/neural_compressor/onnxrt/utils/index.rst", "autoapi/neural_compressor/onnxrt/utils/onnx_model/index.rst", "autoapi/neural_compressor/onnxrt/utils/utility/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/dense/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/nets_factory/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/fp8_quant/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/habana_fp8/observer/index.rst", "autoapi/neural_compressor/torch/algorithms/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/load/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/modified_pickle/index.rst", "autoapi/neural_compressor/torch/algorithms/layer_wise/utils/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/awq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/gptq/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/modules/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/rtn/index.rst", "autoapi/neural_compressor/torch/algorithms/weight_only/utility/index.rst", "autoapi/neural_compressor/torch/amp/autocast/index.rst", "autoapi/neural_compressor/torch/amp/fp8/functions/index.rst", "autoapi/neural_compressor/torch/amp/fp8/index.rst", "autoapi/neural_compressor/torch/amp/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/modules/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/torch/utils/constants/index.rst", "autoapi/neural_compressor/torch/utils/environ/index.rst", "autoapi/neural_compressor/torch/utils/index.rst", "autoapi/neural_compressor/torch/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/neural_insights/README.md", "docs/source/neural_insights/docs/source/onnx_accuracy_debug.md", "docs/source/neural_insights/docs/source/pytorch_nlp_cli_mode.md", "docs/source/neural_insights/docs/source/tf_accuracy_debug.md", "docs/source/neural_insights/gui/README.md", "docs/source/neural_solution/README.md", "docs/source/neural_solution/docs/source/README.md", "docs/source/neural_solution/docs/source/description_api.md", "docs/source/neural_solution/docs/source/ns_design_doc.md", "docs/source/neural_solution/docs/source/template/task_request_description.md", "docs/source/neural_solution/examples/README.md", "docs/source/neural_solution/examples/custom_models_optimized/tf_example1/README.md", "docs/source/neural_solution/examples/hf_models/README.md", "docs/source/neural_solution/examples/hf_models_grpc/README.md", "docs/source/neural_solution/frontend/README.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.autoround.sign_sgd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.base_tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.common.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.optimizers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.dsnot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.prune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.wanda.wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.calibrate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.onnxrt.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.core</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.smoother.scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.quantization.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.model_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.tensorflow.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.fp8_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.habana_fp8.observer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.layer_wise.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.awq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.rtn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.algorithms.weight_only.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.autocast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8.functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp.fp8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.amp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.algorithm_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.autotune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.modules</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.quantization.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.environ</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.torch.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Step by step example how to dump weights data for PyTorch model with Neural Insights", "Step by step example how to debug accuracy with Neural Insights", "Getting Started with Create React App", "What\u2019s Neural Solution?", "Get started", "Neural Solution API", "Design Doc for Optimization as a Service [WIP]", "Task request description", "Examples List", "An end-to-end example: quantize a custom model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution", "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API", "Client", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (79)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 149, 166, 170, 171, 195, 206, 209, 214, 220, 340, 381, 387, 390, 442, 518, 523, 592, 634, 636, 642, 648], "mask": [0, 195, 202, 204, 207, 209, 213, 214, 244, 287, 313, 342, 366, 636, 651], "adaptor_registri": [1, 560], "cl": [1, 163, 172, 186, 188, 192, 193, 202, 207, 216, 217, 218, 246, 253, 261, 263, 268, 289, 296, 302, 324, 331, 335, 340, 342, 344, 355, 370, 381, 435, 508, 517, 550], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 183, 184, 185, 186, 188, 189, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 394, 395, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 438, 439, 440, 441, 442, 445, 446, 448, 450, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 505, 506, 507, 508, 515, 516, 517, 518, 519, 521, 522, 523, 524, 529, 530, 531, 534, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 559, 594, 597, 610, 612, 614, 615, 617, 637], "The": [1, 3, 11, 14, 16, 34, 54, 74, 113, 119, 121, 140, 148, 149, 150, 153, 162, 164, 170, 172, 177, 178, 179, 185, 186, 188, 192, 193, 195, 196, 200, 202, 204, 205, 207, 208, 209, 214, 215, 216, 217, 218, 219, 220, 225, 226, 228, 229, 232, 233, 234, 244, 245, 246, 247, 248, 252, 253, 261, 263, 266, 268, 271, 275, 276, 277, 287, 288, 289, 290, 291, 295, 296, 302, 303, 308, 310, 311, 312, 314, 315, 317, 319, 320, 321, 323, 324, 326, 327, 329, 330, 331, 332, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 359, 361, 363, 364, 365, 367, 368, 370, 371, 379, 381, 392, 393, 400, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 439, 441, 442, 445, 446, 450, 459, 462, 464, 484, 501, 503, 506, 508, 515, 524, 529, 530, 534, 538, 539, 540, 542, 544, 545, 549, 550, 551, 554, 556, 557, 560, 561, 562, 563, 565, 569, 572, 575, 577, 578, 579, 580, 582, 583, 585, 587, 589, 591, 592, 593, 595, 596, 597, 598, 599, 602, 603, 605, 608, 610, 611, 612, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651], "decor": [1, 16, 34, 67, 68, 70, 148, 172, 178, 188, 192, 193, 202, 207, 216, 218, 261, 268, 302, 317, 324, 331, 335, 340, 342, 344, 355, 358, 370, 381, 400, 435, 477, 478, 480, 501, 508, 524, 538, 550, 556, 557, 560, 648], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 149, 150, 153, 157, 162, 164, 170, 171, 177, 186, 188, 192, 193, 195, 200, 202, 207, 211, 212, 216, 218, 219, 222, 225, 226, 228, 229, 232, 233, 242, 243, 244, 245, 246, 247, 248, 251, 260, 261, 262, 263, 268, 275, 276, 285, 286, 287, 288, 289, 290, 291, 294, 301, 302, 306, 307, 308, 310, 311, 313, 317, 318, 319, 324, 331, 332, 335, 337, 340, 342, 343, 344, 345, 346, 349, 352, 355, 358, 359, 363, 364, 366, 370, 381, 386, 387, 389, 390, 400, 417, 422, 423, 427, 430, 432, 435, 439, 441, 442, 448, 450, 480, 503, 508, 515, 518, 522, 523, 524, 538, 539, 540, 541, 542, 543, 545, 550, 554, 555, 556, 557, 560, 561, 577, 578, 580, 582, 583, 584, 585, 587, 589, 591, 593, 594, 597, 598, 599, 600, 601, 602, 604, 605, 608, 610, 612, 614, 615, 617, 619, 620, 621, 622, 623, 630, 631, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 651], "regist": [1, 16, 34, 160, 162, 172, 178, 186, 188, 192, 193, 195, 197, 202, 203, 207, 210, 216, 217, 218, 219, 246, 253, 261, 263, 268, 289, 296, 302, 317, 324, 331, 335, 340, 342, 344, 355, 358, 370, 381, 400, 435, 441, 460, 508, 515, 516, 538, 547, 557, 560, 580, 585, 596, 597, 618, 634, 645, 648], "all": [1, 13, 16, 34, 44, 45, 63, 97, 156, 162, 163, 170, 171, 172, 174, 177, 178, 185, 188, 193, 197, 202, 210, 220, 228, 229, 234, 235, 242, 246, 253, 261, 262, 268, 271, 277, 285, 289, 296, 302, 307, 310, 313, 315, 317, 324, 331, 335, 336, 340, 346, 355, 358, 363, 366, 368, 370, 372, 381, 435, 441, 460, 473, 503, 506, 508, 515, 517, 518, 519, 542, 550, 554, 555, 559, 560, 561, 562, 579, 580, 585, 589, 593, 597, 600, 608, 611, 612, 615, 616, 617, 618, 619, 622, 623, 625, 626, 630, 631, 632, 635, 636, 637, 639, 641, 642, 645, 647, 648], "subclass": [1, 16, 34, 172, 188, 192, 193, 202, 207, 216, 218, 239, 243, 246, 253, 261, 268, 282, 286, 289, 296, 302, 317, 324, 331, 335, 340, 342, 344, 355, 358, 370, 381, 435, 560], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 150, 153, 155, 156, 157, 162, 163, 167, 168, 170, 171, 172, 177, 178, 179, 185, 186, 188, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 228, 229, 232, 233, 243, 244, 246, 253, 257, 261, 263, 268, 275, 276, 286, 287, 289, 296, 299, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 317, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 337, 340, 341, 342, 343, 344, 345, 349, 355, 359, 361, 363, 364, 366, 367, 368, 370, 371, 375, 379, 381, 386, 387, 389, 390, 393, 400, 417, 422, 423, 427, 435, 439, 441, 442, 445, 448, 459, 462, 477, 478, 480, 496, 501, 506, 508, 515, 517, 518, 519, 522, 523, 524, 534, 538, 539, 542, 545, 546, 547, 549, 550, 556, 561, 579, 580, 583, 585, 592, 596, 597, 611, 617, 618, 619, 620, 625, 630, 631, 636, 639, 640, 642, 644, 645, 647, 648, 650], "framework_specific_info": [1, 3, 11, 14, 45, 47, 450, 560], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 149, 153, 157, 160, 166, 170, 172, 178, 179, 185, 192, 193, 194, 195, 197, 203, 210, 217, 219, 229, 234, 237, 242, 244, 246, 253, 261, 271, 277, 280, 285, 287, 289, 296, 302, 317, 323, 325, 331, 332, 335, 337, 342, 352, 355, 359, 370, 372, 379, 380, 381, 386, 394, 432, 435, 439, 496, 503, 506, 516, 557, 559, 560, 561, 562, 580, 584, 585, 589, 597, 598, 605, 606, 608, 617, 620, 625, 628, 631, 632, 636, 637, 639, 642, 644, 645, 646, 648, 651], "framework": [1, 3, 11, 13, 14, 45, 153, 177, 178, 186, 188, 197, 203, 207, 210, 214, 215, 216, 230, 231, 235, 236, 240, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 258, 261, 263, 264, 268, 273, 274, 278, 279, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 300, 302, 308, 317, 318, 345, 353, 359, 370, 371, 372, 373, 375, 433, 439, 450, 460, 542, 559, 560, 562, 578, 582, 585, 586, 590, 591, 592, 593, 596, 597, 598, 619, 620, 636, 637, 639, 643, 646, 647, 648, 649, 650, 651], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 149, 156, 159, 161, 163, 167, 171, 175, 186, 189, 198, 200, 201, 202, 206, 211, 220, 223, 224, 228, 229, 263, 270, 340, 341, 450, 508, 514, 517, 519, 522, 540, 542, 550, 559, 560, 561, 562, 584, 592, 620, 636, 642, 643, 649], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 155, 157, 158, 159, 168, 178, 187, 194, 197, 221, 228, 229, 270, 309, 311, 341, 351, 362, 364, 383, 384, 386, 387, 389, 395, 415, 420, 431, 459, 462, 513, 514, 531, 561, 562, 563, 578, 585, 597, 600, 620, 636, 639, 648, 649], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 200, 201, 206, 224, 228, 229, 257, 299, 340, 417, 422, 445, 498, 501, 556, 577, 579, 582, 587, 617, 623, 636, 639, 642, 645, 647, 648], "activ": [2, 17, 29, 44, 141, 154, 170, 171, 189, 228, 229, 270, 359, 386, 439, 441, 448, 518, 560, 561, 562, 578, 582, 584, 589, 597, 618, 619, 622, 630, 631, 632, 638, 639, 642, 645, 646, 650], "argmax": [2, 17, 29], "attent": [2, 17, 29, 166, 198, 200, 211, 228, 229, 244, 287, 554, 583, 636], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 175, 228, 229, 395, 468, 472, 476, 481, 482, 483, 556, 561, 562, 597, 636, 638, 639, 648], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 228, 229, 340], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 228, 229, 395], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 44, 53, 59, 65, 73, 94, 109, 128, 137, 206, 228, 229, 340, 386, 387, 389, 390, 395, 460, 463, 469, 475, 483, 589, 620, 642, 648], "maxpool": [2, 17, 29, 129, 138, 589], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 51, 53, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 155, 157, 168, 170, 171, 175, 200, 228, 229, 307, 352, 359, 360, 417, 422, 428, 430, 432, 439, 440, 441, 448, 463, 475, 476, 477, 478, 479, 480, 481, 482, 484, 488, 491, 495, 501, 523, 524, 538, 544, 550, 560, 561, 562, 582, 589, 597, 598, 621, 622, 636, 639, 641, 643, 645, 646, 648, 650], "pad": [2, 17, 29, 44, 71, 72, 244, 261, 287, 302, 390, 481, 482, 580, 647], "pool": [2, 17, 29, 627], "reduc": [2, 17, 29, 228, 229, 560, 578, 584, 597, 598, 617, 618, 636, 637, 639, 640, 641, 642, 645, 648, 650], "resiz": [2, 17, 29, 244, 245, 257, 261, 287, 288, 299, 302, 580, 647], "split": [2, 17, 29, 43, 82, 149, 171, 260, 261, 301, 302, 492, 518, 522, 556, 640, 642, 645, 647], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 170, 171, 177, 228, 229, 232, 233, 275, 276, 308, 345, 384, 385, 386, 387, 390, 392, 393, 423, 447, 459, 462, 518, 523, 534, 544, 560, 562, 580, 591, 592, 636, 639, 642, 648, 649, 650], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 154, 155, 156, 157, 158, 159, 163, 164, 165, 167, 169, 170, 171, 175, 177, 179, 185, 228, 229, 232, 233, 257, 264, 271, 275, 276, 299, 307, 308, 309, 319, 346, 352, 358, 362, 383, 384, 386, 387, 389, 390, 400, 428, 430, 432, 441, 445, 446, 448, 450, 514, 517, 518, 519, 521, 522, 523, 539, 540, 544, 545, 549, 550, 560, 567, 579, 580, 585, 586, 589, 591, 592, 596, 599, 600, 605, 607, 608, 611, 624, 626, 627, 629, 635, 637, 643, 646, 647, 648, 649, 650], "smooth_quant": [2, 17, 161, 170, 174, 228, 229, 362, 639, 645], "weight_onli": [2, 17, 229, 549, 640, 642], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 44, 87, 111, 155, 228, 229, 359, 386, 387, 389, 390, 439, 560, 561, 589, 597, 602, 607, 611, 617, 641, 648, 651], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 156, 170, 177, 200, 220, 232, 233, 234, 243, 246, 247, 248, 249, 261, 275, 276, 277, 286, 289, 290, 291, 292, 302, 310, 318, 349, 363, 371, 395, 418, 423, 427, 442, 460, 497, 501, 503, 519, 531, 539, 555, 556, 560, 562, 579, 583, 596, 597, 598, 600, 605, 610, 612, 614, 615, 617, 619, 620, 634, 636, 637, 639, 641, 642, 645, 646, 647, 648], "int8": [2, 18, 19, 43, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 171, 176, 177, 228, 229, 257, 299, 305, 306, 307, 359, 361, 386, 387, 389, 390, 400, 439, 441, 460, 501, 523, 549, 550, 555, 556, 559, 560, 561, 562, 577, 580, 584, 589, 595, 597, 598, 602, 605, 607, 608, 611, 617, 620, 622, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 175, 228, 229, 240, 283, 305, 306, 307, 371, 378, 384, 386, 387, 389, 390, 392, 393, 399, 400, 417, 548, 555, 559, 560, 561, 563, 579, 582, 586, 587, 589, 590, 592, 598, 599, 602, 607, 608, 620, 637, 638, 642, 643, 645, 648], "qdq": [2, 42, 87, 111, 112, 113, 142, 170, 171, 228, 229, 305, 306, 307, 523, 560, 582, 587, 592, 607, 608, 639, 643, 645], "graph_bas": [2, 87, 111, 497], "quantize_graph": [2, 111], "qat": [2, 111, 112, 168, 229, 319, 379, 506, 584, 585, 592, 597, 639], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111, 499], "quantize_graph_common": [2, 111, 499], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 265, 309, 362, 640, 645], "layer_wise_qu": [2, 158, 229, 640], "modified_pickl": [2, 158, 159, 513, 514], "torch_load": [2, 158, 159], "bf16_convert": [2, 52, 87, 111, 158], "hawq_metr": [2, 158], "model_wrapp": [2, 15, 151, 158, 504], "pattern_detector": [2, 158], "symbolic_trac": [2, 158], "tensorflow": [2, 52, 54, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 186, 188, 219, 228, 229, 243, 244, 245, 246, 249, 251, 253, 261, 268, 286, 287, 288, 289, 292, 294, 296, 302, 306, 307, 308, 311, 313, 317, 318, 319, 345, 353, 364, 366, 370, 371, 379, 416, 417, 421, 422, 423, 433, 550, 555, 557, 559, 560, 561, 578, 579, 582, 583, 584, 586, 589, 590, 592, 593, 597, 598, 599, 607, 608, 619, 622, 636, 637, 638, 644, 645, 648, 650], "kerasadaptor": [3, 450], "kerasqueri": [3, 450], "local_config_fil": [3, 11, 14, 45, 47, 450], "none": [3, 13, 14, 41, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 149, 153, 154, 156, 157, 161, 162, 163, 164, 165, 167, 169, 170, 171, 177, 178, 179, 185, 186, 193, 195, 197, 198, 200, 204, 216, 220, 222, 224, 225, 226, 228, 229, 232, 233, 234, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 257, 261, 262, 263, 264, 271, 275, 276, 277, 279, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 299, 302, 303, 306, 307, 308, 313, 317, 318, 319, 320, 323, 332, 337, 341, 345, 347, 349, 352, 353, 354, 355, 359, 366, 370, 371, 381, 393, 416, 421, 422, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 439, 442, 450, 459, 460, 462, 473, 498, 501, 503, 508, 515, 517, 518, 519, 521, 523, 524, 530, 531, 534, 539, 540, 542, 545, 547, 549, 550, 560, 561, 579, 580, 596, 620, 639, 642, 646, 647, 648], "defin": [3, 11, 14, 45, 46, 86, 153, 157, 192, 193, 200, 202, 207, 208, 209, 214, 215, 216, 217, 218, 228, 229, 232, 233, 275, 276, 320, 321, 323, 324, 325, 332, 337, 340, 341, 342, 344, 371, 394, 423, 496, 539, 549, 554, 557, 560, 561, 579, 580, 583, 584, 589, 592, 596, 597, 618, 635, 636, 639, 642, 644, 645, 646, 648, 650], "queri": [3, 11, 13, 14, 45, 47, 148, 170, 200, 211, 228, 229, 450, 501, 561, 562, 627, 639], "interfac": [3, 11, 14, 45, 46, 86, 113, 225, 308, 332, 337, 345, 346, 496, 542, 592, 597, 608, 626, 639, 643], "each": [3, 11, 14, 45, 46, 141, 148, 157, 162, 170, 171, 220, 228, 229, 242, 246, 249, 257, 261, 285, 289, 292, 299, 302, 311, 313, 314, 315, 352, 364, 366, 367, 368, 432, 448, 501, 515, 523, 550, 555, 560, 561, 562, 580, 582, 583, 584, 589, 597, 602, 608, 611, 617, 625, 627, 634, 636, 640, 642, 644, 646, 647, 648, 649], "adapt": [3, 11, 14, 45, 46, 149, 554, 559, 561, 580, 608, 637], "should": [3, 11, 14, 45, 46, 55, 115, 116, 162, 185, 198, 200, 211, 228, 229, 232, 233, 242, 244, 246, 261, 266, 275, 276, 285, 287, 289, 302, 307, 311, 364, 370, 371, 423, 442, 465, 515, 524, 539, 550, 556, 557, 560, 561, 562, 580, 583, 585, 596, 597, 603, 612, 615, 617, 619, 620, 634, 636, 639, 642, 647, 648, 650], "implement": [3, 11, 14, 45, 46, 110, 143, 147, 153, 154, 162, 232, 233, 239, 242, 243, 244, 246, 275, 276, 282, 285, 286, 287, 289, 310, 363, 371, 381, 423, 430, 498, 515, 518, 539, 562, 579, 580, 596, 597, 608, 618, 636, 639, 642, 643, 646, 648, 650], "inherit": [3, 11, 14, 45, 46, 185, 186, 212, 213, 218, 228, 241, 261, 263, 271, 284, 302, 342, 344, 557, 560, 561, 580], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 153, 171, 177, 178, 188, 220, 224, 228, 229, 244, 245, 246, 247, 251, 253, 268, 287, 288, 289, 290, 294, 296, 326, 327, 329, 330, 331, 370, 423, 503, 522, 524, 547, 554, 557, 560, 561, 578, 579, 582, 583, 589, 591, 595, 596, 597, 598, 599, 600, 604, 605, 607, 611, 617, 619, 625, 634, 636, 638, 642, 648, 650], "backend": [3, 11, 14, 15, 41, 42, 45, 46, 175, 188, 228, 229, 230, 231, 235, 236, 240, 244, 245, 247, 248, 249, 250, 251, 255, 258, 261, 267, 268, 273, 274, 278, 279, 281, 283, 287, 288, 290, 291, 292, 293, 294, 298, 300, 302, 318, 353, 371, 372, 373, 375, 433, 556, 562, 582, 585, 591, 592, 597, 598, 606, 625, 630, 631, 632, 638, 642, 647, 648, 650], "own": [3, 11, 14, 45, 46, 74, 162, 242, 261, 285, 302, 381, 484, 515, 557, 561, 579, 580, 592, 596, 619, 623, 634, 642, 644, 649], "mxnetadaptor": 11, "do": [11, 14, 153, 156, 185, 216, 228, 229, 243, 244, 286, 287, 303, 307, 310, 313, 343, 363, 366, 519, 549, 554, 561, 580, 585, 589, 592, 596, 597, 612, 615, 636, 641, 643, 645, 648], "inspect": [11, 14, 643, 646], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 140, 148, 149, 150, 153, 157, 162, 163, 170, 171, 195, 197, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 229, 261, 302, 305, 307, 340, 342, 352, 379, 390, 432, 445, 480, 501, 506, 508, 515, 517, 523, 524, 545, 549, 550, 556, 562, 579, 580, 582, 636, 639, 643, 646, 647, 648], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 150, 153, 155, 156, 157, 162, 170, 171, 172, 177, 188, 192, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 228, 229, 232, 233, 243, 262, 268, 275, 276, 286, 305, 307, 312, 313, 314, 315, 317, 320, 323, 324, 325, 332, 335, 337, 340, 341, 342, 343, 344, 349, 352, 358, 361, 365, 366, 367, 368, 370, 371, 379, 386, 387, 389, 393, 395, 423, 438, 441, 442, 460, 501, 506, 508, 515, 518, 519, 522, 523, 529, 530, 539, 540, 542, 549, 550, 556, 561, 587, 596, 636, 638, 639, 645, 646, 648], "configur": [11, 13, 14, 45, 118, 149, 155, 170, 171, 177, 178, 220, 225, 228, 229, 232, 233, 235, 246, 249, 262, 267, 275, 276, 289, 292, 303, 307, 308, 319, 320, 321, 323, 332, 337, 341, 345, 346, 352, 370, 371, 381, 423, 432, 441, 459, 462, 522, 534, 539, 541, 542, 548, 549, 556, 557, 560, 561, 580, 582, 597, 604, 618, 625, 630, 631, 632, 634, 636, 639, 642, 643, 645, 647, 648, 651], "mxnetqueri": 11, "mxnet": [12, 13, 16, 229, 239, 243, 246, 249, 253, 261, 282, 286, 289, 292, 296, 302, 308, 317, 345, 370, 371, 376, 423, 555, 559, 560, 561, 578, 579, 586, 589, 592, 593, 597, 598, 599, 638, 648, 650], "init": [12, 17, 42, 174, 187, 197, 199, 221, 580, 596, 648], "optyp": [13, 228, 229, 305, 561], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 155, 156, 157, 162, 170, 171, 172, 186, 188, 192, 193, 196, 200, 201, 202, 207, 216, 217, 218, 220, 223, 226, 228, 229, 242, 244, 246, 253, 261, 263, 268, 285, 287, 289, 296, 302, 307, 310, 311, 313, 317, 324, 331, 335, 340, 342, 344, 349, 355, 359, 361, 363, 364, 366, 370, 379, 381, 386, 387, 389, 390, 400, 427, 428, 435, 439, 441, 442, 445, 459, 462, 484, 501, 506, 508, 515, 518, 519, 522, 523, 524, 538, 549, 550, 560, 561, 580, 582, 585, 587, 589, 592, 597, 598, 618, 620, 625, 626, 630, 631, 639, 640, 642, 644, 647, 648, 649, 650], "isiter": 13, "obj": [13, 105, 197, 220, 243, 286, 303, 308, 319, 320, 321, 323, 332, 337, 341, 345, 371, 381, 423, 539, 542, 550], "bool": [13, 42, 43, 44, 141, 148, 149, 150, 153, 156, 162, 168, 170, 171, 184, 196, 202, 228, 229, 244, 246, 257, 261, 287, 289, 299, 302, 307, 311, 317, 340, 358, 364, 370, 386, 387, 395, 400, 438, 442, 448, 460, 501, 515, 518, 519, 522, 523, 524, 531, 534, 545, 549, 550, 579, 580, 596, 628, 638, 647], "check": [13, 44, 67, 68, 105, 148, 149, 170, 171, 220, 235, 246, 289, 305, 341, 477, 478, 501, 508, 518, 549, 550, 559, 582, 585, 593, 601, 603, 605, 612, 615, 616, 620, 623, 626, 627, 643], "whether": [13, 43, 44, 105, 116, 148, 149, 150, 153, 156, 162, 170, 171, 202, 228, 229, 242, 244, 257, 261, 285, 287, 299, 302, 311, 313, 317, 340, 364, 366, 370, 386, 387, 389, 400, 501, 508, 515, 518, 519, 522, 523, 524, 542, 545, 549, 550, 560, 580, 596, 639, 642, 645, 647], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 148, 149, 153, 155, 157, 160, 162, 168, 170, 177, 185, 195, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 225, 226, 228, 229, 232, 233, 234, 244, 245, 246, 261, 262, 264, 275, 276, 277, 287, 288, 289, 302, 303, 308, 313, 321, 323, 326, 327, 329, 330, 331, 332, 337, 340, 341, 342, 343, 344, 345, 349, 362, 366, 370, 371, 379, 380, 417, 422, 423, 427, 441, 484, 496, 501, 503, 506, 508, 515, 516, 523, 538, 539, 542, 549, 550, 556, 557, 561, 567, 577, 579, 580, 588, 596, 597, 599, 635, 636, 638, 639, 647, 648, 649, 651], "i": [13, 43, 44, 45, 48, 49, 51, 54, 55, 60, 64, 70, 82, 85, 105, 132, 143, 148, 149, 150, 153, 156, 157, 160, 162, 164, 168, 170, 171, 176, 177, 179, 185, 188, 189, 195, 196, 200, 201, 207, 212, 213, 214, 215, 216, 217, 219, 220, 228, 229, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 251, 253, 257, 261, 262, 264, 268, 270, 271, 275, 276, 277, 285, 286, 287, 288, 289, 290, 291, 294, 296, 299, 302, 310, 313, 315, 317, 319, 324, 332, 337, 341, 342, 346, 353, 363, 366, 368, 370, 371, 381, 390, 393, 400, 406, 407, 411, 423, 428, 433, 441, 442, 464, 465, 470, 474, 480, 492, 495, 501, 503, 508, 515, 516, 518, 519, 522, 523, 524, 539, 545, 549, 550, 554, 555, 556, 557, 560, 561, 562, 563, 565, 569, 572, 575, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 608, 610, 611, 612, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651], "iter": [13, 15, 105, 140, 148, 149, 153, 170, 171, 177, 201, 207, 214, 218, 228, 229, 232, 233, 237, 242, 246, 247, 264, 275, 276, 280, 285, 289, 290, 342, 344, 371, 383, 423, 445, 459, 462, 501, 503, 518, 523, 539, 542, 556, 557, 560, 577, 579, 580, 597, 636, 638, 639, 645, 646, 648, 650], "return": [13, 16, 44, 45, 54, 67, 68, 70, 74, 105, 116, 148, 149, 153, 155, 156, 157, 162, 168, 170, 171, 172, 177, 186, 188, 192, 193, 196, 197, 200, 202, 203, 207, 210, 216, 217, 218, 220, 223, 226, 232, 233, 246, 253, 257, 261, 262, 263, 268, 275, 276, 289, 296, 299, 302, 307, 310, 311, 313, 314, 315, 317, 323, 324, 331, 335, 340, 341, 342, 344, 349, 355, 359, 361, 363, 364, 366, 367, 368, 370, 371, 375, 379, 381, 386, 387, 389, 390, 395, 400, 417, 422, 423, 427, 435, 439, 441, 442, 459, 460, 462, 464, 477, 478, 480, 484, 501, 506, 508, 515, 518, 519, 522, 523, 531, 534, 538, 539, 542, 547, 549, 550, 556, 557, 561, 562, 579, 580, 585, 596, 599, 630, 631, 632, 634, 636, 639, 642, 645, 646, 648], "true": [13, 43, 44, 85, 113, 146, 148, 149, 150, 156, 162, 171, 177, 192, 196, 228, 229, 242, 244, 246, 247, 260, 261, 262, 285, 287, 289, 290, 301, 302, 307, 311, 317, 335, 358, 364, 370, 381, 386, 387, 389, 395, 423, 438, 442, 460, 495, 501, 503, 515, 518, 519, 522, 523, 524, 531, 534, 542, 545, 549, 550, 561, 579, 580, 582, 585, 589, 596, 597, 600, 603, 604, 619, 620, 621, 622, 628, 630, 638, 639, 640, 642, 645, 646, 647, 648, 650], "els": [13, 148, 153, 171, 229, 242, 285, 381, 501, 523, 547, 605, 642, 646], "fals": [13, 14, 15, 41, 42, 43, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 149, 150, 153, 154, 156, 161, 162, 168, 170, 171, 177, 186, 189, 222, 228, 229, 234, 236, 239, 240, 243, 244, 246, 257, 261, 262, 263, 264, 270, 277, 279, 282, 283, 286, 287, 289, 299, 302, 313, 317, 366, 370, 381, 387, 395, 400, 423, 442, 460, 481, 482, 501, 503, 515, 518, 519, 522, 523, 531, 542, 545, 549, 550, 560, 561, 579, 580, 589, 596, 597, 610, 614, 620, 628, 631, 632, 638, 639, 642, 645, 646, 647, 648, 650], "boolean": [13, 149], "ensure_list": 13, "x": [13, 55, 74, 149, 156, 201, 228, 229, 243, 261, 286, 302, 349, 427, 442, 465, 484, 519, 578, 582, 585, 598, 599, 625, 626, 630, 631, 633, 639, 640, 645, 646, 647, 649], "ensur": [13, 261, 302, 349, 427, 585, 639, 647], "list": [13, 42, 43, 44, 54, 105, 140, 148, 149, 153, 155, 156, 157, 166, 170, 177, 178, 193, 200, 201, 206, 211, 216, 220, 223, 228, 229, 232, 233, 237, 244, 257, 261, 262, 275, 276, 280, 287, 299, 302, 306, 307, 310, 311, 313, 314, 315, 317, 324, 332, 337, 340, 343, 358, 363, 364, 366, 367, 368, 370, 371, 379, 383, 384, 386, 387, 389, 390, 393, 395, 400, 406, 407, 411, 423, 438, 442, 445, 460, 464, 501, 506, 519, 523, 530, 531, 539, 540, 550, 556, 559, 560, 580, 587, 589, 593, 595, 597, 600, 605, 607, 610, 611, 614, 622, 625, 627, 628, 634, 636, 638, 639, 641, 645, 646, 648], "input": [13, 15, 42, 43, 44, 45, 54, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 150, 153, 155, 165, 167, 168, 169, 170, 171, 175, 200, 201, 220, 228, 229, 232, 233, 244, 245, 246, 248, 257, 260, 261, 266, 275, 276, 287, 288, 289, 291, 299, 301, 302, 305, 306, 307, 370, 371, 375, 379, 384, 390, 393, 423, 448, 464, 470, 474, 477, 478, 480, 481, 482, 484, 492, 493, 495, 496, 498, 501, 503, 506, 521, 522, 523, 524, 538, 539, 545, 547, 549, 550, 557, 560, 561, 577, 578, 579, 580, 582, 583, 584, 585, 587, 589, 591, 596, 597, 598, 599, 600, 605, 636, 638, 639, 642, 645, 646, 647, 650], "check_mx_vers": 13, "version": [13, 54, 104, 149, 153, 165, 170, 200, 229, 306, 307, 362, 464, 521, 554, 556, 560, 589, 593, 594, 597, 610, 612, 614, 615, 637, 645, 648, 649], "str": [13, 42, 43, 44, 140, 149, 150, 155, 157, 162, 163, 166, 167, 168, 170, 171, 172, 178, 184, 186, 188, 197, 200, 223, 228, 229, 244, 245, 246, 253, 257, 261, 263, 267, 268, 287, 288, 289, 296, 299, 302, 306, 307, 310, 311, 313, 315, 317, 324, 335, 358, 361, 363, 364, 366, 368, 370, 383, 384, 386, 387, 389, 390, 392, 393, 395, 400, 408, 416, 418, 421, 422, 438, 441, 442, 445, 460, 462, 508, 515, 517, 522, 523, 524, 529, 531, 538, 542, 545, 547, 550, 551, 579, 580, 596, 628, 638, 646, 647], "mx": 13, "__version__": [13, 160, 516], "combine_cap": 13, "current": [13, 70, 104, 167, 171, 195, 197, 200, 203, 207, 210, 228, 229, 319, 326, 327, 329, 330, 331, 340, 342, 349, 353, 427, 433, 480, 523, 550, 556, 557, 560, 562, 578, 585, 589, 597, 600, 604, 617, 625, 634, 636, 639, 642, 645, 648], "new": [13, 16, 44, 148, 149, 167, 177, 234, 246, 261, 262, 277, 289, 302, 341, 381, 390, 501, 503, 523, 524, 555, 559, 561, 585, 597, 598, 611, 617, 618, 619, 620, 626, 627, 630, 631, 636, 637, 639, 642, 643, 644, 647, 649, 650], "combin": [13, 170, 179, 228, 229, 232, 233, 257, 271, 275, 276, 299, 371, 423, 508, 539, 550, 556, 560, 592, 597, 635, 637, 639, 641, 642, 647, 648], "capabl": [13, 47, 359, 439, 561, 562, 577, 589, 597, 598, 608, 619, 624, 636, 638, 639, 648, 650], "contain": [13, 67, 68, 70, 74, 139, 148, 149, 157, 162, 170, 171, 177, 185, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 220, 228, 229, 232, 233, 244, 245, 246, 275, 276, 287, 288, 289, 303, 307, 308, 313, 314, 315, 319, 332, 335, 337, 340, 341, 342, 343, 344, 345, 366, 367, 368, 371, 423, 477, 478, 480, 484, 500, 501, 515, 518, 539, 542, 549, 578, 580, 583, 592, 596, 618, 625, 630, 631, 632, 636, 642, 646, 648, 649], "make_nc_model": 13, "target": [13, 42, 43, 102, 149, 150, 153, 156, 170, 200, 218, 220, 229, 341, 344, 349, 427, 519, 545, 580, 585, 597, 636, 646, 647, 648, 650], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 53, 54, 55, 56, 57, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 142, 150, 155, 170, 200, 228, 229, 244, 257, 260, 261, 287, 299, 301, 302, 306, 313, 319, 341, 359, 366, 439, 442, 445, 450, 463, 464, 465, 466, 467, 476, 484, 496, 556, 561, 597, 598, 602, 639, 641, 642, 645, 647, 648], "symbol": [13, 43, 155, 168, 170, 310, 363, 371, 423, 556, 599], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 179, 185, 192, 197, 198, 200, 207, 208, 209, 212, 214, 215, 216, 218, 220, 222, 228, 229, 232, 233, 240, 243, 244, 246, 261, 262, 265, 266, 275, 276, 283, 286, 287, 289, 302, 303, 305, 306, 307, 308, 309, 317, 318, 319, 320, 323, 326, 327, 329, 330, 331, 332, 337, 341, 342, 343, 344, 345, 346, 347, 349, 352, 353, 354, 355, 362, 370, 371, 381, 383, 384, 386, 387, 389, 390, 392, 393, 399, 400, 416, 421, 422, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 441, 442, 445, 448, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 501, 506, 508, 515, 517, 518, 519, 522, 523, 524, 529, 530, 534, 538, 539, 545, 547, 549, 550, 552, 555, 556, 557, 559, 560, 562, 567, 577, 578, 579, 580, 582, 583, 584, 585, 586, 591, 592, 594, 596, 598, 600, 605, 607, 608, 611, 617, 619, 624, 626, 627, 628, 629, 634, 635, 637, 639, 643, 644, 646, 647, 648, 649, 650], "an": [13, 67, 68, 70, 105, 141, 143, 148, 149, 153, 157, 160, 162, 170, 171, 176, 189, 207, 228, 229, 237, 242, 246, 261, 265, 270, 280, 285, 289, 302, 309, 310, 314, 315, 323, 324, 346, 362, 363, 367, 368, 371, 417, 422, 423, 442, 448, 477, 478, 480, 501, 515, 516, 523, 524, 539, 550, 552, 554, 556, 557, 559, 560, 562, 578, 579, 580, 581, 582, 587, 595, 596, 597, 598, 600, 604, 605, 608, 617, 620, 621, 622, 625, 628, 634, 636, 637, 639, 642, 644, 645, 646, 647, 648], "neural": [13, 157, 177, 185, 188, 202, 203, 204, 205, 216, 228, 229, 256, 257, 258, 261, 262, 265, 268, 271, 299, 300, 302, 304, 309, 316, 317, 319, 332, 337, 340, 343, 345, 346, 351, 357, 362, 369, 370, 371, 375, 401, 423, 430, 431, 437, 505, 547, 552, 555, 560, 561, 562, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 598, 599, 601, 602, 605, 607, 608, 610, 612, 614, 615, 616, 628, 634, 635, 637, 639, 642, 643, 645, 646, 647, 648, 650, 651], "compressor": [13, 177, 185, 188, 204, 205, 216, 228, 229, 256, 257, 258, 261, 262, 265, 268, 271, 299, 300, 302, 304, 309, 316, 317, 319, 340, 343, 345, 346, 351, 357, 362, 369, 370, 371, 375, 401, 423, 431, 437, 505, 547, 552, 555, 557, 560, 561, 562, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 598, 599, 600, 601, 605, 607, 608, 610, 612, 614, 615, 616, 619, 620, 621, 622, 624, 625, 632, 634, 635, 636, 637, 639, 642, 643, 645, 646, 647, 648, 649, 650, 651], "tupl": [13, 105, 148, 170, 193, 229, 232, 233, 257, 261, 275, 276, 299, 302, 307, 358, 371, 390, 423, 438, 501, 529, 539, 549, 561, 580, 596, 597, 639, 647], "symnet": 13, "arg": [13, 54, 105, 149, 170, 244, 245, 246, 287, 288, 289, 340, 349, 392, 427, 442, 464, 519, 523, 529, 545, 546, 580, 585, 597, 606, 636, 639, 642, 645, 646, 647], "aux": 13, "data": [13, 42, 43, 44, 56, 105, 140, 148, 149, 157, 162, 167, 170, 171, 175, 200, 228, 229, 232, 233, 262, 264, 275, 276, 307, 309, 349, 359, 361, 362, 371, 384, 390, 394, 400, 416, 421, 423, 427, 439, 441, 445, 459, 462, 466, 501, 504, 508, 515, 523, 539, 542, 547, 550, 559, 560, 578, 579, 580, 585, 589, 590, 593, 596, 597, 598, 619, 620, 622, 625, 630, 631, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649], "descript": [13, 132, 196, 442, 556, 561, 562, 579, 625, 629, 645], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 168, 170, 175, 468, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 556, 645, 646], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 43, 44, 45, 67, 68, 70, 104, 105, 148, 149, 156, 163, 167, 170, 177, 188, 189, 193, 195, 197, 198, 200, 203, 210, 217, 218, 219, 220, 226, 229, 237, 261, 262, 268, 270, 280, 302, 307, 340, 342, 344, 352, 359, 361, 370, 379, 387, 394, 400, 423, 432, 439, 441, 460, 477, 478, 480, 501, 506, 508, 517, 519, 523, 538, 542, 545, 547, 550, 561, 578, 588, 592, 593, 595, 597, 603, 620, 622, 630, 631, 637, 642, 645, 648, 649, 652], "name": [13, 43, 45, 54, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 150, 155, 156, 157, 162, 163, 167, 168, 170, 172, 177, 178, 179, 189, 192, 193, 195, 200, 202, 207, 210, 211, 216, 217, 218, 219, 220, 223, 226, 228, 229, 244, 245, 246, 249, 253, 259, 261, 262, 266, 269, 270, 287, 288, 289, 292, 296, 302, 305, 306, 307, 312, 317, 335, 340, 342, 344, 359, 361, 365, 370, 375, 379, 381, 393, 400, 423, 439, 441, 445, 464, 477, 478, 480, 498, 501, 506, 508, 515, 517, 519, 523, 538, 540, 542, 547, 550, 555, 556, 562, 580, 582, 585, 587, 589, 594, 596, 597, 599, 603, 610, 614, 618, 619, 625, 636, 639, 643, 644, 646, 648, 650, 651], "context": [13, 524, 550, 638, 642], "prepare_model_data": 13, "nc_model": [13, 332, 337], "data_x": 13, "prepar": [13, 44, 170, 390, 556, 559, 580, 585, 590, 619, 630, 631, 632, 636, 639], "dataload": [13, 15, 42, 44, 140, 141, 149, 154, 156, 157, 167, 170, 171, 177, 197, 198, 200, 216, 220, 222, 232, 233, 244, 255, 265, 275, 276, 287, 298, 303, 309, 332, 337, 346, 362, 383, 384, 386, 387, 393, 416, 421, 423, 445, 448, 503, 518, 519, 523, 539, 542, 556, 559, 560, 561, 582, 583, 584, 585, 590, 591, 597, 598, 619, 620, 635, 636, 639, 640, 641, 642, 645, 646, 647, 649, 650], "need": [13, 42, 105, 109, 150, 167, 171, 177, 200, 216, 229, 232, 233, 234, 242, 243, 246, 253, 261, 264, 266, 267, 275, 276, 277, 285, 286, 289, 296, 302, 307, 346, 352, 370, 371, 381, 384, 423, 432, 503, 518, 539, 549, 550, 556, 560, 579, 580, 582, 583, 585, 592, 597, 600, 602, 603, 606, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 624, 628, 630, 636, 638, 639, 640, 641, 642, 643, 645, 647, 648, 650], "run": [13, 140, 148, 162, 171, 177, 207, 220, 228, 229, 232, 233, 243, 260, 262, 275, 276, 286, 301, 341, 342, 349, 371, 423, 427, 445, 501, 515, 519, 524, 539, 560, 577, 585, 588, 589, 597, 600, 602, 604, 605, 606, 608, 610, 611, 612, 614, 615, 617, 625, 626, 627, 628, 630, 631, 632, 637, 639, 642, 643, 644, 646, 648, 650], "loader": [13, 140, 232, 233, 275, 276, 371, 423, 445, 459, 462, 539, 545, 579, 639], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 160, 228, 229, 234, 244, 246, 264, 277, 287, 289, 313, 323, 324, 359, 366, 393, 417, 422, 439, 441, 442, 503, 516, 542, 554, 557, 560, 580, 599, 610, 612, 614, 615, 618, 630, 631, 632, 636, 639, 644, 646, 648, 649], "exampl": [13, 44, 149, 153, 157, 162, 170, 171, 177, 178, 179, 193, 200, 201, 216, 228, 229, 244, 245, 246, 257, 261, 287, 288, 289, 299, 302, 313, 314, 315, 317, 343, 366, 367, 368, 370, 371, 381, 386, 387, 389, 400, 423, 441, 442, 508, 515, 518, 522, 523, 538, 539, 549, 550, 554, 559, 561, 562, 567, 591, 592, 600, 603, 604, 605, 608, 625, 628, 641, 643, 647, 648, 649, 652], "prepare_dataload": 13, "io": [13, 162, 515, 623], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 261, 302, 477, 478, 480, 540, 588, 647], "devic": [13, 45, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 149, 150, 156, 161, 162, 164, 170, 171, 197, 200, 201, 216, 220, 222, 228, 229, 489, 515, 519, 524, 545, 561, 579, 583, 597, 598, 600, 603, 608, 617, 636, 638, 640, 642], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 44, 50, 54, 55, 56, 57, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 200, 305, 307, 379, 390, 400, 422, 445, 464, 465, 466, 467, 470, 472, 474, 477, 478, 480, 484, 487, 490, 492, 493, 494, 498, 501, 506, 560, 582, 585, 620, 624, 627, 630, 631, 632, 640, 646, 648, 651], "given": [13, 16, 43, 67, 68, 70, 104, 105, 116, 148, 149, 163, 170, 223, 261, 302, 313, 366, 423, 477, 478, 480, 501, 517, 523, 538, 557, 562, 636, 645, 647], "map": [13, 43, 105, 148, 162, 170, 229, 261, 302, 305, 307, 308, 312, 314, 315, 317, 332, 337, 342, 345, 365, 367, 368, 370, 501, 515, 580, 585, 596, 597, 610, 614, 622, 636, 639, 642], "quantize_sym_model": 13, "qconfig": [13, 150, 170, 549, 642, 646], "accord": [13, 122, 170, 177, 228, 229, 244, 245, 246, 261, 287, 288, 289, 302, 352, 430, 432, 542, 557, 560, 580, 585, 620, 625, 630, 631, 632, 636, 641, 645, 647, 648], "run_forward": 13, "b_filter": 13, "collector": [13, 157, 540], "pre_batch": 13, "post_batch": 13, "forward": [13, 149, 170, 220, 524, 561, 597, 619, 636, 638, 639, 642, 645, 646], "propag": [13, 100], "filter": [13, 244, 245, 246, 247, 248, 249, 251, 255, 287, 288, 289, 290, 291, 292, 294, 298, 309, 362, 503, 508, 550, 562, 580, 592, 636, 646], "which": [13, 42, 56, 83, 110, 149, 153, 156, 157, 162, 167, 171, 178, 179, 195, 200, 201, 203, 207, 208, 209, 211, 214, 215, 216, 218, 220, 228, 229, 244, 245, 246, 257, 262, 287, 288, 289, 299, 310, 315, 324, 326, 327, 329, 330, 331, 335, 340, 341, 342, 344, 349, 363, 368, 370, 375, 381, 384, 387, 400, 423, 427, 466, 493, 498, 508, 515, 518, 519, 538, 550, 554, 556, 557, 560, 561, 562, 578, 579, 580, 582, 583, 585, 588, 589, 592, 596, 597, 598, 599, 601, 605, 608, 611, 617, 618, 619, 622, 625, 630, 631, 632, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650], "batch": [13, 149, 170, 234, 236, 237, 242, 243, 264, 277, 279, 280, 285, 286, 503, 523, 539, 579, 583, 584, 597, 635, 636, 639, 645, 647, 648, 651], "infer": [13, 43, 105, 140, 150, 170, 171, 200, 308, 345, 379, 381, 423, 445, 506, 518, 523, 524, 539, 560, 561, 578, 583, 584, 597, 598, 617, 634, 636, 637, 639, 642, 645, 646, 648], "collect": [13, 16, 43, 149, 170, 179, 259, 261, 264, 266, 267, 269, 302, 315, 317, 368, 370, 508, 540, 550, 561, 639, 646, 648], "inform": [13, 149, 157, 195, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 229, 232, 233, 264, 266, 267, 275, 276, 340, 342, 343, 344, 346, 370, 383, 550, 554, 555, 558, 559, 560, 561, 562, 563, 565, 569, 572, 575, 578, 583, 589, 597, 599, 612, 615, 618, 619, 622, 623, 625, 626, 630, 631, 636, 641, 642, 643, 645, 646, 650, 651, 652], "dure": [13, 160, 162, 202, 206, 218, 228, 229, 340, 344, 381, 393, 515, 516, 550, 561, 582, 597, 599, 624, 634, 635, 636, 639, 645, 646, 650], "call": [13, 42, 162, 167, 172, 200, 208, 209, 214, 313, 342, 366, 384, 515, 524, 556, 557, 560, 579, 591, 606, 608, 618, 636, 639, 645, 646, 647], "prior": [13, 88, 648], "after": [13, 78, 148, 150, 170, 198, 202, 207, 209, 214, 228, 229, 244, 257, 261, 264, 287, 299, 302, 342, 428, 442, 488, 501, 545, 550, 557, 561, 580, 582, 583, 584, 587, 592, 596, 597, 610, 611, 614, 618, 622, 634, 635, 636, 639, 641, 642, 644, 645, 646, 647, 648], "count": [13, 557, 580, 642], "int": [13, 16, 42, 43, 44, 105, 140, 148, 149, 150, 154, 166, 170, 171, 184, 198, 228, 229, 243, 244, 245, 257, 261, 286, 287, 288, 299, 302, 306, 307, 311, 313, 317, 324, 364, 366, 370, 383, 386, 387, 389, 390, 395, 400, 408, 417, 422, 441, 442, 445, 446, 450, 459, 462, 501, 518, 522, 523, 531, 545, 550, 579, 580, 596, 597, 628, 638, 642, 647], "make_symbol_block": 13, "gluon": [13, 371, 423, 599], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 148, 155, 170, 501, 560, 562, 648], "quantizable_nod": 13, "strategi": [13, 170, 214, 228, 229, 230, 246, 273, 289, 309, 362, 559, 560, 561, 562, 567, 578, 579, 585, 592, 597, 605, 617, 622, 637, 638, 639, 641, 642, 643, 649, 650], "config": [13, 44, 115, 116, 118, 122, 170, 177, 178, 179, 184, 195, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 232, 233, 244, 275, 276, 287, 326, 327, 329, 330, 331, 332, 337, 340, 341, 342, 343, 344, 359, 360, 362, 371, 386, 387, 389, 392, 393, 417, 422, 439, 440, 441, 442, 446, 450, 459, 539, 542, 549, 550, 557, 559, 561, 562, 567, 577, 579, 582, 583, 584, 585, 587, 590, 592, 596, 597, 598, 599, 619, 620, 635, 636, 638, 639, 641, 642, 644, 646, 648], "tune": [13, 45, 149, 177, 178, 179, 228, 229, 232, 233, 244, 246, 275, 276, 287, 289, 308, 345, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 371, 381, 393, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 438, 439, 440, 441, 530, 539, 550, 560, 561, 578, 579, 580, 582, 585, 592, 594, 597, 598, 617, 621, 624, 626, 627, 634, 636, 637, 641, 643, 644, 646, 650], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 149, 150, 153, 162, 163, 167, 170, 171, 177, 179, 185, 186, 193, 195, 197, 203, 204, 205, 206, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 229, 232, 233, 234, 237, 241, 244, 245, 246, 247, 248, 249, 251, 256, 257, 263, 264, 267, 275, 276, 277, 280, 284, 287, 288, 289, 290, 291, 292, 294, 299, 303, 305, 306, 307, 310, 313, 314, 315, 319, 324, 340, 341, 342, 344, 359, 361, 363, 366, 367, 368, 371, 379, 381, 386, 400, 423, 439, 441, 442, 450, 471, 477, 478, 480, 501, 503, 506, 508, 515, 517, 522, 523, 539, 542, 545, 549, 550, 554, 555, 556, 557, 560, 562, 577, 579, 580, 582, 583, 584, 585, 586, 587, 588, 590, 592, 595, 596, 598, 599, 600, 604, 605, 606, 608, 618, 620, 622, 623, 627, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 176, 228, 229, 234, 236, 237, 239, 240, 242, 243, 264, 277, 279, 280, 282, 283, 285, 286, 386, 503, 544, 559, 561, 579, 583, 593, 612, 615, 619, 622, 630, 637, 639, 642, 643, 645, 649, 651], "depend": [13, 232, 233, 262, 275, 276, 371, 423, 539, 555, 588, 589, 623, 638, 639, 648], "algorithm": [13, 44, 153, 156, 170, 178, 192, 225, 229, 310, 317, 325, 362, 363, 370, 393, 400, 508, 538, 542, 544, 557, 560, 561, 562, 583, 584, 589, 592, 595, 606, 611, 636, 639, 646, 650], "set": [13, 43, 51, 96, 105, 115, 148, 149, 162, 167, 170, 177, 179, 184, 188, 220, 226, 228, 229, 232, 233, 234, 244, 246, 249, 261, 262, 267, 268, 275, 276, 277, 287, 289, 292, 302, 313, 319, 332, 337, 341, 346, 366, 370, 371, 379, 422, 423, 442, 450, 501, 503, 506, 515, 523, 538, 539, 547, 550, 554, 557, 561, 577, 579, 580, 583, 585, 587, 589, 591, 592, 593, 596, 597, 598, 600, 602, 604, 618, 619, 620, 621, 622, 623, 627, 630, 636, 638, 639, 642, 644, 645, 648, 650], "kl": [13, 16, 228, 229, 540, 544, 561, 562, 578, 589, 597, 648, 650], "minmax": [13, 16, 561, 562, 578, 589, 639, 650], "calib_model": 13, "qsym_model": 13, "calib_data": [13, 161], "calibdata": 13, "threshold": [13, 173, 196, 540, 544, 596], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 44, 97, 104, 149, 167, 175, 178, 186, 188, 197, 203, 210, 214, 215, 228, 229, 232, 233, 243, 244, 246, 253, 257, 261, 263, 264, 265, 268, 275, 276, 286, 287, 289, 296, 299, 302, 309, 317, 319, 324, 340, 342, 346, 353, 359, 362, 370, 371, 375, 381, 384, 386, 387, 389, 390, 393, 400, 423, 433, 439, 442, 539, 542, 544, 545, 550, 552, 559, 561, 595, 597, 600, 605, 608, 611, 617, 624, 625, 628, 637, 641, 644, 648, 649], "amp": [13, 149, 600, 607, 626, 642], "wrap": [13, 105, 116, 149, 186, 224, 263, 313, 366, 524, 556, 585, 612, 615], "dataiterload": 13, "data_it": [13, 200], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 540], "8001": [13, 540, 625, 630, 631, 632], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 44, 115, 172, 173, 175, 176, 320, 323, 374, 376, 378, 379, 380, 390, 399, 506, 560, 561, 562, 593, 599, 610, 612, 614, 615, 618, 637, 648], "up": [13, 100, 211, 261, 302, 341, 585, 586, 589, 592, 608, 612, 615, 617, 636, 637, 638, 639, 644, 647, 648, 650], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 560], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 149, 162, 229, 234, 277, 307, 359, 439, 503, 515, 560, 579, 583, 587, 592, 597, 600, 605, 606, 607, 608, 611, 617, 637, 648, 651], "static": [14, 41, 42, 47, 167, 175, 200, 229, 307, 359, 384, 423, 439, 450, 459, 460, 534, 560, 561, 562, 582, 587, 592, 597, 600, 605, 606, 607, 608, 611, 617, 620, 628, 630, 631, 632, 640, 645, 648, 651], "format": [14, 18, 43, 54, 148, 150, 170, 228, 229, 244, 245, 246, 287, 288, 289, 307, 313, 319, 359, 366, 439, 442, 450, 464, 501, 545, 559, 561, 562, 580, 585, 587, 596, 597, 598, 599, 600, 622, 625, 637, 639, 642, 643], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 44, 383, 384, 386, 387, 389, 395, 598, 639], "reduce_rang": [15, 41, 42, 228, 229, 400, 562, 638], "kwarg": [15, 43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 149, 163, 170, 171, 198, 228, 229, 246, 259, 261, 266, 269, 289, 302, 358, 360, 370, 371, 372, 374, 376, 378, 379, 380, 383, 392, 395, 399, 423, 438, 440, 442, 506, 517, 519, 522, 523, 529, 539, 545, 546, 549, 550, 579], "augment": 15, "dump": [15, 160, 170, 177, 307, 383, 508, 516, 550, 555, 622, 639, 643, 646], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 149, 156, 171, 508, 519, 531, 550, 642], "percentil": [16, 44, 140, 171, 389, 390, 445, 460, 522, 523, 578], "99": [16, 179, 460, 651], "999": [16, 460, 650], "option": [16, 44, 105, 149, 150, 153, 162, 170, 171, 202, 228, 229, 232, 233, 244, 261, 275, 276, 287, 302, 306, 307, 313, 319, 340, 346, 359, 362, 366, 370, 371, 386, 387, 389, 390, 400, 423, 439, 441, 442, 508, 515, 518, 522, 523, 524, 539, 543, 545, 550, 561, 562, 579, 580, 589, 593, 597, 611, 625, 628, 630, 631, 632, 636, 639, 642, 644, 645, 647, 648, 650], "number": [16, 44, 67, 68, 105, 140, 149, 150, 170, 171, 178, 193, 196, 198, 204, 205, 228, 229, 242, 245, 257, 261, 285, 288, 299, 302, 314, 315, 317, 340, 349, 367, 368, 370, 386, 387, 389, 390, 417, 422, 427, 442, 445, 477, 478, 518, 523, 542, 550, 577, 579, 580, 585, 596, 625, 627, 636, 639, 642, 644, 645, 647, 648], "bin": [16, 162, 163, 508, 515, 517, 550, 588], "histogram": [16, 508, 540, 550, 619, 646], "valu": [16, 43, 44, 56, 67, 68, 70, 89, 90, 105, 143, 148, 149, 162, 170, 176, 177, 179, 193, 195, 200, 201, 211, 219, 220, 225, 226, 228, 229, 232, 233, 244, 247, 248, 257, 261, 262, 275, 276, 287, 290, 291, 299, 302, 313, 317, 341, 349, 352, 359, 366, 370, 371, 387, 400, 423, 427, 432, 439, 441, 442, 466, 477, 478, 480, 501, 503, 515, 524, 539, 540, 542, 550, 556, 561, 562, 578, 580, 582, 589, 596, 597, 598, 603, 620, 622, 628, 634, 636, 638, 639, 642, 643, 645, 647, 648, 650], "default": [16, 44, 97, 148, 149, 150, 153, 162, 170, 171, 178, 179, 196, 220, 226, 228, 229, 232, 233, 236, 244, 245, 246, 257, 261, 275, 276, 279, 287, 288, 289, 299, 302, 306, 307, 310, 319, 341, 361, 363, 370, 379, 386, 387, 389, 390, 395, 400, 441, 460, 501, 506, 508, 515, 518, 522, 523, 524, 531, 534, 542, 545, 550, 556, 560, 579, 580, 589, 592, 593, 596, 597, 598, 605, 608, 610, 614, 622, 625, 630, 631, 632, 634, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650], "float": [16, 43, 44, 140, 141, 149, 153, 157, 171, 179, 196, 202, 207, 217, 220, 228, 229, 244, 257, 287, 299, 311, 313, 314, 315, 342, 364, 366, 367, 368, 387, 390, 395, 438, 442, 445, 448, 460, 522, 523, 531, 534, 547, 550, 580, 596, 638, 639, 645, 647], "A": [16, 55, 74, 75, 103, 116, 140, 141, 148, 149, 160, 170, 178, 179, 185, 192, 193, 195, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 228, 229, 246, 261, 264, 266, 267, 289, 302, 303, 310, 313, 314, 315, 317, 320, 323, 324, 325, 332, 335, 337, 340, 341, 342, 343, 344, 349, 363, 366, 367, 368, 370, 371, 375, 379, 427, 445, 448, 465, 484, 485, 501, 505, 506, 508, 516, 523, 539, 550, 555, 561, 579, 580, 586, 589, 596, 597, 599, 610, 611, 614, 617, 625, 636, 637, 639, 642, 645, 647, 648, 650], "between": [16, 42, 143, 176, 213, 228, 229, 261, 302, 314, 317, 367, 370, 417, 422, 550, 556, 560, 561, 562, 578, 582, 583, 592, 596, 597, 608, 639, 642, 643, 644, 645, 647, 648], "0": [16, 43, 44, 54, 90, 105, 148, 149, 150, 153, 161, 162, 170, 171, 173, 175, 178, 179, 186, 193, 195, 196, 198, 220, 222, 224, 228, 229, 234, 236, 239, 240, 243, 244, 247, 248, 251, 257, 261, 263, 264, 277, 279, 282, 283, 286, 287, 290, 291, 294, 299, 302, 307, 308, 317, 324, 332, 337, 345, 370, 381, 386, 387, 389, 390, 393, 395, 400, 423, 428, 442, 460, 464, 501, 503, 515, 522, 523, 531, 545, 556, 579, 580, 583, 585, 587, 588, 589, 593, 594, 596, 597, 598, 603, 605, 610, 614, 620, 630, 631, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 650], "100": [16, 177, 178, 179, 193, 196, 228, 229, 246, 289, 395, 442, 459, 462, 577, 580, 585, 591, 597, 622, 638, 639, 647, 648, 650, 651], "klcalibr": 16, "128": [16, 44, 149, 154, 156, 170, 171, 222, 244, 247, 248, 261, 287, 290, 291, 302, 387, 395, 503, 518, 519, 523, 580, 597, 639, 642, 647, 651], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 153, 618, 619, 642], "ep": [16, 176, 598], "0001": [16, 193, 228, 229, 583, 597, 638], "smooth": [16, 140, 141, 148, 167, 175, 228, 229, 358, 383, 392, 395, 445, 446, 448, 460, 501, 636, 648], "discret": [16, 193, 648], "mai": [16, 148, 160, 162, 326, 327, 329, 330, 331, 442, 501, 515, 516, 524, 554, 555, 561, 578, 582, 587, 588, 594, 598, 610, 614, 620, 623, 625, 637, 639, 642, 645, 648], "have": [16, 74, 83, 141, 148, 162, 197, 201, 203, 210, 242, 264, 285, 310, 313, 340, 342, 363, 366, 370, 423, 441, 442, 448, 484, 493, 501, 515, 554, 555, 561, 562, 579, 580, 582, 585, 589, 594, 596, 597, 598, 600, 617, 620, 623, 625, 630, 631, 632, 634, 636, 639, 640, 642, 645, 648, 649], "been": [16, 149, 162, 197, 203, 210, 310, 340, 342, 363, 508, 515, 557, 562, 583, 597, 598, 617, 642, 645], "normal": [16, 33, 261, 302, 315, 368, 597, 626, 634, 642, 645, 647], "1": [16, 42, 43, 44, 55, 74, 89, 105, 109, 113, 146, 148, 149, 150, 153, 162, 165, 167, 170, 171, 173, 175, 176, 177, 179, 186, 193, 195, 196, 208, 209, 211, 228, 229, 234, 236, 239, 240, 243, 244, 245, 247, 248, 251, 252, 257, 261, 262, 263, 264, 277, 279, 282, 283, 286, 287, 288, 290, 291, 294, 295, 299, 302, 308, 313, 314, 315, 317, 332, 337, 342, 345, 346, 366, 367, 368, 370, 381, 384, 386, 387, 389, 390, 393, 400, 423, 441, 442, 446, 465, 484, 501, 503, 508, 515, 518, 521, 522, 523, 531, 542, 545, 550, 554, 556, 559, 560, 562, 578, 579, 580, 582, 583, 587, 589, 590, 593, 595, 596, 598, 601, 603, 619, 620, 627, 628, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650], "replac": [16, 149, 163, 167, 170, 171, 315, 368, 517, 518, 523, 585, 597, 608, 643], "zero": [16, 43, 44, 149, 150, 156, 171, 207, 220, 261, 302, 342, 387, 390, 400, 519, 523, 550, 559, 622, 636, 639, 642, 645, 647, 648], "multipli": [16, 228, 229, 642], "scale": [16, 43, 44, 100, 141, 143, 149, 156, 165, 167, 169, 170, 171, 175, 176, 257, 261, 299, 302, 386, 387, 390, 400, 448, 518, 519, 521, 522, 523, 639, 642, 644, 645, 647, 648], "factor": [16, 141, 153, 448, 642, 645, 651], "take": [16, 202, 229, 232, 233, 237, 261, 266, 275, 276, 280, 302, 340, 349, 370, 371, 423, 427, 539, 554, 556, 557, 579, 582, 583, 589, 597, 617, 636, 639, 641, 642, 647, 648, 650], "correspond": [16, 157, 200, 211, 228, 229, 244, 287, 310, 313, 317, 363, 366, 370, 524, 542, 550, 560, 589, 597, 636, 638, 639, 644, 648], "amount": [16, 645], "off": [16, 67, 68, 70, 477, 478, 480, 555, 642], "non": [16, 341, 550, 556, 582, 642, 648], "ref": [16, 148, 501], "http": [16, 156, 157, 195, 196, 204, 205, 214, 215, 216, 222, 244, 246, 287, 289, 310, 311, 313, 314, 315, 340, 342, 343, 363, 364, 366, 367, 368, 370, 394, 423, 519, 531, 556, 559, 580, 582, 590, 593, 594, 597, 606, 612, 615, 619, 621, 622, 623, 624, 625, 628, 630, 631, 632, 636, 643], "hanj": 16, "c": [16, 74, 246, 289, 484, 550, 580, 588, 593, 642, 648], "illinoi": 16, "edu": [16, 246, 289, 580], "cs412": 16, "bk3": 16, "diverg": [16, 540, 544, 562, 578, 583, 648], "pdf": [16, 196, 222], "github": [16, 157, 204, 205, 216, 244, 287, 310, 311, 314, 315, 340, 343, 363, 364, 367, 368, 370, 394, 423, 555, 559, 580, 582, 586, 593, 594, 597, 606, 612, 615, 619, 621, 622, 623, 624, 625, 628, 631, 632, 643], "com": [16, 157, 204, 205, 216, 244, 287, 310, 311, 314, 315, 340, 343, 363, 364, 367, 368, 370, 394, 423, 554, 559, 580, 582, 590, 593, 594, 597, 600, 606, 619, 621, 622, 624, 625, 628, 631, 632, 643, 644, 651], "apach": [16, 594], "incub": 16, "blob": [16, 157, 204, 205, 310, 311, 314, 315, 340, 363, 364, 367, 368, 370, 394, 423, 597, 606, 628, 631, 632], "master": [16, 204, 205, 216, 310, 311, 314, 315, 340, 343, 363, 364, 367, 368, 370, 423, 597, 648], "python": [16, 75, 148, 160, 162, 246, 265, 289, 309, 362, 394, 442, 485, 501, 508, 515, 516, 550, 552, 555, 556, 580, 582, 585, 588, 593, 597, 602, 608, 611, 617, 621, 622, 624, 625, 627, 630, 632, 636, 637, 647], "contrib": [16, 309, 362], "py": [16, 148, 157, 177, 207, 228, 229, 311, 313, 314, 315, 342, 364, 366, 367, 368, 394, 442, 501, 556, 560, 582, 585, 593, 597, 602, 604, 605, 606, 612, 615, 619, 621, 622, 624, 625, 627, 628, 630, 631, 632, 639, 643, 646], "microsoft": [16, 394, 559, 560], "onnxruntim": [16, 228, 229, 240, 246, 253, 283, 289, 296, 318, 394, 417, 560, 578, 579, 592, 593, 598, 620, 638], "main": [16, 156, 188, 193, 211, 216, 268, 343, 392, 393, 394, 459, 462, 519, 529, 530, 534, 556, 579, 582, 585, 597, 604, 606, 618, 627, 636, 639, 642], "tool": [16, 148, 306, 394, 501, 550, 559, 560, 597, 610, 614, 620, 623, 624, 625, 636, 637, 639], "arrai": [16, 43, 44, 148, 162, 261, 302, 313, 324, 366, 390, 400, 501, 515, 550, 647], "small": [16, 67, 68, 69, 70, 430, 477, 478, 479, 480, 557, 622, 623, 636, 642, 648, 651], "probabl": [16, 228, 229, 544, 642], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 51, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 198, 211, 315, 368, 445, 467, 470, 484, 490, 493, 494, 495, 554, 597, 610, 614, 623, 630, 631, 636, 646], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 163, 517], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 105, 116, 148, 153, 162, 186, 207, 232, 233, 241, 244, 263, 275, 276, 284, 287, 341, 342, 359, 390, 423, 439, 501, 515, 539, 557, 562, 580, 596, 616, 636, 639, 645, 648], "qoper": [18, 34, 228, 229, 587, 620], "float16activationoper": 18, "float16": [18, 21, 43, 149, 150, 524, 545, 580, 642], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 317, 370, 501, 588, 596, 612, 615, 643], "binaryoper": 21, "binarydirect8bitoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 472, 477, 556, 645], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 141, 148, 223, 360, 395, 440, 445, 448, 460, 501], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "reduceminmaxoper": 37, "reducemin": 37, "reducemax": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "unarydirect8bitoper": 40, "q_config": [41, 170, 307, 560], "mode": [41, 42, 43, 45, 110, 162, 167, 253, 296, 313, 359, 366, 379, 384, 400, 439, 498, 506, 515, 534, 547, 549, 550, 560, 561, 582, 592, 610, 614, 622, 623, 639, 641, 642, 648], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 44, 79, 131, 136, 143, 170, 171, 176, 228, 229, 232, 233, 275, 276, 306, 307, 317, 352, 359, 370, 386, 387, 389, 390, 395, 428, 432, 439, 459, 462, 489, 508, 518, 522, 523, 542, 545, 549, 550, 555, 559, 560, 562, 582, 589, 590, 596, 597, 598, 607, 619, 620, 621, 622, 638, 639, 641, 642, 643, 644, 645, 646, 648, 650, 651], "add_qdq_pair_to_weight": [41, 228, 229, 639], "optypes_to_exclude_output_qu": [41, 228, 229, 639], "dedicated_qdq_pair": [41, 228, 229, 639], "smoothquant": [42, 167, 170, 175, 384, 446, 559, 595, 637, 642, 649], "onnxrt": [42, 43, 44, 244, 246, 253, 261, 287, 289, 296, 302, 317, 370, 416, 548, 560, 582, 598, 619, 639, 651], "get_quant_dequant_output": 42, "input_data": [42, 579], "output_data": 42, "loss": [42, 179, 186, 228, 229, 263, 308, 317, 332, 337, 345, 370, 524, 539, 578, 582, 583, 584, 585, 586, 595, 596, 597, 598, 608, 620, 622, 635, 636, 637, 639, 642, 645, 648, 650], "output": [42, 43, 44, 51, 54, 59, 74, 98, 105, 110, 148, 149, 150, 170, 171, 189, 200, 201, 206, 220, 226, 228, 229, 232, 233, 266, 270, 275, 276, 306, 307, 310, 340, 363, 370, 371, 379, 390, 423, 464, 469, 484, 498, 501, 506, 508, 522, 523, 524, 539, 545, 546, 550, 556, 560, 561, 583, 584, 585, 587, 589, 591, 596, 597, 599, 608, 617, 618, 620, 625, 626, 630, 631, 632, 635, 636, 638, 639, 642, 643, 645, 646, 647, 648, 650], "numpi": [42, 43, 67, 68, 70, 105, 148, 261, 302, 313, 324, 366, 390, 477, 478, 480, 501, 588, 645, 647], "7": [42, 171, 177, 196, 228, 229, 381, 395, 400, 523, 562, 577, 588, 589, 597, 636, 639, 643, 645, 648, 651], "bit": [42, 44, 149, 154, 170, 171, 228, 229, 386, 387, 389, 390, 400, 441, 518, 522, 523, 531, 562, 578, 584, 598, 637, 639, 642, 645], "execut": [42, 43, 54, 156, 162, 177, 207, 208, 209, 228, 229, 342, 346, 348, 387, 422, 423, 424, 426, 464, 515, 519, 539, 542, 549, 550, 582, 583, 584, 597, 598, 602, 603, 610, 611, 617, 618, 619, 620, 624, 627, 635, 636, 639, 642, 644, 648, 651], "provid": [42, 43, 44, 102, 105, 110, 149, 200, 232, 233, 261, 275, 276, 302, 308, 313, 332, 337, 345, 346, 366, 371, 383, 384, 386, 387, 389, 390, 395, 423, 498, 539, 543, 545, 557, 559, 560, 561, 562, 577, 579, 582, 584, 585, 586, 592, 593, 595, 596, 597, 598, 599, 600, 604, 608, 611, 617, 618, 619, 625, 626, 636, 638, 639, 642, 645, 646, 648, 649, 650, 651], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 229, 306, 307, 587], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 149, 153, 157, 160, 162, 170, 171, 176, 179, 185, 189, 192, 198, 200, 202, 204, 205, 206, 207, 211, 212, 213, 214, 216, 217, 218, 224, 228, 229, 232, 233, 243, 244, 245, 246, 247, 248, 249, 251, 261, 264, 270, 271, 275, 276, 286, 287, 288, 289, 290, 291, 292, 294, 302, 310, 313, 314, 315, 317, 326, 327, 329, 330, 331, 332, 337, 340, 342, 344, 345, 346, 349, 352, 363, 366, 367, 368, 370, 371, 381, 423, 427, 432, 441, 442, 496, 498, 500, 503, 515, 516, 518, 524, 539, 549, 550, 554, 555, 556, 557, 560, 561, 562, 578, 579, 580, 583, 584, 585, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 606, 608, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 630, 631, 632, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649], "quant_dequant_data": 42, "qtype": [42, 43, 400, 560], "3": [42, 44, 148, 149, 150, 162, 179, 196, 209, 229, 246, 261, 289, 302, 313, 366, 386, 387, 389, 390, 395, 442, 501, 515, 550, 556, 557, 559, 578, 579, 580, 583, 585, 587, 589, 590, 593, 596, 597, 598, 600, 604, 608, 610, 614, 619, 624, 625, 627, 628, 630, 634, 636, 638, 639, 642, 643, 644, 645, 647, 648, 651], "scheme": [42, 43, 44, 149, 154, 165, 170, 171, 386, 387, 389, 390, 400, 518, 521, 522, 523, 560, 561, 562, 579, 589, 608, 642, 648, 650], "sym": [42, 43, 44, 149, 150, 171, 400, 518, 522, 523, 561, 562, 589, 639, 642, 650], "dequant": [42, 43, 44, 51, 88, 91, 92, 93, 94, 96, 149, 157, 170, 171, 390, 508, 523, 550, 556, 561, 645, 646], "asym": [42, 43, 44, 149, 154, 165, 170, 171, 386, 387, 389, 390, 400, 518, 521, 522, 523, 562, 589, 642, 650], "ortsmoothqu": 42, "fake": [42, 44, 113, 165, 167, 171, 175, 384, 441, 518, 521, 522, 523, 597, 639, 642, 645], "channel": [42, 43, 44, 143, 150, 167, 171, 175, 176, 198, 201, 206, 228, 229, 257, 261, 299, 302, 340, 384, 387, 522, 523, 545, 559, 560, 562, 592, 593, 600, 602, 607, 622, 636, 642, 647, 651], "For": [42, 44, 149, 170, 171, 175, 196, 200, 201, 204, 205, 216, 229, 246, 261, 289, 302, 314, 315, 317, 340, 343, 367, 368, 370, 371, 384, 386, 387, 389, 423, 518, 522, 523, 554, 556, 558, 560, 562, 583, 584, 585, 587, 589, 592, 600, 602, 603, 605, 608, 619, 620, 625, 636, 641, 642, 645, 646, 648, 650, 651], "more": [42, 148, 149, 167, 175, 204, 205, 261, 302, 340, 384, 501, 524, 557, 558, 559, 561, 578, 580, 583, 585, 587, 590, 592, 593, 595, 597, 598, 600, 608, 612, 615, 620, 625, 634, 635, 636, 641, 642, 645, 648, 649, 651], "detail": [42, 153, 167, 175, 178, 200, 261, 302, 384, 550, 551, 554, 559, 561, 562, 578, 583, 589, 590, 591, 595, 596, 597, 598, 600, 608, 617, 625, 626, 636, 642, 643, 644, 645, 646, 648, 649], "pleas": [42, 149, 156, 157, 167, 175, 195, 204, 205, 206, 214, 215, 216, 228, 229, 244, 245, 246, 249, 287, 288, 289, 292, 340, 342, 343, 370, 384, 423, 442, 519, 556, 557, 558, 559, 560, 577, 578, 580, 584, 585, 587, 593, 595, 596, 598, 600, 601, 605, 608, 624, 625, 626, 636, 639, 641, 642, 643, 644, 645, 648, 649], "refer": [42, 149, 156, 157, 167, 175, 195, 204, 205, 206, 214, 215, 216, 220, 228, 229, 244, 287, 310, 311, 317, 340, 342, 343, 363, 364, 370, 384, 423, 442, 519, 556, 560, 561, 577, 579, 580, 582, 584, 585, 587, 591, 593, 594, 596, 597, 598, 600, 605, 608, 619, 620, 622, 624, 625, 626, 634, 638, 640, 643, 647, 648], "accur": [42, 156, 167, 175, 215, 384, 519, 531, 636, 642, 645], "effici": [42, 167, 175, 384, 557, 559, 578, 579, 583, 600, 625, 635, 636, 637, 642, 645, 648], "post": [42, 97, 98, 156, 167, 175, 214, 229, 232, 233, 275, 276, 384, 423, 519, 531, 554, 559, 560, 561, 582, 584, 585, 587, 592, 593, 600, 606, 617, 627, 636, 637, 640, 642, 645, 646, 648], "train": [42, 57, 80, 149, 156, 167, 175, 185, 208, 209, 212, 214, 215, 228, 229, 232, 233, 244, 246, 261, 271, 275, 276, 287, 289, 302, 303, 319, 342, 362, 384, 423, 467, 490, 519, 531, 542, 557, 559, 560, 561, 567, 580, 582, 583, 584, 587, 592, 598, 600, 606, 617, 622, 630, 635, 637, 640, 642, 644, 645, 648, 650], "larg": [42, 43, 167, 175, 215, 384, 559, 579, 583, 595, 597, 637, 640, 642, 645, 651], "languag": [42, 167, 175, 215, 310, 363, 384, 554, 559, 587, 595, 621, 637, 640, 642, 645], "2": [42, 43, 44, 54, 74, 105, 109, 149, 150, 162, 167, 171, 173, 175, 177, 179, 196, 202, 208, 209, 222, 228, 229, 245, 262, 288, 313, 315, 317, 342, 349, 366, 368, 370, 381, 384, 386, 387, 389, 390, 400, 427, 442, 464, 484, 515, 518, 522, 523, 550, 556, 560, 578, 579, 580, 582, 583, 589, 592, 593, 594, 595, 596, 598, 621, 627, 628, 630, 631, 632, 634, 636, 637, 639, 640, 642, 643, 644, 645, 647, 648, 649], "spiq": [42, 167, 175, 384, 645], "free": [42, 167, 175, 214, 232, 233, 275, 276, 384, 423, 554, 606, 611, 619, 627, 634, 644, 645], "per": [42, 43, 44, 167, 171, 175, 177, 228, 229, 262, 384, 387, 390, 523, 524, 544, 560, 562, 579, 625, 636, 641, 642, 651], "we": [42, 43, 67, 68, 70, 74, 86, 143, 150, 162, 167, 175, 176, 177, 179, 200, 204, 211, 228, 229, 243, 262, 264, 286, 310, 313, 363, 366, 384, 394, 400, 430, 477, 478, 480, 484, 496, 515, 554, 556, 560, 561, 562, 579, 582, 585, 587, 589, 595, 596, 597, 604, 605, 608, 612, 615, 617, 618, 620, 623, 630, 631, 632, 634, 635, 636, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649], "onli": [42, 44, 54, 63, 70, 86, 109, 115, 143, 162, 167, 169, 171, 175, 176, 177, 188, 193, 197, 203, 210, 228, 229, 244, 262, 264, 268, 287, 307, 319, 340, 342, 353, 384, 390, 393, 395, 423, 433, 441, 442, 464, 473, 480, 496, 515, 519, 524, 531, 550, 559, 560, 561, 562, 577, 578, 579, 582, 583, 585, 588, 589, 595, 597, 598, 605, 618, 636, 637, 638, 639, 640, 645, 646, 648, 649, 650], "inplac": [42, 167, 384, 522, 534], "mean": [42, 44, 149, 167, 171, 179, 202, 211, 228, 229, 257, 261, 299, 302, 315, 317, 340, 352, 368, 370, 384, 432, 522, 556, 561, 562, 579, 582, 585, 589, 596, 597, 603, 622, 636, 639, 640, 642, 645, 647, 648, 650, 651], "weight": [42, 43, 44, 60, 61, 122, 140, 141, 143, 148, 149, 150, 153, 154, 157, 167, 169, 170, 171, 176, 179, 195, 197, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 228, 229, 307, 340, 342, 359, 370, 384, 386, 387, 389, 390, 393, 395, 400, 423, 430, 439, 441, 445, 448, 470, 471, 501, 508, 518, 519, 523, 524, 531, 550, 551, 559, 560, 561, 562, 578, 582, 584, 589, 591, 595, 597, 619, 630, 634, 636, 637, 638, 639, 640, 645, 646, 648, 649, 650], "chang": [42, 96, 143, 149, 150, 167, 176, 208, 209, 211, 212, 214, 215, 218, 228, 229, 342, 344, 384, 430, 550, 555, 561, 579, 585, 588, 594, 597, 600, 610, 611, 614, 617, 623, 636, 646, 647, 648], "you": [42, 162, 167, 228, 229, 242, 244, 285, 287, 342, 370, 384, 423, 515, 524, 555, 556, 561, 579, 580, 582, 585, 593, 594, 596, 598, 600, 602, 603, 605, 610, 614, 617, 618, 619, 620, 621, 622, 623, 625, 636, 639, 642, 643, 644, 645, 646, 649], "can": [42, 43, 44, 143, 153, 157, 162, 167, 176, 179, 192, 200, 201, 202, 207, 215, 216, 218, 228, 229, 232, 233, 243, 246, 261, 262, 264, 275, 276, 286, 289, 302, 313, 315, 317, 340, 342, 344, 366, 368, 370, 371, 381, 384, 390, 400, 423, 515, 524, 539, 550, 556, 557, 559, 560, 561, 562, 577, 579, 580, 582, 583, 584, 585, 587, 589, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 610, 611, 612, 614, 615, 617, 618, 620, 622, 623, 624, 625, 627, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651], "recov": [42, 167, 384, 549, 550, 560, 584], "helper": [43, 45, 110, 116, 148, 170, 244, 245, 246, 260, 287, 288, 289, 301, 305, 306, 307, 379, 400, 498, 501, 506, 548], "get_node_original_nam": 43, "origin": [43, 44, 140, 148, 149, 163, 167, 170, 196, 200, 212, 220, 222, 229, 244, 261, 262, 287, 302, 326, 327, 329, 330, 331, 341, 342, 361, 390, 400, 428, 441, 445, 501, 517, 523, 545, 550, 555, 580, 605, 636, 639, 647, 648, 650], "simple_progress_bar": [43, 400], "total": [43, 207, 261, 302, 317, 342, 370, 400, 580, 582, 636, 642, 647, 651], "progress": [43, 194, 197, 210, 246, 289, 400, 611, 617, 619, 636, 639], "bar": [43, 246, 289, 400, 617, 637], "case": [43, 70, 74, 153, 162, 171, 177, 179, 229, 243, 260, 261, 262, 286, 301, 302, 308, 332, 337, 345, 381, 400, 480, 484, 515, 518, 562, 579, 583, 584, 585, 589, 591, 596, 601, 605, 617, 618, 619, 622, 628, 631, 632, 634, 636, 637, 639, 642, 643, 645, 647, 649, 650, 651], "where": [43, 153, 162, 228, 229, 313, 317, 366, 370, 400, 441, 515, 550, 562, 578, 582, 583, 610, 614, 618, 645, 646], "tqdm": [43, 400, 597], "t": [43, 67, 68, 70, 143, 153, 162, 176, 202, 228, 229, 261, 264, 302, 315, 368, 400, 477, 478, 480, 515, 556, 560, 582, 583, 585, 597, 598, 618, 623, 636, 639, 642, 648, 650], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 44, 102, 105, 150, 228, 229, 247, 248, 257, 261, 290, 291, 299, 302, 390, 503, 522, 523, 524, 531, 545, 561, 562, 580, 582, 587, 589, 600, 622, 638, 639, 642, 645, 646, 647, 650], "its": [43, 60, 96, 148, 157, 200, 209, 212, 214, 220, 229, 240, 246, 261, 283, 289, 302, 305, 311, 312, 342, 349, 364, 365, 427, 470, 501, 554, 580, 583, 594, 596, 598, 608, 610, 614, 617, 618, 636, 642, 644, 647, 648], "string": [43, 45, 116, 148, 149, 156, 160, 162, 177, 186, 188, 192, 193, 200, 202, 207, 216, 217, 218, 220, 225, 228, 229, 246, 263, 268, 289, 303, 308, 310, 313, 319, 320, 321, 323, 324, 332, 337, 340, 341, 342, 343, 344, 345, 363, 366, 375, 379, 400, 501, 506, 508, 515, 516, 519, 542, 547, 550, 596, 647], "represent": [43, 160, 516, 554, 556, 578, 584, 636, 639], "quanttyp": [43, 441], "repres": [43, 202, 206, 207, 216, 217, 220, 246, 251, 289, 294, 313, 315, 317, 366, 368, 370, 386, 387, 389, 390, 554, 562, 578, 580, 587, 625, 636, 639, 640, 648], "make_quant_nod": 43, "make": [43, 105, 143, 176, 192, 202, 207, 216, 218, 242, 285, 340, 342, 344, 550, 554, 560, 561, 577, 579, 589, 596, 597, 605, 610, 614, 617, 619, 636, 639, 640, 641, 642, 644, 645, 648], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 229], "dequantizelinear": 43, "is_b_transpos": [43, 400], "inuput": [43, 400], "b": [43, 74, 149, 153, 244, 287, 400, 484, 550, 555, 578, 580, 596, 636, 642, 645, 648], "transpos": [43, 73, 150, 206, 257, 261, 302, 306, 340, 400, 483, 642, 647], "split_shared_bia": 43, "share": [43, 44, 82, 98, 109, 141, 149, 171, 390, 448, 492, 518, 522, 523, 588, 589, 642, 645, 648], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 524, 598, 600, 608, 641], "cast_tensor": 43, "is_large_model": 43, "tensorproto": [43, 105], "raw": [43, 177, 245, 249, 252, 288, 292, 295, 352, 432, 596, 621, 648], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 157, 170, 179, 257, 261, 299, 302, 310, 313, 314, 315, 317, 363, 366, 367, 368, 370, 403, 423, 430, 501, 539, 549, 550, 554, 557, 559, 579, 582, 583, 585, 592, 594, 596, 597, 605, 606, 617, 618, 621, 625, 626, 627, 628, 634, 636, 637, 639, 642, 644, 645, 646, 647, 648, 649, 651], "quantize_data_with_scale_zero": 43, "zero_point": [43, 44, 390], "point": [43, 44, 149, 171, 257, 299, 314, 315, 324, 349, 367, 368, 387, 390, 400, 427, 523, 550, 596, 617, 622, 623, 639, 642, 645, 647, 648], "To": [43, 313, 366, 381, 400, 555, 561, 562, 580, 582, 585, 598, 601, 604, 610, 612, 614, 615, 619, 623, 636, 638, 641, 642, 643, 645, 648, 650], "pack": [43, 61, 400, 471], "comput": [43, 44, 105, 149, 153, 157, 170, 310, 311, 314, 315, 317, 363, 364, 367, 368, 370, 386, 387, 389, 390, 400, 524, 539, 550, 578, 579, 584, 587, 596, 597, 598, 600, 611, 620, 636, 637, 639, 642, 645, 648], "linear": [43, 149, 150, 156, 165, 169, 170, 171, 175, 198, 200, 201, 206, 211, 220, 223, 228, 229, 340, 400, 519, 521, 523, 556, 583, 587, 597, 636, 642, 645, 648], "transform": [43, 50, 143, 145, 146, 147, 149, 156, 166, 169, 214, 244, 245, 246, 247, 248, 249, 251, 253, 255, 287, 288, 289, 290, 291, 292, 294, 296, 298, 309, 362, 400, 503, 519, 531, 556, 557, 559, 578, 580, 583, 584, 585, 586, 590, 595, 597, 600, 605, 606, 607, 608, 620, 628, 631, 632, 636, 637, 641, 642, 645, 646, 648, 650, 651], "when": [43, 54, 64, 70, 148, 160, 162, 179, 201, 207, 212, 220, 228, 229, 244, 245, 253, 261, 287, 288, 296, 302, 311, 341, 342, 364, 400, 423, 464, 474, 480, 501, 515, 516, 524, 539, 554, 557, 561, 579, 580, 597, 608, 610, 611, 614, 618, 619, 622, 623, 624, 626, 630, 636, 639, 642, 645, 647, 648], "uint8": [43, 171, 257, 299, 313, 361, 366, 400, 441, 523, 560, 580, 589, 638, 639, 647, 650], "rmin": [43, 400, 639], "rmax": [43, 400, 639], "m": [43, 157, 171, 204, 205, 228, 229, 340, 400, 523, 555, 583, 593, 600, 602, 605, 608, 612, 615, 625, 636, 651], "max": [43, 104, 143, 149, 171, 176, 179, 193, 196, 228, 229, 261, 302, 314, 315, 349, 367, 368, 400, 427, 508, 523, 550, 559, 582, 593, 597, 620, 622, 636, 639, 642, 645, 647, 648], "ab": [43, 156, 171, 195, 214, 215, 342, 400, 519, 523, 531, 636, 639, 645], "np": [43, 261, 302, 349, 390, 427, 585, 627, 645, 647, 648], "calculate_scale_zp": 43, "quantize_rang": [43, 400], "calcul": [43, 60, 170, 195, 204, 220, 229, 247, 248, 290, 291, 314, 315, 340, 342, 352, 367, 368, 432, 470, 503, 540, 550, 578, 580, 596, 597, 608, 620, 634, 636, 639, 642, 644, 645, 648, 650], "quantize_data": [43, 400], "add": [43, 53, 64, 109, 119, 148, 188, 220, 228, 229, 244, 246, 268, 287, 289, 341, 359, 400, 439, 463, 474, 501, 550, 555, 556, 562, 579, 580, 585, 587, 589, 596, 597, 612, 615, 619, 620, 627, 630, 631, 644, 645, 646, 648, 649], "necessari": [43, 216, 400, 554, 557, 561, 599, 618, 636, 644, 648], "intermedi": [43, 157, 186, 228, 229, 263, 400, 556, 592, 639], "full": [43, 149, 150, 244, 245, 246, 287, 288, 289, 400, 545, 550, 559, 578, 580, 582, 588, 594, 618, 623, 636, 642, 643], "equat": [43, 315, 317, 368, 370, 400, 639, 645], "r": [43, 143, 176, 400, 582, 593, 618, 619, 621, 622, 624, 625, 639, 651], "": [43, 44, 105, 143, 148, 162, 176, 200, 201, 202, 206, 207, 208, 209, 212, 214, 215, 220, 223, 225, 226, 228, 229, 243, 246, 260, 261, 262, 264, 266, 286, 289, 301, 302, 315, 340, 342, 368, 370, 371, 375, 387, 400, 423, 501, 508, 515, 523, 524, 547, 550, 554, 555, 557, 561, 562, 582, 583, 585, 587, 589, 592, 597, 598, 605, 608, 610, 614, 617, 620, 622, 625, 635, 636, 637, 638, 639, 642, 643, 644, 645, 648, 649, 650, 651], "q": [43, 44, 107, 109, 131, 400, 642, 645], "z": [43, 400, 578, 583, 645], "real": [43, 247, 264, 290, 400, 503, 561, 578, 585, 619, 626, 637, 639], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 162, 163, 501, 515, 517], "new_dtyp": 43, "cast": [43, 51, 641, 647], "info": [43, 170, 171, 204, 205, 220, 259, 264, 269, 340, 375, 508, 518, 545, 546, 550, 556, 582, 599, 627, 632], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 508, 550], "low": [43, 149, 150, 232, 233, 247, 248, 275, 276, 290, 291, 308, 318, 345, 371, 503, 560, 561, 577, 578, 580, 585, 597, 598, 622, 637, 639, 642, 645, 648], "high": [43, 247, 248, 290, 291, 503, 580, 582, 593, 622, 637, 648], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 170, 200, 211, 225, 226, 229, 493, 501, 524, 550, 560, 579, 589, 591, 597, 638, 650], "make_nod": 43, "find_by_nam": [43, 400], "item_list": [43, 400], "find": [43, 67, 68, 70, 105, 148, 223, 317, 324, 349, 370, 400, 427, 477, 478, 480, 501, 550, 560, 582, 595, 603, 610, 614, 617, 618, 620, 622, 636, 642, 644, 645, 646, 648], "item": [43, 220, 226, 228, 229, 260, 301, 341, 359, 400, 439, 508, 578, 585, 636, 645, 648], "trt_env_setup": 43, "environ": [43, 177, 262, 554, 577, 610, 614, 617, 625, 628, 630, 631, 632, 648], "variabl": [43, 160, 177, 217, 228, 229, 246, 262, 289, 349, 427, 441, 516, 593, 636, 648], "tensorrt": [43, 578, 598, 639], "to_numpi": 43, "infer_shap": 43, "in_mp": 43, "int_max": 43, "31": [43, 651], "auto_merg": 43, "guess_output_rank": 43, "verbos": [43, 307, 349, 427], "base_dir": 43, "shape": [43, 44, 105, 148, 149, 202, 247, 248, 257, 261, 290, 291, 299, 302, 313, 366, 390, 501, 503, 559, 580, 589, 590, 597, 619, 620, 642, 645, 647], "weightonli": 44, "get_blob_s": 44, "group_siz": [44, 149, 154, 165, 170, 171, 386, 387, 389, 390, 441, 518, 521, 522, 523, 531, 642], "has_zp": 44, "blob_siz": 44, "how": [44, 149, 162, 171, 179, 185, 195, 202, 208, 209, 214, 215, 228, 229, 261, 302, 303, 340, 390, 515, 522, 523, 555, 556, 558, 560, 579, 580, 583, 584, 585, 591, 596, 597, 611, 612, 615, 616, 617, 619, 630, 631, 632, 636, 637, 639, 645, 647, 648, 649, 650], "mani": [44, 149, 171, 370, 390, 423, 522, 523, 579, 593, 642, 648, 650], "element": [44, 149, 171, 204, 205, 220, 242, 285, 313, 340, 366, 390, 522, 523, 550, 580, 592, 596, 636, 642, 645], "one": [44, 109, 110, 115, 149, 150, 162, 170, 171, 177, 202, 206, 211, 214, 215, 216, 218, 261, 271, 302, 310, 313, 317, 319, 340, 343, 344, 363, 366, 370, 390, 498, 515, 522, 523, 524, 557, 560, 578, 583, 584, 585, 589, 592, 593, 596, 597, 598, 600, 601, 605, 606, 608, 610, 611, 614, 617, 618, 619, 622, 623, 624, 625, 627, 634, 635, 636, 638, 639, 640, 642, 643, 645, 647, 648], "zp": [44, 149, 171, 390, 522, 523, 645], "make_matmul_weight_only_nod": [44, 390], "weight_shap": [44, 390], "num_bit": [44, 113, 149, 165, 170, 171, 386, 387, 389, 390, 521, 645], "k_block": [44, 390], "q_weight": [44, 390], "accuracy_level": [44, 386, 387, 389, 390, 395], "matmulfpq4": [44, 390], "accuraci": [44, 177, 179, 220, 228, 229, 232, 233, 275, 276, 303, 308, 317, 332, 337, 345, 370, 371, 381, 386, 387, 389, 390, 393, 423, 428, 442, 524, 539, 547, 556, 559, 561, 562, 578, 579, 580, 582, 584, 585, 586, 587, 595, 596, 597, 608, 617, 619, 626, 627, 630, 631, 634, 635, 636, 637, 638, 642, 643, 644, 645, 646, 649, 650, 651], "level": [44, 200, 386, 387, 389, 390, 428, 442, 546, 554, 627, 645, 648], "unset": [44, 386, 387, 389, 390], "jbla": [44, 386, 387, 389, 390], "kernel": [44, 175, 228, 229, 386, 387, 389, 390, 560, 561, 648], "fp16": [44, 229, 359, 386, 387, 389, 390, 439, 639], "4": [44, 54, 149, 150, 154, 165, 170, 171, 177, 179, 196, 202, 211, 228, 229, 253, 256, 257, 261, 296, 299, 302, 310, 311, 313, 363, 364, 366, 386, 387, 389, 390, 393, 395, 441, 442, 464, 518, 521, 522, 523, 531, 554, 560, 562, 577, 585, 586, 589, 592, 593, 596, 597, 605, 625, 627, 631, 636, 639, 642, 645, 647, 648, 651], "matmulnbit": [44, 390], "new_init": [44, 390], "matmul_weight_only_nod": [44, 390], "quant_tensor": [44, 390, 523], "32": [44, 149, 154, 171, 198, 386, 387, 389, 390, 395, 441, 518, 522, 523, 531, 585, 591, 642, 651], "ratio": [44, 143, 176, 202, 207, 220, 228, 229, 257, 261, 299, 302, 342, 389, 390, 580, 597, 620, 636, 647, 651], "group": [44, 149, 150, 153, 171, 217, 327, 386, 387, 389, 390, 523, 559, 592, 636, 642, 646, 647, 648, 651], "clip": [44, 171, 386, 389, 390, 518, 522, 523, 642, 645], "qdq_tensor": [44, 390], "quant": [44, 148, 149, 170, 171, 228, 229, 359, 383, 386, 387, 390, 392, 395, 439, 450, 460, 501, 518, 522, 523, 556, 595, 597, 639], "pad_tensor": [44, 390], "rowi": [44, 390], "so": [44, 105, 261, 302, 390, 441, 556, 560, 582, 588, 592, 598, 603, 605, 621, 622, 623, 639, 641, 642, 645, 646, 647, 649], "divis": [44, 390], "pade": [44, 390], "rtn_quantiz": [44, 171, 389, 522], "weight_config": [44, 149, 150, 154, 156, 169, 171, 386, 387, 389, 518, 519, 522], "round": [44, 143, 149, 171, 176, 389, 395, 522, 531, 559, 637, 639, 642, 645], "nearst": [44, 171, 389], "method": [44, 141, 143, 149, 160, 162, 170, 171, 192, 217, 228, 229, 237, 242, 243, 244, 246, 253, 261, 264, 280, 285, 286, 287, 289, 296, 302, 323, 324, 325, 359, 386, 387, 389, 439, 441, 448, 515, 516, 518, 522, 524, 542, 543, 545, 546, 556, 557, 559, 578, 579, 580, 582, 583, 584, 596, 597, 635, 636, 639, 641, 642, 645, 647, 648], "modelproto": [44, 305, 371, 384, 386, 387, 389, 390, 392, 393, 400, 599], "onnxmodel": [44, 378, 383, 384, 386, 387, 389, 390, 399, 416], "fc2": [44, 170, 171, 386, 387, 389, 518, 522, 523], "rtn": [44, 170, 392, 395, 460, 529, 531, 640, 642], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 148, 149, 165, 169, 185, 211, 213, 271, 311, 364, 386, 387, 389, 392, 459, 501, 521, 529, 554, 561, 562, 597, 600, 602, 608, 617, 621, 622, 627, 635, 636, 639, 641, 644, 645, 648, 649, 650], "salient": [44, 171, 518, 636, 642], "apply_awq_clip": 44, "mse": [44, 170, 171, 228, 229, 309, 317, 351, 362, 370, 387, 395, 423, 431, 518, 550, 582, 596, 622, 638, 642, 643], "prepare_input": [44, 390], "n_sampl": [44, 149, 154, 170, 171, 518, 523], "sampl": [44, 77, 149, 170, 171, 228, 229, 237, 242, 244, 245, 246, 257, 261, 280, 285, 287, 288, 289, 299, 302, 317, 324, 349, 370, 427, 487, 518, 523, 557, 579, 580, 586, 592, 618, 639, 642, 645, 647, 648, 650, 651], "session": [44, 148, 243, 286, 379, 390, 501, 506, 597, 646], "awq_quant": [44, 171, 386, 518], "enable_auto_scal": [44, 171, 386, 395, 642], "enable_mse_search": [44, 171, 386, 395, 642], "awar": [44, 154, 157, 171, 185, 229, 271, 319, 340, 386, 430, 518, 539, 560, 561, 562, 578, 584, 585, 587, 592, 617, 627, 635, 637, 642, 648], "awq": [44, 171, 392, 395, 640, 642], "enabl": [44, 109, 149, 153, 157, 171, 207, 228, 229, 342, 518, 524, 561, 562, 585, 593, 598, 600, 602, 605, 606, 608, 619, 621, 622, 624, 627, 636, 637, 645, 648], "gptq": [44, 171, 392, 395, 531, 640, 642], "w": [44, 156, 261, 302, 519, 636, 645, 647], "h": [44, 228, 229, 261, 302, 585, 625, 626, 630, 631, 632, 647], "blocksiz": [44, 387, 395], "percdamp": [44, 387, 395, 531, 642], "01": [44, 149, 179, 228, 229, 386, 387, 395, 531, 597, 638, 642, 648, 650, 651], "actord": [44, 387, 395, 642], "perchannel": [44, 387, 395], "hessian": [44, 157, 387, 430, 642, 648], "matrix": [44, 370, 423, 559, 608, 649], "percent": 44, "averag": [44, 314, 315, 317, 367, 368, 370, 387, 596, 597, 642, 648, 651], "diagon": [44, 387, 642], "dampen": [44, 153], "rearrang": [44, 214, 387, 636, 642], "consid": [44, 148, 153, 317, 370, 501, 554, 578, 583, 618, 648], "diag": 44, "error": [44, 105, 149, 157, 162, 317, 352, 370, 387, 432, 515, 546, 582, 596, 601, 622, 623, 626, 642, 645, 648], "gptq_quantiz": [44, 171, 387, 519], "get_ops_recurs": 45, "prefix": [45, 148, 155, 162, 163, 168, 170, 177, 501, 515, 517, 523, 600, 605, 646], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 155, 157, 162, 170, 192, 223, 225, 226, 228, 229, 260, 301, 313, 320, 323, 325, 366, 400, 477, 478, 480, 501, 508, 515, 538, 550], "yaml": [45, 220, 225, 226, 229, 232, 233, 244, 246, 262, 275, 276, 287, 289, 303, 308, 319, 320, 321, 323, 332, 337, 345, 346, 450, 549, 550, 560, 562, 591, 596, 597, 634, 638, 646, 647], "file": [45, 105, 148, 160, 162, 163, 170, 174, 189, 216, 220, 225, 228, 229, 232, 233, 244, 245, 246, 249, 260, 261, 267, 270, 275, 276, 287, 288, 289, 292, 301, 302, 303, 308, 313, 319, 320, 321, 323, 332, 337, 341, 343, 345, 346, 366, 371, 381, 406, 407, 411, 423, 501, 508, 515, 516, 517, 549, 550, 555, 557, 560, 561, 562, 585, 588, 591, 594, 596, 597, 599, 603, 612, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 630, 631, 632, 634, 638, 639, 642, 646, 647], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 153, 156, 272, 308, 313, 345, 358, 359, 366, 370, 423, 438, 439, 442, 480, 485, 498, 508, 519, 550, 556, 563, 565, 569, 572, 575, 582, 587, 592, 593, 597, 602, 606, 607, 608, 624, 625, 629, 643, 644, 648, 652], "pytorch_ipexadaptor": 45, "intel": [45, 188, 204, 205, 216, 265, 268, 304, 309, 316, 317, 340, 343, 351, 357, 362, 369, 370, 401, 423, 431, 437, 508, 552, 554, 555, 557, 558, 560, 561, 562, 578, 580, 581, 583, 584, 586, 587, 589, 590, 594, 595, 598, 599, 600, 605, 607, 608, 619, 620, 621, 622, 624, 625, 634, 635, 636, 637, 639, 641, 642, 643, 645, 646, 648, 649, 650], "extens": [45, 160, 162, 508, 515, 516, 550, 557, 559, 560, 589, 592, 593, 595, 597, 598, 599, 601, 606, 607, 608, 612, 615, 616, 620, 636, 637, 639, 642, 645, 648, 649, 650], "ipex": [45, 164, 170, 228, 229, 549, 592, 597, 598, 602, 606, 607, 645], "pytorch_fxadaptor": 45, "fx": [45, 170, 228, 353, 433, 592, 598, 606, 607, 621, 637, 639, 641], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 200, 243, 286, 308, 372, 379, 422, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 506, 556, 560, 580, 583, 585, 591, 599, 600, 619, 622, 639, 640, 641, 646], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "cpu": [45, 91, 92, 93, 94, 149, 150, 156, 161, 162, 164, 170, 228, 229, 508, 515, 519, 524, 545, 550, 559, 561, 577, 578, 592, 597, 598, 600, 602, 608, 617, 625, 637, 638, 639, 640, 641, 642, 646], "querybackendcap": [46, 560, 561], "tensorflowadaptor": 47, "stock": [47, 606, 645], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 228, 229, 306, 598, 639, 645], "tensorflowqueri": [47, 560], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 228, 597], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 359, 439, 561, 562], "graphconvert": 48, "qt_config": 48, "recip": [48, 200, 228, 229, 308, 345, 559, 597, 640, 642, 645, 648], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 561, 641], "data_load": [48, 49, 560], "calib_func": [48, 154, 170, 171, 423, 518, 523, 641], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143, 481, 482, 487, 489], "use_bf16": [48, 49, 228, 638], "without": [49, 90, 148, 196, 212, 261, 302, 342, 361, 441, 501, 554, 583, 585, 597, 608, 619, 622, 636, 637, 638, 648, 649], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 197, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496], "bf16convert": [50, 641], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "dequantize_cast_optim": [52, 87, 111], "biasadd": [53, 59, 64, 66, 109, 463, 469, 474, 476, 589], "convertaddtobiasaddoptim": [53, 463], "conv2d": [53, 59, 60, 61, 65, 66, 71, 125, 135, 143, 156, 460, 463, 469, 470, 471, 475, 476, 481, 519, 561, 562, 582, 587, 589, 622, 645, 646, 648], "addv2": [53, 69, 463, 479, 589], "layout": [54, 464], "convertlayoutoptim": [54, 464], "convers": [54, 55, 229, 319, 464, 465, 555, 560, 561, 597, 598, 639, 641, 645], "optim": [54, 74, 75, 79, 80, 116, 118, 148, 149, 153, 187, 190, 191, 192, 194, 197, 200, 209, 214, 225, 228, 229, 265, 271, 308, 309, 325, 345, 349, 362, 427, 464, 484, 485, 489, 490, 501, 539, 540, 547, 550, 557, 559, 577, 582, 583, 584, 585, 589, 590, 592, 593, 595, 597, 599, 600, 602, 604, 605, 608, 611, 619, 622, 623, 624, 626, 628, 637, 638, 639, 641, 642, 644, 645, 646, 648, 650], "nchw": [54, 257, 464], "nhwc": [54, 257, 464], "It": [54, 162, 171, 179, 185, 189, 202, 232, 233, 270, 275, 276, 315, 317, 324, 340, 345, 352, 368, 370, 371, 423, 428, 432, 464, 515, 523, 539, 560, 561, 562, 578, 582, 583, 597, 603, 606, 611, 617, 618, 619, 620, 622, 623, 625, 636, 639, 642, 643, 644, 648, 650], "exist": [54, 177, 226, 262, 379, 464, 506, 508, 550, 587, 596, 604, 648], "abov": [54, 464, 560, 561, 562, 583, 619, 620, 622, 625, 636, 639, 645, 648], "graph_def": [54, 140, 141, 148, 306, 371, 379, 422, 423, 445, 448, 464, 501, 506], "leakyrelu": [55, 465, 645], "convertleakyreluoptim": [55, 465], "below": [55, 66, 74, 228, 229, 346, 370, 394, 423, 465, 476, 484, 555, 556, 559, 560, 561, 562, 579, 582, 583, 585, 591, 596, 600, 602, 610, 611, 614, 617, 620, 625, 634, 635, 636, 638, 639, 642, 644, 645, 646, 648, 649], "subgraph": [55, 66, 105, 168, 465, 476, 640, 648], "mul": [55, 65, 66, 69, 171, 175, 465, 475, 476, 479, 518, 587, 642, 645], "maximum": [55, 149, 179, 202, 207, 228, 229, 244, 261, 287, 302, 311, 342, 349, 364, 379, 427, 465, 506, 562, 578, 580, 582, 597, 636, 639, 645, 647], "note": [55, 160, 206, 313, 353, 366, 433, 465, 516, 557, 559, 561, 562, 579, 582, 585, 587, 589, 593, 595, 597, 602, 605, 610, 614, 617, 619, 623, 625, 627, 636, 639, 642, 645, 646, 648, 649, 650], "coeffici": [55, 149, 217, 465, 636], "less": [55, 148, 170, 228, 229, 465, 508, 523, 550, 577, 583, 597, 624, 636], "than": [55, 148, 244, 261, 287, 302, 465, 508, 524, 550, 557, 559, 577, 580, 591, 622, 630, 634, 635, 636, 639, 642, 644, 647, 648], "valid": [55, 67, 68, 105, 179, 207, 210, 220, 228, 229, 246, 289, 313, 341, 342, 366, 379, 465, 477, 478, 506, 557, 559, 560, 580, 582, 583, 586, 589, 592, 594, 597, 608, 622, 636, 639, 642, 643], "nan": [56, 466], "random": [56, 148, 149, 184, 192, 228, 229, 257, 261, 299, 302, 309, 325, 349, 351, 362, 427, 431, 466, 501, 508, 550, 557, 597, 636, 638, 647, 650], "convertnantorandom": [56, 466], "const": [56, 57, 63, 64, 67, 68, 70, 82, 98, 466, 467, 473, 474, 477, 478, 480, 492], "consist": [56, 63, 466, 473, 555, 556, 625, 645, 648], "placehold": [57, 242, 285, 467], "convertplaceholdertoconst": [57, 467], "dilat": [58, 468], "contract": [58, 468], "dilatedcontract": [58, 468], "spacetobatchnd": [58, 468], "batchtospacend": [58, 468], "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 170, 192, 193, 194, 195, 197, 200, 201, 207, 208, 209, 210, 212, 214, 215, 217, 225, 228, 229, 246, 289, 309, 330, 331, 333, 338, 342, 359, 362, 439, 468, 469, 471, 488, 560, 580, 589, 592, 597, 618, 635, 638, 645, 648, 651], "inject": [59, 469, 597], "dummi": [59, 200, 247, 248, 290, 291, 317, 370, 469, 503, 559, 580, 590, 596, 597, 619], "injectdummybiasaddoptim": [59, 469], "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 469, 471, 480, 488, 556, 560, 589], "expanddim": [60, 470], "expanddimsoptim": [60, 470], "next": [60, 237, 280, 442, 470, 557, 561, 562, 579, 638, 642, 648], "fetch": [61, 170, 174, 237, 280, 471, 561, 580, 630, 631, 632], "reshap": [61, 67, 68, 73, 471, 477, 478, 483, 645], "fetchweightfromreshapeoptim": [61, 471], "handl": [61, 148, 167, 175, 183, 471, 501, 546, 556, 558, 579, 625, 645], "fold": [62, 63, 170, 171, 307, 395, 460, 472, 473, 518, 523, 589, 642, 645], "foldbatchnormnodesoptim": [62, 472], "graphfoldconstantoptim": [63, 473], "sequenc": [63, 105, 149, 201, 204, 205, 228, 229, 244, 260, 261, 287, 301, 302, 311, 315, 340, 364, 368, 473, 560, 580, 589, 636, 642, 647], "self": [63, 170, 171, 200, 228, 229, 381, 473, 518, 523, 524, 560, 561, 579, 580, 592, 596, 619, 644, 646, 648], "supported_op_typ": [63, 473], "fusebiasaddandaddoptim": [64, 474], "second": [64, 162, 179, 201, 228, 229, 244, 287, 428, 474, 515, 550, 582, 597, 610, 614, 618, 630, 631, 642, 645, 648, 650], "columnwis": [65, 475], "fusecolumnwisemuloptim": [65, 475], "depthwiseconv2dn": [65, 71, 125, 135, 475, 481, 589], "math": [66, 476, 639], "fuseconvwithmathoptim": [66, 476], "elimin": [66, 476, 624], "sub": [66, 170, 177, 200, 262, 476, 557, 648], "realdiv": [66, 69, 476, 479], "decompos": [67, 68, 477, 478], "fusedecomposedbnoptim": [67, 477], "input_graph_def": [67, 68, 70, 477, 478, 480], "node_name_from_input": [67, 68, 70, 477, 478, 480], "node_nam": [67, 68, 70, 148, 379, 408, 477, 478, 480, 501, 506, 561], "strip": [67, 68, 70, 83, 84, 148, 477, 478, 480, 493, 494, 501, 646], "port": [67, 68, 70, 477, 478, 480, 619, 626], "other": [67, 68, 70, 149, 153, 160, 167, 175, 243, 286, 315, 368, 379, 477, 478, 480, 506, 516, 554, 556, 561, 562, 582, 589, 592, 594, 597, 599, 620, 634, 636, 639, 645, 647, 648, 651], "underli": [67, 68, 70, 162, 477, 478, 480, 515], "node_from_map": [67, 68, 70, 477, 478, 480], "node_map": [67, 68, 70, 477, 478, 480], "pull": [67, 68, 70, 477, 478, 480], "def": [67, 68, 70, 179, 232, 233, 275, 276, 400, 423, 442, 477, 478, 480, 508, 524, 538, 539, 556, 560, 579, 580, 583, 584, 585, 596, 597, 639, 645, 646, 648], "entri": [67, 68, 70, 157, 188, 268, 308, 346, 392, 393, 459, 462, 477, 478, 480, 529, 530, 534, 550, 594], "index": [67, 68, 70, 105, 177, 220, 229, 237, 242, 246, 280, 285, 289, 324, 477, 478, 480, 550, 580, 596, 618, 622, 642, 645], "everi": [67, 68, 70, 202, 205, 207, 228, 229, 340, 342, 477, 478, 480, 560, 579, 605, 610, 614, 640, 642, 648], "identifi": [67, 68, 70, 162, 313, 366, 379, 477, 478, 480, 506, 515, 625, 636, 642], "want": [67, 68, 70, 200, 228, 229, 242, 244, 285, 287, 342, 428, 477, 478, 480, 524, 539, 556, 560, 579, 580, 585, 597, 605, 617, 618, 625, 634, 639, 642, 644, 646, 648], "nodedef": [67, 68, 70, 477, 478, 480], "rais": [67, 68, 70, 105, 160, 162, 170, 197, 203, 210, 220, 313, 340, 341, 342, 366, 371, 442, 477, 478, 480, 515, 516, 523, 559, 619, 636, 637], "valueerror": [67, 68, 70, 170, 313, 366, 442, 477, 478, 480, 523, 588], "If": [67, 68, 70, 74, 162, 171, 177, 228, 229, 232, 233, 246, 261, 275, 276, 289, 302, 341, 371, 423, 442, 477, 478, 480, 484, 515, 523, 524, 539, 555, 556, 561, 577, 579, 580, 585, 593, 594, 596, 597, 603, 611, 612, 615, 617, 623, 628, 634, 636, 639, 642, 644, 645, 646, 647, 648], "isn": [67, 68, 70, 477, 478, 480], "present": [67, 68, 70, 477, 478, 480, 582, 625, 637, 645], "values_from_const": [67, 68, 70, 477, 478, 480], "node_def": [67, 68, 70, 477, 478, 480], "extract": [67, 68, 70, 148, 200, 246, 289, 361, 441, 477, 478, 480, 501, 580], "ha": [67, 68, 70, 74, 149, 156, 162, 206, 207, 262, 310, 340, 342, 363, 442, 477, 478, 480, 484, 508, 515, 519, 555, 557, 560, 561, 562, 579, 587, 592, 597, 598, 603, 617, 622, 623, 625, 628, 636, 638, 639, 641, 644, 645, 648], "access": [67, 68, 70, 225, 226, 229, 477, 478, 480, 545, 550, 612, 615, 619], "valid_reshape_input": [67, 68, 477, 478], "reshape_in0_ndef": [67, 68, 477, 478], "reshape_in1_ndef": [67, 68, 477, 478], "ar": [67, 68, 105, 150, 162, 170, 202, 207, 208, 209, 214, 215, 228, 229, 244, 261, 287, 302, 313, 317, 324, 340, 341, 342, 346, 348, 349, 366, 370, 386, 387, 389, 393, 424, 426, 427, 441, 442, 477, 478, 515, 524, 542, 549, 550, 554, 555, 556, 557, 560, 561, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 603, 605, 608, 611, 617, 619, 620, 622, 623, 624, 625, 628, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "bypass_reshap": [67, 68, 477, 478], "input_node_map": [67, 68, 477, 478], "input_nam": [67, 68, 102, 142, 229, 306, 307, 477, 478, 587], "get_const_dim_count": [67, 68, 477, 478], "dimens": [67, 68, 105, 149, 236, 261, 279, 302, 477, 478, 580, 583, 642, 647], "instancenorm": [68, 478, 645], "fusedecomposedinoptim": [68, 478], "gelu": [69, 479], "fusegeluoptim": [69, 479], "sqrt": [69, 479, 582], "erf": [69, 479], "layernorm": [70, 480, 645], "fuselayernormoptim": [70, 480], "remap": [70, 162, 480, 515], "smaller": [70, 261, 302, 480, 583, 597, 636, 647], "fusedbatcnormv3": [70, 480], "And": [70, 480, 555, 556, 577, 597, 603, 645], "further": [70, 229, 480, 554, 598, 599, 600, 602, 611, 617, 639], "restrict": [70, 162, 228, 229, 480, 515, 636, 644], "2d": [70, 480, 645], "3d": [70, 480, 637, 645], "kera": [70, 116, 188, 200, 220, 229, 246, 253, 268, 289, 296, 374, 379, 460, 462, 480, 506, 508, 561, 579, 585, 599, 607, 608], "fusepadwithconv2doptim": [71, 481], "excluded_op_nam": [71, 72, 225, 228, 229, 481, 482, 597, 636], "cfg": [71, 72, 170, 225, 359, 439, 481, 482, 542, 561, 562], "itex_qdq_mod": [71, 72, 481, 482], "conv3d": [71, 125, 481], "fusepadwithfp32conv2doptim": [72, 482], "fusetransposereshapeoptim": [73, 483], "cse": [74, 98, 484], "graphcseoptim": [74, 484], "introduc": [74, 484, 560, 561, 562, 589, 597, 639, 642, 643, 645, 649], "ident": [74, 80, 201, 484, 490, 554, 583], "three": [74, 220, 244, 287, 348, 424, 426, 484, 556, 560, 561, 578, 593, 598, 611, 625, 635, 639, 641, 644, 645, 646], "d": [74, 170, 484, 583, 591, 618, 620, 626, 636, 651], "those": [74, 162, 352, 432, 484, 515, 550, 582, 583, 584, 591, 597, 598, 635, 636, 639, 648], "child": [74, 156, 163, 484, 517, 519, 646], "b1": [74, 484], "c1c2": [74, 484], "d1": [74, 484, 550], "c1": [74, 484], "c2": [74, 484], "memori": [74, 149, 150, 170, 308, 332, 337, 345, 381, 484, 523, 550, 578, 579, 584, 597, 598, 600, 634, 636, 639, 640, 642, 645, 648, 651], "bound": [74, 177, 193, 261, 302, 313, 349, 366, 427, 484, 596, 647], "like": [74, 96, 98, 148, 149, 162, 200, 220, 229, 232, 233, 234, 246, 275, 276, 277, 289, 308, 317, 342, 345, 346, 370, 379, 393, 423, 484, 501, 503, 506, 515, 539, 555, 556, 557, 560, 561, 582, 583, 584, 592, 605, 620, 622, 635, 636, 639, 642, 643, 645, 648], "relu": [74, 78, 109, 484, 488, 556, 589, 645, 646], "relu6": [74, 484, 589], "updat": [74, 153, 163, 170, 195, 196, 202, 220, 342, 370, 423, 484, 517, 547, 588, 595, 596, 597, 603, 608, 611, 627, 636, 642, 645, 648, 649], "graphdef": [74, 148, 379, 422, 484, 501, 506, 599], "grappler": [75, 485, 589], "grappleroptim": [75, 485], "input_output_nam": [75, 485], "opt_cfg": [75, 485], "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 155, 165, 169, 186, 197, 243, 261, 263, 264, 266, 267, 286, 302, 313, 317, 366, 370, 375, 379, 445, 485, 505, 506, 521, 641], "leverag": [75, 150, 485, 545, 557, 559, 583, 587, 600, 617, 635, 639, 642, 648], "built": [75, 188, 211, 230, 231, 235, 240, 244, 245, 250, 252, 254, 255, 257, 258, 261, 266, 268, 273, 274, 278, 281, 283, 287, 288, 293, 295, 297, 298, 299, 300, 302, 346, 370, 373, 381, 423, 485, 539, 557, 560, 580, 585, 597, 610, 614, 634, 639, 644, 647, 648, 650], "convert_add_to_biasadd": [76, 87, 111, 486, 497], "convert_layout": [76, 87, 111, 486, 497], "convert_leakyrelu": [76, 87, 111, 486, 497], "convert_nan_to_random": [76, 87, 111, 486, 497], "convert_placeholder_to_const": [76, 87, 111, 486, 497], "dilated_contract": [76, 87, 111, 486, 497], "dummy_biasadd": [76, 87, 111, 486, 497], "expanddims_optim": [76, 87, 111, 486, 497], "fetch_weight_from_reshap": [76, 87, 111, 486, 497], "fold_batch_norm": [76, 87, 111, 486, 497], "fold_const": [76, 87, 111, 486, 497], "fuse_biasadd_add": [76, 87, 111, 486, 497], "fuse_column_wise_mul": [76, 87, 111, 486, 497], "fuse_conv_with_math": [76, 87, 111, 486, 497], "fuse_decomposed_bn": [76, 87, 111, 486, 497], "fuse_decomposed_in": [76, 87, 111, 486, 497], "fuse_gelu": [76, 87, 111, 486, 497], "fuse_layer_norm": [76, 87, 111, 486, 497], "fuse_pad_with_conv": [76, 87, 111, 486, 497], "fuse_pad_with_fp32_conv": [76, 87, 111, 486, 497], "fuse_reshape_transpos": [76, 87, 111, 486, 497], "graph_cse_optim": [76, 87, 111, 486, 497], "grappler_pass": [76, 87, 111, 486, 497], "insert_print_nod": [76, 87, 111, 486, 497], "move_squeeze_after_relu": [76, 87, 111, 486, 497], "pre_optim": [76, 87, 111, 486, 497], "remove_training_nod": [76, 87, 111, 486, 497], "rename_batch_norm": [76, 87, 111, 486, 497], "split_shared_input": [76, 87, 111, 486, 497], "strip_equivalent_nod": [76, 87, 111, 148, 486, 497, 501], "strip_unused_nod": [76, 87, 111, 148, 486, 497, 501], "switch_optim": [76, 87, 111, 486, 497], "insert": [77, 105, 107, 109, 113, 146, 149, 167, 175, 487, 523, 556, 561, 579, 592, 597, 600, 636, 639, 641, 642, 645, 646], "print": [77, 156, 157, 200, 317, 370, 442, 487, 519, 550, 585, 596, 597, 619, 620, 636, 645, 648], "insertprintminmaxnod": [77, 487], "pre_node_nam": [77, 487], "post_node_nam": [77, 487], "pass": [77, 148, 149, 160, 162, 177, 370, 393, 423, 487, 501, 508, 515, 516, 524, 549, 550, 555, 556, 560, 577, 580, 583, 584, 585, 591, 596, 597, 618, 625, 636, 638, 639, 641, 645, 650], "move": [78, 149, 162, 488, 515, 556, 623, 638, 642, 643], "squeez": [78, 488, 556], "movesqueezeafterreluoptim": [78, 488], "match": [78, 102, 162, 200, 313, 314, 366, 367, 488, 515, 583, 618, 642], "pre": [79, 116, 163, 200, 232, 233, 244, 275, 276, 287, 371, 423, 489, 517, 531, 539, 580, 583, 584, 597, 605, 622, 636, 637, 639, 642, 646, 648], "entranc": [79, 193, 235, 489], "preoptim": [79, 489], "removetrainingnodesoptim": [80, 490], "protected_nod": [80, 490], "types_to_splic": [80, 490], "checknumer": [80, 490], "stopgradi": [80, 490], "renam": [81, 491, 643], "fusedbatchnorm": [81, 491], "fusedbatchnormv2": [81, 491], "renamebatchnormoptim": [81, 491], "splitsharedinputoptim": [82, 492], "equival": [83, 169, 493, 559, 637, 642, 645], "stripequivalentnodesoptim": [83, 493], "output_node_nam": [83, 84, 131, 132, 136, 148, 493, 494, 501], "same": [83, 141, 148, 150, 171, 196, 214, 229, 244, 261, 287, 302, 313, 366, 448, 493, 501, 518, 524, 550, 560, 562, 577, 579, 580, 583, 585, 589, 597, 601, 605, 610, 614, 636, 638, 639, 642, 645, 646, 647, 648], "unus": [84, 148, 494, 501], "stripunusednodesoptim": [84, 494], "input_node_nam": [84, 131, 136, 148, 494, 501], "switch": [85, 495, 600, 646], "switchoptim": [85, 495], "condit": [85, 244, 245, 246, 261, 287, 288, 289, 302, 348, 424, 426, 495, 580, 594, 647, 648], "graphrewriterbas": [86, 496], "abstract": [86, 185, 193, 261, 302, 303, 308, 345, 496, 560, 562, 591], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 148, 501, 600, 636], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 179, 201, 246, 289, 310, 313, 363, 366, 498, 554, 555, 556, 557, 560, 561, 562, 579, 580, 583, 584, 585, 589, 593, 594, 596, 597, 598, 599, 600, 601, 602, 610, 614, 619, 621, 622, 625, 630, 635, 636, 638, 639, 642, 645, 646, 648], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 508, 550, 551], "th": [89, 90], "gpu": [89, 90, 97, 149, 162, 228, 229, 515, 524, 559, 577, 592, 597, 598, 602, 608, 617, 638, 639, 640], "freezevaluewithoutcalibtransform": 90, "95": [90, 317, 370, 596, 651], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 646], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 595, 637, 651], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 381, 556, 560, 562, 579, 597, 605, 610, 614, 618, 624, 634, 636, 637, 644, 645, 648, 651], "better": [96, 228, 229, 232, 233, 275, 276, 324, 371, 423, 539, 584, 596, 598, 636, 637, 639, 642, 644, 645, 648], "perform": [96, 140, 149, 153, 177, 217, 228, 229, 244, 256, 257, 262, 287, 299, 308, 332, 337, 345, 352, 370, 381, 423, 428, 432, 445, 446, 524, 555, 556, 557, 560, 561, 577, 580, 581, 582, 584, 586, 587, 592, 593, 596, 597, 598, 599, 600, 602, 606, 608, 611, 617, 623, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 648, 650, 651], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 234, 259, 261, 264, 266, 267, 269, 277, 302, 381, 503, 557, 597, 607, 611, 617, 625, 635, 639, 645, 647, 648], "postcseoptim": 98, "duplic": [98, 108, 349, 427], "quantizev2": 98, "decreas": [98, 622, 636], "size": [98, 149, 171, 204, 205, 236, 237, 243, 246, 252, 257, 261, 279, 280, 286, 289, 295, 299, 302, 340, 379, 381, 386, 387, 389, 506, 523, 550, 554, 561, 579, 580, 585, 588, 597, 617, 618, 634, 636, 639, 640, 642, 645, 647, 650, 651], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 206, 340, 636], "export": [101, 229, 309, 313, 362, 366, 559, 590, 603, 618, 620, 646, 649], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 229, 306, 307, 587], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 171, 523], "onnxopschema": 104, "domain": [104, 105, 228, 229, 636, 648], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 178, 208, 209, 214, 215, 223, 308, 313, 345, 366, 379, 417, 422, 506, 554, 556, 562, 578, 598, 610, 614, 617, 625, 636, 637, 645, 648], "get_max_supported_opset_vers": 104, "packag": [104, 560, 588, 593, 617, 618, 637, 643, 648], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 555, 625, 626, 630, 631, 632, 648], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 148, 170, 244, 245, 257, 261, 287, 288, 299, 302, 406, 407, 411, 501, 561, 562, 647], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 200, 501], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 162, 249, 261, 292, 302, 341, 501, 515, 580, 641, 644], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 229, 306, 307, 587], "input_shap": [105, 248, 291, 503, 580], "input_dtyp": 105, "sometim": [105, 556, 582, 639], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 149, 153, 216, 260, 261, 301, 302, 310, 315, 343, 363, 368, 587, 594, 606, 628, 631, 632, 636, 637, 642, 645, 647, 651], "datatyp": [105, 170, 641, 648, 651], "save_protobuf": 105, "path": [105, 140, 148, 150, 163, 170, 200, 216, 220, 225, 244, 245, 246, 261, 287, 288, 289, 302, 303, 306, 307, 308, 319, 320, 321, 323, 332, 337, 341, 343, 345, 346, 359, 371, 379, 384, 386, 387, 389, 392, 393, 400, 422, 423, 439, 445, 501, 506, 508, 517, 545, 547, 550, 556, 557, 560, 580, 582, 585, 591, 596, 597, 598, 599, 603, 606, 617, 620, 622, 625, 630, 631, 632, 635, 642, 647, 650], "as_text": 105, "save": [105, 148, 161, 162, 197, 220, 228, 229, 246, 289, 306, 307, 346, 379, 423, 501, 506, 508, 515, 539, 540, 545, 550, 556, 560, 591, 597, 598, 599, 601, 605, 610, 614, 620, 625, 630, 631, 632, 635, 639, 640, 642, 645], "protobuf": [105, 379, 506, 620], "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 618], "dest": 105, "equal": [105, 143, 148, 176, 442, 508, 550, 636, 642], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 162, 246, 289, 317, 370, 515, 561, 586, 590, 592, 596, 608, 617, 623, 627, 636, 638, 645, 648], "df": 105, "initialize_name_count": 105, "avoid": [105, 162, 170, 171, 244, 287, 515, 518, 523, 556, 646], "conflict": [105, 588], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 261, 302, 647], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 149, 153, 162, 202, 228, 229, 515, 524, 555, 583, 586, 590, 600, 605, 636, 642, 643, 645, 648], "const_node_valu": 105, "graph_output": 105, "constant": [105, 307, 309, 349, 351, 357, 362, 427, 431, 437, 543, 579, 589, 620, 647], "tf": [105, 116, 141, 148, 200, 220, 243, 244, 245, 246, 261, 286, 287, 288, 289, 302, 377, 379, 448, 460, 501, 505, 506, 507, 508, 585, 593, 599, 637, 641, 647], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 561], "quantized_nod": 107, "llm_weight_minmax": 107, "dq": [107, 109, 131, 645], "pair": [107, 228, 229, 561, 579, 597, 598, 643], "befor": [107, 109, 150, 156, 175, 192, 202, 207, 209, 214, 216, 218, 228, 229, 244, 287, 340, 342, 344, 519, 555, 562, 579, 580, 583, 584, 585, 588, 589, 593, 597, 612, 615, 621, 622, 639, 642, 644, 646, 648], "merg": [108, 236, 279, 359, 439, 612, 615, 646, 648], "mergeduplicatedqdqoptim": 108, "y": [109, 228, 229, 261, 302, 349, 427, 582, 588, 603, 645, 647], "shareqdqforitexypatternoptim": 109, "break": [109, 585, 597], "graphanalyz": [110, 498], "extend_engin": [110, 498], "analyz": [110, 200, 379, 498, 506, 644, 645, 646], "under": [110, 150, 228, 229, 246, 289, 400, 498, 508, 524, 538, 545, 549, 555, 557, 559, 580, 594, 596, 597, 600, 605, 606, 617, 625, 635, 636, 637, 640, 642, 646, 648], "singleton": [110, 498, 508, 550], "specifi": [110, 149, 162, 170, 177, 220, 228, 229, 232, 233, 261, 262, 275, 276, 302, 308, 313, 317, 319, 320, 323, 332, 337, 345, 346, 366, 370, 371, 423, 442, 498, 515, 539, 549, 550, 561, 562, 585, 589, 596, 597, 605, 619, 625, 629, 630, 631, 632, 634, 636, 638, 642, 647, 648, 650], "graphrewriterhelp": [110, 498], "encapsul": [110, 232, 233, 275, 276, 371, 423, 498, 539, 599], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 561], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 315, 368, 560, 646, 648], "fakequant": 113, "per_channel": [113, 561, 562, 589, 639, 650], "8": [113, 149, 162, 171, 228, 229, 260, 301, 393, 515, 523, 531, 556, 561, 578, 589, 593, 624, 625, 636, 637, 642, 645, 648, 651], "channel_axi": [113, 173, 176], "symmetr": [113, 149, 150, 386, 387, 389, 545, 562, 639, 642, 647, 648], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 149, 160, 170, 171, 177, 229, 346, 370, 381, 516, 518, 523, 549, 577, 583, 584, 600, 623, 624, 625, 629, 631, 632, 636, 637, 642, 644], "There": [115, 346, 348, 424, 426, 582, 583, 589, 592, 597, 600, 622, 624, 625, 642, 645, 648, 650], "instanc": [115, 116, 177, 196, 228, 229, 232, 233, 262, 275, 276, 314, 315, 317, 320, 323, 326, 327, 329, 330, 331, 349, 361, 367, 368, 370, 371, 423, 427, 441, 524, 539, 547, 550, 554, 555, 556, 560, 577, 597, 602, 608, 642, 648, 650, 651], "global": [115, 202, 228, 229, 326, 327, 329, 330, 331, 340, 441, 550, 556, 597, 636, 638, 648], "class": [116, 152, 160, 170, 197, 203, 210, 324, 371, 423, 516, 533, 556, 557, 561, 579, 580, 583, 596, 597, 608, 634, 635, 639, 643, 646, 648, 650], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 153, 208, 209, 214, 342, 579, 583, 584, 597, 636, 648], "process": [116, 140, 149, 157, 177, 179, 202, 207, 208, 209, 216, 218, 220, 228, 229, 232, 233, 244, 245, 246, 257, 261, 262, 275, 276, 287, 288, 289, 299, 302, 340, 342, 344, 348, 349, 371, 423, 424, 426, 427, 445, 524, 539, 549, 550, 557, 560, 561, 562, 578, 579, 580, 583, 584, 585, 587, 597, 601, 622, 624, 625, 627, 635, 636, 639, 640, 642, 645, 646, 647, 650], "model_nam": [116, 228, 229], "special": [116, 162, 200, 381, 515, 556, 579, 596, 597, 634, 636, 642, 649], "decid": [116, 179, 228, 229, 311, 342, 364, 560, 561, 597, 639, 643, 648], "qat_clone_funct": 116, "leav": [116, 611], "quantizewrapp": [116, 122], "wrapped_lay": [116, 196], "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 589], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 589], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 418, 422, 560], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 160, 162, 192, 229, 259, 309, 319, 323, 324, 325, 362, 393, 395, 460, 462, 500, 515, 516, 530, 531, 534, 542, 554, 580, 584, 585, 587, 591, 593, 597, 639, 645], "herlper": [139, 500], "quantizegraphhelp": [139, 500], "sever": [139, 218, 261, 302, 344, 346, 500, 557, 582, 583, 584, 592, 597, 598, 610, 614, 625, 636, 638, 640, 645, 647, 648, 650], "staticmethod": [139, 500], "function": [139, 140, 160, 183, 208, 209, 214, 228, 229, 232, 233, 245, 275, 276, 288, 320, 323, 332, 337, 384, 445, 500, 516, 555, 556, 557, 560, 561, 562, 577, 579, 583, 584, 587, 591, 592, 593, 595, 596, 597, 598, 608, 618, 624, 625, 636, 639, 642, 643, 644, 645, 646, 648, 649], "smoothquantcalibr": [140, 445], "dataset": [140, 141, 149, 170, 216, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 255, 264, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 298, 309, 313, 314, 315, 317, 346, 362, 366, 367, 368, 370, 371, 423, 445, 448, 503, 523, 539, 542, 557, 559, 560, 561, 579, 585, 590, 596, 597, 605, 619, 620, 630, 636, 639, 642, 643, 645, 648, 650, 651], "outlier": [140, 445, 561, 578, 582, 622, 642, 645], "smoothquantcalibrationllm": [140, 445], "model_path": [140, 148, 171, 445, 501, 519, 531, 582, 630], "temp_path": [140, 445], "weight_name_map": [140, 445], "llm": [140, 141, 149, 156, 215, 445, 448, 519, 559, 636, 637, 640, 642, 645], "eval_func": [140, 232, 233, 275, 276, 346, 347, 349, 352, 353, 354, 355, 371, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 442, 445, 539, 556, 579, 580, 582, 583, 584, 585, 597, 620, 639, 640, 641, 642, 648, 650], "temporari": [140, 170, 445, 550, 554], "store": [140, 193, 195, 197, 200, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 228, 229, 246, 289, 335, 342, 445, 591], "median": [140, 445], "autotrack": [140, 148, 445, 501], "smoothquantscal": [141, 448], "alpha": [141, 161, 165, 175, 195, 217, 395, 448, 460, 521, 639, 648], "scales_per_op": [141, 395, 448, 460], "individu": [141, 202, 340, 417, 422, 448, 554, 625, 636, 645], "smoothquantscalerllm": [141, 448], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 306], "default_opset_vers": 142, "bia": [143, 228, 229, 642, 646], "correct": [143, 176, 220, 228, 229, 313, 314, 315, 317, 341, 366, 367, 368, 370, 554, 600], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 583, 592], "our": [143, 170, 228, 229, 394, 557, 559, 587, 597, 618, 619, 622, 644, 649], "task": [143, 244, 251, 287, 294, 317, 370, 580, 583, 584, 587, 592, 596, 597, 620, 624, 627, 636, 640, 642, 645, 651], "close": [143, 176, 578, 626], "w_int8": [143, 176], "u": [143, 176, 600, 619, 624], "w_fp32": [143, 176], "varianc": [143, 176, 196, 582], "differ": [143, 153, 172, 176, 178, 186, 192, 211, 228, 229, 237, 246, 261, 263, 280, 289, 302, 308, 317, 323, 325, 334, 345, 370, 381, 544, 554, 556, 557, 561, 579, 580, 582, 583, 585, 586, 591, 592, 596, 597, 599, 610, 614, 619, 622, 625, 634, 636, 639, 642, 645, 646, 647, 648], "wise": [143, 159, 161, 163, 171, 176, 228, 229, 349, 352, 387, 427, 428, 432, 514, 517, 522, 559, 561, 592, 622, 636, 642, 645, 646, 648, 649, 650], "minim": [143, 153, 176, 349, 427, 561, 562, 578, 583, 586, 596, 597, 610, 614, 636, 639, 648], "scale_c": [143, 176], "shift": [143, 176, 257, 299, 618, 647], "notic": [143, 176, 262, 594, 598, 620, 643], "first": [143, 149, 162, 170, 176, 178, 201, 226, 228, 229, 244, 287, 313, 359, 366, 428, 439, 508, 515, 523, 550, 556, 557, 560, 561, 562, 580, 582, 593, 598, 602, 611, 612, 615, 618, 620, 621, 622, 638, 639, 641, 642, 644, 645, 646, 648, 650], "empir": [143, 176], "solut": [143, 176, 559, 560, 561, 588, 602, 606, 611, 637, 642, 643, 645, 648, 649], "don": [143, 176, 202, 228, 229, 556, 623, 636, 648], "min": [143, 149, 171, 176, 193, 229, 395, 508, 523, 550, 582, 620, 622, 636, 639, 642, 645, 647, 648], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 177, 179, 183, 200, 406, 407, 411, 546, 556, 608, 630, 631, 632, 644, 646, 648], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 583], "1024": [146, 246, 289, 603], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 508, 550], "version1": [148, 508, 550], "version2": [148, 508, 550], "version1_gt_version2": [148, 508, 550], "greater": [148, 508, 550, 630, 636, 648], "version1_eq_version2": [148, 508, 550], "version1_gte_version2": [148, 508, 550], "version1_lte_version2": [148, 508, 550], "disable_random": [148, 501, 508], "seed": [148, 149, 184, 192, 228, 229, 325, 501, 508, 550, 597, 650], "disabl": [148, 228, 229, 501, 508, 554, 617, 622, 641, 642, 645], "read_graph": [148, 501], "in_graph": [148, 501], "in_graph_is_binari": [148, 501], "write_graph": [148, 501], "out_graph_def": [148, 501], "out_graph_fil": [148, 501], "write": [148, 253, 296, 501, 550, 585, 591, 597, 600, 646], "is_ckpt_format": [148, 501], "ckpt": [148, 371, 379, 423, 501, 506, 651], "folder": [148, 246, 251, 289, 294, 371, 423, 501, 549, 580, 605, 610, 614, 623, 630, 631, 632, 642, 646], "is_saved_model_format": [148, 501], "saved_model": [148, 319, 501, 640], "get_estimator_graph": 148, "estim": [148, 149, 317, 370, 379, 506, 648], "input_fn": [148, 379, 506], "get_tensor_by_nam": [148, 501], "try_cnt": [148, 501], "import": [148, 153, 177, 179, 193, 228, 229, 319, 371, 381, 423, 442, 501, 508, 539, 550, 556, 557, 559, 562, 577, 579, 580, 582, 583, 584, 585, 587, 590, 596, 597, 598, 599, 600, 604, 606, 619, 620, 628, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649], "scope": [148, 501, 555, 561, 597], "onc": [148, 162, 188, 218, 268, 344, 348, 424, 426, 501, 515, 561, 562, 579, 617, 623, 636, 637, 648, 651], "both": [148, 150, 179, 229, 501, 554, 557, 560, 584, 597, 601, 620, 622, 624, 636, 638, 639, 642, 645, 648], "compat": [148, 379, 501, 506, 555, 585, 599, 612, 615, 617, 636, 643], "v1": [148, 256, 257, 299, 314, 315, 317, 367, 368, 370, 379, 501, 506, 585, 587, 588, 596, 599, 621, 636, 643, 644, 645, 651], "suffix": [148, 501], "time": [148, 162, 179, 196, 228, 229, 261, 302, 317, 349, 370, 381, 427, 501, 508, 515, 550, 561, 579, 582, 585, 588, 597, 605, 607, 610, 614, 617, 618, 623, 626, 630, 631, 634, 636, 637, 639, 642, 644, 645, 646, 647, 648], "got": [148, 501, 561, 588, 646], "iterator_sess_run": [148, 501], "sess": [148, 379, 501, 506], "iter_op": [148, 501], "feed_dict": [148, 243, 286, 501], "output_tensor": [148, 379, 501, 506], "measur": [148, 262, 371, 501, 544, 557, 560, 577, 582, 583, 596, 597, 642, 646, 648, 651], "integr": [148, 186, 263, 501, 560, 597, 618, 619, 624, 642], "makeiter": [148, 501], "feed": [148, 243, 286, 501, 583, 636], "end": [148, 153, 207, 208, 209, 214, 228, 229, 244, 260, 261, 287, 301, 302, 342, 348, 424, 426, 501, 560, 561, 562, 583, 584, 589, 593, 597, 611, 627, 634, 636, 646, 647, 648], "predict": [148, 261, 266, 302, 310, 314, 315, 317, 363, 367, 368, 370, 423, 501, 557, 583, 596, 608, 642, 645, 646, 647], "pred": [148, 317, 370, 501, 596], "collate_tf_pr": [148, 501], "collat": [148, 170, 501], "get_input_output_node_nam": [148, 501], "fix_ref_type_of_graph_def": [148, 501], "fix": [148, 212, 214, 244, 287, 342, 501, 579, 580, 604, 636, 639, 642, 648], "strip_unused_lib": [148, 501], "offici": [148, 310, 314, 315, 363, 367, 368, 501, 554, 645], "r1": [148, 501], "15": [148, 501, 589, 593, 631], "branch": [148, 501, 555], "get_graph_def": [148, 501], "auto_input_output": [148, 501], "get_model_input_shap": [148, 501], "get_tensor_val_from_graph_nod": [148, 501], "graph_node_name_map": [148, 501], "kei": [148, 149, 157, 162, 163, 167, 200, 211, 220, 226, 228, 229, 324, 341, 379, 442, 501, 506, 508, 515, 517, 523, 540, 542, 550, 559, 561, 619, 620, 626, 637, 642, 646, 648], "val": [148, 220, 246, 249, 289, 292, 341, 501, 582, 597, 622], "tensor_v": [148, 501], "int8_node_name_revers": [148, 501], "revers": [148, 501, 620], "tf_diagnosis_help": [148, 501], "fp32_model": [148, 157, 170, 307, 501, 550, 560, 640, 642], "quan_model": [148, 501], "save_path": [148, 306, 307, 501, 560, 599], "diagnosi": [148, 228, 229, 501, 597, 620, 621, 622, 637, 643, 649], "generate_feed_dict": [148, 501], "input_tensor": [148, 196, 379, 501, 506], "get_weight_from_input_tensor": [148, 501], "input_tensor_nam": [148, 379, 501, 506], "associ": [148, 162, 313, 366, 501, 515], "search": [148, 156, 171, 192, 193, 200, 214, 225, 229, 232, 233, 275, 276, 308, 310, 320, 323, 324, 325, 345, 349, 363, 386, 427, 501, 519, 522, 523, 550, 559, 592, 596, 600, 601, 611, 636, 637, 642, 645, 646, 648, 649], "look": [148, 211, 501, 560, 562, 589, 596, 619, 620, 622, 645, 650], "sq_weight_tensor": [148, 501], "sq_weights_nod": [148, 501], "two": [148, 157, 162, 177, 201, 206, 213, 218, 246, 251, 262, 289, 294, 313, 340, 344, 346, 353, 366, 433, 501, 515, 550, 555, 556, 557, 579, 580, 583, 585, 587, 589, 597, 598, 624, 625, 627, 636, 639, 641, 642, 644, 645, 648, 650], "apply_inlin": [148, 501], "func": [148, 170, 501, 523, 550, 639, 650], "inlin": [148, 501, 600, 605, 608], "definit": [148, 152, 165, 237, 242, 280, 285, 501, 521, 533], "concret": [148, 501, 648], "new_graph_def": [148, 501], "construct_function_from_graph_def": [148, 501], "frozen_func": [148, 501], "rebuild": [148, 501, 601, 610, 614], "reconstruct": [148, 501, 637], "new_func": [148, 501], "parse_saved_model": [148, 501], "output_tensor_nam": [148, 379, 501, 506], "_saved_model": [148, 501], "load": [148, 160, 162, 163, 244, 260, 261, 287, 301, 302, 371, 379, 423, 501, 506, 508, 513, 514, 516, 517, 549, 550, 561, 579, 610, 614, 618, 620, 638, 639, 640, 645], "reconstruct_saved_model": [148, 501], "trackabl": [148, 501], "destin": [148, 305, 319, 501], "quant_weight_asym": 149, "v": [149, 153, 608, 617, 636, 648, 650], "min_scal": 149, "max_scal": 149, "asymmetr": [149, 562, 639, 642, 648], "e": [149, 162, 202, 228, 229, 515, 524, 554, 555, 583, 586, 590, 600, 605, 606, 610, 614, 636, 642, 645, 648], "perturb": 149, "minimum": [149, 202, 228, 229, 562, 578, 582, 597, 608, 636, 645, 648], "quant_weight_sym": 149, "quant_weight_actor": 149, "quant_weight": [149, 171], "hand": [149, 557], "issu": [149, 554, 555, 558, 559, 593, 620, 622, 639, 646], "quant_weight_w_scal": [149, 171, 523], "round_st": 149, "torch": [149, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 175, 197, 200, 201, 203, 211, 225, 228, 229, 307, 371, 423, 545, 549, 556, 559, 562, 563, 583, 585, 587, 597, 598, 599, 600, 605, 608, 620, 639, 642, 645, 646], "straight": 149, "through": [149, 157, 232, 233, 275, 276, 370, 371, 423, 559, 577, 589, 591, 592, 596, 603, 624, 634, 635, 636, 638, 639, 642], "omniqu": 149, "saveinput": 149, "seqlen": 149, "256": [149, 251, 257, 294, 299, 531, 580, 585, 597, 647], "block_nam": 149, "cach": [149, 244, 287, 524, 588, 639, 642], "get_modul": [149, 163, 167, 517, 523], "nn": [149, 152, 156, 163, 165, 167, 170, 171, 200, 201, 211, 223, 228, 229, 307, 371, 423, 517, 518, 519, 521, 523, 524, 529, 530, 533, 534, 538, 545, 549, 556, 583, 597, 599, 642, 645, 646], "set_modul": [149, 167, 170, 523, 538], "new_modul": [149, 163, 167, 170, 517, 523, 538], "get_scale_shap": 149, "wrapper_block": 149, "enable_minmax_tun": 149, "conv1d": [149, 156, 223, 519, 562], "indic": [149, 162, 178, 179, 185, 196, 228, 229, 237, 242, 244, 280, 285, 287, 303, 313, 324, 366, 386, 387, 389, 515, 556, 579, 588, 620, 625, 646], "unwrapper_block": 149, "unwrap": 149, "wrapperlinear": 149, "wrappertransformerconv1d": 149, "sampling_input": 149, "input_id": [149, 244, 261, 287, 302, 597], "input_oth": 149, "length": [149, 211, 228, 229, 244, 261, 287, 302, 313, 366, 559, 580, 596, 637, 639, 642, 647], "id": [149, 177, 260, 262, 301, 310, 312, 313, 314, 315, 363, 365, 366, 367, 368, 596, 625, 626, 630, 631, 632, 644, 648], "current_input_id": 149, "current_input_oth": 149, "move_input_to_devic": 149, "check_is_cpu": 149, "otherwis": [149, 162, 246, 261, 289, 302, 515, 550, 554, 561, 580, 612, 615, 638, 642, 647], "block_forward": 149, "amp_dtyp": 149, "automat": [149, 198, 200, 201, 228, 229, 246, 249, 256, 257, 289, 292, 299, 308, 318, 345, 556, 559, 577, 580, 592, 597, 598, 600, 602, 605, 606, 608, 610, 611, 612, 614, 615, 617, 624, 627, 635, 636, 639, 645, 647, 648], "mix": [149, 155, 164, 228, 229, 347, 359, 371, 425, 439, 524, 559, 560, 567, 592, 600, 606, 607, 608, 649], "precis": [149, 155, 164, 228, 229, 232, 233, 275, 276, 308, 315, 317, 318, 345, 347, 359, 368, 370, 371, 381, 425, 428, 439, 524, 550, 559, 560, 561, 567, 577, 578, 584, 585, 589, 592, 600, 606, 607, 608, 637, 638, 639, 642, 645, 648, 649], "collect_round_v": 149, "collect_minmax_scal": 149, "get_batch_dim": 149, "posit": [149, 179, 196, 261, 302, 534, 554, 596, 600, 625, 630, 631, 632], "dim": [149, 261, 302, 645, 647], "wrappermultiblock": 149, "module_list": 149, "act": [149, 220, 242, 285, 554], "singl": [149, 195, 218, 228, 229, 237, 244, 261, 280, 287, 302, 313, 342, 344, 366, 370, 393, 423, 556, 580, 582, 593, 623, 636, 640, 645], "get_block_nam": 149, "network": [149, 157, 195, 202, 203, 342, 430, 524, 557, 578, 583, 584, 587, 597, 619, 637, 639, 645, 648], "get_tokenizer_funct": 149, "token": [149, 244, 255, 258, 261, 287, 298, 300, 302, 309, 310, 311, 362, 363, 364, 545, 580, 596, 597, 619, 620, 642, 644, 645, 647, 648], "truncat": [149, 244, 261, 287, 302, 580, 647], "field": [149, 179, 228, 229, 246, 289, 313, 366, 556, 560, 562, 585, 597, 644, 648, 650], "get_dataload": 149, "data_nam": 149, "neelnanda": 149, "pile": 149, "10k": [149, 586, 590], "42": [149, 192, 229, 325, 651], "test": [149, 177, 228, 229, 261, 302, 555, 559, 582, 593, 625, 630, 651], "shuffl": [149, 234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 503, 579, 597, 639], "enable_full_rang": [149, 150, 154, 171, 523, 545, 640, 642], "cuda": [149, 162, 220, 515, 524, 598, 600, 602, 636, 639], "lr_schedul": [149, 597, 636], "dataset_nam": [149, 621], "dataset_split": 149, "use_quant_input": 149, "lr": [149, 153, 228, 229, 583, 585, 597], "005": [149, 642], "minmax_lr": 149, "low_gpu_mem_usag": 149, "200": [149, 260, 301, 556, 626, 648], "512": 149, "sampler": [149, 179, 234, 236, 238, 239, 240, 243, 264, 277, 279, 281, 282, 283, 286, 298, 309, 358, 438, 503, 579, 585], "rand": [149, 600, 645], "n_block": [149, 171, 518, 642], "gradient_accumulate_step": 149, "not_use_ms": 149, "dynamic_max_gap": 149, "data_typ": [149, 154, 171, 361, 441, 518], "signround": 149, "advanc": [149, 157, 228, 229, 554, 559, 561, 567, 595, 636, 639, 642, 650], "cheng": 149, "wenhua": 149, "et": [149, 153, 157, 578, 642, 645], "al": [149, 153, 157, 578, 642, 645], "via": [149, 308, 332, 337, 345, 554, 559, 585, 592, 597, 600, 617, 636, 637], "sign": [149, 196, 361, 441, 555, 559, 562, 578, 619, 637, 639, 642, 644], "gradient": [149, 153, 195, 326, 559, 592, 597, 636, 637, 651], "descent": [149, 153, 200, 559, 637], "arxiv": [149, 156, 195, 196, 214, 215, 222, 342, 519, 531, 559, 578, 636, 637, 642, 645], "preprint": [149, 578, 636, 642, 645], "2309": 149, "05516": 149, "2023": [149, 559, 632, 636, 642, 645, 651], "pytorch": [149, 186, 188, 189, 197, 200, 203, 206, 207, 210, 215, 216, 223, 228, 229, 243, 244, 246, 249, 253, 261, 263, 268, 270, 286, 287, 289, 292, 296, 302, 307, 308, 317, 318, 338, 340, 343, 345, 353, 362, 370, 371, 380, 423, 433, 543, 550, 555, 556, 557, 559, 560, 561, 562, 578, 579, 583, 584, 586, 589, 592, 593, 595, 597, 598, 599, 600, 602, 605, 606, 607, 608, 617, 619, 628, 631, 632, 636, 637, 638, 642, 643, 645, 648, 650], "empti": [149, 163, 179, 228, 229, 517, 603, 640], "layer1": [149, 200, 228, 229, 597, 636, 639], "layer_nam": [149, 224, 229, 636], "rang": [149, 150, 171, 247, 248, 261, 290, 291, 302, 386, 400, 442, 503, 518, 522, 523, 539, 545, 559, 560, 562, 578, 580, 582, 583, 584, 585, 597, 620, 622, 635, 636, 639, 642, 645, 647], "learn": [149, 153, 559, 560, 561, 579, 580, 587, 591, 592, 593, 597, 598, 600, 602, 605, 606, 608, 611, 612, 615, 617, 636, 637, 639, 645, 646, 648, 649], "rate": [149, 153, 597, 636, 639], "schedul": [149, 194, 197, 207, 208, 209, 214, 215, 217, 228, 229, 309, 338, 342, 362, 597, 624, 625, 627, 635], "futur": [149, 175, 232, 233, 264, 275, 276, 592, 595, 597, 608, 630, 631, 632, 649], "accumul": [149, 358, 438, 648], "step": [149, 153, 195, 206, 207, 208, 209, 213, 214, 218, 228, 229, 340, 342, 344, 539, 561, 562, 582, 583, 584, 585, 597, 612, 615, 617, 630, 631, 632, 635, 636, 638, 641, 642, 644, 645, 646, 648], "squar": [149, 317, 352, 370, 432, 582, 596, 622, 648], "gap": [149, 582, 599], "addit": [149, 170, 229, 539, 561, 562, 583, 611, 619, 625, 642, 643, 648], "keyword": [149, 162, 229, 515], "argument": [149, 162, 229, 442, 515, 534, 557, 582, 621, 622, 625, 628, 630, 631, 632, 642], "autooptround": 149, "adamw": [149, 188, 268], "autoadamround": 149, "export_compressed_model": [150, 519, 522, 531, 545, 642], "compression_dtyp": [150, 545, 642], "int32": [150, 171, 518, 522, 545, 580, 642], "compression_dim": [150, 545, 642], "scale_dtyp": [150, 545, 642], "float32": [150, 247, 248, 261, 290, 291, 302, 313, 366, 503, 545, 560, 577, 580, 597, 639, 642, 645, 647], "use_optimum_format": [150, 545, 642], "weightonlylinear": [150, 642], "json": [150, 170, 245, 261, 288, 302, 549, 580, 599, 618, 625, 626, 630, 631, 632, 642, 647], "compress": [150, 156, 309, 332, 337, 362, 381, 519, 539, 545, 552, 559, 567, 583, 592, 597, 617, 619, 634, 635, 636, 637, 639, 645, 649, 651], "comoress": [150, 545], "select": [150, 171, 217, 220, 229, 244, 287, 522, 523, 545, 556, 557, 578, 592, 593, 617, 636, 639, 642, 646, 648], "choos": [150, 171, 246, 289, 518, 522, 523, 545, 592, 605, 637, 643, 645, 648, 650], "popular": [150, 309, 362, 552, 559, 560, 561, 578, 583, 586, 587, 590, 595, 597, 636, 639, 642, 648, 649], "huggingfac": [150, 200, 211, 244, 287, 545, 580, 586, 590, 605, 606, 607, 608, 628, 629, 631, 632, 645, 651], "why": [150, 645, 646], "g_idx": 150, "instead": [150, 153, 225, 226, 229, 243, 286, 550, 603, 605, 608, 623, 636, 642], "record": [150, 157, 170, 186, 189, 244, 245, 246, 252, 263, 270, 287, 288, 289, 295, 523, 550, 580, 622, 642, 644, 646, 648], "order": [150, 161, 170, 196, 310, 311, 346, 349, 352, 361, 363, 364, 387, 427, 432, 441, 556, 582, 596, 620, 638, 642, 645, 646, 648], "packed_weight": 150, "qweight": 150, "5": [150, 161, 175, 179, 186, 196, 228, 229, 248, 257, 263, 291, 299, 317, 370, 393, 395, 423, 460, 560, 580, 587, 589, 593, 596, 597, 622, 627, 630, 631, 636, 638, 639, 642, 645, 647, 648, 650, 651], "alwai": [150, 266, 313, 366, 370, 423, 582, 596, 597, 622, 642], "even": [150, 640, 642, 645], "modul": [152, 158, 159, 197, 203, 210, 322, 328, 338, 339, 514, 520, 532, 556, 579, 583, 592, 596, 597, 599, 636, 638, 641, 642, 646, 649], "sgd": [153, 188, 228, 229, 268, 583, 597, 638, 650], "param": [153, 170, 177, 188, 234, 262, 268, 277, 317, 349, 370, 427, 503, 550, 560, 599, 648], "requir": [153, 170, 171, 228, 229, 235, 346, 379, 422, 506, 518, 523, 524, 556, 560, 561, 577, 578, 579, 582, 584, 585, 589, 597, 598, 599, 601, 611, 617, 619, 624, 625, 628, 631, 632, 636, 639, 642, 643, 644, 645, 646, 648, 650], "momentum": [153, 195, 342, 592, 597, 636, 650], "weight_decai": [153, 193, 597, 650], "nesterov": [153, 597, 650], "maxim": [153, 597, 636, 648], "foreach": 153, "differenti": 153, "stochast": 153, "align": [153, 261, 302, 554, 642, 647], "rule": [153, 582, 600, 636], "110mm": 153, "4pt": 153, "textbf": 153, "gamma": 153, "theta_0": 153, "f": [153, 162, 197, 515, 583, 585, 639, 642, 645], "theta": 153, "lambda": [153, 162, 515, 640], "decai": 153, "hspace": 153, "13mm": 153, "mu": [153, 582], "tau": 153, "textit": 153, "ex": 153, "ldot": 153, "5mm": 153, "g_t": 153, "leftarrow": 153, "nabla_": 153, "f_t": 153, "theta_": 153, "neq": 153, "10mm": 153, "15mm": 153, "_t": 153, "_": [153, 232, 233, 275, 276, 423, 556, 557, 559, 560, 561, 578, 582, 583, 585, 587, 589, 597, 598, 599, 600, 606, 610, 612, 614, 615, 622, 625, 626, 634, 636, 639, 642, 643, 644, 645, 646, 648, 650], "g_": 153, "theta_t": 153, "bf": 153, "formula": [153, 636, 645], "On": [153, 639, 651], "deep": [153, 226, 508, 559, 560, 561, 579, 592, 593, 597, 598, 600, 602, 605, 606, 608, 611, 617, 637, 639, 648, 649, 651], "l2": [153, 229, 636], "penalti": [153, 310, 311, 363, 364, 596], "xdoctest": [153, 162, 515], "skip": [153, 162, 515, 646, 648], "9": [153, 195, 228, 229, 556, 593, 597, 636, 638, 645, 648, 650, 651], "zero_grad": [153, 585, 597, 636], "loss_fn": 153, "backward": [153, 524, 539, 583, 584, 585, 597, 635, 636, 639, 643], "subtli": 153, "sutskev": 153, "some": [153, 198, 200, 228, 229, 244, 287, 341, 561, 562, 580, 582, 587, 593, 596, 597, 619, 620, 621, 622, 625, 634, 636, 639, 641, 642, 645, 646, 648, 649, 651], "written": [153, 597], "v_": 153, "p_": 153, "denot": [153, 645], "veloc": 153, "respect": [153, 554, 589, 636, 645, 650], "contrast": [153, 202, 340, 647], "emploi": 153, "form": [153, 315, 368, 582, 583, 617], "analog": 153, "modifi": [153, 211, 246, 289, 422, 441, 556, 562, 585, 589, 621, 622, 636, 650], "d_p_list": 153, "momentum_buffer_list": 153, "has_sparse_grad": 153, "see": [153, 160, 196, 222, 261, 302, 310, 363, 516, 524, 554, 555, 556, 558, 594, 597, 610, 611, 614, 617, 618, 622, 623, 642, 645, 646, 648], "actawareweightqu": [154, 518], "example_input": [154, 164, 167, 169, 170, 171, 228, 229, 307, 518, 523, 534, 549, 587], "algo": [154, 450, 518, 542], "bf16modulewrapp": 155, "bf16modul": 155, "mixed_precision_model": 155, "bf16_symbolic_trac": 155, "fx_sub_module_list": 155, "trace": [155, 157, 168, 170, 200, 228, 229, 307, 430, 556, 607, 648], "_description_": 155, "is_leaf": [156, 519], "judg": [156, 519], "trace_gptq_target_block": [156, 519], "module_typ": [156, 519], "modulelist": [156, 519], "sequenti": [156, 242, 285, 346, 348, 424, 426, 519, 648], "stack": [156, 519], "structur": [156, 201, 212, 213, 228, 229, 342, 360, 440, 519, 550, 592, 616, 618, 621, 630, 636, 637, 639, 646, 649, 651], "critic": [156, 211, 519, 554], "gptq_related_block": [156, 519], "embed": [156, 170, 519, 578, 636], "transformers_pr": [156, 519], "todo": [156, 244, 247, 287, 290, 313, 359, 366, 439, 503, 519], "transformers_nam": [156, 519], "find_lay": [156, 223, 519], "find_layers_nam": [156, 519], "log_quantizable_layers_per_transform": [156, 519], "transformer_block": [156, 519], "maxq": [156, 519], "gptquantiz": [156, 519], "nsampl": [156, 171, 222, 519, 642], "use_max_length": [156, 171, 519, 642], "pad_max_length": [156, 171, 642], "layer_wis": [156, 171, 513, 549, 640], "pretrain": [156, 519, 545, 600, 606], "url": [156, 246, 289, 519, 555, 594, 628, 629, 636], "org": [156, 195, 196, 214, 215, 222, 313, 342, 366, 519, 531, 556, 582, 593, 612, 615, 636], "2210": [156, 519, 531, 642], "17323": [156, 519, 531, 642], "node_collector": 157, "hook": [157, 185, 189, 211, 270, 271, 332, 337, 542, 583, 584, 597, 636, 645, 646], "hessiantrac": 157, "q_model": [157, 161, 229, 319, 423, 459, 462, 556, 559, 579, 580, 582, 585, 587, 590, 591, 596, 597, 599, 619, 620, 639, 640, 641, 642], "criterion": [157, 179, 185, 187, 188, 194, 195, 202, 207, 208, 209, 211, 214, 215, 219, 228, 229, 265, 268, 309, 362, 583, 584, 597, 636, 639, 645, 648, 650], "yao": 157, "zhewei": 157, "pyhessian": 157, "len": [157, 229, 261, 302, 580, 585, 647], "2020": 157, "ieee": [157, 598, 645], "intern": [157, 242, 285, 359, 439, 579, 580, 596, 636], "confer": [157, 636, 645], "big": [157, 582, 642], "dong": 157, "zhen": 157, "hawq": [157, 430, 648], "v2": [157, 430, 579, 585, 587, 588, 593, 606, 643, 645, 648, 649, 651], "system": [157, 162, 177, 262, 515, 550, 577, 603, 636, 651], "33": [157, 651], "18518": 157, "18529": 157, "openvinotoolkit": 157, "nncf": 157, "develop": [157, 381, 555, 556, 593, 597, 598, 600, 606, 617, 623, 636, 637, 641, 644], "hessian_trac": 157, "compare_weight": 157, "float_dict": 157, "ani": [157, 162, 313, 315, 358, 366, 368, 417, 422, 438, 442, 515, 524, 534, 547, 550, 554, 559, 562, 585, 600, 605, 618, 619, 623, 624, 636, 644, 648], "quantized_dict": 157, "compar": [157, 317, 370, 550, 584, 596, 620, 636, 639, 642, 644, 646, 648], "being": [157, 313, 366, 562, 625], "wt_compare_dict": 157, "float_model": 157, "state_dict": [157, 585, 642, 646], "qmodel": 157, "compute_error": 157, "state": [157, 201, 524, 562, 603, 636], "weight_dict": 157, "hawq_top": 157, "enable_act": 157, "portabl": [160, 516], "serial": [160, 162, 515, 516], "copyreg": [160, 516], "mechan": [160, 195, 516, 636, 644, 649], "pickler": [160, 516], "pickletool": [160, 516], "comment": [160, 516, 554, 561, 580, 596, 597, 642, 647], "unpickl": [160, 162, 515, 516], "misc": [160, 516, 594], "format_vers": [160, 516], "compatible_format": [160, 516], "except": [160, 162, 442, 515, 516, 550, 623, 639, 640], "pickleerror": [160, 516], "pickl": [160, 162, 515, 516], "picklingerror": [160, 516], "unpicklingerror": [160, 516], "problem": [160, 244, 287, 317, 370, 516, 596, 598, 618], "secur": [160, 516, 559, 619, 637, 652], "violat": [160, 516], "also": [160, 201, 243, 246, 261, 286, 289, 302, 310, 363, 370, 381, 423, 516, 524, 555, 557, 560, 561, 562, 579, 582, 586, 590, 592, 596, 597, 600, 605, 610, 611, 614, 617, 618, 619, 622, 623, 634, 636, 637, 639, 641, 642, 645, 648], "includ": [160, 186, 195, 200, 202, 217, 219, 228, 229, 244, 246, 253, 261, 263, 287, 289, 296, 302, 308, 318, 340, 345, 442, 516, 524, 550, 554, 560, 561, 562, 579, 580, 582, 593, 594, 595, 596, 597, 600, 603, 606, 611, 623, 627, 630, 631, 632, 636, 639, 641, 642, 646, 648], "necessarili": [160, 516], "limit": [160, 193, 349, 427, 516, 550, 559, 582, 583, 595, 639, 642, 643, 646], "attributeerror": [160, 442, 516], "eoferror": [160, 516], "importerror": [160, 516, 588], "indexerror": [160, 516], "layerwisequ": 161, "pretrained_model_name_or_path": [161, 163, 517], "op_cfg": 161, "output_dir": [161, 545, 597, 605, 606, 621, 622, 628, 631, 632], "memomeri": 161, "file_lik": [162, 515], "map_loc": [162, 515], "pickle_modul": [162, 197, 515], "weights_onli": [162, 515], "pickle_load_arg": [162, 515], "facil": [162, 515], "treat": [162, 515, 579], "storag": [162, 515, 559, 590, 596, 619, 622, 642, 645], "thei": [162, 262, 442, 515, 554, 583, 589, 597, 605, 620, 623, 634], "deseri": [162, 515], "were": [162, 317, 370, 515, 603, 636], "fail": [162, 515, 556, 579, 587, 626], "becaus": [162, 179, 206, 211, 261, 302, 340, 515, 556, 622, 639, 645, 647, 648], "doesn": [162, 261, 302, 515, 560, 585, 597, 598, 618, 650], "certain": [162, 223, 515, 644], "howev": [162, 515, 623, 636, 642, 645], "altern": [162, 228, 229, 423, 515], "callabl": [162, 228, 229, 315, 368, 393, 446, 459, 462, 515, 529, 534, 539, 579], "locat": [162, 172, 220, 261, 302, 515, 585, 603, 610, 614, 617, 625, 639, 643, 647, 650], "resid": [162, 515], "tag": [162, 379, 506, 515, 645, 646], "wa": [162, 179, 228, 229, 515, 560, 597, 622, 623, 626, 637, 648], "builtin": [162, 515, 585], "device_id": [162, 515], "either": [162, 229, 313, 366, 515, 601, 605, 625, 635, 638, 639], "final": [162, 200, 207, 220, 342, 515, 561, 597, 603, 634, 636, 639, 643, 648], "alreadi": [162, 177, 246, 260, 262, 289, 301, 515, 560, 580, 592, 612, 615, 619, 628, 648], "right": [162, 257, 299, 313, 366, 515, 554, 555, 556, 617, 623, 645, 647], "fall": [162, 170, 515], "back": [162, 170, 261, 267, 302, 515, 582, 617, 623], "behavior": [162, 515, 554, 560, 561, 562, 589, 599, 642, 646, 648, 650], "wasn": [162, 515], "appear": [162, 515, 554, 611, 617, 619], "ones": [162, 313, 366, 515, 636], "put": [162, 246, 289, 515, 580, 583], "user": [162, 177, 188, 200, 212, 220, 228, 229, 232, 233, 246, 249, 253, 261, 262, 268, 275, 276, 289, 292, 296, 302, 308, 332, 337, 343, 345, 346, 370, 371, 381, 423, 428, 441, 515, 539, 550, 556, 557, 559, 560, 561, 562, 567, 577, 579, 583, 584, 587, 589, 592, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 611, 617, 624, 625, 626, 627, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 643, 645, 646, 647, 648, 652], "register_packag": [162, 515], "readlin": [162, 515], "tell": [162, 370, 423, 515, 638], "seek": [162, 515, 642], "o": [162, 442, 515, 593, 602, 620], "pathlik": [162, 515], "metadata": [162, 515], "primit": [162, 515], "unless": [162, 515, 589], "implicitli": [162, 515], "known": [162, 264, 349, 427, 515, 597, 636, 639, 646, 648], "insecur": [162, 515, 619], "possibl": [162, 262, 515, 524, 582, 619, 635, 636, 640, 641, 648], "construct": [162, 244, 247, 248, 251, 259, 264, 266, 267, 269, 287, 290, 291, 294, 370, 375, 379, 441, 503, 505, 506, 515, 542, 554, 561, 562, 580, 585, 636, 648], "malici": [162, 515], "arbitrari": [162, 515, 597, 635], "code": [162, 200, 232, 233, 262, 275, 276, 319, 343, 346, 423, 515, 539, 556, 559, 560, 561, 562, 580, 583, 584, 585, 591, 592, 594, 596, 600, 602, 604, 605, 606, 608, 611, 617, 621, 622, 624, 625, 626, 634, 635, 636, 637, 638, 639, 644, 645, 646, 647], "never": [162, 515, 648], "could": [162, 167, 175, 202, 232, 233, 246, 275, 276, 289, 346, 371, 423, 515, 539, 554, 556, 584, 597, 635, 636, 639, 642, 645, 649], "come": [162, 515, 595, 648], "untrust": [162, 515], "unsaf": [162, 515], "tamper": [162, 515], "trust": [162, 515, 582, 619], "load_state_dict": [162, 515], "ram": [162, 515], "surg": [162, 515], "checkpoint": [162, 379, 506, 515, 549, 599], "By": [162, 200, 228, 229, 310, 363, 515, 561, 562, 596, 599, 610, 611, 614, 636, 637, 642, 648], "decod": [162, 256, 257, 299, 310, 363, 515, 596, 647], "byte": [162, 515], "utf": [162, 260, 301, 515], "unicodedecodeerror": [162, 515], "ascii": [162, 515], "codec": [162, 515], "0x": [162, 515], "incorrect": [162, 515], "extra": [162, 315, 368, 515, 597, 642], "encod": [162, 313, 366, 515, 620, 647], "latin1": [162, 515], "them": [162, 200, 244, 287, 515, 556, 562, 579, 582, 587, 589, 591, 620, 623, 635, 636, 642, 648], "keep": [162, 211, 220, 341, 428, 515, 556, 560, 616, 617, 643], "later": [162, 167, 175, 515, 624, 625, 646], "byte_arrai": [162, 515], "undefin": [162, 220, 341, 515], "filepath": [162, 515, 550], "pt": [162, 515, 549, 593, 599, 621, 637, 639, 641, 642], "onto": [162, 515], "loc": [162, 515], "bytesio": [162, 515], "open": [162, 265, 309, 362, 515, 542, 552, 554, 559, 587, 588, 597, 612, 615, 618, 619, 623, 624, 625, 637], "rb": [162, 515], "buffer": [162, 515], "get_children": [163, 517], "get_named_children": [163, 517], "dowload_hf_model": [163, 517], "repo_id": [163, 517], "cache_dir": [163, 517], "repo_typ": [163, 517], "revis": [163, 517], "download": [163, 246, 289, 517, 580, 582, 593, 622, 628, 643], "hug": [163, 517, 559, 624, 637], "face": [163, 517, 554, 559, 567, 600, 604, 624, 626, 637, 643, 651], "hf": [163, 517, 595, 645, 651], "hub": [163, 517, 559, 586, 590, 608], "load_empty_model": [163, 517, 640], "automodelforcausallm": [163, 517], "get_super_module_by_nam": [163, 517], "module_nam": [163, 195, 197, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 342, 508, 517, 550], "father": [163, 200, 517], "update_modul": [163, 517], "load_layer_wise_quantized_model": [163, 517], "load_tensor_from_shard": [163, 517], "shard": [163, 517], "load_tensor": [163, 517], "ipex_mixed_precis": 164, "fakeaffinetensorquantfunct": [165, 521], "affin": [165, 521, 639], "teqlinearfakequ": [165, 521], "orig_lay": [165, 521], "mullinear": [165, 171, 518, 521], "input_scal": [165, 521], "detector": 166, "transformerbasedmodelblockpatterndetector": 166, "pattern_lst": 166, "block_pattern": 166, "detect": [166, 170, 200, 228, 229, 313, 317, 366, 370, 375, 555, 556, 600, 607, 608, 636, 648], "ffn": [166, 211], "torchsmoothqu": [167, 645], "q_func": [167, 232, 233, 275, 276, 347, 349, 352, 353, 354, 355, 424, 425, 427, 428, 430, 432, 433, 434, 435, 560, 561, 597, 648], "traced_model": [167, 168], "whose": [167, 175, 202, 341, 379, 506, 591, 645, 648], "absorb": [167, 170, 171, 175, 518, 523, 642], "trace_and_fuse_sub_graph": 168, "is_qat": 168, "tequant": 169, "absorb_to_lay": [169, 170, 171, 523], "extra_config": [169, 171], "trainabl": [169, 559, 637, 642], "move_input_devic": 170, "auto": [170, 178, 198, 200, 228, 229, 347, 362, 393, 425, 431, 530, 550, 556, 578, 600, 603, 605, 607, 608, 636, 639, 642], "kind": [170, 597], "forward_wrapp": 170, "get_embedding_contigu": 170, "contigu": 170, "is_fused_modul": 170, "_propagate_qconfig_help": 170, "collate_torch_pr": 170, "collate_result": 170, "input2tupl": 170, "append_attr": 170, "fx_model": 170, "fx_white_list": 170, "append": [170, 346, 349, 427, 556, 584, 597, 635], "graphmodul": [170, 556, 641], "dir": [170, 244, 287, 545, 549, 580, 588, 591], "generate_activation_observ": 170, "smooth_quant_en": 170, "observ": [170, 562, 642, 644, 646, 648], "what": [170, 207, 242, 285, 370, 423, 539, 554, 637], "check_cfg_and_qconfig": 170, "op_infos_from_cfg": 170, "output_tensor_ids_op_nam": 170, "paser_cfg": 170, "ops_nam": 170, "get_quantizable_ops_from_cfg": 170, "input_tensor_ids_op_nam": 170, "update_sq_scal": 170, "ipex_config_path": 170, "smoothquant_scale_info": 170, "ipex_config": 170, "auto_copi": 170, "fetch_modul": [170, 523, 538], "op_nam": [170, 225, 228, 229, 360, 440, 523, 538, 550, 551, 561, 597, 636, 646], "simple_infer": 170, "get_example_input": [170, 523], "example_inp": [170, 523], "get_fallback_ord": 170, "confidence_batch": [170, 648], "fallback": [170, 229, 352, 353, 430, 432, 433, 587, 598, 620, 641, 648], "requantize_cfg": 170, "confid": 170, "ordered_op": 170, "get_mse_order_per_fp32": 170, "influenc": [170, 636], "last": [170, 195, 220, 228, 229, 579, 598, 600, 602, 607, 611, 639, 642, 645], "fallback_ord": 170, "get_mse_order_per_int8": 170, "get_torch_vers": 170, "match_datatype_pattern": 170, "calculate_quant_min_max": 170, "unsign": [170, 361, 441, 562, 642], "qmin": 170, "qmax": 170, "get_depth": 170, "depth": [170, 583, 641], "get_dict_at_depth": 170, "target_depth": 170, "nest": [170, 226, 508], "get_element_under_depth": 170, "ops_lst": 170, "get_op_type_by_nam": 170, "quantizable_op": 170, "collect_weight_info": 170, "fc": [170, 229, 636], "_type_": [170, 545], "get_module_input_output": [170, 523], "module_hook_config": [170, 523], "input_func": [170, 523], "output_func": [170, 523], "help": [170, 189, 270, 319, 523, 595, 599, 600, 606, 617, 625, 630, 631, 632, 642, 648, 649], "module_name_list": [170, 523], "fc1": [170, 171, 518, 523], "preprocess": [170, 228, 229, 244, 261, 287, 302, 441, 523, 542, 585, 647], "usag": [170, 178, 179, 243, 286, 313, 319, 346, 366, 400, 442, 508, 523, 538, 561, 580, 585, 586, 600, 608, 619, 625, 630, 631, 632, 634, 638, 642, 647], "input_valu": [170, 523], "output_valu": [170, 523], "total_valu": [170, 523], "get_absorb_lay": [170, 523], "supported_lay": [170, 523], "no_absorb_lay": [170, 523], "allow": [170, 349, 427, 523, 524, 583, 585, 596, 597, 598, 619, 624, 636, 638, 642, 645, 648, 650], "absorpt": [170, 523], "eg": [170, 226, 246, 289, 508, 523, 580, 638], "absorbed_1": [170, 523], "xx": [170, 523], "get_block_prefix": [170, 523], "block_list": [170, 523], "block_num": [170, 523], "block_prefix": [170, 523], "get_hidden_st": [170, 523], "calib": [170, 523, 561], "rest": [170, 523, 624, 625, 630, 631, 632], "part": [170, 198, 207, 340, 342, 523, 556, 593, 598, 612, 615, 625, 627, 636, 640, 645, 649], "total_block_kwarg": [170, 523], "total_block_arg": [170, 523], "quantize_4bit": [171, 523], "quantil": [171, 522, 523, 648], "nf4": [171, 522, 523, 559, 642], "return_int": [171, 518, 523, 642], "fp4": [171, 522, 523, 559, 642], "q_tensor": [171, 523], "qdq_weight_asym": [171, 523], "qdq_weight_sym": [171, 523], "full_rang": [171, 523], "amax": [171, 523], "qdq_weight_actor": [171, 523], "place": [171, 523, 584, 593, 630, 636, 646, 648], "search_clip": [171, 523], "best": [171, 179, 185, 261, 302, 303, 308, 345, 352, 386, 432, 523, 554, 557, 593, 600, 606, 617, 623, 634, 639, 642, 645, 647, 648], "num": [171, 522, 523, 550], "best_clip_ratio": [171, 523], "group_dim": [171, 522, 531, 642], "gptq_perm": 171, "perm": [171, 261, 302, 647], "absorb_lay": [171, 518], "absorb_dict": [171, 518], "absorbed_lay": [171, 518], "fc3": [171, 518], "oom": [171, 518], "teq_quant": 171, "algorithm_registri": 172, "algorithm_typ": 172, "registr": [172, 246, 253, 261, 289, 296, 302, 335], "algorithmschedul": 172, "conf": [172, 177, 185, 229, 232, 233, 262, 275, 276, 319, 326, 327, 329, 330, 331, 332, 337, 347, 349, 352, 353, 354, 355, 359, 371, 381, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 439, 442, 539, 556, 557, 559, 562, 577, 583, 590, 591, 597, 598, 599, 619, 621, 622, 635, 639, 640, 641, 642, 644, 645, 648], "control": [172, 228, 229, 556, 597, 623, 636, 648], "phase": [172, 557, 597, 636, 639, 641, 648], "fastbiascorrect": [173, 176], "fast_bias_correct": [174, 228, 229, 362, 639], "weight_correct": [174, 228, 229, 362, 639], "weightcorrect": 176, "1e": [176, 645, 650], "05": [176, 229, 317, 370, 395, 596, 645, 651], "evalu": [177, 179, 185, 202, 228, 232, 233, 244, 262, 275, 276, 287, 303, 310, 313, 314, 315, 317, 319, 363, 366, 367, 368, 370, 371, 381, 393, 423, 539, 542, 557, 560, 561, 580, 583, 584, 591, 592, 595, 596, 597, 598, 600, 606, 608, 611, 617, 634, 636, 639, 644, 645, 646, 648, 650], "set_env_var": [177, 262], "env_var": [177, 262], "overwrite_exist": [177, 262], "env": [177, 262, 588, 630, 631, 632], "set_all_env_var": [177, 262], "physic": [177, 262, 554, 577, 625], "core": [177, 228, 229, 262, 385, 555, 577, 594, 610, 614, 625, 651], "get_architectur": [177, 262], "architectur": [177, 262, 320, 323, 559, 577, 583, 597, 624, 636, 637, 642, 649], "get_threads_per_cor": [177, 262], "thread": [177, 228, 229, 262, 417, 422, 524, 579, 627], "get_thread": [177, 262], "get_physical_id": [177, 262], "socket": [177, 262, 550, 625, 627, 651], "get_core_id": [177, 262], "get_bounded_thread": [177, 262], "core_id": [177, 262], "bind": [177, 262], "run_inst": 177, "b_dataload": [177, 228, 229, 577, 597], "b_func": [177, 577], "benchmarkconfig": [177, 228, 229, 577, 582, 597], "goal": [177, 179, 303, 308, 332, 337, 345, 371, 423, 561, 579, 635, 639, 648], "prefer": [177, 308, 345, 423, 636, 642], "space": [177, 192, 193, 208, 209, 214, 215, 228, 229, 232, 233, 275, 276, 308, 315, 320, 323, 324, 325, 345, 349, 352, 359, 368, 371, 423, 427, 432, 439, 554, 555, 557, 560, 561, 562, 636, 639, 645, 650], "etc": [177, 185, 260, 301, 303, 308, 315, 332, 337, 345, 368, 371, 423, 549, 559, 583, 592, 619, 623, 636, 644, 648], "generate_prefix": 177, "core_list": 177, "command": [177, 262, 539, 582, 585, 600, 602, 605, 610, 614, 618, 619, 621, 622, 623, 625], "numactl": [177, 588, 603, 611], "call_on": 177, "cmd": 177, "log_fil": [177, 416, 421], "window": [177, 577, 593, 617, 618], "config_inst": 177, "raw_cmd": 177, "multi": [177, 198, 200, 211, 313, 366, 370, 423, 557, 579, 580, 592, 597, 634, 636, 639, 648], "trigger": [177, 207, 342], "summary_benchmark": 177, "summari": [177, 539, 582, 612, 615, 646, 651], "profil": [177, 229, 362], "benchmark_with_raw_cmd": 177, "fit_with_raw_cmd": 177, "cores_per_inst": [177, 228, 229, 577, 597, 638], "num_of_inst": [177, 228, 229, 577, 597, 638], "fit": [177, 202, 228, 229, 349, 371, 423, 427, 442, 539, 556, 559, 577, 579, 580, 582, 585, 590, 591, 596, 597, 598, 599, 619, 620, 636, 639, 640, 641, 642], "pb": [177, 228, 229, 371, 379, 423, 506, 559, 577, 585, 590, 597, 599, 619, 622, 630, 646, 651], "eval_dataload": [177, 228, 229, 232, 233, 275, 276, 346, 347, 349, 352, 353, 354, 355, 371, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 539, 577, 591, 596, 597, 619, 639, 640, 648], "register_config": 178, "framework_nam": 178, "algo_nam": 178, "prioriti": [178, 628], "examplealgorithm": 178, "examplealgorithmconfig": 178, "larger": [178, 561, 636, 642, 645], "higher": [178, 228, 229, 232, 233, 275, 276, 324, 371, 423, 539, 556, 582, 583, 587, 596, 620, 636, 639, 644], "tri": [178, 229, 648], "stage": [178, 348, 353, 424, 426, 433, 583, 636, 646, 648], "baseconfig": [178, 460, 462, 534], "white_list": [178, 395, 460, 531], "op_name_or_module_typ": [178, 395, 460, 531], "default_white_list": [178, 395, 460, 531], "composableconfig": 178, "register_supported_configs_for_fwk": 178, "fwk_name": 178, "eval_acc": [179, 393], "eval_perf": [179, 393], "mold": 179, "user_eval_fns1": 179, "user_eval_fns2": 179, "eval_fn": [179, 393, 530], "user_eval_fns3": 179, "user_eval_fns4": 179, "tuninglogg": 179, "unifi": [179, 308, 345, 560, 561, 562, 579, 591, 592, 596, 597, 599], "logger": [179, 182, 309, 338, 362, 508, 540, 543, 550], "assist": [179, 643], "team": [179, 315, 368, 554, 641], "retriev": [179, 242, 285, 636], "tuningconfig": [179, 393, 530], "config_set": [179, 393], "timeout": [179, 228, 229, 597, 638, 648, 650], "max_trial": [179, 228, 229, 597, 648], "tolerable_loss": [179, 228, 229, 597, 648], "earli": [179, 228, 229, 597, 639, 648, 650], "stop": [179, 228, 229, 597, 648, 649, 650], "exit": [179, 228, 229, 348, 424, 426, 597, 625, 630, 631, 632, 650], "much": [179, 185, 195, 228, 229, 261, 302, 303, 583, 611, 645, 647], "metric": [179, 185, 228, 229, 232, 233, 265, 275, 276, 303, 308, 309, 324, 332, 337, 345, 346, 362, 371, 423, 539, 542, 557, 560, 561, 580, 582, 585, 597, 598, 619, 639, 644, 645, 646, 648, 649, 650, 651], "accept": [179, 228, 229, 442, 554, 577, 579, 619, 642], "rel": [179, 196, 228, 229, 381, 597, 620, 638, 648, 650, 651], "neg": [179, 196], "tune_config": [179, 393, 530, 561], "config1": 179, "config2": 179, "toler": [179, 622], "fp32_baselin": [179, 542, 560], "config1_metr": 179, "config2_metr": 179, "98": [179, 228, 229, 597, 636, 638, 651], "trial": [179, 648], "config3_metr": 179, "97": [179, 597, 651], "Not": [179, 358, 359, 438, 439, 508, 550, 557], "achiev": [179, 308, 345, 587, 595, 597, 620, 635, 636, 637, 639, 645, 646, 648], "config_metr": 179, "reach": [179, 202, 218, 228, 229, 344, 555, 579, 619, 636, 648], "10": [179, 192, 228, 229, 246, 289, 349, 427, 559, 577, 580, 587, 593, 597, 619, 620, 636, 638, 647, 648, 651], "config1_tuning_tim": 179, "config2_tuning_tim": 179, "config3_tuning_tim": 179, "6": [179, 196, 228, 229, 589, 639, 645, 648, 651], "due": [179, 562, 587, 636, 639, 645, 646], "third": [179, 313, 366, 555, 594], "forc": [179, 641], "set_random_se": [184, 228, 229, 550], "set_workspac": [184, 228, 229, 550], "workspac": [184, 228, 229, 549, 550, 599, 625, 630, 631, 632], "set_resume_from": [184, 228, 229, 550], "resume_from": [184, 228, 229, 550], "set_tensorboard": [184, 228, 229, 550], "tensorboard": [184, 228, 229, 542, 550, 560, 597, 620], "compon": [185, 303, 309, 346, 362, 556, 582, 585, 593, 594, 600, 617, 625, 635, 636], "quantizationawaretrainingcallback": 185, "pruningcallback": 185, "distillationcallback": 185, "basecallback": 185, "design": [185, 243, 266, 271, 286, 370, 428, 557, 559, 597, 605, 608, 636, 639, 649], "mainli": [185, 218, 271, 344, 559, 597, 636, 639], "prune": [185, 194, 195, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 228, 229, 271, 272, 309, 326, 327, 329, 330, 331, 335, 337, 338, 340, 341, 342, 344, 346, 362, 550, 559, 585, 586, 589, 590, 592, 635, 637, 649, 650], "distil": [185, 194, 228, 229, 263, 270, 271, 309, 362, 559, 586, 590, 592, 635, 649, 650], "In": [185, 204, 205, 206, 211, 212, 213, 217, 229, 243, 271, 286, 313, 340, 342, 366, 381, 524, 554, 556, 557, 559, 560, 561, 579, 580, 582, 583, 584, 585, 596, 597, 607, 610, 611, 614, 620, 621, 622, 623, 630, 631, 632, 634, 635, 636, 639, 641, 642, 644, 645, 646, 647, 648, 649], "adaptor": [185, 228, 229, 361, 441, 450, 542, 559, 562, 592, 640, 641, 643, 645, 646, 649], "deriv": [185, 195, 204, 205, 206, 212, 213, 214, 215, 216, 217, 218, 219, 303, 340, 342, 344], "pipelin": [185, 303, 320, 321, 346, 555, 584, 597, 635], "knowledg": [185, 186, 228, 229, 263, 303, 584, 586, 590, 592, 597, 599, 650], "transfer": [185, 251, 294, 303, 580, 583, 584, 597, 645], "teacher": [185, 228, 229, 303, 583, 584, 597, 651], "student": [185, 189, 228, 229, 244, 270, 287, 303, 580, 583, 584, 651], "distillation_conf": [185, 225, 303], "_epoch_ran": [185, 303], "integ": [185, 206, 207, 228, 229, 303, 313, 317, 324, 340, 342, 366, 370, 442, 560, 562, 578, 639, 642, 645, 648], "epoch": [185, 208, 209, 214, 303, 342, 539, 579, 583, 584, 585, 597, 635, 636, 650], "ran": [185, 303], "eval_frequ": [185, 303], "frequenc": [185, 207, 228, 229, 303, 342, 597, 636, 650], "term": [185, 208, 209, 214, 215, 217, 303, 555, 578, 583, 594, 596, 634, 635, 648], "best_scor": [185, 303], "best_model": [185, 303, 549, 642], "found": [185, 303, 559, 583, 595, 598, 605, 622, 626, 645, 648, 651], "critet": [186, 263], "tensorflowcrossentropyloss": [186, 263], "pytorchcrossentropyloss": [186, 263], "tensorflowsparsecategoricalcrossentropi": 186, "tensorflowknowledgedistillationloss": [186, 263], "pytorchknowledgedistillationloss": [186, 263, 597], "pytorchintermediatelayersknowledgedistillationloss": [186, 263], "tensorflowcriterion": [186, 263], "pytorchcriterion": [186, 263], "criterion_registri": [186, 263], "criterion_typ": [186, 263], "registry_criterion": [186, 263], "param_dict": [186, 188, 263, 268], "crossentropyloss": [186, 228, 229, 583, 597], "sparsecategoricalcrossentropyloss": 186, "knowledgedistillationframework": [186, 263], "student_model": [186, 229, 263, 597], "teacher_model": [186, 228, 229, 263, 583, 584, 597], "knowledgedistillationloss": [186, 263, 597, 650], "temperatur": [186, 228, 229, 263, 597, 650], "loss_typ": [186, 192, 228, 229, 263, 597, 650], "ce": [186, 228, 229, 263, 597, 650], "loss_weight": [186, 228, 229, 263, 597, 650], "pytorchknowledgedistillationlosswrapp": [186, 263], "tensorflowknowledgedistillationlosswrapp": 186, "tensorflowknowledgedistillationlossextern": [186, 263], "intermediatelayersknowledgedistillationloss": [186, 263], "layer_map": [186, 229, 263, 583], "add_origin_loss": [186, 229, 263], "pytorchintermediatelayersknowledgedistillationlosswrapp": [186, 263], "selfknowledgedistillationloss": [186, 263], "selfknowledg": [186, 263], "pytorchselfknowledgedistillationloss": 186, "pytorchselfknowledgedistillationlosswrapp": 186, "multipl": [188, 198, 230, 231, 235, 236, 244, 245, 247, 248, 249, 250, 251, 255, 258, 261, 268, 273, 274, 278, 279, 281, 287, 288, 290, 291, 292, 293, 294, 298, 300, 302, 318, 371, 372, 373, 375, 381, 524, 577, 580, 587, 597, 624, 627, 635, 636, 644, 645, 648], "tensorflowoptim": [188, 268], "pytorchoptim": [188, 268], "optimizer_registri": [188, 268], "optimizer_typ": [188, 268], "cross": [188, 268, 317, 370, 591, 648], "tensorflowsgd": [188, 268], "tensorflowadamw": [188, 268], "tensorflow_addon": [188, 268], "tensorflowadam": 188, "adam": [188, 650], "pytorchsgd": [188, 268], "record_output": [189, 270], "output_process": [189, 270], "get_activ": [189, 270], "hyper": [190, 650], "sa_optim": [190, 194], "simul": [191, 562], "anneal": 191, "register_search": 192, "searcher": [192, 200, 229, 325], "registri": [192, 193, 195, 202, 207, 216, 217, 218, 219, 340, 342, 344, 557], "sure": [192, 202, 207, 216, 218, 340, 342, 344, 577, 619], "search_spac": [192, 225, 229, 320, 323, 324, 325], "gridsearch": [192, 325], "grid": [192, 229, 325, 557, 636], "whole": [192, 325, 562, 619, 639, 651], "exhaust": [192, 229, 309, 325, 351, 362, 431, 638], "randomsearch": [192, 325], "randomli": [192, 261, 302, 325, 349, 427, 557, 645, 647, 648], "bayesianoptimizationsearch": [192, 325], "bayesian": [192, 229, 309, 325, 351, 362, 431, 557, 636, 638], "xgbsearcher": 192, "higher_is_bett": [192, 228, 229, 370, 423, 648, 650], "reg": [192, 194, 197, 208, 209, 214, 215, 229], "min_train_sampl": [192, 229], "xgboost": [192, 636], "searchspac": 193, "factori": [193, 377, 403, 405, 410, 413, 415, 420, 507], "actual": [193, 317, 370, 585], "interv": [193, 213, 636], "continu": [193, 205, 313, 340, 366, 557, 595, 597, 618, 636, 649], "learning_r": [193, 228, 229, 597, 638, 650], "001": [193, 246, 289, 580, 585, 645, 650], "num_train_epoch": [193, 597, 636], "20": [193, 261, 302, 622, 625, 630, 631, 632, 636, 647, 650, 651], "register_searchspac": 193, "pruner": [193, 194, 309, 326, 327, 328, 329, 330, 332, 337, 338, 340, 343, 362, 597, 636, 650], "basesearchspac": 193, "discretesearchspac": 193, "continuoussearchspac": 193, "hpo": [194, 232, 275, 636], "model_slim": [194, 197, 211], "auto_slim": [194, 197, 199], "pattern_analyz": [194, 197, 199], "weight_slim": [194, 197, 199, 211], "mha": [194, 197, 203, 210, 636], "ninm": [194, 197, 203], "nxm": [194, 197, 203, 213, 228, 229, 336, 340, 636], "basic": [194, 197, 200, 202, 210, 228, 229, 260, 301, 309, 320, 340, 351, 355, 358, 362, 431, 435, 438, 539, 592, 593, 597, 619, 638, 644], "block_mask": [194, 195, 197, 210], "pattern_lock": [194, 197, 210, 228, 229, 309, 328, 362], "retrain_fre": [194, 195, 197, 210, 636], "wanda": [194, 197], "criteria": [194, 197, 228, 229, 308, 332, 337, 340, 342, 345, 556, 617, 645], "tf_criteria": [194, 197], "callback": [194, 332, 337, 539, 542, 556, 597, 635, 636, 639], "register_criterion": [195, 219], "get_criterion": 195, "pruningcriterion": [195, 219], "about": [195, 219, 550, 554, 579, 597, 622, 623, 636, 641, 648, 649, 651], "score": [195, 202, 207, 211, 219, 228, 229, 310, 311, 313, 314, 315, 317, 342, 363, 364, 366, 367, 368, 370, 430, 542, 556, 596, 620, 634, 636, 644, 648], "magnitudecriterion": [195, 219], "magnitud": [195, 219, 228, 229, 309, 317, 328, 362, 370, 592, 636], "criterion_class": [195, 219], "determin": [195, 202, 207, 219, 228, 229, 544, 554, 556, 578, 636, 639], "gradientcriterion": 195, "absolut": [195, 228, 229, 317, 370, 596, 597, 636, 639, 648], "snipcriterion": 195, "snip": [195, 228, 229, 342, 592, 636, 651], "product": [195, 559, 592, 598, 600, 601, 617, 623, 637, 639, 644, 648], "shot": [195, 214, 215, 218, 271, 342, 344, 557, 592, 597, 636, 637, 642], "connect": [195, 342, 617, 619, 626, 636, 644], "sensit": [195, 326, 342, 592, 636], "1810": [195, 342], "02340": [195, 342], "snipmomentumcriterion": 195, "snip_momentum": [195, 228, 229, 597, 636], "preserv": [195, 578, 636, 642], "beta": 195, "blockmaskcriterion": 195, "retrainfreecriterion": 195, "return_reorder_indic": 196, "remain": [196, 605], "unchang": 196, "flip": [196, 257, 261, 299, 302, 647], "initial_metr": 196, "sparsity_ratio": [196, 222], "prune_n": [196, 222], "prune_m": [196, 222], "pow_of_var_regrow": 196, "max_cycle_tim": 196, "without_same_sign": 196, "update_threshold": 196, "power": [196, 583, 597, 611, 637], "cycl": [196, 557], "paper": [196, 222, 583, 636, 642, 645], "2310": 196, "08915": 196, "pickle_protocol": 197, "_use_new_zipfile_seri": 197, "prepare_prun": [197, 636], "loss_func": [197, 216], "assertionerror": [197, 203, 210, 220, 340, 341, 342, 371], "slim": [198, 199, 200, 313, 366, 377, 379, 506, 507, 599, 636], "round_multipli": 198, "spars": [198, 212, 342, 580, 637], "model_slim_ffn2": 198, "perman": [198, 554, 636], "obtain": [198, 200, 209, 214, 217, 220, 341, 524, 556, 561, 625, 636, 644, 645, 648], "acceler": [198, 583, 597, 600, 608, 617, 620, 624, 636, 637, 641, 642, 645, 648], "directli": [198, 228, 229, 243, 286, 313, 317, 341, 366, 370, 596, 597, 604, 636, 638, 639, 646], "sprase": 198, "model_slim_mha": 198, "parse_auto_slim_config": [198, 636], "ffn2_sparsiti": [198, 636], "mha_spars": [198, 636], "generate_ffn2_pruning_config": 198, "consecut": [198, 200, 201, 636], "generate_mha_pruning_config": 198, "head": [198, 200, 204, 211, 220, 636, 651], "get_attribut": 200, "get_common_modul": 200, "layer2": [200, 597, 636, 639], "nearest": [200, 261, 302, 395, 522, 531, 642, 647], "print_iter": 200, "recipesearch": 200, "root": [200, 244, 245, 246, 249, 287, 288, 289, 292, 317, 370, 580, 585, 596, 597, 650], "levelwis": 200, "wai": [200, 245, 246, 249, 288, 289, 292, 557, 562, 579, 580, 582, 596, 597, 600, 603, 618, 619, 623, 624, 625, 635, 636, 639, 642, 645, 648, 650], "bert": [200, 229, 240, 243, 244, 261, 283, 286, 287, 302, 559, 580, 583, 596, 598, 605, 628, 631, 632, 636, 647, 651], "recipe_sampl": 200, "bertattent": 200, "dens": [200, 218, 228, 229, 344, 620, 636, 651], "searching_result": 200, "jitbasicsearch": 200, "placeholder_shap": 200, "placeholder_dtyp": 200, "jit": [200, 228, 600, 602, 607, 645, 646], "script": [200, 310, 311, 314, 315, 363, 364, 367, 368, 524, 555, 585, 592, 600, 604, 607, 608, 611, 628, 630, 637], "static_graph": 200, "flatten_static_graph": 200, "target_lay": 200, "linear2linearsearch": 200, "target_op_lut": 200, "lookup": 200, "tabl": [200, 211, 550, 562, 582, 587, 620, 622, 651], "current_pattern": 200, "statu": [200, 547, 554, 579, 627, 630, 631, 632, 634, 636], "selfmhasearch": 200, "classifierheadsearch": 200, "classifi": [200, 220, 244, 287, 317, 370, 580, 583], "classifierheadsearchertf": 200, "squeezer": 201, "postcompressionutil": 201, "librari": [201, 265, 309, 362, 417, 552, 559, 593, 597, 598, 602, 611, 617, 637, 639], "relat": [201, 217, 303, 313, 332, 337, 340, 366, 441, 542, 562, 600, 624, 625, 636, 650], "linearcompress": 201, "root_linear": 201, "target_linear": 201, "while": [201, 212, 220, 342, 349, 427, 524, 560, 561, 580, 586, 592, 598, 600, 605, 617, 619, 636, 638, 639, 642, 645], "hidden": [201, 206, 340, 560], "layer_1": 201, "act_fn": 201, "layer_2": 201, "linearcompressioniter": 201, "linear_pattern": 201, "register_pattern": [202, 340], "basepattern": [202, 204, 206], "unit": [202, 340, 555, 625, 636], "4x1": [202, 228, 229, 336, 597, 636, 651], "is_glob": [202, 340], "local": [202, 228, 229, 340, 508, 524, 550, 610, 614, 619, 626, 627, 636, 644], "keep_mask_lay": 202, "invalid_lay": 202, "max_sparsity_ratio_per_op": [202, 207, 225, 228, 229, 597, 636], "sparsiti": [202, 204, 205, 207, 208, 209, 212, 214, 215, 218, 220, 228, 229, 342, 344, 550, 559, 580, 592, 597, 649, 651], "min_sparsity_ratio_per_op": [202, 225, 228, 229, 597, 636], "target_spars": [202, 225, 228, 229, 597, 636, 638, 650], "pytorchbasepattern": [202, 217], "kerasbasepattern": 202, "get_pattern": [203, 340], "patternmha": 204, "doc": [204, 205, 228, 229, 340, 358, 359, 370, 423, 438, 439, 442, 508, 550, 596, 597, 612, 615, 623], "md": [204, 205, 228, 229, 340, 370, 423], "n": [204, 205, 228, 229, 245, 261, 288, 302, 311, 340, 364, 442, 562, 580, 582, 583, 625, 636, 639, 645, 647], "pytorchpatternninm": 205, "out": [205, 228, 229, 244, 245, 246, 287, 288, 289, 308, 340, 345, 555, 556, 559, 580, 600, 605, 610, 611, 612, 614, 615, 617, 623, 636, 638, 639, 642], "pytorchpatternnxm": 206, "kept": [206, 340], "block_siz": [206, 340, 531, 642], "height": [206, 257, 261, 299, 302, 340, 585, 647, 650], "width": [206, 257, 261, 299, 302, 340, 578, 585, 636, 639, 647, 650], "vertic": [206, 261, 302, 340, 647], "keraspatternnxm": 206, "register_prun": [207, 216, 342], "baseprun": [207, 212, 214, 216], "current_sparsity_ratio": [207, 342], "global_step": [207, 342], "start_step": [207, 225, 228, 229, 342, 597, 636, 638], "end_step": [207, 225, 228, 229, 342, 597, 636, 638], "pruning_frequ": [207, 225, 228, 229, 597, 636], "target_sparsity_ratio": [207, 342], "show": [207, 550, 554, 583, 585, 597, 603, 618, 619, 620, 622, 625, 630, 631, 632, 645, 648, 649], "pytorchbaseprun": [207, 215], "kerasbaseprun": 207, "pytorchbasicprun": 208, "arrang": [208, 209, 214, 215, 245, 246, 249, 288, 289, 292, 580, 636], "proce": [208, 209, 214, 215], "regul": [208, 209, 214, 215], "kerasbasicprun": 208, "pytorchblockmaskprun": 209, "grad": [209, 214], "parse_valid_pruner_typ": 210, "get_prun": [210, 342], "pythonmultiheadattentionprun": 211, "mha_modul": 211, "partial": [211, 636, 639], "qkv": 211, "feedward": 211, "simultan": [211, 600, 624, 635, 638], "qkv_name": 211, "query_layer_nam": 211, "key_layer_nam": 211, "value_layer_nam": 211, "ffn_name": 211, "attention_ffn_nam": 211, "mha_nam": 211, "qkv_modul": 211, "ffn_modul": 211, "mha_compress": 211, "mhacompress": 211, "linear_lay": 211, "independ": [211, 417, 422, 562], "4x": [211, 557, 639], "subsequ": [211, 561, 600, 617], "head_mask": 211, "mha_head_s": 211, "similar": [211, 225, 597, 621, 638, 645, 648, 650], "mha_scor": 211, "lock": [212, 330, 331, 592, 635, 636], "pytorchpatternlockprun": 212, "parent": [212, 213, 218, 336, 342, 344, 646], "pytorchprogressiveprun": 213, "basicprun": [213, 216], "interpol": [213, 261, 302, 596, 636, 647], "fine": [213, 244, 287, 580, 603, 636, 637, 639], "grain": [213, 636, 637, 648], "improv": [213, 524, 555, 578, 597, 600, 617, 618, 620, 636, 637, 639, 641, 642, 648, 649, 651], "ad": [213, 244, 287, 310, 349, 363, 387, 427, 561, 562, 582, 598, 600, 605, 608, 612, 615, 625, 636, 642, 646], "retrain": [214, 584], "pytorchretrainfreeprun": 214, "pruner_class": [214, 215], "fast": [214, 228, 229, 559, 636, 637, 642], "retrainfreeprun": [214, 216], "effect": [214, 559, 560, 636, 637], "2204": 214, "09656": 214, "sparsegptprun": [215, 216], "most": [215, 228, 229, 317, 370, 582, 597, 598, 636, 639, 642, 645, 648, 651], "sparsegpt": [215, 216, 636], "massiv": [215, 636], "One": [215, 562, 580, 585, 592, 622, 636, 637, 648], "2301": [215, 636], "00774": [215, 636], "opt": [216, 559, 595, 605, 636, 645, 648, 651], "least": [216, 343, 555, 597, 636, 648], "templat": [216, 343, 597, 636], "tree": [216, 343, 359, 439, 625], "nlp": [216, 228, 229, 343, 605, 621, 636, 639], "huggingface_model": [216, 343, 621], "classif": [216, 244, 261, 287, 302, 317, 343, 370, 583, 587, 596, 606, 620, 628, 631, 632, 636, 637], "pytorch_prun": [216, 309, 362], "eager": [216, 343, 422, 585, 592, 639, 641, 646], "config_file_path": [216, 343], "pruner_info": [216, 343], "pruning_class": 216, "avail": [216, 228, 229, 375, 563, 565, 569, 572, 575, 586, 588, 590, 592, 610, 614, 619, 624, 625, 626, 630, 631, 632, 636, 648, 651], "regular": [217, 310, 341, 363], "register_reg": 217, "regulariz": 217, "get_reg_typ": 217, "get_reg": 217, "basereg": 217, "grouplasso": 217, "coeff": 217, "lasso": [217, 327, 592, 636], "reg_term": 217, "register_schedul": [218, 344], "get_schedul": [218, 344], "pruningschedul": 218, "gradual": [218, 344, 636], "oneshotschedul": [218, 344], "iterativeschedul": [218, 344], "get_tf_criterion": 219, "get_sparsity_ratio": 220, "elementwise_over_matmul_gemm_conv": 220, "elementwise_over_al": 220, "blockwise_over_matmul_gemm_conv": 220, "get_sparsity_ratio_tf": 220, "check_config": [220, 341], "prune_config": [220, 341], "everyth": [220, 341, 605], "reset_none_to_default": 220, "update_param": 220, "process_weight_config": 220, "global_config": [220, 326, 327, 329, 330, 331], "local_config": [220, 228, 229, 326, 327, 329, 330, 331], "default_config": 220, "pruners_info": 220, "process_yaml_config": 220, "check_key_valid": 220, "template_config": 220, "user_config": 220, "process_and_check_config": [220, 341], "process_config": [220, 341], "parse_last_linear": 220, "often": [220, 579, 583, 622, 635, 636], "might": [220, 556, 619, 648], "caus": [220, 561, 579, 601, 620, 622, 636, 642], "drop": [220, 313, 341, 366, 555, 597, 598, 611, 636, 642, 645, 651], "parse_last_linear_tf": 220, "parse_to_prun": [220, 341], "parse_to_prune_tf": 220, "generate_pruner_config": 220, "dotdict": [220, 225, 229, 381, 550], "get_lay": 220, "collect_layer_input": 220, "layer_idx": 220, "layer_input": 220, "previou": [220, 561, 562, 597, 636, 643, 645, 646, 648, 649, 651], "prune_wanda": 222, "use_vari": 222, "low_mem_usag": 222, "dsnot": 222, "sij": 222, "wij": 222, "xj": 222, "2306": [222, 642], "11695": 222, "recurs": [223, 550], "wrappedgpt": 224, "layer_id": 224, "gpt": [224, 559, 595, 621, 636, 645, 651], "prunerv2": 225, "pruning_typ": [225, 228, 229, 597, 636], "pruning_scop": [225, 228, 229, 597, 636], "sparsity_decay_typ": [225, 228, 229, 597, 636], "pruning_op_typ": [225, 228, 229, 597, 636], "reg_typ": 225, "criterion_reduce_typ": 225, "resume_from_pruned_checkpoint": 225, "cfg_fname": 225, "parser": 225, "quantization_conf": 225, "pruning_conf": 225, "graph_optimization_conf": [225, 308], "mixedprecision_conf": 225, "benchmark_conf": 225, "nasconfig": [225, 229, 321, 323, 557], "approach": [225, 228, 229, 320, 321, 323, 556, 557, 578, 580, 583, 592, 597, 605, 617, 620, 628, 630, 631, 632, 636, 637, 638, 640, 642, 648, 650], "search_algorithm": [225, 229, 309, 322, 362, 557], "na": [225, 229, 309, 362, 375, 592, 651], "procedur": [225, 557, 636, 648], "defaultconf": 225, "notat": [225, 226, 229, 550], "deep_get": [226, 381, 508], "dot": [226, 508, 598, 639], "person": [226, 508, 554, 637], "john": [226, 508], "deep_set": [226, 381], "sex": [226, 554], "male": 226, "pythonic_config": 227, "random_se": [228, 229, 349, 427, 597, 650], "1978": [228, 229], "default_workspac": [228, 229], "directori": [228, 229, 245, 246, 288, 289, 379, 506, 508, 545, 547, 549, 550, 580, 585, 588, 610, 612, 614, 615, 621, 623, 646], "histori": [228, 229, 549, 550, 617, 621, 648], "nc_workspac": [228, 229, 620, 621], "datetim": [228, 229], "now": [228, 229, 261, 302, 556, 557, 562, 580, 585, 608, 638, 647, 648], "strftime": [228, 229], "d_": [228, 229], "resum": [228, 229, 232, 233, 275, 276, 347, 353, 354, 355, 424, 425, 427, 428, 430, 432, 433, 434, 435], "flag": [228, 229, 311, 364, 582], "visual": [228, 229, 559, 608, 617, 644, 646, 648, 649], "displai": [228, 229, 358, 359, 438, 439, 508, 550, 617, 620], "2022": [228, 229, 559, 594, 636, 642, 645, 651], "workspace_path": [228, 229], "accuracycriterion": [228, 229, 597, 648], "accuracy_criterion": [228, 229, 381, 597, 621, 634, 638, 648, 650], "warmup": [228, 229, 577, 597, 638], "inter_num_of_thread": [228, 229, 417, 422, 597, 638], "intra_num_of_thread": [228, 229, 417, 422, 597, 638], "benchmark": [228, 229, 264, 309, 346, 362, 381, 550, 559, 567, 599, 600, 604, 608, 611, 617, 620, 648, 649, 650, 651], "onnxrt_trt_ep": [228, 229, 598, 639], "onnxrt_cuda_ep": [228, 229, 598, 639], "inter": [228, 229], "intra": [228, 229], "quantizationconfig": 228, "post_training_static_qu": [228, 580, 597, 638, 648], "calibration_sampling_s": [228, 229, 597, 622], "op_type_dict": [228, 229, 562, 638, 639, 642, 648], "op_name_dict": [228, 229, 582, 597, 620, 622, 639, 648], "strategy_kwarg": [228, 229, 644, 648], "quant_level": [228, 229, 620, 642, 645, 648], "posttrainingquantconfig": [228, 229, 423, 556, 559, 562, 579, 582, 587, 590, 596, 597, 599, 619, 620, 621, 622, 639, 640, 641, 642, 644, 645, 648], "quantizationawaretrainingconfig": [228, 229, 539, 556, 584, 587, 597, 639, 641, 648], "cv": [228, 229, 636], "object_detect": [228, 229, 313, 366], "recommendation_system": [228, 229], "explicitli": [228, 229, 591, 636], "overrid": [228, 229, 550], "quantiztaion": [228, 229], "smooth_quant_arg": [228, 229, 639, 645], "gemm_to_matmul": [228, 229, 639], "graph_optimization_level": [228, 229, 638, 639], "disable_al": [228, 229, 638], "enable_bas": [228, 229], "enable_extend": [228, 229], "enable_al": [228, 229], "first_conv_or_matmul_quant": [228, 229, 639], "last_conv_or_matmul_quant": [228, 229, 639], "pre_post_process_quant": [228, 229, 639], "postprocess": [228, 229, 255, 258, 261, 265, 302, 309, 362, 370, 423, 542, 560, 597, 646, 647], "dedic": [228, 229], "quant_format": [228, 229, 307, 587, 620], "constraint": [228, 229, 308, 345, 597, 636, 644, 648, 650], "conv1": [228, 229, 639, 650], "tuning_strategi": [228, 229], "guarante": [228, 229, 597], "models": [228, 229, 381, 597, 634, 638], "footprint": [228, 229, 308, 332, 337, 345, 381, 584, 597, 634, 636, 638, 640], "excluded_precis": [228, 229, 641], "exclud": [228, 229, 560, 578, 641], "conserv": [228, 229, 362, 431], "use_distributed_tun": 228, "weightpruningconfig": [228, 229, 597, 635, 636], "pruning_config": [228, 229, 597, 636], "exp": [228, 229, 597, 636], "link": [228, 229, 244, 287, 370, 394, 423, 578, 580, 587, 610, 614, 617, 642, 651], "90": [228, 229, 640, 650, 651], "magnitude_progress": [228, 229], "snip_progress": [228, 229], "snip_momentum_progress": [228, 229], "feasibl": [228, 229], "situat": [228, 229, 585, 636], "unstructur": [228, 229, 336, 592, 636, 651], "8x1": [228, 229], "channelx1": [228, 229, 636], "1xchannel": [228, 229, 636], "itrex": [228, 229, 645], "start": [228, 229, 261, 302, 313, 366, 428, 593, 622, 637, 647, 648, 649, 652], "togeth": [228, 229, 261, 302, 583, 593, 604, 637, 646, 647], "sort": [228, 229, 352, 387, 432, 582, 620, 642, 648], "sinc": [228, 229, 308, 310, 332, 337, 345, 363, 583, 587, 593, 596, 611, 617, 622, 635, 642, 643], "lead": [228, 229, 583, 597, 598, 622, 636, 642, 645], "increas": [228, 229, 387, 581, 592, 600, 617, 622, 642, 648], "cube": [228, 229, 636], "update_config": [228, 229], "knowledgedistillationlossconfig": [228, 229, 583, 584, 597, 635], "hyperparamet": [228, 229, 358, 644, 645, 648], "entropi": [228, 229, 578, 648], "groundtruth": [228, 229, 313, 366], "label": [228, 229, 232, 233, 244, 246, 247, 248, 249, 252, 257, 261, 266, 275, 276, 287, 289, 290, 291, 292, 295, 299, 302, 310, 312, 317, 363, 365, 370, 371, 423, 503, 539, 556, 579, 580, 582, 596, 597, 639, 647], "sum": [228, 229, 317, 370, 582, 583], "distillationconfig": [228, 229, 539, 583, 584, 597, 635], "prepare_compress": [228, 229, 539, 556, 583, 584, 597, 635, 636, 639], "criterion_conf": [228, 229], "d_conf": [228, 229, 584, 597, 635], "compression_manag": [228, 229, 539, 556, 583, 584, 597, 635, 636, 639], "featur": [228, 229, 244, 245, 257, 261, 287, 288, 299, 302, 555, 559, 577, 579, 581, 583, 597, 598, 599, 600, 604, 605, 608, 617, 619, 623, 636, 637, 643, 647], "distil_loss": [228, 229, 597], "ni_workload_nam": 229, "onnxrt_dnnl_ep": [229, 598, 639], "onnxrt_dml_ep": [229, 639], "tuningcriterion": [229, 597, 634, 644, 648], "tuning_criterion": [229, 597, 634, 644, 648], "npu": [229, 639], "xpu": [229, 524, 608, 639], "ptq": [229, 423, 556, 582, 585, 592, 597, 622, 639, 645, 646, 648], "meet": [229, 235, 346, 348, 424, 426, 556, 561, 634, 637, 638, 639, 642, 646, 648], "mse_v2": [229, 309, 351, 362, 431], "hawq_v2": [229, 362, 431], "docstr": [229, 442], "workload": [229, 547, 550, 619, 637], "insight": [229, 547, 559, 582, 637, 643, 648, 649], "copi": [229, 341, 550, 579, 623], "deepcopi": 229, "model_origin": [229, 423, 641], "qat_op_name_dict": 229, "low_memory_usag": 229, "hpoconfig": 229, "xgb": 229, "bo": 229, "intermediatelayersknowledgedistillationlossconfig": [229, 583], "relationship": [229, 619], "student_layer_nam": 229, "student_layer_output_process": 229, "teacher_layer_nam": 229, "teacher_layer_output_process": 229, "desir": [229, 257, 261, 299, 302, 561, 562, 636, 645, 647], "serv": [229, 379, 506, 524, 625, 630, 631, 632], "numer": [229, 317, 370, 387, 562, 598, 637, 639, 642], "abbrevi": 229, "l1": 229, "selfknowledgedistillationlossconfig": [229, 583, 597], "student1_layer_name1": 229, "teacher_layer_name1": 229, "student2_layer_name1": 229, "student1_layer_name2": 229, "teacher_layer_name2": 229, "student2_layer_name2": 229, "soft": 229, "hard": [229, 579, 582], "resblock": 229, "deepst": 229, "02": [229, 651], "mixedprecisionconfig": [229, 371, 442, 597, 598], "mixedprecis": [229, 318, 597], "won": [229, 639, 642], "work": [229, 308, 345, 524, 558, 561, 579, 583, 612, 615, 623, 641, 642, 643, 645, 646], "mix_precis": [229, 362, 442, 597, 598], "converted_model": [229, 371, 597, 598], "exportconfig": 229, "14": [229, 306, 307, 587, 593, 632, 651], "dynamic_ax": [229, 307, 587], "qlinear": [229, 246, 253, 289, 296, 317, 370, 560, 607], "ax": [229, 307], "onnxqlinear2qdqconfig": 229, "onnxqlinear2qdq": 229, "torch2onnxconfig": [229, 587], "torch2onnx": [229, 304, 309, 362], "qdq_op_fp32_bia": 229, "qdq_op_int32_bia": 229, "qdq_op_fp32_bias_qdq": 229, "resnet50": [229, 559, 582, 585, 587, 598, 600, 604, 636, 639, 644, 651], "int8_onnx_config": [229, 587], "randn": [229, 587], "224": [229, 257, 299, 559, 580, 585, 587, 590, 597, 600, 619, 647, 650], "batch_siz": [229, 234, 236, 239, 240, 242, 243, 244, 245, 264, 277, 279, 282, 283, 285, 286, 287, 288, 307, 503, 557, 579, 580, 585, 587, 591, 597, 600, 639], "tf2onnxconfig": [229, 587], "tf2onnx": [229, 304, 309, 362], "output_graph": 229, "dyna": [229, 309, 322, 362, 557, 592, 638], "sigopt": [230, 231, 273, 274, 309, 362, 637], "tpe": [230, 231, 273, 274, 309, 362], "sigopttunestrategi": [232, 275], "q_dataload": [232, 233, 275, 276, 347, 349, 352, 353, 354, 355, 424, 425, 427, 428, 430, 432, 433, 434, 435, 591, 648], "eval_metr": [232, 233, 371, 423, 424, 425, 427, 428, 430, 432, 433, 434, 435, 539, 596, 619, 639], "q_hook": [232, 233, 275, 276, 347, 349, 352, 353, 354, 355, 424, 425, 427, 428, 430, 432, 433, 434, 435], "mandatori": [232, 233, 275, 276, 423, 597, 650], "yield": [232, 233, 242, 264, 275, 276, 285, 349, 371, 423, 427, 442, 539, 579, 639, 648], "well": [232, 233, 275, 276, 371, 423, 539, 557, 559, 580, 636, 639, 643, 645, 650], "taken": [232, 233, 275, 276, 371, 423, 539, 639], "reserv": [232, 233, 275, 276], "abl": [232, 233, 275, 276, 371, 423, 539, 608, 617, 639], "tuner": [232, 233, 275, 276, 308, 345, 371, 423, 539, 639], "scalar": [232, 233, 275, 276, 371, 423, 539, 596, 639, 648], "pseudo": [232, 233, 275, 276, 423, 539, 642, 646], "someth": [232, 233, 246, 275, 276, 289, 423, 539], "fefin": [233, 276], "tpetunestrategi": [233, 276], "basedatalod": [234, 277, 503], "basedataload": [234, 239, 241, 277, 282, 284, 503], "last_batch": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 503, 579], "rollov": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 503, 579], "collate_fn": [234, 236, 237, 239, 240, 243, 264, 277, 279, 280, 282, 283, 286, 503, 579, 580], "batch_sampl": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 503, 579], "num_work": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 503, 579, 597, 639], "pin_memori": [234, 236, 239, 240, 243, 264, 277, 279, 282, 283, 286, 503, 579], "_generate_dataload": [234, 277, 503], "check_dataload": 235, "default_col": [236, 279], "outer": [236, 279], "defaultdataload": [236, 243, 279, 286], "style": [237, 251, 280, 294, 442, 555, 580, 591], "drop_last": [237, 242, 280, 285], "iterablefetch": [237, 280], "indexfetch": [237, 280], "base_dataload": [238, 281, 298, 309], "default_dataload": [238, 281, 298, 309], "fetcher": [238, 281, 298, 309], "mxnet_dataload": [238, 281, 298, 309], "onnxrt_dataload": [238, 281, 298, 309, 416], "pytorch_dataload": [238, 281, 298, 309], "tensorflow_dataload": [238, 281, 298, 309, 421], "mxnetdataload": [239, 282], "onnxrtbertdataload": [240, 283], "variant": [240, 283], "onnxrtdataload": [240, 283, 416], "pytorchdataload": [241, 284], "data_sourc": [242, 285, 542], "__iter__": [242, 246, 285, 289, 579, 580, 597], "matter": [242, 285, 641], "iterablesampl": [242, 285], "squential": [242, 285], "your": [242, 244, 285, 287, 524, 555, 579, 580, 582, 585, 594, 597, 600, 603, 604, 605, 610, 611, 612, 614, 615, 617, 619, 623, 625, 630, 631, 632, 636, 637, 644, 646, 648, 649], "clear": [242, 285, 560, 589, 596, 597], "iterabledataset": [242, 246, 285, 289], "try": [242, 285, 556, 582, 620, 636, 639, 645, 648], "indexdataset": [242, 285], "__getitem__": [242, 246, 261, 285, 289, 302, 579, 580, 597], "__len__": [242, 246, 285, 289, 580], "sequentialsampl": [242, 285], "batchsampl": [242, 285], "tfdatadataload": [243, 286], "tensorflow1": [243, 286], "coupl": [243, 286], "satisfi": [243, 286, 582, 593, 623], "tf1": [243, 286, 599], "although": [243, 286, 644], "tensorflowbertdataload": [243, 286], "tensorflowmodelzoobertdataload": [243, 286], "zoo": [243, 261, 286, 302, 559, 586, 590, 651], "tensorflowdataload": [243, 286, 421], "pytorchbertdataset": [244, 287], "model_typ": [244, 287, 550, 580], "tensordataset": [244, 287, 580], "repo": [244, 287, 553, 555, 580, 586, 610, 612, 614, 615, 652], "easi": [244, 287, 345, 587, 597, 620, 624, 637, 639, 642, 644], "squad": [244, 261, 287, 302, 314, 315, 317, 367, 368, 370, 580, 596, 636, 647, 651], "distilbert": [244, 287, 559, 580, 598, 637, 651], "xlnet": [244, 287, 580, 651], "xlm": [244, 287, 580, 651], "101": [244, 287, 317, 370, 596, 626, 645, 651], "2043": [244, 287], "2001": [244, 287], "onnxrtbertdataset": [244, 287], "data_dir": [244, 287, 580], "model_name_or_path": [244, 287, 580, 597, 605, 606, 621, 628, 631, 632, 640], "max_seq_length": [244, 261, 287, 302, 519, 580, 647], "do_lower_cas": [244, 260, 261, 287, 301, 302, 580, 647], "mrpc": [244, 287, 317, 370, 580, 596, 605, 628, 631, 632, 636, 648, 651], "dynamic_length": [244, 287, 580], "shortcut": [244, 287, 580], "longer": [244, 261, 287, 302, 580, 647], "shorter": [244, 261, 287, 302, 580, 647], "lowercas": [244, 287, 580], "choic": [244, 287, 560, 580, 596, 623, 645], "qqp": [244, 287, 580, 596, 651], "qnli": [244, 287, 580, 596, 651], "rte": [244, 287, 580, 596, 651], "st": [244, 287, 580, 596], "cola": [244, 287, 580, 596, 651], "mnli": [244, 287, 580, 596, 651], "wnli": [244, 287, 580, 596], "mobilebert": [244, 287, 580, 583, 651], "roberta": [244, 287, 580, 651], "uncas": [244, 261, 287, 302, 580, 647, 651], "load_and_cache_exampl": [244, 287], "convert_examples_to_featur": [244, 261, 287, 302], "max_length": [244, 287], "label_list": [244, 287, 317, 370], "output_mod": [244, 287], "pad_token": [244, 287], "pad_token_segment_id": [244, 287], "mask_padding_with_zero": [244, 287], "inputfeatur": [244, 261, 287, 302], "properti": [244, 287, 441, 594], "vocabulari": [244, 260, 261, 287, 301, 302, 647], "attention_mask": [244, 287, 597], "usual": [244, 287, 561, 582, 583, 622, 635, 636, 639, 640, 645], "NOT": [244, 287, 589], "token_type_id": [244, 287, 597], "segment": [244, 287, 311, 313, 364, 366, 555], "portion": [244, 287], "regress": [244, 287, 555, 582], "seq_length": [244, 287], "tensorflowbertdataset": [244, 287], "label_fil": [244, 261, 287, 302, 580, 647], "tfrecord": [244, 245, 246, 287, 288, 289, 580], "guid": [244, 287, 556, 559, 580, 583, 593, 600, 608, 617, 652], "parsedecodebert": [244, 287], "tensorflowmodelzoobertdataset": [244, 245, 287, 288], "num_cor": [244, 245, 249, 287, 288, 292, 580], "28": [244, 245, 249, 287, 288, 292, 580, 651], "coco": [245, 252, 256, 288, 295, 313, 317, 366, 370, 596, 636], "parsedecodecoco": [245, 288], "cocorecorddataset": [245, 288], "interleav": [245, 288, 580], "parallel": [245, 288, 417, 422, 524, 580, 597, 624, 627, 648], "cocoraw": [245, 288, 580], "img_dir": [245, 288, 580], "val2017": [245, 288, 580], "anno_dir": [245, 288, 580], "annot": [245, 288, 313, 366, 442, 561, 562, 580, 596, 636, 648], "instances_val2017": [245, 288, 580], "jpg": [245, 249, 251, 288, 292, 294, 559, 580], "imag": [245, 246, 249, 251, 257, 261, 288, 289, 292, 294, 299, 302, 313, 366, 580, 585, 587, 636, 638, 645, 646, 647, 651], "coconpi": [245, 288, 580], "npy_dir": [245, 288, 580], "npy": [245, 288, 580], "tensorflowdataset": [246, 289], "pytorchdataset": [246, 289], "mxnetdataset": [246, 289], "onnxrtqldataset": [246, 289], "onnxrtitdataset": [246, 289], "IT": [246, 253, 289, 296, 637], "pytorchmxnetwrapdataset": [246, 289], "datafunc": [246, 289], "pytorchmxnetwrapfunct": [246, 261, 289, 302], "framework_dataset": [246, 289], "convent": [246, 289, 313, 366, 583], "imageclassifi": [246, 289], "tensorflow_itex": [246, 249, 251, 253, 289, 292, 294, 296, 579, 638], "onnxrt_qdq": [246, 253, 289, 296, 638], "onnxrt_qlinearop": [246, 253, 261, 289, 296, 302, 638], "onnxrt_integerop": [246, 253, 261, 289, 296, 302, 638], "pytorch_ipex": [246, 253, 289, 296, 597, 638, 650], "pytorch_fx": [246, 253, 289, 296, 597, 638], "dataset_registri": [246, 289], "dataset_typ": [246, 289], "dataset_format": [246, 289], "data_format": [246, 257, 289, 299], "raw_imag": [246, 289], "overwrit": [246, 289, 610, 614], "download_url": [246, 289], "filenam": [246, 289, 508, 550, 580, 623], "md5": [246, 289], "address": [246, 289, 554, 598, 619, 622, 625, 637], "gen_bar_updat": [246, 289], "check_integr": [246, 289], "fpath": [246, 289], "checksum": [246, 289], "calculate_md5": [246, 289], "chunk_siz": [246, 289], "cifar10": [246, 289, 580], "cifar100": [246, 289, 580], "databas": [246, 289, 625], "www": [246, 289, 580, 651], "toronto": [246, 289, 580], "kriz": [246, 289, 580], "cifar": [246, 289, 580, 651], "tar": [246, 289, 580, 582, 612, 615], "gz": [246, 289, 580, 582, 612, 615], "manual": [246, 289, 580, 600, 606, 608, 611, 625, 630, 631, 632, 636], "subset": [246, 249, 289, 292, 580, 622], "internet": [246, 289, 580, 619], "again": [246, 289, 580, 620, 622, 641], "pytorchcifar10": [246, 289], "mxnetcifar10": [246, 289], "tensorflowcifar10": [246, 289], "pytorchcifar100": [246, 289], "mxnetcifar100": [246, 289], "tensorflowcifar100": [246, 289], "mnist": [246, 289, 580, 585], "nation": [246, 289, 554], "institut": [246, 289], "standard": [246, 261, 289, 302, 555, 561, 582, 587, 596, 647, 648], "technologi": [246, 289, 595, 597], "fashionmnist": [246, 289, 580], "npz": [246, 289, 580], "idx1": [246, 289, 580], "ubyt": [246, 289, 580], "idx3": [246, 289, 580], "t10k": [246, 289, 580], "pytorchmnist": [246, 289], "mxnetmnist": [246, 289], "tensorflowmnist": [246, 289], "pytorchfashionmnist": [246, 289], "mxnetfashionmnist": [246, 289], "tensorflowfashionmnist": [246, 289], "imagefold": [246, 289, 580, 585, 597], "expect": [246, 289, 554, 555, 588, 595, 617, 639, 642, 648], "subfold": [246, 289, 620], "belong": [246, 289, 375, 639], "class_1": [246, 289, 580], "xxx": [246, 289, 580, 597], "png": [246, 289, 580], "xxy": [246, 289, 580], "xxz": [246, 289, 580], "class_n": [246, 289, 580], "123": [246, 289, 580, 647], "nsdf3": [246, 289, 580], "asd932_": [246, 289, 580], "categori": [246, 289, 312, 365, 577, 580, 607], "mxnetimagefold": [246, 289], "tensorflowtfrecorddataset": [246, 289], "tensorflowimagerecord": [246, 289], "imagenet": [246, 249, 257, 289, 292, 299, 557, 582, 597, 606, 622, 636, 646, 647, 650, 651], "000": [246, 289, 559, 580], "099": [246, 289, 580], "tensorflowvocrecord": [246, 289], "pascal": [246, 289], "voc": [246, 289, 317, 370], "2012": [246, 289], "00000": [246, 289], "00004": [246, 289], "00001": [246, 289], "00003": [246, 289], "dummydataset": [247, 248, 290, 291, 503], "127": [247, 248, 290, 291, 503, 580, 639, 645, 651], "stand_norm": [247, 248, 290, 291, 503, 580], "dummy_v2": [248, 291, 503, 580], "sparse_dummy_v2": [248, 291, 580], "label_shap": [248, 291, 503, 580], "sparsedummydataset": [248, 291], "dense_shap": [248, 291, 580], "sparse_ratio": [248, 291, 580], "imagenetraw": [249, 292, 580], "data_path": [249, 292, 580], "image_list": [249, 292, 580], "img1": [249, 292, 580], "img2": [249, 292, 580], "imgx": [249, 292, 580], "val_map": [249, 292, 580], "txt": [249, 292, 580, 582, 593, 619, 621, 622, 624, 625], "pytorchimagenetraw": [249, 292], "mxnetimagenetraw": [249, 292], "tensorflowimagenetraw": [249, 292], "inteltensorflow": [249, 251, 292, 294, 593], "tensorflowimagenetdataset": [249, 292], "onnxrtimagenetdataset": [249, 292], "bert_dataset": [250, 255, 293, 298, 309, 362], "coco_dataset": [250, 255, 293, 298, 309, 362], "dummy_dataset": [250, 255, 293, 298, 309, 362], "dummy_dataset_v2": [250, 255, 293, 298, 309, 362], "imagenet_dataset": [250, 255, 293, 298, 309, 362], "style_transfer_dataset": [250, 255, 293, 298, 309, 362], "styletransferdataset": [251, 294], "content_fold": [251, 294, 580], "style_fold": [251, 294, 580], "crop_ratio": [251, 294, 580], "resize_shap": [251, 294, 580], "image_format": [251, 294, 580], "holder": [251, 294, 580], "labelbalancecocorecordfilt": [252, 295], "balanc": [252, 295, 642, 645], "labelbalancecocorawfilt": [252, 295], "tensorflowfilt": [253, 296], "onnxrtqlfilt": [253, 296], "onnxrtitfilt": [253, 296], "pytorchfilt": [253, 296], "mxnetfilt": [253, 296], "filter_registri": [253, 296], "filter_typ": [253, 296], "__call__": [253, 296], "coco_filt": [254, 255, 297, 298, 309, 362], "imagenet_transform": [255, 258, 298, 300, 309, 362], "parsedecodecocotransform": 256, "quantizedinput": [257, 299, 647], "labelshift": [257, 299, 647], "label_shift": [257, 299, 647], "parsedecodeimagenet": [257, 299, 647], "proto": [257, 261, 299, 302, 647], "parsedecodeimagenettransform": [257, 299], "tensorflowtransposelastchannel": 257, "tensorflowshiftrescal": 257, "rescal": [257, 261, 302, 647], "tensorflowresizecropimagenettransform": [257, 299], "random_crop": [257, 299, 647], "resize_sid": [257, 299, 647], "resize_method": [257, 299], "bilinear": [257, 261, 299, 302, 647], "random_flip_left_right": [257, 299, 647], "mean_valu": [257, 299, 647], "channels_last": [257, 299, 600], "subpixel": [257, 299], "rgb": [257, 299], "seri": [257, 299, 559, 593, 597, 647], "applic": [257, 299, 562, 587, 600, 617, 619, 625, 626, 630, 631, 637, 642, 645, 646, 647, 649], "crop": [257, 261, 299, 302, 580, 647], "left": [257, 261, 299, 302, 611, 617, 645, 647], "std": [257, 261, 299, 302, 597, 647], "bilinearimagenettransform": [257, 299], "central_fract": [257, 299, 647], "875": [257, 299, 647], "fraction": [257, 299, 647], "onnxbilinearimagenettransform": [257, 299], "onnxresizecropimagenettransform": [257, 299], "std_valu": [257, 299], "229": [257, 299, 597], "225": [257, 299, 597], "resizewithaspectratio": [257, 299], "87": [257, 299, 651], "inter_pol": [257, 299], "cv2": [257, 299], "inter_area": [257, 299], "aspect": [257, 261, 299, 302, 647], "postprocess_cl": [259, 269, 597], "user_postprocess": [259, 269], "convert_to_unicod": [260, 301], "unicod": [260, 301], "assum": [260, 301, 313, 324, 366, 560, 589, 617], "load_vocab": [260, 301], "vocab_fil": [260, 261, 301, 302, 647], "convert_by_vocab": [260, 301], "vocab": [260, 301], "whitespace_token": [260, 301], "whitespac": [260, 301, 315, 368], "clean": [260, 301, 597], "piec": [260, 301, 310, 363, 596, 642], "fulltoken": [260, 301], "tokenzi": [260, 301], "basictoken": [260, 301], "punctuat": [260, 301, 310, 315, 363, 368], "lower": [260, 261, 301, 302, 315, 368, 428, 584, 636, 637, 639, 645, 647, 648], "wordpiecetoken": [260, 301], "unk_token": [260, 301], "unk": [260, 301], "max_input_chars_per_word": [260, 301], "wordpiec": [260, 261, 301, 302, 647], "concat_gener": [261, 302], "inc": [261, 302, 554, 561, 600, 607, 617, 619, 624, 637, 638, 643, 648], "tensorflowtransform": [261, 302], "mxnettransform": [261, 302], "pytorchtransform": [261, 302], "onnxrtqltransform": [261, 302], "onnxrtittransform": [261, 302], "transform_registri": [261, 302], "transform_typ": [261, 302], "basetransform": [261, 302], "tensorflowwrapfunct": [261, 302], "transform_func": [261, 302], "pytorchmxnettransform": [261, 302], "get_torchvision_map": [261, 302], "torchvis": [261, 302, 586, 590, 600, 606, 620], "composetransform": [261, 302], "transform_list": [261, 302, 647], "compos": [261, 302, 542, 647], "croptoboundingbox": [261, 302, 647], "offset_height": [261, 302, 647], "offset_width": [261, 302, 647], "target_height": [261, 302, 647], "target_width": [261, 302, 647], "box": [261, 302, 313, 317, 366, 370, 556, 596, 600, 611, 617, 646, 647, 648], "coordin": [261, 302, 349, 427, 624, 647, 648], "top": [261, 302, 308, 317, 332, 337, 345, 370, 555, 596, 617, 620, 622, 647], "corner": [261, 302, 555, 560, 562, 647], "horizont": [261, 302, 647], "mxnetcroptoboundingbox": [261, 302], "onnxrtcroptoboundingbox": [261, 302], "tensorflowcroptoboundingbox": [261, 302], "resizewithratio": [261, 302, 647], "min_dim": [261, 302, 647], "800": [261, 302, 647], "max_dim": [261, 302, 647], "1365": [261, 302, 647], "constant_valu": [261, 302], "longest": [261, 302, 647], "side": [261, 302, 580, 611, 647], "exce": [261, 302, 642, 647], "tensorflowresizewithratio": [261, 302], "permut": [261, 302, 647], "tensorflowtranspos": [261, 302], "mxnettranspos": [261, 302], "pytorchtranspos": [261, 302], "randomverticalflip": [261, 302, 647], "tensorflowrandomverticalflip": [261, 302], "randomhorizontalflip": [261, 302, 597, 647], "tensorflowrandomhorizontalflip": [261, 302], "toarrai": [261, 302, 647], "pil": [261, 302, 647], "casttftransform": [261, 302], "castonnxtransform": [261, 302], "castpytorchtransform": [261, 302], "centercroptftransform": [261, 302], "center": [261, 302, 558, 559, 593, 647, 648], "paddedcentercroptransform": [261, 302], "crop_pad": [261, 302], "resizetftransform": [261, 302], "bicub": [261, 302, 647], "resizepytorchtransform": [261, 302], "randomcroptftransform": [261, 302], "randomresizedcroppytorchtransform": [261, 302], "08": [261, 302, 647, 651], "randomresizedcropmxnettransform": [261, 302], "randomresizedcroptftransform": [261, 302], "normalizetftransform": [261, 302], "deviat": [261, 302, 582, 647], "broadcast": [261, 302, 585, 647], "rescalekeraspretraintransform": [261, 302], "rescaletftransform": [261, 302], "rescaletransform": [261, 302], "alignimagechanneltransform": [261, 302], "must": [261, 302, 313, 366, 524, 555, 556, 561, 577, 579, 593, 639, 647], "pytorchalignimagechannel": [261, 302], "tondarraytransform": [261, 302], "resizemxnettransform": [261, 302], "resizetransform": [261, 302], "cropresizetftransform": [261, 302], "boundari": [261, 302, 647], "area": [261, 302, 313, 366, 596, 647], "pytorchcropresizetransform": [261, 302], "mxnetcropresizetransform": [261, 302], "cropresizetransform": [261, 302], "centercroptransform": [261, 302], "mxnetnormalizetransform": [261, 302], "pytorchnormalizetransform": [261, 302], "normalizetransform": [261, 302], "randomcroptransform": [261, 302], "randomresizedcroptransform": [261, 302], "get_final_text": [261, 302], "pred_text": [261, 302], "orig_text": [261, 302], "project": [261, 302, 553, 554, 555, 623, 637, 644, 648, 652], "squadexampl": [261, 302], "qas_id": [261, 302], "question_text": [261, 302], "doc_token": [261, 302], "orig_answer_text": [261, 302], "start_posit": [261, 302], "end_posit": [261, 302], "is_imposs": [261, 302], "simpl": [261, 302, 593, 597, 636, 644, 645, 648], "answer": [261, 302, 314, 315, 367, 368, 554, 622, 636, 647, 651], "unique_id": [261, 302], "example_index": [261, 302], "doc_span_index": [261, 302], "token_to_orig_map": [261, 302], "token_is_max_context": [261, 302], "input_mask": [261, 302, 597], "segment_id": [261, 302, 597], "read_squad_exampl": [261, 302], "input_fil": [261, 302], "doc_strid": [261, 302, 647], "max_query_length": [261, 302, 647], "output_fn": [261, 302], "inputbatch": [261, 302], "collecttransform": [261, 302], "10833": [261, 302], "tfsquadv1posttransform": [261, 302], "n_best_siz": [261, 302, 647], "384": [261, 302, 647], "64": [261, 302, 557, 642, 645, 647, 651], "max_answer_length": [261, 302, 647], "30": [261, 302, 586, 590, 592, 647, 651], "nbest_predict": [261, 302, 647], "question": [261, 302, 314, 315, 367, 368, 554, 555, 559, 560, 593, 600, 624, 636, 645, 647, 651], "anoth": [261, 302, 310, 319, 363, 550, 582, 583, 610, 614, 647, 648], "long": [261, 302, 588, 642, 647], "document": [261, 302, 442, 561, 562, 567, 585, 595, 598, 602, 612, 615, 616, 623, 624, 626, 636, 643, 647, 649], "chunk": [261, 302, 647], "tfmodelzoocollecttransform": [261, 302], "tfsquadv1modelzooposttransform": [261, 302], "squadv1": [261, 302, 647], "parsedecodevoctransform": [261, 302], "conf_fname_or_obj": [262, 271, 303, 308, 318, 319, 320, 321, 323, 332, 337, 345], "unnecessari": [262, 597], "setter": 264, "calib_dataload": [264, 346, 423, 446, 459, 462, 556, 559, 579, 580, 582, 590, 591, 596, 597, 619, 620, 639, 640, 641, 642], "reason": [264, 554, 561, 579, 622, 642, 646, 648], "know": [264, 585, 643], "metric_cl": [266, 370, 423, 597], "user_metr": [266, 370, 423], "recommend": [266, 370, 524, 560, 580, 589, 608, 611, 616, 618, 636, 638, 648], "set_backend": 267, "tensorflowimagefold": 289, "qlinear2qdq": [304, 309, 362], "qlinearop": [305, 582, 592, 608, 639, 651], "check_model": 305, "onnx_qlinear_to_qdq": 305, "input_name_to_nod": 305, "tf_to_fp32_onnx": 306, "tf_to_int8_onnx": 306, "int8_model": [306, 307, 560], "get_node_map": 307, "fp32_onnx_path": 307, "module_node_map": 307, "get_quantizable_onnx_op": 307, "quantize_nod": 307, "dynamic_quant_export": 307, "pt_fp32_model": 307, "pt_int8_model": 307, "weight_typ": 307, "s8": 307, "static_quant_export": 307, "_quantiz": [307, 390], "torch_to_fp32_onnx": 307, "do_constant_fold": 307, "torch_to_int8_onnx": 307, "across": [308, 318, 345, 371, 581, 597, 624, 627, 636, 640, 645, 648], "variou": [308, 318, 345, 371, 562, 592, 600, 627, 636, 638, 640], "dl": [308, 318, 332, 337, 345, 371, 582, 591, 604, 617, 637, 651], "bring": [308, 345, 611, 624, 645], "vari": [308, 332, 337, 345, 622, 636, 645, 651], "roc": [308, 317, 332, 337, 345, 370], "flexibl": [308, 332, 337, 345, 559, 583, 624, 636, 642], "techniqu": [309, 362, 552, 559, 592, 597, 600, 619, 635, 636, 637, 638, 639, 649, 650, 651], "bleu": [309, 311, 316, 362, 364, 369, 596, 636], "bleu_util": [309, 316, 362, 369], "coco_label_map": [309, 316, 362, 369], "coco_tool": [309, 316, 362, 369], "evaluate_squad": [309, 316, 362, 369], "f1": [309, 314, 316, 317, 362, 367, 369, 370, 585, 596, 597, 620, 644, 651], "basic_na": [309, 322, 362], "nas_util": [309, 322, 362], "pruner_legaci": [309, 362], "gradient_sensit": [309, 328, 362], "group_lasso": [309, 328, 362], "pruning_recip": [309, 362], "tile_pattern": [309, 333, 334], "prune_util": [309, 338, 362], "tuning_sampl": [309, 351, 357, 362, 431, 437], "tuning_spac": [309, 351, 357, 358, 360, 362, 431, 437, 438, 440], "tuning_struct": [309, 351, 357, 358, 359, 362, 431, 437, 438, 439], "auto_mixed_precis": [309, 351, 362, 431], "graph_optim": [309, 362], "mixed_precis": [309, 362, 371, 597], "model_convers": [309, 362], "pruning_v2": [309, 362], "unicoderegex": [310, 363], "hoc": [310, 363], "hack": [310, 363], "recogn": [310, 363, 648], "nondigit_punct_r": [310, 363], "compil": [310, 363, 597], "express": [310, 363, 554], "preced": [310, 363, 645, 648], "digit": [310, 363, 550, 637], "punct_nondigit_r": [310, 363], "symbol_r": [310, 363], "bleu_token": [310, 363], "mose": [310, 363], "smt": [310, 363], "mosesdecod": [310, 363], "mteval": [310, 363], "v14": [310, 363], "pl": [310, 363], "l954": [310, 363], "l983": [310, 363], "bilingu": [310, 363], "understudi": [310, 363], "qualiti": [310, 363], "machin": [310, 363, 587, 593, 603, 617, 619, 625, 637, 645, 646], "translat": [310, 311, 363, 364, 636, 648], "natur": [310, 363, 587], "approxim": [310, 311, 363, 364, 561, 596, 642], "glue": [310, 317, 363, 370, 580, 596, 597, 606], "word": [310, 363, 596, 636, 642, 651], "ngram": [310, 363, 596], "breviti": [310, 311, 363, 364, 596], "doe": [310, 363, 441, 579, 580, 596, 597, 642, 643, 647], "beam": [310, 363, 596], "tensor2tensor": [311, 364], "bleu_hook": [311, 364], "compute_bleu": [311, 364], "reference_corpu": [311, 364], "translation_corpu": [311, 364], "max_ord": [311, 364], "use_bp": [311, 364], "against": [311, 364], "gram": [311, 364], "bleu_scor": [311, 364], "parti": [313, 366, 555, 594, 639], "pycocotool": [313, 366, 588, 593], "noth": [313, 366, 648], "thu": [313, 366, 524, 597, 636, 639], "cannot": [313, 366, 556, 588, 642, 646], "jonathanhuang": [313, 366], "image_id": [313, 366, 596], "invok": [313, 366, 524, 561], "groundtruth_dict": [313, 366], "exportgroundtruthtococo": [313, 366], "groundtruth_boxes_list": [313, 366], "groundtruth_classes_list": [313, 366], "max_num_class": [313, 366], "output_path": [313, 366], "detections_list": [313, 366], "exportdetectionstococo": [313, 366], "detection_boxes_list": [313, 366], "detection_scores_list": [313, 366], "detection_classes_list": [313, 366], "cocowrapp": [313, 366], "loadannot": [313, 366], "cocoevalwrapp": [313, 366], "agnostic_mod": [313, 366], "computemetr": [313, 366], "detection_typ": [313, 366], "bbox": [313, 366, 556, 596], "hold": [313, 349, 366, 427, 580], "iou_typ": [313, 366], "iou_thr": [313, 317, 366, 370, 596], "map_point": [313, 317, 366, 370, 596], "cocoev": [313, 366], "mscoco": [313, 366], "Then": [313, 366, 561, 582, 610, 612, 614, 615, 622, 645, 648], "exportsingleimagegroundtruthtococo": [313, 366], "next_annotation_id": [313, 366], "category_id_set": [313, 366], "groundtruth_box": [313, 366], "groundtruth_class": [313, 366], "groundtruth_mask": [313, 366], "groundtruth_is_crowd": [313, 366], "ingest": [313, 366], "here": [313, 366, 442, 561, 580, 585, 586, 587, 589, 590, 595, 596, 605, 612, 615, 617, 620, 623, 625, 639, 643, 644, 645, 651], "exportsingleimagedetectionstococo": [313, 366], "uniqu": [313, 346, 366, 639], "assign": [313, 366, 550, 585, 638, 648], "num_gt_box": [313, 366], "num_detect": [313, 317, 366, 370, 596, 597, 650], "image_height": [313, 366], "image_width": [313, 366], "detection_mask": [313, 366], "crowd": [313, 366], "insid": [313, 366, 524, 583, 584, 618, 636, 640, 648], "exportsingleimagedetectionboxestococo": [313, 366], "detection_box": [313, 366, 597, 650], "detection_scor": [313, 366, 597, 650], "detection_class": [313, 366, 597, 650], "exporsingleimagedetectionboxestococo": [313, 366], "exportsingleimagedetectionmaskstococo": [313, 366], "allenai": [314, 315, 367, 368], "bi": [314, 315, 367, 368], "att": [314, 315, 367, 368], "flow": [314, 315, 367, 368, 556, 557, 597], "f1_score": [314, 315, 367, 368], "ground_truth": [314, 315, 367, 368], "ground": [314, 315, 367, 368], "truth": [314, 315, 367, 368], "metric_max_over_ground_truth": [314, 315, 367, 368], "metric_fn": [314, 315, 367, 368], "exact_match_scor": [314, 367], "exact": [314, 367], "articl": [314, 315, 367, 368], "paragraph": [314, 315, 367, 368], "qa": [314, 315, 367, 368, 559], "normalize_answ": [315, 368], "newlin": [315, 368, 550], "tab": [315, 368, 617, 646], "harmon": [315, 317, 368, 370], "recal": [315, 317, 368, 370], "answer_start": [315, 368], "177": [315, 368, 651], "denver": [315, 368], "bronco": [315, 368], "nfl": [315, 368], "afc": [315, 368], "super": [315, 368, 557], "bowl": [315, 368], "50": [315, 368, 557, 561, 622, 636, 645, 651], "56be4db0acb8001400a502ec": [315, 368], "percentag": [315, 368, 387, 578, 642, 650], "tensorflowmetr": [317, 370], "maintain": [317, 370, 524, 554, 555, 599, 600, 612, 615, 619, 624, 625, 636, 642, 643], "pytorchmetr": [317, 370], "mxnetmetr": [317, 370], "onnxrtqlmetr": [317, 370], "onnxrtitmetr": [317, 370], "metric_registri": [317, 370], "metric_typ": [317, 370], "decorator_metr": [317, 370], "basemetr": [317, 370, 423], "single_output": [317, 370], "hvd": [317, 370, 585], "wrappytorchmetr": [317, 370], "wrapmxnetmetr": [317, 370], "wraponnxrtmetr": [317, 370], "proport": [317, 370], "pred_list": [317, 370], "pytorchloss": [317, 370], "mae": [317, 370, 596], "compare_label": [317, 370, 423, 596], "rmse": [317, 370, 596, 648], "tensorflowtopk": [317, 370], "k": [317, 370, 423, 596, 619, 636], "among": [317, 370, 611, 645], "outcom": [317, 370], "num_correct": [317, 370], "num_sampl": [317, 370], "generaltopk": [317, 370], "cocomapv2": [317, 370, 596], "anno_path": [317, 370, 596], "map_kei": [317, 370], "detectionboxes_precis": [317, 370], "output_index_map": [317, 370, 596], "tensorflowmap": [317, 370], "tensorflowcocomap": [317, 370], "tensorflowvocmap": [317, 370], "squadf1": [317, 370, 596], "miou": [317, 370], "num_class": [317, 370], "21": [317, 370, 605, 606, 628, 631, 632, 637, 645, 651], "iou": [317, 370], "intersect": [317, 370, 560, 596], "union": [317, 370, 386, 387, 389, 393, 400, 539, 596, 628], "onnxrtglu": [317, 370], "dlrm": [317, 370], "modelconvers": 319, "typic": [319, 346, 557, 559, 584, 586, 590, 622, 636, 651], "basicna": 320, "model_build": [320, 323], "conf_fnam": 320, "nasbas": [323, 557], "nas_registri": 324, "nas_method": 324, "create_search_space_pool": 324, "idx": [324, 580], "enumer": [324, 539, 560, 583, 584, 585, 597, 635, 636, 646], "find_pareto_front": 324, "pareto": [324, 557], "front": [324, 557], "n_point": 324, "n_metric": 324, "n_pareto_point": 324, "gradientsensitivityprun": 326, "pytorchmodel": [326, 327, 329, 330, 331, 380], "overwritten": [326, 327, 329, 330, 331, 605], "grouplassoprun": 327, "legaci": 328, "basicmagnitudeprun": 329, "patternlockprun": [330, 342], "pruner_registri": 331, "clase": 331, "pruningconf": [332, 337], "tfpruningcallback": [332, 337], "input_model": [332, 337, 599, 620, 621, 622, 646], "pure": [332, 337, 636], "pattern_registri": 335, "pattern_typ": 335, "patternbas": 335, "mask_shap": [335, 336], "is_contigu": 335, "tile": 336, "tilepatternbas": 336, "tilepattern_1x1": 336, "1x1": [336, 583, 597, 636], "tilepattern_2x2": 336, "2x2": [336, 645], "tilepattern_1x16": 336, "1x16": 336, "tilepattern_4x1": 336, "tilepattern_1x2": 336, "1x2": [336, 645], "patternnxm": 340, "patternninm": 340, "reset_non_value_to_default": 341, "parse_not_to_prun": 341, "update_frequency_on_step": [342, 638], "max_sparsity_ratio_per_lay": [342, 638], "magnitudeprun": 342, "snipprun": 342, "snipmomentumprun": 342, "moreoev": 342, "quantconf": 345, "separ": [346, 554, 591, 594, 625, 627, 635, 638], "opt_model": [346, 597], "fulli": [346, 597, 625, 639, 645], "train_func": [346, 539, 585, 597, 639], "automixedprecisiontunestrategi": [347, 425], "basictunestrategi": [348, 426], "polici": [348, 352, 424, 426, 432, 554, 559, 650, 652], "bayesiantunestrategi": [349, 427], "acq_max": [349, 427], "ac": [349, 427], "gp": [349, 427], "y_max": [349, 427], "n_warmup": [349, 427], "10000": [349, 427, 636], "n_iter": [349, 427], "acquisit": [349, 427], "gaussian": [349, 427, 648], "relev": [349, 427, 561, 562, 622, 636], "acq": [349, 427], "randomst": [349, 427], "scipi": [349, 427], "x_max": [349, 427], "targetspac": [349, 427], "pbound": [349, 427], "9527": [349, 427, 597, 650], "bayesianoptim": [349, 427], "exhaustivetunestrategi": [350, 429], "msetunestrategi": [352, 432], "mse_v2tunestrategi": [353, 433], "revert": [353, 361, 433, 441, 648], "randomtunestrategi": [354, 434], "strategy_registri": [355, 435, 648], "tunestrategi": [355, 435, 648], "tuningsamplerregistri": 358, "tuningsampl": [358, 438], "tuningord": [358, 438], "tuningspac": [358, 359, 438, 439], "tuning_order_lst": [358, 438], "initial_op_tuning_cfg": [358, 438], "modelwisetuningsampl": [358, 438], "tuning_items_prior": [358, 438], "op_dtype_dict": [358, 438], "optuningconfig": [358, 359, 360, 438, 439, 440], "optypewisetuningsampl": [358, 438], "opwisetuningsampl": [358, 438], "fallbacktuningsampl": [358, 438], "op_dtyp": [358, 438], "skip_first": [358, 438], "smoothquantsampl": [358, 438], "tuningitem": [359, 439], "item_typ": [359, 439], "pattern_to_intern": [359, 439], "default_dtyp": [359, 439], "pattern_to_path": [359, 439], "quant_mode_from_pattern": [359, 439], "internal_pattern": [359, 439], "initial_tuning_cfg_with_quant_mod": [359, 439], "op_name_typ": [359, 439], "step1": [359, 439], "step2": [359, 439], "complet": [359, 439, 560, 561, 636, 639, 648, 650, 651], "step3": [359, 439], "step4": [359, 439], "step5": [359, 439], "op_quant_mod": [360, 440], "ordereddefaultdict": [361, 441], "extract_data_typ": [361, 441], "reverted_data_typ": [361, 441], "signed_flag": [361, 441], "get_adaptor_nam": [361, 441], "experiment": [362, 557, 580, 584, 585, 587, 593, 597, 636, 638, 639, 643, 647], "base_model": [362, 373], "keras_model": [362, 373], "mxnet_model": [362, 373], "nets_factori": [362, 373, 504], "onnx_model": [362, 373, 383, 384, 386, 387, 389, 398, 416, 620], "tensorflow_model": [362, 373, 421, 622], "torch_model": [362, 373], "collect_layer_histogram": [362, 543], "create_obj_from_config": [362, 543], "kl_diverg": [362, 543], "load_huggingfac": [362, 543, 597], "neural_insights_util": [362, 543], "weights_detail": [362, 543], "sub_class": [370, 423], "register_customer_metr": 370, "topk": [370, 423, 585, 596, 597, 619, 639], "frozen": [371, 379, 423, 506, 599], "savedmodel": [371, 379, 423, 506, 651], "onnx_ml_pb2": [371, 599], "hybirdblock": [371, 423], "basemodel": [372, 459, 462, 506], "plai": [372, 506, 637, 642, 645], "role": [372, 506, 642, 645], "kerasmodel": [374, 506], "get_model_fwk_nam": 375, "fwk": 375, "mxnetmodel": 376, "net": [377, 507], "tfslimnetsfactori": [377, 507], "get_model_typ": [379, 506], "validate_graph_nod": [379, 506], "validate_and_inference_input_output": [379, 506], "graph_sess": [379, 506], "graph_def_sess": [379, 506], "frozen_pb_sess": [379, 506], "load_saved_model": [379, 506], "saved_model_tag": [379, 506], "signatur": [379, 506], "metagraphdef": [379, 506], "keras_sess": [379, 506], "slim_sess": [379, 506], "checkpoint_sess": [379, 506], "estimator_sess": [379, 506], "saved_model_sess": [379, 506], "tensorflowbasemodel": [379, 421, 506], "tensorflowsavedmodelmodel": [379, 506], "tensorflowllmmodel": [379, 506], "exceed": [379, 506], "2gb": [379, 506], "tensorflowqatmodel": [379, 506], "tensorflowcheckpointmodel": [379, 506], "tensorflowmodel": [379, 506], "pytorchbasemodel": 380, "pytorchfxmodel": 380, "ipexmodel": 380, "driven": [381, 559, 597, 617, 634, 646], "objective_registri": 381, "objective_custom_registri": 381, "obj_cl": 381, "eural_compressor": 381, "objective_cl": 381, "user_object": 381, "__class__": 381, "__name__": 381, "objective_cfg": 381, "usr_cfg": 381, "user_obj_cfg": 381, "easili": [381, 560, 601, 605, 617, 634, 645], "peak": [381, 634], "multiobject": 381, "metric_criterion": 381, "metric_weight": 381, "obj_criterion": 381, "obj_weight": 381, "is_measur": 381, "calibrationdataread": [383, 384, 386, 387, 390, 392, 393, 394], "pathlib": [384, 386, 387, 389, 392, 393], "weight_dtyp": [386, 387, 389, 395, 460], "weight_bit": [386, 387, 389, 393, 395, 561], "weight_group_s": [386, 387, 389, 395], "weight_sym": [386, 387, 389, 395, 460], "91": [386, 642, 645, 651], "apply_awq_on_model": 386, "quant_config": [386, 387, 389, 392, 400, 450, 459, 462, 508, 534, 538], "calibration_data_read": [386, 387, 392, 393], "nnx": 386, "stabil": [387, 642], "apply_gptq_on_model": 387, "apply_rtn_on_model": 389, "nodeproto": 390, "data_read": 390, "reader": 390, "smooth_quant_entri": 392, "smoohquantconfig": [392, 395], "rtn_quantize_entri": 392, "rtnconfig": [392, 393, 395, 400, 529, 531, 538], "gptq_quantize_entri": 392, "gptqconfig": [392, 393, 395, 531], "awq_quantize_entri": 392, "awqconfig": [392, 395], "model_input": 393, "base_tun": [393, 530], "params_list": 393, "expand": 393, "eatch": 393, "eval": [393, 556, 579, 582, 600, 639, 646], "l139": 394, "act_dtyp": [395, 460], "get_default_rtn_config": [395, 531], "get_default_gptq_config": [395, 531], "get_default_awq_config": 395, "fusedconv": 395, "calib_it": 395, "auto_alpha_arg": [395, 460, 645], "alpha_min": [395, 645], "alpha_max": [395, 645], "alpha_step": [395, 645], "attn_method": 395, "get_default_sq_config": [395, 460], "register_algo": [400, 508, 538], "algos_map": [400, 508, 538], "example_algo": [400, 508, 538], "get_qrange_for_qtyp": 400, "parserfactori": 402, "onnxrtparserfactori": 404, "onnxprofilingpars": 406, "respons": [406, 407, 411, 630, 631, 632, 639], "profilingpars": 407, "profilingresult": 408, "total_execution_tim": 408, "accelerator_execution_tim": 408, "cpu_execution_tim": 408, "op_run": 408, "op_defin": 408, "tensorflowparserfactori": 409, "tensorflowprofilingpars": 411, "profilerfactori": [412, 414, 419], "create_onnx_config": 417, "ort": 417, "sessionopt": 417, "delete_assign": 422, "create_tf_config": 422, "tf_modul": 422, "configproto": 422, "set_eager_execut": 422, "entir": [423, 539, 556, 561, 562, 578, 624, 636], "autotunestrategi": 424, "conservativetunestrategi": 428, "o0": [428, 648], "who": [428, 554], "hawq_v2tunestrategi": 430, "made": [430, 560, 639, 643, 648], "impact": [430, 636, 643, 648], "tunestrategymeta": 435, "metaclass": 435, "lowerbitssampl": 438, "blockfallbacktuningsampl": 438, "op_block_lst": 438, "target_dtyp": 438, "alpha_list": 438, "weightonlyquantsampl": 438, "quantopt": 441, "quant_typ": 441, "quant_opt": 441, "preprocess_user_cfg": 441, "op_user_cfg": 441, "op_user_cfg_modifi": 441, "build_slave_faker_model": 441, "slave": [441, 648], "virtual": [441, 637], "classregist": 441, "fun": 442, "attribute1": 442, "module_debug_level1": 442, "debug": [442, 546, 582, 610, 614, 618, 648, 649], "function1": 442, "param1": 442, "param2": 442, "parameter1": 442, "parameter2": 442, "function2": 442, "pep": 442, "484": [442, 651], "output_model": [442, 597, 620, 622, 646], "function3": 442, "section": [442, 562, 582, 583, 584, 617, 620, 623, 636, 638, 642, 650], "restructuredtext": 442, "liter": 442, "generator1": 442, "example_gener": 442, "exampleclass": 442, "param3": 442, "public": [442, 554, 612, 615], "attr1": 442, "attr2": 442, "attr5": 442, "api_doc_exampl": 443, "smoothquantconfig": [446, 460], "calib_iter": [446, 450, 459, 462, 561], "scaler": 447, "kerasconfigconvert": 450, "staticquantconfig": [450, 459, 460, 508], "static_quantize_entri": 459, "weight_granular": 460, "per_tensor": [460, 561, 562, 589, 639, 650], "act_sym": 460, "act_granular": 460, "base_config": [460, 462, 534], "get_all_registered_config": 460, "get_default_static_quant_config": 460, "record_max_info": 460, "weight_clip": 460, "default_sq_alpha_arg": 460, "quantize_model": 462, "dummydatasetv2": 503, "itex_instal": 508, "instal": [508, 585, 588, 590, 600, 602, 605, 608, 612, 615, 617, 618, 620, 621, 622, 652], "dump_elapsed_tim": [508, 550, 560], "customized_msg": [508, 550], "elaps": [508, 550], "combine_histogram": [508, 550], "old_hist": [508, 550], "old": [508, 550, 597, 643], "get_all_fp32_data": [508, 550], "get_tensor_histogram": [508, 550], "scale_info": [508, 550], "dequantize_weight": [508, 550], "weight_tensor": [508, 550], "min_filter_tensor": [508, 550], "max_filter_tensor": [508, 550], "dump_data_to_loc": [508, 550], "pkl": [508, 550, 621], "load_data_from_pkl": [508, 550], "cpuinfo": [508, 550], "statist": [508, 550, 551], "header": [508, 550, 588], "field_nam": [508, 550], "output_handl": [508, 550], "printer": [508, 550], "captureoutputtofil": [508, 550], "tmp_file_path": [508, 550], "stream": [508, 550, 651], "sy": [508, 550, 603], "stderr": [508, 550], "captur": [508, 550], "lazyimport": [508, 550], "lazi": [508, 550], "till": [508, 550, 648], "use_full_rang": [518, 522, 531], "use_auto_scal": 518, "use_mse_search": [518, 522, 531], "use_layer_wis": [519, 531], "run_fn": [519, 530, 534], "run_arg": [519, 530, 534], "device_typ": 524, "_dtype": 524, "cache_en": 524, "manag": [524, 539, 542, 597, 600, 601, 611], "region": [524, 645], "chosen": [524, 561, 578], "enter": [524, 611, 617, 625], "half": [524, 598, 608], "hpu": 524, "float8_e4m3fn": 524, "autocastmodel": 524, "affect": [524, 645], "dataparallel": 524, "distributeddataparallel": 524, "torch_dtyp": [524, 562], "rtn_entri": 529, "configs_map": 529, "use_sym": 531, "use_double_qu": 531, "double_quant_dtyp": 531, "double_quant_bit": 531, "double_quant_use_sym": 531, "double_quant_group_s": 531, "act_ord": 531, "static_group": [531, 642], "loop": [539, 556, 557, 561, 562, 589, 627, 644, 648], "compressionmanag": 539, "deal": 539, "pruningconfig": 539, "orchestr": [539, 559, 592, 649], "on_train_begin": [539, 556, 583, 584, 597, 635, 636, 639], "train_loop": [539, 597, 635], "on_epoch_begin": [539, 542, 583, 584, 597, 635], "on_step_begin": [539, 542, 583, 584, 597, 635, 636], "on_after_compute_loss": [539, 583, 584, 597, 635], "on_before_optimizer_step": [539, 583, 584, 597, 635, 636], "on_step_end": [539, 542, 583, 584, 597, 635], "on_epoch_end": [539, 542, 583, 584, 597, 635], "on_train_end": [539, 583, 584, 597, 635, 636, 639], "path_to_sav": 539, "top1": [539, 596, 619, 636, 639, 651], "callbacks_list": 539, "layerhistogramcollector": 540, "layer_tensor": 540, "include_lay": 540, "get_func_from_config": 542, "func_dict": 542, "get_preprocess": 542, "get_metr": 542, "get_postprocess": 542, "get_algorithm": 542, "create_dataset": 542, "cfg_preprocess": 542, "cfg_filter": 542, "create_dataload": 542, "dataloader_cfg": 542, "create_eval_func": 542, "postprocess_cfg": 542, "baselin": [542, 644, 645, 646], "create_train_func": 542, "train_cfg": 542, "Their": 542, "auxiliari": 543, "optimizedmodel": 545, "from_pretrain": [545, 597], "save_for_huggingface_upstream": [545, 597], "saved_dir": [545, 642], "msg": [546, 626, 630, 631], "fatal": 546, "warn": 546, "alia": [546, 550, 602, 607], "register_neural_insights_workload": 547, "workload_loc": [547, 550], "workload_mod": 547, "workload_nam": 547, "uuid": 547, "update_neural_insights_workload": 547, "workload_uuid": 547, "update_neural_insights_workload_accuracy_data": 547, "baseline_accuraci": 547, "optimized_accuraci": 547, "get_model_path": 547, "is_int8_model": 549, "load_weight_onli": 549, "checkpoint_dir": 549, "history_cfg": 549, "best_configur": 549, "best_model_weight": 549, "snapshot": [549, 621], "recover_model_from_json": 549, "json_file_path": 549, "cfg_from_fil": 550, "yaml_fil": [550, 580, 585], "time_limit": 550, "get_siz": 550, "seen": [550, 560], "compute_spars": 550, "fault_tolerant_fil": 550, "equal_dict": 550, "d2": 550, "compare_kei": 550, "ignore_kei": 550, "ignor": [550, 578, 580, 642, 645, 648], "get_tuning_histori": 550, "tuning_history_path": 550, "offlin": [550, 554, 597, 639, 645], "str2arrai": 550, "global_st": 550, "show_memory_info": 550, "hint": 550, "dump_class_attr": 550, "compare_object": 550, "obj1": 550, "obj2": 550, "ignore_attr": 550, "comparison": [550, 642, 643, 646], "alias_param": 550, "param_nam": 550, "param_alia": 550, "alias": 550, "print_tabl": 550, "column_map": 550, "table_entri": 550, "titl": [550, 594, 618, 648], "insert_newlin": 550, "prettyt": 550, "column": [550, 642, 645], "handler": [550, 648], "row": [550, 582, 620, 645], "decim": 550, "get_tensors_info": 550, "get_weights_detail": 550, "weightdetail": 550, "dump_tabl": 550, "file_typ": 550, "csv": [550, 557, 620, 621], "dump_table_to_csv": 550, "get_number_of_socket": 550, "platform": [550, 559, 592, 600, 608, 627, 637, 639], "opentri": 550, "activation_min": 550, "activation_max": 550, "print_op_list": 550, "get_op_list": 550, "minmax_file_path": 550, "input_model_tensor": 550, "optimized_model_tensor": 550, "activation_min_max": 550, "calculate_ms": 550, "mse_metric_gap": 550, "fp32_tensor": 550, "dequantize_tensor": 550, "euclidean": [550, 583], "distanc": [550, 583], "check_key_exist": 550, "weightsdetail": 551, "input_tensor_data": 551, "optimized_tensor_data": 551, "weightsstatist": 551, "welcom": [553, 554, 555, 559, 619, 626, 652], "interest": [554, 559, 619, 646], "foster": 554, "particip": [554, 627], "commun": [554, 619], "harass": 554, "experi": [554, 600, 622, 644, 645, 648], "everyon": 554, "regardless": 554, "ag": 554, "bodi": 554, "ethnic": 554, "characterist": 554, "gender": 554, "educ": 554, "socio": 554, "econom": 554, "race": 554, "religion": 554, "sexual": 554, "orient": 554, "contribut": [554, 559, 636], "inclus": 554, "Being": 554, "viewpoint": 554, "gracefulli": 554, "focus": [554, 560], "empathi": 554, "toward": [554, 583], "member": [554, 560], "unaccept": 554, "imageri": 554, "unwelcom": 554, "troll": 554, "insult": 554, "derogatori": 554, "polit": 554, "attack": 554, "privat": 554, "publish": [554, 594, 595, 598, 618, 645], "electron": 554, "explicit": 554, "permiss": 554, "inappropri": 554, "profession": 554, "clarifi": 554, "appropri": [554, 578, 645], "fair": 554, "action": [554, 612, 615], "edit": 554, "reject": 554, "commit": [554, 555], "wiki": 554, "ban": 554, "temporarili": 554, "deem": 554, "threaten": 554, "offens": 554, "harm": 554, "mail": 554, "social": [554, 637], "media": [554, 637], "account": [554, 644, 648], "appoint": 554, "onlin": [554, 644], "event": [554, 646], "abus": 554, "report": [554, 555, 559, 627, 644], "contact": [554, 643, 644], "complaint": 554, "review": [554, 555, 559, 637], "investig": [554, 622], "circumst": [554, 638], "oblig": [554, 623], "confidenti": [554, 619], "regard": [554, 641], "incid": 554, "good": [554, 639, 648], "faith": 554, "repercuss": 554, "leadership": 554, "faq": [554, 559], "page": [554, 555, 619, 622, 623], "send": [555, 561], "view": [555, 559, 586, 608, 617, 623, 643], "star": 555, "repositori": [555, 612, 615], "button": [555, 592, 611, 617], "fork": [555, 612, 615], "clone": [555, 582, 593, 610, 614, 619, 621, 622, 624, 625], "pc": 555, "git": [555, 582, 588, 593, 619, 621, 622, 624, 625], "modif": [555, 560, 589, 605, 624], "checkout": 555, "my": 555, "push": [555, 636, 642, 645], "cover": [555, 587, 591, 637], "would": [555, 597, 621, 636, 639, 645], "adopt": [555, 600, 636, 637, 645], "certif": [555, 619], "agre": 555, "pr": [555, 579, 596, 612, 615, 643], "At": [555, 561, 623, 627, 648], "approv": 555, "solv": [555, 639, 643], "licens": 555, "azur": [555, 559, 637], "devop": 555, "ci": 555, "cloud": [555, 559, 627, 637], "deploi": [555, 583, 597, 623, 627, 642, 648], "e16": 555, "v5": 555, "scan": [555, 559], "pylint": 555, "bandit": 555, "copyright": [555, 594], "docstyl": 555, "spellcheck": 555, "dco": 555, "pytest": 555, "No": [555, 588, 597, 625, 626, 637], "failur": [555, 556], "fault": 555, "coverag": 555, "runtim": [555, 559, 560, 561, 563, 579, 582, 586, 589, 592, 598, 602, 607, 608, 638, 642, 643, 648], "submit": [555, 624, 627, 637], "bug": [555, 559], "intend": 555, "safe": 555, "collabor": [555, 559, 602, 608], "adher": 555, "toolkit": [556, 593, 600, 608, 637, 649], "tracer": 556, "resolv": [556, 558], "floatfunct": 556, "cat": [556, 587, 603, 630, 631, 632], "done": [556, 583, 584, 601, 617, 626, 630, 631, 636, 639], "10004": [556, 557, 560, 579, 583, 584, 585, 589, 592, 598, 635, 638, 640, 642, 650], "neural_compressor": [556, 557, 559, 562, 577, 579, 580, 582, 583, 584, 585, 587, 590, 591, 596, 597, 598, 599, 619, 620, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 647, 648, 650], "conduct": [556, 597, 605, 617, 648, 649], "imper": 556, "therefor": [556, 597, 620, 622, 636, 639, 640, 643, 645], "lot": [556, 622, 645], "As": [556, 561, 579, 583, 596, 597, 611, 622, 636, 642, 648], "successfulli": [556, 585, 626, 630, 631, 632, 637], "suggest": [556, 644], "traceabl": 556, "proxi": 556, "tutori": [556, 608, 637, 649], "prototyp": 556, "html": [556, 559, 561, 578, 585, 592, 612, 615, 618, 620, 626, 630, 639], "highlight": 556, "untrac": 556, "ssd": [556, 587, 651], "resnet34": [556, 651], "r34": 556, "bboxes_labels_scor": 556, "prob": 556, "45": [556, 651], "max_output": 556, "zip": [556, 626, 630, 631], "dbox": 556, "dlabel": 556, "dscore": 556, "decode_singl": 556, "autom": [557, 600, 617, 618, 637, 645], "artifici": 557, "ann": 557, "par": [557, 627], "outperform": 557, "propos": [557, 560, 583, 598, 642, 645], "potenti": [557, 582], "lie": [557, 578], "predictor": 557, "shown": [557, 579, 582, 583, 596, 597, 611, 620, 622, 634, 635, 636, 640, 645, 648], "figur": [557, 610, 611, 614, 640], "popul": 557, "inner": 557, "evolutionari": 557, "until": [557, 561, 648], "conclud": 557, "met": [557, 589, 639, 646], "yet": [557, 612, 615, 618, 625, 639], "simplest": [557, 578, 603], "launcher": [557, 559, 583, 584, 608, 649], "agent": 557, "nsga2": 557, "supernet": 557, "ofa_mbv3_d234_e346_k357_w1": 557, "acc": [557, 627, 636, 646, 651], "mac": [557, 618], "num_ev": 557, "250": [557, 636], "results_csv_path": 557, "search_result": 557, "dataset_path": 557, "ilsvrc2012": 557, "aim": [557, 559, 595, 600, 636, 645, 648, 649], "mobilenetv3": 557, "lt": [557, 580, 651], "wmt": 557, "en": 557, "de": 557, "guidelin": [558, 559], "mainstream": [559, 649], "workflow": [559, 561, 562, 582, 583, 587, 593, 598, 612, 615, 619, 646, 649], "particular": [559, 636, 642], "wide": [559, 586, 598, 636, 639, 651], "hardwar": [559, 560, 583, 592, 597, 617, 636, 637, 638], "xeon": [559, 593, 594, 595, 598, 637, 639, 641, 651], "scalabl": [559, 593, 595, 598, 637, 639, 641], "processor": [559, 595, 598, 625, 637, 639, 641], "flex": [559, 593], "amd": [559, 593, 651], "arm": [559, 592, 593, 651], "nvidia": [559, 578, 592, 593, 651], "llama2": 559, "falcon": [559, 595, 636, 645, 651], "j": [559, 595, 621, 636, 645, 651], "bloom": [559, 636, 645, 651], "broad": [559, 592, 606, 649], "stabl": [559, 593, 636, 637], "diffus": [559, 637], "vision": [559, 587, 604, 645], "coder": [559, 592, 601, 602, 605, 608, 611, 624, 628, 637], "marketplac": [559, 618, 637], "googl": [559, 598, 637], "amazon": [559, 600, 608], "web": [559, 619, 625, 630, 631, 632, 646], "servic": [559, 617, 624, 637], "softwar": [559, 594, 636, 637, 643], "alibaba": [559, 607, 614, 615, 637], "tencent": [559, 637], "taco": [559, 637], "oliv": [559, 637], "ai": [559, 600, 637, 641, 649], "ecosystem": [559, 637], "lightn": [559, 607], "pip": [559, 582, 585, 588, 590, 593, 602, 605, 610, 612, 614, 615, 619, 620, 621, 622, 643], "wget": [559, 582, 588, 590, 619, 622], "googleapi": [559, 590, 619, 622], "v1_6": [559, 590, 619, 622], "mobilenet_v1_1": [559, 590, 619, 630], "0_224_frozen": [559, 590, 619, 630], "overview": [559, 648], "jupyterlab": [559, 600, 606, 608, 610, 614, 649], "studio": [559, 608, 617, 627, 649], "topic": 559, "int4": [559, 595, 639, 651], "fp8": [559, 637], "innov": [559, 608, 637], "blog": [559, 637], "oct": [559, 637], "emnlp": [559, 637], "teq": [559, 637, 640, 642], "sep": [559, 637], "neurip": [559, 637], "quala": [559, 637], "minilm": [559, 637, 651], "releas": [559, 593, 606, 608, 610, 614, 616, 628, 631, 632, 652], "legal": [559, 652], "request": [559, 625, 626, 627, 630, 631, 632, 639], "ask": [559, 593], "email": 559, "research": [559, 594, 645, 651], "idea": [559, 619, 636, 645, 648], "discord": 559, "join": [559, 620, 625, 630, 631], "technic": 559, "discuss": 559, "wechat": [559, 637], "img": 559, "bridg": [560, 561, 592], "vanilla": [560, 561, 592], "abcadaptor": 560, "__init__": [560, 579, 580, 596, 648], "query_fw_cap": [560, 562], "query_fused_pattern": 560, "he": 560, "besid": [560, 583, 622, 642], "describ": [560, 562, 582, 589, 619, 646], "past": [560, 642], "mainten": 560, "difficult": [560, 645], "abil": [560, 561, 580, 589, 645], "fragment": 560, "scenario": [560, 577, 583, 597, 636, 642], "granular": [560, 561, 562, 589, 592, 603, 639, 645, 650], "semant": [560, 589], "mla": [560, 598, 639], "becom": [560, 587, 636, 642], "explor": 560, "inspect_tensor": 560, "op_list": [560, 646], "iteration_list": 560, "inspect_typ": 560, "save_to_disk": 560, "quantization_cfg": 560, "set_tensor": 560, "tensor_dict": 560, "diagnosis_help": 560, "fw": 561, "outlin": [561, 562], "instruct": [561, 562, 583, 593, 598, 612, 615, 619, 620, 621, 622, 636, 637, 638, 639, 645, 651], "extend": [561, 562], "accommod": [561, 562], "incorpor": [561, 562, 584, 636, 648], "give": [561, 617, 648], "diagram": [561, 562, 582, 648], "illustr": [561, 562, 584, 648], "sequencediagram": [561, 562, 627], "autonumb": [561, 562], "query_framework_cap": 561, "opwis": 561, "optypewis": 561, "travers": [561, 562, 642, 648], "\u2776": 561, "\u2777": 561, "\u2778": 561, "\u2779": 561, "\u277a": 561, "\u277b": 561, "\u277c": 561, "These": [561, 592, 620], "chapter": 561, "node_op": 561, "confirm": 561, "int8_conv_config": 561, "optype_wise_": 561, "tuning_cfg_to_fw": 561, "Its": [561, 578, 636], "dispatch": [561, 592, 624, 627], "is_perchannel": 561, "is_asymmetr": 561, "convert_bf16": 561, "somewhat": 561, "distort": 561, "line": [561, 585, 592, 600, 605, 606, 625, 646], "explain": [562, 582, 645], "let": [562, 589, 605, 636, 638, 650], "overal": [562, 625, 650], "drive": 562, "uint4": 562, "kullback": [562, 583], "leibler": [562, 583], "pytorch_cpu": 562, "1_11_capabl": 562, "cap_s8_1_11": 562, "cap_s8_1_11_conv1d": 562, "per_channel_symmetr": 562, "addition": [562, 585, 636, 648], "per_tensor_symmetr": 562, "nativ": 562, "with_arg": 562, "qscheme": 562, "quant_min": 562, "quant_max": 562, "linux": [577, 588, 593, 611, 617], "x86_64": 577, "aarch64": 577, "prove": [578, 642, 645], "benefici": 578, "uniform": [578, 642], "\u03b2": 578, "\u03b1": 578, "fundament": [578, 597], "primari": [578, 648], "focu": [578, 648], "essenti": [578, 588], "remaind": 578, "enhanc": [578, 600, 636, 637, 641], "resolut": 578, "extrem": 578, "still": [578, 597, 623, 637, 639, 641], "retain": 578, "noteworthi": 578, "vanhouck": 578, "vincent": 578, "andrew": 578, "senior": 578, "mark": 578, "mao": 578, "speed": [578, 597, 608, 636, 637, 639, 648], "2011": 578, "szymon": 578, "migacz": 578, "2017": 578, "mckinstri": 578, "jeffrei": 578, "l": [578, 583, 646, 648], "discov": [578, 646], "1809": 578, "04191": 578, "2018": 578, "encount": 579, "consum": 579, "previous": 579, "lack": [579, 588], "faster": [579, 581, 587, 637, 648, 651], "Of": 579, "evenli": 579, "divid": [579, 627, 645, 648], "discard": 579, "throw": 579, "awai": 579, "draw": [579, 644, 648], "subprocess": 579, "pin": [579, 610, 614], "reshuffl": 579, "manner": [579, 583, 599], "newdataload": 579, "customis": [579, 580, 596], "ensp": [580, 647], "imagerecord": [580, 585, 650], "image_nam": 580, "cocorecord": 580, "gt": [580, 645, 647], "int64": 580, "offer": 580, "style_transf": 580, "content": [580, 625, 626, 630, 631, 632], "tfrecorddataset": 580, "labelbal": 580, "300": [580, 636, 651], "16": [580, 593, 630, 642, 651], "helloworld": [580, 598, 647], "aid": 581, "deploy": [581, 600, 617, 637, 640, 645], "infrastructur": 581, "diagnos": 582, "gui": [582, 592, 622, 636], "termin": [582, 610, 611, 614, 620], "repeat": [582, 648], "durat": [582, 626, 630, 631, 644], "cd": [582, 585, 593, 619, 621, 622, 624, 625, 630, 631, 632], "setup": [582, 589, 593, 612, 615, 619, 621, 622, 624, 625, 636], "ilsvr2012": 582, "caff": 582, "berkeleyvis": 582, "caffe_ilsvrc12": 582, "xvzf": 582, "image_recognit": [582, 622, 646], "resnet50_torchvis": 582, "ptq_static": [582, 621], "resnet50_v1": [582, 585, 597], "dataset_loc": [582, 622, 630, 646], "label_path": 582, "quantiti": 582, "vec": 582, "frac": [582, 645], "sigma": 582, "var": 582, "happen": 582, "dispers": [582, 620], "v0": [582, 622, 645, 646], "cg": [582, 622, 646], "conv0": [582, 622, 646], "expens": [583, 597, 648], "mobil": [583, 597, 651], "produc": 583, "logit": 583, "softmax": 583, "kd": 583, "patient": 583, "compact": [583, 597, 603, 636], "agnost": 583, "resourc": [583, 624, 627, 648], "convolut": [583, 637], "ia": 583, "attach": [583, 597, 645], "shallow": 583, "deepest": 583, "deeper": 583, "10006": [583, 584], "student_output": [583, 584], "student_loss": [583, 584], "training_func_for_nc": [583, 584], "distil_loss_conf": 583, "accordingli": [583, 608, 645], "promis": [584, 597, 636], "huge": [584, 622, 636, 640], "heavi": 584, "light": 584, "booster": 584, "degrad": [584, 636, 648], "novel": [584, 600, 611, 617], "comb": 584, "distillation_criterion": [584, 597, 635], "q_conf": 584, "horovod": 585, "program": [585, 594, 600, 617], "enable_eager_execut": 585, "yaml_file_path": 585, "pre_process": 585, "simpli": [585, 599, 600, 602, 605, 617, 625], "evaluation_result": 585, "evaluation_time_cost": 585, "partit": [585, 636], "distributedsampl": 585, "train_sampl": 585, "train_dataset": [585, 639], "num_replica": 585, "rank": 585, "train_load": 585, "train_kwarg": 585, "adadelta": 585, "distributedoptim": 585, "named_paramet": 585, "broadcast_paramet": 585, "root_rank": 585, "broadcast_optimizer_st": 585, "set_epoch": 585, "batch_idx": 585, "nll_loss": 585, "log_interv": 585, "0f": 585, "tloss": 585, "6f": 585, "dry_run": 585, "test_func": 585, "host": [585, 625, 627, 630, 631, 632], "num_of_process": 585, "002": 585, "ssh": [585, 617], "prompt": 585, "readm": [585, 630], "exactli": [585, 601], "recognit": [585, 587, 636, 646], "resizecropimagenet": [585, 647], "realiz": [585, 634, 641, 644], "tow": 585, "node1": [585, 630, 631], "node2": [585, 630, 631], "TO": [585, 602, 622], "your_node1_nam": 585, "your_node2_nam": 585, "resnet50_fp32_pretrained_model": 585, "nc_resnet50_v1": 585, "resnet": [585, 651], "varieti": [586, 638, 648], "demonstr": [586, 600, 630, 631, 632, 646], "speedup": [586, 592, 639], "2x": [586, 592], "vnni": [586, 592, 638, 639], "exchang": 587, "hope": 587, "inc_model": [587, 599], "fp32_onnx_config": 587, "verifi": [587, 595], "vgg16": [587, 651], "mobilenet": [587, 644, 651], "rcnn": 587, "torchscript": [587, 640, 645], "unsupport": [587, 597, 636], "add_relu": 587, "conv1d_relu": 587, "conv2d_relu": 587, "group_norm": 587, "hardswish": 587, "instance_norm": 587, "layer_norm": 587, "leaky_relu": 587, "sigmoid": 587, "toolchain": [588, 637], "bare": 588, "metal": 588, "sudo": [588, 603], "apt": [588, 593, 603, 611], "python3": 588, "dev": [588, 610, 614], "distutil": 588, "libgl1": 588, "mesa": 588, "glx": 588, "libglib2": 588, "ln": 588, "sf": 588, "usr": 588, "incompat": 588, "88": [588, 644, 651], "80": [588, 640, 646, 651], "pyobject": 588, "reinstal": 588, "libgl": 588, "yum": [588, 593], "opencv": [588, 593, 611], "conda": [588, 593, 603, 611, 630, 631, 632, 643], "13": [588, 593, 619, 643, 645], "pend": [588, 626], "sqlalchemi": 588, "27": [588, 651], "alemb": 588, "forg": [588, 593], "quick": [589, 598, 636, 649, 650], "friendli": [589, 597, 637, 645, 649, 650], "dive": [589, 649], "purpos": [589, 598, 617, 619, 638, 639], "syntax": 589, "go": [589, 612, 615, 623, 638, 642, 647], "up1": 589, "up2": 589, "valid_mixed_precis": 589, "addn": 589, "grappler_optim": 589, "constfold": 589, "arithmet": 589, "debug_stripp": 589, "major": [591, 622, 639, 645], "concept": [591, 644, 649], "rather": [591, 642], "custom_metr": 591, "refin": [591, 636], "420": 592, "geomean": 592, "snippet": 592, "upload": [592, 612, 615], "click": [592, 600, 601, 608, 611, 617, 622, 637, 646], "qintegerop": [592, 639], "plan": 592, "oneapi": [593, 637, 649], "analyt": [593, 637, 649], "success": [593, 619], "11": [593, 596, 598, 619, 645, 648, 651], "frequent": 593, "pypi": [593, 612, 615], "nightli": 593, "headless": [593, 611], "fastai": 593, "esri": 593, "consolid": 593, "latest": [593, 637, 643], "eas": [593, 602, 637], "along": [593, 636, 642], "streamlin": [593, 624, 637], "scienc": 593, "websit": 593, "anaconda": [593, 624, 625], "suit": [593, 618, 646], "formerli": 593, "skylak": 593, "cascad": 593, "lake": [593, 598, 637], "cooper": [593, 598, 637], "ic": [593, 637], "sapphir": [593, 595], "rapid": [593, 595], "hbm": 593, "arctic": 593, "sound": 593, "pont": 593, "vecchio": 593, "cento": [593, 651], "ubuntu": 593, "22": [593, 651], "04": [593, 651], "maco": 593, "ventura": 593, "fortensorflow": 593, "forpytorch": 593, "12": [593, 619, 651], "tf_enable_onednn_opt": 593, "onednn": [593, 598, 639], "newer": 593, "subject": 594, "accompani": [594, 648], "wish": 594, "bibtex": 594, "author": 594, "feng": 594, "tian": 594, "hanwen": 594, "haihao": [594, 636], "shen": [594, 636], "suyu": 594, "chen": 594, "howpublish": 594, "year": 594, "logo": 594, "atom": 594, "phi": 594, "pentium": 594, "vtune": 594, "corpor": 594, "subsidiari": 594, "brand": 594, "claim": 594, "sq": [595, 645], "woq": 595, "4th": [595, 637, 639], "gen": [595, 598, 637, 639, 641], "codenam": [595, 598], "quickli": [595, 648, 649], "eleutherai": [595, 621, 645, 651], "6b": [595, 621, 645, 651], "facebook": [595, 623, 645, 651], "3b": [595, 645], "30b": [595, 645, 651], "llama": [595, 636, 637, 640, 642, 645, 651], "7b": [595, 645, 651], "13b": [595, 645, 651], "70b": [595, 651], "tiiuae": [595, 645, 651], "40b": 595, "soon": 595, "popularli": 596, "industri": [596, 637], "label_map": 596, "decis": 596, "ap": 596, "curv": 596, "turn": [596, 611, 640], "target_boxes_num": 596, "str_label": 596, "int_label": 596, "inturn": 596, "cocomap": 596, "vocmap": 596, "categor": 596, "multiclass": 596, "multilabel": 596, "newmetr": 596, "reset": 596, "reflect": [596, 647], "new_metr": 596, "deliv": [597, 637, 643], "conveni": [597, 624], "upgrad": 597, "veri": [597, 618, 622, 639, 642, 648, 649], "comprehens": [597, 649], "resort": 597, "automodelforsequenceclassif": 597, "autotoken": 597, "val_dataset": [597, 639], "val_dataload": [597, 639], "worker": [597, 627, 630, 631, 632, 639], "ping_memori": [597, 639], "formul": 597, "effort": 597, "onnxrt_integ": [597, 650], "onnxrt_qlinear": [597, 650], "image_tensor": [597, 650], "post_training_dynamic_qu": [597, 638, 648], "1000": [597, 626, 650], "2000": 597, "sampling_s": [597, 650], "model_wis": [597, 650], "op_dict": 597, "op_wis": [597, 646, 650], "sigopt_api_token": [597, 644, 648], "sigopt_project_id": [597, 644, 648], "sigopt_experiment_nam": [597, 644, 648], "demo": 597, "600": 597, "training_arg": 597, "emul": [597, 639], "trainer": [597, 608], "briefli": [597, 645], "pruning_func": 597, "train_dataload": [597, 636, 639], "n_gpu": 597, "gradient_accumulation_step": 597, "clip_grad_norm_": 597, "max_grad_norm": 597, "start_epoch": [597, 638, 650], "end_epoch": [597, 638, 650], "newli": [597, 636], "on_after_optimizer_step": [597, 636], "layer3": [597, 636], "0004": 597, "randomresizedcrop": [597, 647], "totensor": [597, 647], "485": 597, "456": [597, 651], "406": [597, 651], "nepoch": 597, "cnt": 597, "loss_sum": 597, "iter_bar": 597, "desc": 597, "teacher_logit": 597, "train_fun": 597, "training_func": 597, "recent": [597, 598], "growth": [597, 598, 636], "complex": [597, 598, 636], "significantli": [597, 598, 620, 622, 636, 648], "bandwidth": [597, 598, 642], "exit_polici": [597, 650], "determinist": 597, "meaning": [597, 635], "reli": [597, 645], "prune_conf": 597, "quantization_aware_training_conf": 597, "aforement": 597, "inset": 597, "p_conf": [597, 635], "ssd_mobilenet_v1": 597, "benchmarkconf": 597, "sixteen": 598, "launch": [598, 618, 623], "3rd": [598, 637, 639, 641], "boost": [598, 601, 617, 636, 637], "x86": 598, "avx512": [598, 639], "vcvtne2ps2bf16": 598, "vcvtneps2bf16": 598, "vdpbf16p": 598, "fbgemm": [598, 639], "tensorrtexecutionprovid": [598, 639], "cudaexecutionprovid": [598, 639], "dnnlexecutionprovid": [598, 639], "avx512_bf16": 598, "plu": 598, "resnet18": [598, 602, 651], "persist": 599, "brought": [599, 601, 608, 639], "tf2": 599, "h5": 599, "hybridblock": 599, "0000": 599, "saved_result": [599, 621, 642], "simplifi": [600, 611, 617, 636, 637], "acquir": 600, "analysi": [600, 617, 636, 644], "heurist": [600, 617], "great": 600, "facilit": 600, "autocast": 600, "my_model": 600, "no_grad": 600, "memory_format": 600, "112": 600, "plugin": [600, 618], "aw": [600, 608, 627, 637, 651], "sagemak": [600, 608], "neural_cod": [600, 602, 604, 605, 606, 608], "bench": 600, "superbench": 600, "enjoi": [601, 605, 608], "reload": [601, 618, 620, 623], "modern": [602, 642], "democrat": [602, 637], "programm": [602, 608, 617], "nano_bf16_channels_last": 602, "nano_bf16_ipex_channels_last": 602, "nano_bf16_ipex": 602, "nano_bf16": 602, "nano_fp32_channels_last": 602, "nano_fp32_ipex_channels_last": 602, "nano_fp32_ipex": 602, "nano_gpu_to_cpu": 602, "nano_int8": 602, "nano_jit_bf16_channels_last": 602, "nano_jit_bf16_ipex_channels_last": 602, "nano_jit_bf16_ipex": 602, "nano_jit_bf16": 602, "nano_jit_fp32_channels_last": 602, "nano_jit_fp32_ipex_channels_last": 602, "nano_jit_fp32_ipex": 602, "nano_jit_fp32": 602, "nano_onnxruntime_fp32": 602, "nano_onnxruntime_int8_qlinear": 602, "openvino": 602, "nano_openvino_fp32": 602, "nano_openvino_int8": 602, "bc": [603, 611], "conda_prefix": 603, "echo": 603, "tradit": [603, 636], "libjemalloc": 603, "libiomp5": 603, "home": 603, "lib": 603, "ld_preload": 603, "malloc_conf": 603, "oversize_threshold": 603, "background_thread": 603, "metadata_thp": 603, "dirty_decay_m": 603, "9000000000": 603, "muzzy_decay_m": 603, "kmp_affin": 603, "kmp_blocktim": 603, "dnnl_primitive_cache_capac": 603, "governor": 603, "cpufreq": 603, "scaling_governor": 603, "powersav": 603, "tee": 603, "pytorch_jit_script": [604, 607], "pytorch_channels_last": [604, 607], "run_bench": 604, "patch": [604, 617], "patch_path": 604, "your_patch_path": 604, "sweep": 604, "sweep_object": 604, "bench_config": 604, "bench_featur": 604, "sai": 605, "run_glu": [605, 606, 628, 631, 632], "requisit": 605, "task_nam": [605, 606, 628, 631, 632], "do_ev": [605, 606, 621, 628, 631, 632], "itself": [605, 636], "run_glue_optim": 605, "static_ipex": 605, "auto_qu": 606, "v4": [606, 628, 631, 632, 651], "albert": [606, 651], "sst2": 606, "alexnet": [606, 651], "pytorch_amp": 607, "optimize_for_infer": 607, "pytorch_jit_trac": 607, "pytorch_jit_script_ofi": 607, "pytorch_jit_trace_ofi": 607, "torchdynamo": 607, "pytorch_torchdynamo_jit_script": 607, "pytorch_torchdynamo_jit_trac": 607, "pytorch_torchdynamo_jit_script_ofi": 607, "pytorch_torchdynamo_jit_trace_ofi": 607, "pytorch_inc_bf16": 607, "pytorch_inc_static_quant_fx": 607, "pytorch_inc_static_quant_ipex": 607, "pytorch_inc_static_quant_ipex_xpu": 607, "pytorch_inc_dynamic_qu": 607, "pytorch_ipex_fp32": 607, "pytorch_ipex_bf16": 607, "pytorch_ipex_int8_static_qu": 607, "pytorch_ipex_int8_dynamic_qu": 607, "blade": 607, "disc": 607, "pytorch_aliblad": 607, "pytorch_lightning_bf16_cpu": 607, "tensorflow_amp": 607, "keras_amp": 607, "tensorflow_inc": 607, "keras_inc": 607, "onnx_inc_static_quant_qlinear": 607, "onnx_inc_static_quant_qdq": 607, "onnx_inc_dynamic_qu": 607, "optimum": [607, 608, 620, 642], "pytorch_inc_huggingface_optimum_stat": 607, "pytorch_inc_huggingface_optimum_dynam": 607, "intel_extension_for_transform": 607, "bigdl": [607, 608], "nano": [607, 608], "nano_": 607, "inc_auto": 607, "delight": 608, "announc": 608, "500": [608, 626, 651], "jupyt": [608, 610, 611, 614], "isa": 608, "adjust": [608, 639, 645], "delta": 608, "acc_delta": 608, "int8_acc": 608, "fp32_acc": 608, "ext": [610, 612, 614, 615, 616], "lab": [610, 611, 612, 614, 615], "nodej": [610, 614], "jlpm": [610, 614], "yarn": [610, 614], "npm": [610, 611, 614], "lieu": [610, 614], "labextens": [610, 611, 614], "typescript": [610, 614], "watch": [610, 614, 623], "immedi": [610, 614, 636], "refresh": [610, 614], "browser": [610, 614, 619, 623], "wait": [610, 614, 617, 627], "rebuilt": [610, 614], "easier": [610, 614, 617, 619, 637], "symlink": [610, 614], "down": 611, "finish": [611, 627], "blank": 611, "cell": 611, "gain": [611, 635, 637], "mkl": 611, "jemalloc": 611, "pip3": 611, "pyproject": [612, 615], "toml": [612, 615], "twine": [612, 615], "whl": [612, 615], "dist": [612, 615], "sdist": [612, 615], "bdist_wheel": [612, 615], "deprec": [612, 615, 643, 647], "frontend": [612, 615, 625, 632], "login": [612, 615, 644], "cut": [612, 615], "admin_github_token": [612, 615], "pypi_token": [612, 615], "npm_token": [612, 615], "secret": [612, 615], "panel": [612, 615, 617], "draft": [612, 615], "changelog": [612, 615, 616], "pkg": [612, 615], "bot": [612, 615], "pick": [612, 615, 618], "feedstock": [612, 615], "hatch": 615, "notabl": 616, "vscode": [616, 618], "daili": 617, "advantag": [617, 636, 638, 648], "remot": 617, "server": [617, 619, 622, 625, 630, 631, 632], "re": [617, 623, 642], "market": 617, "uninstal": 617, "fill": [617, 644, 647, 648], "upper": 617, "sidebar": 617, "hover": 617, "track": [617, 644], "argpars": 617, "pop": [617, 627], "diff": 617, "manifest": 618, "declar": 618, "palett": 618, "registercommand": 618, "amodio": 618, "tsl": 618, "matcher": 618, "dbaeumer": 618, "eslint": [618, 623], "press": 618, "f5": 618, "ctrl": 618, "hello": 618, "world": 618, "breakpoint": 618, "consol": [618, 623], "relaunch": 618, "toolbar": 618, "node_modul": 618, "viewlet": 618, "dropdown": 618, "runner": [618, 623], "startup": 618, "bundl": 618, "neural_insight": [619, 621, 622], "tl": 619, "ui": 619, "5000": 619, "338174d13706855fc6924cec7b3a8ae8": 619, "listen": 619, "firewal": 619, "8080": 619, "cert": 619, "path_to_cert": 619, "crt": 619, "path_to_private_kei": 619, "encrypt": 619, "expos": 619, "forfeit": 619, "client": [619, 625, 632], "extern": 619, "threat": 619, "diagnost": 619, "skill": 619, "feel": [619, 623], "layoutlmv3": [620, 651], "seqev": 620, "sentencepiec": 620, "timm": 620, "fvcore": 620, "pillow": 620, "einop": 620, "textdist": 620, "setuptool": 620, "cli": 620, "hypjudi": 620, "finetun": [620, 636, 642, 651], "funsd": [620, 651], "calib_dataset": 620, "incdataset": 620, "eval_dataset": 620, "poor": [620, 646], "9049": 620, "2989": 620, "66": [620, 651], "9631": 620, "glob": 620, "panda": 620, "pd": 620, "set_opt": 620, "max_row": 620, "max_column": 620, "getmtim": 620, "activations_t": 620, "weights_tabl": [620, 621], "read_csv": 620, "nweight": 620, "descend": 620, "sorted_data": 620, "sort_valu": 620, "ascend": 620, "evid": 620, "tip": 620, "8981": 620, "7502": 620, "run_clm": 621, "wikitext": [621, 651], "dataset_config_nam": 621, "do_train": 621, "inspect_sav": 621, "inspect_result": 621, "quan": 621, "model_summari": 621, "incept": [622, 651], "v3": [622, 651], "inception_v3": [622, 646], "inceptionv3_fp32_pretrained_model": [622, 646], "bash": [622, 646], "prepare_dataset": 622, "sh": [622, 646], "raw_dir": 622, "img_raw": 622, "delet": [622, 636], "run_tun": 622, "nc_inception_v3": 622, "highest": [622, 628, 648], "satisfactori": 622, "webpag": 622, "spike": 622, "bottom": 622, "chart": [622, 639, 644, 646], "concentr": 622, "But": 622, "bigger": 622, "bootstrap": 623, "localhost": [623, 625, 630, 631], "3000": 623, "lint": 623, "interact": [623, 644], "correctli": 623, "hash": [623, 626], "readi": [623, 636], "aren": 623, "transit": 623, "webpack": 623, "babel": 623, "tweak": 623, "ever": 623, "curat": 623, "suitabl": 623, "middl": [623, 645], "shouldn": 623, "understand": [623, 639, 646, 649], "wouldn": 623, "couldn": 623, "troubleshoot": 623, "effortlessli": 624, "grpc": [624, 625, 629, 630, 631, 633], "queue": 624, "seamlessli": [624, 636, 648], "mpi": [624, 625, 648], "neural_solut": [624, 625, 630, 631, 632], "task_monitor_port": [625, 630, 631, 632], "22222": [625, 630, 631, 632], "result_monitor_port": [625, 630, 631, 632], "33333": [625, 630, 631, 632], "restful_api_port": [625, 630, 631, 632], "hostfil": [625, 627, 630, 631, 632], "grpc_api_port": [625, 630, 631, 632], "api_typ": [625, 630, 631, 632], "conda_env": [625, 630, 631, 632], "upload_path": [625, 630, 631, 632], "8000": [625, 630, 631, 632], "monitor": [625, 630, 631, 632], "3333": [625, 630, 631, 632], "2222": [625, 630, 631, 632], "ns_workspac": [625, 630, 631, 632], "hf_model": [625, 629, 631, 632], "curl": [625, 626, 630, 631], "task_id": [625, 630, 631, 632], "usernam": 625, "db": [625, 627], "serve_log": [625, 630, 631, 632], "frontend_grpc": 625, "task_log": 625, "task_bdf0bd1b2cc14bc19bce12d4f9b333c7": 625, "task_workspac": 625, "bdf0bd1b2cc14bc19bce12d4f9b333c7": 625, "aliv": 625, "properli": 625, "commonli": [625, 636], "hostnam": 625, "breakdown": 625, "ip": 625, "hous": 625, "host1": [625, 630, 631], "host2": [625, 630, 631], "query_id": 625, "oaa": 626, "host_ip": 626, "task_request": [626, 630, 631, 632], "tuning_info": [626, 630], "optimization_result": [626, 630], "result_path": [626, 630, 631], "closur": 626, "404": [626, 636, 651], "health": 626, "healthi": 626, "quantized_model": [626, 630, 631], "400": [626, 651], "alloc": 627, "incom": 627, "taskmonitor": 627, "cluster": [627, 630, 631, 648], "tasklaunch": 627, "resultmonitor": 627, "receiv": [627, 644], "p1": 627, "notif": 627, "p2": 627, "p3": 627, "mpirun": [627, 648], "perf": 627, "p4": 627, "four": [627, 646, 651], "classdiagram": 627, "taskdb": 627, "get_statu": 627, "update_statu": 627, "task_collect": 627, "append_task": 627, "get_all_pending_task": 627, "update_task_statu": 627, "task_db": 627, "wait_new_task": 627, "schedule_task": 627, "dispatch_task": 627, "launch_task": 627, "query_task_statu": 627, "node_list": 627, "reserve_resourc": 627, "get_node_statu": 627, "gcp": [627, 637], "script_url": [628, 630, 631, 632], "archiv": 628, "tf_example1": [629, 630, 631], "hf_models_grpc": [629, 632], "00173": 630, "01024": 630, "task_request_distribut": 630, "custom_models_optim": 630, "7602cd63d4c849e7a686a8165a77f69d": [630, 631], "151": [630, 651], "8617": 630, "17": [630, 651], "8213": [630, 651], "number_of_socket": [630, 631], "number_of_thread": [630, 631], "cdf419910f9b4d2a8320d0e420ac1d0a": 631, "optimized_result": 631, "58": [631, 651], "3162": 631, "6488": [631, 651], "06": [632, 650, 651], "34": [632, 651], "55": [632, 651], "d3e10a49326449fb9d0d62f2bfc1cb43": 632, "fastapi": 633, "multi_object": 634, "benefit": 635, "instanti": 635, "neuron": 636, "art": 636, "grown": 636, "unpreced": 636, "increasingli": 636, "crucial": 636, "stand": [636, 648], "shrink": 636, "contextu": 636, "scene": 636, "haven": 636, "color": [636, 640], "lowest": [636, 648], "emsp": 636, "downstream": 636, "prone": 636, "co": 636, "discourag": 636, "penal": 636, "parameter": 636, "lightweight": 636, "perceptron": 636, "mlp": 636, "valuabl": [636, 646], "basi": 636, "billion": 636, "dolli": [636, 645, 651], "mpt": [636, 645, 651], "lm": [636, 651], "lamini": [636, 645], "worth": 636, "mention": [636, 642], "tend": 636, "exemplifi": 636, "complement": 636, "fortieth": 636, "miss": [636, 639], "pruner2": 636, "few": [636, 637, 645, 648], "lm_head": 636, "yourself": 636, "uncertain": 636, "auto_config": 636, "quit": 636, "straightforward": [636, 642, 645], "carri": 636, "pruning_pattern": 636, "pruning_start": 636, "pruning_end": 636, "sparse_gpt": 636, "embed_out": 636, "card": 636, "hesit": 636, "causal": 636, "clm": 636, "sst": [636, 651], "25": [636, 651], "63": [636, 651], "24": [636, 648, 651], "35": [636, 651], "flan": 636, "t5": [636, 651], "english": 636, "romanian": 636, "381": 636, "yolov5": 636, "75": [636, 651], "2x1": [636, 651], "801": 636, "7895": 636, "signific": [636, 637, 640, 645], "reduct": [636, 640, 650], "namhoon": 636, "lee": 636, "thalaiyasingam": 636, "ajanthan": 636, "philip": 636, "torr": 636, "2019": 636, "zafrir": 636, "ofir": 636, "ariel": 636, "larei": 636, "boudoukh": 636, "mosh": 636, "wasserblat": 636, "2111": 636, "05754": 636, "2021": 636, "kwon": 636, "kim": 636, "mahonei": 636, "hassoun": 636, "keutzer": 636, "gholami": 636, "pp": 636, "24101": 636, "24116": 636, "frantar": [636, 642], "alistarh": 636, "medium": 637, "aug": 637, "juli": 637, "onnxcommunitymeetup2023": 637, "chatbot": 637, "june": 637, "msft": 637, "netflix": 637, "apr": 637, "mlperf": [637, 651], "5x": 637, "\u96c6\u6210\u82f1\u7279\u5c14": 637, "\u817e\u8baf\u4e91taco": 637, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 637, "mar": 637, "heterogen": 637, "jan": 637, "busi": 637, "amx": 637, "journei": 637, "dec": 637, "mleffici": 637, "deepen": 637, "foundat": 637, "intellig": 637, "vmware": 637, "applianc": 637, "bitnami": 637, "nov": 637, "sota": 637, "plug": 637, "twitter": 637, "linkedin": 637, "zone": 637, "land": 637, "pat": 637, "keynot": 637, "intelon": 637, "chines": 637, "purif": 637, "sacrif": 637, "jun": 637, "partner": 637, "feb": 637, "joint": 637, "bilibili": 637, "gestalt": 637, "ml": 637, "doubl": 637, "abound": 637, "lpot": [637, 643], "nextplatform": 637, "cern": 637, "gan": 637, "3dgan": 637, "iml": 637, "workshop": 637, "asplo": 637, "18": [637, 651], "highli": [637, 642], "intelcaff": 637, "aris": 638, "henc": 638, "onnxrt_qoper": 638, "quant_aware_train": 638, "weight_compress": [638, 650], "initial_spars": [638, 650], "prune_typ": [638, 650], "basic_magnitud": [638, 650], "update_frequ": 638, "prune_domain": 638, "tile_pattern_1x1": 638, "invent": 639, "cost": [639, 642], "theoret": [639, 642], "zeropoint": 639, "255": [639, 645], "overflow": 639, "unseen": 639, "enough": 639, "peopl": 639, "mimic": 639, "fact": 639, "ultim": 639, "pain": 639, "lossi": 639, "philosophi": 639, "neither": 639, "nor": 639, "val_load": 639, "avg": 639, "themselv": 639, "dmlexecutionprovid": 639, "meanwhil": 640, "substanti": 640, "pose": 640, "challeng": 640, "greatli": [640, 642], "constrain": 640, "grei": 640, "blue": 640, "rectangl": 640, "w8a8": [640, 642], "10005": 640, "rtn_arg": [640, 642], "ouput_dir": 640, "fp32_model_path": 640, "int8_model_path": 640, "ON": 641, "postposttrainingquantconfig": 641, "bf16wrapper": 641, "retrac": 641, "preval": 642, "grow": 642, "demand": 642, "trade": 642, "bottleneck": 642, "roughli": 642, "speak": 642, "capac": [642, 644], "flop": 642, "famou": 642, "approx": 642, "bmm": 642, "100x": 642, "excel": 642, "stai": [642, 645], "quantif": [642, 645], "think": 642, "intuit": [642, 645], "uniformli": 642, "qlora": 642, "invers": 642, "restor": 642, "protect": 642, "inspir": 642, "c_": 642, "normalfloat": 642, "e2m1": 642, "bnb": 642, "805": 642, "awq_arg": 642, "gptq_arg": 642, "mitig": 642, "date": 642, "sym_full_rang": 642, "qweight_config_path": 642, "gptq_config_path": 642, "gptq_config": 642, "use_full_length": 642, "compressed_model": 642, "omit": 642, "rtn_g32asym": 642, "gptq_g32asym": 642, "gptq_g32asym_disable_last_matmul": 642, "gptq_g128asym": 642, "awq_g32asym": 642, "xiao": [642, 645], "guangxuan": [642, 645], "2211": [642, 645], "10438": [642, 645], "wei": [642, 645], "xiui": [642, 645], "suppress": [642, 645], "2209": [642, 645], "13325": [642, 645], "lin": 642, "ji": 642, "00978": 642, "elia": 642, "dettmer": 642, "tim": 642, "2305": 642, "14314": 642, "site": 643, "sed": 643, "your_script": 643, "backbon": 644, "sigopt_experiment_id": 644, "nc": [644, 648], "suffici": 644, "ordinari": 644, "latenc": [644, 648], "8266": 644, "8372": 644, "2132": 644, "83": [644, 645, 651], "7495": 644, "8299": 644, "8294": 644, "85": [644, 645, 651], "0837": 644, "8291": 644, "4469": 644, "gigant": 645, "systemat": 645, "migrat": [645, 649], "difficulti": 645, "mathemat": 645, "allevi": 645, "coarsest": 645, "finer": [645, 648], "matric": 645, "similarli": 645, "finest": 645, "consumpt": 645, "suppos": 645, "6839": 645, "4741": 645, "7451": 645, "9301": 645, "1742": 645, "6835": 645, "q_min": 645, "q_max": 645, "q_x": 645, "clamp_": 645, "round_": 645, "w_q": 645, "00296431384049356": 645, "59": [645, 651], "172": [645, 651], "192": 645, "w_dq": 645, "2220": 645, "1510": 645, "2420": 645, "2570": 645, "0500": 645, "1890": 645, "mseloss": 645, "1983354538679123": 645, "6848": 645, "4743": 645, "7440": 645, "9308": 645, "1749": 645, "385297635664756e": 645, "07": [645, 650, 651], "quantize_per_channel": 645, "x_tmp": 645, "detach": 645, "keepdim": 645, "dequantize_per_channel": 645, "0029": [645, 651], "0036": 645, "162": [645, 651], "48": [645, 651], "72": [645, 651], "93": [645, 651], "207": 645, "139": [645, 651], "6837": 645, "4734": 645, "1751": 645, "6821": 645, "637690492221736e": 645, "6376e": 645, "3852e": 645, "cdot": 645, "quantize_per_tensor_absmax": 645, "n_bit": 645, "div_": 645, "0806": 645, "7589": 645, "6038": 645, "3815": 645, "5040": 645, "7174": 645, "5444": 645, "5826": 645, "7772": 645, "5555": 645, "3740": 645, "3253": 645, "0698": 645, "1381": 645, "5972": [645, 651], "0086": 645, "0737": 645, "8298": 645, "6883": 645, "2991": 645, "1601": 645, "6506": 645, "8246": 645, "3924": 645, "3845": 645, "8768": 645, "w_scale": 645, "x_q": 645, "x_scale": 645, "84": [645, 651], "120": 645, "0059755356051027775": 645, "89": [645, 651], "119": 645, "57": [645, 651], "006533813662827015": 645, "y_q": 645, "17509": 645, "7608": 645, "4055": 645, "16599": 645, "21020": 645, "10016": 645, "9860": 645, "22444": 645, "y_dq": 645, "6836": 645, "2970": 645, "1583": 645, "6481": 645, "8207": 645, "3911": 645, "3850": 645, "8763": 645, "though": 645, "simplic": 645, "fp1": 645, "fp2": 645, "subsect": [645, 650], "x1": [645, 648], "x2": [645, 648], "herebi": 645, "optdecoderlay": 645, "blockwis": 645, "overhead": 645, "hardtanh": 645, "t5norm": 645, "llamanorm": 645, "groupnorm": 645, "lambada": 645, "openai": [645, 651], "sweet": 645, "spot": 645, "bigscienc": [645, 651], "560m": 645, "354": 645, "3542": 645, "1b7": 645, "4634": 645, "4936": 645, "518": 645, "5185": 645, "7b1": [645, 651], "5764": [645, 651], "5977": 645, "bloomz": [645, 651], "3947": 645, "3930": 645, "4828": 645, "4906": 645, "5018": 645, "4980": 645, "5593": [645, 651], "5552": 645, "125m": 645, "379": 645, "3757": 645, "350m": 645, "4516": 645, "4533": 645, "5789": 645, "5742": 645, "6365": 645, "6404": 645, "6769": [645, 651], "6804": [645, 651], "6872": 645, "6814": 645, "7149": 645, "7128": 645, "66b": 645, "7398": 645, "7326": 645, "7361": [645, 651], "7357": 645, "7627": [645, 651], "7590": 645, "7759": [645, 651], "7840": 645, "65b": 645, "7908": 645, "7957": 645, "7392": [645, 651], "7335": [645, 651], "chat": [645, 651], "7058": [645, 651], "6994": 645, "7677": [645, 651], "7615": [645, 651], "6831": [645, 651], "mbzuai": 645, "124m": 645, "3804": 645, "3887": 645, "774m": 645, "5048": 645, "5057": 645, "5b": 645, "5443": [645, 651], "5436": 645, "mosaicml": [645, 651], "655": [645, 651], "6499": 645, "stabilityai": 645, "stablelm": 645, "4172": 645, "4149": 645, "togethercomput": 645, "redpajama": 645, "incit": 645, "6542": 645, "6735": 645, "6718": 645, "6740": [645, 651], "6569": 645, "6621": 645, "7143": 645, "7221": 645, "6895": 645, "6953": [645, 651], "databrick": [645, 651], "6866": [645, 651], "6297": 645, "6247": 645, "6437": [645, 651], "6392": 645, "7332": 645, "7632": 645, "asterisk": 645, "consider": 645, "arang": 645, "tolist": 645, "default_alpha": 645, "step_siz": 645, "shared_criterion": 645, "do_blockwis": 645, "jason": 645, "emerg": 645, "transact": 645, "yvinec": 645, "edouard": 645, "proceed": 645, "cvf": 645, "winter": 645, "instrument": 646, "writer": 646, "_pre_eval_hook": 646, "_post_eval_hook": 646, "submodul": 646, "whitelist": 646, "_recordingobserv": 646, "output_tensors_dict": 646, "current_it": 646, "get_tensor_valu": 646, "_observer_forward_hook": 646, "activation_post_process": 646, "_add_observer_": 646, "named_children": 646, "leaf": 646, "add_modul": 646, "register_forward_hook": 646, "dump_tim": 646, "summarywrit": 646, "_acc": 646, "tune_": 646, "add_graph": 646, "get_observer_dict": 646, "observer_dict": 646, "is_quant": 646, "add_histogram": 646, "shell": 646, "bind_al": 646, "logdir_spec": 646, "tune_0_acc0": 646, "tune_1": 646, "tune_1_acc0": 646, "79": [646, 651], "baseline_acc_0": 646, "776": 646, "tune_1_acc_0": 646, "095": 646, "runs_v3": 646, "run_tuning_dump_tensor": 646, "inceptionv3": 646, "run_quant": 646, "topologi": 646, "nc_inceptionv3": 646, "inceptionv3_dump_tensor": 646, "eightbit": 646, "disappear": 646, "centercrop": 647, "randomcrop": 647, "cropres": 647, "decodeimag": 647, "jpeg": 647, "encodejp": 647, "alignimagechannel": 647, "68": [647, 651], "116": 647, "78": [647, 651], "103": 647, "94": [647, 651], "017": 647, "bilinearimagenet": [647, 650], "topilimag": 647, "padding_mod": 647, "border": 647, "pixel": 647, "edg": 647, "colorjitt": 647, "bright": 647, "satur": 647, "hue": 647, "jitter": 647, "tondarrai": 647, "o1": 648, "human": 648, "aggress": 648, "classic": 648, "flowchart": 648, "htmllabel": 648, "td": 648, "classdef": 648, "itemstyl": 648, "cce5ff": 648, "stroke": 648, "99ccff": 648, "s1": 648, "s2": 648, "s3": 648, "s4": 648, "s5": 648, "s6": 648, "s7": 648, "nbsp": 648, "subgraphstyl": 648, "ffffff": 648, "attempt": 648, "post_training_auto_qu": 648, "increment": 648, "ii": 648, "spent": 648, "hawq_v2_loss": 648, "model_loss": 648, "black": 648, "compli": 648, "posterior": 648, "short": 648, "loglevel": 648, "endlessli": 648, "perspect": 648, "smbo": 648, "appl": 648, "surrog": 648, "densiti": 648, "parzen": 648, "greatest": 648, "hour": 648, "dai": 648, "next_tune_cfg": 648, "overridden": 648, "replic": 648, "replica": 648, "fed": 648, "synchron": 648, "number_of_process": 648, "run_cmd": 648, "abctunestrategi": 648, "familiar": 649, "notebook": 649, "introduct": 649, "organ": 650, "logic": 650, "mobilenet_v1": 650, "40": [650, 651], "beta_1": 650, "beta_2": 650, "epsilon": 650, "sparsecategoricalcrossentropi": 650, "sum_over_batch_s": 650, "from_logit": 650, "54": [650, 651], "19": [650, 651], "09": 651, "1x": 651, "platinum": 651, "8480": 651, "8ghz": 651, "56": 651, "ht": 651, "turbo": 651, "256gb": 651, "16x16gb": 651, "ddr5": 651, "4800": 651, "mt": 651, "bio": 651, "3a14": 651, "tel2p1": 651, "microcod": 651, "0x2b0001b0": 651, "gcc": 651, "20210514": 651, "red": 651, "hat": 651, "visit": 651, "1s4c14ins1bsthroughput": 651, "sec": 651, "74": 651, "2914": 651, "621": 651, "69x": 651, "76": 651, "23": 651, "46": 651, "2160": 651, "545": 651, "47": 651, "96x": 651, "resnet101": 651, "77": 651, "37": 651, "1508": 651, "428": 651, "53x": 651, "70": 651, "44": 651, "69": 651, "3290": 651, "1229": 651, "68x": 651, "38": 651, "73": 651, "2404": 651, "1048": 651, "49": 651, "29x": 651, "71": 651, "1669": 651, "33x": 651, "1073": 651, "245": 651, "38x": 651, "374": 651, "52": 651, "18x": 651, "96": 651, "5478": 651, "1756": 651, "12x": 651, "4133": 651, "1748": 651, "36x": 651, "1534": 651, "236": 651, "62": 651, "49x": 651, "vgg19": 651, "1377": 651, "197": 651, "resnetv2": 651, "39": 651, "1125": 651, "656": 651, "71x": 651, "709": 651, "367": 651, "00": 651, "93x": 651, "152": 651, "03": 651, "497": 651, "265": 651, "87x": 651, "densenet": 651, "121": 651, "557": 651, "67": 651, "61": 651, "22x": 651, "161": 651, "29": 651, "353": 651, "235": 651, "50x": 651, "169": 651, "65": 651, "41": 651, "435": 651, "385": 651, "13x": 651, "efficientnet": 651, "b0": 651, "786": 651, "723": 651, "09x": 651, "130": 651, "23x": 651, "1291": 651, "683": 651, "89x": 651, "61x": 651, "1295": 651, "453": 651, "85x": 651, "242": 651, "31x": 651, "cnn": 651, "80x": 651, "43": 651, "81x": 651, "166": 651, "07x": 651, "16x": 651, "26": 651, "173": 651, "yolov3": 651, "82": 651, "230": 651, "92": 651, "36": 651, "37x": 651, "58x": 651, "86": 651, "416": 651, "35x": 651, "88x": 651, "51": 651, "17x": 651, "75552": 651, "50803": 651, "1s56c1ins1bsthroughput": 651, "60": 651, "64x": 651, "1673": 651, "653": 651, "56x": 651, "1170": 651, "329": 651, "55x": 651, "977": 651, "335": 651, "91x": 651, "resnest50": 651, "81": 651, "10x": 651, "resnext101_32x8d": 651, "562": 651, "109": 651, "efficientnet_b0": 651, "696": 651, "667": 651, "04x": 651, "efficientnet_b3": 651, "508": 651, "397": 651, "28x": 651, "efficientnet_b7": 651, "234": 651, "149": 651, "57x": 651, "peleenet": 651, "858": 651, "588": 651, "46x": 651, "se_resnext50_32x4d": 651, "739": 651, "283": 651, "yolo": 651, "141": 651, "99x": 651, "174": 651, "camembert": 651, "395": 651, "171": 651, "30x": 651, "53": 651, "795": 651, "341": 651, "744": 651, "343": 651, "163": 651, "funnel": 651, "182": 651, "65x": 651, "399": 651, "21x": 651, "407": 651, "412": 651, "stsb": 651, "413": 651, "39x": 651, "409": 651, "75x": 651, "401": 651, "70x": 651, "76x": 651, "reform": 651, "crime": 651, "punish": 651, "446": 651, "398": 651, "lvwerra": 651, "pegasu": 651, "samsum": 651, "102": 651, "770": 651, "450": 651, "14x": 651, "whisper": 651, "25x": 651, "abeja": 651, "neox": 651, "japanes": 651, "90x": 651, "1646": 651, "657": 651, "1098": 651, "322": 651, "41x": 651, "568": 651, "19x": 651, "1383": 651, "761": 651, "82x": 651, "32x": 651, "5701": 651, "1593": 651, "2090": 651, "685": 651, "05x": 651, "resnext101_32x16d_wsl": 651, "556": 651, "01x": 651, "86x": 651, "558": 651, "11x": 651, "lambada_openai": 651, "hellaswag": 651, "winogrand": 651, "piqa": 651, "word_perplex": 651, "4954": 651, "6409": 651, "7541": 651, "6434": 651, "8816": 651, "gptqw4g128asym": 651, "679": 651, "4895": 651, "6433": 651, "7476": 651, "6399": 651, "9945": 651, "0999": 651, "gptqw4g32asym": 651, "6829": 651, "4923": 651, "6401": 651, "7486": 651, "6410": 651, "9963": 651, "0141": 651, "gptqw4g128sym": 651, "4907": 651, "6361": 651, "7443": 651, "6390": 651, "9932": 651, "1498": 651, "gptqw4g32sym": 651, "6911": 651, "4899": 651, "6448": 651, "7497": 651, "6439": 651, "0008": 651, "0927": 651, "5049": 651, "6543": 651, "7628": 651, "6497": 651, "2862": 651, "4984": 651, "6535": 651, "7568": 651, "6473": 651, "9962": 651, "4193": 651, "6885": 651, "4973": 651, "753": 651, "6455": 651, "9935": 651, "4607": 651, "decapoda": 651, "5642": 651, "6709": 651, "7835": 651, "6887": 651, "4202": 651, "7244": 651, "5603": 651, "6614": 651, "6824": 651, "9909": 651, "5881": 651, "5911": 651, "7009": 651, "7878": 651, "7106": 651, "212": 651, "7518": 651, "5843": 651, "6961": 651, "7911": 651, "4319": 651, "7572": 651, "5898": 651, "7056": 651, "7894": 651, "7105": 651, "9998": 651, "3429": 651, "7596": 651, "5841": 651, "6977": 651, "7905": 651, "7080": 651, "4916": 651, "6266": 651, "7277": 651, "8096": 651, "7350": 651, "2384": 651, "778": 651, "624": 651, "7269": 651, "8047": 651, "7334": 651, "9979": 651, "4237": 651, "7706": 651, "6239": 651, "7285": 651, "8058": 651, "7322": 651, "4697": 651, "7836": 651, "6195": 651, "7337": 651, "9983": 651, "5604": 651, "5732": 651, "648": 651, "7715": 651, "6746": 651, "7107": 651, "6982": 651, "5637": 651, "6527": 651, "7704": 651, "6713": 651, "9950": 651, "9702": 651, "5682": 651, "6575": 651, "7758": 651, "6742": 651, "9994": 651, "9317": 651, "567": 651, "6902": 651, "7353": 651, "6622": 651, "7829": 651, "6862": 651, "9942": 651, "9635": 651, "7246": 651, "5617": 651, "6756": 651, "7797": 651, "6854": 651, "9931": 651, "2799": 651, "7312": 651, "6059": 651, "7103": 651, "7077": 651, "2213": 651, "7273": 651, "6018": 651, "7088": 651, "7742": 651, "7030": 651, "9934": 651, "2538": 651, "083": 651, "7283": 651, "6053": 651, "7024": 651, "7764": 651, "7031": 651, "1889": 651, "727": 651, "5997": 651, "7018": 651, "9916": 651, "2504": 651, "7122": 651, "8984": 651, "5933": 651, "689": 651, "7851": 651, "7075": 651, "1556": 651, "448": 651, "7675": 651, "5934": 651, "7856": 651, "7111": 651, "9984": 651, "1514": 651, "927": 651, "7566": 651, "5899": 651, "7032": 651, "9953": 651, "1374": 651, "728": 651, "4628": 651, "6456": 651, "6029": 651, "6438": 651, "5799": 651, "4542": 651, "6004": 651, "9957": 651, "0626": 651, "4789": 651, "6134": 651, "7432": 651, "5525": 651, "4731": 651, "6504": 651, "7617": 651, "6094": 651, "7828": 651, "5098": 651, "7622": 651, "6505": 651, "3242": 651, "6878": 651, "5058": 651, "6393": 651, "7633": 651, "6491": 651, "9978": 651, "5514": 651, "6864": 651, "5084": 651, "6519": 651, "6509": 651, "0006": 651, "4728": 651, "6876": 651, "5045": 651, "6474": 651, "9952": 651, "6379": 651, "5282": 651, "614": 651, "7448": 651, "6312": 651, "6377": 651, "5228": 651, "5991": 651, "6261": 651, "9919": 651, "4096": 651, "neo": 651, "6224": 651, "4271": 651, "577": 651, "722": 651, "5871": 651, "9359": 651, "6123": 651, "4227": 651, "5738": 651, "7203": 651, "5823": 651, "9917": 651, "3377": 651, "615": 651, "4259": 651, "5714": 651, "7247": 651, "9951": 651, "2083": 651, "6154": 651, "4208": 651, "5777": 651, "7198": 651, "5834": 651, "9937": 651, "3121": 651, "20b": 651, "7233": 651, "5359": 651, "7753": 651, "195": 651, "7186": 651, "5328": 651, "7699": 651, "6687": 651, "9922": 651, "3463": 651, "7268": 651, "533": 651, "659": 651, "6726": 651, "2897": 651, "5718": 651, "6859": 651, "7927": 651, "6890": 651, "9324": 651, "7006": 651, "5655": 651, "6803": 651, "7965": 651, "6857": 651, "1515": 651, "5752": 651, "6748": 651, "7845": 651, "6724": 651, "5951": 651, "6472": 651, "5716": 651, "6685": 651, "784": 651, "6678": 651, "8539": 651, "6918": 651, "5819": 651, "678": 651, "6861": 651, "8863": 651, "5765": 651, "6827": 651, "7873": 651, "6832": 651, "9958": 651, "1451": 651, "storywrit": 651, "693": 651, "5477": 651, "663": 651, "6719": 651, "9125": 651, "6661": 651, "7813": 651, "6693": 651, "9961": 651, "1137": 651, "rw": 651, "6604": 651, "5419": 651, "6598": 651, "6594": 651, "7616": 651, "6484": 651, "5369": 651, "7807": 651, "6559": 651, "9947": 651, "9411": 651, "6571": 651, "5398": 651, "6582": 651, "6579": 651, "8809": 651, "652": 651, "535": 651, "7682": 651, "6532": 651, "9906": 651, "0048": 651, "5177": 651, "6669": 651, "7824": 651, "5053": 651, "6301": 651, "5142": 651, "6654": 651, "6483": 651, "9933": 651, "8146": 651, "517": 651, "9941": 651, "1566": 651, "724": 651, "1567": 651, "716": 651, "1414": 651, "718": 651, "97x": 651, "1459": 651, "721": 651, "02x": 651, "1582": 651, "752": 651, "7139": 651, "4289": 651, "66x": 651, "4080": 651, "7236": 651, "4299": 651, "6842": 651, "4496": 651, "52x": 651, "591": 651, "178": 651, "183": 651, "590": 651, "179": 651, "42x": 651, "5703": 651, "2578": 651, "5610": 651, "2603": 651, "shufflenet": 651, "6689": 651, "3690": 651, "5692": 651, "3758": 651, "51x": 651, "googlenet": 651, "1792": 651, "1111": 651, "1821": 651, "1104": 651, "squeezenet": 651, "9472": 651, "5582": 651, "9861": 651, "5566": 651, "77x": 651, "caffenet": 651, "3348": 651, "1141": 651, "3509": 651, "1142": 651, "2426": 651, "987": 651, "2208": 651, "1016": 651, "zfnet": 651, "930": 651, "532": 651, "919": 651, "417": 651, "1880": 651, "1159": 651, "62x": 651, "1798": 651, "1151": 651, "2890": 651, "1380": 651, "2548": 651, "1362": 651, "507": 651, "94x": 651, "1286": 651, "904": 651, "1121": 651, "856": 651, "829": 651, "1044": 651, "790": 651, "849": 651, "627": 651, "79x": 651, "yolov4": 651, "duc": 651, "tini": 651, "1119": 651, "ultra": 651, "8537": 651, "1934": 651, "emot": 651, "ferplu": 651, "3568": 651, "arcfac": 651, "494": 651, "244": 651, "226": 651, "392": 651, "223": 651, "integerop": 651, "473": 651, "548": 651, "964": 651, "540": 651, "394": 651, "602": 651, "487": 651, "222": 651, "20x": 651, "189": 651, "146": 651, "125": 651, "bidaf": 651, "2757": 651, "2277": 651, "gpt2": 651, "360": 651, "213": 651, "490": 651, "304": 651, "214": 651, "347": 651, "272": 651, "216": 651, "26x": 651, "489": 651, "27x": 651, "l12": 651, "h384": 651, "1054": 651, "585": 651, "1072": 651, "890": 651, "746": 651, "268": 651, "211": 651, "l6": 651, "1958": 651, "1130": 651, "73x": 651, "electra": 651, "discrimin": 651, "1797": 651, "1077": 651, "67x": 651, "1930": 651, "1139": 651, "mini": 651, "5510": 651, "3334": 651, "5627": 651, "3365": 651, "108": 651, "110": 651, "bart": 651, "15x": 651, "deberta": 651, "168": 651, "145": 651, "spanbert": 651, "63x": 651, "multilingu": 651, "113": 651, "159": 651, "40x": 651, "distilgpt2": 651, "layoutlm": 651, "layoutlmv2": 651, "codebert": 651, "47x": 651, "fcn": 651, "perplex": 651, "2788": 651, "7002": 651, "4124": 651, "9921": 651, "3950": 651, "5711": 651, "9892": 651, "9163": 651, "7240": 651, "9902": 651, "0438": 651, "7634": 651, "1186": 651, "9944": 651, "1276": 651, "7543": 651, "6181": 651, "rtnw4g32asym": 651, "6496": 651, "9967": 651, "7964": 651, "6612": 651, "rtnw4g32sym": 651, "7941": 651, "7243": 651, "9971": 651, "taskdataset": 651, "accuracyspars": 651, "ratiospars": 651, "commentsbalancedor": 651, "unbalanc": 651, "answeringsquad": 651, "87f1": 651, "momentumunbalanc": 651, "momentumbalanc": 651, "90f1": 651, "59f1": 651, "23f1": 651, "classificationmrpc": 651, "52f1": 651, "26f1": 651, "classificationsst": 651, "61accuraci": 651, "recognitionimagenet": 651, "95top1": 651, "v5s6": 651, "detectioncoco": 651, "ap0": 651, "6ap0": 651, "393": 651, "584": 651, "34f1": 651, "lassounbalanc": 651, "classificationmnli": 651, "mm": 651, "allbalanc": 651, "32accuraci": 651, "sensitivitybalanc": 651, "classificationqqp": 651, "classificationqnli": 651, "54accuraci": 651, "em": 651, "mobilenetv2": 651, "wideresnet40": 651, "9522": 651, "8178": 651, "0213": 651, "8235": 651, "027": 651, "5494": 651, "7153": 651, "5540": 651, "0046": 651, "5523": 651, "vgg": 651, "bn": 651, "7022": 651, "7415": 651, "7025": 651, "0003": 651, "6739": 651, "7399": 651, "6845": 651, "0106": 651, "blendcnn": 651, "7034": 651, "8382": 651, "bilstm": 651, "8314": 651, "9403": 651, "9048": 651, "0734": 651, "7323": 651, "8256": 651, "8084": 651, "8814": 651, "7442": 651, "8371": 651, "0119": 651, "0115": 651, "tinybert": 651, "8018": 651, "8044": 651, "8363": 651, "8411": 651, "8025": 651, "8074": 651, "0007": 651, "0030": 651, "8626": 651, "9091": 651, "8782": 651, "8684": 651, "8259": 651, "0058": 651, "distilroberta": 651, "6057": 651, "6187": 651, "0130": 651, "c6i": 651, "2xlarg": 651, "c6a": 651, "c6g": 651, "a100cuda": 651, "executionprovid": 651}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [362, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [174, 0, 0, "-", "algorithm"], [177, 0, 0, "-", "benchmark"], [180, 0, 0, "-", "common"], [194, 0, 0, "-", "compression"], [227, 0, 0, "-", "conf"], [229, 0, 0, "-", "config"], [230, 0, 0, "-", "contrib"], [255, 0, 0, "-", "data"], [309, 0, 0, "-", "experimental"], [369, 0, 0, "-", "metric"], [371, 0, 0, "-", "mix_precision"], [373, 0, 0, "-", "model"], [381, 0, 0, "-", "objective"], [391, 0, 0, "-", "onnxrt"], [401, 0, 0, "-", "profiling"], [423, 0, 0, "-", "quantization"], [431, 0, 0, "-", "strategy"], [443, 0, 0, "-", "template"], [458, 0, 0, "-", "tensorflow"], [528, 0, 0, "-", "torch"], [539, 0, 0, "-", "training"], [543, 0, 0, "-", "utils"], [552, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [158, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryDirect8BitOperator"], [21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceMinMaxOperator"], [37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryDirect8BitOperator"], [40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "get_node_original_name"], [43, 2, 1, "", "infer_shapes"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "simple_progress_bar"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_blob_size"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "make_matmul_weight_only_node"], [44, 2, 1, "", "pad_tensor"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "quant_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[52, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"], [51, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[53, 0, 0, "-", "convert_add_to_biasadd"], [54, 0, 0, "-", "convert_layout"], [55, 0, 0, "-", "convert_leakyrelu"], [56, 0, 0, "-", "convert_nan_to_random"], [57, 0, 0, "-", "convert_placeholder_to_const"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"], [140, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"], [141, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "apply_inlining"], [148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "construct_function_from_graph_def"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "parse_saved_model"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "reconstruct_saved_model"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[151, 0, 0, "-", "autoround"], [154, 0, 0, "-", "awq"], [155, 0, 0, "-", "bf16_convert"], [156, 0, 0, "-", "gptq"], [157, 0, 0, "-", "hawq_metric"], [159, 0, 0, "-", "layer_wise_quant"], [164, 0, 0, "-", "mixed_precision"], [165, 0, 0, "-", "model_wrapper"], [166, 0, 0, "-", "pattern_detector"], [167, 0, 0, "-", "smooth_quant"], [168, 0, 0, "-", "symbolic_trace"], [169, 0, 0, "-", "teq"], [170, 0, 0, "-", "util"], [171, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.autoround": [[149, 0, 0, "-", "autoround"], [150, 0, 0, "-", "export"], [152, 0, 0, "-", "model_wrapper"], [153, 0, 0, "-", "sign_sgd"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, 1, 1, "", "AutoAdamRound"], [149, 1, 1, "", "AutoOPTRound"], [149, 1, 1, "", "AutoRound"], [149, 1, 1, "", "SaveInputs"], [149, 1, 1, "", "WrapperMultiblock"], [149, 2, 1, "", "block_forward"], [149, 2, 1, "", "check_is_cpu"], [149, 2, 1, "", "collect_minmax_scale"], [149, 2, 1, "", "collect_round_v"], [149, 2, 1, "", "get_batch_dim"], [149, 2, 1, "", "get_block_names"], [149, 2, 1, "", "get_dataloader"], [149, 2, 1, "", "get_module"], [149, 2, 1, "", "get_scale_shape"], [149, 2, 1, "", "get_tokenizer_function"], [149, 2, 1, "", "move_input_to_device"], [149, 2, 1, "", "quant_weight"], [149, 2, 1, "", "quant_weight_actor"], [149, 2, 1, "", "quant_weight_asym"], [149, 2, 1, "", "quant_weight_sym"], [149, 2, 1, "", "quant_weight_w_scale"], [149, 2, 1, "", "round_ste"], [149, 2, 1, "", "sampling_inputs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "unwrapper_block"], [149, 2, 1, "", "wrapper_block"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, 2, 1, "", "export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, 1, 1, "", "SGD"], [153, 2, 1, "", "sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, 1, 1, "", "ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, 1, 1, "", "BF16ModuleWrapper"], [155, 2, 1, "", "Convert"], [155, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, 1, 1, "", "GPTQ"], [156, 1, 1, "", "GPTQuantizer"], [156, 2, 1, "", "find_layers"], [156, 2, 1, "", "find_layers_name"], [156, 2, 1, "", "is_leaf"], [156, 2, 1, "", "log_quantizable_layers_per_transformer"], [156, 2, 1, "", "quantize"], [156, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, 1, 1, "", "HessianTrace"], [157, 1, 1, "", "Node_collector"], [157, 2, 1, "", "compare_weights"], [157, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[160, 0, 0, "-", "modified_pickle"], [161, 0, 0, "-", "quantize"], [162, 0, 0, "-", "torch_load"], [163, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, 3, 1, "", "PickleError"], [160, 3, 1, "", "PicklingError"], [160, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, 2, 1, "", "dowload_hf_model"], [163, 2, 1, "", "get_children"], [163, 2, 1, "", "get_module"], [163, 2, 1, "", "get_named_children"], [163, 2, 1, "", "get_super_module_by_name"], [163, 2, 1, "", "load_empty_model"], [163, 2, 1, "", "load_layer_wise_quantized_model"], [163, 2, 1, "", "load_tensor"], [163, 2, 1, "", "load_tensor_from_shard"], [163, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, 1, 1, "", "FakeAffineTensorQuantFunction"], [165, 1, 1, "", "MulLinear"], [165, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, 1, 1, "", "TorchSmoothQuant"], [167, 2, 1, "", "get_module"], [167, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, 2, 1, "", "symbolic_trace"], [168, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[169, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[170, 2, 1, "", "append_attr"], [170, 2, 1, "", "auto_copy"], [170, 2, 1, "", "calculate_quant_min_max"], [170, 2, 1, "", "calibration"], [170, 2, 1, "", "check_cfg_and_qconfig"], [170, 2, 1, "", "collate_torch_preds"], [170, 2, 1, "", "collect_weight_info"], [170, 2, 1, "", "fetch_module"], [170, 2, 1, "", "forward_wrapper"], [170, 2, 1, "", "generate_activation_observer"], [170, 2, 1, "", "get_absorb_layers"], [170, 2, 1, "", "get_block_prefix"], [170, 2, 1, "", "get_depth"], [170, 2, 1, "", "get_dict_at_depth"], [170, 2, 1, "", "get_element_under_depth"], [170, 2, 1, "", "get_embedding_contiguous"], [170, 2, 1, "", "get_example_input"], [170, 2, 1, "", "get_fallback_order"], [170, 2, 1, "", "get_hidden_states"], [170, 2, 1, "", "get_module_input_output"], [170, 2, 1, "", "get_mse_order_per_fp32"], [170, 2, 1, "", "get_mse_order_per_int8"], [170, 2, 1, "", "get_op_type_by_name"], [170, 2, 1, "", "get_quantizable_ops_from_cfgs"], [170, 2, 1, "", "get_torch_version"], [170, 2, 1, "", "input2tuple"], [170, 2, 1, "", "is_fused_module"], [170, 2, 1, "", "match_datatype_pattern"], [170, 2, 1, "", "move_input_device"], [170, 2, 1, "", "paser_cfgs"], [170, 2, 1, "", "set_module"], [170, 2, 1, "", "simple_inference"], [170, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, 2, 1, "", "awq_quantize"], [171, 2, 1, "", "gptq_quantize"], [171, 2, 1, "", "qdq_weight_actor"], [171, 2, 1, "", "qdq_weight_asym"], [171, 2, 1, "", "qdq_weight_sym"], [171, 2, 1, "", "quant_weight"], [171, 2, 1, "", "quant_weight_w_scale"], [171, 2, 1, "", "quantize_4bit"], [171, 2, 1, "", "rtn_quantize"], [171, 2, 1, "", "search_clip"], [171, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[172, 0, 0, "-", "algorithm"], [173, 0, 0, "-", "fast_bias_correction"], [175, 0, 0, "-", "smooth_quant"], [176, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[172, 1, 1, "", "ALGORITHMS"], [172, 1, 1, "", "Algorithm"], [172, 1, 1, "", "AlgorithmScheduler"], [172, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[173, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[175, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[176, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[177, 2, 1, "", "benchmark_with_raw_cmd"], [177, 2, 1, "", "call_one"], [177, 2, 1, "", "config_instance"], [177, 2, 1, "", "fit"], [177, 2, 1, "", "generate_prefix"], [177, 2, 1, "", "get_architecture"], [177, 2, 1, "", "get_bounded_threads"], [177, 2, 1, "", "get_core_ids"], [177, 2, 1, "", "get_physical_ids"], [177, 2, 1, "", "get_threads"], [177, 2, 1, "", "get_threads_per_core"], [177, 2, 1, "", "profile"], [177, 2, 1, "", "run_instance"], [177, 2, 1, "", "set_all_env_var"], [177, 2, 1, "", "set_env_var"], [177, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[178, 0, 0, "-", "base_config"], [179, 0, 0, "-", "base_tuning"], [182, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[178, 1, 1, "", "BaseConfig"], [178, 1, 1, "", "ComposableConfig"], [178, 2, 1, "", "register_config"], [178, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_tuning": [[179, 1, 1, "", "Evaluator"], [179, 1, 1, "", "TuningConfig"], [179, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils": [[181, 0, 0, "-", "constants"], [183, 0, 0, "-", "logger"], [184, 0, 0, "-", "utility"]], "neural_compressor.common.utils.logger": [[183, 1, 1, "", "Logger"]], "neural_compressor.common.utils.utility": [[184, 2, 1, "", "set_random_seed"], [184, 2, 1, "", "set_resume_from"], [184, 2, 1, "", "set_tensorboard"], [184, 2, 1, "", "set_workspace"]], "neural_compressor.compression": [[185, 0, 0, "-", "callbacks"], [187, 0, 0, "-", "distillation"], [190, 0, 0, "-", "hpo"], [197, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[185, 1, 1, "", "BaseCallbacks"], [185, 1, 1, "", "DistillationCallbacks"], [185, 1, 1, "", "PruningCallbacks"], [185, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[185, 4, 1, "", "_epoch_ran"], [185, 4, 1, "", "best_model"], [185, 4, 1, "", "best_score"], [185, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[186, 0, 0, "-", "criterions"], [188, 0, 0, "-", "optimizers"], [189, 0, 0, "-", "utility"]], "neural_compressor.compression.distillation.criterions": [[186, 1, 1, "", "Criterions"], [186, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [186, 1, 1, "", "KnowledgeDistillationFramework"], [186, 1, 1, "", "KnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchCriterions"], [186, 1, 1, "", "PyTorchCrossEntropyLoss"], [186, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [186, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [186, 1, 1, "", "SelfKnowledgeDistillationLoss"], [186, 1, 1, "", "TensorFlowCrossEntropyLoss"], [186, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [186, 1, 1, "", "TensorflowCriterions"], [186, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [186, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [186, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [186, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.optimizers": [[188, 1, 1, "", "Optimizers"], [188, 1, 1, "", "PyTorchOptimizers"], [188, 1, 1, "", "PyTorchSGD"], [188, 1, 1, "", "TensorFlowAdam"], [188, 1, 1, "", "TensorFlowAdamW"], [188, 1, 1, "", "TensorFlowSGD"], [188, 1, 1, "", "TensorflowOptimizers"], [188, 2, 1, "", "optimizer_registry"]], "neural_compressor.compression.distillation.utility": [[189, 2, 1, "", "get_activation"], [189, 2, 1, "", "record_output"]], "neural_compressor.compression.hpo": [[191, 0, 0, "-", "sa_optimizer"], [192, 0, 0, "-", "search_algorithms"], [193, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[192, 1, 1, "", "BayesianOptimizationSearcher"], [192, 1, 1, "", "GridSearcher"], [192, 1, 1, "", "RandomSearcher"], [192, 1, 1, "", "Searcher"], [192, 1, 1, "", "XgbSearcher"], [192, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[193, 1, 1, "", "BaseSearchSpace"], [193, 1, 1, "", "ContinuousSearchSpace"], [193, 1, 1, "", "DiscreteSearchSpace"], [193, 1, 1, "", "SearchSpace"], [193, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[195, 0, 0, "-", "criteria"], [196, 0, 0, "-", "dsnot"], [199, 0, 0, "-", "model_slim"], [203, 0, 0, "-", "patterns"], [197, 2, 1, "", "prepare_pruning"], [210, 0, 0, "-", "pruners"], [216, 0, 0, "-", "pruning"], [217, 0, 0, "-", "regs"], [197, 2, 1, "", "save"], [218, 0, 0, "-", "schedulers"], [219, 0, 0, "-", "tf_criteria"], [220, 0, 0, "-", "utils"], [221, 0, 0, "-", "wanda"]], "neural_compressor.compression.pruner.criteria": [[195, 1, 1, "", "BlockMaskCriterion"], [195, 1, 1, "", "GradientCriterion"], [195, 1, 1, "", "MagnitudeCriterion"], [195, 1, 1, "", "PruningCriterion"], [195, 1, 1, "", "RetrainFreeCriterion"], [195, 1, 1, "", "SnipCriterion"], [195, 1, 1, "", "SnipMomentumCriterion"], [195, 2, 1, "", "get_criterion"], [195, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[195, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.dsnot": [[196, 2, 1, "", "DSnoT"], [196, 2, 1, "", "return_reorder_indice"]], "neural_compressor.compression.pruner.model_slim": [[198, 0, 0, "-", "auto_slim"], [200, 0, 0, "-", "pattern_analyzer"], [201, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[198, 2, 1, "", "generate_ffn2_pruning_config"], [198, 2, 1, "", "generate_mha_pruning_config"], [198, 2, 1, "", "model_slim"], [198, 2, 1, "", "model_slim_ffn2"], [198, 2, 1, "", "model_slim_mha"], [198, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[200, 1, 1, "", "ClassifierHeadSearcher"], [200, 1, 1, "", "ClassifierHeadSearcherTF"], [200, 1, 1, "", "JitBasicSearcher"], [200, 1, 1, "", "Linear2LinearSearcher"], [200, 1, 1, "", "RecipeSearcher"], [200, 1, 1, "", "SelfMHASearcher"], [200, 2, 1, "", "get_attributes"], [200, 2, 1, "", "get_common_module"], [200, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "searching_results"], [200, 4, 1, "", "static_graph"], [200, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[200, 4, 1, "", "current_pattern"], [200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "searching_results"], [200, 4, 1, "", "static_graph"], [200, 4, 1, "", "target_layers"], [200, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[200, 4, 1, "", "model"], [200, 4, 1, "", "recipe"], [200, 4, 1, "", "searching_results"], [200, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[200, 4, 1, "", "device"], [200, 4, 1, "", "flatten_static_graph"], [200, 4, 1, "", "model"], [200, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[201, 1, 1, "", "LinearCompression"], [201, 1, 1, "", "LinearCompressionIterator"], [201, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[201, 4, 1, "", "device"], [201, 4, 1, "", "layer_1"], [201, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[201, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[202, 0, 0, "-", "base"], [203, 2, 1, "", "get_pattern"], [204, 0, 0, "-", "mha"], [205, 0, 0, "-", "ninm"], [206, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[202, 1, 1, "", "BasePattern"], [202, 1, 1, "", "KerasBasePattern"], [202, 1, 1, "", "PytorchBasePattern"], [202, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[202, 4, 1, "", "config"], [202, 4, 1, "", "invalid_layers"], [202, 4, 1, "", "is_global"], [202, 4, 1, "", "keep_mask_layers"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "min_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[202, 4, 1, "", "config"], [202, 4, 1, "", "invalid_layers"], [202, 4, 1, "", "is_global"], [202, 4, 1, "", "keep_mask_layers"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "min_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[202, 4, 1, "", "config"], [202, 4, 1, "", "invalid_layers"], [202, 4, 1, "", "is_global"], [202, 4, 1, "", "keep_mask_layers"], [202, 4, 1, "", "max_sparsity_ratio_per_op"], [202, 4, 1, "", "min_sparsity_ratio_per_op"], [202, 4, 1, "", "modules"], [202, 4, 1, "", "pattern"], [202, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[204, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[204, 4, 1, "", "M"], [204, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[205, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[205, 4, 1, "", "M"], [205, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[206, 1, 1, "", "KerasPatternNxM"], [206, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[206, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[206, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[207, 0, 0, "-", "base"], [208, 0, 0, "-", "basic"], [209, 0, 0, "-", "block_mask"], [210, 2, 1, "", "get_pruner"], [211, 0, 0, "-", "mha"], [210, 2, 1, "", "parse_valid_pruner_types"], [212, 0, 0, "-", "pattern_lock"], [213, 0, 0, "-", "progressive"], [214, 0, 0, "-", "retrain_free"], [215, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[207, 1, 1, "", "BasePruner"], [207, 1, 1, "", "KerasBasePruner"], [207, 1, 1, "", "PytorchBasePruner"], [207, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[207, 4, 1, "", "config"], [207, 4, 1, "", "current_sparsity_ratio"], [207, 4, 1, "", "end_step"], [207, 4, 1, "", "global_step"], [207, 4, 1, "", "masks"], [207, 4, 1, "", "max_sparsity_ratio_per_op"], [207, 4, 1, "", "modules"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "pruning_frequency"], [207, 4, 1, "", "scheduler"], [207, 4, 1, "", "scores"], [207, 4, 1, "", "start_step"], [207, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[207, 4, 1, "", "config"], [207, 4, 1, "", "current_sparsity_ratio"], [207, 4, 1, "", "end_step"], [207, 4, 1, "", "global_step"], [207, 4, 1, "", "masks"], [207, 4, 1, "", "max_sparsity_ratio_per_op"], [207, 4, 1, "", "modules"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "pruning_frequency"], [207, 4, 1, "", "scheduler"], [207, 4, 1, "", "scores"], [207, 4, 1, "", "start_step"], [207, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[207, 4, 1, "", "config"], [207, 4, 1, "", "current_sparsity_ratio"], [207, 4, 1, "", "end_step"], [207, 4, 1, "", "global_step"], [207, 4, 1, "", "masks"], [207, 4, 1, "", "max_sparsity_ratio_per_op"], [207, 4, 1, "", "modules"], [207, 4, 1, "", "pattern"], [207, 4, 1, "", "pruning_frequency"], [207, 4, 1, "", "scheduler"], [207, 4, 1, "", "scores"], [207, 4, 1, "", "start_step"], [207, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[208, 1, 1, "", "KerasBasicPruner"], [208, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[208, 4, 1, "", "criterion"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "reg"], [208, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[208, 4, 1, "", "criterion"], [208, 4, 1, "", "pattern"], [208, 4, 1, "", "reg"], [208, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[209, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[209, 4, 1, "", "criterion"], [209, 4, 1, "", "pattern"], [209, 4, 1, "", "reg"], [209, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[211, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[211, 4, 1, "", "head_masks"], [211, 4, 1, "", "linear_layers"], [211, 4, 1, "", "mha_compressions"], [211, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[212, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[213, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[214, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[214, 4, 1, "", "criterion"], [214, 4, 1, "", "pattern"], [214, 4, 1, "", "reg"], [214, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[215, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[215, 4, 1, "", "criterion"], [215, 4, 1, "", "pattern"], [215, 4, 1, "", "reg"], [215, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[216, 1, 1, "", "BasePruning"], [216, 1, 1, "", "BasicPruning"], [216, 1, 1, "", "RetrainFreePruning"], [216, 1, 1, "", "SparseGPTPruning"], [216, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[216, 4, 1, "", "config_file_path"], [216, 4, 1, "", "model"], [216, 4, 1, "", "pruner_info"], [216, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[216, 4, 1, "", "config_file_path"], [216, 4, 1, "", "model"], [216, 4, 1, "", "pruner_info"], [216, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[216, 4, 1, "", "config_file_path"], [216, 4, 1, "", "model"], [216, 4, 1, "", "pruner_info"], [216, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[217, 1, 1, "", "BaseReg"], [217, 1, 1, "", "GroupLasso"], [217, 2, 1, "", "get_reg"], [217, 2, 1, "", "get_reg_type"], [217, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[217, 4, 1, "", "alpha"], [217, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[218, 1, 1, "", "IterativeScheduler"], [218, 1, 1, "", "OneshotScheduler"], [218, 1, 1, "", "PruningScheduler"], [218, 2, 1, "", "get_scheduler"], [218, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[218, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[219, 1, 1, "", "MagnitudeCriterion"], [219, 1, 1, "", "PruningCriterion"], [219, 2, 1, "", "get_tf_criterion"], [219, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[219, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[219, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[220, 2, 1, "", "check_config"], [220, 2, 1, "", "check_key_validity"], [220, 2, 1, "", "collect_layer_inputs"], [220, 2, 1, "", "generate_pruner_config"], [220, 2, 1, "", "get_layers"], [220, 2, 1, "", "get_sparsity_ratio"], [220, 2, 1, "", "get_sparsity_ratio_tf"], [220, 2, 1, "", "parse_last_linear"], [220, 2, 1, "", "parse_last_linear_tf"], [220, 2, 1, "", "parse_to_prune"], [220, 2, 1, "", "parse_to_prune_tf"], [220, 2, 1, "", "process_and_check_config"], [220, 2, 1, "", "process_config"], [220, 2, 1, "", "process_weight_config"], [220, 2, 1, "", "process_yaml_config"], [220, 2, 1, "", "reset_none_to_default"], [220, 2, 1, "", "update_params"]], "neural_compressor.compression.pruner.wanda": [[222, 0, 0, "-", "prune"], [223, 0, 0, "-", "utils"], [224, 0, 0, "-", "wrapper"]], "neural_compressor.compression.pruner.wanda.prune": [[222, 2, 1, "", "prune_wanda"]], "neural_compressor.compression.pruner.wanda.utils": [[223, 2, 1, "", "find_layers"]], "neural_compressor.compression.pruner.wanda.wrapper": [[224, 1, 1, "", "WrappedGPT"]], "neural_compressor.conf": [[225, 0, 0, "-", "config"], [226, 0, 0, "-", "dotdict"], [228, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[225, 1, 1, "", "Benchmark_Conf"], [225, 1, 1, "", "Conf"], [225, 1, 1, "", "DefaultConf"], [225, 1, 1, "", "Distillation_Conf"], [225, 1, 1, "", "Graph_Optimization_Conf"], [225, 1, 1, "", "MixedPrecision_Conf"], [225, 1, 1, "", "NASConfig"], [225, 1, 1, "", "PrunerV2"], [225, 1, 1, "", "Pruning_Conf"], [225, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[226, 1, 1, "", "DotDict"], [226, 2, 1, "", "deep_get"], [226, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[228, 1, 1, "", "AccuracyCriterion"], [228, 1, 1, "", "BenchmarkConfig"], [228, 1, 1, "", "DistillationConfig"], [228, 1, 1, "", "KnowledgeDistillationLossConfig"], [228, 1, 1, "", "Options"], [228, 1, 1, "", "QuantizationConfig"], [228, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[229, 1, 1, "", "AccuracyCriterion"], [229, 1, 1, "", "BenchmarkConfig"], [229, 1, 1, "", "DistillationConfig"], [229, 1, 1, "", "DotDict"], [229, 1, 1, "", "ExportConfig"], [229, 1, 1, "", "HPOConfig"], [229, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [229, 1, 1, "", "Keras"], [229, 1, 1, "", "KnowledgeDistillationLossConfig"], [229, 1, 1, "", "MXNet"], [229, 1, 1, "", "MixedPrecisionConfig"], [229, 1, 1, "", "NASConfig"], [229, 1, 1, "", "ONNX"], [229, 1, 1, "", "ONNXQlinear2QDQConfig"], [229, 1, 1, "", "Options"], [229, 1, 1, "", "PostTrainingQuantConfig"], [229, 1, 1, "", "PyTorch"], [229, 1, 1, "", "QuantizationAwareTrainingConfig"], [229, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [229, 1, 1, "", "TF2ONNXConfig"], [229, 1, 1, "", "TensorFlow"], [229, 1, 1, "", "Torch2ONNXConfig"], [229, 1, 1, "", "TuningCriterion"], [229, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[231, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[232, 0, 0, "-", "sigopt"], [233, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[232, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[233, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[238, 0, 0, "-", "dataloaders"], [250, 0, 0, "-", "datasets"], [254, 0, 0, "-", "filters"], [258, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[234, 0, 0, "-", "base_dataloader"], [235, 0, 0, "-", "dataloader"], [236, 0, 0, "-", "default_dataloader"], [237, 0, 0, "-", "fetcher"], [239, 0, 0, "-", "mxnet_dataloader"], [240, 0, 0, "-", "onnxrt_dataloader"], [241, 0, 0, "-", "pytorch_dataloader"], [242, 0, 0, "-", "sampler"], [243, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[234, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[235, 1, 1, "", "DataLoader"], [235, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[236, 1, 1, "", "DefaultDataLoader"], [236, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[237, 1, 1, "", "Fetcher"], [237, 1, 1, "", "IndexFetcher"], [237, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[239, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[240, 1, 1, "", "ONNXRTBertDataLoader"], [240, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[241, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[242, 1, 1, "", "BatchSampler"], [242, 1, 1, "", "IterableSampler"], [242, 1, 1, "", "Sampler"], [242, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[243, 1, 1, "", "TFDataDataLoader"], [243, 1, 1, "", "TensorflowBertDataLoader"], [243, 1, 1, "", "TensorflowDataLoader"], [243, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[244, 0, 0, "-", "bert_dataset"], [245, 0, 0, "-", "coco_dataset"], [246, 0, 0, "-", "dataset"], [247, 0, 0, "-", "dummy_dataset"], [248, 0, 0, "-", "dummy_dataset_v2"], [249, 0, 0, "-", "imagenet_dataset"], [251, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[244, 1, 1, "", "InputFeatures"], [244, 1, 1, "", "ONNXRTBertDataset"], [244, 1, 1, "", "ParseDecodeBert"], [244, 1, 1, "", "PytorchBertDataset"], [244, 1, 1, "", "TensorflowBertDataset"], [244, 1, 1, "", "TensorflowModelZooBertDataset"], [244, 2, 1, "", "convert_examples_to_features"], [244, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[245, 1, 1, "", "COCONpy"], [245, 1, 1, "", "COCORaw"], [245, 1, 1, "", "COCORecordDataset"], [245, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[246, 1, 1, "", "CIFAR10"], [246, 1, 1, "", "CIFAR100"], [246, 1, 1, "", "Dataset"], [246, 1, 1, "", "Datasets"], [246, 1, 1, "", "FashionMNIST"], [246, 1, 1, "", "ImageFolder"], [246, 1, 1, "", "IterableDataset"], [246, 1, 1, "", "MNIST"], [246, 1, 1, "", "MXNetCIFAR10"], [246, 1, 1, "", "MXNetCIFAR100"], [246, 1, 1, "", "MXNetDatasets"], [246, 1, 1, "", "MXNetFashionMNIST"], [246, 1, 1, "", "MXNetImageFolder"], [246, 1, 1, "", "MXNetMNIST"], [246, 1, 1, "", "ONNXRTITDatasets"], [246, 1, 1, "", "ONNXRTQLDatasets"], [246, 1, 1, "", "PyTorchDatasets"], [246, 1, 1, "", "PytorchCIFAR10"], [246, 1, 1, "", "PytorchCIFAR100"], [246, 1, 1, "", "PytorchFashionMNIST"], [246, 1, 1, "", "PytorchMNIST"], [246, 1, 1, "", "PytorchMxnetWrapDataset"], [246, 1, 1, "", "PytorchMxnetWrapFunction"], [246, 1, 1, "", "Tensorflow"], [246, 1, 1, "", "TensorflowCIFAR10"], [246, 1, 1, "", "TensorflowCIFAR100"], [246, 1, 1, "", "TensorflowDatasets"], [246, 1, 1, "", "TensorflowFashionMNIST"], [246, 1, 1, "", "TensorflowImageRecord"], [246, 1, 1, "", "TensorflowMNIST"], [246, 1, 1, "", "TensorflowTFRecordDataset"], [246, 1, 1, "", "TensorflowVOCRecord"], [246, 2, 1, "", "calculate_md5"], [246, 2, 1, "", "check_integrity"], [246, 2, 1, "", "dataset_registry"], [246, 2, 1, "", "download_url"], [246, 5, 1, "", "framework_datasets"], [246, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[247, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[248, 1, 1, "", "DummyDataset"], [248, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[249, 1, 1, "", "ImagenetRaw"], [249, 1, 1, "", "MXNetImagenetRaw"], [249, 1, 1, "", "ONNXRTImagenetDataset"], [249, 1, 1, "", "PytorchImagenetRaw"], [249, 1, 1, "", "TensorflowImagenetDataset"], [249, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[251, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[252, 0, 0, "-", "coco_filter"], [253, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[252, 1, 1, "", "LabelBalanceCOCORawFilter"], [252, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[253, 1, 1, "", "FILTERS"], [253, 1, 1, "", "Filter"], [253, 1, 1, "", "MXNetFilters"], [253, 1, 1, "", "ONNXRTITFilters"], [253, 1, 1, "", "ONNXRTQLFilters"], [253, 1, 1, "", "PyTorchFilters"], [253, 1, 1, "", "TensorflowFilters"], [253, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[256, 0, 0, "-", "coco_transform"], [257, 0, 0, "-", "imagenet_transform"], [259, 0, 0, "-", "postprocess"], [260, 0, 0, "-", "tokenization"], [261, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[256, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[257, 1, 1, "", "BilinearImagenetTransform"], [257, 1, 1, "", "LabelShift"], [257, 1, 1, "", "ONNXResizeCropImagenetTransform"], [257, 1, 1, "", "OnnxBilinearImagenetTransform"], [257, 1, 1, "", "ParseDecodeImagenet"], [257, 1, 1, "", "ParseDecodeImagenetTransform"], [257, 1, 1, "", "QuantizedInput"], [257, 1, 1, "", "ResizeWithAspectRatio"], [257, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [257, 1, 1, "", "TensorflowShiftRescale"], [257, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[259, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[260, 1, 1, "", "BasicTokenizer"], [260, 1, 1, "", "FullTokenizer"], [260, 1, 1, "", "WordpieceTokenizer"], [260, 2, 1, "", "convert_by_vocab"], [260, 2, 1, "", "convert_to_unicode"], [260, 2, 1, "", "load_vocab"], [260, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[261, 1, 1, "", "AlignImageChannelTransform"], [261, 1, 1, "", "BaseTransform"], [261, 1, 1, "", "CastONNXTransform"], [261, 1, 1, "", "CastPyTorchTransform"], [261, 1, 1, "", "CastTFTransform"], [261, 1, 1, "", "CenterCropTFTransform"], [261, 1, 1, "", "CenterCropTransform"], [261, 1, 1, "", "CollectTransform"], [261, 1, 1, "", "ComposeTransform"], [261, 1, 1, "", "CropResizeTFTransform"], [261, 1, 1, "", "CropResizeTransform"], [261, 1, 1, "", "CropToBoundingBox"], [261, 1, 1, "", "InputFeatures"], [261, 1, 1, "", "MXNetCropResizeTransform"], [261, 1, 1, "", "MXNetCropToBoundingBox"], [261, 1, 1, "", "MXNetNormalizeTransform"], [261, 1, 1, "", "MXNetTransforms"], [261, 1, 1, "", "MXNetTranspose"], [261, 1, 1, "", "NormalizeTFTransform"], [261, 1, 1, "", "NormalizeTransform"], [261, 1, 1, "", "ONNXRTCropToBoundingBox"], [261, 1, 1, "", "ONNXRTITTransforms"], [261, 1, 1, "", "ONNXRTQLTransforms"], [261, 1, 1, "", "PaddedCenterCropTransform"], [261, 1, 1, "", "ParseDecodeVocTransform"], [261, 1, 1, "", "PyTorchAlignImageChannel"], [261, 1, 1, "", "PyTorchCropResizeTransform"], [261, 1, 1, "", "PyTorchNormalizeTransform"], [261, 1, 1, "", "PyTorchTransforms"], [261, 1, 1, "", "PyTorchTranspose"], [261, 1, 1, "", "PytorchMxnetTransform"], [261, 1, 1, "", "PytorchMxnetWrapFunction"], [261, 1, 1, "", "RandomCropTFTransform"], [261, 1, 1, "", "RandomCropTransform"], [261, 1, 1, "", "RandomHorizontalFlip"], [261, 1, 1, "", "RandomResizedCropMXNetTransform"], [261, 1, 1, "", "RandomResizedCropPytorchTransform"], [261, 1, 1, "", "RandomResizedCropTFTransform"], [261, 1, 1, "", "RandomResizedCropTransform"], [261, 1, 1, "", "RandomVerticalFlip"], [261, 1, 1, "", "RescaleKerasPretrainTransform"], [261, 1, 1, "", "RescaleTFTransform"], [261, 1, 1, "", "RescaleTransform"], [261, 1, 1, "", "ResizeMXNetTransform"], [261, 1, 1, "", "ResizePytorchTransform"], [261, 1, 1, "", "ResizeTFTransform"], [261, 1, 1, "", "ResizeTransform"], [261, 1, 1, "", "ResizeWithRatio"], [261, 1, 1, "", "SquadExample"], [261, 1, 1, "", "TFModelZooCollectTransform"], [261, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [261, 1, 1, "", "TFSquadV1PostTransform"], [261, 1, 1, "", "TRANSFORMS"], [261, 1, 1, "", "TensorflowCropToBoundingBox"], [261, 1, 1, "", "TensorflowRandomHorizontalFlip"], [261, 1, 1, "", "TensorflowRandomVerticalFlip"], [261, 1, 1, "", "TensorflowResizeWithRatio"], [261, 1, 1, "", "TensorflowTransform"], [261, 1, 1, "", "TensorflowTransforms"], [261, 1, 1, "", "TensorflowTranspose"], [261, 1, 1, "", "TensorflowWrapFunction"], [261, 1, 1, "", "ToArray"], [261, 1, 1, "", "ToNDArrayTransform"], [261, 1, 1, "", "Transforms"], [261, 1, 1, "", "Transpose"], [261, 2, 1, "", "convert_examples_to_features"], [261, 2, 1, "", "get_final_text"], [261, 2, 1, "", "get_torchvision_map"], [261, 2, 1, "", "read_squad_examples"], [261, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[262, 0, 0, "-", "benchmark"], [265, 0, 0, "-", "common"], [271, 0, 0, "-", "component"], [272, 0, 0, "-", "compression"], [273, 0, 0, "-", "contrib"], [298, 0, 0, "-", "data"], [303, 0, 0, "-", "distillation"], [304, 0, 0, "-", "export"], [308, 0, 0, "-", "graph_optimization"], [316, 0, 0, "-", "metric"], [318, 0, 0, "-", "mixed_precision"], [319, 0, 0, "-", "model_conversion"], [322, 0, 0, "-", "nas"], [328, 0, 0, "-", "pruner_legacy"], [332, 0, 0, "-", "pruning"], [333, 0, 0, "-", "pruning_recipes"], [337, 0, 0, "-", "pruning_v2"], [338, 0, 0, "-", "pytorch_pruner"], [345, 0, 0, "-", "quantization"], [346, 0, 0, "-", "scheduler"], [351, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[262, 1, 1, "", "Benchmark"], [262, 2, 1, "", "get_architecture"], [262, 2, 1, "", "get_bounded_threads"], [262, 2, 1, "", "get_core_ids"], [262, 2, 1, "", "get_physical_ids"], [262, 2, 1, "", "get_threads"], [262, 2, 1, "", "get_threads_per_core"], [262, 2, 1, "", "set_all_env_var"], [262, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[263, 0, 0, "-", "criterion"], [264, 0, 0, "-", "dataloader"], [266, 0, 0, "-", "metric"], [267, 0, 0, "-", "model"], [268, 0, 0, "-", "optimizer"], [269, 0, 0, "-", "postprocess"], [270, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[263, 1, 1, "", "Criterions"], [263, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [263, 1, 1, "", "KnowledgeDistillationFramework"], [263, 1, 1, "", "KnowledgeDistillationLoss"], [263, 1, 1, "", "PyTorchCriterions"], [263, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [263, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [263, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [263, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [263, 1, 1, "", "SelfKnowledgeDistillationLoss"], [263, 1, 1, "", "TensorflowCriterions"], [263, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [263, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[264, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[266, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[267, 1, 1, "", "Model"], [267, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[268, 1, 1, "", "Optimizers"], [268, 1, 1, "", "PyTorchOptimizers"], [268, 1, 1, "", "PyTorchSGD"], [268, 1, 1, "", "TensorFlowAdamW"], [268, 1, 1, "", "TensorFlowSGD"], [268, 1, 1, "", "TensorflowOptimizers"], [268, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[269, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[270, 2, 1, "", "get_activation"], [270, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[271, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[274, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[275, 0, 0, "-", "sigopt"], [276, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[275, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[276, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[281, 0, 0, "-", "dataloaders"], [293, 0, 0, "-", "datasets"], [297, 0, 0, "-", "filters"], [300, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[277, 0, 0, "-", "base_dataloader"], [278, 0, 0, "-", "dataloader"], [279, 0, 0, "-", "default_dataloader"], [280, 0, 0, "-", "fetcher"], [282, 0, 0, "-", "mxnet_dataloader"], [283, 0, 0, "-", "onnxrt_dataloader"], [284, 0, 0, "-", "pytorch_dataloader"], [285, 0, 0, "-", "sampler"], [286, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[277, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[279, 1, 1, "", "DefaultDataLoader"], [279, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[280, 1, 1, "", "Fetcher"], [280, 1, 1, "", "IndexFetcher"], [280, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[282, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[283, 1, 1, "", "ONNXRTBertDataLoader"], [283, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[284, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[285, 1, 1, "", "BatchSampler"], [285, 1, 1, "", "IterableSampler"], [285, 1, 1, "", "Sampler"], [285, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[286, 1, 1, "", "TFDataDataLoader"], [286, 1, 1, "", "TensorflowBertDataLoader"], [286, 1, 1, "", "TensorflowDataLoader"], [286, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[287, 0, 0, "-", "bert_dataset"], [288, 0, 0, "-", "coco_dataset"], [289, 0, 0, "-", "dataset"], [290, 0, 0, "-", "dummy_dataset"], [291, 0, 0, "-", "dummy_dataset_v2"], [292, 0, 0, "-", "imagenet_dataset"], [294, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[287, 1, 1, "", "InputFeatures"], [287, 1, 1, "", "ONNXRTBertDataset"], [287, 1, 1, "", "ParseDecodeBert"], [287, 1, 1, "", "PytorchBertDataset"], [287, 1, 1, "", "TensorflowBertDataset"], [287, 1, 1, "", "TensorflowModelZooBertDataset"], [287, 2, 1, "", "convert_examples_to_features"], [287, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[288, 1, 1, "", "COCONpy"], [288, 1, 1, "", "COCORaw"], [288, 1, 1, "", "COCORecordDataset"], [288, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[289, 1, 1, "", "CIFAR10"], [289, 1, 1, "", "CIFAR100"], [289, 1, 1, "", "Dataset"], [289, 1, 1, "", "Datasets"], [289, 1, 1, "", "FashionMNIST"], [289, 1, 1, "", "ImageFolder"], [289, 1, 1, "", "IterableDataset"], [289, 1, 1, "", "MNIST"], [289, 1, 1, "", "MXNetCIFAR10"], [289, 1, 1, "", "MXNetCIFAR100"], [289, 1, 1, "", "MXNetDatasets"], [289, 1, 1, "", "MXNetFashionMNIST"], [289, 1, 1, "", "MXNetImageFolder"], [289, 1, 1, "", "MXNetMNIST"], [289, 1, 1, "", "ONNXRTITDatasets"], [289, 1, 1, "", "ONNXRTQLDatasets"], [289, 1, 1, "", "PyTorchDatasets"], [289, 1, 1, "", "PytorchCIFAR10"], [289, 1, 1, "", "PytorchCIFAR100"], [289, 1, 1, "", "PytorchFashionMNIST"], [289, 1, 1, "", "PytorchMNIST"], [289, 1, 1, "", "PytorchMxnetWrapDataset"], [289, 1, 1, "", "PytorchMxnetWrapFunction"], [289, 1, 1, "", "TensorflowCIFAR10"], [289, 1, 1, "", "TensorflowCIFAR100"], [289, 1, 1, "", "TensorflowDatasets"], [289, 1, 1, "", "TensorflowFashionMNIST"], [289, 1, 1, "", "TensorflowImageFolder"], [289, 1, 1, "", "TensorflowImageRecord"], [289, 1, 1, "", "TensorflowMNIST"], [289, 1, 1, "", "TensorflowTFRecordDataset"], [289, 1, 1, "", "TensorflowVOCRecord"], [289, 2, 1, "", "calculate_md5"], [289, 2, 1, "", "check_integrity"], [289, 2, 1, "", "dataset_registry"], [289, 2, 1, "", "download_url"], [289, 5, 1, "", "framework_datasets"], [289, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[290, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[291, 1, 1, "", "DummyDataset"], [291, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[292, 1, 1, "", "ImagenetRaw"], [292, 1, 1, "", "MXNetImagenetRaw"], [292, 1, 1, "", "ONNXRTImagenetDataset"], [292, 1, 1, "", "PytorchImagenetRaw"], [292, 1, 1, "", "TensorflowImagenetDataset"], [292, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[294, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[295, 0, 0, "-", "coco_filter"], [296, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[295, 1, 1, "", "LabelBalanceCOCORawFilter"], [295, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[296, 1, 1, "", "FILTERS"], [296, 1, 1, "", "Filter"], [296, 1, 1, "", "MXNetFilters"], [296, 1, 1, "", "ONNXRTITFilters"], [296, 1, 1, "", "ONNXRTQLFilters"], [296, 1, 1, "", "PyTorchFilters"], [296, 1, 1, "", "TensorflowFilters"], [296, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[299, 0, 0, "-", "imagenet_transform"], [301, 0, 0, "-", "tokenization"], [302, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[299, 1, 1, "", "BilinearImagenetTransform"], [299, 1, 1, "", "LabelShift"], [299, 1, 1, "", "ONNXResizeCropImagenetTransform"], [299, 1, 1, "", "OnnxBilinearImagenetTransform"], [299, 1, 1, "", "ParseDecodeImagenet"], [299, 1, 1, "", "ParseDecodeImagenetTransform"], [299, 1, 1, "", "QuantizedInput"], [299, 1, 1, "", "ResizeWithAspectRatio"], [299, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[301, 1, 1, "", "BasicTokenizer"], [301, 1, 1, "", "FullTokenizer"], [301, 1, 1, "", "WordpieceTokenizer"], [301, 2, 1, "", "convert_by_vocab"], [301, 2, 1, "", "convert_to_unicode"], [301, 2, 1, "", "load_vocab"], [301, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[302, 1, 1, "", "AlignImageChannelTransform"], [302, 1, 1, "", "BaseTransform"], [302, 1, 1, "", "CastONNXTransform"], [302, 1, 1, "", "CastPyTorchTransform"], [302, 1, 1, "", "CastTFTransform"], [302, 1, 1, "", "CenterCropTFTransform"], [302, 1, 1, "", "CenterCropTransform"], [302, 1, 1, "", "CollectTransform"], [302, 1, 1, "", "ComposeTransform"], [302, 1, 1, "", "CropResizeTFTransform"], [302, 1, 1, "", "CropResizeTransform"], [302, 1, 1, "", "CropToBoundingBox"], [302, 1, 1, "", "InputFeatures"], [302, 1, 1, "", "MXNetCropResizeTransform"], [302, 1, 1, "", "MXNetCropToBoundingBox"], [302, 1, 1, "", "MXNetNormalizeTransform"], [302, 1, 1, "", "MXNetTransforms"], [302, 1, 1, "", "MXNetTranspose"], [302, 1, 1, "", "NormalizeTFTransform"], [302, 1, 1, "", "NormalizeTransform"], [302, 1, 1, "", "ONNXRTCropToBoundingBox"], [302, 1, 1, "", "ONNXRTITTransforms"], [302, 1, 1, "", "ONNXRTQLTransforms"], [302, 1, 1, "", "PaddedCenterCropTransform"], [302, 1, 1, "", "ParseDecodeVocTransform"], [302, 1, 1, "", "PyTorchAlignImageChannel"], [302, 1, 1, "", "PyTorchCropResizeTransform"], [302, 1, 1, "", "PyTorchNormalizeTransform"], [302, 1, 1, "", "PyTorchTransforms"], [302, 1, 1, "", "PyTorchTranspose"], [302, 1, 1, "", "PytorchMxnetTransform"], [302, 1, 1, "", "PytorchMxnetWrapFunction"], [302, 1, 1, "", "RandomCropTFTransform"], [302, 1, 1, "", "RandomCropTransform"], [302, 1, 1, "", "RandomHorizontalFlip"], [302, 1, 1, "", "RandomResizedCropMXNetTransform"], [302, 1, 1, "", "RandomResizedCropPytorchTransform"], [302, 1, 1, "", "RandomResizedCropTFTransform"], [302, 1, 1, "", "RandomResizedCropTransform"], [302, 1, 1, "", "RandomVerticalFlip"], [302, 1, 1, "", "RescaleKerasPretrainTransform"], [302, 1, 1, "", "RescaleTFTransform"], [302, 1, 1, "", "RescaleTransform"], [302, 1, 1, "", "ResizeMXNetTransform"], [302, 1, 1, "", "ResizePytorchTransform"], [302, 1, 1, "", "ResizeTFTransform"], [302, 1, 1, "", "ResizeTransform"], [302, 1, 1, "", "ResizeWithRatio"], [302, 1, 1, "", "SquadExample"], [302, 1, 1, "", "TFModelZooCollectTransform"], [302, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [302, 1, 1, "", "TFSquadV1PostTransform"], [302, 1, 1, "", "TRANSFORMS"], [302, 1, 1, "", "TensorflowCropToBoundingBox"], [302, 1, 1, "", "TensorflowRandomHorizontalFlip"], [302, 1, 1, "", "TensorflowRandomVerticalFlip"], [302, 1, 1, "", "TensorflowResizeWithRatio"], [302, 1, 1, "", "TensorflowTransform"], [302, 1, 1, "", "TensorflowTransforms"], [302, 1, 1, "", "TensorflowTranspose"], [302, 1, 1, "", "TensorflowWrapFunction"], [302, 1, 1, "", "ToArray"], [302, 1, 1, "", "ToNDArrayTransform"], [302, 1, 1, "", "Transforms"], [302, 1, 1, "", "Transpose"], [302, 2, 1, "", "convert_examples_to_features"], [302, 2, 1, "", "get_final_text"], [302, 2, 1, "", "get_torchvision_map"], [302, 2, 1, "", "read_squad_examples"], [302, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[303, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[303, 4, 1, "", "_epoch_ran"], [303, 4, 1, "", "best_model"], [303, 4, 1, "", "best_score"], [303, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[305, 0, 0, "-", "qlinear2qdq"], [306, 0, 0, "-", "tf2onnx"], [307, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[305, 2, 1, "", "check_model"], [305, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[306, 2, 1, "", "tf_to_fp32_onnx"], [306, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[307, 2, 1, "", "dynamic_quant_export"], [307, 2, 1, "", "get_node_mapping"], [307, 2, 1, "", "get_quantizable_onnx_ops"], [307, 2, 1, "", "static_quant_export"], [307, 2, 1, "", "torch_to_fp32_onnx"], [307, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[308, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[310, 0, 0, "-", "bleu"], [311, 0, 0, "-", "bleu_util"], [312, 0, 0, "-", "coco_label_map"], [313, 0, 0, "-", "coco_tools"], [314, 0, 0, "-", "evaluate_squad"], [315, 0, 0, "-", "f1"], [317, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[310, 1, 1, "", "BLEU"], [310, 1, 1, "", "UnicodeRegex"], [310, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[310, 4, 1, "", "labels"], [310, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[310, 4, 1, "", "nondigit_punct_re"], [310, 4, 1, "", "punct_nondigit_re"], [310, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[311, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[313, 1, 1, "", "COCOEvalWrapper"], [313, 1, 1, "", "COCOWrapper"], [313, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [313, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [313, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[313, 4, 1, "", "dataset"], [313, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[314, 2, 1, "", "evaluate"], [314, 2, 1, "", "exact_match_score"], [314, 2, 1, "", "f1_score"], [314, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[315, 2, 1, "", "evaluate"], [315, 2, 1, "", "f1_score"], [315, 2, 1, "", "metric_max_over_ground_truths"], [315, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[317, 1, 1, "", "Accuracy"], [317, 1, 1, "", "BaseMetric"], [317, 1, 1, "", "COCOmAPv2"], [317, 1, 1, "", "F1"], [317, 1, 1, "", "GeneralTopK"], [317, 1, 1, "", "Loss"], [317, 1, 1, "", "MAE"], [317, 1, 1, "", "METRICS"], [317, 1, 1, "", "MSE"], [317, 1, 1, "", "MXNetMetrics"], [317, 1, 1, "", "ONNXRTGLUE"], [317, 1, 1, "", "ONNXRTITMetrics"], [317, 1, 1, "", "ONNXRTQLMetrics"], [317, 1, 1, "", "PyTorchLoss"], [317, 1, 1, "", "PyTorchMetrics"], [317, 1, 1, "", "RMSE"], [317, 1, 1, "", "ROC"], [317, 1, 1, "", "SquadF1"], [317, 1, 1, "", "TensorflowCOCOMAP"], [317, 1, 1, "", "TensorflowMAP"], [317, 1, 1, "", "TensorflowMetrics"], [317, 1, 1, "", "TensorflowTopK"], [317, 1, 1, "", "TensorflowVOCMAP"], [317, 1, 1, "", "WrapMXNetMetric"], [317, 1, 1, "", "WrapONNXRTMetric"], [317, 1, 1, "", "WrapPyTorchMetric"], [317, 1, 1, "", "mIOU"], [317, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[317, 4, 1, "", "label_list"], [317, 4, 1, "", "pred_list"], [317, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[317, 4, 1, "", "k"], [317, 4, 1, "", "num_correct"], [317, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[317, 4, 1, "", "sample"], [317, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[317, 4, 1, "", "compare_label"], [317, 4, 1, "", "label_list"], [317, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[317, 4, 1, "", "compare_label"], [317, 4, 1, "", "label_list"], [317, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[317, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[317, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[317, 4, 1, "", "k"], [317, 4, 1, "", "num_correct"], [317, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[318, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[319, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[320, 0, 0, "-", "basic_nas"], [321, 0, 0, "-", "dynas"], [323, 0, 0, "-", "nas"], [324, 0, 0, "-", "nas_utils"], [325, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[320, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[321, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[323, 1, 1, "", "NAS"], [323, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[324, 2, 1, "", "create_search_space_pool"], [324, 2, 1, "", "find_pareto_front"], [324, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[325, 1, 1, "", "BayesianOptimizationSearcher"], [325, 1, 1, "", "GridSearcher"], [325, 1, 1, "", "RandomSearcher"], [325, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[326, 0, 0, "-", "gradient_sensitivity"], [327, 0, 0, "-", "group_lasso"], [329, 0, 0, "-", "magnitude"], [330, 0, 0, "-", "pattern_lock"], [331, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[326, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[327, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[329, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[330, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[331, 1, 1, "", "Pruner"], [331, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[332, 1, 1, "", "Pruning"], [332, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[332, 4, 1, "", "conf"], [332, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[334, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[335, 0, 0, "-", "pattern"], [336, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[335, 1, 1, "", "PATTERNS"], [335, 1, 1, "", "PatternBase"], [335, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[335, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[336, 1, 1, "", "TilePatternBase"], [336, 1, 1, "", "TilePattern_1x1"], [336, 1, 1, "", "TilePattern_1x16"], [336, 1, 1, "", "TilePattern_1x2"], [336, 1, 1, "", "TilePattern_2x2"], [336, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[337, 1, 1, "", "Pruning"], [337, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[337, 4, 1, "", "conf"], [337, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[339, 0, 0, "-", "logger"], [340, 0, 0, "-", "patterns"], [341, 0, 0, "-", "prune_utils"], [342, 0, 0, "-", "pruner"], [343, 0, 0, "-", "pruning"], [344, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[340, 1, 1, "", "Pattern"], [340, 1, 1, "", "PatternNInM"], [340, 1, 1, "", "PatternNxM"], [340, 2, 1, "", "get_pattern"], [340, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[340, 4, 1, "", "is_global"], [340, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[340, 4, 1, "", "M"], [340, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[340, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[341, 2, 1, "", "check_config"], [341, 2, 1, "", "parse_not_to_prune"], [341, 2, 1, "", "parse_to_prune"], [341, 2, 1, "", "process_and_check_config"], [341, 2, 1, "", "process_config"], [341, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[342, 1, 1, "", "MagnitudePruner"], [342, 1, 1, "", "PatternLockPruner"], [342, 1, 1, "", "Pruner"], [342, 1, 1, "", "SnipMomentumPruner"], [342, 1, 1, "", "SnipPruner"], [342, 2, 1, "", "get_pruner"], [342, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[342, 4, 1, "", "config"], [342, 4, 1, "", "current_sparsity_ratio"], [342, 4, 1, "", "end_step"], [342, 4, 1, "", "global_step"], [342, 4, 1, "", "masks"], [342, 4, 1, "", "max_sparsity_ratio_per_layer"], [342, 4, 1, "", "modules"], [342, 4, 1, "", "pattern"], [342, 4, 1, "", "scheduler"], [342, 4, 1, "", "scores"], [342, 4, 1, "", "start_step"], [342, 4, 1, "", "target_sparsity_ratio"], [342, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[343, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[343, 4, 1, "", "config_file_path"], [343, 4, 1, "", "model"], [343, 4, 1, "", "pruner_info"], [343, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[344, 1, 1, "", "IterativeScheduler"], [344, 1, 1, "", "OneshotScheduler"], [344, 1, 1, "", "Scheduler"], [344, 2, 1, "", "get_scheduler"], [344, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[344, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[345, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[346, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[347, 0, 0, "-", "auto_mixed_precision"], [348, 0, 0, "-", "basic"], [349, 0, 0, "-", "bayesian"], [350, 0, 0, "-", "exhaustive"], [352, 0, 0, "-", "mse"], [353, 0, 0, "-", "mse_v2"], [354, 0, 0, "-", "random"], [355, 0, 0, "-", "strategy"], [357, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[347, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[348, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[349, 1, 1, "", "BayesianOptimization"], [349, 1, 1, "", "BayesianTuneStrategy"], [349, 1, 1, "", "TargetSpace"], [349, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[350, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[352, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[353, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[354, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[355, 1, 1, "", "TuneStrategy"], [355, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[356, 0, 0, "-", "constant"], [358, 0, 0, "-", "tuning_sampler"], [359, 0, 0, "-", "tuning_space"], [360, 0, 0, "-", "tuning_structs"], [361, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[358, 1, 1, "", "FallbackTuningSampler"], [358, 1, 1, "", "ModelWiseTuningSampler"], [358, 1, 1, "", "OpTypeWiseTuningSampler"], [358, 1, 1, "", "OpWiseTuningSampler"], [358, 1, 1, "", "SmoothQuantSampler"], [358, 1, 1, "", "TuningOrder"], [358, 1, 1, "", "TuningSampler"], [358, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[359, 1, 1, "", "TuningItem"], [359, 1, 1, "", "TuningSpace"], [359, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [359, 2, 1, "", "pattern_to_internal"], [359, 2, 1, "", "pattern_to_path"], [359, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[360, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[361, 1, 1, "", "OrderedDefaultDict"], [361, 2, 1, "", "extract_data_type"], [361, 2, 1, "", "get_adaptor_name"], [361, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[363, 0, 0, "-", "bleu"], [364, 0, 0, "-", "bleu_util"], [365, 0, 0, "-", "coco_label_map"], [366, 0, 0, "-", "coco_tools"], [367, 0, 0, "-", "evaluate_squad"], [368, 0, 0, "-", "f1"], [370, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[363, 1, 1, "", "BLEU"], [363, 1, 1, "", "UnicodeRegex"], [363, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[363, 4, 1, "", "labels"], [363, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[363, 4, 1, "", "nondigit_punct_re"], [363, 4, 1, "", "punct_nondigit_re"], [363, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[364, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[366, 1, 1, "", "COCOEvalWrapper"], [366, 1, 1, "", "COCOWrapper"], [366, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [366, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [366, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[366, 4, 1, "", "dataset"], [366, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[367, 2, 1, "", "evaluate"], [367, 2, 1, "", "exact_match_score"], [367, 2, 1, "", "f1_score"], [367, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[368, 2, 1, "", "evaluate"], [368, 2, 1, "", "f1_score"], [368, 2, 1, "", "metric_max_over_ground_truths"], [368, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[370, 1, 1, "", "Accuracy"], [370, 1, 1, "", "BaseMetric"], [370, 1, 1, "", "COCOmAPv2"], [370, 1, 1, "", "F1"], [370, 1, 1, "", "GeneralTopK"], [370, 1, 1, "", "Loss"], [370, 1, 1, "", "MAE"], [370, 1, 1, "", "METRICS"], [370, 1, 1, "", "MSE"], [370, 1, 1, "", "MXNetMetrics"], [370, 1, 1, "", "Metric"], [370, 1, 1, "", "ONNXRTGLUE"], [370, 1, 1, "", "ONNXRTITMetrics"], [370, 1, 1, "", "ONNXRTQLMetrics"], [370, 1, 1, "", "PyTorchLoss"], [370, 1, 1, "", "PyTorchMetrics"], [370, 1, 1, "", "RMSE"], [370, 1, 1, "", "ROC"], [370, 1, 1, "", "SquadF1"], [370, 1, 1, "", "TensorflowCOCOMAP"], [370, 1, 1, "", "TensorflowMAP"], [370, 1, 1, "", "TensorflowMetrics"], [370, 1, 1, "", "TensorflowTopK"], [370, 1, 1, "", "TensorflowVOCMAP"], [370, 1, 1, "", "WrapMXNetMetric"], [370, 1, 1, "", "WrapONNXRTMetric"], [370, 1, 1, "", "WrapPyTorchMetric"], [370, 1, 1, "", "mIOU"], [370, 2, 1, "", "metric_registry"], [370, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[370, 4, 1, "", "label_list"], [370, 4, 1, "", "pred_list"], [370, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[370, 4, 1, "", "k"], [370, 4, 1, "", "num_correct"], [370, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[370, 4, 1, "", "sample"], [370, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[370, 4, 1, "", "compare_label"], [370, 4, 1, "", "label_list"], [370, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[370, 4, 1, "", "compare_label"], [370, 4, 1, "", "label_list"], [370, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[370, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[370, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[370, 4, 1, "", "k"], [370, 4, 1, "", "num_correct"], [370, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[371, 2, 1, "", "fit"]], "neural_compressor.model": [[372, 0, 0, "-", "base_model"], [374, 0, 0, "-", "keras_model"], [375, 0, 0, "-", "model"], [376, 0, 0, "-", "mxnet_model"], [377, 0, 0, "-", "nets_factory"], [378, 0, 0, "-", "onnx_model"], [379, 0, 0, "-", "tensorflow_model"], [380, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[372, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[374, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[375, 1, 1, "", "Model"], [375, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[376, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[377, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[378, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[379, 1, 1, "", "TensorflowBaseModel"], [379, 1, 1, "", "TensorflowCheckpointModel"], [379, 1, 1, "", "TensorflowLLMModel"], [379, 1, 1, "", "TensorflowModel"], [379, 1, 1, "", "TensorflowQATModel"], [379, 1, 1, "", "TensorflowSavedModelModel"], [379, 2, 1, "", "checkpoint_session"], [379, 2, 1, "", "estimator_session"], [379, 2, 1, "", "frozen_pb_session"], [379, 2, 1, "", "get_model_type"], [379, 2, 1, "", "graph_def_session"], [379, 2, 1, "", "graph_session"], [379, 2, 1, "", "keras_session"], [379, 2, 1, "", "load_saved_model"], [379, 2, 1, "", "saved_model_session"], [379, 2, 1, "", "slim_session"], [379, 2, 1, "", "validate_and_inference_input_output"], [379, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[380, 1, 1, "", "IPEXModel"], [380, 1, 1, "", "PyTorchBaseModel"], [380, 1, 1, "", "PyTorchFXModel"], [380, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[381, 1, 1, "", "Accuracy"], [381, 1, 1, "", "Footprint"], [381, 1, 1, "", "ModelSize"], [381, 1, 1, "", "MultiObjective"], [381, 1, 1, "", "Objective"], [381, 1, 1, "", "Performance"], [381, 2, 1, "", "objective_custom_registry"], [381, 2, 1, "", "objective_registry"]], "neural_compressor.onnxrt": [[382, 0, 0, "-", "algorithms"], [396, 0, 0, "-", "quantization"], [398, 0, 0, "-", "utils"]], "neural_compressor.onnxrt.algorithms": [[385, 0, 0, "-", "smoother"], [388, 0, 0, "-", "weight_only"]], "neural_compressor.onnxrt.algorithms.smoother": [[383, 0, 0, "-", "calibrator"], [384, 0, 0, "-", "core"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[383, 1, 1, "", "Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[384, 1, 1, "", "Smoother"]], "neural_compressor.onnxrt.algorithms.weight_only": [[386, 0, 0, "-", "awq"], [387, 0, 0, "-", "gptq"], [389, 0, 0, "-", "rtn"], [390, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[386, 2, 1, "", "apply_awq_on_model"], [386, 2, 1, "", "awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[387, 2, 1, "", "apply_gptq_on_model"], [387, 2, 1, "", "gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[389, 2, 1, "", "apply_rtn_on_model"], [389, 2, 1, "", "rtn_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[390, 2, 1, "", "make_matmul_weight_only_node"], [390, 2, 1, "", "pad_tensor"], [390, 2, 1, "", "prepare_inputs"], [390, 2, 1, "", "qdq_tensor"], [390, 2, 1, "", "quant_tensor"]], "neural_compressor.onnxrt.quantization": [[392, 0, 0, "-", "algorithm_entry"], [393, 0, 0, "-", "autotune"], [394, 0, 0, "-", "calibrate"], [395, 0, 0, "-", "config"], [397, 0, 0, "-", "quantize"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[392, 2, 1, "", "awq_quantize_entry"], [392, 2, 1, "", "gptq_quantize_entry"], [392, 2, 1, "", "rtn_quantize_entry"], [392, 2, 1, "", "smooth_quant_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[393, 2, 1, "", "autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[394, 1, 1, "", "CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.config": [[395, 1, 1, "", "AWQConfig"], [395, 1, 1, "", "GPTQConfig"], [395, 1, 1, "", "RTNConfig"], [395, 1, 1, "", "SmoohQuantConfig"], [395, 2, 1, "", "get_default_awq_config"], [395, 2, 1, "", "get_default_gptq_config"], [395, 2, 1, "", "get_default_rtn_config"], [395, 2, 1, "", "get_default_sq_config"]], "neural_compressor.onnxrt.utils": [[399, 0, 0, "-", "onnx_model"], [400, 0, 0, "-", "utility"]], "neural_compressor.onnxrt.utils.onnx_model": [[399, 1, 1, "", "ONNXModel"]], "neural_compressor.onnxrt.utils.utility": [[400, 2, 1, "", "find_by_name"], [400, 2, 1, "", "get_qrange_for_qType"], [400, 2, 1, "", "is_B_transposed"], [400, 2, 1, "", "quantize_data"], [400, 2, 1, "", "register_algo"], [400, 2, 1, "", "simple_progress_bar"]], "neural_compressor.profiling": [[403, 0, 0, "-", "parser"], [413, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[402, 0, 0, "-", "factory"], [405, 0, 0, "-", "onnx_parser"], [407, 0, 0, "-", "parser"], [408, 0, 0, "-", "result"], [410, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[402, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[404, 0, 0, "-", "factory"], [406, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[404, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[406, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[407, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[408, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[409, 0, 0, "-", "factory"], [411, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[409, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[411, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[412, 0, 0, "-", "factory"], [415, 0, 0, "-", "onnxrt_profiler"], [418, 0, 0, "-", "profiler"], [420, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[412, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[414, 0, 0, "-", "factory"], [416, 0, 0, "-", "profiler"], [417, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[414, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[416, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[417, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[418, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[419, 0, 0, "-", "factory"], [421, 0, 0, "-", "profiler"], [422, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[419, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[421, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[422, 2, 1, "", "create_tf_config"], [422, 2, 1, "", "delete_assign"], [422, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[423, 2, 1, "", "fit"]], "neural_compressor.strategy": [[424, 0, 0, "-", "auto"], [425, 0, 0, "-", "auto_mixed_precision"], [426, 0, 0, "-", "basic"], [427, 0, 0, "-", "bayesian"], [428, 0, 0, "-", "conservative"], [429, 0, 0, "-", "exhaustive"], [430, 0, 0, "-", "hawq_v2"], [432, 0, 0, "-", "mse"], [433, 0, 0, "-", "mse_v2"], [434, 0, 0, "-", "random"], [435, 0, 0, "-", "strategy"], [437, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[424, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[425, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[426, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[427, 1, 1, "", "BayesianOptimization"], [427, 1, 1, "", "BayesianTuneStrategy"], [427, 1, 1, "", "TargetSpace"], [427, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[428, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[429, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[430, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[432, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[433, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[434, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[435, 1, 1, "", "TuneStrategy"], [435, 1, 1, "", "TuneStrategyMeta"], [435, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[436, 0, 0, "-", "constant"], [438, 0, 0, "-", "tuning_sampler"], [439, 0, 0, "-", "tuning_space"], [440, 0, 0, "-", "tuning_structs"], [441, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[438, 1, 1, "", "BlockFallbackTuningSampler"], [438, 1, 1, "", "FallbackTuningSampler"], [438, 1, 1, "", "LowerBitsSampler"], [438, 1, 1, "", "ModelWiseTuningSampler"], [438, 1, 1, "", "OpTypeWiseTuningSampler"], [438, 1, 1, "", "OpWiseTuningSampler"], [438, 1, 1, "", "SmoothQuantSampler"], [438, 1, 1, "", "TuningOrder"], [438, 1, 1, "", "TuningSampler"], [438, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[439, 1, 1, "", "TuningItem"], [439, 1, 1, "", "TuningSpace"], [439, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [439, 2, 1, "", "pattern_to_internal"], [439, 2, 1, "", "pattern_to_path"], [439, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[440, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[441, 1, 1, "", "ClassRegister"], [441, 1, 1, "", "OrderedDefaultDict"], [441, 1, 1, "", "QuantOptions"], [441, 1, 1, "", "QuantType"], [441, 2, 1, "", "build_slave_faker_model"], [441, 2, 1, "", "extract_data_type"], [441, 2, 1, "", "get_adaptor_name"], [441, 2, 1, "", "preprocess_user_cfg"], [441, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[442, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[442, 1, 1, "", "ExampleClass"], [442, 4, 1, "", "attribute1"], [442, 2, 1, "", "function1"], [442, 2, 1, "", "function2"], [442, 2, 1, "", "function3"], [442, 2, 1, "", "generator1"], [442, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[442, 4, 1, "", "attr1"], [442, 4, 1, "", "attr2"], [442, 4, 1, "", "attr5"]], "neural_compressor.tensorflow": [[444, 0, 0, "-", "algorithms"], [461, 0, 0, "-", "quantization"], [504, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[447, 0, 0, "-", "smoother"], [449, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[445, 0, 0, "-", "calibration"], [446, 0, 0, "-", "core"], [448, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[445, 1, 1, "", "SmoothQuantCalibration"], [445, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[446, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[448, 1, 1, "", "SmoothQuantScaler"], [448, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[450, 0, 0, "-", "keras"], [454, 0, 0, "-", "keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[450, 1, 1, "", "KerasAdaptor"], [450, 1, 1, "", "KerasConfigConverter"], [450, 1, 1, "", "KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils": [[451, 0, 0, "-", "conv2d"], [452, 0, 0, "-", "dense"], [453, 0, 0, "-", "depthwise_conv2d"], [455, 0, 0, "-", "pool2d"], [456, 0, 0, "-", "quantizer"], [457, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.quantization": [[459, 0, 0, "-", "algorithm_entry"], [460, 0, 0, "-", "config"], [462, 0, 0, "-", "quantize"], [499, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[459, 2, 1, "", "static_quantize_entry"]], "neural_compressor.tensorflow.quantization.config": [[460, 1, 1, "", "SmoothQuantConfig"], [460, 1, 1, "", "StaticQuantConfig"], [460, 2, 1, "", "get_all_registered_configs"], [460, 2, 1, "", "get_default_sq_config"], [460, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[462, 2, 1, "", "quantize_model"]], "neural_compressor.tensorflow.quantization.utils": [[497, 0, 0, "-", "graph_rewriter"], [498, 0, 0, "-", "graph_util"], [500, 0, 0, "-", "quantize_graph_common"], [501, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[486, 0, 0, "-", "generic"], [496, 0, 0, "-", "graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[463, 0, 0, "-", "convert_add_to_biasadd"], [464, 0, 0, "-", "convert_layout"], [465, 0, 0, "-", "convert_leakyrelu"], [466, 0, 0, "-", "convert_nan_to_random"], [467, 0, 0, "-", "convert_placeholder_to_const"], [468, 0, 0, "-", "dilated_contraction"], [469, 0, 0, "-", "dummy_biasadd"], [470, 0, 0, "-", "expanddims_optimizer"], [471, 0, 0, "-", "fetch_weight_from_reshape"], [472, 0, 0, "-", "fold_batch_norm"], [473, 0, 0, "-", "fold_constant"], [474, 0, 0, "-", "fuse_biasadd_add"], [475, 0, 0, "-", "fuse_column_wise_mul"], [476, 0, 0, "-", "fuse_conv_with_math"], [477, 0, 0, "-", "fuse_decomposed_bn"], [478, 0, 0, "-", "fuse_decomposed_in"], [479, 0, 0, "-", "fuse_gelu"], [480, 0, 0, "-", "fuse_layer_norm"], [481, 0, 0, "-", "fuse_pad_with_conv"], [482, 0, 0, "-", "fuse_pad_with_fp32_conv"], [483, 0, 0, "-", "fuse_reshape_transpose"], [484, 0, 0, "-", "graph_cse_optimizer"], [485, 0, 0, "-", "grappler_pass"], [487, 0, 0, "-", "insert_print_node"], [488, 0, 0, "-", "move_squeeze_after_relu"], [489, 0, 0, "-", "pre_optimize"], [490, 0, 0, "-", "remove_training_nodes"], [491, 0, 0, "-", "rename_batch_norm"], [492, 0, 0, "-", "split_shared_input"], [493, 0, 0, "-", "strip_equivalent_nodes"], [494, 0, 0, "-", "strip_unused_nodes"], [495, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[463, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[464, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[465, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[466, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[467, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[468, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[469, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[470, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[471, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[472, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[473, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[474, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[475, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[476, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[477, 1, 1, "", "FuseDecomposedBNOptimizer"], [477, 2, 1, "", "bypass_reshape"], [477, 2, 1, "", "get_const_dim_count"], [477, 2, 1, "", "node_from_map"], [477, 2, 1, "", "node_name_from_input"], [477, 2, 1, "", "valid_reshape_inputs"], [477, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[478, 1, 1, "", "FuseDecomposedINOptimizer"], [478, 2, 1, "", "bypass_reshape"], [478, 2, 1, "", "get_const_dim_count"], [478, 2, 1, "", "node_from_map"], [478, 2, 1, "", "node_name_from_input"], [478, 2, 1, "", "valid_reshape_inputs"], [478, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[479, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[480, 1, 1, "", "FuseLayerNormOptimizer"], [480, 2, 1, "", "node_from_map"], [480, 2, 1, "", "node_name_from_input"], [480, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[481, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[482, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[483, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[484, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[485, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[487, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[488, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[489, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[490, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[491, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[492, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[493, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[494, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[495, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[496, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[498, 1, 1, "", "GraphAnalyzer"], [498, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[500, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.utility": [[501, 2, 1, "", "apply_inlining"], [501, 2, 1, "", "collate_tf_preds"], [501, 2, 1, "", "construct_function_from_graph_def"], [501, 2, 1, "", "disable_random"], [501, 2, 1, "", "fix_ref_type_of_graph_def"], [501, 2, 1, "", "generate_feed_dict"], [501, 2, 1, "", "get_graph_def"], [501, 2, 1, "", "get_input_output_node_names"], [501, 2, 1, "", "get_model_input_shape"], [501, 2, 1, "", "get_tensor_by_name"], [501, 2, 1, "", "get_tensor_val_from_graph_node"], [501, 2, 1, "", "get_weight_from_input_tensor"], [501, 2, 1, "", "int8_node_name_reverse"], [501, 2, 1, "", "is_ckpt_format"], [501, 2, 1, "", "is_saved_model_format"], [501, 2, 1, "", "iterator_sess_run"], [501, 2, 1, "", "parse_saved_model"], [501, 2, 1, "", "read_graph"], [501, 2, 1, "", "reconstruct_saved_model"], [501, 2, 1, "", "strip_equivalent_nodes"], [501, 2, 1, "", "strip_unused_nodes"], [501, 2, 1, "", "tf_diagnosis_helper"], [501, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[502, 0, 0, "-", "constants"], [503, 0, 0, "-", "data"], [505, 0, 0, "-", "model"], [506, 0, 0, "-", "model_wrappers"], [507, 0, 0, "-", "nets_factory"], [508, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[503, 1, 1, "", "BaseDataLoader"], [503, 1, 1, "", "DummyDataset"], [503, 1, 1, "", "DummyDatasetV2"]], "neural_compressor.tensorflow.utils.model": [[505, 1, 1, "", "Model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[506, 1, 1, "", "BaseModel"], [506, 1, 1, "", "KerasModel"], [506, 1, 1, "", "TensorflowBaseModel"], [506, 1, 1, "", "TensorflowCheckpointModel"], [506, 1, 1, "", "TensorflowLLMModel"], [506, 1, 1, "", "TensorflowModel"], [506, 1, 1, "", "TensorflowQATModel"], [506, 1, 1, "", "TensorflowSavedModelModel"], [506, 2, 1, "", "checkpoint_session"], [506, 2, 1, "", "estimator_session"], [506, 2, 1, "", "frozen_pb_session"], [506, 2, 1, "", "get_model_type"], [506, 2, 1, "", "graph_def_session"], [506, 2, 1, "", "graph_session"], [506, 2, 1, "", "keras_session"], [506, 2, 1, "", "load_saved_model"], [506, 2, 1, "", "saved_model_session"], [506, 2, 1, "", "slim_session"], [506, 2, 1, "", "validate_and_inference_input_output"], [506, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.nets_factory": [[507, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.utility": [[508, 1, 1, "", "CaptureOutputToFile"], [508, 1, 1, "", "CpuInfo"], [508, 2, 1, "", "Dequantize"], [508, 1, 1, "", "LazyImport"], [508, 1, 1, "", "Statistics"], [508, 2, 1, "", "combine_histogram"], [508, 2, 1, "", "deep_get"], [508, 2, 1, "", "dequantize_weight"], [508, 2, 1, "", "disable_random"], [508, 2, 1, "", "dump_data_to_local"], [508, 2, 1, "", "dump_elapsed_time"], [508, 2, 1, "", "get_all_fp32_data"], [508, 2, 1, "", "get_tensor_histogram"], [508, 2, 1, "", "itex_installed"], [508, 2, 1, "", "load_data_from_pkl"], [508, 2, 1, "", "register_algo"], [508, 2, 1, "", "singleton"], [508, 2, 1, "", "version1_eq_version2"], [508, 2, 1, "", "version1_gt_version2"], [508, 2, 1, "", "version1_gte_version2"], [508, 2, 1, "", "version1_lt_version2"], [508, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[513, 0, 0, "-", "algorithms"], [527, 0, 0, "-", "amp"], [532, 0, 0, "-", "quantization"], [537, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms": [[510, 0, 0, "-", "habana_fp8"], [514, 0, 0, "-", "layer_wise"], [520, 0, 0, "-", "weight_only"]], "neural_compressor.torch.algorithms.habana_fp8": [[509, 0, 0, "-", "fp8_quant"], [511, 0, 0, "-", "modules"], [512, 0, 0, "-", "observer"]], "neural_compressor.torch.algorithms.layer_wise": [[515, 0, 0, "-", "load"], [516, 0, 0, "-", "modified_pickle"], [517, 0, 0, "-", "utils"]], "neural_compressor.torch.algorithms.layer_wise.load": [[515, 2, 1, "", "load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[516, 3, 1, "", "PickleError"], [516, 3, 1, "", "PicklingError"], [516, 3, 1, "", "UnpicklingError"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[517, 2, 1, "", "dowload_hf_model"], [517, 2, 1, "", "get_children"], [517, 2, 1, "", "get_module"], [517, 2, 1, "", "get_named_children"], [517, 2, 1, "", "get_super_module_by_name"], [517, 2, 1, "", "load_empty_model"], [517, 2, 1, "", "load_layer_wise_quantized_model"], [517, 2, 1, "", "load_tensor"], [517, 2, 1, "", "load_tensor_from_shard"], [517, 2, 1, "", "update_module"]], "neural_compressor.torch.algorithms.weight_only": [[518, 0, 0, "-", "awq"], [519, 0, 0, "-", "gptq"], [521, 0, 0, "-", "modules"], [522, 0, 0, "-", "rtn"], [523, 0, 0, "-", "utility"]], "neural_compressor.torch.algorithms.weight_only.awq": [[518, 1, 1, "", "ActAwareWeightQuant"], [518, 2, 1, "", "awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[519, 1, 1, "", "GPTQ"], [519, 1, 1, "", "GPTQuantizer"], [519, 2, 1, "", "find_layers"], [519, 2, 1, "", "find_layers_name"], [519, 2, 1, "", "gptq_quantize"], [519, 2, 1, "", "is_leaf"], [519, 2, 1, "", "log_quantizable_layers_per_transformer"], [519, 2, 1, "", "quantize"], [519, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only.modules": [[521, 1, 1, "", "FakeAffineTensorQuantFunction"], [521, 1, 1, "", "MulLinear"], [521, 1, 1, "", "TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[522, 2, 1, "", "rtn_quantize"]], "neural_compressor.torch.algorithms.weight_only.utility": [[523, 2, 1, "", "calibration"], [523, 2, 1, "", "fetch_module"], [523, 2, 1, "", "get_absorb_layers"], [523, 2, 1, "", "get_block_prefix"], [523, 2, 1, "", "get_example_input"], [523, 2, 1, "", "get_hidden_states"], [523, 2, 1, "", "get_module"], [523, 2, 1, "", "get_module_input_output"], [523, 2, 1, "", "qdq_weight_actor"], [523, 2, 1, "", "qdq_weight_asym"], [523, 2, 1, "", "qdq_weight_sym"], [523, 2, 1, "", "quant_tensor"], [523, 2, 1, "", "quant_weight_w_scale"], [523, 2, 1, "", "quantize_4bit"], [523, 2, 1, "", "search_clip"], [523, 2, 1, "", "set_module"]], "neural_compressor.torch.amp": [[524, 0, 0, "-", "autocast"], [526, 0, 0, "-", "fp8"]], "neural_compressor.torch.amp.autocast": [[524, 1, 1, "", "autocast"]], "neural_compressor.torch.amp.fp8": [[525, 0, 0, "-", "functions"]], "neural_compressor.torch.quantization": [[529, 0, 0, "-", "algorithm_entry"], [530, 0, 0, "-", "autotune"], [531, 0, 0, "-", "config"], [533, 0, 0, "-", "modules"], [534, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.algorithm_entry": [[529, 2, 1, "", "rtn_entry"]], "neural_compressor.torch.quantization.autotune": [[530, 2, 1, "", "autotune"]], "neural_compressor.torch.quantization.config": [[531, 1, 1, "", "GPTQConfig"], [531, 1, 1, "", "RTNConfig"], [531, 2, 1, "", "get_default_gptq_config"], [531, 2, 1, "", "get_default_rtn_config"]], "neural_compressor.torch.quantization.quantize": [[534, 2, 1, "", "quantize"]], "neural_compressor.torch.utils": [[535, 0, 0, "-", "constants"], [536, 0, 0, "-", "environ"], [538, 0, 0, "-", "utility"]], "neural_compressor.torch.utils.utility": [[538, 2, 1, "", "fetch_module"], [538, 2, 1, "", "register_algo"], [538, 2, 1, "", "set_module"]], "neural_compressor.training": [[539, 1, 1, "", "CallBacks"], [539, 1, 1, "", "CompressionManager"], [539, 2, 1, "", "fit"], [539, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[540, 0, 0, "-", "collect_layer_histogram"], [541, 0, 0, "-", "constant"], [542, 0, 0, "-", "create_obj_from_config"], [544, 0, 0, "-", "kl_divergence"], [545, 0, 0, "-", "load_huggingface"], [546, 0, 0, "-", "logger"], [547, 0, 0, "-", "neural_insights_utils"], [548, 0, 0, "-", "options"], [549, 0, 0, "-", "pytorch"], [550, 0, 0, "-", "utility"], [551, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[540, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[542, 2, 1, "", "create_dataloader"], [542, 2, 1, "", "create_dataset"], [542, 2, 1, "", "create_eval_func"], [542, 2, 1, "", "create_train_func"], [542, 2, 1, "", "get_algorithm"], [542, 2, 1, "", "get_func_from_config"], [542, 2, 1, "", "get_metrics"], [542, 2, 1, "", "get_postprocess"], [542, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[544, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[545, 1, 1, "", "OptimizedModel"], [545, 2, 1, "", "export_compressed_model"], [545, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[546, 1, 1, "", "Logger"], [546, 2, 1, "", "debug"], [546, 2, 1, "", "error"], [546, 2, 1, "", "fatal"], [546, 2, 1, "", "info"], [546, 2, 1, "", "log"], [546, 2, 1, "", "warn"], [546, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[547, 2, 1, "", "get_model_path"], [547, 2, 1, "", "register_neural_insights_workload"], [547, 2, 1, "", "update_neural_insights_workload"], [547, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[548, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[549, 2, 1, "", "is_int8_model"], [549, 2, 1, "", "load"], [549, 2, 1, "", "load_weight_only"], [549, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[550, 1, 1, "", "CaptureOutputToFile"], [550, 1, 1, "", "CpuInfo"], [550, 2, 1, "", "Dequantize"], [550, 1, 1, "", "DotDict"], [550, 1, 1, "", "GLOBAL_STATE"], [550, 1, 1, "", "LazyImport"], [550, 1, 1, "", "MODE"], [550, 1, 1, "", "OpEntry"], [550, 1, 1, "", "Statistics"], [550, 2, 1, "", "alias_param"], [550, 2, 1, "", "calculate_mse"], [550, 2, 1, "", "check_key_exist"], [550, 2, 1, "", "combine_histogram"], [550, 2, 1, "", "compare_objects"], [550, 2, 1, "", "compute_sparsity"], [550, 2, 1, "", "dequantize_weight"], [550, 2, 1, "", "dump_class_attrs"], [550, 2, 1, "", "dump_data_to_local"], [550, 2, 1, "", "dump_elapsed_time"], [550, 2, 1, "", "dump_table"], [550, 2, 1, "", "dump_table_to_csv"], [550, 2, 1, "", "equal_dicts"], [550, 2, 1, "", "fault_tolerant_file"], [550, 2, 1, "", "get_all_fp32_data"], [550, 2, 1, "", "get_number_of_sockets"], [550, 2, 1, "", "get_op_list"], [550, 2, 1, "", "get_size"], [550, 2, 1, "", "get_tensor_histogram"], [550, 2, 1, "", "get_tensors_info"], [550, 2, 1, "", "get_tuning_history"], [550, 2, 1, "", "get_weights_details"], [550, 2, 1, "", "load_data_from_pkl"], [550, 2, 1, "", "mse_metric_gap"], [550, 2, 1, "", "print_op_list"], [550, 2, 1, "", "print_table"], [550, 2, 1, "", "recover"], [550, 2, 1, "", "set_random_seed"], [550, 2, 1, "", "set_resume_from"], [550, 2, 1, "", "set_tensorboard"], [550, 2, 1, "", "set_workspace"], [550, 2, 1, "", "show_memory_info"], [550, 2, 1, "", "singleton"], [550, 2, 1, "", "str2array"], [550, 2, 1, "", "time_limit"], [550, 2, 1, "", "version1_eq_version2"], [550, 2, 1, "", "version1_gt_version2"], [550, 2, 1, "", "version1_gte_version2"], [550, 2, 1, "", "version1_lt_version2"], [550, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[551, 1, 1, "", "WeightsDetails"], [551, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 209], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 560, 561, 563], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 183, 184, 185, 186, 188, 189, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 257, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 299, 301, 302, 303, 305, 306, 307, 308, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 332, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 386, 387, 389, 390, 392, 393, 394, 395, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 438, 439, 440, 441, 442, 445, 446, 448, 450, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 505, 506, 507, 508, 511, 515, 516, 517, 518, 519, 521, 522, 523, 524, 529, 530, 531, 533, 534, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 445, 446, 448, 450, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 503, 505, 506, 507, 508, 515, 516, 517, 518, 519, 521, 522, 523, 524, 529, 530, 531, 534, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 559, 627], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 153, 154, 155, 156, 157, 161, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 180, 183, 185, 186, 188, 192, 193, 195, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 224, 225, 226, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 275, 276, 277, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 308, 309, 310, 313, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 361, 363, 366, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 391, 394, 395, 396, 398, 399, 402, 404, 406, 407, 408, 409, 411, 412, 414, 416, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 438, 439, 440, 441, 442, 445, 446, 448, 450, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 503, 505, 506, 507, 508, 518, 519, 521, 523, 524, 531, 539, 540, 543, 544, 545, 546, 548, 550, 551, 560, 627], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 150, 153, 155, 156, 157, 162, 163, 164, 167, 168, 170, 171, 172, 174, 177, 178, 179, 180, 184, 186, 188, 189, 192, 193, 195, 196, 197, 198, 200, 202, 203, 207, 210, 216, 217, 218, 219, 220, 222, 223, 226, 235, 236, 244, 246, 250, 253, 254, 255, 258, 260, 261, 262, 263, 265, 267, 268, 270, 279, 287, 289, 293, 296, 297, 298, 300, 301, 302, 305, 306, 307, 310, 311, 313, 314, 315, 316, 317, 324, 331, 335, 340, 341, 342, 344, 349, 355, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 375, 379, 381, 382, 386, 387, 389, 390, 391, 392, 393, 395, 396, 400, 417, 422, 423, 427, 435, 439, 441, 442, 459, 460, 462, 477, 478, 480, 501, 506, 508, 515, 517, 518, 519, 522, 523, 525, 529, 530, 531, 534, 538, 539, 542, 543, 545, 546, 547, 549, 550, 585], "subpackag": [2, 17, 87, 111, 112, 114, 158, 194, 197, 230, 255, 273, 298, 309, 333, 351, 362, 431, 497, 513], "submodul": [2, 12, 17, 29, 52, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 151, 158, 159, 174, 182, 187, 190, 194, 197, 199, 203, 210, 221, 227, 231, 238, 250, 254, 258, 265, 274, 281, 293, 297, 300, 304, 309, 316, 322, 328, 334, 338, 351, 357, 362, 369, 373, 385, 398, 403, 405, 410, 413, 415, 420, 431, 437, 443, 447, 486, 497, 499, 504, 514, 520, 532, 543], "packag": [2, 29, 174, 180, 197, 203, 210, 238, 250, 254, 255, 258, 265, 281, 293, 297, 298, 300, 309, 316, 328, 333, 334, 351, 369, 373, 382, 385, 391, 396, 398, 431, 543, 610, 612, 614, 615], "kera": [3, 450], "keras_util": [4, 5, 6, 7, 8, 9, 10, 451, 452, 453, 454, 455, 456, 457], "conv2d": [4, 451], "dens": [5, 452], "depthwise_conv2d": [6, 453], "pool2d": [8, 455], "quantiz": [9, 41, 161, 345, 392, 393, 394, 395, 396, 397, 423, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 529, 530, 531, 532, 533, 534, 556, 559, 561, 562, 574, 578, 582, 584, 587, 590, 593, 595, 597, 598, 606, 617, 619, 620, 621, 622, 630, 631, 632, 638, 639, 640, 641, 642, 645, 651], "separable_conv2d": [10, 457], "mxnet": [11, 580, 596, 639, 647], "mxnet_util": [12, 13], "util": [13, 43, 148, 163, 170, 181, 182, 183, 184, 189, 220, 223, 356, 357, 358, 359, 360, 361, 390, 398, 399, 400, 417, 422, 436, 437, 438, 439, 440, 441, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 517, 523, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 565], "onnxrt": [14, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 580, 596, 647], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 383, 394, 445, 561, 578], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 561, 562], "activ": [18, 620], "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 645], "maxpool": 32, "norm": 33, "op": [34, 587], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": [39, 623], "unary_op": 40, "smooth_quant": [42, 167, 175], "weight_onli": [44, 171, 386, 387, 388, 389, 390, 518, 519, 520, 521, 522, 523], "pytorch": [45, 549, 580, 585, 587, 596, 621, 639, 640, 641, 646, 647, 651], "queri": [46, 560, 625, 630, 631, 632], "tensorflow": [47, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 580, 585, 587, 596, 639, 641, 646, 647, 651], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "bf16": [50, 51, 52, 598], "bf16_convert": [50, 155], "dequantize_cast_optim": 51, "gener": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 561], "convert_add_to_biasadd": [53, 463], "convert_layout": [54, 464], "convert_leakyrelu": [55, 465], "convert_nan_to_random": [56, 466], "convert_placeholder_to_const": [57, 467], "dilated_contract": [58, 468], "dummy_biasadd": [59, 469], "expanddims_optim": [60, 470], "fetch_weight_from_reshap": [61, 471], "fold_batch_norm": [62, 472], "fold_const": [63, 473], "fuse_biasadd_add": [64, 474], "fuse_column_wise_mul": [65, 475], "fuse_conv_with_math": [66, 476], "fuse_decomposed_bn": [67, 477], "fuse_decomposed_in": [68, 478], "fuse_gelu": [69, 479], "fuse_layer_norm": [70, 480], "fuse_pad_with_conv": [71, 481], "fuse_pad_with_fp32_conv": [72, 482], "fuse_reshape_transpos": [73, 483], "graph_cse_optim": [74, 484], "grappler_pass": [75, 485], "insert_print_nod": [77, 487], "move_squeeze_after_relu": [78, 488], "pre_optim": [79, 489], "remove_training_nod": [80, 490], "rename_batch_norm": [81, 491], "split_shared_input": [82, 492], "strip_equivalent_nod": [83, 493], "strip_unused_nod": [84, 494], "switch_optim": [85, 495], "graph_bas": [86, 496], "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 587, 651], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 564, 593, 639, 640, 651], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 651], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": [110, 498], "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 651], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": [139, 500], "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 270], "autoround": [149, 150, 151, 152, 153], "export": [150, 304, 305, 306, 307, 587, 642], "model_wrapp": [152, 165, 506], "sign_sgd": 153, "awq": [154, 386, 518], "gptq": [156, 387, 519], "hawq_metr": 157, "layer_wise_qu": [159, 160, 161, 162, 163], "modified_pickl": [160, 516], "torch_load": 162, "mixed_precis": [164, 318], "pattern_detector": 166, "symbolic_trac": 168, "teq": 169, "algorithm": [172, 173, 174, 175, 176, 382, 383, 384, 385, 386, 387, 388, 389, 390, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 578, 642, 645, 648], "fast_bias_correct": 173, "weight_correct": 176, "benchmark": [177, 262, 568, 577, 582, 597, 638], "common": [178, 179, 180, 181, 182, 183, 184, 263, 264, 265, 266, 267, 268, 269, 270, 556, 588], "base_config": 178, "attribut": [178, 180, 183, 238, 246, 255, 289, 298, 309, 333, 373, 395, 398, 400, 442, 523, 543, 554], "base_tun": 179, "constant": [181, 356, 436, 502, 535, 541], "logger": [183, 339, 546], "compress": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 272, 569, 642], "callback": 185, "distil": [186, 187, 188, 189, 303, 583, 584, 597, 638, 651], "criterion": [186, 263], "optim": [188, 268, 607, 617, 627, 630, 631, 632, 635, 636, 649], "hpo": [190, 191, 192, 193], "sa_optim": 191, "search_algorithm": [192, 325], "search_spac": 193, "pruner": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 331, 342], "criteria": [195, 555, 636, 648], "dsnot": 196, "model_slim": [198, 199, 200, 201], "auto_slim": 198, "pattern_analyz": 200, "weight_slim": 201, "pattern": [202, 203, 204, 205, 206, 334, 335, 336, 340, 636], "base": [202, 207, 593, 626, 649], "mha": [204, 211], "ninm": 205, "nxm": 206, "basic": [208, 348, 426, 557, 648], "pattern_lock": [212, 330], "progress": [213, 623], "retrain_fre": 214, "sparse_gpt": 215, "prune": [216, 222, 332, 343, 597, 636, 638, 651], "reg": 217, "schedul": [218, 344, 346, 636], "tf_criteria": 219, "wanda": [221, 222, 223, 224], "wrapper": 224, "conf": [225, 226, 227, 228], "config": [225, 229, 395, 460, 531, 570, 580, 634], "dotdict": 226, "pythonic_config": 228, "contrib": [230, 231, 232, 233, 273, 274, 275, 276], "strategi": [231, 232, 233, 274, 275, 276, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 575, 644, 648], "sigopt": [232, 275, 644, 648], "tpe": [233, 276, 648], "data": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 503, 561, 562, 582, 586, 621], "dataload": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 264, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 579, 580], "base_dataload": [234, 277], "default_dataload": [236, 279], "fetcher": [237, 280], "mxnet_dataload": [239, 282], "onnxrt_dataload": [240, 283], "pytorch_dataload": [241, 284], "sampler": [242, 285], "tensorflow_dataload": [243, 286], "dataset": [244, 245, 246, 247, 248, 249, 250, 251, 287, 288, 289, 290, 291, 292, 293, 294, 580, 582, 591, 622], "bert_dataset": [244, 287], "coco_dataset": [245, 288], "dummy_dataset": [247, 290], "dummy_dataset_v2": [248, 291], "imagenet_dataset": [249, 292], "style_transfer_dataset": [251, 294], "filter": [252, 253, 254, 295, 296, 297], "coco_filt": [252, 295], "transform": [256, 257, 258, 259, 260, 261, 299, 300, 301, 302, 591, 647], "coco_transform": 256, "imagenet_transform": [257, 299], "postprocess": [259, 269], "token": [260, 301], "experiment": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361], "metric": [266, 310, 311, 312, 313, 314, 315, 316, 317, 363, 364, 365, 366, 367, 368, 369, 370, 591, 596], "model": [267, 372, 373, 374, 375, 376, 377, 378, 379, 380, 505, 561, 572, 587, 590, 593, 595, 597, 599, 606, 620, 621, 622, 630, 631, 632, 636, 640, 642, 645, 651], "compon": 271, "qlinear2qdq": 305, "tf2onnx": 306, "torch2onnx": 307, "graph_optim": 308, "bleu": [310, 363], "bleu_util": [311, 364], "coco_label_map": [312, 365], "coco_tool": [313, 366], "evaluate_squad": [314, 367], "f1": [315, 368], "model_convers": 319, "na": [320, 321, 322, 323, 324, 325, 557, 638], "basic_na": 320, "dyna": 321, "nas_util": 324, "pruner_legaci": [326, 327, 328, 329, 330, 331], "gradient_sensit": 326, "group_lasso": 327, "magnitud": 329, "pruning_recip": [333, 334, 335, 336], "tile_pattern": 336, "pruning_v2": 337, "pytorch_prun": [338, 339, 340, 341, 342, 343, 344], "prune_util": 341, "auto_mixed_precis": [347, 425], "bayesian": [349, 427, 648], "exhaust": [350, 429, 648], "mse": [352, 432, 648], "mse_v2": [353, 433, 648], "random": [354, 434, 648], "tuning_sampl": [358, 438], "tuning_spac": [359, 439], "tuning_struct": [360, 440], "mix_precis": 371, "base_model": 372, "keras_model": 374, "mxnet_model": 376, "nets_factori": [377, 507], "onnx_model": [378, 399], "tensorflow_model": 379, "torch_model": 380, "object": [381, 573, 630, 631, 632, 634], "smoother": [383, 384, 385, 445, 446, 447, 448], "core": [384, 446], "rtn": [389, 522], "algorithm_entri": [392, 459, 529], "autotun": [393, 530], "profil": [401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 582], "parser": [402, 403, 404, 405, 406, 407, 408, 409, 410, 411], "factori": [402, 404, 409, 412, 414, 419], "onnx_pars": [404, 405, 406], "result": [408, 620, 622, 630, 631, 632], "tensorflow_pars": [409, 410, 411], "onnxrt_profil": [414, 415, 416, 417], "tensorflow_profil": [419, 420, 421, 422], "auto": [424, 611, 617, 641, 645, 648], "conserv": [428, 648], "hawq_v2": [430, 648], "templat": [442, 443, 555], "api_doc_exampl": 442, "scaler": 448, "static_qu": [449, 450, 451, 452, 453, 454, 455, 456, 457], "torch": [509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 565, 651], "habana_fp8": [509, 510, 511, 512], "fp8_quant": 509, "observ": 512, "layer_wis": [514, 515, 516, 517], "load": 515, "amp": [524, 525, 526, 527], "autocast": 524, "fp8": [525, 526], "environ": [536, 593, 603], "train": [539, 556, 576, 585, 597, 636, 639], "collect_layer_histogram": 540, "create_obj_from_config": 542, "kl_diverg": 544, "load_huggingfac": 545, "neural_insights_util": 547, "option": [548, 585, 605], "weights_detail": 551, "version": 552, "intel": [553, 559, 579, 582, 592, 593, 596, 597, 603, 611, 617, 651, 652], "neural": [553, 556, 557, 559, 579, 582, 592, 593, 596, 597, 600, 604, 606, 611, 617, 619, 620, 621, 622, 624, 625, 626, 630, 631, 632, 636, 644, 649, 652], "compressor": [553, 556, 559, 579, 582, 592, 593, 596, 597, 611, 617, 644, 652], "document": [553, 559, 566, 652], "section": [553, 652], "contributor": [554, 555], "coven": [554, 555], "code": [554, 555, 557, 597, 618, 623, 642, 649], "conduct": [554, 555], "our": [554, 645], "pledg": 554, "standard": 554, "respons": [554, 626], "scope": [554, 636], "enforc": 554, "contribut": [555, 610, 614], "guidelin": 555, "creat": [555, 623], "pull": 555, "request": [555, 598, 628], "step": [555, 619, 620, 621, 622], "checklist": 555, "accept": 555, "statu": [555, 625, 626], "check": 555, "overview": [555, 627, 649], "support": [555, 556, 557, 560, 562, 577, 578, 579, 580, 582, 583, 584, 585, 587, 589, 592, 593, 596, 598, 599, 601, 602, 606, 607, 634, 635, 636, 638, 639, 640, 642, 645, 646, 647, 650], "fx": 556, "introduct": [556, 557, 560, 561, 562, 577, 578, 579, 580, 582, 583, 584, 585, 587, 589, 592, 596, 598, 599, 617, 620, 621, 622, 634, 635, 636, 638, 639, 640, 642, 644, 645, 646, 647, 648, 650], "mode": [556, 651], "matrix": [556, 557, 560, 577, 578, 579, 580, 582, 583, 584, 585, 587, 589, 592, 596, 598, 599, 602, 634, 635, 636, 638, 639, 640, 642, 645, 646, 650], "get": [556, 557, 559, 560, 577, 579, 580, 582, 583, 584, 585, 589, 590, 596, 598, 600, 611, 618, 619, 623, 624, 625, 626, 634, 635, 636, 638, 639, 646, 650], "start": [556, 557, 559, 560, 577, 579, 580, 582, 583, 584, 585, 589, 590, 596, 598, 600, 601, 605, 611, 619, 623, 624, 625, 630, 631, 632, 634, 635, 636, 638, 639, 646, 650], "post": [556, 597, 626, 639], "static": [556, 639], "dynam": [556, 557, 639], "awar": [556, 597, 636, 639], "exampl": [556, 557, 560, 566, 577, 579, 580, 582, 583, 584, 585, 586, 587, 596, 597, 598, 599, 602, 606, 619, 620, 621, 622, 624, 629, 630, 631, 632, 634, 635, 636, 639, 640, 642, 645, 646, 651], "note": [556, 643], "detail": 556, "problem": 556, "architectur": [557, 581, 592, 593], "search": [557, 617], "api": [557, 559, 560, 561, 566, 567, 577, 579, 580, 583, 584, 585, 590, 591, 596, 598, 600, 604, 618, 619, 626, 632, 634, 635, 636, 638, 649], "usag": [557, 606, 617, 626, 645, 646, 648], "1": [557, 585, 588, 591, 597, 617, 624, 625, 651], "python": [557, 559, 579, 590, 596, 600, 604, 605, 612, 615, 619, 638, 649], "yaml": [557, 561, 580, 585, 589, 650], "2": [557, 585, 588, 591, 597, 617, 624, 625, 651], "onli": [557, 642], "advanc": [557, 623, 649], "custom": [557, 579, 596, 630, 648], "secur": [558, 585], "polici": [558, 648], "report": 558, "vulner": 558, "instal": [559, 582, 593, 601, 603, 610, 611, 614, 619, 624, 625], "from": [559, 561, 593, 597, 619, 624, 625], "pypi": [559, 606, 619], "select": [559, 611], "public": [559, 637], "event": [559, 637], "addit": 559, "commun": 559, "work": [560, 624, 639], "flow": [560, 639], "background": [560, 617], "ad": 560, "new": [560, 562, 612, 615, 648], "backend": [560, 639], "capabl": [560, 642], "implement": [560, 561], "onnxrtadaptor": 560, "how": [561, 562, 582, 620, 621, 622, 624], "add": [561, 625], "an": [561, 630, 631, 632], "list": [561, 586, 629, 647], "need": 561, "design": [561, 581, 627, 648], "framework": [561, 579, 580, 587, 589, 599, 638, 640, 642, 645], "query_fw_cap": 561, "accord": [561, 562], "tune_cfg": 561, "prepar": [561, 582, 620, 621, 622, 644], "fp32": [561, 587], "graph": 561, "run": [561, 582, 618, 620, 621, 622, 623], "sampl": [561, 590], "iter": 561, "calcul": 561, "rang": 561, "type": [562, 636], "like": 562, "int4": 562, "few": 562, "line": 562, "chang": [562, 591, 616, 618, 643], "defin": [562, 585], "abil": 562, "specif": [562, 580], "invok": 562, "kernel": 562, "tune": [562, 639, 642, 645, 648], "configur": [562, 585, 589, 623, 638, 644, 650], "us": [562, 579, 596, 624, 625, 645], "summari": [562, 620], "runtim": [564, 593, 639, 640, 651], "mix": [571, 597, 598, 641], "precis": [571, 597, 598, 641], "refer": [578, 636, 639, 642, 645], "build": [579, 588, 596, 623, 624, 625], "file": [580, 589, 650], "user": [580, 585, 591, 638, 642, 649, 650], "workflow": [581, 627], "diagnosi": [582, 619], "featur": [582, 585, 589, 592, 606, 607, 611, 638, 639, 646, 650], "modifi": 582, "script": [582, 623], "see": 582, "do": [582, 600], "paramet": [582, 626], "descript": [582, 626, 628], "suggest": 582, "fallback": 582, "set": [582, 603, 617], "knowledg": [583, 651], "intermedi": 583, "layer": [583, 640, 645], "self": 583, "distribut": [585, 606, 648], "infer": 585, "evalu": 585, "pure": 585, "horovodrun": 585, "execut": 585, "releas": [586, 612, 615, 643], "appendix": 587, "frequent": 588, "ask": 588, "question": 588, "issu": [588, 643], "3": [588, 601, 617], "4": [588, 608, 617, 637], "quick": [590, 605], "valid": [590, 593, 645, 651], "incompat": [591, 643], "between": 591, "v1": 591, "face": [591, 631, 632], "built": [591, 593, 596], "infrastructur": 592, "prerequisit": [593, 624, 625], "binari": 593, "sourc": [593, 619, 621, 622, 624, 625], "ai": 593, "kit": 593, "system": 593, "requir": [593, 610, 614, 620, 621, 622, 630], "hardwar": [593, 598, 651], "cpu": [593, 603, 651], "64": 593, "compat": 593, "processor": 593, "gpu": 593, "": [593, 618, 624], "xe": 593, "multipl": [593, 634, 651], "vendor": 593, "through": [593, 645, 651], "softwar": [593, 598], "legal": 594, "inform": 594, "licens": 594, "citat": 594, "trademark": 594, "llm": 595, "recip": [595, 639], "ipex": [595, 639], "kei": 595, "migrat": 597, "x": 597, "orchestr": [597, 635], "fp16": 598, "dure": [598, 641], "accuraci": [598, 620, 622, 639, 648], "driven": 598, "coder": [600, 604, 606, 617, 649], "what": [600, 618, 624], "we": 600, "offer": 600, "jupyt": [600, 601, 612, 615], "lab": [600, 601], "extens": [600, 610, 611, 614, 617, 618, 627, 651], "launcher": [600, 605], "contact": [600, 624], "aw": 601, "amazon": 601, "sagemak": 601, "For": 601, "studio": 601, "notebook": 601, "instanc": 601, "guid": [601, 649], "bigdl": 602, "nano": 602, "platform": [603, 644], "best": [603, 611], "perform": [603, 644], "mkl": 603, "openmp": 603, "jemalloc": 603, "numa": 603, "control": 603, "variabl": 603, "frequenc": 603, "govern": 603, "enabl": [604, 611, 617], "bench": 604, "superbench": 604, "argument": 605, "v0": 608, "highlight": 608, "other": 608, "changelog": [609, 613], "neural_compressor_ext_lab": [610, 612], "uninstal": [610, 614], "develop": [610, 614], "jupyterlab": 611, "Or": 611, "let": 611, "u": 611, "help": 611, "you": 611, "pre": 611, "requisit": 611, "make": [612, 615, 618, 623], "manual": [612, 615], "npm": [612, 615, 623], "autom": [612, 615], "publish": [612, 615], "conda": [612, 615], "forg": [612, 615], "neural_compressor_ext_lab_alibaba": [614, 615], "log": [616, 625, 626], "unreleas": 616, "vscode": 617, "open": [617, 622], "icon": 617, "5": 617, "welcom": 618, "your": 618, "v": 618, "folder": 618, "setup": 618, "up": 618, "straight": 618, "awai": 618, "explor": 618, "test": [618, 623], "go": 618, "further": 618, "insight": [619, 620, 621, 622], "tensor": [619, 645], "dump": [619, 621], "research": 619, "collabor": 619, "debug": [620, 622], "analyz": [620, 622, 623], "weight": [620, 621, 622, 642], "histogram": 622, "react": 623, "app": 623, "avail": 623, "eject": 623, "learn": [623, 624], "more": [623, 624], "bundl": 623, "size": 623, "web": 623, "deploy": [623, 636], "fail": 623, "minifi": 623, "solut": [624, 625, 626, 630, 631, 632], "why": 624, "doe": 624, "method": [624, 625], "pip": [624, 625], "end": [624, 630, 631, 632], "servic": [625, 627, 630, 631, 632], "submit": [625, 626, 630, 631, 632], "task": [625, 626, 628, 630, 631, 632], "stop": [625, 630, 631, 632], "inspect": 625, "manag": [625, 630, 631], "resourc": [625, 630, 631], "node": 625, "state": 625, "cluster": [625, 626], "remov": 625, "url": 626, "endpoint": 626, "task_id": 626, "websocket": 626, "screen": 626, "ping": 626, "download": [626, 630, 631], "doc": 627, "wip": 627, "oaa": 627, "definit": 627, "diagram": 627, "hug": [631, 632], "grpc": 632, "client": 633, "singl": 634, "One": 635, "shot": 635, "network": 636, "sparsiti": 636, "decai": 636, "regular": 636, "larg": 636, "languag": 636, "retrain": 636, "free": 636, "spars": 636, "hyperparamet": 636, "full": 637, "79": 637, "2023": 637, "25": 637, "2022": 637, "35": 637, "2021": 637, "15": [637, 651], "2018": 637, "2020": 637, "style": 638, "access": 638, "fundament": [639, 645], "scheme": 639, "approach": 639, "With": 639, "without": 639, "specifi": 639, "rule": 639, "devic": 639, "wise": 640, "lwq": 640, "turn": 641, "off": 641, "woq": [642, 651], "known": 643, "benefit": 644, "comparison": 644, "differ": 644, "smooth": 645, "quant": 645, "per": 645, "channel": 645, "limit": 645, "smoothquant": 645, "enhanc": 645, "alpha": 645, "engin": 645, "fix": 645, "determin": 645, "entir": 645, "each": 645, "block": 645, "tensorboard": 646, "space": 648, "exit": 648, "process": 648, "zero": 649, "topic": 649, "innov": 649, "product": 649, "13": 651, "0": 651, "ptq": 651}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [229, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [404, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [421, "module-contents"], [422, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [450, "module-contents"], [459, "module-contents"], [460, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [534, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [542, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"], [548, "module-contents"], [549, "module-contents"], [550, "module-contents"], [551, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [161, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [188, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [228, "classes"], [229, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [271, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [313, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [363, "classes"], [366, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [391, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [398, "classes"], [399, "classes"], [402, "classes"], [404, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [414, "classes"], [416, "classes"], [418, "classes"], [419, "classes"], [421, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [442, "classes"], [445, "classes"], [446, "classes"], [448, "classes"], [450, "classes"], [460, "classes"], [463, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [476, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [498, "classes"], [500, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [518, "classes"], [519, "classes"], [521, "classes"], [523, "classes"], [524, "classes"], [531, "classes"], [539, "classes"], [540, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [546, "classes"], [548, "classes"], [550, "classes"], [551, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [167, "functions"], [168, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [174, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [180, "functions"], [184, "functions"], [186, "functions"], [188, "functions"], [189, "functions"], [192, "functions"], [193, "functions"], [195, "functions"], [196, "functions"], [197, "functions"], [198, "functions"], [200, "functions"], [202, "functions"], [203, "functions"], [207, "functions"], [210, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [219, "functions"], [220, "functions"], [222, "functions"], [223, "functions"], [226, "functions"], [235, "functions"], [236, "functions"], [244, "functions"], [246, "functions"], [250, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [258, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [265, "functions"], [267, "functions"], [268, "functions"], [270, "functions"], [279, "functions"], [287, "functions"], [289, "functions"], [293, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [305, "functions"], [306, "functions"], [307, "functions"], [310, "functions"], [311, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [317, "functions"], [324, "functions"], [331, "functions"], [335, "functions"], [340, "functions"], [341, "functions"], [342, "functions"], [344, "functions"], [349, "functions"], [355, "functions"], [359, "functions"], [361, "functions"], [363, "functions"], [364, "functions"], [366, "functions"], [367, "functions"], [368, "functions"], [369, "functions"], [370, "functions"], [371, "functions"], [375, "functions"], [379, "functions"], [381, "functions"], [382, "functions"], [386, "functions"], [387, "functions"], [389, "functions"], [390, "functions"], [391, "functions"], [392, "functions"], [393, "functions"], [395, "functions"], [396, "functions"], [400, "functions"], [417, "functions"], [422, "functions"], [423, "functions"], [427, "functions"], [435, "functions"], [439, "functions"], [441, "functions"], [442, "functions"], [459, "functions"], [460, "functions"], [462, "functions"], [477, "functions"], [478, "functions"], [480, "functions"], [501, "functions"], [506, "functions"], [508, "functions"], [515, "functions"], [517, "functions"], [518, "functions"], [519, "functions"], [522, "functions"], [523, "functions"], [529, "functions"], [530, "functions"], [531, "functions"], [534, "functions"], [538, "functions"], [539, "functions"], [542, "functions"], [543, "functions"], [545, "functions"], [546, "functions"], [547, "functions"], [549, "functions"], [550, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [158, "subpackages"], [194, "subpackages"], [197, "subpackages"], [230, "subpackages"], [255, "subpackages"], [273, "subpackages"], [298, "subpackages"], [309, "subpackages"], [333, "subpackages"], [351, "subpackages"], [362, "subpackages"], [431, "subpackages"], [497, "subpackages"], [513, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [52, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [151, "submodules"], [158, "submodules"], [159, "submodules"], [174, "submodules"], [182, "submodules"], [187, "submodules"], [190, "submodules"], [194, "submodules"], [197, "submodules"], [199, "submodules"], [203, "submodules"], [210, "submodules"], [221, "submodules"], [227, "submodules"], [231, "submodules"], [238, "submodules"], [250, "submodules"], [254, "submodules"], [258, "submodules"], [265, "submodules"], [274, "submodules"], [281, "submodules"], [293, "submodules"], [297, "submodules"], [300, "submodules"], [304, "submodules"], [309, "submodules"], [316, "submodules"], [322, "submodules"], [328, "submodules"], [334, "submodules"], [338, "submodules"], [351, "submodules"], [357, "submodules"], [362, "submodules"], [369, "submodules"], [373, "submodules"], [385, "submodules"], [398, "submodules"], [403, "submodules"], [405, "submodules"], [410, "submodules"], [413, "submodules"], [415, "submodules"], [420, "submodules"], [431, "submodules"], [437, "submodules"], [443, "submodules"], [447, "submodules"], [486, "submodules"], [497, "submodules"], [499, "submodules"], [504, "submodules"], [514, "submodules"], [520, "submodules"], [532, "submodules"], [543, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [174, "package-contents"], [180, "package-contents"], [197, "package-contents"], [203, "package-contents"], [210, "package-contents"], [238, "package-contents"], [250, "package-contents"], [254, "package-contents"], [255, "package-contents"], [258, "package-contents"], [265, "package-contents"], [281, "package-contents"], [293, "package-contents"], [297, "package-contents"], [298, "package-contents"], [300, "package-contents"], [309, "package-contents"], [316, "package-contents"], [328, "package-contents"], [333, "package-contents"], [334, "package-contents"], [351, "package-contents"], [369, "package-contents"], [373, "package-contents"], [382, "package-contents"], [385, "package-contents"], [391, "package-contents"], [396, "package-contents"], [398, "package-contents"], [431, "package-contents"], [543, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[170, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "Attributes": [[178, "attributes"], [180, "attributes"], [183, "attributes"], [238, "attributes"], [246, "attributes"], [255, "attributes"], [289, "attributes"], [298, "attributes"], [309, "attributes"], [333, "attributes"], [373, "attributes"], [395, "attributes"], [398, "attributes"], [400, "attributes"], [442, "attributes"], [523, "attributes"], [543, "attributes"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.utils.constants": [[181, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[182, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[183, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[184, "module-neural_compressor.common.utils.utility"]], "neural_compressor.compression.callbacks": [[185, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[186, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[187, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.distillation.optimizers": [[188, "module-neural_compressor.compression.distillation.optimizers"]], "neural_compressor.compression.distillation.utility": [[189, "module-neural_compressor.compression.distillation.utility"]], "neural_compressor.compression.hpo": [[190, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[191, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[192, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[193, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[194, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[195, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner.dsnot": [[196, "module-neural_compressor.compression.pruner.dsnot"]], "neural_compressor.compression.pruner": [[197, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[198, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[199, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[200, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[201, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[202, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[203, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[204, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[205, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[206, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[207, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[208, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[209, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[210, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[211, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[212, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[213, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[214, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[215, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[216, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[217, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[218, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[219, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[220, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.compression.pruner.wanda": [[221, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[222, "module-neural_compressor.compression.pruner.wanda.prune"]], "neural_compressor.compression.pruner.wanda.utils": [[223, "module-neural_compressor.compression.pruner.wanda.utils"]], "neural_compressor.compression.pruner.wanda.wrapper": [[224, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "neural_compressor.conf.config": [[225, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[226, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[227, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[228, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[229, "module-neural_compressor.config"]], "neural_compressor.contrib": [[230, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[231, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[232, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[233, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[235, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[237, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[238, "module-neural_compressor.data.dataloaders"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[242, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[244, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[245, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[246, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[247, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[250, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[252, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[253, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[254, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[255, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[256, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[257, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[258, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[259, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[260, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[261, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[262, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[263, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[264, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[265, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[266, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[267, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[268, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[269, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[270, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[271, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[272, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[273, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[274, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[275, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[276, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[278, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[280, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[281, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[283, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[285, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[287, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[288, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[289, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[290, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[291, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[292, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[293, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[294, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[295, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[296, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[297, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[298, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[299, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[300, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[301, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[302, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[303, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[304, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[305, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[306, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[307, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[308, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[309, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[310, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[311, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[312, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[313, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[314, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[315, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[316, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[317, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[318, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[319, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[320, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[321, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[322, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[323, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[324, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[325, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[326, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[327, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[328, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[329, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[330, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[331, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[332, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[333, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[334, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[335, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[337, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[338, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[339, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[340, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[341, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[342, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[343, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[344, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[345, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[346, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[347, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[348, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[349, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[350, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[351, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[352, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[353, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[354, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[355, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[356, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[357, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[358, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[359, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[361, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[362, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[363, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[364, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[365, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[366, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[367, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[368, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[369, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[370, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[371, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[372, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[373, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[374, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[375, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[376, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[377, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[378, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[379, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[380, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[381, "module-neural_compressor.objective"]], "neural_compressor.onnxrt.algorithms": [[382, "module-neural_compressor.onnxrt.algorithms"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[383, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[384, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[385, "module-neural_compressor.onnxrt.algorithms.smoother"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[386, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[387, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[388, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[389, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "neural_compressor.onnxrt": [[391, "module-neural_compressor.onnxrt"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[392, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "neural_compressor.onnxrt.quantization.autotune": [[393, "module-neural_compressor.onnxrt.quantization.autotune"]], "neural_compressor.onnxrt.quantization.calibrate": [[394, "module-neural_compressor.onnxrt.quantization.calibrate"]], "neural_compressor.onnxrt.quantization.config": [[395, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[396, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[397, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[398, "module-neural_compressor.onnxrt.utils"]], "neural_compressor.onnxrt.utils.onnx_model": [[399, "module-neural_compressor.onnxrt.utils.onnx_model"]], "neural_compressor.onnxrt.utils.utility": [[400, "module-neural_compressor.onnxrt.utils.utility"]], "neural_compressor.profiling": [[401, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[402, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[403, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[404, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[405, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[406, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[407, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[408, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[409, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[410, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[411, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[412, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[413, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[414, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[415, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[416, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[417, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[418, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[419, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[420, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[421, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[422, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[423, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[424, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[425, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[426, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[427, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[428, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[429, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[430, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[431, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[432, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[433, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[434, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[435, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[436, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[437, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[438, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[439, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[440, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[441, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[442, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[443, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[444, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[445, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[446, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[447, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[448, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[449, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[450, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d": [[451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense": [[452, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d": [[453, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer": [[456, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d": [[457, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow": [[458, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[459, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.config": [[460, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[461, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[462, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[463, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[464, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[465, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[466, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[467, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[468, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[469, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[470, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[499, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[500, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.utility": [[501, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[502, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[503, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[504, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[505, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[506, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.nets_factory": [[507, "module-neural_compressor.tensorflow.utils.nets_factory"]], "neural_compressor.tensorflow.utils.utility": [[508, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[509, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[510, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[511, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[512, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[513, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[514, "module-neural_compressor.torch.algorithms.layer_wise"]], "neural_compressor.torch.algorithms.layer_wise.load": [[515, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[516, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[517, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "neural_compressor.torch.algorithms.weight_only.awq": [[518, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[519, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "neural_compressor.torch.algorithms.weight_only": [[520, "module-neural_compressor.torch.algorithms.weight_only"]], "neural_compressor.torch.algorithms.weight_only.modules": [[521, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[522, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "neural_compressor.torch.algorithms.weight_only.utility": [[523, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "neural_compressor.torch.amp.autocast": [[524, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[525, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[526, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[527, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[528, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[529, "module-neural_compressor.torch.quantization.algorithm_entry"]], "neural_compressor.torch.quantization.autotune": [[530, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[531, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[532, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[533, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[534, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.torch.utils.constants": [[535, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[536, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[537, "module-neural_compressor.torch.utils"]], "neural_compressor.torch.utils.utility": [[538, "module-neural_compressor.torch.utils.utility"]], "neural_compressor.training": [[539, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[540, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[541, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[542, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[543, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[544, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[545, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[546, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[547, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[548, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[549, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[550, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[551, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[552, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[553, "intel-neural-compressor-documentation"], [652, "intel-neural-compressor-documentation"]], "Sections": [[553, "sections"], [652, "sections"]], "Contributor Covenant Code of Conduct": [[554, "contributor-covenant-code-of-conduct"], [555, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[554, "our-pledge"]], "Our Standards": [[554, "our-standards"]], "Our Responsibilities": [[554, "our-responsibilities"]], "Scope": [[554, "scope"]], "Enforcement": [[554, "enforcement"]], "Attribution": [[554, "attribution"]], "Contribution Guidelines": [[555, "contribution-guidelines"]], "Create Pull Request": [[555, "create-pull-request"]], "Step-by-Step guidelines": [[555, "step-by-step-guidelines"]], "Pull Request Checklist": [[555, "pull-request-checklist"]], "Pull Request Template": [[555, "pull-request-template"]], "Pull Request Acceptance Criteria": [[555, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[555, "pull-request-status-checks-overview"]], "Support": [[555, "support"]], "FX": [[556, "fx"]], "Introduction": [[556, "introduction"], [557, "introduction"], [560, "introduction"], [561, "introduction"], [562, "introduction"], [577, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [583, "introduction"], [584, "introduction"], [585, "introduction"], [587, "introduction"], [589, "introduction"], [592, "introduction"], [596, "introduction"], [598, "introduction"], [599, "introduction"], [620, "introduction"], [621, "introduction"], [622, "introduction"], [634, "introduction"], [635, "introduction"], [636, "introduction"], [638, "introduction"], [640, "introduction"], [642, "introduction"], [644, "introduction"], [645, "introduction"], [646, "introduction"], [647, "introduction"], [648, "introduction"], [650, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[556, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[556, "get-started"], [582, "get-started"], [624, "get-started"], [639, "get-started"]], "Post Training Static Quantization": [[556, "post-training-static-quantization"], [639, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[556, "post-training-dynamic-quantization"], [639, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[556, "quantization-aware-training"]], "Examples": [[556, "examples"], [557, "examples"], [577, "examples"], [579, "examples"], [580, "examples"], [583, "examples"], [584, "examples"], [585, "examples"], [586, "examples"], [587, "examples"], [597, "examples"], [598, "examples"], [599, "examples"], [635, "examples"], [636, "examples"], [639, "examples"], [640, "examples"], [642, "examples"], [646, "examples"]], "Note": [[556, "note"]], "Details": [[556, "details"]], "Common Problem": [[556, "common-problem"]], "Dynamic Quantization": [[556, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[556, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[557, "neural-architecture-search"]], "Basic NAS": [[557, "basic-nas"]], "Dynamic NAS": [[557, "dynamic-nas"]], "NAS Support Matrix": [[557, "nas-support-matrix"]], "Get Started with NAS API": [[557, "get-started-with-nas-api"]], "Basic Usage": [[557, "basic-usage"]], "1. Python code + YAML": [[557, "python-code-yaml"]], "2. Python code only": [[557, "python-code-only"]], "Advanced Usage (Custom NAS)": [[557, "advanced-usage-custom-nas"]], "Security Policy": [[558, "security-policy"]], "Report a Vulnerability": [[558, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[559, "intel-neural-compressor"], [617, "intel-neural-compressor"]], "Installation": [[559, "installation"], [593, "installation"], [593, "id1"], [611, "installation"], [619, "installation"], [624, "installation"]], "Install from pypi": [[559, "install-from-pypi"], [619, "install-from-pypi"]], "Getting Started": [[559, "getting-started"], [590, "getting-started"], [619, "getting-started"]], "Quantization with Python API": [[559, "quantization-with-python-api"], [590, "quantization-with-python-api"], [619, "quantization-with-python-api"]], "Documentation": [[559, "documentation"]], "Selected Publications/Events": [[559, "selected-publications-events"]], "Additional Content": [[559, "additional-content"]], "Communication": [[559, "communication"]], "Adaptor": [[560, "adaptor"], [563, "adaptor"]], "Adaptor Support Matrix": [[560, "adaptor-support-matrix"]], "Working Flow": [[560, "working-flow"], [639, "working-flow"]], "Get Started with Adaptor API": [[560, "get-started-with-adaptor-api"]], "Query API": [[560, "query-api"]], "Background": [[560, "background"]], "Query API Introduction": [[560, "query-api-introduction"]], "Example of Adding a New Backend Support": [[560, "example-of-adding-a-new-backend-support"]], "Capability": [[560, "capability"]], "Implement ONNXRTAdaptor Class": [[560, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[561, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[561, "api-list-that-need-to-implement"]], "Design the framework YAML": [[561, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[561, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[561, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[561, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[561, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[561, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[562, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[562, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[562, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[562, "use-the-new-data-type"]], "Summary": [[562, "summary"]], "ONNX Runtime": [[564, "onnx-runtime"]], "Torch Utils": [[565, "torch-utils"]], "API Document Example": [[566, "api-document-example"]], "APIs": [[567, "apis"]], "Benchmark": [[568, "benchmark"], [597, "benchmark"], [638, "benchmark"]], "Compression": [[569, "compression"]], "Config": [[570, "config"]], "Mix Precision": [[571, "mix-precision"], [597, "mix-precision"]], "Model": [[572, "model"], [599, "model"], [620, "model"], [622, "model"]], "Objective": [[573, "objective"], [630, "objective"], [631, "objective"], [632, "objective"], [634, "objective"]], "Quantization": [[574, "quantization"], [638, "quantization"], [639, "quantization"]], "Strategy": [[575, "strategy"]], "Training": [[576, "training"]], "Benchmarking": [[577, "benchmarking"]], "Benchmark Support Matrix": [[577, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[577, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[578, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[578, "calibration-algorithms"]], "Support Matrix": [[578, "support-matrix"], [602, "support-matrix"]], "Reference": [[578, "reference"], [636, "reference"], [639, "reference"], [642, "reference"], [645, "reference"]], "DataLoader": [[579, "dataloader"]], "Supported Framework Dataloader Matrix": [[579, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[579, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[579, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[579, "build-custom-dataloader-with-python-api"]], "Dataset": [[580, "dataset"]], "Supported Framework Dataset Matrix": [[580, "supported-framework-dataset-matrix"]], "TensorFlow": [[580, "tensorflow"], [596, "tensorflow"], [647, "tensorflow"]], "PyTorch": [[580, "pytorch"], [596, "pytorch"], [641, "pytorch"]], "MXNet": [[580, "mxnet"], [596, "mxnet"], [647, "mxnet"]], "ONNXRT": [[580, "onnxrt"], [596, "onnxrt"], [647, "onnxrt"]], "Get start with Dataset API": [[580, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[580, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[580, "user-specific-dataset"]], "Design": [[581, "design"], [648, "design"], [648, "id1"], [648, "id3"], [648, "id5"], [648, "id7"], [648, "id9"], [648, "id11"], [648, "id13"], [648, "id15"], [648, "id17"], [648, "id19"], [648, "id21"]], "Architecture": [[581, "architecture"], [592, "architecture"]], "Workflow": [[581, "workflow"]], "Diagnosis": [[582, "diagnosis"]], "Diagnosis Introduction": [[582, "diagnosis-introduction"]], "Supported Feature Matrix": [[582, "supported-feature-matrix"], [585, "supported-feature-matrix"], [589, "supported-feature-matrix"], [592, "supported-feature-matrix"], [638, "supported-feature-matrix"], [639, "supported-feature-matrix"], [646, "supported-feature-matrix"], [650, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[582, "install-intel-neural-compressor"]], "Modify script": [[582, "modify-script"]], "Quantization diagnosis": [[582, "quantization-diagnosis"]], "Benchmark diagnosis": [[582, "benchmark-diagnosis"]], "Example": [[582, "example"], [596, "example"], [602, "example"], [606, "example"], [634, "example"]], "Prepare dataset": [[582, "prepare-dataset"]], "Run quantization script": [[582, "run-quantization-script"]], "Run benchmark script": [[582, "run-benchmark-script"]], "See quantization data": [[582, "see-quantization-data"]], "How to do diagnosis": [[582, "how-to-do-diagnosis"]], "Parameter description": [[582, "parameter-description"]], "Diagnosis suggestions": [[582, "diagnosis-suggestions"]], "Fallback setting example": [[582, "fallback-setting-example"]], "See profiling data": [[582, "see-profiling-data"]], "Distillation": [[583, "distillation"], [597, "distillation"], [638, "distillation"]], "Knowledge Distillation": [[583, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[583, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[583, "self-distillation"]], "Distillation Support Matrix": [[583, "distillation-support-matrix"]], "Get Started with Distillation API": [[583, "get-started-with-distillation-api"]], "Distillation for Quantization": [[584, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[584, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[584, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[585, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[585, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[585, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[585, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[585, "horovodrun-execution"]], "Security": [[585, "security"]], "PyTorch Examples:": [[585, "pytorch-examples"]], "TensorFlow Examples:": [[585, "tensorflow-examples"]], "Example List": [[586, "example-list"]], "Release Data": [[586, "release-data"]], "Export": [[587, "export"]], "Supported Framework Model Matrix": [[587, "supported-framework-model-matrix"], [599, "supported-framework-model-matrix"], [640, "supported-framework-model-matrix"], [642, "supported-framework-model-matrix"]], "PyTorch Model": [[587, "pytorch-model"]], "FP32 Model Export": [[587, "fp32-model-export"], [587, "id1"]], "INT8 Model Export": [[587, "int8-model-export"], [587, "id2"]], "Tensorflow Model": [[587, "tensorflow-model"]], "Appendix": [[587, "appendix"]], "Supported quantized ops": [[587, "supported-quantized-ops"]], "Frequently Asked Questions": [[588, "frequently-asked-questions"]], "Common Build Issues": [[588, "common-build-issues"]], "Issue 1:": [[588, "issue-1"]], "Issue 2:": [[588, "issue-2"]], "Issue 3:": [[588, "issue-3"]], "Issue 4:": [[588, "issue-4"]], "Framework YAML Configuration Files": [[589, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[589, "get-started-with-framework-yaml-files"]], "Quick Samples": [[590, "quick-samples"]], "Validated Models": [[590, "validated-models"], [645, "validated-models"], [651, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[591, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[591, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[591, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[592, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[593, "prerequisites"], [624, "prerequisites"], [625, "prerequisites"]], "Install from Binary": [[593, "install-from-binary"]], "Install from Source": [[593, "install-from-source"], [619, "install-from-source"]], "Install from AI Kit": [[593, "install-from-ai-kit"]], "System Requirements": [[593, "system-requirements"]], "Validated Hardware Environment": [[593, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[593, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[593, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[593, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[593, "validated-software-environment"]], "Legal Information": [[594, "legal-information"]], "License": [[594, "license"]], "Citation": [[594, "citation"]], "Trademarks": [[594, "trademarks"]], "LLMs Quantization Recipes": [[595, "llms-quantization-recipes"]], "IPEX key models": [[595, "ipex-key-models"]], "Metrics": [[596, "metrics"]], "Supported Built-in Metric Matrix": [[596, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[596, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[596, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[596, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[597, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[597, "model-quantization"]], "Post-training Quantization": [[597, "post-training-quantization"]], "Quantization Aware Training": [[597, "quantization-aware-training"], [639, "quantization-aware-training"], [639, "id1"]], "Pruning": [[597, "pruning"], [636, "pruning"], [638, "pruning"]], "Orchestration": [[597, "orchestration"]], "Mixed Precision": [[598, "mixed-precision"]], "Mixed Precision Support Matrix": [[598, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[598, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[598, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[598, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[598, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[598, "get-started-with-mixed-precision-api"]], "Neural Coder": [[600, "neural-coder"], [617, "neural-coder"], [617, "id1"]], "What do we offer?": [[600, "what-do-we-offer"]], "Getting Started!": [[600, "getting-started"], [611, "getting-started"]], "Jupyter Lab Extension": [[600, "jupyter-lab-extension"]], "Python Launcher": [[600, "python-launcher"], [605, "python-launcher"]], "Python API": [[600, "python-api"]], "Contact": [[600, "contact"], [624, "contact"]], "AWS Amazon SageMaker Support": [[601, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[601, "start-jupyter-lab-3"]], "For SageMaker Studio": [[601, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[601, "for-sagemaker-notebook-instance"]], "Installation Guide": [[601, "installation-guide"]], "BigDL Nano Support": [[602, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[603, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[603, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[603, "install-numa-controller"]], "Environment Variables": [[603, "environment-variables"]], "Frequency Governers": [[603, "frequency-governers"]], "Neural Coder as Python API": [[604, "neural-coder-as-python-api"]], "Enable": [[604, "enable"]], "Bench": [[604, "bench"]], "SuperBench": [[604, "superbench"]], "Quick-Start": [[605, "quick-start"]], "Launcher Arguments (Optional)": [[605, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[606, "neural-coder-for-quantization"]], "Features Supported": [[606, "features-supported"]], "Models Supported": [[606, "models-supported"]], "Usage": [[606, "usage"], [626, "usage"], [626, "id2"], [626, "id6"], [626, "id9"], [626, "id16"], [626, "id19"], [626, "id22"], [626, "id25"], [645, "usage"], [646, "usage"], [646, "id1"], [648, "usage"], [648, "id2"], [648, "id4"], [648, "id6"], [648, "id8"], [648, "id10"], [648, "id12"], [648, "id14"], [648, "id16"], [648, "id18"], [648, "id20"], [648, "id22"]], "PyPI distribution:": [[606, "pypi-distribution"]], "Supported Optimization Features": [[607, "supported-optimization-features"]], "v0.4": [[608, "v0-4"]], "Highlights": [[608, "highlights"]], "Others": [[608, "others"]], "Changelog": [[609, "changelog"], [613, "changelog"]], "neural_compressor_ext_lab": [[610, "neural-compressor-ext-lab"]], "Requirements": [[610, "requirements"], [614, "requirements"], [620, "requirements"], [621, "requirements"], [622, "requirements"], [630, "requirements"]], "Install": [[610, "install"]], "Uninstall": [[610, "uninstall"]], "Contributing": [[610, "contributing"], [614, "contributing"]], "Development install": [[610, "development-install"], [614, "development-install"]], "Development uninstall": [[610, "development-uninstall"], [614, "development-uninstall"]], "Packaging the extension": [[610, "packaging-the-extension"], [614, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[611, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[611, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[611, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[611, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[612, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[612, "manual-release"], [615, "manual-release"]], "Python package": [[612, "python-package"], [615, "python-package"]], "NPM package": [[612, "npm-package"], [615, "npm-package"]], "Automated releases with the Jupyter Releaser": [[612, "automated-releases-with-the-jupyter-releaser"], [615, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[612, "publishing-to-conda-forge"], [615, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[614, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[615, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[616, "change-log"]], "[Unreleased]": [[616, "unreleased"]], "Background Introduction": [[617, "background-introduction"]], "Neural Coder Extension in VSCode": [[617, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[617, "neural-coder-extension-usage"]], "1. Open": [[617, "open"]], "2. Search": [[617, "search"]], "3. Setting": [[617, "setting"]], "4. Icon": [[617, "icon"]], "5. optimization (quantization)": [[617, "optimization-quantization"]], "5.1 Enable": [[617, "enable"]], "5.2 Auto": [[617, "auto"]], "Welcome to your VS Code Extension": [[618, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[618, "what-s-in-the-folder"]], "Setup": [[618, "setup"]], "Get up and running straight away": [[618, "get-up-and-running-straight-away"]], "Make changes": [[618, "make-changes"]], "Explore the API": [[618, "explore-the-api"]], "Run tests": [[618, "run-tests"]], "Go further": [[618, "go-further"]], "Neural Insights": [[619, "neural-insights"]], "Start the Neural Insights": [[619, "start-the-neural-insights"]], "Tensor dump examples": [[619, "tensor-dump-examples"]], "Step by Step Diagnosis Example": [[619, "step-by-step-diagnosis-example"]], "Research Collaborations": [[619, "research-collaborations"]], "Step by step example how to debug accuracy with Neural Insights": [[620, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"], [622, "step-by-step-example-how-to-debug-accuracy-with-neural-insights"]], "Preparation": [[620, "preparation"], [621, "preparation"], [622, "preparation"], [644, "preparation"]], "Running the quantization": [[620, "running-the-quantization"], [621, "running-the-quantization"], [622, "running-the-quantization"]], "Analyzing the result of quantization": [[620, "analyzing-the-result-of-quantization"], [622, "analyzing-the-result-of-quantization"]], "Weights summary": [[620, "weights-summary"]], "Activations summary": [[620, "activations-summary"]], "Step by step example how to dump weights data for PyTorch model with Neural Insights": [[621, "step-by-step-example-how-to-dump-weights-data-for-pytorch-model-with-neural-insights"]], "Source": [[621, "source"], [622, "source"]], "Prepare the dataset": [[622, "prepare-the-dataset"]], "Analyzing weight histograms": [[622, "analyzing-weight-histograms"]], "Open Neural Insights": [[622, "open-neural-insights"]], "Getting Started with Create React App": [[623, "getting-started-with-create-react-app"]], "Available Scripts": [[623, "available-scripts"]], "npm start": [[623, "npm-start"]], "npm test": [[623, "npm-test"]], "npm run build": [[623, "npm-run-build"]], "npm run eject": [[623, "npm-run-eject"]], "Learn More": [[623, "learn-more"], [624, "learn-more"]], "Code Splitting": [[623, "code-splitting"]], "Analyzing the Bundle Size": [[623, "analyzing-the-bundle-size"]], "Making a Progressive Web App": [[623, "making-a-progressive-web-app"]], "Advanced Configuration": [[623, "advanced-configuration"]], "Deployment": [[623, "deployment"]], "npm run build fails to minify": [[623, "npm-run-build-fails-to-minify"]], "What\u2019s Neural Solution?": [[624, "what-s-neural-solution"]], "Why Neural Solution?": [[624, "why-neural-solution"]], "How does Neural Solution Work?": [[624, "how-does-neural-solution-work"]], "Method 1. Using pip:": [[624, "method-1-using-pip"]], "Method 2. Building from source:": [[624, "method-2-building-from-source"]], "End-to-end examples": [[624, "end-to-end-examples"]], "Get started": [[625, "get-started"]], "Install Neural Solution": [[625, "install-neural-solution"]], "Method 1. Using pip": [[625, "method-1-using-pip"]], "Method 2. Building from source": [[625, "method-2-building-from-source"]], "Start service": [[625, "start-service"]], "Submit task": [[625, "submit-task"]], "Query task status": [[625, "query-task-status"]], "Stop service": [[625, "stop-service"]], "Inspect logs": [[625, "inspect-logs"]], "Manage resource": [[625, "manage-resource"], [630, "manage-resource"], [631, "manage-resource"]], "Node States": [[625, "node-states"]], "Query cluster": [[625, "query-cluster"]], "Add node": [[625, "add-node"]], "Remove node": [[625, "remove-node"]], "Neural Solution API": [[626, "neural-solution-api"]], "Base URL": [[626, "base-url"]], "Endpoints": [[626, "endpoints"]], "GET /": [[626, "get"]], "Description": [[626, "description"], [626, "id1"], [626, "id4"], [626, "id8"], [626, "id12"], [626, "id15"], [626, "id18"], [626, "id21"], [626, "id24"]], "Responses": [[626, "responses"], [626, "id3"], [626, "id7"], [626, "id11"], [626, "id14"], [626, "id17"], [626, "id20"], [626, "id23"], [626, "id26"]], "POST /task/submit": [[626, "post-task-submit"]], "Parameters": [[626, "parameters"], [626, "id5"], [626, "id10"], [626, "id13"]], "GET /task/status/{task_id}": [[626, "get-task-status-task-id"]], "GET /task/log/{task_id}": [[626, "get-task-log-task-id"]], "WebSocket /task/screen/{task_id}": [[626, "websocket-task-screen-task-id"]], "GET /ping": [[626, "get-ping"]], "GET /cluster": [[626, "get-cluster"]], "GET /download/{task_id}": [[626, "get-download-task-id"]], "GET /description": [[626, "get-description"]], "Design Doc for Optimization as a Service [WIP]": [[627, "design-doc-for-optimization-as-a-service-wip"]], "Contents": [[627, "contents"]], "Overview": [[627, "overview"], [649, "overview"]], "Workflow of OaaS": [[627, "workflow-of-oaas"]], "Class definition diagram": [[627, "class-definition-diagram"]], "Extensibility": [[627, "extensibility"]], "Task request description": [[628, "task-request-description"]], "Examples List": [[629, "examples-list"]], "An end-to-end example: quantize a custom model with Neural Solution": [[630, "an-end-to-end-example-quantize-a-custom-model-with-neural-solution"]], "Start the Neural Solution Service": [[630, "start-the-neural-solution-service"], [631, "start-the-neural-solution-service"], [632, "start-the-neural-solution-service"]], "Submit optimization task": [[630, "submit-optimization-task"], [631, "submit-optimization-task"], [632, "submit-optimization-task"]], "Query optimization result": [[630, "query-optimization-result"], [631, "query-optimization-result"], [632, "query-optimization-result"]], "Download optimized model": [[630, "download-optimized-model"], [631, "download-optimized-model"]], "Stop the service": [[630, "stop-the-service"], [631, "stop-the-service"], [632, "stop-the-service"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution": [[631, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution"]], "An end-to-end example: quantize a Hugging Face model with Neural Solution gRPC API": [[632, "an-end-to-end-example-quantize-a-hugging-face-model-with-neural-solution-grpc-api"]], "Client": [[633, "client"]], "Single Objective": [[634, "single-objective"]], "Multiple Objectives": [[634, "multiple-objectives"]], "Objective Support Matrix": [[634, "objective-support-matrix"]], "Get Started with Objective API": [[634, "get-started-with-objective-api"]], "Config Single Objective": [[634, "config-single-objective"]], "Config Multiple Objectives": [[634, "config-multiple-objectives"]], "Optimization Orchestration": [[635, "optimization-orchestration"]], "One-shot": [[635, "one-shot"]], "Orchestration Support Matrix": [[635, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[635, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[636, "neural-network-pruning"]], "Pruning Patterns": [[636, "pruning-patterns"]], "Pruning Criteria": [[636, "pruning-criteria"]], "Pruning Types": [[636, "pruning-types"]], "Pruning Schedules": [[636, "pruning-schedules"]], "Pruning Scope": [[636, "pruning-scope"]], "Sparsity Decay Types": [[636, "sparsity-decay-types"]], "Regularization": [[636, "regularization"]], "Large Language Model Pruning": [[636, "large-language-model-pruning"]], "Pruning Support Matrix": [[636, "pruning-support-matrix"]], "Get Started with Pruning API": [[636, "get-started-with-pruning-api"]], "Training-aware pruning API": [[636, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[636, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[636, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[636, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (79)": [[637, "full-publications-events-79"]], "2023 (25)": [[637, "id1"]], "2022 (35)": [[637, "id2"]], "2021 (15)": [[637, "id3"]], "2018 - 2020 (4)": [[637, "id4"]], "Pythonic Style Access for Configurations": [[638, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[638, "pythonic-api-for-user-configurations"], [638, "id1"]], "Pythonic API for Framework Configurations": [[638, "pythonic-api-for-framework-configurations"], [638, "id2"]], "Get Started with Pythonic API for Configurations": [[638, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[638, "nas"]], "Quantization Introduction": [[639, "quantization-introduction"]], "Quantization Fundamentals": [[639, "quantization-fundamentals"], [645, "quantization-fundamentals"]], "Quantization Support Matrix": [[639, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[639, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[639, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[639, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[639, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[639, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[639, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[639, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[639, "post-training-quantization"]], "Specify Quantization Rules": [[639, "specify-quantization-rules"]], "Specify Quantization Recipes": [[639, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[639, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[640, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[640, "pytorch-framework-example"]], "ONNX Runtime framework example": [[640, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[641, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[641, "tensorflow"]], "Weight Only Quantization (WOQ)": [[642, "weight-only-quantization-woq"]], "Quantization Capability": [[642, "quantization-capability"]], "Export Compressed Model": [[642, "export-compressed-model"]], "User Code Example": [[642, "user-code-example"]], "WOQ Algorithms Tuning": [[642, "woq-algorithms-tuning"]], "User code example": [[642, "id1"]], "Release": [[643, "release"]], "Release Notes": [[643, "release-notes"]], "Known Issues": [[643, "known-issues"]], "Incompatible Changes": [[643, "incompatible-changes"]], "SigOpt Strategy": [[644, "sigopt-strategy"]], "SigOpt Platform": [[644, "sigopt-platform"]], "Neural Compressor Configuration": [[644, "neural-compressor-configuration"]], "Performance": [[644, "performance"]], "Benefit of SigOpt Strategy": [[644, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[644, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[645, "smooth-quant"]], "Per-tensor & Per-channel": [[645, "per-tensor-per-channel"]], "Per-tensor example": [[645, "per-tensor-example"]], "Per-channel example": [[645, "per-channel-example"]], "Matmul quantization example": [[645, "matmul-quantization-example"]], "Per-channel limitation": [[645, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[645, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[645, "smoothquant"]], "Our enhancement:": [[645, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[645, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[645, "engineering"]], "Using a fixed alpha": [[645, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[645, "determining-the-alpha-through-auto-tuning"]], "Auto-tune the alpha for the entire model": [[645, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[645, "auto-tune-the-alpha-for-each-layer-block"]], "Supported Framework Matrix": [[645, "supported-framework-matrix"]], "TensorBoard": [[646, "tensorboard"]], "Get Started with TensorBoard": [[646, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[646, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[646, "tensorflow-tensorboard"]], "PyTorch Examples": [[646, "pytorch-examples"]], "TensorFlow Examples": [[646, "tensorflow-examples"]], "Transform": [[647, "transform"]], "Transform Support List": [[647, "transform-support-list"]], "Pytorch": [[647, "pytorch"]], "Tuning Strategies": [[648, "tuning-strategies"]], "Strategy Design": [[648, "strategy-design"]], "Tuning Space": [[648, "tuning-space"]], "Exit Policy": [[648, "exit-policy"]], "Accuracy Criteria": [[648, "accuracy-criteria"]], "Tuning Process": [[648, "tuning-process"]], "Tuning Algorithms": [[648, "tuning-algorithms"]], "Auto": [[648, "auto"]], "Conservative Tuning": [[648, "conservative-tuning"]], "Basic": [[648, "basic"]], "MSE": [[648, "mse"]], "MSE_V2": [[648, "mse-v2"]], "HAWQ_V2": [[648, "hawq-v2"]], "Bayesian": [[648, "bayesian"]], "Exhaustive": [[648, "exhaustive"]], "Random": [[648, "random"]], "SigOpt": [[648, "sigopt"]], "TPE": [[648, "tpe"]], "Distributed Tuning": [[648, "distributed-tuning"]], "Customize a New Tuning Strategy": [[648, "customize-a-new-tuning-strategy"]], "User Guide": [[649, "user-guide"]], "Python-based APIs": [[649, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[649, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[649, "advanced-topics"]], "Innovations for Productivity": [[649, "innovations-for-productivity"]], "User YAML Configuration Files": [[650, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[650, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[651, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.13.0": [[651, "tensorflow-models-with-intel-tensorflow-2-13-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[651, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[651, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[651, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[651, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.15.1": [[651, "onnx-models-with-onnx-runtime-1-15-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[651, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[651, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[651, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[651, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"], [150, "module-neural_compressor.adaptor.torch_utils.autoround.export"], [151, "module-neural_compressor.adaptor.torch_utils.autoround"], [152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"], [153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"], [154, "module-neural_compressor.adaptor.torch_utils.awq"], [155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [156, "module-neural_compressor.adaptor.torch_utils.gptq"], [157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [158, "module-neural_compressor.adaptor.torch_utils"], [159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [169, "module-neural_compressor.adaptor.torch_utils.teq"], [170, "module-neural_compressor.adaptor.torch_utils.util"], [171, "module-neural_compressor.adaptor.torch_utils.weight_only"], [172, "module-neural_compressor.algorithm.algorithm"], [173, "module-neural_compressor.algorithm.fast_bias_correction"], [174, "module-neural_compressor.algorithm"], [175, "module-neural_compressor.algorithm.smooth_quant"], [176, "module-neural_compressor.algorithm.weight_correction"], [177, "module-neural_compressor.benchmark"], [178, "module-neural_compressor.common.base_config"], [179, "module-neural_compressor.common.base_tuning"], [180, "module-neural_compressor.common"], [181, "module-neural_compressor.common.utils.constants"], [182, "module-neural_compressor.common.utils"], [183, "module-neural_compressor.common.utils.logger"], [184, "module-neural_compressor.common.utils.utility"], [185, "module-neural_compressor.compression.callbacks"], [186, "module-neural_compressor.compression.distillation.criterions"], [187, "module-neural_compressor.compression.distillation"], [188, "module-neural_compressor.compression.distillation.optimizers"], [189, "module-neural_compressor.compression.distillation.utility"], [190, "module-neural_compressor.compression.hpo"], [191, "module-neural_compressor.compression.hpo.sa_optimizer"], [192, "module-neural_compressor.compression.hpo.search_algorithms"], [193, "module-neural_compressor.compression.hpo.search_space"], [194, "module-neural_compressor.compression"], [195, "module-neural_compressor.compression.pruner.criteria"], [196, "module-neural_compressor.compression.pruner.dsnot"], [197, "module-neural_compressor.compression.pruner"], [198, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [199, "module-neural_compressor.compression.pruner.model_slim"], [200, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [201, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [202, "module-neural_compressor.compression.pruner.patterns.base"], [203, "module-neural_compressor.compression.pruner.patterns"], [204, "module-neural_compressor.compression.pruner.patterns.mha"], [205, "module-neural_compressor.compression.pruner.patterns.ninm"], [206, "module-neural_compressor.compression.pruner.patterns.nxm"], [207, "module-neural_compressor.compression.pruner.pruners.base"], [208, "module-neural_compressor.compression.pruner.pruners.basic"], [209, "module-neural_compressor.compression.pruner.pruners.block_mask"], [210, "module-neural_compressor.compression.pruner.pruners"], [211, "module-neural_compressor.compression.pruner.pruners.mha"], [212, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [213, "module-neural_compressor.compression.pruner.pruners.progressive"], [214, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [215, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [216, "module-neural_compressor.compression.pruner.pruning"], [217, "module-neural_compressor.compression.pruner.regs"], [218, "module-neural_compressor.compression.pruner.schedulers"], [219, "module-neural_compressor.compression.pruner.tf_criteria"], [220, "module-neural_compressor.compression.pruner.utils"], [221, "module-neural_compressor.compression.pruner.wanda"], [222, "module-neural_compressor.compression.pruner.wanda.prune"], [223, "module-neural_compressor.compression.pruner.wanda.utils"], [224, "module-neural_compressor.compression.pruner.wanda.wrapper"], [225, "module-neural_compressor.conf.config"], [226, "module-neural_compressor.conf.dotdict"], [227, "module-neural_compressor.conf"], [228, "module-neural_compressor.conf.pythonic_config"], [229, "module-neural_compressor.config"], [230, "module-neural_compressor.contrib"], [231, "module-neural_compressor.contrib.strategy"], [232, "module-neural_compressor.contrib.strategy.sigopt"], [233, "module-neural_compressor.contrib.strategy.tpe"], [234, "module-neural_compressor.data.dataloaders.base_dataloader"], [235, "module-neural_compressor.data.dataloaders.dataloader"], [236, "module-neural_compressor.data.dataloaders.default_dataloader"], [237, "module-neural_compressor.data.dataloaders.fetcher"], [238, "module-neural_compressor.data.dataloaders"], [239, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [240, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [241, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [242, "module-neural_compressor.data.dataloaders.sampler"], [243, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [244, "module-neural_compressor.data.datasets.bert_dataset"], [245, "module-neural_compressor.data.datasets.coco_dataset"], [246, "module-neural_compressor.data.datasets.dataset"], [247, "module-neural_compressor.data.datasets.dummy_dataset"], [248, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [249, "module-neural_compressor.data.datasets.imagenet_dataset"], [250, "module-neural_compressor.data.datasets"], [251, "module-neural_compressor.data.datasets.style_transfer_dataset"], [252, "module-neural_compressor.data.filters.coco_filter"], [253, "module-neural_compressor.data.filters.filter"], [254, "module-neural_compressor.data.filters"], [255, "module-neural_compressor.data"], [256, "module-neural_compressor.data.transforms.coco_transform"], [257, "module-neural_compressor.data.transforms.imagenet_transform"], [258, "module-neural_compressor.data.transforms"], [259, "module-neural_compressor.data.transforms.postprocess"], [260, "module-neural_compressor.data.transforms.tokenization"], [261, "module-neural_compressor.data.transforms.transform"], [262, "module-neural_compressor.experimental.benchmark"], [263, "module-neural_compressor.experimental.common.criterion"], [264, "module-neural_compressor.experimental.common.dataloader"], [265, "module-neural_compressor.experimental.common"], [266, "module-neural_compressor.experimental.common.metric"], [267, "module-neural_compressor.experimental.common.model"], [268, "module-neural_compressor.experimental.common.optimizer"], [269, "module-neural_compressor.experimental.common.postprocess"], [270, "module-neural_compressor.experimental.common.torch_utils"], [271, "module-neural_compressor.experimental.component"], [272, "module-neural_compressor.experimental.compression"], [273, "module-neural_compressor.experimental.contrib"], [274, "module-neural_compressor.experimental.contrib.strategy"], [275, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [276, "module-neural_compressor.experimental.contrib.strategy.tpe"], [277, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [278, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [279, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [280, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [281, "module-neural_compressor.experimental.data.dataloaders"], [282, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [283, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [284, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [285, "module-neural_compressor.experimental.data.dataloaders.sampler"], [286, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [287, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [288, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [289, "module-neural_compressor.experimental.data.datasets.dataset"], [290, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [291, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [292, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [293, "module-neural_compressor.experimental.data.datasets"], [294, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [295, "module-neural_compressor.experimental.data.filters.coco_filter"], [296, "module-neural_compressor.experimental.data.filters.filter"], [297, "module-neural_compressor.experimental.data.filters"], [298, "module-neural_compressor.experimental.data"], [299, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [300, "module-neural_compressor.experimental.data.transforms"], [301, "module-neural_compressor.experimental.data.transforms.tokenization"], [302, "module-neural_compressor.experimental.data.transforms.transform"], [303, "module-neural_compressor.experimental.distillation"], [304, "module-neural_compressor.experimental.export"], [305, "module-neural_compressor.experimental.export.qlinear2qdq"], [306, "module-neural_compressor.experimental.export.tf2onnx"], [307, "module-neural_compressor.experimental.export.torch2onnx"], [308, "module-neural_compressor.experimental.graph_optimization"], [309, "module-neural_compressor.experimental"], [310, "module-neural_compressor.experimental.metric.bleu"], [311, "module-neural_compressor.experimental.metric.bleu_util"], [312, "module-neural_compressor.experimental.metric.coco_label_map"], [313, "module-neural_compressor.experimental.metric.coco_tools"], [314, "module-neural_compressor.experimental.metric.evaluate_squad"], [315, "module-neural_compressor.experimental.metric.f1"], [316, "module-neural_compressor.experimental.metric"], [317, "module-neural_compressor.experimental.metric.metric"], [318, "module-neural_compressor.experimental.mixed_precision"], [319, "module-neural_compressor.experimental.model_conversion"], [320, "module-neural_compressor.experimental.nas.basic_nas"], [321, "module-neural_compressor.experimental.nas.dynas"], [322, "module-neural_compressor.experimental.nas"], [323, "module-neural_compressor.experimental.nas.nas"], [324, "module-neural_compressor.experimental.nas.nas_utils"], [325, "module-neural_compressor.experimental.nas.search_algorithms"], [326, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [327, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [328, "module-neural_compressor.experimental.pruner_legacy"], [329, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [330, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [331, "module-neural_compressor.experimental.pruner_legacy.pruner"], [332, "module-neural_compressor.experimental.pruning"], [333, "module-neural_compressor.experimental.pruning_recipes"], [334, "module-neural_compressor.experimental.pruning_recipes.patterns"], [335, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [336, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [337, "module-neural_compressor.experimental.pruning_v2"], [338, "module-neural_compressor.experimental.pytorch_pruner"], [339, "module-neural_compressor.experimental.pytorch_pruner.logger"], [340, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [341, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [342, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [343, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [344, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [345, "module-neural_compressor.experimental.quantization"], [346, "module-neural_compressor.experimental.scheduler"], [347, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [348, "module-neural_compressor.experimental.strategy.basic"], [349, "module-neural_compressor.experimental.strategy.bayesian"], [350, "module-neural_compressor.experimental.strategy.exhaustive"], [351, "module-neural_compressor.experimental.strategy"], [352, "module-neural_compressor.experimental.strategy.mse"], [353, "module-neural_compressor.experimental.strategy.mse_v2"], [354, "module-neural_compressor.experimental.strategy.random"], [355, "module-neural_compressor.experimental.strategy.strategy"], [356, "module-neural_compressor.experimental.strategy.utils.constant"], [357, "module-neural_compressor.experimental.strategy.utils"], [358, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [359, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [360, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [361, "module-neural_compressor.experimental.strategy.utils.utility"], [362, "module-neural_compressor"], [363, "module-neural_compressor.metric.bleu"], [364, "module-neural_compressor.metric.bleu_util"], [365, "module-neural_compressor.metric.coco_label_map"], [366, "module-neural_compressor.metric.coco_tools"], [367, "module-neural_compressor.metric.evaluate_squad"], [368, "module-neural_compressor.metric.f1"], [369, "module-neural_compressor.metric"], [370, "module-neural_compressor.metric.metric"], [371, "module-neural_compressor.mix_precision"], [372, "module-neural_compressor.model.base_model"], [373, "module-neural_compressor.model"], [374, "module-neural_compressor.model.keras_model"], [375, "module-neural_compressor.model.model"], [376, "module-neural_compressor.model.mxnet_model"], [377, "module-neural_compressor.model.nets_factory"], [378, "module-neural_compressor.model.onnx_model"], [379, "module-neural_compressor.model.tensorflow_model"], [380, "module-neural_compressor.model.torch_model"], [381, "module-neural_compressor.objective"], [382, "module-neural_compressor.onnxrt.algorithms"], [383, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"], [384, "module-neural_compressor.onnxrt.algorithms.smoother.core"], [385, "module-neural_compressor.onnxrt.algorithms.smoother"], [386, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"], [387, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"], [388, "module-neural_compressor.onnxrt.algorithms.weight_only"], [389, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"], [390, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"], [391, "module-neural_compressor.onnxrt"], [392, "module-neural_compressor.onnxrt.quantization.algorithm_entry"], [393, "module-neural_compressor.onnxrt.quantization.autotune"], [394, "module-neural_compressor.onnxrt.quantization.calibrate"], [395, "module-neural_compressor.onnxrt.quantization.config"], [396, "module-neural_compressor.onnxrt.quantization"], [397, "module-neural_compressor.onnxrt.quantization.quantize"], [398, "module-neural_compressor.onnxrt.utils"], [399, "module-neural_compressor.onnxrt.utils.onnx_model"], [400, "module-neural_compressor.onnxrt.utils.utility"], [401, "module-neural_compressor.profiling"], [402, "module-neural_compressor.profiling.parser.factory"], [403, "module-neural_compressor.profiling.parser"], [404, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [405, "module-neural_compressor.profiling.parser.onnx_parser"], [406, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [407, "module-neural_compressor.profiling.parser.parser"], [408, "module-neural_compressor.profiling.parser.result"], [409, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [410, "module-neural_compressor.profiling.parser.tensorflow_parser"], [411, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [412, "module-neural_compressor.profiling.profiler.factory"], [413, "module-neural_compressor.profiling.profiler"], [414, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [415, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [416, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [417, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [418, "module-neural_compressor.profiling.profiler.profiler"], [419, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [420, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [421, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [422, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [423, "module-neural_compressor.quantization"], [424, "module-neural_compressor.strategy.auto"], [425, "module-neural_compressor.strategy.auto_mixed_precision"], [426, "module-neural_compressor.strategy.basic"], [427, "module-neural_compressor.strategy.bayesian"], [428, "module-neural_compressor.strategy.conservative"], [429, "module-neural_compressor.strategy.exhaustive"], [430, "module-neural_compressor.strategy.hawq_v2"], [431, "module-neural_compressor.strategy"], [432, "module-neural_compressor.strategy.mse"], [433, "module-neural_compressor.strategy.mse_v2"], [434, "module-neural_compressor.strategy.random"], [435, "module-neural_compressor.strategy.strategy"], [436, "module-neural_compressor.strategy.utils.constant"], [437, "module-neural_compressor.strategy.utils"], [438, "module-neural_compressor.strategy.utils.tuning_sampler"], [439, "module-neural_compressor.strategy.utils.tuning_space"], [440, "module-neural_compressor.strategy.utils.tuning_structs"], [441, "module-neural_compressor.strategy.utils.utility"], [442, "module-neural_compressor.template.api_doc_example"], [443, "module-neural_compressor.template"], [444, "module-neural_compressor.tensorflow.algorithms"], [445, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [446, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [447, "module-neural_compressor.tensorflow.algorithms.smoother"], [448, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [449, "module-neural_compressor.tensorflow.algorithms.static_quant"], [450, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d"], [452, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense"], [453, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d"], [454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils"], [455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d"], [456, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer"], [457, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d"], [458, "module-neural_compressor.tensorflow"], [459, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [460, "module-neural_compressor.tensorflow.quantization.config"], [461, "module-neural_compressor.tensorflow.quantization"], [462, "module-neural_compressor.tensorflow.quantization.quantize"], [463, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [464, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [465, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [466, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [467, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [468, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [469, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [470, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [498, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [499, "module-neural_compressor.tensorflow.quantization.utils"], [500, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [501, "module-neural_compressor.tensorflow.quantization.utils.utility"], [502, "module-neural_compressor.tensorflow.utils.constants"], [503, "module-neural_compressor.tensorflow.utils.data"], [504, "module-neural_compressor.tensorflow.utils"], [505, "module-neural_compressor.tensorflow.utils.model"], [506, "module-neural_compressor.tensorflow.utils.model_wrappers"], [507, "module-neural_compressor.tensorflow.utils.nets_factory"], [508, "module-neural_compressor.tensorflow.utils.utility"], [509, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"], [510, "module-neural_compressor.torch.algorithms.habana_fp8"], [511, "module-neural_compressor.torch.algorithms.habana_fp8.modules"], [512, "module-neural_compressor.torch.algorithms.habana_fp8.observer"], [513, "module-neural_compressor.torch.algorithms"], [514, "module-neural_compressor.torch.algorithms.layer_wise"], [515, "module-neural_compressor.torch.algorithms.layer_wise.load"], [516, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"], [517, "module-neural_compressor.torch.algorithms.layer_wise.utils"], [518, "module-neural_compressor.torch.algorithms.weight_only.awq"], [519, "module-neural_compressor.torch.algorithms.weight_only.gptq"], [520, "module-neural_compressor.torch.algorithms.weight_only"], [521, "module-neural_compressor.torch.algorithms.weight_only.modules"], [522, "module-neural_compressor.torch.algorithms.weight_only.rtn"], [523, "module-neural_compressor.torch.algorithms.weight_only.utility"], [524, "module-neural_compressor.torch.amp.autocast"], [525, "module-neural_compressor.torch.amp.fp8.functions"], [526, "module-neural_compressor.torch.amp.fp8"], [527, "module-neural_compressor.torch.amp"], [528, "module-neural_compressor.torch"], [529, "module-neural_compressor.torch.quantization.algorithm_entry"], [530, "module-neural_compressor.torch.quantization.autotune"], [531, "module-neural_compressor.torch.quantization.config"], [532, "module-neural_compressor.torch.quantization"], [533, "module-neural_compressor.torch.quantization.modules"], [534, "module-neural_compressor.torch.quantization.quantize"], [535, "module-neural_compressor.torch.utils.constants"], [536, "module-neural_compressor.torch.utils.environ"], [537, "module-neural_compressor.torch.utils"], [538, "module-neural_compressor.torch.utils.utility"], [539, "module-neural_compressor.training"], [540, "module-neural_compressor.utils.collect_layer_histogram"], [541, "module-neural_compressor.utils.constant"], [542, "module-neural_compressor.utils.create_obj_from_config"], [543, "module-neural_compressor.utils"], [544, "module-neural_compressor.utils.kl_divergence"], [545, "module-neural_compressor.utils.load_huggingface"], [546, "module-neural_compressor.utils.logger"], [547, "module-neural_compressor.utils.neural_insights_utils"], [548, "module-neural_compressor.utils.options"], [549, "module-neural_compressor.utils.pytorch"], [550, "module-neural_compressor.utils.utility"], [551, "module-neural_compressor.utils.weights_details"], [552, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryDirect8BitOperator"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceminmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceMinMaxOperator"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unarydirect8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryDirect8BitOperator"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_node_original_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_node_original_name"]], "infer_shapes() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.infer_shapes"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "simple_progress_bar() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.simple_progress_bar"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_blob_size() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_blob_size"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.make_matmul_weight_only_node"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "pad_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.pad_tensor"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "quant_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.quant_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScalerLLM"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "parse_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.parse_saved_model"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "autoadamround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoAdamRound"]], "autooptround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoOPTRound"]], "autoround (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.AutoRound"]], "saveinputs (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.SaveInputs"]], "wrappermultiblock (class in neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.WrapperMultiblock"]], "block_forward() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.block_forward"]], "check_is_cpu() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.check_is_cpu"]], "collect_minmax_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_minmax_scale"]], "collect_round_v() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.collect_round_v"]], "get_batch_dim() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_batch_dim"]], "get_block_names() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_block_names"]], "get_dataloader() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_dataloader"]], "get_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_module"]], "get_scale_shape() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_scale_shape"]], "get_tokenizer_function() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.get_tokenizer_function"]], "move_input_to_device() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.move_input_to_device"]], "neural_compressor.adaptor.torch_utils.autoround.autoround": [[149, "module-neural_compressor.adaptor.torch_utils.autoround.autoround"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight"]], "quant_weight_actor() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_actor"]], "quant_weight_asym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_asym"]], "quant_weight_sym() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_sym"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.quant_weight_w_scale"]], "round_ste() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.round_ste"]], "sampling_inputs() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.sampling_inputs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.set_module"]], "unwrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.unwrapper_block"]], "wrapper_block() (in module neural_compressor.adaptor.torch_utils.autoround.autoround)": [[149, "neural_compressor.adaptor.torch_utils.autoround.autoround.wrapper_block"]], "export_compressed_model() (in module neural_compressor.adaptor.torch_utils.autoround.export)": [[150, "neural_compressor.adaptor.torch_utils.autoround.export.export_compressed_model"]], "neural_compressor.adaptor.torch_utils.autoround.export": [[150, "module-neural_compressor.adaptor.torch_utils.autoround.export"]], "neural_compressor.adaptor.torch_utils.autoround": [[151, "module-neural_compressor.adaptor.torch_utils.autoround"]], "neural_compressor.adaptor.torch_utils.autoround.model_wrapper": [[152, "module-neural_compressor.adaptor.torch_utils.autoround.model_wrapper"]], "sgd (class in neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.SGD"]], "neural_compressor.adaptor.torch_utils.autoround.sign_sgd": [[153, "module-neural_compressor.adaptor.torch_utils.autoround.sign_sgd"]], "sgd() (in module neural_compressor.adaptor.torch_utils.autoround.sign_sgd)": [[153, "neural_compressor.adaptor.torch_utils.autoround.sign_sgd.sgd"]], "actawareweightquant (class in neural_compressor.adaptor.torch_utils.awq)": [[154, "neural_compressor.adaptor.torch_utils.awq.ActAwareWeightQuant"]], "neural_compressor.adaptor.torch_utils.awq": [[154, "module-neural_compressor.adaptor.torch_utils.awq"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[155, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[155, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[156, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[156, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[157, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[157, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[158, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[159, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"], [516, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PickleError"]], "picklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"], [516, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.PicklingError"]], "unpicklingerror": [[160, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"], [516, "neural_compressor.torch.algorithms.layer_wise.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[160, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[161, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[161, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[162, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[162, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_module"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[163, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[163, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[164, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[164, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.MulLinear"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[165, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[165, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[166, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[166, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[167, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[167, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[168, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[168, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[169, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[169, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "calibration() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.calibration"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "forward_wrapper() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.forward_wrapper"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_absorb_layers() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_block_prefix"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_hidden_states() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_hidden_states"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_module_input_output"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "move_input_device() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.move_input_device"]], "neural_compressor.adaptor.torch_utils.util": [[170, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[170, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[171, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.quantize_4bit"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "search_clip() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.search_clip"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[171, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[172, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[172, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[173, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[173, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[174, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[175, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[175, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[176, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[176, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[177, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[177, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.ComposableConfig"]], "neural_compressor.common.base_config": [[178, "module-neural_compressor.common.base_config"]], "register_config() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[178, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "evaluator (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.Evaluator"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningConfig"]], "tuninglogger (class in neural_compressor.common.base_tuning)": [[179, "neural_compressor.common.base_tuning.TuningLogger"]], "neural_compressor.common.base_tuning": [[179, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[180, "module-neural_compressor.common"]], "neural_compressor.common.utils.constants": [[181, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[182, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[183, "neural_compressor.common.utils.logger.Logger"]], "neural_compressor.common.utils.logger": [[183, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.utility": [[184, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[184, "neural_compressor.common.utils.utility.set_workspace"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[185, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[185, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[185, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[186, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[186, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[187, "module-neural_compressor.compression.distillation"]], "optimizers (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.Optimizers"]], "pytorchoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.TensorflowOptimizers"]], "neural_compressor.compression.distillation.optimizers": [[188, "module-neural_compressor.compression.distillation.optimizers"]], "optimizer_registry() (in module neural_compressor.compression.distillation.optimizers)": [[188, "neural_compressor.compression.distillation.optimizers.optimizer_registry"]], "get_activation() (in module neural_compressor.compression.distillation.utility)": [[189, "neural_compressor.compression.distillation.utility.get_activation"]], "neural_compressor.compression.distillation.utility": [[189, "module-neural_compressor.compression.distillation.utility"]], "record_output() (in module neural_compressor.compression.distillation.utility)": [[189, "neural_compressor.compression.distillation.utility.record_output"]], "neural_compressor.compression.hpo": [[190, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[191, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[192, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[192, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[193, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[193, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[194, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[195, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[195, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[195, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "dsnot() (in module neural_compressor.compression.pruner.dsnot)": [[196, "neural_compressor.compression.pruner.dsnot.DSnoT"]], "neural_compressor.compression.pruner.dsnot": [[196, "module-neural_compressor.compression.pruner.dsnot"]], "return_reorder_indice() (in module neural_compressor.compression.pruner.dsnot)": [[196, "neural_compressor.compression.pruner.dsnot.return_reorder_indice"]], "neural_compressor.compression.pruner": [[197, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[197, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[197, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[198, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[198, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[199, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[200, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[200, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[201, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[201, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[202, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[202, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[202, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[203, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[203, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[204, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[204, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[204, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[204, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[205, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[205, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[205, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[205, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[206, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[206, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[206, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[206, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[206, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[207, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[207, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[207, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[208, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[208, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[209, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[209, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[210, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[210, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[210, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[211, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[211, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[212, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[212, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[213, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[213, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[214, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[214, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[215, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[215, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[216, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[216, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[216, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[217, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[217, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[217, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[217, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[218, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[218, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[218, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[219, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[219, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[219, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[219, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[220, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[220, "neural_compressor.compression.pruner.utils.update_params"]], "neural_compressor.compression.pruner.wanda": [[221, "module-neural_compressor.compression.pruner.wanda"]], "neural_compressor.compression.pruner.wanda.prune": [[222, "module-neural_compressor.compression.pruner.wanda.prune"]], "prune_wanda() (in module neural_compressor.compression.pruner.wanda.prune)": [[222, "neural_compressor.compression.pruner.wanda.prune.prune_wanda"]], "find_layers() (in module neural_compressor.compression.pruner.wanda.utils)": [[223, "neural_compressor.compression.pruner.wanda.utils.find_layers"]], "neural_compressor.compression.pruner.wanda.utils": [[223, "module-neural_compressor.compression.pruner.wanda.utils"]], "wrappedgpt (class in neural_compressor.compression.pruner.wanda.wrapper)": [[224, "neural_compressor.compression.pruner.wanda.wrapper.WrappedGPT"]], "neural_compressor.compression.pruner.wanda.wrapper": [[224, "module-neural_compressor.compression.pruner.wanda.wrapper"]], "benchmark_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[225, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[225, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[226, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[226, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[226, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[226, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[227, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[228, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[228, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[229, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[229, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[229, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[229, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[229, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[229, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[229, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[229, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[229, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[229, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[229, "module-neural_compressor.config"]], "neural_compressor.contrib": [[230, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[231, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[232, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[232, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[233, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[233, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[234, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[234, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[235, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[235, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[235, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[236, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[236, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[236, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[237, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[237, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[237, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[237, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[238, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[239, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[239, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[240, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[240, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[241, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[241, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[242, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[242, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[243, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[243, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[244, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[244, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[245, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[245, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[246, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[246, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[247, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[247, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[248, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[248, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[249, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[249, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[250, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[251, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[251, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[252, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[252, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[252, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[253, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[253, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[254, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[255, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[256, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[256, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[257, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[257, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[258, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[259, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[259, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[260, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[260, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TRANSFORMS"], [261, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[261, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[261, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[262, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[262, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[263, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[263, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[264, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[264, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[265, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[266, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[266, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[267, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[267, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[267, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[268, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[268, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[269, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[269, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[270, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[270, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[270, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[271, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[271, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[272, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[273, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[274, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[275, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[275, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[276, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[276, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[277, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[277, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[278, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[279, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[279, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[280, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[280, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[280, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[280, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[281, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[282, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[282, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[283, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[283, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[283, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[284, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[284, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[285, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[285, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[286, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[286, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[287, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[287, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[288, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[288, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[289, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[289, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[290, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[290, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[291, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[291, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[291, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[292, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[292, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[293, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[294, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[294, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[295, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[295, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[295, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[296, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[296, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[297, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[298, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[299, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[299, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[300, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[301, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[301, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [302, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[302, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[302, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[303, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[303, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[303, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[304, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[305, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[305, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[305, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[306, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[306, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[306, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[307, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[307, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[308, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[308, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[309, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[310, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[310, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[310, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[310, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[310, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[311, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[311, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[312, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[313, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[313, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[313, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[314, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[314, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[315, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[315, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[316, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[317, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[317, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[317, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[317, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[317, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[317, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[317, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[317, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[317, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[317, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[317, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[317, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[317, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[317, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[317, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[317, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[318, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[318, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[319, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[319, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[320, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[320, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[321, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[321, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[322, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[323, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[323, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[323, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[324, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[324, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[324, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[324, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[325, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[325, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[326, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[326, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[327, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[327, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[328, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[329, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[329, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[330, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[330, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[331, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[331, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[331, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[332, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[332, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[332, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[332, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[332, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[333, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[334, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[335, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[335, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[336, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[336, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[337, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[337, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[337, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[337, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[337, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[338, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[339, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[340, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[340, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[341, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[341, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[342, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[342, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[343, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[343, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[344, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[344, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[345, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[345, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[346, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[346, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[347, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[347, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[348, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[348, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[349, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[349, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[350, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[350, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[351, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[352, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[352, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[353, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[353, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[354, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[354, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[355, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[355, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[355, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[356, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[357, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[358, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[358, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[359, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[359, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[360, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[360, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[361, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[361, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[362, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[363, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[363, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[363, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[363, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[363, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[363, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[363, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[363, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[363, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[364, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[364, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[365, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[366, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[366, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[366, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[366, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[367, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[367, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[368, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[368, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[369, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[370, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[370, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[370, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[370, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[370, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[370, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[370, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[370, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[370, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[370, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[370, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[370, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[370, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[370, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[370, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[370, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[370, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[370, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[370, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[370, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[370, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[370, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[370, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[370, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[370, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[370, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[371, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[371, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[372, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[372, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[373, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[374, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[374, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[375, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[375, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[375, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[376, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[376, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[377, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[377, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[378, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[378, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[379, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[379, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[380, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[380, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[381, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[381, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[381, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[381, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[381, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[381, "neural_compressor.objective.objective_registry"]], "neural_compressor.onnxrt.algorithms": [[382, "module-neural_compressor.onnxrt.algorithms"]], "calibrator (class in neural_compressor.onnxrt.algorithms.smoother.calibrator)": [[383, "neural_compressor.onnxrt.algorithms.smoother.calibrator.Calibrator"]], "neural_compressor.onnxrt.algorithms.smoother.calibrator": [[383, "module-neural_compressor.onnxrt.algorithms.smoother.calibrator"]], "smoother (class in neural_compressor.onnxrt.algorithms.smoother.core)": [[384, "neural_compressor.onnxrt.algorithms.smoother.core.Smoother"]], "neural_compressor.onnxrt.algorithms.smoother.core": [[384, "module-neural_compressor.onnxrt.algorithms.smoother.core"]], "neural_compressor.onnxrt.algorithms.smoother": [[385, "module-neural_compressor.onnxrt.algorithms.smoother"]], "apply_awq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[386, "neural_compressor.onnxrt.algorithms.weight_only.awq.apply_awq_on_model"]], "awq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.awq)": [[386, "neural_compressor.onnxrt.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.awq": [[386, "module-neural_compressor.onnxrt.algorithms.weight_only.awq"]], "apply_gptq_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[387, "neural_compressor.onnxrt.algorithms.weight_only.gptq.apply_gptq_on_model"]], "gptq_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.gptq)": [[387, "neural_compressor.onnxrt.algorithms.weight_only.gptq.gptq_quantize"]], "neural_compressor.onnxrt.algorithms.weight_only.gptq": [[387, "module-neural_compressor.onnxrt.algorithms.weight_only.gptq"]], "neural_compressor.onnxrt.algorithms.weight_only": [[388, "module-neural_compressor.onnxrt.algorithms.weight_only"]], "apply_rtn_on_model() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[389, "neural_compressor.onnxrt.algorithms.weight_only.rtn.apply_rtn_on_model"]], "neural_compressor.onnxrt.algorithms.weight_only.rtn": [[389, "module-neural_compressor.onnxrt.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.onnxrt.algorithms.weight_only.rtn)": [[389, "neural_compressor.onnxrt.algorithms.weight_only.rtn.rtn_quantize"]], "make_matmul_weight_only_node() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.make_matmul_weight_only_node"]], "neural_compressor.onnxrt.algorithms.weight_only.utility": [[390, "module-neural_compressor.onnxrt.algorithms.weight_only.utility"]], "pad_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.pad_tensor"]], "prepare_inputs() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.qdq_tensor"]], "quant_tensor() (in module neural_compressor.onnxrt.algorithms.weight_only.utility)": [[390, "neural_compressor.onnxrt.algorithms.weight_only.utility.quant_tensor"]], "neural_compressor.onnxrt": [[391, "module-neural_compressor.onnxrt"]], "awq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.awq_quantize_entry"]], "gptq_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.gptq_quantize_entry"]], "neural_compressor.onnxrt.quantization.algorithm_entry": [[392, "module-neural_compressor.onnxrt.quantization.algorithm_entry"]], "rtn_quantize_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.rtn_quantize_entry"]], "smooth_quant_entry() (in module neural_compressor.onnxrt.quantization.algorithm_entry)": [[392, "neural_compressor.onnxrt.quantization.algorithm_entry.smooth_quant_entry"]], "autotune() (in module neural_compressor.onnxrt.quantization.autotune)": [[393, "neural_compressor.onnxrt.quantization.autotune.autotune"]], "neural_compressor.onnxrt.quantization.autotune": [[393, "module-neural_compressor.onnxrt.quantization.autotune"]], "calibrationdatareader (class in neural_compressor.onnxrt.quantization.calibrate)": [[394, "neural_compressor.onnxrt.quantization.calibrate.CalibrationDataReader"]], "neural_compressor.onnxrt.quantization.calibrate": [[394, "module-neural_compressor.onnxrt.quantization.calibrate"]], "awqconfig (class in neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.AWQConfig"]], "gptqconfig (class in neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.RTNConfig"]], "smoohquantconfig (class in neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.SmoohQuantConfig"]], "get_default_awq_config() (in module neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.get_default_awq_config"]], "get_default_gptq_config() (in module neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.onnxrt.quantization.config)": [[395, "neural_compressor.onnxrt.quantization.config.get_default_sq_config"]], "neural_compressor.onnxrt.quantization.config": [[395, "module-neural_compressor.onnxrt.quantization.config"]], "neural_compressor.onnxrt.quantization": [[396, "module-neural_compressor.onnxrt.quantization"]], "neural_compressor.onnxrt.quantization.quantize": [[397, "module-neural_compressor.onnxrt.quantization.quantize"]], "neural_compressor.onnxrt.utils": [[398, "module-neural_compressor.onnxrt.utils"]], "onnxmodel (class in neural_compressor.onnxrt.utils.onnx_model)": [[399, "neural_compressor.onnxrt.utils.onnx_model.ONNXModel"]], "neural_compressor.onnxrt.utils.onnx_model": [[399, "module-neural_compressor.onnxrt.utils.onnx_model"]], "find_by_name() (in module neural_compressor.onnxrt.utils.utility)": [[400, "neural_compressor.onnxrt.utils.utility.find_by_name"]], "get_qrange_for_qtype() (in module neural_compressor.onnxrt.utils.utility)": [[400, "neural_compressor.onnxrt.utils.utility.get_qrange_for_qType"]], "is_b_transposed() (in module neural_compressor.onnxrt.utils.utility)": [[400, "neural_compressor.onnxrt.utils.utility.is_B_transposed"]], "neural_compressor.onnxrt.utils.utility": [[400, "module-neural_compressor.onnxrt.utils.utility"]], "quantize_data() (in module neural_compressor.onnxrt.utils.utility)": [[400, "neural_compressor.onnxrt.utils.utility.quantize_data"]], "register_algo() (in module neural_compressor.onnxrt.utils.utility)": [[400, "neural_compressor.onnxrt.utils.utility.register_algo"]], "simple_progress_bar() (in module neural_compressor.onnxrt.utils.utility)": [[400, "neural_compressor.onnxrt.utils.utility.simple_progress_bar"]], "neural_compressor.profiling": [[401, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[402, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[402, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[403, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[404, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[404, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[405, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[406, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[406, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[407, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[407, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[408, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[408, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[409, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[409, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[410, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[411, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[411, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[412, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[412, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[413, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[414, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[414, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[415, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[416, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[416, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[417, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[417, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[418, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[418, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[419, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[419, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[420, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[421, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[421, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[422, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[422, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[422, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[422, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[423, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[423, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[424, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[424, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[425, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[425, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[426, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[426, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[427, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[427, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[427, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[427, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[427, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[428, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[428, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[429, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[429, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[430, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[430, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[431, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[432, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[432, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[433, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[433, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[434, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[434, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[435, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[435, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[435, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[435, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[436, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[437, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[438, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[438, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[439, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[439, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[439, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[439, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[439, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[439, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[439, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[440, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[440, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[441, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[441, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[442, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[442, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[442, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[442, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[442, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[443, "module-neural_compressor.template"]], "neural_compressor.tensorflow.algorithms": [[444, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[445, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[445, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[445, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[446, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[446, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[447, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[448, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[448, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[448, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[449, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[450, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[450, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[450, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[450, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d": [[451, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense": [[452, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.dense"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d": [[453, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.depthwise_conv2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils": [[454, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d": [[455, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.pool2d"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer": [[456, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.quantizer"]], "neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d": [[457, "module-neural_compressor.tensorflow.algorithms.static_quant.keras_utils.separable_conv2d"]], "neural_compressor.tensorflow": [[458, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[459, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "static_quantize_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[459, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quantize_entry"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[460, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[460, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.quantization.config)": [[460, "neural_compressor.tensorflow.quantization.config.get_all_registered_configs"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[460, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[460, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[460, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[461, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[462, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[462, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[463, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[463, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[464, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[464, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[465, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[465, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[466, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[466, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[467, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[467, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[468, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[468, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[469, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[469, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[470, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[470, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[471, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[471, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[472, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[472, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[473, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[473, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[474, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[474, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[475, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[475, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[476, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[476, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[477, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[477, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[478, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[478, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[479, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[479, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[480, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[480, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[481, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[481, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[482, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[482, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[483, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[483, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[484, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[484, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[485, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[485, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[486, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[487, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[487, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[488, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[488, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[489, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[489, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[490, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[490, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[491, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[491, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[492, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[492, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[493, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[493, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[494, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[494, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[495, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[495, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[496, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[496, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[497, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[498, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[498, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[499, "module-neural_compressor.tensorflow.quantization.utils"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[500, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[500, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "disable_random() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[501, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.tf_diagnosis_helper"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[501, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[502, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[503, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[503, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[503, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "neural_compressor.tensorflow.utils.data": [[503, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[504, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[505, "neural_compressor.tensorflow.utils.model.Model"]], "neural_compressor.tensorflow.utils.model": [[505, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[506, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[506, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.nets_factory)": [[507, "neural_compressor.tensorflow.utils.nets_factory.TFSlimNetsFactory"]], "neural_compressor.tensorflow.utils.nets_factory": [[507, "module-neural_compressor.tensorflow.utils.nets_factory"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.Dequantize"]], "lazyimport (class in neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.LazyImport"]], "statistics (class in neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.deep_get"]], "dequantize_weight() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.dequantize_weight"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_data_to_local() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "load_data_from_pkl() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.load_data_from_pkl"]], "neural_compressor.tensorflow.utils.utility": [[508, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.singleton"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[508, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.algorithms.habana_fp8.fp8_quant": [[509, "module-neural_compressor.torch.algorithms.habana_fp8.fp8_quant"]], "neural_compressor.torch.algorithms.habana_fp8": [[510, "module-neural_compressor.torch.algorithms.habana_fp8"]], "neural_compressor.torch.algorithms.habana_fp8.modules": [[511, "module-neural_compressor.torch.algorithms.habana_fp8.modules"]], "neural_compressor.torch.algorithms.habana_fp8.observer": [[512, "module-neural_compressor.torch.algorithms.habana_fp8.observer"]], "neural_compressor.torch.algorithms": [[513, "module-neural_compressor.torch.algorithms"]], "neural_compressor.torch.algorithms.layer_wise": [[514, "module-neural_compressor.torch.algorithms.layer_wise"]], "load() (in module neural_compressor.torch.algorithms.layer_wise.load)": [[515, "neural_compressor.torch.algorithms.layer_wise.load.load"]], "neural_compressor.torch.algorithms.layer_wise.load": [[515, "module-neural_compressor.torch.algorithms.layer_wise.load"]], "neural_compressor.torch.algorithms.layer_wise.modified_pickle": [[516, "module-neural_compressor.torch.algorithms.layer_wise.modified_pickle"]], "dowload_hf_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.get_children"]], "get_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.get_module"]], "get_named_children() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.get_super_module_by_name"]], "load_empty_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.load_empty_model"]], "load_layer_wise_quantized_model() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.load_layer_wise_quantized_model"]], "load_tensor() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.load_tensor_from_shard"]], "neural_compressor.torch.algorithms.layer_wise.utils": [[517, "module-neural_compressor.torch.algorithms.layer_wise.utils"]], "update_module() (in module neural_compressor.torch.algorithms.layer_wise.utils)": [[517, "neural_compressor.torch.algorithms.layer_wise.utils.update_module"]], "actawareweightquant (class in neural_compressor.torch.algorithms.weight_only.awq)": [[518, "neural_compressor.torch.algorithms.weight_only.awq.ActAwareWeightQuant"]], "awq_quantize() (in module neural_compressor.torch.algorithms.weight_only.awq)": [[518, "neural_compressor.torch.algorithms.weight_only.awq.awq_quantize"]], "neural_compressor.torch.algorithms.weight_only.awq": [[518, "module-neural_compressor.torch.algorithms.weight_only.awq"]], "gptq (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.find_layers_name"]], "gptq_quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.gptq_quantize"]], "is_leaf() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.torch.algorithms.weight_only.gptq": [[519, "module-neural_compressor.torch.algorithms.weight_only.gptq"]], "quantize() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.torch.algorithms.weight_only.gptq)": [[519, "neural_compressor.torch.algorithms.weight_only.gptq.trace_gptq_target_blocks"]], "neural_compressor.torch.algorithms.weight_only": [[520, "module-neural_compressor.torch.algorithms.weight_only"]], "fakeaffinetensorquantfunction (class in neural_compressor.torch.algorithms.weight_only.modules)": [[521, "neural_compressor.torch.algorithms.weight_only.modules.FakeAffineTensorQuantFunction"]], "mullinear (class in neural_compressor.torch.algorithms.weight_only.modules)": [[521, "neural_compressor.torch.algorithms.weight_only.modules.MulLinear"]], "teqlinearfakequant (class in neural_compressor.torch.algorithms.weight_only.modules)": [[521, "neural_compressor.torch.algorithms.weight_only.modules.TEQLinearFakeQuant"]], "neural_compressor.torch.algorithms.weight_only.modules": [[521, "module-neural_compressor.torch.algorithms.weight_only.modules"]], "neural_compressor.torch.algorithms.weight_only.rtn": [[522, "module-neural_compressor.torch.algorithms.weight_only.rtn"]], "rtn_quantize() (in module neural_compressor.torch.algorithms.weight_only.rtn)": [[522, "neural_compressor.torch.algorithms.weight_only.rtn.rtn_quantize"]], "calibration() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.calibration"]], "fetch_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.fetch_module"]], "get_absorb_layers() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.get_absorb_layers"]], "get_block_prefix() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.get_block_prefix"]], "get_example_input() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.get_example_input"]], "get_hidden_states() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.get_hidden_states"]], "get_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.get_module"]], "get_module_input_output() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.get_module_input_output"]], "neural_compressor.torch.algorithms.weight_only.utility": [[523, "module-neural_compressor.torch.algorithms.weight_only.utility"]], "qdq_weight_actor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.qdq_weight_sym"]], "quant_tensor() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.quant_tensor"]], "quant_weight_w_scale() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.quant_weight_w_scale"]], "quantize_4bit() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.quantize_4bit"]], "search_clip() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.search_clip"]], "set_module() (in module neural_compressor.torch.algorithms.weight_only.utility)": [[523, "neural_compressor.torch.algorithms.weight_only.utility.set_module"]], "autocast (class in neural_compressor.torch.amp.autocast)": [[524, "neural_compressor.torch.amp.autocast.autocast"]], "neural_compressor.torch.amp.autocast": [[524, "module-neural_compressor.torch.amp.autocast"]], "neural_compressor.torch.amp.fp8.functions": [[525, "module-neural_compressor.torch.amp.fp8.functions"]], "neural_compressor.torch.amp.fp8": [[526, "module-neural_compressor.torch.amp.fp8"]], "neural_compressor.torch.amp": [[527, "module-neural_compressor.torch.amp"]], "neural_compressor.torch": [[528, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.algorithm_entry": [[529, "module-neural_compressor.torch.quantization.algorithm_entry"]], "rtn_entry() (in module neural_compressor.torch.quantization.algorithm_entry)": [[529, "neural_compressor.torch.quantization.algorithm_entry.rtn_entry"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[530, "neural_compressor.torch.quantization.autotune.autotune"]], "neural_compressor.torch.quantization.autotune": [[530, "module-neural_compressor.torch.quantization.autotune"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[531, "neural_compressor.torch.quantization.config.GPTQConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[531, "neural_compressor.torch.quantization.config.RTNConfig"]], "get_default_gptq_config() (in module neural_compressor.torch.quantization.config)": [[531, "neural_compressor.torch.quantization.config.get_default_gptq_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[531, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "neural_compressor.torch.quantization.config": [[531, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[532, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.modules": [[533, "module-neural_compressor.torch.quantization.modules"]], "neural_compressor.torch.quantization.quantize": [[534, "module-neural_compressor.torch.quantization.quantize"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[534, "neural_compressor.torch.quantization.quantize.quantize"]], "neural_compressor.torch.utils.constants": [[535, "module-neural_compressor.torch.utils.constants"]], "neural_compressor.torch.utils.environ": [[536, "module-neural_compressor.torch.utils.environ"]], "neural_compressor.torch.utils": [[537, "module-neural_compressor.torch.utils"]], "fetch_module() (in module neural_compressor.torch.utils.utility)": [[538, "neural_compressor.torch.utils.utility.fetch_module"]], "neural_compressor.torch.utils.utility": [[538, "module-neural_compressor.torch.utils.utility"]], "register_algo() (in module neural_compressor.torch.utils.utility)": [[538, "neural_compressor.torch.utils.utility.register_algo"]], "set_module() (in module neural_compressor.torch.utils.utility)": [[538, "neural_compressor.torch.utils.utility.set_module"]], "callbacks (class in neural_compressor.training)": [[539, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[539, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[539, "neural_compressor.training.fit"]], "neural_compressor.training": [[539, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[539, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[540, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[540, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[541, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[542, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[542, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[543, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[544, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[544, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[545, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[545, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[545, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[545, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[546, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[546, "neural_compressor.utils.logger.warning"]], "get_model_path() (in module neural_compressor.utils.neural_insights_utils)": [[547, "neural_compressor.utils.neural_insights_utils.get_model_path"]], "neural_compressor.utils.neural_insights_utils": [[547, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[547, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[547, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[547, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[548, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[548, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[549, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[549, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[549, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[549, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[549, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[550, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[550, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[551, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[551, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[551, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[552, "module-neural_compressor.version"]]}})