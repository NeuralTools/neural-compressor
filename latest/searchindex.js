Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/benchmark", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/benchmark.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Pythonic Style Access for Configurations", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 6, 22, 29, 36, 45, 56, 70, 76, 111, 114, 133, 135, 139, 150, 151, 155, 166, 169], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 36, 98, 103, 139, 160, 164, 168, 171], "sourc": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 110, 113, 148, 151, 158], "decor": [0, 6, 14, 36, 45, 56, 70, 91, 110, 111, 114, 169], "all": [0, 2, 5, 6, 10, 15, 22, 29, 36, 38, 41, 43, 45, 47, 56, 70, 76, 80, 84, 91, 97, 100, 103, 104, 106, 108, 109, 113, 114, 115, 116, 133, 134, 135, 139, 143, 147, 151, 156, 157, 158, 160, 162, 163, 166, 168, 169], "subclass": [0, 22, 29, 36, 45, 56, 70, 114], "paramet": [0, 5, 6, 7, 9, 13, 14, 15, 18, 19, 20, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 82, 83, 84, 87, 88, 90, 91, 95, 97, 98, 99, 102, 103, 105, 106, 110, 115, 134, 135, 137, 139, 146, 150, 151, 154, 157, 160, 161, 163, 165, 166, 168, 169, 171], "cl": [0, 14, 22, 29, 36, 45, 56, 70, 91, 133], "The": [0, 5, 6, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 28, 29, 36, 38, 39, 40, 42, 43, 45, 46, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 76, 77, 78, 80, 86, 87, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 114, 115, 116, 117, 119, 123, 126, 129, 131, 132, 133, 134, 135, 137, 139, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172], "str": [0, 6, 9, 13, 14, 15, 20, 21, 22, 29, 32, 36, 38, 39, 41, 43, 45, 73, 76, 80, 83, 84, 87, 91, 92, 99, 100, 103, 133, 134, 135, 150, 159, 167, 168], "registr": [0, 22, 29, 36], "name": [0, 5, 6, 7, 9, 13, 15, 20, 21, 22, 25, 29, 34, 36, 40, 45, 50, 54, 56, 58, 74, 76, 78, 80, 82, 83, 84, 91, 95, 98, 99, 100, 101, 109, 110, 116, 133, 135, 139, 141, 143, 148, 150, 151, 153, 154, 157, 160, 164, 165, 167, 169, 171, 172], "call": [0, 14, 41, 103, 106, 110, 111, 114, 134, 145, 157, 160, 166, 167, 168], "return": [0, 5, 6, 13, 14, 18, 19, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 84, 90, 91, 96, 100, 101, 104, 106, 110, 111, 115, 116, 134, 135, 139, 150, 153, 155, 157, 160, 163, 166, 167, 169], "type": [0, 6, 7, 9, 13, 14, 15, 20, 22, 29, 36, 38, 39, 41, 45, 54, 56, 62, 63, 70, 74, 76, 84, 90, 91, 95, 96, 97, 98, 99, 100, 101, 103, 114, 115, 135, 139, 141, 143, 146, 151, 152, 154, 160, 161, 163, 165, 168, 169, 170, 171], "build": [0, 1, 3, 4, 49, 51, 53, 54, 55, 103, 114, 115, 116, 147, 153, 158, 169], "dict": [0, 5, 13, 15, 18, 19, 40, 41, 42, 43, 45, 46, 54, 58, 73, 76, 77, 78, 80, 82, 84, 90, 91, 99, 100, 101, 110, 115, 133, 141, 150, 157, 159, 160, 166, 167, 169], "algorithmschedul": 0, "conf": [0, 5, 15, 18, 19, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 77, 110, 111, 113, 116, 131, 137, 144, 145, 151, 152, 153, 156, 160, 161, 162, 163, 165, 166, 169], "control": [0, 15, 110, 151, 157, 169], "differ": [0, 4, 6, 9, 10, 15, 22, 36, 45, 54, 56, 86, 99, 100, 103, 106, 108, 110, 111, 115, 134, 135, 137, 139, 140, 145, 146, 150, 151, 153, 155, 157, 160, 163, 166, 167, 168, 169], "phase": [0, 103, 106, 111, 151, 157, 160, 162, 169], "base": [0, 6, 7, 14, 15, 20, 22, 29, 36, 45, 47, 54, 55, 56, 67, 70, 74, 94, 96, 97, 99, 100, 104, 106, 111, 113, 114, 115, 116, 133, 135, 138, 139, 143, 151, 152, 157, 158, 160, 163, 165, 166, 167, 169, 172], "fastbiascorrect": [1, 4], "threshold": [1, 78, 86, 150], "2": [1, 3, 5, 7, 15, 21, 41, 43, 45, 56, 62, 91, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 110, 113, 114, 132, 134, 135, 137, 143, 146, 147, 148, 149, 150, 152, 154, 155, 157, 158, 160, 161, 163, 164, 165, 166, 168, 169, 170], "0": [1, 3, 6, 7, 15, 20, 23, 24, 27, 32, 36, 45, 56, 58, 63, 84, 87, 95, 96, 97, 99, 102, 104, 105, 106, 110, 113, 133, 134, 135, 137, 139, 141, 142, 143, 147, 148, 149, 150, 151, 152, 154, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 7, 15, 20, 21, 23, 24, 27, 28, 32, 36, 41, 42, 43, 45, 56, 58, 76, 80, 87, 91, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 113, 114, 116, 132, 134, 135, 137, 141, 143, 144, 147, 149, 150, 152, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171], "fetch": [2, 115, 135], "file": [2, 13, 15, 18, 19, 20, 21, 22, 25, 35, 36, 41, 46, 56, 58, 90, 91, 99, 105, 109, 111, 114, 115, 116, 139, 142, 145, 148, 150, 151, 153, 155, 159, 160, 163, 167, 168], "init": [2, 135, 150, 169], "fast_bias_correct": [2, 15, 160], "smooth_quant": [2, 15, 133, 160, 166], "weight_correct": [2, 15, 160], "smoothquant": [3, 97, 99, 100, 102, 106, 113, 149, 158, 163, 170], "alpha": [3, 106, 133, 160, 169], "5": [3, 7, 15, 24, 32, 45, 58, 97, 99, 102, 106, 114, 135, 141, 143, 147, 150, 151, 157, 159, 160, 163, 166, 168, 169, 171, 172], "fake": [3, 9, 76, 99, 106, 151, 160, 163, 166], "input": [3, 15, 18, 19, 20, 21, 22, 24, 32, 35, 36, 45, 46, 50, 54, 58, 77, 82, 83, 84, 87, 90, 91, 94, 98, 99, 100, 106, 111, 114, 115, 131, 132, 134, 135, 137, 138, 139, 141, 143, 145, 150, 151, 152, 153, 157, 159, 160, 163, 166, 167, 168, 171], "channel": [3, 4, 15, 32, 36, 87, 95, 97, 99, 113, 114, 116, 146, 147, 154, 157, 163, 168, 172], "quantiz": [3, 5, 7, 10, 12, 14, 15, 18, 19, 32, 37, 63, 65, 67, 76, 77, 78, 84, 86, 87, 90, 91, 96, 102, 104, 114, 121, 133, 134, 135, 139, 140, 143, 145, 146, 150, 153, 156, 158, 164, 167, 168, 169, 170, 171], "more": [3, 9, 36, 95, 96, 97, 99, 100, 103, 106, 111, 112, 113, 115, 132, 133, 135, 137, 139, 141, 144, 146, 147, 149, 151, 152, 154, 155, 156, 157, 162, 163, 166, 169, 170, 172], "detail": [3, 6, 36, 91, 92, 96, 97, 100, 101, 102, 103, 106, 108, 113, 115, 116, 132, 133, 137, 143, 144, 145, 149, 150, 151, 152, 157, 163, 164, 165, 166, 167, 169, 170], "pleas": [3, 15, 20, 21, 22, 25, 45, 58, 97, 98, 99, 100, 101, 102, 106, 110, 111, 112, 113, 114, 131, 132, 135, 138, 139, 141, 147, 149, 150, 152, 157, 160, 162, 163, 164, 165, 166, 169, 170], "refer": [3, 15, 20, 38, 39, 45, 58, 97, 98, 100, 101, 102, 103, 110, 113, 114, 115, 131, 134, 135, 138, 139, 141, 145, 147, 148, 150, 151, 152, 155, 159, 161, 164, 168, 169], "accur": [3, 98, 99, 106, 157, 163, 166], "effici": [3, 98, 99, 106, 111, 113, 132, 134, 137, 156, 157, 158, 163, 166, 169], "post": [3, 15, 18, 19, 58, 95, 97, 98, 99, 100, 102, 104, 106, 108, 113, 114, 115, 138, 139, 141, 146, 147, 154, 157, 158, 161, 163, 166, 167, 169], "train": [3, 15, 18, 19, 20, 22, 36, 37, 58, 80, 95, 96, 97, 98, 99, 100, 102, 104, 111, 113, 114, 115, 121, 135, 137, 138, 141, 146, 152, 154, 156, 158, 161, 163, 165, 166, 169, 171], "larg": [3, 95, 97, 99, 100, 102, 103, 106, 113, 134, 137, 151, 154, 158, 161, 163, 166, 172], "languag": [3, 38, 95, 97, 99, 100, 102, 103, 106, 108, 113, 141, 154, 158, 161, 163, 166], "model": [3, 5, 7, 9, 15, 18, 19, 20, 22, 36, 37, 45, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 77, 82, 83, 84, 87, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 111, 113, 114, 116, 121, 131, 132, 133, 134, 135, 137, 138, 139, 140, 145, 146, 148, 150, 152, 155, 156, 158, 160, 164, 165, 167, 168, 169, 170, 171], "spiq": [3, 106, 166], "data": [3, 14, 15, 18, 19, 37, 46, 58, 62, 74, 76, 77, 80, 84, 91, 94, 95, 96, 98, 99, 100, 103, 106, 113, 114, 132, 134, 135, 139, 143, 144, 147, 150, 151, 152, 154, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170], "free": [3, 18, 19, 58, 97, 102, 106, 108, 155, 165, 166], "per": [3, 5, 15, 86, 95, 97, 99, 105, 114, 116, 134, 154, 157, 162, 163, 172], "static": [3, 15, 58, 74, 84, 100, 114, 115, 116, 141, 146, 151, 161, 166, 169, 172], "For": [3, 7, 9, 13, 15, 22, 36, 42, 43, 45, 46, 58, 91, 97, 100, 101, 102, 106, 108, 110, 112, 114, 116, 137, 138, 139, 141, 143, 146, 157, 162, 163, 166, 167, 169, 171, 172], "torch": [3, 7, 13, 15, 46, 58, 84, 87, 90, 94, 95, 96, 97, 98, 99, 104, 106, 110, 113, 116, 117, 137, 139, 141, 151, 152, 153, 154, 160, 163, 166, 167], "backend": [3, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 68, 96, 99, 100, 110, 116, 139, 145, 146, 151, 152, 159, 163, 168, 169, 171], "we": [3, 4, 5, 7, 15, 38, 41, 65, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 114, 115, 116, 133, 134, 139, 141, 143, 149, 150, 151, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 169, 170], "onli": [3, 4, 5, 15, 20, 58, 68, 76, 84, 91, 96, 100, 104, 105, 114, 115, 116, 131, 132, 133, 134, 137, 139, 142, 143, 149, 151, 152, 157, 158, 159, 160, 161, 166, 167, 169, 170, 171], "handl": [3, 12, 88, 110, 112, 133, 134, 166], "layer": [3, 15, 78, 80, 91, 97, 98, 99, 100, 106, 113, 114, 115, 116, 138, 146, 157, 163, 164, 170], "whose": [3, 54, 145, 166, 169], "smooth": [3, 15, 100, 133, 157, 169], "scale": [3, 4, 32, 36, 94, 95, 97, 98, 99, 103, 106, 154, 160, 163, 165, 166, 168, 169], "could": [3, 18, 19, 22, 46, 58, 77, 96, 98, 99, 101, 103, 106, 108, 110, 138, 151, 156, 157, 160, 163, 166, 170], "absorb": [3, 99, 163], "support": [3, 6, 15, 18, 19, 20, 22, 29, 32, 36, 37, 45, 46, 50, 56, 58, 68, 74, 77, 80, 86, 87, 91, 93, 94, 98, 101, 104, 106, 113, 115, 133, 149, 151, 158, 162, 165, 169, 170], "other": [3, 43, 54, 95, 100, 103, 106, 108, 110, 115, 116, 133, 143, 146, 148, 151, 153, 154, 155, 157, 160, 166, 168, 169, 172], "later": [3, 94, 96, 133, 167], "onnx": [3, 15, 46, 53, 82, 83, 84, 89, 109, 113, 114, 115, 117, 134, 140, 141, 143, 144, 146, 152, 153, 154, 158, 159, 163, 166, 169], "insert": [3, 98, 99, 100, 102, 106, 110, 115, 134, 146, 151, 157, 160, 162, 163, 166, 167], "mul": [3, 99, 141, 163, 166], "befor": [3, 15, 20, 99, 106, 109, 116, 134, 135, 137, 138, 139, 142, 143, 151, 160, 163, 165, 167, 169], "conv": [3, 15, 110, 115, 116, 151, 157, 159, 160, 169], "linear": [3, 15, 97, 98, 99, 106, 110, 137, 141, 151, 157, 163, 166, 169], "op": [3, 15, 63, 65, 67, 74, 75, 76, 82, 84, 86, 91, 96, 97, 100, 106, 113, 114, 115, 116, 143, 151, 152, 157, 160, 162, 164, 166, 167, 169, 171], "fuse": [3, 110, 166, 167], "kernel": [3, 15, 99, 114, 115, 169], "futur": [3, 7, 18, 19, 100, 146, 149, 151, 170], "weightcorrect": 4, "ep": [4, 152], "1e": [4, 106, 166, 171], "05": [4, 15, 45, 150, 166, 172], "correct": [4, 15, 41, 42, 43, 45, 108], "int8": [4, 5, 15, 32, 74, 76, 82, 83, 84, 90, 91, 95, 97, 99, 100, 101, 103, 106, 109, 110, 113, 114, 115, 116, 131, 135, 138, 143, 149, 151, 152, 154, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171], "weight": [4, 7, 15, 45, 58, 65, 74, 76, 84, 91, 92, 94, 97, 98, 100, 101, 102, 103, 104, 114, 115, 116, 132, 138, 143, 145, 149, 151, 155, 157, 158, 159, 160, 161, 166, 167, 169, 170, 171], "distribut": [4, 15, 86, 99, 103, 106, 113, 115, 134, 137, 147, 158, 160, 163, 164, 166, 170, 172], "close": [4, 132], "fp32": [4, 15, 18, 19, 45, 63, 67, 74, 80, 83, 84, 87, 90, 91, 96, 97, 98, 99, 100, 101, 103, 106, 109, 114, 116, 143, 144, 149, 150, 151, 152, 159, 160, 162, 163, 164, 165, 166, 167, 169, 171, 172], "r": [4, 97, 98, 99, 101, 103, 105, 106, 147, 160, 172], "w_int8": 4, "u": 4, "w_fp32": 4, "i": [4, 5, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 29, 32, 36, 38, 41, 43, 45, 46, 56, 58, 63, 68, 76, 77, 87, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 119, 123, 126, 129, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172], "varianc": 4, "ratio": [4, 15, 32, 36, 135, 149, 151, 157, 168, 172], "between": [4, 15, 36, 42, 45, 91, 95, 99, 100, 103, 106, 110, 114, 115, 116, 132, 137, 146, 150, 151, 154, 160, 163, 164, 165, 166, 168, 169], "wise": [4, 15, 62, 63, 67, 99, 113, 115, 146, 157, 163, 166, 167, 169, 170, 171], "": [4, 6, 15, 22, 35, 36, 43, 45, 46, 50, 58, 91, 94, 96, 97, 98, 99, 101, 103, 105, 106, 108, 109, 111, 115, 116, 133, 137, 139, 141, 143, 146, 151, 152, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172], "equal": [4, 91, 95, 154, 157, 163], "minim": [4, 62, 98, 99, 103, 106, 115, 116, 132, 137, 140, 150, 151, 157, 160, 169], "round": [4, 94, 99, 100, 106, 113, 158, 160, 163, 166], "scale_c": 4, "shift": [4, 32, 168], "notic": [4, 96, 99, 148, 152, 164], "can": [4, 15, 18, 19, 22, 36, 41, 43, 45, 46, 56, 58, 77, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 111, 113, 114, 115, 116, 131, 133, 134, 135, 137, 138, 139, 141, 143, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172], "chang": [4, 15, 65, 91, 100, 109, 115, 134, 139, 142, 148, 151, 157, 167, 168, 169], "first": [4, 6, 15, 20, 41, 63, 74, 91, 95, 96, 99, 105, 106, 110, 111, 113, 114, 115, 116, 135, 147, 152, 154, 159, 160, 162, 163, 165, 166, 167, 169, 171], "an": [4, 15, 22, 36, 37, 38, 42, 43, 46, 58, 77, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110, 111, 113, 114, 116, 132, 134, 135, 136, 141, 149, 150, 151, 152, 154, 155, 157, 158, 160, 163, 165, 166, 167, 168, 169], "empir": 4, "solut": [4, 97, 99, 102, 106, 113, 114, 115, 142, 158, 163, 164, 166, 169], "make": [4, 91, 97, 99, 102, 106, 108, 114, 115, 131, 133, 134, 143, 150, 151, 157, 160, 161, 162, 163, 165, 166, 169], "thi": [4, 6, 7, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 36, 38, 41, 42, 43, 45, 46, 56, 58, 62, 67, 76, 77, 90, 91, 96, 97, 98, 99, 101, 102, 103, 104, 106, 108, 109, 110, 111, 114, 115, 116, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 157, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170], "don": [4, 15, 97, 98, 110, 157, 169], "t": [4, 15, 36, 43, 96, 97, 98, 103, 105, 110, 114, 133, 137, 139, 151, 152, 157, 160, 163, 169, 171], "min": [4, 15, 91, 95, 99, 103, 106, 154, 157, 160, 163, 166, 168, 169], "max": [4, 15, 36, 42, 43, 62, 91, 95, 99, 103, 106, 113, 147, 151, 154, 157, 160, 163, 166, 168, 169], "valu": [4, 5, 15, 18, 19, 20, 23, 24, 32, 36, 41, 45, 46, 58, 62, 67, 74, 76, 77, 78, 80, 91, 94, 95, 96, 97, 99, 102, 103, 106, 110, 115, 116, 132, 135, 143, 150, 151, 152, 154, 155, 157, 159, 160, 163, 166, 168, 169, 171], "us": [5, 6, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 35, 36, 38, 39, 41, 45, 56, 58, 62, 65, 67, 70, 74, 76, 77, 78, 79, 80, 83, 84, 85, 87, 91, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 109, 110, 111, 113, 114, 115, 131, 132, 133, 135, 137, 138, 139, 141, 143, 145, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172], "evalu": [5, 7, 18, 19, 20, 38, 41, 42, 43, 45, 46, 56, 58, 77, 80, 100, 102, 103, 104, 106, 111, 114, 115, 133, 135, 137, 138, 145, 146, 149, 150, 151, 152, 155, 157, 160, 165, 166, 167, 169, 171], "perform": [5, 15, 20, 32, 45, 56, 58, 63, 67, 94, 96, 98, 99, 101, 103, 104, 105, 106, 109, 110, 111, 114, 115, 131, 135, 136, 138, 140, 141, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 15, 20, 22, 32, 36, 41, 45, 56, 58, 80, 87, 90, 91, 97, 99, 101, 103, 104, 105, 114, 115, 134, 135, 143, 150, 151, 159, 160, 163, 166, 167, 168, 169, 171], "set": [5, 6, 7, 14, 15, 18, 19, 20, 22, 25, 36, 41, 45, 46, 54, 58, 77, 91, 96, 97, 99, 100, 101, 102, 104, 105, 106, 108, 111, 113, 115, 131, 134, 135, 137, 139, 141, 143, 145, 146, 150, 151, 152, 157, 159, 160, 163, 165, 166, 169, 171], "specifi": [5, 9, 15, 18, 19, 36, 41, 45, 46, 58, 77, 90, 91, 106, 115, 116, 139, 143, 150, 151, 155, 157, 159, 163, 168, 169, 171], "environ": [5, 100, 108, 113, 131, 169], "variabl": [5, 15, 22, 62, 76, 157, 169], "new": [5, 14, 22, 36, 56, 96, 97, 98, 99, 106, 109, 115, 139, 151, 152, 157, 158, 160, 163, 164, 165, 168, 170, 171], "env": [5, 142], "two": [5, 22, 27, 41, 68, 91, 95, 96, 98, 99, 102, 104, 106, 109, 110, 111, 133, 134, 135, 137, 139, 141, 143, 151, 152, 154, 157, 160, 162, 163, 165, 166, 169, 171], "case": [5, 15, 35, 36, 56, 99, 103, 106, 116, 133, 134, 137, 138, 139, 143, 145, 150, 155, 157, 158, 160, 163, 164, 166, 168, 170, 171, 172], "exist": [5, 54, 91, 96, 100, 141, 150, 169], "alreadi": [5, 22, 35, 96, 100, 114, 135, 146, 169], "param": [5, 9, 45, 62, 91, 114, 153, 169], "true": [5, 7, 15, 20, 22, 23, 35, 36, 39, 45, 56, 58, 73, 80, 84, 87, 90, 91, 94, 97, 98, 99, 100, 101, 103, 104, 105, 106, 113, 115, 134, 135, 139, 143, 150, 151, 159, 160, 161, 163, 166, 167, 168, 169, 171], "set_all_env_var": 5, "configur": [5, 6, 7, 14, 15, 18, 19, 22, 25, 45, 46, 56, 58, 67, 76, 77, 79, 80, 84, 89, 90, 100, 104, 110, 111, 114, 115, 135, 151, 155, 157, 160, 163, 164, 166, 168, 169, 172], "neural": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 65, 66, 72, 81, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 114, 115, 116, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 158, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172], "compressor": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 66, 72, 81, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 114, 115, 116, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 166, 167, 168, 169, 170, 171, 172], "physic": [5, 108, 131], "core": [5, 15, 105, 109, 131, 148, 172], "get_architectur": 5, "get": [5, 14, 15, 36, 45, 54, 58, 67, 74, 76, 80, 84, 87, 91, 97, 100, 105, 106, 115, 132, 142, 146, 147, 149, 151, 158, 163, 166, 169, 170, 173], "architectur": [5, 96, 99, 106, 113, 131, 137, 151, 157, 158, 163, 170], "system": [5, 91, 95, 131, 154, 157, 172], "get_threads_per_cor": 5, "thread": [5, 15, 134], "get_thread": 5, "list": [5, 6, 7, 9, 15, 18, 19, 20, 32, 36, 38, 39, 41, 42, 43, 45, 46, 54, 58, 73, 77, 78, 83, 84, 91, 97, 100, 102, 103, 110, 113, 114, 135, 141, 143, 147, 149, 151, 155, 157, 159, 160, 162, 166, 167, 169], "get_physical_id": 5, "socket": [5, 91, 172], "get_core_id": 5, "id": [5, 35, 38, 40, 41, 42, 43, 150, 165, 169], "get_bounded_thread": 5, "core_id": 5, "bind": 5, "instanc": [5, 15, 18, 19, 42, 43, 45, 46, 58, 62, 76, 77, 91, 99, 105, 108, 109, 110, 114, 131, 151, 163, 169, 171, 172], "run_inst": 5, "b_dataload": [5, 15, 131, 151], "none": [5, 6, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 36, 41, 45, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 77, 78, 80, 83, 84, 87, 90, 91, 95, 99, 100, 103, 105, 113, 114, 115, 134, 135, 150, 154, 160, 163, 167, 168, 169], "b_func": [5, 131], "run": [5, 15, 18, 19, 35, 46, 58, 62, 77, 99, 100, 103, 105, 106, 113, 114, 131, 139, 142, 143, 151, 158, 160, 163, 164, 165, 167, 169, 171], "object": [5, 7, 13, 15, 18, 19, 20, 21, 22, 36, 37, 41, 45, 46, 54, 55, 58, 62, 76, 77, 80, 90, 91, 98, 100, 103, 110, 111, 115, 121, 131, 133, 134, 135, 142, 150, 151, 153, 156, 157, 159, 160, 168, 169, 170, 172], "benchmarkconfig": [5, 15, 131, 151], "contain": [5, 15, 18, 19, 20, 21, 22, 41, 42, 43, 46, 58, 77, 80, 84, 90, 99, 103, 113, 132, 135, 137, 146, 150, 157, 163, 167, 169, 170], "accuraci": [5, 7, 15, 18, 19, 45, 46, 56, 58, 63, 77, 95, 97, 98, 99, 103, 104, 110, 113, 115, 116, 132, 134, 135, 138, 139, 140, 141, 150, 151, 154, 155, 156, 157, 158, 159, 163, 164, 165, 166, 167, 171, 172], "goal": [5, 46, 58, 104, 106, 115, 134, 156, 160, 169], "tune": [5, 6, 7, 9, 12, 15, 18, 19, 20, 22, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 91, 96, 97, 98, 99, 100, 104, 114, 115, 132, 133, 134, 135, 139, 146, 148, 151, 152, 155, 157, 158, 162, 164, 165, 167, 171], "prefer": [5, 58, 99, 106, 157, 163], "calibr": [5, 15, 18, 19, 58, 86, 98, 99, 100, 103, 106, 114, 116, 135, 145, 146, 157, 160, 163, 169, 170, 171], "space": [5, 15, 18, 19, 43, 46, 58, 62, 67, 74, 100, 104, 106, 108, 109, 111, 114, 115, 116, 133, 157, 160, 166, 171], "etc": [5, 35, 43, 46, 58, 90, 113, 137, 146, 157, 165, 169], "dataload": [5, 18, 19, 20, 31, 58, 77, 80, 103, 110, 113, 114, 115, 137, 138, 139, 144, 145, 151, 152, 156, 157, 160, 161, 162, 163, 166, 167, 168, 170, 171], "framework": [5, 6, 10, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 36, 45, 46, 47, 48, 50, 68, 74, 80, 96, 98, 103, 104, 106, 113, 114, 116, 132, 133, 139, 140, 144, 145, 146, 147, 150, 151, 152, 157, 158, 160, 167, 168, 169, 170, 171, 172], "custom": [5, 45, 56, 90, 100, 104, 106, 131, 137, 138, 157, 158, 163, 165], "If": [5, 7, 9, 15, 18, 19, 22, 36, 46, 58, 77, 100, 103, 106, 109, 110, 115, 131, 133, 134, 135, 139, 147, 148, 150, 151, 155, 157, 160, 163, 165, 166, 167, 168, 169], "user": [5, 15, 18, 19, 22, 25, 29, 36, 45, 46, 56, 58, 63, 76, 77, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 111, 113, 114, 115, 116, 121, 131, 133, 134, 137, 138, 141, 143, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 173], "pass": [5, 14, 45, 58, 90, 91, 99, 106, 109, 110, 114, 131, 135, 137, 138, 139, 145, 150, 151, 157, 159, 160, 162, 166, 171], "need": [5, 9, 15, 18, 19, 22, 29, 36, 45, 46, 56, 58, 67, 77, 84, 90, 91, 99, 102, 104, 106, 110, 114, 133, 134, 135, 137, 139, 146, 151, 157, 159, 160, 161, 162, 163, 164, 166, 168, 169, 171], "generate_prefix": 5, "core_list": 5, "gener": [5, 7, 14, 18, 19, 22, 23, 24, 25, 36, 38, 46, 58, 62, 77, 95, 96, 97, 99, 100, 101, 106, 109, 110, 114, 116, 134, 137, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 166, 167, 168, 169], "command": [5, 77, 105, 139], "prefix": [5, 167], "numactl": [5, 142], "index": [5, 15, 22, 91, 106, 135, 150, 163, 166], "bound": [5, 36, 41, 62, 150, 168], "specif": [5, 6, 15, 20, 21, 22, 23, 27, 29, 45, 58, 95, 96, 98, 99, 100, 103, 108, 111, 114, 115, 132, 133, 134, 137, 143, 145, 149, 150, 151, 152, 153, 154, 155, 157, 159, 163, 169, 171], "call_on": 5, "cmd": 5, "log_fil": 5, "execut": [5, 10, 15, 58, 59, 61, 77, 80, 90, 91, 98, 99, 106, 137, 138, 151, 152, 156, 157, 160, 163, 165, 169, 172], "one": [5, 36, 38, 41, 45, 96, 99, 100, 103, 104, 105, 106, 111, 114, 132, 137, 138, 139, 143, 146, 147, 150, 151, 152, 155, 156, 157, 159, 160, 161, 163, 164, 166, 168, 169], "dump": [5, 84, 91, 103, 106, 109, 160, 167], "log": [5, 12, 14, 88, 105, 110, 165, 167, 169], "window": [5, 105, 131, 147], "config_inst": 5, "raw_cmd": 5, "multi": [5, 41, 45, 58, 105, 111, 134, 135, 146, 151, 155, 157, 160, 169], "trigger": [5, 105], "sub": [5, 111, 133, 169], "process": [5, 7, 12, 14, 15, 18, 19, 20, 21, 22, 32, 36, 46, 58, 59, 61, 62, 77, 90, 91, 94, 95, 98, 102, 103, 104, 106, 111, 114, 115, 116, 132, 134, 135, 137, 138, 139, 141, 151, 154, 156, 157, 160, 161, 163, 166, 167, 168, 171], "raw": [5, 21, 25, 28, 67, 150, 169], "summary_benchmark": 5, "summari": [5, 77, 167, 172], "profil": [5, 15, 37], "benchmark_with_raw_cmd": 5, "string": [5, 14, 15, 22, 38, 41, 50, 54, 80, 91, 103, 150, 168], "exampl": [5, 6, 7, 9, 13, 15, 20, 21, 22, 32, 36, 41, 42, 43, 45, 46, 56, 58, 76, 77, 90, 91, 97, 103, 104, 108, 113, 115, 116, 121, 145, 146, 162, 164, 168, 169, 170, 173], "accord": [5, 15, 20, 21, 22, 36, 65, 67, 80, 103, 104, 106, 111, 114, 135, 139, 157, 162, 166, 168, 169], "config": [5, 6, 7, 9, 13, 14, 18, 19, 20, 37, 46, 74, 75, 76, 77, 80, 90, 91, 94, 96, 98, 99, 100, 101, 111, 113, 115, 116, 121, 131, 133, 134, 137, 138, 139, 141, 144, 146, 150, 151, 152, 153, 156, 157, 159, 160, 162, 163, 165, 167, 169], "from": [5, 6, 7, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 38, 41, 42, 43, 46, 54, 56, 58, 74, 76, 77, 80, 82, 83, 84, 87, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "import": [5, 7, 14, 15, 46, 56, 58, 77, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 111, 113, 116, 131, 134, 135, 137, 138, 139, 141, 144, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170], "fit_with_raw_cmd": 5, "iter": [5, 15, 18, 19, 22, 23, 46, 58, 77, 80, 99, 103, 104, 110, 111, 114, 131, 134, 135, 151, 157, 159, 160, 166, 167, 169, 171], "100": [5, 6, 7, 15, 22, 103, 106, 131, 135, 139, 145, 147, 151, 159, 160, 168, 169, 171, 172], "cores_per_inst": [5, 15, 131, 151, 159], "4": [5, 15, 29, 32, 36, 38, 39, 41, 76, 94, 95, 97, 98, 99, 100, 105, 106, 108, 113, 114, 116, 131, 139, 140, 143, 146, 147, 150, 151, 154, 157, 160, 163, 166, 168, 169, 172], "num_of_inst": [5, 15, 131, 151, 159], "7": [5, 15, 56, 97, 99, 102, 106, 116, 131, 142, 143, 151, 157, 160, 164, 166, 169, 172], "test": [5, 15, 36, 109, 113, 147, 172], "py": [5, 15, 39, 41, 42, 43, 101, 105, 110, 114, 133, 139, 147, 151, 160, 164, 167], "fit": [5, 15, 46, 58, 62, 77, 110, 113, 131, 134, 135, 139, 144, 145, 150, 151, 152, 153, 157, 160, 161, 162, 163], "pb": [5, 15, 46, 54, 58, 103, 131, 139, 144, 151, 153, 167, 172], "eval_dataload": [5, 15, 18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 131, 145, 150, 151, 160, 161, 169], "configregistri": [6, 13], "A": [6, 7, 12, 14, 15, 22, 36, 38, 41, 42, 43, 45, 46, 50, 54, 62, 77, 91, 97, 99, 100, 106, 109, 113, 115, 133, 134, 135, 140, 143, 149, 150, 151, 153, 157, 158, 160, 163, 166, 168, 169, 171], "registri": [6, 111], "manag": [6, 77, 80, 151], "algorithm": [6, 9, 15, 37, 38, 45, 80, 86, 99, 100, 103, 104, 106, 111, 113, 114, 115, 116, 133, 137, 138, 143, 146, 149, 157, 160, 167, 171], "within": [6, 7, 41, 54, 96, 108, 110, 116, 132, 152, 157, 158, 163, 166, 169], "register_config": [6, 133], "framework_nam": [6, 133], "algo_nam": [6, 133], "prioriti": [6, 133], "float": [6, 15, 20, 32, 39, 41, 42, 43, 73, 91, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 133, 135, 150, 154, 159, 160, 166, 168], "int": [6, 9, 14, 15, 20, 21, 32, 36, 39, 41, 45, 76, 83, 84, 87, 91, 99, 103, 113, 133, 134, 135, 150, 151, 159, 163, 168], "usag": [6, 7, 9, 41, 100, 101, 106, 115, 135, 139, 140, 155, 159, 163, 168], "examplealgorithm": 6, "examplealgorithmconfig": 6, "larger": [6, 99, 106, 115, 157, 163, 166], "number": [6, 7, 14, 15, 21, 32, 36, 42, 43, 45, 62, 80, 91, 94, 99, 104, 105, 106, 131, 134, 135, 139, 150, 157, 160, 163, 165, 166, 168, 169], "indic": [6, 15, 20, 41, 103, 110, 134, 142, 167], "higher": [6, 15, 18, 19, 46, 58, 77, 106, 110, 137, 141, 150, 157, 160, 163, 165], "which": [6, 15, 20, 21, 22, 32, 38, 43, 45, 50, 56, 58, 62, 91, 96, 98, 99, 100, 101, 103, 104, 106, 108, 110, 111, 113, 114, 115, 116, 132, 134, 135, 137, 139, 142, 143, 146, 150, 151, 152, 153, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171], "tri": [6, 15, 133, 169], "auto": [6, 7, 15, 60, 66, 91, 97, 100, 110, 132, 157, 160, 163], "stage": [6, 14, 59, 61, 68, 137, 157, 167, 169], "default": [6, 9, 14, 15, 18, 19, 20, 21, 22, 32, 36, 38, 45, 54, 76, 80, 83, 84, 87, 91, 95, 96, 97, 99, 100, 103, 104, 105, 110, 114, 133, 134, 135, 143, 146, 150, 151, 152, 154, 155, 157, 159, 160, 162, 163, 165, 166, 168, 169, 171], "baseconfig": [6, 7, 9, 100, 103, 133], "white_list": 6, "util": [6, 7, 8, 15, 37, 39, 66, 103, 115, 116, 117, 132, 133, 139, 151, 157, 160, 169, 170], "op_name_or_module_typ": 6, "default_white_list": 6, "params_list": [6, 9], "tunabl": [6, 9], "composableconfig": [6, 133], "repres": [6, 7, 9, 10, 22, 27, 41, 43, 45, 98, 103, 106, 108, 116, 132, 135, 141, 157, 160, 161, 169], "compos": [6, 36, 80, 168], "allow": [6, 62, 96, 98, 99, 104, 137, 139, 150, 151, 152, 157, 159, 163, 166, 169, 171], "multipl": [6, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 56, 103, 131, 135, 141, 151, 156, 157, 165, 166, 169], "togeth": [6, 15, 36, 137, 147, 158, 167, 168], "oper": [6, 9, 15, 32, 94, 96, 97, 98, 99, 100, 101, 102, 106, 110, 131, 134, 141, 157, 160, 163, 166, 168, 169], "config_list": [6, 7], "get_all_config_set_from_config_registri": [6, 133], "fwk_name": [6, 133], "retriev": [6, 12, 157], "given": [6, 36, 41, 58, 100, 104, 111, 116, 157, 166, 168], "union": [6, 45, 77, 100, 103, 150], "register_supported_configs_for_fwk": 6, "evaluationfuncwrapp": 7, "eval_fn": [7, 96, 100, 101, 102, 103, 104], "callabl": [7, 15, 43, 77, 100, 103, 133, 134], "eval_arg": [7, 96, 100, 101, 103], "wrapper": [7, 36, 41, 45, 50, 54, 103, 162], "collect": [7, 34, 36, 43, 45, 78, 91, 103, 106, 115, 160, 167, 169], "note": [7, 41, 68, 94, 97, 98, 99, 102, 105, 106, 111, 113, 115, 116, 133, 134, 139, 141, 143, 147, 149, 151, 157, 160, 163, 166, 167, 169, 170, 171], "deprec": [7, 133, 164, 168], "def": [7, 18, 19, 58, 77, 96, 97, 100, 101, 103, 104, 106, 110, 114, 133, 134, 135, 137, 138, 139, 150, 151, 160, 166, 167, 169], "eval_acc": 7, "eval_perf": 7, "mold": 7, "user_eval_fns1": 7, "user_eval_fns2": 7, "user_eval_fns3": 7, "user_eval_fns4": 7, "configset": 7, "base_config": [7, 8], "sampler": [7, 73, 99, 104, 134, 139], "config_sourc": 7, "sequentialsampl": 7, "size": [7, 22, 28, 32, 36, 54, 56, 91, 95, 98, 99, 106, 108, 115, 134, 135, 139, 142, 151, 154, 155, 157, 160, 161, 163, 166, 168, 171, 172], "sampl": [7, 15, 20, 21, 22, 32, 36, 45, 62, 99, 103, 104, 105, 106, 111, 134, 135, 140, 146, 160, 163, 166, 168, 169, 171, 172], "element": [7, 41, 91, 95, 99, 106, 135, 146, 150, 154, 157, 163, 166], "sequenti": [7, 59, 61, 104, 169], "alwai": [7, 41, 45, 58, 104, 150, 151, 163], "same": [7, 15, 20, 36, 41, 91, 95, 99, 104, 105, 106, 114, 116, 131, 134, 135, 137, 139, 143, 151, 154, 157, 159, 160, 163, 166, 167, 168, 169], "order": [7, 38, 39, 62, 67, 76, 99, 104, 106, 110, 150, 159, 163, 166, 167, 169], "_configset": 7, "configload": 7, "config_set": [7, 96, 101, 102, 103, 104], "default_sampl": [7, 104], "skip_verified_config": 7, "bool": [7, 14, 15, 20, 22, 32, 36, 39, 45, 73, 84, 87, 90, 91, 99, 100, 134, 135, 150, 159, 168], "yield": [7, 18, 19, 46, 58, 62, 77, 106, 134, 160, 169], "tuningconfig": [7, 96, 100, 101, 102, 103, 104], "tolerable_loss": [7, 15, 104, 151, 169], "01": [7, 15, 99, 151, 159, 163, 169, 171, 172], "max_trial": [7, 15, 96, 104, 151, 169], "pipelin": [7, 109, 138, 151, 156], "tune_config": [7, 96, 100, 101, 102, 103, 104, 115], "config1": 7, "config2": 7, "3": [7, 15, 22, 36, 41, 91, 95, 96, 98, 99, 101, 103, 104, 105, 106, 110, 111, 113, 132, 133, 134, 135, 137, 139, 141, 143, 144, 147, 150, 151, 152, 154, 155, 157, 159, 160, 163, 164, 165, 166, 168, 169, 172], "stop": [7, 15, 104, 151, 169, 170, 171], "when": [7, 15, 20, 21, 29, 36, 39, 58, 77, 98, 99, 103, 104, 105, 106, 108, 111, 115, 133, 134, 135, 151, 157, 160, 163, 166, 168, 169], "either": [7, 15, 41, 98, 103, 104, 106, 156, 159, 160], "follow": [7, 22, 38, 41, 95, 96, 97, 102, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 133, 134, 135, 137, 138, 139, 143, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 163, 166, 167, 169], "condit": [7, 20, 21, 22, 36, 59, 61, 104, 135, 148, 168, 169], "met": [7, 104, 106, 111, 143, 160, 167], "trial": [7, 104, 169], "reach": [7, 15, 109, 134, 157, 169], "maximum": [7, 15, 20, 36, 39, 54, 62, 99, 106, 116, 132, 135, 151, 157, 160, 166, 168], "metric": [7, 15, 18, 19, 37, 46, 58, 77, 80, 102, 111, 114, 115, 135, 139, 151, 152, 160, 165, 166, 167, 169, 170, 171, 172], "loss": [7, 15, 45, 77, 96, 98, 99, 103, 106, 132, 137, 138, 139, 140, 149, 150, 151, 152, 156, 157, 158, 160, 163, 166, 169, 171], "toler": [7, 103], "calcul": [7, 15, 23, 24, 42, 43, 67, 78, 91, 97, 99, 103, 106, 132, 135, 150, 151, 155, 157, 160, 163, 165, 166, 169, 171], "relative_loss": 7, "fp32_baselin": [7, 80, 114], "eval_result_of_q_model": 7, "99": [7, 149, 172], "so": [7, 36, 76, 95, 99, 100, 103, 106, 110, 114, 142, 146, 152, 154, 160, 162, 163, 166, 167, 168, 170], "tuningmonitor": 7, "tuning_config": 7, "monitor": [7, 100], "init_tun": 7, "tupl": [7, 15, 18, 19, 32, 36, 46, 58, 73, 77, 84, 90, 100, 103, 115, 133, 135, 150, 151, 160, 168], "tuninglogg": [7, 12], "initi": [7, 18, 19, 20, 58, 74, 77, 100, 103, 106, 111, 116, 135, 150, 157, 160, 166, 169], "modul": [8, 11, 96, 99, 100, 104, 110, 133, 134, 137, 146, 150, 151, 153, 157, 159, 162, 163, 167, 170], "base_tun": [8, 101, 103], "tuning_param": 8, "paramlevel": 9, "enumer": [9, 10, 14, 77, 95, 114, 137, 138, 139, 151, 154, 156, 157, 167], "level": [9, 63, 88, 95, 106, 108, 154, 166, 169], "op_level": 9, "op_type_level": 9, "model_level": 9, "tuningparam": 9, "default_v": 9, "ani": [9, 41, 43, 73, 91, 100, 103, 108, 113, 116, 133, 139, 157, 165, 169], "tunable_typ": 9, "option": [9, 14, 15, 18, 19, 20, 36, 41, 45, 46, 58, 74, 76, 77, 83, 84, 85, 87, 91, 99, 100, 103, 106, 115, 116, 133, 134, 135, 143, 147, 151, 157, 160, 163, 165, 166, 168, 169, 171], "defin": [9, 14, 15, 18, 19, 46, 58, 77, 90, 101, 103, 104, 106, 108, 111, 114, 115, 134, 135, 137, 138, 143, 146, 150, 151, 156, 157, 160, 163, 165, 166, 167, 169, 171], "fakealgoconfig": 9, "algo": [9, 80], "simpl": [9, 36, 103, 106, 147, 151, 157, 165, 166, 169], "like": [9, 15, 18, 19, 22, 45, 54, 58, 77, 99, 103, 106, 109, 110, 111, 114, 115, 137, 138, 146, 156, 157, 160, 163, 164, 166, 169], "give": [9, 115, 169], "enough": [9, 103, 106, 160], "creat": [9, 15, 20, 22, 41, 74, 76, 80, 106, 108, 111, 114, 135, 153, 157, 160, 165, 167, 169, 170], "implicitli": 9, "simple_attr": 9, "complex": [9, 96, 133, 151, 152, 157], "develop": [9, 56, 95, 96, 109, 110, 133, 147, 151, 152, 154, 157, 158, 162, 165], "explicitli": [9, 15, 98, 145, 157], "complex_attr": 9, "model_attr": 9, "todo": [9, 20, 23, 41, 74], "explain": [9, 106, 116, 166], "agnost": [10, 100, 137], "mode": [10, 14, 29, 41, 54, 74, 90, 91, 99, 100, 114, 115, 146, 160, 162, 163, 169], "constant": [11, 62, 72, 84, 85, 133, 134, 143, 168], "logger": [11, 14, 78, 85, 91], "save_load": 11, "function": [12, 15, 18, 19, 21, 85, 96, 98, 99, 100, 103, 106, 109, 110, 111, 114, 115, 116, 131, 134, 137, 138, 141, 145, 146, 149, 150, 151, 152, 157, 160, 163, 165, 166, 167, 169, 170], "unifi": [12, 114, 115, 116, 134, 145, 146, 150, 151, 153], "It": [12, 18, 19, 43, 45, 46, 58, 63, 67, 77, 95, 98, 99, 100, 101, 103, 104, 106, 114, 115, 116, 132, 137, 151, 154, 157, 160, 163, 165, 169, 171], "assist": [12, 164], "valid": [12, 15, 22, 41, 54, 111, 113, 114, 135, 137, 140, 143, 146, 148, 151, 157, 160, 163, 164], "team": [12, 43, 108, 162], "save": [13, 15, 22, 54, 58, 77, 78, 83, 84, 87, 91, 100, 101, 106, 110, 114, 145, 151, 152, 153, 156, 160, 161, 163, 166], "load": [13, 20, 35, 36, 46, 54, 58, 90, 91, 103, 115, 134, 159, 160, 161, 166], "save_config_map": 13, "config_map": 13, "qconfig_file_path": 13, "map": [13, 15, 36, 40, 42, 43, 45, 82, 84, 99, 106, 133, 135, 139, 150, 151, 157, 160, 163], "json": [13, 21, 36, 90, 99, 135, 153, 163, 168], "path": [13, 20, 21, 22, 36, 46, 54, 58, 74, 83, 84, 87, 91, 98, 99, 100, 110, 111, 114, 135, 139, 145, 150, 151, 152, 153, 156, 163, 168, 171], "load_config_map": 13, "config_name_map": 13, "reload": 13, "get_all_config": 13, "singleton": [14, 91], "lazyimport": [14, 91], "module_nam": [14, 91], "lazi": [14, 91], "python": [14, 22, 37, 91, 93, 110, 113, 133, 135, 139, 142, 147, 151, 157, 158, 168], "till": [14, 91, 169], "cpuinfo": [14, 91], "cpu": [14, 15, 87, 91, 96, 98, 103, 105, 113, 115, 131, 132, 146, 151, 152, 158, 159, 160, 161, 162, 163, 167], "info": [14, 34, 50, 87, 88, 91, 110, 133, 153], "dump_elapsed_tim": [14, 91, 114], "customized_msg": [14, 91], "elaps": [14, 91], "time": [14, 15, 36, 45, 56, 62, 91, 98, 99, 100, 102, 104, 106, 115, 134, 139, 142, 151, 155, 157, 158, 160, 163, 165, 166, 167, 168, 169], "set_random_se": [14, 15, 91], "seed": [14, 15, 91, 99, 151, 171], "random": [14, 15, 32, 36, 62, 66, 91, 99, 111, 151, 157, 159, 168, 171], "set_workspac": [14, 15, 91], "workspac": [14, 15, 90, 91, 153], "get_workspac": 14, "set_resume_from": [14, 15, 91], "resume_from": [14, 15, 91], "set_tensorboard": [14, 15, 91], "tensorboard": [14, 15, 80, 91, 114, 151], "log_process": 14, "call_count": 14, "func": [14, 91, 160, 171], "keep": [14, 63, 110, 114, 133, 164], "track": [14, 165], "processortyp": 14, "deriv": 14, "detect_processor_type_based_on_hw": 14, "detect": [14, 15, 41, 45, 50, 100, 109, 110, 157, 169], "processor": [14, 96, 106, 113, 149, 152, 158, 160, 162], "hardwar": [14, 95, 98, 113, 114, 137, 146, 151, 154, 157, 158, 159], "server": 14, "client": 14, "statist": [14, 91, 92], "header": [14, 91, 142], "field_nam": [14, 91], "output_handl": [14, 91], "printer": [14, 91], "x": [15, 36, 62, 104, 106, 132, 133, 139, 152, 153, 160, 161, 166, 167, 168, 170], "dotdict": [15, 56, 91], "access": [15, 87, 91], "yaml": [15, 18, 19, 20, 22, 90, 91, 114, 116, 145, 150, 151, 155, 159, 167, 168], "attribut": [15, 91, 114, 134, 143, 145, 151, 159, 171], "instead": [15, 91, 98, 157, 163], "dictionari": [15, 35, 41, 91], "notat": [15, 91], "random_se": [15, 62, 151, 171], "1978": 15, "default_workspac": 15, "global": [15, 76, 91, 99, 100, 101, 110, 151, 157, 159, 169], "you": [15, 20, 45, 58, 109, 110, 115, 133, 134, 135, 139, 147, 148, 150, 152, 157, 160, 163, 164, 165, 166, 167, 170], "want": [15, 20, 63, 77, 110, 114, 134, 135, 139, 151, 155, 160, 163, 165, 167, 169], "should": [15, 18, 19, 20, 22, 36, 39, 45, 46, 58, 77, 84, 91, 98, 100, 101, 102, 103, 105, 106, 110, 111, 114, 115, 116, 135, 137, 139, 150, 151, 155, 157, 160, 163, 168, 169, 171], "directori": [15, 21, 22, 54, 87, 90, 91, 135, 139, 142, 167], "where": [15, 41, 45, 76, 91, 106, 116, 132, 137, 166, 167], "intermedi": [15, 106, 110, 146, 160], "histori": [15, 90, 91, 169], "ar": [15, 20, 36, 41, 45, 59, 61, 62, 76, 80, 90, 91, 94, 95, 96, 98, 99, 100, 102, 103, 106, 108, 109, 110, 111, 114, 115, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171], "store": [15, 22, 145], "nc_workspac": 15, "format": [15, 20, 21, 22, 41, 74, 84, 87, 95, 96, 98, 103, 105, 106, 113, 115, 116, 133, 135, 139, 141, 150, 151, 152, 153, 154, 158, 160, 163], "datetim": 15, "now": [15, 36, 110, 111, 116, 135, 139, 159, 168, 169], "strftime": 15, "y": [15, 36, 62, 106, 133, 142, 166, 168], "m": [15, 105, 109, 137, 147, 157, 172], "d_": 15, "h": [15, 36, 139, 168], "resum": [15, 18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "wa": [15, 95, 97, 114, 151, 154, 158, 169], "automat": [15, 22, 25, 32, 100, 103, 105, 110, 113, 131, 135, 146, 151, 152, 156, 157, 160, 166, 168, 169], "dure": [15, 56, 91, 97, 98, 100, 103, 106, 115, 151, 153, 155, 156, 157, 160, 166, 167, 171], "last": [15, 96, 97, 99, 134, 152, 160, 163, 166], "flag": [15, 39], "whether": [15, 20, 32, 36, 39, 41, 45, 80, 87, 90, 91, 99, 105, 114, 135, 150, 160, 163, 166, 168], "each": [15, 22, 25, 32, 36, 39, 41, 42, 43, 67, 91, 99, 102, 105, 106, 109, 114, 115, 116, 133, 135, 137, 138, 143, 151, 155, 157, 161, 163, 165, 167, 168, 169, 170], "visual": [15, 165, 167, 169], "displai": [15, 73, 74, 91], "2022": [15, 99, 106, 148, 157, 163, 166], "workspace_path": 15, "output": [15, 18, 19, 38, 45, 46, 54, 58, 77, 83, 84, 87, 88, 91, 99, 100, 101, 106, 110, 114, 115, 137, 138, 139, 141, 143, 145, 150, 151, 153, 156, 157, 159, 160, 163, 166, 167, 168, 169, 171], "devic": [15, 87, 96, 99, 100, 106, 113, 115, 134, 137, 151, 152, 157, 159, 161, 163], "warmup": [15, 131, 151, 159], "model_nam": [15, 113], "inter_num_of_thread": [15, 151, 159], "intra_num_of_thread": [15, 151, 159], "ni_workload_nam": 15, "benchmark": [15, 37, 56, 91, 113, 121, 153, 169, 170, 171, 172], "empti": [15, 100, 161], "includ": [15, 20, 22, 29, 36, 91, 99, 100, 103, 104, 108, 114, 115, 116, 134, 135, 147, 148, 149, 150, 151, 157, 160, 162, 163, 167, 169], "itex": [15, 83, 103, 152, 160, 166], "ipex": [15, 90, 96, 97, 146, 149, 151, 152, 166], "onnxrt_trt_ep": [15, 152, 160], "onnxrt_cuda_ep": [15, 152, 160], "onnxrt_dnnl_ep": [15, 152, 160], "onnxrt_dml_ep": [15, 160], "inter": 15, "intra": 15, "accuracycriterion": [15, 151, 169], "higher_is_bett": [15, 45, 58, 169, 171], "criterion": [15, 137, 138, 151, 157, 160, 166, 169, 171], "rel": [15, 56, 151, 159, 169, 171, 172], "better": [15, 18, 19, 46, 58, 77, 96, 99, 106, 133, 138, 150, 152, 157, 158, 160, 163, 165, 166, 169], "absolut": [15, 45, 95, 106, 150, 151, 154, 157, 160, 169], "how": [15, 36, 98, 99, 100, 101, 102, 103, 106, 109, 110, 112, 114, 134, 135, 137, 138, 139, 145, 150, 151, 157, 158, 160, 166, 168, 169, 170, 171], "much": [15, 36, 106, 137, 166, 168], "accept": [15, 104, 108, 131, 133, 134, 163], "accuracy_criterion": [15, 56, 151, 155, 159, 169, 171], "avail": [15, 50, 96, 99, 100, 113, 117, 119, 123, 126, 129, 133, 140, 142, 144, 146, 157, 169, 172], "tuningcriterion": [15, 151, 155, 165, 169], "strategi": [15, 16, 22, 37, 104, 106, 113, 114, 115, 116, 121, 132, 133, 134, 139, 146, 151, 158, 159, 160, 162, 163, 164, 170, 171], "basic": [15, 35, 66, 70, 73, 77, 95, 146, 147, 151, 154, 159, 165], "strategy_kwarg": [15, 165, 169], "timeout": [15, 151, 159, 169, 171], "doc": [15, 45, 58, 73, 74, 91, 150, 151], "tuning_strategi": 15, "md": [15, 45, 58], "constraint": [15, 151, 157, 165, 169, 171], "guarante": [15, 151], "models": [15, 56, 151, 155, 159], "footprint": [15, 56, 138, 151, 155, 157, 159, 161], "second": [15, 20, 63, 91, 99, 106, 151, 163, 166, 169, 171], "mean": [15, 32, 36, 43, 45, 67, 99, 101, 106, 110, 115, 116, 134, 139, 143, 150, 151, 157, 160, 161, 163, 166, 168, 169, 171, 172], "earli": [15, 106, 151, 160, 169, 171], "combin": [15, 18, 19, 32, 46, 58, 77, 91, 99, 102, 110, 114, 146, 151, 156, 158, 160, 162, 163, 168, 169], "field": [15, 22, 41, 95, 110, 114, 116, 139, 151, 154, 165, 169, 171], "decid": [15, 39, 103, 105, 114, 115, 151, 160, 164, 169], "exit": [15, 59, 61, 104, 151, 171], "tuning_criterion": [15, 151, 155, 165, 169], "posttrainingquantconfig": [15, 58, 110, 113, 116, 134, 141, 144, 150, 151, 153, 160, 161, 162, 163, 165, 166, 169], "domain": [15, 157, 169], "recip": [15, 95, 104, 113, 151, 154, 161, 163, 166, 169], "quant_format": [15, 84, 141], "approach": [15, 98, 106, 110, 111, 113, 132, 135, 137, 146, 151, 157, 158, 159, 161, 163, 169, 171], "calibration_sampling_s": [15, 151], "op_type_dict": [15, 98, 113, 116, 159, 160, 163, 169], "op_name_dict": [15, 98, 151, 160, 169], "reduce_rang": [15, 116, 159], "example_input": [15, 84, 90, 94, 97, 98, 99, 100, 141], "excluded_precis": [15, 162], "quant_level": [15, 163, 166, 169], "gpu": [15, 99, 103, 113, 131, 146, 151, 152, 159, 160, 161], "npu": [15, 160], "xpu": [15, 103, 160], "cv": [15, 98, 100, 103, 157], "object_detect": [15, 41], "nlp": [15, 100, 103, 106, 157, 160], "recommendation_system": 15, "adaptor": [15, 76, 80, 113, 116, 146, 161, 162, 164, 166, 167, 170], "overrid": [15, 91, 133], "quantiztaion": 15, "below": [15, 45, 58, 95, 97, 99, 100, 103, 104, 106, 109, 110, 113, 114, 115, 116, 134, 137, 139, 145, 150, 154, 155, 156, 157, 159, 160, 163, 165, 166, 167, 169, 170], "do": [15, 20, 38, 41, 84, 90, 100, 108, 115, 133, 135, 139, 143, 146, 150, 151, 157, 162, 164, 166, 169], "quant": [15, 74, 99, 106, 110, 133, 149, 151, 160], "smooth_quant_arg": [15, 160, 166], "layer_wise_qu": [15, 161], "fast": [15, 99, 103, 157, 158, 163], "bia": [15, 163, 167], "gemm_to_matmul": [15, 160], "convert": [15, 20, 32, 35, 36, 41, 74, 83, 94, 95, 96, 97, 98, 99, 100, 102, 106, 110, 115, 151, 152, 160, 162, 163, 166, 168, 169], "gemm": 15, "matmul": [15, 143, 163, 169], "add": [15, 20, 22, 74, 91, 97, 109, 110, 113, 116, 134, 135, 139, 141, 143, 150, 151, 165, 166, 167, 169, 170], "graph_optimization_level": [15, 159, 160], "disable_al": [15, 159], "enable_bas": 15, "enable_extend": 15, "enable_al": 15, "first_conv_or_matmul_quant": [15, 160], "last_conv_or_matmul_quant": [15, 160], "pre_post_process_quant": [15, 160], "preprocess": [15, 20, 36, 76, 80, 139, 168], "postprocess": [15, 33, 36, 45, 58, 80, 114, 151, 167, 168], "add_qdq_pair_to_weight": [15, 160], "qdq": [15, 82, 83, 84, 102, 114, 141, 146, 160, 166], "pair": [15, 96, 98, 115, 134, 151, 152], "optypes_to_exclude_output_qu": [15, 160], "optyp": [15, 82, 115], "dedicated_qdq_pair": [15, 160], "dedic": 15, "qoper": [15, 141], "requir": [15, 54, 96, 98, 99, 103, 106, 110, 114, 115, 131, 132, 134, 138, 139, 143, 151, 152, 153, 157, 160, 163, 164, 165, 166, 167, 169, 171], "onnxruntim": [15, 22, 29, 114, 132, 134, 146, 147, 152, 159], "tensorflow": [15, 20, 21, 22, 25, 27, 29, 36, 39, 41, 45, 46, 54, 58, 68, 83, 84, 91, 102, 109, 111, 113, 114, 115, 132, 133, 134, 137, 138, 140, 143, 144, 146, 147, 151, 152, 153, 154, 157, 158, 159, 165, 166, 169, 171], "method": [15, 20, 22, 29, 36, 74, 76, 80, 85, 87, 88, 99, 100, 101, 103, 106, 110, 111, 113, 132, 133, 134, 135, 137, 138, 150, 151, 156, 157, 160, 162, 163, 166, 168, 169], "dynam": [15, 74, 84, 99, 100, 114, 134, 137, 141, 146, 151, 158, 169, 172], "weight_onli": [15, 90, 95, 113, 133, 154, 161, 163], "ptq": [15, 58, 97, 98, 102, 103, 110, 139, 146, 151, 160, 166, 167, 169], "both": [15, 98, 99, 101, 106, 108, 111, 114, 138, 151, 157, 159, 160, 163, 166, 169], "meet": [15, 59, 61, 99, 101, 103, 104, 106, 110, 115, 155, 158, 159, 160, 163, 167, 169], "criteria": [15, 104, 110, 166], "bayesian": [15, 66, 111, 157, 159], "mse": [15, 45, 58, 66, 91, 99, 106, 150, 159, 163, 164], "mse_v2": [15, 66], "hawq_v2": [15, 66], "exhaust": [15, 66, 159], "els": [15, 56, 163, 167], "advanc": [15, 95, 96, 99, 101, 103, 106, 108, 113, 115, 121, 149, 154, 157, 160, 163, 171], "reduc": [15, 96, 97, 98, 99, 102, 103, 106, 114, 132, 138, 151, 152, 157, 158, 160, 161, 162, 163, 166, 169, 171], "dtype": [15, 23, 24, 32, 36, 87, 96, 99, 100, 106, 113, 115, 116, 135, 141, 143, 159, 160, 163, 166, 167, 168, 171], "activ": [15, 74, 76, 94, 97, 98, 99, 102, 103, 106, 114, 115, 116, 132, 138, 143, 151, 159, 160, 163, 166, 167, 171], "layer1": [15, 151, 157, 160], "conv1": [15, 101, 160, 171], "bit": [15, 76, 94, 95, 96, 99, 100, 106, 113, 116, 132, 138, 152, 154, 158, 160, 163, 166], "precis": [15, 18, 19, 43, 45, 46, 56, 60, 63, 74, 91, 95, 98, 99, 103, 104, 106, 113, 114, 115, 121, 131, 132, 138, 139, 143, 146, 154, 158, 159, 160, 163, 166, 169, 170], "exclud": [15, 114, 132, 162], "enabl": [15, 96, 98, 99, 115, 116, 139, 152, 157, 158, 166, 169], "mix": [15, 46, 60, 74, 113, 114, 121, 146, 170], "bf16": [15, 74, 114, 115, 143, 151, 162, 169, 172], "disabl": [15, 108, 162, 163, 166], "conserv": [15, 66], "In": [15, 41, 56, 99, 100, 103, 106, 108, 110, 111, 113, 114, 115, 134, 135, 137, 138, 139, 150, 151, 155, 156, 157, 160, 162, 163, 165, 166, 167, 168, 169, 170], "docstr": 15, "quantizationawaretrainingconfig": [15, 77, 110, 138, 141, 151, 160, 162, 169], "awar": [15, 65, 77, 99, 100, 104, 114, 115, 116, 132, 138, 139, 141, 146, 156, 158, 163, 169], "qat": [15, 54, 138, 139, 146, 151, 160], "copi": [15, 91, 134], "deepcopi": 15, "model_origin": [15, 58, 162], "qat_op_name_dict": 15, "compression_manag": [15, 77, 110, 137, 138, 151, 156, 157, 160], "prepare_compress": [15, 77, 110, 137, 138, 151, 156, 157, 160], "weightpruningconfig": [15, 151, 156, 157], "pruning_config": [15, 151, 157], "target_spars": [15, 151, 157, 159, 171], "9": [15, 97, 105, 110, 147, 151, 157, 159, 166, 169, 171, 172], "pruning_typ": [15, 151, 157], "snip_momentum": [15, 151, 157], "pattern": [15, 22, 74, 94, 98, 102, 105, 114, 133, 135, 143, 146, 151, 156, 159, 166, 169, 172], "4x1": [15, 151, 157, 172], "op_nam": [15, 75, 91, 92, 98, 115, 151, 157, 167], "excluded_op_nam": [15, 151, 157], "start_step": [15, 151, 157, 159], "end_step": [15, 151, 157, 159], "pruning_scop": [15, 151, 157], "pruning_frequ": [15, 151, 157], "min_sparsity_ratio_per_op": [15, 151, 157], "max_sparsity_ratio_per_op": [15, 151, 157], "98": [15, 151, 157, 159, 172], "sparsity_decay_typ": [15, 151, 157], "exp": [15, 95, 151, 154, 157], "pruning_op_typ": [15, 151, 157], "low_memory_usag": 15, "kwarg": [15, 22, 34, 36, 45, 46, 47, 49, 51, 53, 54, 55, 58, 73, 75, 77, 87, 88, 90, 91, 134], "prune": [15, 91, 113, 139, 140, 143, 144, 146, 156, 158, 170, 171], "singl": [15, 20, 36, 41, 45, 58, 110, 135, 147, 157, 161, 166], "sequenc": [15, 20, 35, 36, 39, 43, 99, 106, 114, 135, 143, 157, 163, 168], "local": [15, 91, 99, 101, 157, 165], "link": [15, 20, 45, 58, 100, 132, 135, 141, 163, 172], "out": [15, 20, 21, 22, 99, 101, 103, 106, 109, 110, 113, 135, 157, 159, 160, 163], "By": [15, 38, 99, 115, 116, 150, 153, 157, 158, 163, 169], "correspond": [15, 20, 38, 41, 45, 80, 91, 100, 106, 114, 143, 151, 157, 159, 160, 165, 169], "sparsiti": [15, 91, 99, 113, 135, 146, 151, 170, 172], "after": [15, 20, 32, 36, 63, 87, 91, 94, 98, 99, 102, 106, 111, 113, 115, 135, 137, 138, 141, 146, 150, 151, 155, 156, 157, 160, 162, 163, 165, 166, 167, 168, 169], "90": [15, 149, 161, 171, 172], "magnitud": [15, 45, 146, 157], "snip": [15, 146, 157, 172], "magnitude_progress": 15, "snip_progress": 15, "snip_momentum_progress": 15, "pattern_lock": 15, "most": [15, 45, 96, 99, 103, 106, 151, 152, 157, 160, 163, 166, 169, 172], "feasibl": 15, "under": [15, 22, 87, 90, 104, 109, 111, 113, 135, 148, 150, 151, 156, 157, 158, 161, 163, 167, 169], "situat": [15, 139, 157], "structur": [15, 75, 91, 100, 106, 146, 157, 158, 160, 167, 170, 172], "unstructur": [15, 146, 157, 172], "nxm": [15, 157], "e": [15, 99, 106, 108, 109, 113, 137, 140, 144, 157, 163, 166, 169], "g": [15, 99, 106, 109, 137, 140, 144, 157, 163, 164, 166, 169], "8x1": 15, "channelx1": [15, 157], "1xchannel": [15, 157], "n": [15, 21, 36, 39, 106, 116, 133, 135, 137, 149, 157, 160, 166, 168], "directli": [15, 41, 45, 101, 113, 150, 151, 157, 159, 160, 167], "our": [15, 95, 111, 113, 141, 151, 154, 165], "itrex": [15, 97, 166], "some": [15, 20, 99, 106, 115, 116, 133, 135, 141, 147, 150, 151, 155, 157, 160, 162, 163, 166, 167, 169], "step": [15, 77, 94, 97, 98, 99, 106, 115, 116, 137, 138, 139, 151, 156, 157, 159, 162, 163, 165, 166, 167, 169], "start": [15, 36, 41, 63, 147, 158, 168, 169, 170, 173], "integ": [15, 41, 45, 97, 99, 102, 106, 114, 116, 132, 160, 163, 166, 169], "end": [15, 20, 35, 36, 59, 61, 114, 115, 116, 137, 138, 143, 147, 151, 155, 157, 163, 167, 168, 169], "determin": [15, 86, 94, 98, 104, 108, 110, 132, 157, 160], "score": [15, 38, 39, 41, 42, 43, 45, 65, 80, 110, 150, 155, 157, 165, 169], "gather": 15, "sort": [15, 67, 99, 163, 169], "sinc": [15, 38, 99, 106, 137, 141, 150, 156, 163], "lead": [15, 96, 99, 103, 106, 133, 137, 151, 152, 157, 163, 166], "less": [15, 91, 131, 137, 151, 157], "frequenc": [15, 151, 157, 171], "minimum": [15, 95, 116, 132, 151, 154, 157, 166, 169], "restrict": [15, 157, 165], "everi": [15, 99, 114, 134, 161, 163, 169], "schedul": [15, 99, 151, 156], "increas": [15, 95, 99, 136, 146, 154, 163, 169], "cube": [15, 157], "current": [15, 62, 68, 91, 98, 100, 104, 110, 111, 114, 116, 132, 133, 139, 143, 151, 155, 157, 160, 163, 166, 169], "local_config": 15, "6": [15, 95, 97, 99, 102, 106, 143, 154, 160, 166, 169, 172], "queri": [15, 106, 115, 116, 160], "kei": [15, 54, 78, 80, 91, 99, 106, 113, 115, 158, 163, 167, 169], "self": [15, 56, 100, 114, 115, 134, 135, 146, 150, 165, 167, 169], "attent": [15, 20, 108, 137, 157], "dens": [15, 157, 172], "8": [15, 35, 94, 95, 97, 99, 100, 106, 110, 115, 132, 133, 143, 147, 154, 157, 158, 163, 166, 169, 172], "update_config": 15, "10": [15, 22, 62, 104, 105, 113, 131, 135, 141, 147, 151, 157, 159, 168, 169, 172], "hpoconfig": 15, "search_spac": 15, "searcher": 15, "xgb": 15, "loss_typ": [15, 151, 171], "reg": 15, "min_train_sampl": 15, "42": [15, 99, 172], "hyperparamet": [15, 106, 165, 166, 169], "optim": [15, 62, 77, 78, 91, 98, 99, 102, 103, 104, 106, 111, 113, 131, 133, 137, 138, 139, 143, 144, 146, 147, 149, 151, 153, 158, 159, 160, 162, 163, 165, 166, 167, 169, 170, 171], "search": [15, 18, 19, 38, 62, 91, 99, 100, 102, 113, 133, 146, 150, 157, 158, 163, 166, 167, 169, 170], "grid": [15, 111, 157], "bo": 15, "knowledgedistillationlossconfig": [15, 137, 138, 151, 156], "temperatur": [15, 151, 171], "ce": [15, 151, 171], "loss_weight": [15, 151, 171], "knowledg": [15, 102, 138, 140, 144, 146, 151, 153, 171], "distil": [15, 113, 140, 144, 146, 156, 170, 171], "entropi": [15, 132, 169], "probabl": [15, 86, 99, 106, 163], "length": [15, 20, 36, 41, 99, 106, 135, 150, 158, 160, 163, 168], "item": [15, 35, 74, 91, 106, 132, 139, 157, 166, 169], "student": [15, 20, 135, 137, 138, 172], "groundtruth": [15, 41], "label": [15, 18, 19, 20, 22, 23, 24, 25, 28, 32, 36, 38, 40, 45, 46, 58, 77, 103, 110, 134, 135, 150, 151, 160, 168], "teacher": [15, 137, 138, 151, 172], "kl": [15, 78, 86, 115, 116, 132, 143, 151, 169, 171], "sum": [15, 45, 137], "multipli": [15, 94, 95, 99, 154, 163], "distillationconfig": [15, 77, 137, 138, 151, 156], "criterion_conf": 15, "d_conf": [15, 138, 151, 156], "teacher_model": [15, 137, 138, 151], "intermediatelayersknowledgedistillationlossconfig": [15, 137], "layer_map": [15, 137], "add_origin_loss": 15, "relationship": 15, "student_layer_nam": 15, "student_layer_output_process": 15, "teacher_layer_nam": 15, "teacher_layer_output_process": 15, "bert": [15, 20, 36, 113, 135, 137, 150, 152, 157, 168, 172], "desir": [15, 32, 36, 97, 115, 116, 157, 166, 168], "its": [15, 22, 36, 39, 40, 62, 82, 99, 104, 106, 108, 135, 137, 148, 150, 152, 157, 163, 165, 168, 169], "take": [15, 18, 19, 36, 45, 46, 58, 62, 77, 99, 103, 108, 110, 111, 134, 137, 143, 151, 157, 160, 162, 163, 168, 169, 171], "serv": [15, 54, 106], "numer": [15, 45, 95, 96, 99, 103, 116, 152, 154, 158, 160, 163], "abbrevi": 15, "further": [15, 96, 106, 108, 113, 152, 153, 160], "layer_nam": [15, 157], "student_model": [15, 151], "l1": 15, "len": [15, 36, 135, 139, 168], "origin": [15, 20, 36, 63, 76, 87, 91, 99, 100, 101, 103, 106, 109, 135, 157, 160, 163, 168, 169, 171], "selfknowledgedistillationlossconfig": [15, 137, 151], "student1_layer_name1": 15, "teacher_layer_name1": 15, "student2_layer_name1": 15, "student1_layer_name2": 15, "teacher_layer_name2": 15, "student2_layer_name2": 15, "soft": 15, "l2": [15, 157], "hard": [15, 134], "resblock": 15, "featur": [15, 20, 21, 32, 36, 96, 101, 106, 109, 113, 131, 134, 136, 137, 151, 152, 153, 157, 158, 164, 168], "deepst": 15, "fc": [15, 157], "02": [15, 149, 172], "nn": [15, 46, 58, 84, 87, 90, 99, 100, 106, 110, 137, 151, 153, 163, 166, 167], "crossentropyloss": [15, 137, 151], "sgd": [15, 137, 151, 159, 171], "lr": [15, 99, 137, 139, 151], "0001": [15, 137, 151, 159], "learning_r": [15, 151, 159, 171], "altern": [15, 58], "distil_loss": [15, 151], "mixedprecisionconfig": [15, 46, 151, 152], "mixedprecis": [15, 151], "target": [15, 62, 87, 100, 135, 139, 151, 157, 167, 168, 169, 171], "convers": [15, 96, 97, 106, 109, 114, 115, 151, 152, 160, 162, 166], "fp16": [15, 74, 106, 160], "fallback": [15, 65, 67, 68, 96, 97, 98, 141, 152, 162, 169], "won": [15, 160, 163], "work": [15, 100, 105, 106, 112, 115, 133, 134, 137, 162, 163, 164, 166, 167], "tensor": [15, 36, 54, 67, 82, 84, 87, 90, 91, 94, 95, 100, 103, 110, 116, 133, 134, 135, 154, 157, 160, 164, 167, 168, 169], "trace": [15, 65, 84, 98, 100, 110, 169], "mix_precis": [15, 37, 151, 152], "converted_model": [15, 46, 151, 152], "exportconfig": 15, "opset_vers": [15, 83, 84, 141], "14": [15, 83, 84, 113, 141, 147, 149, 172], "input_nam": [15, 54, 83, 84, 141], "output_nam": [15, 54, 83, 84, 141], "dynamic_ax": [15, 84, 141], "common": [15, 34, 37, 80, 97, 101, 102, 103, 108, 133, 135, 138, 139, 141, 145, 147, 151, 160, 166], "export": [15, 41, 85, 94, 98, 113, 144, 167, 170], "select": [15, 20, 87, 99, 106, 110, 111, 132, 146, 147, 157, 160, 163, 167, 169], "opset": [15, 83, 84, 141], "version": [15, 37, 83, 84, 97, 108, 110, 114, 133, 143, 147, 148, 151, 158, 166, 169, 170], "qlinear": [15, 22, 29, 45, 82, 114], "ax": [15, 84], "inform": [15, 18, 19, 45, 91, 95, 97, 99, 103, 105, 108, 109, 112, 113, 114, 115, 116, 117, 119, 123, 126, 129, 132, 133, 137, 143, 151, 153, 154, 157, 162, 163, 164, 166, 167, 171, 172, 173], "onnxqlinear2qdqconfig": 15, "onnxqlinear2qdq": 15, "torch2onnxconfig": [15, 141], "torch2onnx": [15, 81], "qdq_op_fp32_bia": 15, "qdq_op_int32_bia": 15, "qdq_op_fp32_bias_qdq": 15, "resnet50": [15, 101, 113, 139, 141, 152, 157, 160, 165, 172], "int8_onnx_config": [15, 141], "randn": [15, 141], "224": [15, 32, 113, 135, 139, 141, 144, 151, 168, 171], "batch_siz": [15, 20, 21, 84, 99, 111, 134, 135, 139, 141, 145, 151, 160], "q_model": [15, 58, 94, 97, 98, 102, 104, 110, 134, 135, 139, 141, 144, 145, 150, 151, 153, 160, 161, 162, 163], "tf2onnxconfig": [15, 141], "tf2onnx": [15, 81], "axi": 15, "addit": [15, 77, 99, 115, 116, 137, 163, 164, 169], "keyword": 15, "argument": [15, 100, 103, 104, 111, 163], "output_graph": 15, "nasconfig": [15, 111], "search_algorithm": [15, 111], "dyna": [15, 111, 146, 159], "na": [15, 50, 146, 172], "mxnet": [15, 22, 25, 29, 36, 45, 46, 51, 58, 109, 113, 114, 115, 132, 134, 140, 143, 146, 151, 152, 153, 159, 169, 171], "kera": [15, 22, 29, 49, 54, 101, 103, 115, 134, 139, 153], "pytorch": [15, 20, 22, 25, 29, 36, 45, 46, 55, 58, 68, 84, 85, 91, 95, 100, 109, 110, 111, 113, 114, 115, 116, 132, 133, 134, 137, 138, 140, 143, 146, 147, 149, 151, 152, 153, 154, 157, 158, 159, 163, 164, 166, 169, 171], "built": [16, 17, 20, 21, 26, 28, 30, 31, 32, 33, 36, 45, 48, 56, 58, 77, 104, 111, 114, 135, 139, 151, 155, 160, 165, 168, 169, 171], "sigopt": [17, 158], "tpe": 17, "provid": [18, 19, 36, 41, 46, 58, 77, 85, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 113, 114, 115, 116, 131, 134, 138, 139, 140, 146, 147, 149, 150, 151, 152, 153, 157, 159, 160, 163, 166, 167, 169, 170, 171, 172], "sigopttunestrategi": 18, "q_dataload": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 145, 169], "q_func": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 114, 115, 151, 169], "eval_func": [18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 110, 134, 135, 137, 138, 139, 151, 160, 161, 162, 163, 169, 171], "eval_metr": [18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 150, 160], "q_hook": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "hpo": [18, 157], "low": [18, 19, 23, 24, 46, 96, 99, 104, 106, 114, 115, 131, 132, 135, 139, 151, 152, 158, 160, 163, 166, 169], "loader": [18, 19, 46, 58, 77, 87, 134, 160], "mandatori": [18, 19, 58, 151, 171], "dataset": [18, 19, 31, 41, 42, 43, 45, 46, 58, 77, 80, 97, 99, 101, 102, 103, 106, 111, 113, 114, 115, 134, 139, 144, 150, 151, 157, 160, 163, 164, 166, 169, 171, 172], "_": [18, 19, 58, 96, 97, 99, 100, 103, 105, 106, 110, 111, 113, 114, 115, 132, 137, 139, 141, 143, 151, 152, 153, 155, 157, 160, 163, 164, 165, 166, 167, 169, 171], "depend": [18, 19, 46, 58, 77, 109, 142, 143, 159, 160, 169], "implement": [18, 19, 20, 22, 38, 46, 56, 58, 65, 77, 99, 116, 134, 135, 150, 151, 157, 160, 163, 164, 167, 169, 171], "well": [18, 19, 46, 58, 77, 95, 106, 111, 113, 133, 135, 154, 157, 160, 164, 166, 171], "taken": [18, 19, 46, 58, 77, 160], "reserv": [18, 19], "abl": [18, 19, 46, 58, 77, 103, 106, 160], "pre": [18, 19, 20, 46, 58, 77, 98, 99, 104, 106, 133, 135, 137, 138, 151, 157, 158, 160, 163, 167, 169], "through": [18, 19, 45, 46, 58, 98, 99, 100, 106, 113, 131, 143, 145, 146, 150, 155, 156, 157, 159, 160, 163], "tuner": [18, 19, 46, 58, 77, 160], "encapsul": [18, 19, 46, 58, 77, 153], "scalar": [18, 19, 46, 58, 77, 150, 160, 169], "pseudo": [18, 19, 58, 77, 99, 163, 167], "code": [18, 19, 58, 77, 99, 101, 110, 113, 114, 115, 116, 135, 137, 138, 139, 145, 146, 148, 150, 155, 156, 157, 158, 159, 160, 165, 166, 167, 168, 170], "someth": [18, 19, 22, 58, 77], "fefin": 19, "tpetunestrategi": 19, "pytorchbertdataset": 20, "task": [20, 27, 45, 97, 99, 106, 135, 137, 138, 141, 146, 150, 151, 157, 161, 163, 166, 172], "model_typ": [20, 91, 135], "transform": [20, 21, 22, 23, 24, 25, 27, 29, 31, 97, 98, 99, 102, 106, 110, 111, 113, 132, 135, 137, 138, 139, 140, 144, 149, 151, 157, 158, 162, 163, 166, 167, 169, 171], "filter": [20, 21, 22, 23, 24, 25, 27, 31, 91, 116, 135, 146, 157, 167], "construct": [20, 23, 24, 27, 34, 45, 50, 54, 76, 80, 104, 108, 115, 116, 135, 139, 157, 169], "tensordataset": [20, 135], "full": [20, 21, 22, 87, 91, 99, 113, 132, 135, 142, 148, 157, 163, 164], "repo": [20, 107, 109, 135, 140, 173], "http": [20, 22, 38, 39, 41, 42, 43, 45, 58, 99, 110, 135, 144, 147, 148, 151, 157, 164], "github": [20, 38, 39, 42, 43, 45, 58, 99, 109, 113, 135, 140, 147, 148, 151, 164], "com": [20, 38, 39, 42, 43, 45, 58, 108, 133, 135, 144, 147, 148, 151, 164, 165, 172], "huggingfac": [20, 87, 95, 135, 140, 144, 154, 166, 172], "your": [20, 98, 109, 113, 133, 134, 135, 139, 148, 151, 157, 158, 165, 167, 169, 170], "easi": [20, 98, 100, 103, 141, 151, 158, 160, 163, 165], "ad": [20, 38, 62, 94, 96, 99, 115, 116, 152, 157, 163, 167], "arg": [20, 21, 22, 62, 87, 88, 95, 100, 135, 139, 151, 154, 157, 160, 163, 166, 167, 168], "classifi": [20, 45, 135, 137], "squad": [20, 36, 42, 43, 45, 135, 150, 157, 168, 172], "distilbert": [20, 135, 152, 158, 172], "xlnet": [20, 135], "xlm": [20, 135, 172], "101": [20, 45, 106, 150, 166, 172], "2043": 20, "2001": 20, "onnxrtbertdataset": 20, "data_dir": [20, 135], "model_name_or_path": [20, 135, 151, 161], "max_seq_length": [20, 36, 135, 168], "128": [20, 23, 24, 36, 99, 104, 106, 135, 151, 160, 163, 168, 172], "do_lower_cas": [20, 35, 36, 135, 168], "mrpc": [20, 45, 135, 150, 157, 169, 172], "dynamic_length": [20, 135], "onnxrt": [20, 22, 29, 36, 45, 89, 114, 152, 160, 172], "dir": [20, 87, 90, 135, 142, 145], "shortcut": [20, 135], "token": [20, 33, 36, 38, 39, 87, 97, 99, 106, 113, 135, 150, 151, 163, 165, 166, 168, 169], "longer": [20, 36, 135, 168], "than": [20, 36, 91, 95, 99, 106, 111, 113, 131, 135, 145, 154, 155, 156, 157, 160, 163, 165, 168, 169], "truncat": [20, 36, 135, 168], "shorter": [20, 36, 135, 168], "pad": [20, 36, 135, 168], "lowercas": [20, 135], "fine": [20, 100, 133, 135, 157, 158, 160], "choic": [20, 99, 103, 106, 114, 135, 150, 166], "qqp": [20, 135, 150, 172], "qnli": [20, 135, 150, 172], "rte": [20, 135, 150, 172], "st": [20, 135, 150], "b": [20, 91, 99, 106, 109, 132, 135, 150, 157, 163, 166, 169], "cola": [20, 135, 150, 172], "mnli": [20, 135, 150, 172], "wnli": [20, 135, 150], "mobilebert": [20, 135, 137], "roberta": [20, 135, 172], "fix": [20, 99, 134, 135, 157, 160, 163, 169], "uncas": [20, 36, 135, 168, 172], "load_and_cache_exampl": 20, "cach": [20, 99, 106, 142, 160, 163], "helper": [20, 21, 22, 35, 54, 82, 83, 84, 89], "convert_examples_to_featur": [20, 36], "max_length": 20, "label_list": [20, 45], "output_mod": 20, "classif": [20, 36, 45, 137, 141, 150, 157, 158], "pad_token": 20, "pad_token_segment_id": 20, "mask_padding_with_zero": 20, "inputfeatur": [20, 36], "properti": [20, 76, 148], "input_id": [20, 36, 151], "vocabulari": [20, 35, 36, 168], "attention_mask": [20, 151], "mask": [20, 41, 157, 172], "avoid": [20, 105, 110, 133, 167], "usual": [20, 103, 106, 115, 137, 156, 157, 160, 161, 166], "NOT": [20, 143], "token_type_id": [20, 151], "segment": [20, 39, 41, 109], "portion": 20, "them": [20, 99, 100, 106, 110, 116, 134, 141, 143, 145, 156, 157, 163, 169], "problem": [20, 45, 96, 150, 152], "regress": [20, 109], "seq_length": 20, "tensorflowbertdataset": 20, "root": [20, 21, 22, 25, 45, 135, 139, 150, 151, 171], "label_fil": [20, 36, 135, 168], "tfrecord": [20, 21, 22, 135], "guid": [20, 103, 110, 113, 133, 135, 137, 147, 173], "parsedecodebert": 20, "tensorflowmodelzoobertdataset": [20, 21], "pars": [20, 21, 32, 36, 115, 116, 168], "num_cor": [20, 21, 25, 135], "28": [20, 21, 25, 135, 172], "three": [20, 59, 61, 96, 100, 104, 106, 110, 114, 115, 132, 147, 152, 156, 160, 162, 165, 166, 167], "tf": [20, 21, 22, 36, 52, 54, 101, 103, 133, 139, 147, 153, 158, 162, 168], "record": [20, 21, 22, 28, 91, 104, 135, 163, 165, 167, 169], "resiz": [20, 21, 32, 36, 135, 168], "coco": [21, 28, 41, 45, 150, 157], "parsedecodecoco": 21, "cocorecorddataset": 21, "interleav": [21, 135], "parallel": [21, 135, 151, 169], "cocoraw": [21, 135], "img_dir": [21, 135], "val2017": [21, 135], "anno_dir": [21, 135], "annot": [21, 41, 115, 116, 135, 150, 157, 169], "instances_val2017": [21, 135], "arrang": [21, 22, 25, 135, 157], "wai": [21, 22, 25, 54, 99, 102, 106, 111, 116, 134, 135, 150, 151, 156, 157, 160, 163, 166, 169, 171], "jpg": [21, 25, 27, 113, 135], "imag": [21, 22, 25, 27, 32, 36, 41, 106, 113, 135, 139, 141, 157, 159, 166, 167, 168, 172], "coconpi": [21, 135], "npy_dir": [21, 135], "npy": [21, 135], "tensorflowdataset": 22, "pytorchdataset": 22, "mxnetdataset": 22, "onnxrtqldataset": 22, "onnxrtitdataset": 22, "IT": [22, 29, 158], "pytorchmxnetwrapdataset": 22, "datafunc": 22, "pytorchmxnetwrapfunct": [22, 36], "framework_dataset": 22, "convent": [22, 41, 95, 109, 137, 154], "imageclassifi": 22, "choos": [22, 87, 100, 106, 146, 158, 164, 166, 169, 171], "tensorflow_itex": [22, 25, 27, 29, 134, 159], "onnxrt_qdq": [22, 29, 159], "onnxrt_qlinearop": [22, 29, 36, 159], "onnxrt_integerop": [22, 29, 36, 159], "pytorch_ipex": [22, 29, 151, 159, 171], "pytorch_fx": [22, 29, 151, 159], "dataset_registri": 22, "dataset_typ": 22, "dataset_format": 22, "data_format": [22, 32], "eg": [22, 135, 159], "raw_imag": 22, "overwrit": 22, "__getitem__": [22, 36, 134, 135, 151], "__len__": [22, 135], "iterabledataset": 22, "also": [22, 36, 38, 45, 56, 58, 99, 100, 101, 102, 106, 109, 111, 114, 115, 116, 134, 140, 144, 146, 150, 151, 155, 157, 158, 160, 162, 163, 166, 169], "__iter__": [22, 134, 135, 151], "over": [22, 45, 115, 140, 144, 146, 150, 157, 159, 166, 169], "download_url": 22, "url": [22, 109, 148, 157], "filenam": [22, 91, 135], "md5": 22, "download": [22, 135, 147, 164], "address": [22, 96, 104, 108, 133, 152, 158], "gen_bar_updat": 22, "progress": [22, 157, 160], "bar": [22, 158], "check_integr": 22, "fpath": 22, "check": [22, 82, 90, 91, 103, 105, 113, 139, 147, 164], "checksum": 22, "calculate_md5": 22, "chunk_siz": 22, "1024": 22, "cifar10": [22, 135], "cifar100": [22, 135], "databas": 22, "extract": [22, 76, 135], "otherwis": [22, 36, 91, 99, 108, 115, 135, 159, 163, 168], "www": [22, 135, 172], "c": [22, 91, 99, 105, 106, 135, 142, 163, 169], "toronto": [22, 135], "edu": [22, 135], "kriz": [22, 135], "cifar": [22, 135, 172], "tar": [22, 135], "gz": [22, 135], "manual": [22, 135, 157], "subset": [22, 25, 135], "internet": [22, 135], "put": [22, 135, 137], "again": [22, 135, 162], "pytorchcifar10": 22, "mxnetcifar10": 22, "tensorflowcifar10": 22, "pytorchcifar100": 22, "mxnetcifar100": 22, "tensorflowcifar100": 22, "mnist": [22, 135, 139], "modifi": [22, 76, 110, 116, 139, 143, 157, 171], "nation": [22, 108], "institut": 22, "standard": [22, 36, 109, 115, 133, 141, 150, 168, 169], "technologi": [22, 95, 149, 151, 154], "fashionmnist": [22, 135], "npz": [22, 135], "idx1": [22, 135], "ubyt": [22, 135], "idx3": [22, 135], "t10k": [22, 135], "pytorchmnist": 22, "mxnetmnist": 22, "tensorflowmnist": 22, "pytorchfashionmnist": 22, "mxnetfashionmnist": 22, "tensorflowfashionmnist": 22, "imagefold": [22, 135, 139, 151], "expect": [22, 99, 101, 106, 108, 109, 142, 149, 160, 163, 169], "folder": [22, 27, 46, 58, 90, 99, 100, 135, 163, 167], "subfold": 22, "belong": [22, 50, 160], "class_1": [22, 135], "xxx": [22, 135, 151], "png": [22, 135], "xxy": [22, 135], "xxz": [22, 135], "class_n": [22, 135], "123": [22, 135, 168], "nsdf3": [22, 135], "asd932_": [22, 135], "categori": [22, 40, 131, 135], "mxnetimagefold": 22, "tensorflowtfrecorddataset": 22, "tensorflowimagerecord": 22, "imagenet": [22, 25, 32, 101, 111, 151, 157, 167, 168, 171, 172], "000": [22, 113, 135], "001": [22, 106, 135, 139, 166, 171], "099": [22, 135], "tensorflowvocrecord": 22, "pascal": 22, "voc": [22, 45], "2012": 22, "val": [22, 25, 151], "00000": 22, "00004": 22, "00001": 22, "00003": 22, "dummi": [23, 24, 45, 103, 113, 135, 144, 150, 151], "dummydataset": [23, 24, 103], "shape": [23, 24, 32, 36, 41, 99, 103, 106, 113, 135, 143, 144, 151, 163, 166, 168], "high": [23, 24, 103, 135, 147, 158, 169], "127": [23, 24, 106, 135, 160, 166], "float32": [23, 24, 36, 41, 87, 99, 106, 114, 131, 135, 151, 160, 163, 166, 168], "rang": [23, 24, 36, 77, 87, 94, 95, 96, 99, 100, 103, 105, 106, 113, 114, 116, 132, 135, 137, 138, 139, 151, 154, 156, 157, 160, 163, 166, 168], "stand_norm": [23, 24, 135], "real": [23, 106, 115, 132, 139, 158, 160], "dummy_v2": [24, 135], "sparse_dummy_v2": [24, 135], "input_shap": [24, 135], "label_shap": [24, 135], "sparsedummydataset": 24, "dense_shap": [24, 135], "sparse_ratio": [24, 135], "imagenetraw": [25, 135], "data_path": [25, 135], "image_list": [25, 135], "img1": [25, 135], "img2": [25, 135], "imgx": [25, 135], "read": [25, 36, 135, 162, 165], "val_map": [25, 135], "txt": [25, 135, 147], "pytorchimagenetraw": 25, "mxnetimagenetraw": 25, "tensorflowimagenetraw": 25, "inteltensorflow": [25, 27], "tensorflowimagenetdataset": 25, "onnxrtimagenetdataset": 25, "class": [26, 46, 58, 99, 100, 101, 103, 104, 110, 111, 115, 133, 134, 135, 137, 150, 151, 155, 156, 160, 164, 167, 169, 171], "bert_dataset": 26, "coco_dataset": 26, "dummy_dataset": 26, "dummy_dataset_v2": 26, "imagenet_dataset": 26, "style_transfer_dataset": 26, "style": [27, 133, 135, 145], "transfer": [27, 106, 135, 137, 138, 151, 166], "styletransferdataset": 27, "content_fold": [27, 135], "style_fold": [27, 135], "crop_ratio": [27, 135], "resize_shap": [27, 135], "256": [27, 32, 135, 139, 151, 168], "image_format": [27, 135], "holder": [27, 135], "labelbalancecocorecordfilt": 28, "balanc": [28, 95, 97, 99, 103, 106, 154, 163, 166], "labelbalancecocorawfilt": 28, "tensorflowfilt": 29, "onnxrtqlfilt": 29, "onnxrtitfilt": 29, "pytorchfilt": 29, "mxnetfilt": 29, "filter_registri": 29, "filter_typ": 29, "__call__": 29, "write": [29, 91, 139, 145, 151, 167], "coco_filt": 30, "quantizedinput": [32, 168], "uint8": [32, 41, 76, 103, 106, 114, 135, 143, 159, 160, 168, 171], "point": [32, 42, 43, 62, 91, 94, 95, 96, 97, 98, 99, 102, 106, 150, 154, 160, 163, 166, 168, 169], "labelshift": [32, 168], "label_shift": [32, 168], "parsedecodeimagenet": [32, 168], "proto": [32, 36, 168], "parsedecodeimagenettransform": 32, "decod": [32, 38, 150, 168], "v1": [32, 42, 43, 45, 54, 97, 139, 141, 142, 150, 153, 157, 164, 165, 166, 172], "tensorflowtransposelastchannel": 32, "transpos": [32, 36, 83, 163, 168], "nhwc": 32, "nchw": 32, "tensorflowshiftrescal": 32, "rescal": [32, 36, 168], "tensorflowresizecropimagenettransform": 32, "height": [32, 36, 139, 168, 171], "width": [32, 36, 106, 132, 139, 157, 160, 168, 171], "random_crop": [32, 168], "resize_sid": [32, 168], "resize_method": 32, "bilinear": [32, 36, 168], "random_flip_left_right": [32, 168], "mean_valu": [32, 168], "channels_last": 32, "subpixel": 32, "rgb": 32, "seri": [32, 113, 147, 151, 168], "applic": [32, 99, 101, 106, 116, 141, 158, 163, 166, 167, 168], "result": [32, 36, 38, 41, 42, 43, 45, 58, 65, 77, 90, 91, 94, 97, 99, 102, 104, 105, 106, 108, 111, 113, 134, 137, 139, 146, 148, 150, 151, 155, 157, 158, 160, 163, 165, 166, 167, 168, 169, 170, 172], "crop": [32, 36, 135, 168], "flip": [32, 36, 168], "left": [32, 36, 106, 166, 168], "right": [32, 41, 106, 108, 109, 110, 166, 168], "std": [32, 36, 151, 168], "bilinearimagenettransform": 32, "central_fract": [32, 168], "875": [32, 168], "fraction": [32, 168], "onnxbilinearimagenettransform": 32, "onnxresizecropimagenettransform": 32, "std_valu": 32, "229": [32, 151], "225": [32, 151, 172], "resizewithaspectratio": 32, "87": [32, 172], "inter_pol": 32, "cv2": 32, "inter_area": 32, "aspect": [32, 36, 168], "imagenet_transform": 33, "postprocess_cl": [34, 151], "user_postprocess": 34, "just": [34, 36, 56, 98, 103, 106, 111, 151, 156, 160, 166, 168, 169], "convert_to_unicod": 35, "text": [35, 36, 38, 43, 95, 97, 99, 106, 141, 148, 154, 157, 158, 163, 166, 168, 172], "unicod": 35, "assum": [35, 41, 114, 143], "utf": 35, "load_vocab": 35, "vocab_fil": [35, 36, 168], "convert_by_vocab": 35, "vocab": 35, "whitespace_token": 35, "whitespac": [35, 43], "clean": [35, 151], "split": [35, 36, 106, 110, 161, 163, 166, 168], "piec": [35, 38, 99, 106, 150, 163], "fulltoken": 35, "tokenzi": 35, "basictoken": 35, "punctuat": [35, 38, 43], "lower": [35, 36, 43, 63, 94, 95, 98, 103, 106, 138, 154, 157, 158, 160, 166, 168, 169], "wordpiecetoken": 35, "unk_token": 35, "unk": 35, "max_input_chars_per_word": 35, "200": [35, 99, 110, 169], "wordpiec": [35, 36, 168], "concat_gener": 36, "inc": [36, 100, 103, 104, 108, 113, 115, 149, 158, 159, 164, 169], "abstract": [36, 114, 116, 145], "own": [36, 56, 106, 111, 115, 134, 135, 146, 150, 155, 163, 165, 170], "inherit": [36, 111, 114, 115, 135], "tensorflowtransform": 36, "mxnettransform": 36, "pytorchtransform": 36, "onnxrtqltransform": 36, "onnxrtittransform": 36, "transform_registri": 36, "transform_typ": 36, "basetransform": 36, "tensorflowwrapfunct": 36, "transform_func": 36, "pytorchmxnettransform": 36, "get_torchvision_map": 36, "interpol": [36, 150, 157, 168], "torchvis": [36, 113, 140, 144], "composetransform": 36, "transform_list": [36, 168], "sever": [36, 95, 96, 106, 111, 137, 138, 146, 151, 152, 154, 157, 159, 161, 166, 168, 169, 171], "croptoboundingbox": [36, 168], "offset_height": [36, 168], "offset_width": [36, 168], "target_height": [36, 168], "target_width": [36, 168], "box": [36, 41, 45, 110, 150, 167, 168, 169], "vertic": [36, 168], "coordin": [36, 62, 168, 169], "top": [36, 45, 109, 150, 168], "corner": [36, 109, 114, 116, 168], "horizont": [36, 168], "mxnetcroptoboundingbox": 36, "onnxrtcroptoboundingbox": 36, "tensorflowcroptoboundingbox": 36, "resizewithratio": [36, 168], "min_dim": [36, 168], "800": [36, 168], "max_dim": [36, 168], "1365": [36, 168], "constant_valu": 36, "np": [36, 62, 139, 166, 168, 169], "arrai": [36, 41, 91, 168], "smaller": [36, 95, 137, 151, 154, 157, 168], "dimens": [36, 99, 135, 137, 163, 168], "ensur": [36, 62, 98, 101, 139, 160, 168], "longest": [36, 168], "side": [36, 135, 168], "doesn": [36, 96, 103, 114, 139, 151, 152, 171], "exce": [36, 163, 168], "zero": [36, 91, 95, 98, 99, 106, 154, 157, 160, 163, 166, 168, 169], "tensorflowresizewithratio": 36, "perm": [36, 168], "permut": [36, 168], "tensorflowtranspos": 36, "mxnettranspos": 36, "pytorchtranspos": 36, "randomverticalflip": [36, 168], "randomli": [36, 62, 106, 111, 166, 168, 169], "tensorflowrandomverticalflip": 36, "randomhorizontalflip": [36, 151, 168], "tensorflowrandomhorizontalflip": 36, "toarrai": [36, 168], "pil": [36, 168], "ndarrai": [36, 78, 142, 168], "numpi": [36, 41, 142, 166, 168], "casttftransform": 36, "castonnxtransform": 36, "castpytorchtransform": 36, "centercroptftransform": 36, "center": [36, 112, 113, 147, 168, 169], "paddedcentercroptransform": 36, "crop_pad": 36, "resizetftransform": 36, "nearest": [36, 99, 100, 106, 163, 168], "bicub": [36, 168], "resizepytorchtransform": 36, "randomcroptftransform": 36, "randomresizedcroppytorchtransform": 36, "08": [36, 168, 172], "randomresizedcropmxnettransform": 36, "randomresizedcroptftransform": 36, "normalizetftransform": 36, "normal": [36, 43, 99, 106, 151, 155, 163, 166, 168], "deviat": [36, 168], "broadcast": [36, 139, 168], "rescalekeraspretraintransform": 36, "rescaletftransform": 36, "rescaletransform": 36, "alignimagechanneltransform": 36, "dim": [36, 106, 166, 168], "align": [36, 108, 163, 168], "w": [36, 97, 106, 157, 166, 168], "must": [36, 41, 109, 110, 115, 131, 134, 147, 160, 168], "pytorchalignimagechannel": 36, "tondarraytransform": 36, "resizemxnettransform": 36, "resizetransform": 36, "cropresizetftransform": 36, "boundari": [36, 168], "area": [36, 41, 95, 150, 154, 168], "pytorchcropresizetransform": 36, "mxnetcropresizetransform": 36, "cropresizetransform": 36, "centercroptransform": 36, "mxnetnormalizetransform": 36, "pytorchnormalizetransform": 36, "normalizetransform": 36, "randomcroptransform": 36, "randomresizedcroptransform": 36, "get_final_text": 36, "pred_text": 36, "orig_text": 36, "project": [36, 107, 108, 109, 158, 165, 169, 173], "predict": [36, 38, 42, 43, 45, 58, 99, 106, 111, 137, 150, 163, 166, 167, 168], "back": 36, "squadexampl": 36, "qas_id": 36, "question_text": 36, "doc_token": 36, "orig_answer_text": 36, "start_posit": 36, "end_posit": 36, "is_imposs": 36, "without": [36, 76, 95, 106, 108, 137, 139, 151, 154, 157, 158, 159, 160, 169], "answer": [36, 42, 43, 108, 157, 168, 172], "posit": [36, 108, 150], "unique_id": 36, "example_index": 36, "doc_span_index": 36, "token_to_orig_map": 36, "token_is_max_context": 36, "input_mask": [36, 151], "segment_id": [36, 151], "read_squad_exampl": 36, "input_fil": 36, "doc_strid": [36, 168], "max_query_length": [36, 168], "output_fn": 36, "inputbatch": 36, "collecttransform": 36, "10833": 36, "tfsquadv1posttransform": 36, "n_best_siz": [36, 168], "20": [36, 157, 168, 171, 172], "384": [36, 168], "64": [36, 96, 104, 106, 111, 149, 163, 166, 168, 172], "max_answer_length": [36, 168], "30": [36, 140, 144, 146, 168, 172], "total": [36, 45, 99, 135, 157, 163, 168, 172], "best": [36, 67, 99, 100, 101, 102, 104, 108, 111, 113, 133, 147, 155, 160, 163, 166, 168, 169], "nbest_predict": [36, 168], "question": [36, 42, 43, 106, 108, 109, 113, 114, 147, 157, 166, 168, 172], "becaus": [36, 102, 106, 110, 160, 166, 168, 169], "anoth": [36, 38, 91, 137, 168, 169], "up": [36, 106, 113, 139, 140, 143, 146, 157, 158, 159, 160, 165, 168, 169, 171], "long": [36, 99, 133, 142, 163, 168], "document": [36, 96, 101, 102, 106, 115, 116, 121, 139, 149, 152, 157, 164, 168, 170], "chunk": [36, 168], "stride": [36, 168], "tfmodelzoocollecttransform": 36, "zoo": [36, 113, 140, 144, 172], "tfsquadv1modelzooposttransform": 36, "squadv1": [36, 168], "see": [36, 38, 99, 106, 108, 109, 110, 112, 133, 148, 151, 163, 166, 167, 169], "parsedecodevoctransform": 36, "intel": [37, 44, 45, 57, 58, 66, 72, 81, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 132, 135, 136, 137, 138, 140, 141, 143, 144, 148, 149, 152, 153, 155, 156, 157, 158, 160, 162, 163, 164, 166, 167, 169, 170, 171, 172], "open": [37, 80, 93, 108, 113, 141, 142, 151, 158], "librari": [37, 93, 96, 103, 113, 147, 151, 152, 158, 160], "popular": [37, 93, 100, 104, 106, 113, 114, 115, 132, 137, 140, 141, 144, 149, 151, 157, 160, 163, 169, 170], "compress": [37, 56, 77, 87, 93, 97, 99, 100, 102, 104, 106, 113, 121, 137, 146, 151, 155, 156, 157, 158, 160, 166, 170, 172], "techniqu": [37, 93, 98, 103, 104, 106, 113, 146, 151, 156, 157, 158, 159, 160, 170, 171, 172], "contrib": 37, "script": [38, 39, 42, 43, 109, 113, 139, 146, 158], "unicoderegex": 38, "hoc": 38, "hack": 38, "recogn": [38, 169], "symbol": [38, 46, 58, 110, 153], "nondigit_punct_r": 38, "compil": [38, 94, 98, 151], "regular": 38, "express": [38, 108], "preced": [38, 106, 166, 169], "digit": [38, 91, 158], "punct_nondigit_r": 38, "symbol_r": 38, "bleu_token": 38, "offici": [38, 42, 43, 108, 166], "mose": 38, "smt": 38, "mosesdecod": 38, "blob": [38, 39, 42, 43, 45, 58, 151], "master": [38, 39, 42, 43, 45, 58, 151, 169], "mteval": 38, "v14": 38, "pl": 38, "l954": 38, "l983": 38, "comput": [38, 39, 42, 43, 45, 77, 91, 95, 96, 98, 99, 106, 132, 134, 138, 141, 150, 151, 152, 154, 157, 158, 160, 163, 166, 169], "bilingu": 38, "understudi": 38, "qualiti": [38, 133], "ha": [38, 96, 101, 103, 106, 109, 111, 114, 115, 116, 134, 141, 146, 151, 152, 157, 159, 160, 162, 165, 166, 169], "been": [38, 96, 99, 103, 106, 111, 116, 133, 137, 151, 152, 163, 166], "machin": [38, 99, 141, 147, 158, 166, 167], "translat": [38, 39, 95, 154, 157, 169], "natur": [38, 99, 141], "approxim": [38, 39, 99, 115, 150, 163], "glue": [38, 45, 135, 150, 151], "word": [38, 99, 106, 133, 150, 157, 163, 172], "ngram": [38, 150], "breviti": [38, 39, 150], "penalti": [38, 39, 150], "doe": [38, 76, 98, 99, 133, 134, 135, 150, 151, 163, 164, 168], "have": [38, 41, 45, 58, 76, 95, 96, 97, 99, 104, 106, 108, 109, 115, 116, 133, 134, 135, 139, 143, 148, 150, 151, 152, 154, 155, 157, 160, 161, 163, 166, 169], "beam": [38, 150], "bleu": [39, 44, 150, 157], "tensor2tensor": 39, "bleu_hook": 39, "compute_bleu": 39, "reference_corpu": 39, "translation_corpu": 39, "max_ord": 39, "use_bp": 39, "against": 39, "gram": 39, "appli": [39, 95, 98, 102, 103, 104, 106, 108, 115, 116, 151, 154, 156, 157, 160, 162, 165, 166, 169, 170, 171], "bleu_scor": 39, "third": [41, 109, 148], "parti": [41, 106, 109, 148, 160], "pycocotool": [41, 142], "noth": [41, 169], "relat": [41, 76, 80, 116, 157, 163, 171], "thu": [41, 106, 151, 157, 160], "cannot": [41, 99, 110, 133, 142, 163, 167], "slim": [41, 52, 54, 153, 157], "jonathanhuang": 41, "wrap": [41, 110, 139], "image_id": [41, 150], "encod": [41, 168], "invok": [41, 115], "groundtruth_dict": 41, "exportgroundtruthtococo": 41, "groundtruth_boxes_list": 41, "groundtruth_classes_list": 41, "max_num_class": 41, "output_path": 41, "detections_list": 41, "exportdetectionstococo": 41, "detection_boxes_list": 41, "detection_scores_list": 41, "detection_classes_list": 41, "cocowrapp": 41, "loadannot": 41, "cocoevalwrapp": 41, "agnostic_mod": 41, "computemetr": 41, "detection_typ": 41, "bbox": [41, 110, 150], "hold": [41, 62, 135], "being": [41, 116], "iou_typ": 41, "iou_thr": [41, 45, 150], "map_point": [41, 45, 150], "cocoev": 41, "To": [41, 56, 95, 96, 97, 98, 99, 102, 104, 105, 106, 109, 113, 115, 116, 133, 135, 139, 152, 154, 157, 159, 162, 163, 164, 166, 169, 171], "mscoco": 41, "org": [41, 110, 147, 157], "Then": [41, 106, 115, 166, 169], "exportsingleimagegroundtruthtococo": 41, "next_annotation_id": 41, "category_id_set": 41, "groundtruth_box": 41, "groundtruth_class": 41, "groundtruth_mask": 41, "groundtruth_is_crowd": 41, "ingest": 41, "api": [41, 45, 58, 73, 74, 91, 97, 99, 104, 106, 110, 113, 117, 119, 123, 126, 129, 141, 146, 147, 151, 164, 165, 169, 173], "here": [41, 97, 98, 102, 103, 106, 115, 135, 139, 140, 141, 143, 144, 149, 150, 160, 164, 165, 166, 172], "match": [41, 42, 98, 105, 113, 137, 163], "ones": [41, 157], "exportsingleimagedetectionstococo": 41, "associ": 41, "uniqu": [41, 106, 160], "identifi": [41, 54, 104, 157, 163], "assign": [41, 91, 139, 159, 169], "continu": [41, 111, 149, 151, 157], "drop": [41, 96, 97, 99, 106, 109, 151, 152, 157, 163, 166, 172], "num_gt_box": 41, "num_detect": [41, 45, 150, 151, 171], "image_height": 41, "image_width": 41, "detection_mask": 41, "crowd": 41, "rais": [41, 46, 113, 133, 157, 158], "valueerror": [41, 142], "insid": [41, 137, 138, 157, 161, 169], "exportsingleimagedetectionboxestococo": 41, "detection_box": [41, 151, 171], "detection_scor": [41, 151, 171], "detection_class": [41, 151, 171], "exporsingleimagedetectionboxestococo": 41, "exportsingleimagedetectionmaskstococo": 41, "allenai": [42, 43], "bi": [42, 43], "att": [42, 43], "flow": [42, 43, 106, 110, 111, 151], "f1_score": [42, 43], "ground_truth": [42, 43], "f1": [42, 44, 45, 139, 150, 151, 165, 172], "ground": [42, 43], "truth": [42, 43], "metric_max_over_ground_truth": [42, 43], "metric_fn": [42, 43], "exact_match_scor": 42, "exact": 42, "averag": [42, 43, 45, 99, 150, 151, 163, 169, 172], "articl": [42, 43], "paragraph": [42, 43], "qa": [42, 43, 113], "normalize_answ": 43, "remov": [43, 108, 151, 157, 167], "extra": [43, 99, 151, 163], "replac": [43, 94, 95, 98, 133, 139, 151, 154, 164], "newlin": [43, 91], "tab": [43, 167], "abc": [43, 114, 167, 169], "harmon": [43, 45], "recal": [43, 45], "equat": [43, 45, 106, 160, 166], "answer_start": 43, "177": [43, 172], "denver": 43, "bronco": 43, "nfl": 43, "afc": 43, "super": [43, 111], "bowl": 43, "50": [43, 106, 111, 115, 157, 166, 172], "56be4db0acb8001400a502ec": 43, "form": [43, 137], "percentag": [43, 99, 132, 163, 171], "bleu_util": 44, "coco_label_map": 44, "coco_tool": 44, "evaluate_squad": 44, "user_metr": [45, 58], "metric_cl": [45, 58, 151], "recommend": [45, 113, 114, 135, 143, 157, 159, 169], "design": [45, 63, 98, 100, 103, 111, 113, 151, 157, 160, 170], "sub_class": [45, 58], "basemetr": [45, 58], "tensorflowmetr": 45, "maintain": [45, 98, 99, 103, 106, 108, 109, 133, 153, 157, 163, 164], "pytorchmetr": 45, "mxnetmetr": 45, "onnxrtqlmetr": 45, "onnxrtitmetr": 45, "metric_registri": 45, "metric_typ": 45, "cross": [45, 105, 145, 169], "decorator_metr": 45, "single_output": 45, "hvd": [45, 139], "wrappytorchmetr": 45, "wrapmxnetmetr": 45, "wraponnxrtmetr": 45, "binari": [45, 142, 150, 164], "proport": 45, "were": [45, 157], "pred_list": 45, "pytorchloss": 45, "print": [45, 91, 105, 106, 139, 150, 151, 157, 166, 169], "mae": [45, 150], "compare_label": [45, 58, 150], "error": [45, 67, 88, 99, 106, 150, 163, 166, 169], "actual": [45, 98, 139], "compar": [45, 91, 95, 98, 99, 104, 106, 138, 150, 154, 157, 160, 163, 165, 167, 169], "pred": [45, 150], "rmse": [45, 150, 169], "squar": [45, 67, 99, 150, 169], "estim": [45, 54, 169], "tensorflowtopk": 45, "k": [45, 58, 150, 157], "among": [45, 95, 106, 154, 166], "outcom": 45, "consid": [45, 108, 132, 133, 137, 169], "find": [45, 62, 91, 104, 114, 149, 157, 163, 165, 166, 167, 169], "num_correct": 45, "num_sampl": 45, "generaltopk": 45, "cocomapv2": [45, 150], "anno_path": [45, 150], "95": [45, 149, 150, 172], "map_kei": 45, "detectionboxes_precis": 45, "output_index_map": [45, 150], "tensorflowmap": 45, "tensorflowcocomap": 45, "tensorflowvocmap": 45, "squadf1": [45, 150], "miou": 45, "num_class": 45, "21": [45, 106, 149, 158, 166, 172], "iou": 45, "intersect": [45, 114, 150], "onnxrtglu": 45, "roc": 45, "dlrm": 45, "register_customer_metr": 45, "mani": [45, 58, 99, 103, 106, 133, 134, 147, 163, 169, 171], "tell": [45, 58, 159], "what": [45, 58, 77, 103, 108, 158], "topk": [45, 58, 139, 150, 151, 160], "matrix": [45, 58, 102, 106], "updat": [45, 58, 99, 142, 149, 150, 151, 157, 163, 166, 169, 170], "across": [46, 95, 104, 136, 151, 154, 157, 161, 166, 169], "frozen": [46, 54, 58, 153], "graph_def": [46, 54, 58, 83], "ckpt": [46, 54, 58, 172], "savedmodel": [46, 54, 58], "onnx_ml_pb2": [46, 153], "modelproto": [46, 82, 153], "gluon": [46, 58, 153], "hybirdblock": [46, 58], "mixed_precis": [46, 151], "obj": [46, 56, 58, 77, 80, 91], "measur": [46, 86, 99, 103, 106, 111, 114, 131, 137, 150, 151, 163, 167, 169], "variou": [46, 95, 98, 100, 103, 116, 146, 154, 157, 159, 161], "dl": [46, 145, 158, 172], "assertionerror": 46, "basemodel": [47, 103], "plai": [47, 99, 106, 158, 163, 166], "graph": [47, 54, 94, 98, 106, 110, 114, 135, 137, 139, 145, 153, 160, 161, 162, 167], "role": [47, 99, 106, 163, 166], "base_model": 48, "keras_model": 48, "mxnet_model": 48, "nets_factori": 48, "onnx_model": 48, "tensorflow_model": 48, "torch_model": 48, "kerasmodel": 49, "get_model_fwk_nam": 50, "fwk": 50, "mxnetmodel": 51, "net": [52, 113], "factori": 52, "tfslimnetsfactori": 52, "onnxmodel": 53, "get_model_typ": 54, "validate_graph_nod": 54, "node_nam": [54, 115], "node": [54, 82, 84, 105, 114, 139, 161, 167, 169, 172], "compat": [54, 109, 139, 153, 157, 164], "graphdef": [54, 153], "validate_and_inference_input_output": 54, "input_tensor_nam": 54, "output_tensor_nam": 54, "infer": [54, 56, 58, 77, 96, 97, 98, 99, 102, 103, 106, 113, 114, 115, 132, 137, 138, 151, 152, 155, 157, 158, 160, 163, 166, 167, 169], "graph_sess": 54, "session": [54, 151, 167], "sess": 54, "graph_def_sess": 54, "frozen_pb_sess": 54, "load_saved_model": 54, "saved_model_tag": 54, "signatur": 54, "tag": [54, 106, 166, 167], "metagraphdef": 54, "analyz": [54, 165, 166, 167], "input_tensor": 54, "output_tensor": 54, "try_loading_kera": 54, "try": [54, 103, 106, 110, 113, 157, 160, 166, 169], "keras_sess": 54, "slim_sess": 54, "checkpoint_sess": 54, "estimator_sess": 54, "input_fn": 54, "saved_model_sess": 54, "tensorflowbasemodel": 54, "tensorflowsavedmodelmodel": 54, "tensorflowllmmodel": 54, "exceed": 54, "protobuf": 54, "2gb": 54, "tensorflowqatmodel": 54, "tensorflowcheckpointmodel": 54, "checkpoint": [54, 90, 153], "tensorflowmodel": 54, "pytorchbasemodel": 55, "pytorchmodel": 55, "pytorchfxmodel": 55, "ipexmodel": 55, "driven": [56, 113, 151, 155, 167], "objective_registri": 56, "objective_custom_registri": 56, "obj_cl": 56, "eural_compressor": 56, "objective_cl": 56, "user_object": 56, "__class__": 56, "__name__": 56, "objective_cfg": 56, "deep_get": [56, 91], "usr_cfg": 56, "deep_set": [56, 91], "user_obj_cfg": 56, "With": [56, 103, 106, 110, 114, 116, 134, 151, 155, 157, 158, 160, 165, 166, 169, 172], "easili": [56, 104, 106, 114, 155, 166], "special": [56, 100, 110, 134, 150, 151, 155, 157, 163], "peak": [56, 105, 155], "memori": [56, 91, 95, 96, 97, 99, 102, 105, 106, 132, 134, 138, 151, 152, 154, 155, 157, 160, 161, 163, 166, 169, 172], "block": [56, 95, 99, 146, 154, 155, 157, 163, 169], "multiobject": 56, "metric_criterion": 56, "metric_weight": 56, "obj_criterion": 56, "obj_weight": 56, "is_measur": 56, "calib_dataload": [58, 101, 102, 103, 104, 110, 113, 134, 135, 144, 145, 150, 151, 160, 161, 162, 163], "calib_func": [58, 162], "entir": [58, 77, 97, 102, 110, 115, 116, 132, 157], "autotunestrategi": 59, "There": [59, 61, 94, 98, 102, 106, 133, 137, 143, 146, 151, 163, 166, 169, 171], "onc": [59, 61, 115, 116, 134, 157, 158, 169, 172], "polici": [59, 61, 67, 104, 108, 113, 171, 173], "automixedprecisiontunestrategi": 60, "basictunestrategi": 61, "bayesiantunestrategi": 62, "acq_max": 62, "ac": 62, "gp": 62, "y_max": 62, "n_warmup": 62, "10000": [62, 157], "n_iter": 62, "acquisit": 62, "gaussian": [62, 169], "relev": [62, 115, 116, 133, 157], "known": [62, 95, 151, 154, 157, 160, 167, 169], "limit": [62, 91, 95, 99, 100, 103, 113, 137, 149, 154, 160, 163, 167], "acq": 62, "randomst": 62, "scipi": 62, "x_max": 62, "targetspac": 62, "pbound": 62, "9527": [62, 151, 171], "append": [62, 110, 138, 151, 156], "while": [62, 96, 98, 99, 103, 106, 114, 115, 135, 140, 146, 152, 157, 159, 160, 163, 166], "duplic": 62, "bayesianoptim": 62, "verbos": [62, 84], "conservativetunestrategi": 63, "o0": [63, 169], "who": [63, 108], "exhaustivetunestrategi": 64, "hawq_v2tunestrategi": 65, "hawq": [65, 169], "v2": [65, 97, 134, 139, 141, 142, 149, 164, 166, 169, 172], "hessian": [65, 99, 163, 169], "network": [65, 95, 106, 111, 132, 137, 138, 141, 151, 154, 158, 160, 166, 169], "made": [65, 106, 114, 160, 164, 169], "small": [65, 99, 106, 111, 157, 163, 169, 172], "impact": [65, 157, 164, 169], "auto_mixed_precis": 66, "msetunestrategi": 67, "those": [67, 91, 98, 103, 106, 137, 138, 145, 151, 152, 156, 157, 160, 169], "mse_v2tunestrategi": 68, "revert": [68, 76, 169], "fx": [68, 94, 96, 98, 146, 152, 158, 160, 162], "randomtunestrategi": 69, "strategy_registri": [70, 169], "tunestrategi": [70, 169], "tunestrategymeta": 70, "metaclass": 70, "tuning_sampl": 72, "tuning_spac": [72, 73, 75], "tuning_struct": [72, 73, 74], "tuningord": 73, "Not": [73, 74, 91, 111, 133], "tuningsampl": 73, "tuningspac": [73, 74], "tuning_order_lst": 73, "initial_op_tuning_cfg": 73, "modelwisetuningsampl": 73, "tuning_items_prior": 73, "op_dtype_dict": 73, "optuningconfig": [73, 74, 75], "optypewisetuningsampl": 73, "opwisetuningsampl": 73, "fallbacktuningsampl": 73, "op_dtyp": 73, "accumul": [73, 95, 99, 154, 169], "skip_first": 73, "lowerbitssampl": 73, "blockfallbacktuningsampl": 73, "op_block_lst": 73, "target_dtyp": 73, "smoothquantsampl": 73, "alpha_list": 73, "weightonlyquantsampl": 73, "tuningitem": 74, "item_typ": 74, "capabl": [74, 96, 99, 106, 115, 116, 131, 143, 151, 152, 157, 159, 160, 169, 171], "intern": [74, 134, 135, 150, 157], "merg": [74, 105, 167, 169], "tree": 74, "pattern_to_intern": 74, "default_dtyp": 74, "pattern_to_path": 74, "quant_mode_from_pattern": 74, "internal_pattern": 74, "initial_tuning_cfg_with_quant_mod": 74, "op_name_typ": 74, "quant_mod": [74, 115, 116], "cfg": [74, 80, 115, 116], "step1": 74, "step2": 74, "complet": [74, 114, 115, 157, 160, 169, 171, 172], "step3": 74, "step4": 74, "step5": 74, "op_typ": [75, 97, 98], "op_quant_mod": 75, "quanttyp": 76, "quantopt": 76, "quant_typ": 76, "quant_opt": 76, "preprocess_user_cfg": 76, "op_user_cfg": 76, "op_user_cfg_modifi": 76, "group_siz": [76, 99, 104, 163], "32": [76, 95, 96, 103, 104, 139, 145, 154, 163, 172], "ordereddefaultdict": 76, "extract_data_typ": 76, "data_typ": 76, "sign": [76, 99, 106, 109, 113, 116, 132, 158, 160, 163, 165], "unsign": [76, 116, 163], "reverted_data_typ": 76, "signed_flag": 76, "get_adaptor_nam": 76, "build_slave_faker_model": 76, "slave": [76, 169], "virtual": [76, 158], "classregist": 76, "loop": [77, 110, 111, 115, 116, 143, 165, 169], "compressionmanag": 77, "deal": 77, "pruningconfig": 77, "orchestr": [77, 113, 146, 170], "callback": [77, 80, 110, 151, 156, 157, 160], "on_train_begin": [77, 110, 137, 138, 151, 156, 157, 160], "train_loop": [77, 151, 156], "epoch": [77, 134, 137, 138, 139, 151, 156, 157, 171], "on_epoch_begin": [77, 80, 137, 138, 151, 156], "batch": [77, 99, 134, 137, 138, 151, 156, 157, 160, 166, 168, 169, 172], "on_step_begin": [77, 80, 137, 138, 151, 156, 157], "on_after_compute_loss": [77, 137, 138, 151, 156], "backward": [77, 106, 137, 138, 139, 151, 156, 157, 160, 164], "on_before_optimizer_step": [77, 137, 138, 151, 156, 157], "on_step_end": [77, 80, 137, 138, 151, 156], "on_epoch_end": [77, 80, 137, 138, 151, 156], "on_train_end": [77, 137, 138, 151, 156, 157, 160], "path_to_sav": 77, "train_func": [77, 139, 151, 160], "top1": [77, 150, 157, 160, 172], "callbacks_list": 77, "layerhistogramcollector": 78, "histogram": [78, 91, 167], "num_bin": 78, "8001": 78, "layer_tensor": 78, "include_lay": 78, "collector": 78, "diverg": [78, 86, 116, 132, 137, 169], "get_func_from_config": 80, "func_dict": 80, "get_preprocess": 80, "get_metr": 80, "get_postprocess": 80, "get_algorithm": 80, "create_dataset": 80, "data_sourc": 80, "cfg_preprocess": 80, "cfg_filter": 80, "create_dataload": 80, "dataloader_cfg": 80, "create_eval_func": 80, "postprocess_cfg": 80, "interfac": [80, 96, 98, 100, 103, 106, 146, 151, 160, 164], "baselin": [80, 104, 165, 166, 167], "create_train_func": 80, "train_cfg": 80, "hook": [80, 137, 138, 151, 157, 166, 167], "Their": 80, "qlinear2qdq": 81, "check_model": 82, "onnx_qlinear_to_qdq": 82, "input_name_to_nod": 82, "qlinearop": [82, 146, 160, 172], "destin": 82, "tf_to_fp32_onnx": 83, "save_path": [83, 84, 114, 153], "inputs_as_nchw": 83, "tool": [83, 91, 106, 113, 114, 151, 157, 158, 160], "tf_to_int8_onnx": 83, "int8_model": [83, 84], "get_node_map": 84, "fp32_model": [84, 91, 97, 98, 102, 103, 161, 163], "fp32_onnx_path": 84, "module_node_map": 84, "get_quantizable_onnx_op": 84, "quantize_nod": 84, "dynamic_quant_export": 84, "pt_fp32_model": 84, "pt_int8_model": 84, "q_config": [84, 114], "weight_typ": 84, "s8": 84, "static_quant_export": 84, "_quantiz": 84, "torch_to_fp32_onnx": 84, "do_constant_fold": 84, "fold": [84, 97, 99, 143, 163, 166], "torch_to_int8_onnx": 84, "auxiliari": 85, "collect_layer_histogram": 85, "create_obj_from_config": 85, "kl_diverg": 85, "load_huggingfac": [85, 151], "weights_detail": 85, "pretrain": 87, "optimizedmodel": 87, "from_pretrain": [87, 113, 151], "save_for_huggingface_upstream": [87, 151], "output_dir": [87, 100, 151], "export_compressed_model": [87, 163], "saved_dir": [87, 163], "use_optimum_format": [87, 163], "enable_full_rang": [87, 99, 161, 163], "compression_dtyp": [87, 163], "int32": [87, 99, 135, 163], "compression_dim": [87, 163], "scale_dtyp": [87, 99, 163], "_type_": 87, "leverag": [87, 94, 98, 101, 104, 106, 111, 113, 137, 141, 156, 160, 163, 169], "symmetr": [87, 103, 116, 160, 163, 168, 169], "comoress": 87, "float16": [87, 99, 135, 163], "msg": 88, "debug": [88, 169], "fatal": 88, "warn": [88, 133], "alia": [88, 91], "is_int8_model": 90, "load_weight_onli": 90, "checkpoint_dir": 90, "layer_wis": [90, 161], "qconfig": [90, 99, 163, 167], "best_model": [90, 96, 101, 102, 103, 104, 163], "pt": [90, 99, 147, 153, 158, 160, 162, 163], "history_cfg": 90, "best_configur": 90, "best_model_weight": 90, "snapshot": 90, "recover_model_from_json": 90, "json_file_path": 90, "recov": [90, 91, 114, 138], "cfg_from_fil": 91, "yaml_fil": [91, 135, 139], "version1_lt_version2": 91, "version1": 91, "version2": 91, "version1_gt_version2": 91, "greater": [91, 103, 157, 169], "version1_eq_version2": 91, "version1_gte_version2": 91, "version1_lte_version2": 91, "time_limit": 91, "context": [91, 99, 106, 159, 163], "get_siz": 91, "seen": [91, 114], "recurs": 91, "compute_spars": 91, "non": [91, 99, 110, 163, 169], "fault_tolerant_fil": 91, "temporari": [91, 108], "equal_dict": 91, "d1": 91, "d2": 91, "compare_kei": 91, "ignore_kei": 91, "except": [91, 99, 133, 160, 161], "ignor": [91, 99, 106, 132, 135, 163, 166, 169], "combine_histogram": 91, "old_hist": 91, "arr": 91, "old": [91, 97, 151, 164], "get_tensor_histogram": 91, "tensor_data": [91, 92], "bin": [91, 142], "2048": [91, 99, 113, 163], "get_all_fp32_data": 91, "get_tuning_histori": 91, "tuning_history_path": 91, "num": 91, "offlin": [91, 97, 102, 103, 106, 108, 151, 160, 166], "str2arrai": 91, "dequantize_weight": 91, "weight_tensor": 91, "min_filter_tensor": 91, "max_filter_tensor": 91, "dequant": [91, 106, 110, 115, 166, 167], "scale_info": 91, "captureoutputtofil": 91, "tmp_file_path": 91, "stream": [91, 172], "sy": [91, 133], "stderr": 91, "captur": [91, 98, 99], "global_st": 91, "load_data_from_pkl": 91, "pkl": 91, "dump_data_to_loc": 91, "show_memory_info": 91, "hint": 91, "show": [91, 95, 106, 108, 137, 139, 151, 154, 166, 169], "dump_class_attr": 91, "dot": [91, 96, 106, 152, 160], "nest": 91, "person": [91, 108, 158], "john": 91, "deep": [91, 95, 96, 103, 106, 113, 114, 115, 134, 146, 147, 151, 152, 154, 158, 160, 169, 170], "sex": [91, 108], "male": 91, "compare_object": 91, "obj1": 91, "obj2": 91, "ignore_attr": 91, "comparison": [91, 163, 164, 167], "alias_param": 91, "param_nam": 91, "param_alia": 91, "alias": [91, 133], "print_tabl": 91, "column_map": 91, "table_entri": 91, "titl": [91, 148, 169], "insert_newlin": 91, "tabl": [91, 95, 116, 141, 154, 172], "prettyt": 91, "column": [91, 99, 106, 163, 166], "handler": [91, 169], "row": [91, 106, 166], "decim": 91, "get_tensors_info": 91, "workload_loc": 91, "about": [91, 108, 133, 134, 151, 157, 162, 169, 170, 172], "workload": [91, 158], "get_weights_detail": 91, "weightdetail": 91, "dump_tabl": 91, "filepath": [91, 133], "file_typ": 91, "csv": [91, 111], "extens": [91, 96, 97, 98, 100, 106, 111, 113, 114, 133, 143, 146, 147, 149, 151, 152, 153, 157, 158, 160, 163, 166, 169, 171], "dump_table_to_csv": 91, "get_number_of_socket": 91, "platform": [91, 105, 106, 113, 146, 158, 160], "opentri": 91, "activation_min": 91, "activation_max": 91, "entri": [91, 100, 133, 148], "print_op_list": 91, "get_op_list": 91, "minmax_file_path": 91, "input_model_tensor": 91, "optimized_model_tensor": 91, "activation_min_max": 91, "calculate_ms": 91, "mse_metric_gap": 91, "fp32_tensor": 91, "dequantize_tensor": 91, "euclidean": [91, 137], "distanc": [91, 137], "check_key_exist": 91, "weightsdetail": 92, "input_tensor_data": 92, "optimized_tensor_data": 92, "weightsstatist": 92, "bitwidth": 94, "factor": [94, 97, 99, 103, 106, 163, 166, 172], "whole": [94, 106, 116, 160, 172], "observ": [94, 98, 99, 100, 116, 163, 165, 167, 169], "runtim": [94, 106, 109, 113, 114, 115, 117, 134, 140, 143, 146, 152, 154, 159, 163, 169], "w8a8": [94, 98, 99, 106, 161, 163], "x86inductorquant": 94, "four": [94, 98, 104, 167, 172], "prepar": [94, 95, 97, 98, 99, 100, 103, 106, 110, 135, 139, 144, 157, 160], "neural_compressor": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 111, 113, 116, 131, 133, 134, 135, 137, 138, 139, 141, 144, 145, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 168, 169, 171], "dynamicquantconfig": 94, "userfloatmodel": [94, 98], "eager": [94, 98, 99, 100, 113, 139, 146, 160, 162, 167], "exported_model": [94, 98], "quant_config": [94, 95, 97, 98, 99, 100, 101, 102, 103, 154], "prepared_model": [94, 97, 98], "q": [94, 98, 100, 106, 163, 166], "dq": [94, 98, 100, 106, 166], "_inductor": [94, 98], "freez": [94, 98, 157], "opt_model": [94, 98, 151], "set_loc": [94, 97, 98, 99, 100, 101], "releas": [94, 98, 113, 147, 173], "breakthrough": [95, 154], "emerg": [95, 154, 166], "analysi": [95, 154, 157, 165], "chatbot": [95, 154, 158], "fuel": [95, 154], "llm": [95, 97, 98, 99, 102, 106, 154, 157, 158, 161, 163, 166], "nevertheless": [95, 154], "power": [95, 103, 137, 151, 154, 158], "come": [95, 149, 154, 169], "challeng": [95, 154, 161], "explos": [95, 154], "growth": [95, 96, 151, 152, 154, 157], "pose": [95, 154, 161], "obstacl": [95, 154], "practic": [95, 154], "preserv": [95, 99, 132, 154, 157, 163], "ai": [95, 113, 154, 158, 162, 170], "mx": [95, 100, 154], "promot": [95, 99, 154], "microsoft": [95, 113, 114, 154], "msfp": [95, 154], "mxfp8": [95, 154], "fp8": [95, 100, 113, 154, 158], "e5m2": [95, 154], "e8m0": [95, 154], "e4m3": [95, 154], "mxfp6": [95, 154], "fp6": [95, 154], "e3m2": [95, 154], "e2m3": [95, 154], "mxfp4": [95, 154], "fp4": [95, 99, 113, 154, 163], "e2m1": [95, 99, 154, 163], "mxint8": [95, 154], "At": [95, 109, 115, 154, 169], "equival": [95, 97, 99, 102, 106, 113, 154, 158, 163, 166], "demonstr": [95, 104, 113, 140, 154, 167], "abil": [95, 114, 115, 135, 143, 154, 166], "occupi": [95, 154], "incur": [95, 154], "energi": [95, 154], "cost": [95, 99, 106, 154, 160, 163], "silicon": [95, 154], "seamlessli": [95, 154, 157, 169], "offer": [95, 103, 135, 154], "meticul": [95, 154], "craft": [95, 154], "empow": [95, 154], "sacrif": [95, 154, 158], "workflow": [95, 113, 115, 116, 137, 141, 147, 152, 154, 167, 170], "shown": [95, 97, 106, 111, 134, 137, 150, 151, 154, 155, 156, 157, 161, 166, 169], "explor": [95, 114, 154], "focus": [95, 99, 103, 108, 114, 154], "distinct": [95, 154], "friendli": [95, 106, 143, 151, 154, 158, 166, 171], "adapt": [95, 108, 115, 135, 154, 158], "granular": [95, 106, 114, 115, 116, 143, 146, 154, 160, 166, 171], "fall": [95, 154], "consumpt": [95, 106, 154, 166], "frac": [95, 106, 154, 166], "amax": [95, 154], "blocksiz": [95, 154], "expon": [95, 154], "floor": [95, 154], "log2": [95, 154], "represent": [95, 99, 106, 108, 110, 132, 138, 154, 157, 160], "rmin": [95, 103, 106, 154, 160], "mxquantconfig": [95, 154], "w_dtype": [95, 97, 98, 154], "act_dtyp": [95, 97, 98, 101, 154], "woq": [95, 149, 154], "user_model": [95, 154], "darvish": [95, 154], "rouhani": [95, 154], "bita": [95, 154], "et": [95, 99, 106, 132, 154, 163, 166], "al": [95, 99, 106, 132, 154, 163, 166], "push": [95, 99, 106, 109, 154, 157, 163, 166], "narrow": [95, 154], "inferenc": [95, 154], "cloud": [95, 109, 113, 154, 158], "33": [95, 149, 154, 172], "2020": [95, 154], "10271": [95, 154], "10281": [95, 154], "ocp": [95, 154], "learn": [95, 96, 99, 103, 106, 113, 114, 115, 134, 135, 141, 145, 146, 147, 151, 152, 154, 157, 158, 160, 166, 167, 169, 170], "arxiv": [95, 99, 106, 113, 132, 154, 157, 158, 163, 166], "preprint": [95, 99, 106, 132, 154, 157, 163, 166], "2310": [95, 154], "10537": [95, 154], "2023": [95, 99, 106, 113, 154, 157, 163, 166], "recent": [96, 151, 152], "significantli": [96, 99, 151, 152, 157, 169], "propos": [96, 99, 106, 111, 114, 137, 152, 163, 166], "googl": [96, 113, 133, 152, 158], "bfloat16": [96, 152, 162], "ieee": [96, 106, 152, 166], "half": [96, 99, 152], "wide": [96, 99, 106, 113, 140, 152, 157, 160], "sixteen": [96, 152], "bandwidth": [96, 99, 106, 151, 152, 163], "3rd": [96, 106, 152, 158, 160, 162], "gen": [96, 106, 149, 152, 158, 160, 162], "xeon": [96, 105, 106, 113, 147, 148, 149, 152, 158, 160, 162, 172], "scalabl": [96, 103, 106, 113, 147, 149, 152, 158, 160, 162], "codenam": [96, 149, 152], "cooper": [96, 147, 152, 158], "lake": [96, 147, 152, 158], "boost": [96, 113, 152, 157, 158], "purpos": [96, 97, 98, 99, 101, 143, 152, 159, 160], "x86": [96, 152], "instruct": [96, 97, 106, 115, 116, 137, 147, 152, 157, 158, 159, 160, 166, 172], "part": [96, 106, 110, 147, 152, 157, 161, 166, 170], "avx512": [96, 106, 152, 160], "vcvtne2ps2bf16": [96, 152], "vcvtneps2bf16": [96, 152], "vdpbf16p": [96, 152], "product": [96, 106, 146, 152, 158, 160, 165, 169], "found": [96, 113, 133, 137, 149, 152, 166, 169, 172], "publish": [96, 108, 148, 149, 152, 166], "4th": [96, 106, 149, 158, 160], "isa": 96, "vector": 96, "512": [96, 99], "avx": 96, "16": [96, 135, 147, 163, 172], "754": 96, "complement": [96, 157], "fbgemm": [96, 152, 160], "10004": [96, 99, 100, 105, 110, 111, 114, 134, 137, 138, 139, 143, 146, 152, 154, 156, 159, 161, 163, 171], "avx512_bf16": [96, 152], "11": [96, 106, 147, 150, 152, 166, 169, 172], "avx512_fp16": 96, "mai": [96, 99, 102, 106, 108, 109, 115, 132, 133, 141, 142, 148, 152, 158, 160, 163, 166, 169], "mixprecisionconfig": 96, "eval_acc_fn": [96, 101, 103], "acc": [96, 101, 111, 149, 157, 167, 172], "might": [96, 110, 133, 169], "custom_tune_config": [96, 101, 102, 103, 104], "build_torch_model": 96, "acceler": [97, 99, 102, 106, 113, 137, 151, 157, 158, 162, 163, 166, 169], "gigant": [97, 102, 166], "systemat": [97, 102, 166], "outlier": [97, 99, 102, 106, 115, 132, 163, 166], "quantif": [97, 99, 102, 163, 166], "difficult": [97, 102, 104, 106, 114, 166], "migrat": [97, 102, 106, 166, 170], "difficulti": [97, 102, 106, 166], "mathemat": [97, 102, 106, 166], "smoothquantconfig": [97, 102, 103], "run_fn": [97, 98, 99, 100], "descript": [97, 110, 115, 116, 134, 166], "stai": [97, 99, 100, 163, 166], "achiev": [97, 98, 99, 100, 101, 104, 106, 141, 149, 151, 156, 157, 158, 160, 166, 167, 169], "abov": [97, 98, 99, 101, 106, 114, 115, 116, 137, 157, 160, 166, 169], "lambada": [97, 166], "openai": [97, 166], "sweet": [97, 166], "spot": [97, 166], "region": [97, 166], "paper": [97, 99, 106, 137, 157, 163, 166], "bigscienc": [97, 149, 166, 172], "bloom": [97, 106, 113, 149, 157, 166, 172], "560m": [97, 166], "354": [97, 166], "3542": [97, 166], "1b7": [97, 149, 166], "4634": [97, 166], "4936": [97, 166], "3b": [97, 149, 166], "518": [97, 166], "5185": [97, 166], "7b1": [97, 166, 172], "5764": [97, 166, 172], "5977": [97, 166], "bloomz": [97, 166, 172], "3947": [97, 166], "3930": [97, 166], "4828": [97, 166], "4906": [97, 166], "5018": [97, 166], "4980": [97, 166], "5593": [97, 166, 172], "5552": [97, 166], "facebook": [97, 149, 166, 172], "opt": [97, 106, 113, 149, 157, 166, 169, 172], "125m": [97, 113, 166], "379": [97, 166], "3757": [97, 166], "350m": [97, 166], "4516": [97, 166], "4533": [97, 166], "5789": [97, 166], "5742": [97, 166], "7b": [97, 149, 166, 172], "6365": [97, 166], "6404": [97, 166], "6769": [97, 166, 172], "6804": [97, 166, 172], "13b": [97, 149, 166, 172], "6872": [97, 166], "6814": [97, 166], "30b": [97, 149, 166, 172], "7149": [97, 166], "7128": [97, 166], "66b": [97, 166], "7398": [97, 166], "7326": [97, 166], "llama": [97, 113, 149, 157, 158, 161, 163, 166, 172], "7361": [97, 166, 172], "7357": [97, 166], "7627": [97, 166, 172], "7590": [97, 166], "7759": [97, 166, 172], "7840": [97, 166], "65b": [97, 166], "7908": [97, 166], "7957": [97, 166], "eleutherai": [97, 113, 149, 166, 172], "gpt": [97, 113, 149, 157, 166, 172], "j": [97, 106, 113, 149, 157, 166, 172], "6b": [97, 149, 166, 172], "6831": [97, 166, 172], "6821": [97, 106, 166], "mbzuai": [97, 166], "lamini": [97, 157, 166], "124m": [97, 166], "3804": [97, 166], "3887": [97, 166], "774m": [97, 166], "5048": [97, 166], "5057": [97, 166], "5b": [97, 166], "5443": [97, 166, 172], "5436": [97, 166], "mosaicml": [97, 166, 172], "mpt": [97, 157, 166, 172], "chat": [97, 149, 166, 172], "655": [97, 166, 172], "6499": [97, 166], "stabilityai": [97, 166], "stablelm": [97, 166], "4172": [97, 166], "4149": [97, 166], "togethercomput": [97, 166], "redpajama": [97, 166], "incit": [97, 166], "6542": [97, 166], "6735": [97, 166], "6718": [97, 166], "6740": [97, 166, 172], "6569": [97, 166], "6621": [97, 166], "v0": [97, 149, 166, 167], "7143": [97, 166], "7221": [97, 166], "6895": [97, 166], "6953": [97, 166, 172], "databrick": [97, 149, 166, 172], "dolli": [97, 149, 157, 166, 172], "6866": [97, 166, 172], "6297": [97, 166], "6247": [97, 166], "tiiuae": [97, 149, 166, 172], "falcon": [97, 113, 149, 157, 166, 172], "6437": [97, 166, 172], "6392": [97, 166], "asterisk": [97, 166], "gt": [97, 99, 135, 166, 168], "retrain": [98, 138], "involv": 98, "improv": [98, 99, 106, 109, 132, 133, 151, 157, 158, 160, 162, 163, 169, 172], "philosophi": [98, 103, 160], "request": [98, 113, 160], "would": [98, 106, 109, 151, 157, 160, 166], "appropri": [98, 104, 106, 108, 132, 166], "crucial": [98, 157], "occur": 98, "jit": [98, 166, 167], "effect": [98, 99, 114, 157, 158], "intel_extension_for_pytorch": 98, "staticquantconfig": [98, 101, 102, 103, 104], "act_sym": [98, 101, 103, 104], "act_algo": 98, "minmax": [98, 115, 116, 132, 143, 160, 171], "begin": [98, 133, 134, 137, 138, 151, 157, 169], "program": [98, 113, 139, 148], "fc1": 98, "dynamo": [98, 100], "qd": 98, "final": [98, 106, 115, 151, 155, 157, 160, 164, 169], "As": [99, 106, 110, 115, 134, 137, 150, 151, 157, 163, 169], "becom": [99, 106, 114, 141, 157, 163], "preval": [99, 106, 163], "grow": [99, 106, 163], "demand": [99, 106, 163], "modern": [99, 106, 163], "trade": [99, 106, 163], "off": [99, 106, 109, 163], "bottleneck": [99, 106, 163], "deploi": [99, 104, 106, 109, 137, 151, 163, 169], "roughli": [99, 106, 163], "speak": [99, 106, 163], "move": [99, 106, 110, 159, 163, 164], "count": [99, 106, 111, 135, 163], "p": [99, 106, 163], "theoret": [99, 106, 160, 163], "capac": [99, 106, 163, 165], "flop": [99, 106, 163], "forward": [99, 106, 115, 151, 157, 159, 160, 163, 166, 167], "f": [99, 106, 133, 137, 139, 160, 163, 166], "famou": [99, 106, 163], "next": [99, 106, 111, 115, 116, 134, 159, 163, 169], "scenario": [99, 100, 106, 114, 131, 137, 151, 157, 163], "approx": [99, 106, 163], "bmm": [99, 106, 163], "past": [99, 106, 114, 163], "howev": [99, 106, 157, 163, 166], "100x": [99, 106, 163], "besid": [99, 106, 114, 137, 163], "mention": [99, 106, 157, 163], "main": [99, 100, 101, 103, 105, 106, 110, 134, 139, 151, 157, 160, 163], "reason": [99, 106, 108, 115, 134, 163, 167, 169], "caus": [99, 106, 115, 134, 157, 163], "straightforward": [99, 103, 106, 157, 163, 166], "group": [99, 106, 113, 146, 157, 163, 167, 168, 169, 172], "introduc": [99, 106, 114, 115, 116, 143, 151, 160, 163, 164, 166, 170], "think": [99, 163], "veri": [99, 106, 151, 160, 163, 169, 170], "intuit": [99, 106, 163, 166], "uniformli": [99, 163], "qlora": [99, 106, 163], "uniform": [99, 132, 163], "nf4": [99, 113, 163], "prove": [99, 106, 132, 163, 166], "shot": [99, 103, 111, 146, 151, 157, 158, 163], "highli": [99, 158, 163], "invers": [99, 163], "share": [99, 106, 142, 143, 163, 166, 169], "restor": [99, 163], "tailor": 99, "consist": [99, 109, 110, 133, 166, 169], "deliv": [99, 151, 158, 164], "often": [99, 134, 137, 156, 157], "outperform": [99, 111], "signround": 99, "protect": [99, 163], "salient": [99, 157, 163], "greatli": [99, 161, 163], "big": [99, 163], "trainabl": [99, 113, 158, 163], "inspir": [99, 163], "rather": [99, 145, 163], "addition": [99, 116, 139, 157, 169], "incorpor": [99, 115, 116, 138, 157, 169], "l": [99, 105, 132, 137, 167, 169], "norm": 99, "hyper": [99, 171], "laplacian": 99, "heavi": [99, 138], "tail": 99, "nuanc": 99, "weightonlyqu": 99, "c_": [99, 163], "use_sym": [99, 104], "quant_lm_head": 99, "use_double_qu": 99, "double_quant_dtyp": 99, "double_quant_bit": 99, "double_quant_use_sym": 99, "double_quant_group_s": 99, "along": [99, 147, 157, 163], "normalfloat": [99, 163], "bnb": [99, 163], "lm": [99, 157], "head": [99, 157], "emb": 99, "doubl": [99, 158], "rtn_arg": [99, 161, 163], "comment": [99, 105, 108, 115, 135, 150, 151, 163, 168], "group_dim": [99, 163], "use_full_rang": 99, "use_mse_search": 99, "use_layer_wis": 99, "model_path": 99, "state_dict": [99, 139, 163, 167], "rtnconfig": [99, 100, 104], "gptq_arg": [99, 163], "act_ord": 99, "diagon": [99, 163], "rearrang": [99, 157, 163], "percdamp": [99, 163], "stabil": [99, 163], "block_siz": [99, 163], "c_out": 99, "static_group": [99, 163], "mitig": [99, 163], "actord": [99, 163], "gptqconfig": [99, 104], "autoround_arg": 99, "lr_schedul": [99, 151, 157], "rate": [99, 106, 151, 157, 160], "enable_quanted_input": 99, "enable_minmax_tun": 99, "minmax_lr": 99, "low_gpu_mem_usag": 99, "seqlen": [99, 113], "n_sampl": 99, "rand": [99, 106, 166], "n_block": [99, 163], "gradient_accumulate_step": 99, "gradient": [99, 106, 113, 146, 151, 157, 158, 172], "not_use_best_ms": 99, "dynamic_max_gap": 99, "gap": [99, 153], "autoroundconfig": 99, "awq_arg": [99, 163], "use_auto_scal": 99, "use_auto_clip": 99, "clip": [99, 106, 163, 166], "awqconfig": 99, "teq_arg": 99, "teqconfig": 99, "train_fn": 99, "hqq_arg": 99, "quant_zero": 99, "quant_scal": 99, "scale_quant_group_s": 99, "hqqconfig": 99, "lm_head": [99, 157, 163], "lm_head_config": 99, "quantit": 99, "weightonlylinear": [99, 163], "flexibl": [99, 103, 113, 137, 157, 163], "storag": [99, 106, 144, 150, 163, 166], "date": [99, 163], "saved_result": [99, 100, 153, 163], "orig_model": 99, "yourmodel": 99, "loaded_model": 99, "original_model": 99, "xiao": [99, 106, 163, 166], "guangxuan": [99, 106, 163, 166], "2211": [99, 106, 163, 166], "10438": [99, 106, 163, 166], "wei": [99, 106, 163, 166], "xiui": [99, 106, 163, 166], "suppress": [99, 106, 163, 166], "2209": [99, 106, 163, 166, 172], "13325": [99, 106, 163, 166], "lin": [99, 106, 163], "ji": [99, 106, 163], "2306": [99, 106, 163], "00978": [99, 106, 163], "frantar": [99, 106, 157, 163], "elia": [99, 106, 163], "2210": [99, 106, 163], "17323": [99, 106, 163], "cheng": [99, 106], "wenhua": [99, 106], "via": [99, 106, 108, 113, 139, 146, 151, 157, 158], "descent": [99, 106, 113, 158], "2309": [99, 106], "05516": [99, 106], "badri": 99, "hicham": 99, "shaji": 99, "appu": 99, "quadrat": 99, "onlin": [99, 108, 165], "mobiusml": 99, "io": 99, "hqq_blog": 99, "dettmer": [99, 106, 163], "tim": [99, 106, 163], "finetun": [99, 106, 157, 163], "2305": [99, 106, 163], "14314": [99, 106, 163], "integr": [100, 103, 106, 114, 151, 163], "grain": [100, 157, 158, 169], "comprehens": [100, 103, 151, 170], "varieti": [100, 104, 140, 159, 169], "classic": [100, 169], "latest": [100, 113, 147, 158, 164], "research": [100, 113, 148, 166, 172], "simul": [100, 116], "emul": [100, 106, 151, 160], "term": [100, 103, 109, 132, 137, 148, 150, 155, 156, 169], "eas": [100, 103, 147, 158], "commit": [100, 103, 108, 109], "extend": [100, 115, 116], "hand": [100, 103, 111], "reus": 100, "conveni": [100, 151], "discuss": [100, 113], "far": 100, "still": [100, 102, 106, 132, 151, 158, 160, 162], "reli": [100, 151, 166], "plan": [100, 146], "arbitrari": [100, 151, 156], "deploy": [100, 136, 158, 161, 166], "One": [100, 116, 133, 135, 139, 146, 157, 158, 169], "scope": [100, 109, 115, 151], "direct": [100, 157], "inplac": 100, "place": [100, 138, 147, 157, 167, 169], "run_arg": 100, "_description_": 100, "renam": [100, 164], "previou": [100, 106, 115, 116, 151, 157, 164, 166, 167, 169, 170, 172], "orig_sav": 100, "suggest": [100, 110, 133, 165], "statu": [100, 105, 108, 134, 154, 155, 157], "rtn": [100, 106, 133, 161, 163], "gptq": [100, 106, 133, 149, 161, 163], "awq": [100, 106, 161, 163], "autoround": [100, 106, 113, 149], "teq": [100, 113, 158, 161, 163], "hqq": 100, "trane": 100, "torchdynamo": 100, "pytorchdynamo": 100, "logic": [100, 171], "torchimport": 100, "operator_name_or_list": 100, "demo": [100, 151], "mlp": [100, 157], "conv1d": [100, 116], "fundament": [101, 102, 132, 151], "fulli": [101, 151, 160, 166], "respons": [101, 160], "val_dataset": [101, 151, 160], "val_dataload": [101, 151, 160], "mydataload": [101, 103, 104], "quantize_model": [101, 102, 103, 106], "qmodel": [101, 103], "good": [101, 108, 160, 169], "autotun": [101, 102, 103, 106, 133], "weight_sym": [101, 103, 104], "static_qu": [101, 133], "weight_dtyp": 101, "weight_granular": 101, "per_tensor": [101, 115, 116, 143, 160, 171], "act_granular": 101, "from_dict": 101, "conv2d_config": 101, "output_graph_def": 102, "sq_config": 102, "static_config": 102, "fusion": [102, 110, 114, 143], "look": [102, 114, 116, 143, 150, 166, 171], "eval_fn_wrapp": 102, "consider": [102, 166], "amount": [102, 166], "saved_model": [103, 161], "experi": [103, 108, 165, 166, 169], "calib_iter": [103, 115], "rule": [103, 157], "partial": [103, 157, 160], "particularli": 103, "critic": [103, 108], "And": [103, 106, 109, 110, 131, 133, 151, 166], "supplement": 103, "baseline_model": [103, 104], "asymmetr": [103, 116, 160, 163, 169], "onednn": [103, 152, 160], "ab": [103, 106, 157, 160, 166], "rmax": [103, 106, 160], "sq": [103, 149, 166], "unseen": [103, 106, 160], "zeropoint": [103, 106, 160], "unlik": 103, "tradit": [103, 157], "signific": [103, 106, 157, 158, 161, 166], "refin": [103, 145, 157], "instal": [103, 139, 142, 144, 173], "aim": [104, 111, 113, 149, 157, 166, 169, 170], "help": [104, 106, 133, 149, 153, 163, 169, 170], "quickli": [104, 149, 169], "despit": 104, "consum": [104, 134], "certain": [104, 165], "predefin": 104, "primari": [104, 132, 169], "get_woq_tuning_config": 104, "travers": [104, 115, 116, 163, 169], "compon": [104, 110, 133, 139, 147, 148, 156, 157], "incbench": 105, "launch": [105, 152], "numa": 105, "therefor": [105, 106, 110, 151, 157, 160, 161, 164, 166], "linux": [105, 131, 142], "num_inst": 105, "num_cores_per_inst": 105, "num_cores_on_numa": 105, "visibl": 105, "cross_memori": 105, "alloc": 105, "insuffici": 105, "num_i": 105, "num_c": 105, "24": [105, 157, 169, 172], "47": [105, 149, 172], "messag": [105, 109, 169], "throughput_pattern": 105, "hroughput": 105, "za": 105, "z": [105, 106, 132, 133, 137, 166], "latency_pattern": 105, "atenc": 105, "3f": 105, "sec": [105, 172], "invent": [106, 160], "speed": [106, 132, 151, 157, 158, 160, 169], "int4": [106, 113, 149, 160, 172], "mainli": [106, 113, 151, 157, 160], "miss": [106, 157, 160], "On": [106, 160, 172], "4x": [106, 111, 160], "speedup": [106, 140, 146, 160], "255": [106, 160, 166], "math": [106, 160], "sometim": [106, 110, 160], "overflow": [106, 160], "issu": [106, 108, 109, 112, 113, 147, 160, 167], "due": [106, 116, 141, 157, 160, 166, 167], "vnni": [106, 140, 146, 159, 160], "solv": [106, 109, 160, 164], "coarsest": [106, 166], "finer": [106, 166, 169], "2d": [106, 166], "matric": [106, 166], "3d": [106, 158, 166], "similarli": [106, 166], "finest": [106, 166], "individu": [106, 108, 157, 166], "adopt": [106, 109, 157, 158, 166], "bring": [106, 166], "why": [106, 166, 167], "suppos": [106, 166], "6839": [106, 166], "4741": [106, 166], "7451": [106, 166], "9301": [106, 166], "1742": [106, 166], "6835": [106, 166], "formula": [106, 157, 166], "num_bit": [106, 166], "q_min": [106, 166], "q_max": [106, 166], "zp": [106, 166], "q_x": [106, 166], "clamp_": [106, 166], "round_": [106, 166], "w_q": [106, 166], "00296431384049356": [106, 166], "59": [106, 149, 166, 172], "172": [106, 166, 172], "192": [106, 166], "w_dq": [106, 166], "2220": [106, 166], "1510": [106, 166], "2420": [106, 166], "2570": [106, 166], "0500": [106, 166], "1890": [106, 166], "mseloss": [106, 166], "1983354538679123": [106, 166], "6848": [106, 166], "4743": [106, 166], "7440": [106, 166], "9308": [106, 166], "1749": [106, 166], "385297635664756e": [106, 166], "07": [106, 149, 166, 171, 172], "affect": [106, 166], "quantize_per_channel": [106, 166], "x_tmp": [106, 166], "detach": [106, 166], "reshap": [106, 166], "keepdim": [106, 166], "divid": [106, 134, 166, 169], "dequantize_per_channel": [106, 166], "0029": [106, 166, 172], "0036": [106, 166], "162": [106, 166, 172], "48": [106, 166, 172], "72": [106, 149, 166, 172], "93": [106, 149, 166, 172], "207": [106, 166, 172], "139": [106, 166, 172], "6837": [106, 166], "4734": [106, 166], "1751": [106, 166], "637690492221736e": [106, 166], "6376e": [106, 166], "3852e": [106, 166], "cdot": [106, 166], "quantize_per_tensor_absmax": [106, 166], "n_bit": [106, 166], "div_": [106, 166], "0806": [106, 166], "7589": [106, 166], "6038": [106, 166], "3815": [106, 166], "5040": [106, 166], "7174": [106, 166], "5444": [106, 166], "5826": [106, 166], "7772": [106, 166], "5555": [106, 166], "3740": [106, 166], "3253": [106, 166], "0698": [106, 166], "1381": [106, 166], "5972": [106, 166, 172], "0086": [106, 166], "0737": [106, 166], "8298": [106, 166], "6883": [106, 166], "2991": [106, 166], "1601": [106, 166], "6506": [106, 166], "8246": [106, 166], "3924": [106, 166], "3845": [106, 166], "8768": [106, 166], "w_scale": [106, 166], "x_q": [106, 166], "x_scale": [106, 166], "13": [106, 142, 147, 166, 172], "84": [106, 149, 166, 172], "120": [106, 166], "0059755356051027775": [106, 166], "83": [106, 165, 166, 172], "89": [106, 149, 166, 172], "119": [106, 166], "85": [106, 165, 166, 172], "57": [106, 149, 166, 172], "91": [106, 163, 166, 172], "006533813662827015": [106, 166], "y_q": [106, 166], "17509": [106, 166], "7608": [106, 166], "4055": [106, 166], "16599": [106, 166], "21020": [106, 166], "10016": [106, 166], "9860": [106, 166], "22444": [106, 166], "y_dq": [106, 166], "6836": [106, 166], "2970": [106, 166], "1583": [106, 166], "6481": [106, 166], "8207": [106, 166], "3911": [106, 166], "3850": [106, 166], "8763": [106, 166], "major": [106, 145, 160, 166], "peopl": [106, 160], "though": [106, 166], "simplic": [106, 166], "present": [106, 158, 166], "1x2": [106, 166], "2x2": [106, 166], "obtain": [106, 110, 115, 157, 165, 166, 169], "middl": [106, 166], "denot": [106, 166], "fp1": [106, 166], "fp2": [106, 166], "subsect": [106, 166, 171], "even": [106, 161, 163, 166], "lot": [106, 110, 166], "briefli": [106, 151, 166], "similar": [106, 151, 159, 166, 169, 171], "idea": [106, 113, 157, 166, 169], "attach": [106, 137, 151, 166], "x1": [106, 166, 169], "x2": [106, 166, 169], "layernorm": [106, 166], "excel": [106, 163], "mimic": [106, 160], "done": [106, 110, 137, 138, 157, 160], "adjust": [106, 160, 166], "fact": [106, 160], "ultim": [106, 160], "pain": [106, 160], "brought": [106, 153, 160], "lossi": [106, 160], "respect": [106, 108, 143, 157, 166, 171], "chart": [106, 160, 165, 167], "understand": [106, 160, 167, 170], "yvinec": [106, 166], "edouard": [106, 166], "proceed": [106, 166], "cvf": [106, 166], "winter": [106, 166], "confer": [106, 157, 166], "vision": [106, 113, 141, 166], "welcom": [107, 108, 109, 113, 173], "interest": [108, 113, 167], "foster": 108, "particip": 108, "commun": 108, "harass": 108, "everyon": 108, "regardless": 108, "ag": 108, "bodi": 108, "ethnic": 108, "characterist": 108, "gender": 108, "ident": [108, 137], "educ": 108, "socio": 108, "econom": 108, "appear": 108, "race": 108, "religion": 108, "sexual": 108, "orient": 108, "behavior": [108, 114, 115, 116, 143, 153, 163, 167, 169, 171], "contribut": [108, 113, 157], "inclus": 108, "Being": 108, "viewpoint": 108, "gracefulli": 108, "empathi": 108, "toward": [108, 137], "member": [108, 114], "unaccept": 108, "imageri": 108, "unwelcom": 108, "troll": 108, "insult": 108, "derogatori": 108, "polit": 108, "attack": 108, "public": 108, "privat": 108, "electron": 108, "explicit": 108, "permiss": 108, "inappropri": 108, "profession": 108, "clarifi": 108, "fair": 108, "action": 108, "edit": 108, "reject": 108, "wiki": 108, "ban": 108, "temporarili": 108, "perman": [108, 157], "thei": [108, 133, 137, 143, 151, 155], "deem": 108, "threaten": 108, "offens": 108, "harm": 108, "mail": 108, "social": [108, 158], "media": [108, 158], "account": [108, 165, 169], "act": 108, "appoint": 108, "event": [108, 167], "abus": 108, "report": [108, 109, 113, 165], "contact": [108, 164, 165], "complaint": 108, "review": [108, 109, 113, 158], "investig": [108, 133], "necessari": [108, 111, 115, 153, 157, 165, 169], "circumst": [108, 159], "oblig": 108, "confidenti": 108, "regard": [108, 162], "incid": 108, "separ": [108, 133, 145, 148, 156, 159], "faith": 108, "face": [108, 113, 121, 158, 164, 172], "repercuss": 108, "leadership": 108, "faq": [108, 113], "page": [108, 109], "send": [109, 115], "view": [109, 113, 140, 164], "star": 109, "repositori": 109, "button": [109, 146], "fork": 109, "clone": [109, 147], "pc": 109, "git": [109, 142, 147], "branch": 109, "modif": [109, 114, 143], "checkout": 109, "my": 109, "unit": [109, 157], "cover": [109, 141, 145, 158], "certif": 109, "agre": 109, "pr": [109, 134, 150, 164], "least": [109, 151, 157, 169], "approv": 109, "licens": 109, "azur": [109, 113, 158], "devop": 109, "ci": 109, "e16": 109, "v5": 109, "scan": [109, 113], "pylint": 109, "bandit": 109, "copyright": [109, 148], "docstyl": 109, "spellcheck": 109, "dco": 109, "pytest": 109, "No": [109, 133, 142, 151, 158], "failur": [109, 110], "fault": 109, "coverag": 109, "submit": [109, 158], "bug": [109, 113], "intend": 109, "safe": 109, "collabor": [109, 113], "adher": 109, "toolkit": [110, 147, 158, 170], "tracer": 110, "graphmodul": [110, 162], "resolv": [110, 112], "floatfunct": 110, "cat": [110, 141], "relu": [110, 143, 166, 167], "batchnorm": [110, 166], "eval": [110, 133, 134, 160, 167], "fail": [110, 134, 141], "conduct": [110, 151, 169, 170], "imper": 110, "successfulli": [110, 113, 139, 158], "traceabl": 110, "proxi": 110, "tutori": [110, 158, 170], "prototyp": 110, "html": [110, 113, 115, 132, 139, 146, 160], "highlight": 110, "untrac": 110, "ssd": [110, 141, 172], "resnet34": [110, 172], "r34": 110, "bboxes_labels_scor": 110, "prob": 110, "45": [110, 149, 172], "max_output": 110, "zip": 110, "squeez": 110, "dbox": 110, "dlabel": 110, "dscore": 110, "decode_singl": 110, "autom": [111, 158, 166], "artifici": 111, "ann": 111, "par": 111, "potenti": 111, "procedur": [111, 157, 169], "lie": [111, 132], "pareto": 111, "front": 111, "predictor": 111, "typic": [111, 113, 138, 140, 144, 157, 172], "figur": [111, 161], "popul": 111, "inner": 111, "evolutionari": 111, "cycl": 111, "until": [111, 115, 169], "conclud": 111, "yet": [111, 160], "simplest": [111, 132], "launcher": [111, 137, 138], "experiment": [111, 135, 138, 139, 141, 147, 151, 157, 159, 160, 164, 168], "agent": 111, "nsga2": 111, "supernet": 111, "ofa_mbv3_d234_e346_k357_w1": 111, "mac": 111, "num_ev": 111, "250": [111, 157], "results_csv_path": 111, "search_result": 111, "dataset_path": 111, "ilsvrc2012": 111, "nasbas": 111, "mobilenetv3": 111, "lt": [111, 135], "wmt": 111, "en": 111, "de": 111, "guidelin": [112, 113], "mainstream": [113, 170], "particular": [113, 157, 163], "flex": [113, 147], "amd": [113, 147, 172], "arm": [113, 146, 147, 172], "nvidia": [113, 132, 146, 147, 172], "llama2": 113, "broad": [113, 146, 170], "stabl": [113, 147, 157, 158], "diffus": [113, 158], "hub": [113, 140, 144], "hug": [113, 158], "marketplac": [113, 158], "amazon": 113, "web": [113, 167], "servic": [113, 158], "softwar": [113, 148, 157, 158, 164], "alibaba": [113, 158], "tencent": [113, 158], "taco": [113, 158], "oliv": [113, 158], "ecosystem": [113, 158], "lightn": 113, "2024": [113, 172], "03": [113, 149, 172], "sota": [113, 158], "gaudi2": 113, "pip": [113, 139, 142, 144, 147, 164], "34": [113, 149, 172], "packag": [113, 114, 133, 142, 147, 158, 164, 169], "docker": 113, "gaudi": 113, "stack": 113, "setup": [113, 143, 147, 157], "interact": [113, 165], "shell": [113, 167], "habana": 113, "habana_visible_devic": 113, "ompi_mca_btl_vader_single_copy_mechan": 113, "cap": 113, "sys_nic": 113, "host": [113, 139], "ipc": 113, "vault": 113, "ubuntu22": 113, "04": [113, 147, 172], "habanalab": 113, "optimum": [113, 163], "upgrad": [113, 151], "auto_round": 113, "automodel": 113, "autotoken": [113, 151], "torch_util": [113, 161, 166], "get_dataload": 113, "neo": [113, 172], "float_model": 113, "trust_remote_cod": 113, "woq_conf": 113, "quantized_model": 113, "resnet18": [113, 152, 172], "static_quant_conf": 113, "overview": [113, 169], "topic": 113, "blog": [113, 158], "june": [113, 158], "qwen2": [113, 158], "meta": [113, 149, 158, 172], "apr": [113, 158], "emnlp": [113, 158], "sep": [113, 158], "legal": [113, 173], "secur": [113, 158, 173], "ask": [113, 147], "email": 113, "discord": 113, "join": 113, "technic": 113, "wechat": [113, 158], "img": 113, "bridg": [114, 115, 146], "vanilla": [114, 115, 146], "adaptor_registri": 114, "abcadaptor": 114, "__init__": [114, 133, 134, 135, 150, 169], "framework_specific_info": 114, "tune_cfg": [114, 116, 169], "query_fw_cap": [114, 116], "query_fused_pattern": 114, "he": 114, "describ": [114, 116, 133, 143, 167], "hidden": 114, "mainten": 114, "clear": [114, 143, 150, 151], "fragment": 114, "scheme": [114, 115, 116, 134, 143, 163, 169, 171], "semant": [114, 143], "querybackendcap": [114, 115], "tensorflowqueri": 114, "mla": [114, 152, 160], "qtype": 114, "onnxrt_qlinearopsadaptor": 114, "data_load": 114, "inspect_tensor": 114, "op_list": [114, 167], "iteration_list": 114, "inspect_typ": 114, "save_to_disk": 114, "quantization_cfg": 114, "set_tensor": 114, "tensor_dict": 114, "input_graph": 114, "fw": 115, "outlin": [115, 116], "accommod": [115, 116], "diagram": [115, 116, 169], "illustr": [115, 116, 138, 169], "sequencediagram": [115, 116], "autonumb": [115, 116], "query_framework_cap": 115, "opwis": 115, "optypewis": 115, "\u2776": 115, "\u2777": 115, "\u2778": 115, "\u2779": 115, "\u277a": 115, "\u277b": 115, "\u277c": 115, "These": [115, 146], "chapter": 115, "node_op": 115, "confirm": 115, "chosen": [115, 132], "conv2d": [115, 116, 141, 143, 166, 167, 169], "int8_conv_config": 115, "optype_wise_": 115, "per_channel": [115, 116, 143, 160, 171], "sym": [115, 116, 143, 160, 163, 171], "tuning_cfg_to_fw": 115, "Its": [115, 132, 157], "quantize_config": 115, "op_wise_config": 115, "dispatch": [115, 146], "is_perchannel": 115, "is_asymmetr": 115, "weight_bit": 115, "bf16_op": [115, 162], "convert_bf16": 115, "got": [115, 142, 167], "subsequ": 115, "calib": 115, "somewhat": 115, "distort": 115, "line": [115, 133, 139, 146, 167], "let": [116, 143, 157, 159, 171], "overal": [116, 163, 171], "drive": 116, "section": [116, 133, 137, 138, 157, 159, 163, 171], "uint4": 116, "asym": [116, 143, 163, 171], "independ": 116, "kullback": [116, 137], "leibler": [116, 137], "pytorch_cpu": 116, "1_11_capabl": 116, "cap_s8_1_11": 116, "cap_s8_1_11_conv1d": 116, "state": [116, 157], "per_channel_symmetr": 116, "per_tensor_symmetr": 116, "nativ": 116, "with_arg": 116, "qscheme": 116, "torch_dtyp": 116, "quant_min": 116, "quant_max": 116, "x86_64": 131, "aarch64": 131, "sure": 131, "benefici": 132, "\u03b2": 132, "\u03b1": 132, "focu": [132, 169], "essenti": [132, 142], "percentil": 132, "remaind": 132, "enhanc": [132, 157, 158, 162], "resolut": 132, "extrem": 132, "retain": 132, "noteworthi": 132, "vanhouck": 132, "vincent": 132, "andrew": 132, "senior": 132, "mark": 132, "mao": 132, "2011": 132, "szymon": 132, "migacz": 132, "tensorrt": [132, 152, 160], "2017": 132, "mckinstri": 132, "jeffrei": 132, "discov": [132, 167], "embed": [132, 157], "1809": 132, "04191": 132, "2018": 132, "mostli": 133, "summar": [133, 137], "conflict": [133, 142], "overli": 133, "argu": 133, "decis": [133, 150], "pep": 133, "tile": 133, "o": [133, 147], "sub_modul": 133, "namespac": 133, "pollut": 133, "subprocess": [133, 134], "popen": 133, "statement": 133, "pipe": 133, "long_str": 133, "extran": 133, "__version__": 133, "placehold": 133, "pager": 133, "getenv": 133, "readabl": 133, "seem": 133, "worth": [133, 157], "4f": 133, "65421": 133, "sentenc": 133, "eval_result": 133, "declar": 133, "typealia": 133, "_lossandgradi": 133, "complextfmap": 133, "xx_func": 133, "ordereddict": 133, "pylanc": 133, "cheeseshopaddress": 133, "chees": 133, "shop": 133, "outofcheeseerror": 133, "crbug": 133, "192795": 133, "cpufreq": 133, "facilit": 133, "__all__": 133, "know": [133, 139, 164], "algorithm_entri": 133, "snippet": [133, 146], "register_algo": 133, "rtn_algo_entri": 133, "smooth_quant_entri": 133, "vscode": 133, "settings_recommend": 133, "encount": 134, "previous": 134, "lack": [134, 142], "faster": [134, 136, 141, 158, 169, 172], "treat": 134, "Of": 134, "collate_fn": [134, 135], "last_batch": 134, "evenli": 134, "discard": 134, "throw": 134, "awai": 134, "rollov": 134, "draw": [134, 165, 169], "batch_sampl": 134, "num_work": [134, 151, 160], "pin_memori": 134, "pin": 134, "shuffl": [134, 151, 160], "reshuffl": 134, "manner": [134, 137, 153], "newdataload": 134, "input_data": 134, "customis": [134, 135, 150], "ensp": [135, 168], "imagerecord": [135, 139, 171], "image_nam": 135, "cocorecord": 135, "int64": 135, "style_transf": 135, "content": 135, "tfrecorddataset": 135, "spars": [135, 158], "post_training_static_qu": [135, 151, 159, 169], "labelbal": 135, "300": [135, 157], "idx": 135, "helloworld": [135, 152, 168], "aid": 136, "infrastructur": 136, "expens": [137, 151, 169], "mobil": [137, 151, 172], "feed": [137, 157], "produc": 137, "logit": 137, "softmax": 137, "kd": 137, "d": [137, 145, 157], "patient": 137, "compact": [137, 151, 157], "resourc": [137, 169], "1x1": [137, 151, 157], "convolut": [137, 158], "ia": 137, "shallow": 137, "depth": [137, 162], "deepest": 137, "deeper": 137, "Will": [137, 146], "10006": [137, 138], "student_output": [137, 138], "student_loss": [137, 138], "training_func_for_nc": [137, 138], "distil_loss_conf": 137, "accordingli": [137, 166], "promis": [138, 151, 157], "huge": [138, 157, 161], "light": 138, "booster": 138, "degrad": [138, 157, 169], "novel": 138, "comb": 138, "distillation_criterion": [138, 151, 156], "q_conf": 138, "horovod": 139, "builtin": 139, "enable_eager_execut": 139, "yaml_file_path": 139, "pre_process": 139, "simpli": [139, 153], "evaluation_result": 139, "evaluation_time_cost": 139, "partit": [139, 157], "distributedsampl": 139, "train_sampl": 139, "train_dataset": [139, 160], "num_replica": 139, "rank": 139, "train_load": 139, "train_kwarg": 139, "adadelta": 139, "distributedoptim": 139, "named_paramet": 139, "broadcast_paramet": 139, "root_rank": 139, "broadcast_optimizer_st": 139, "set_epoch": 139, "batch_idx": 139, "zero_grad": [139, 151, 157], "nll_loss": 139, "log_interv": 139, "0f": 139, "tloss": 139, "6f": 139, "dry_run": 139, "break": [139, 151], "test_func": 139, "num_of_process": 139, "002": 139, "ssh": 139, "prompt": 139, "readm": 139, "exactli": 139, "cd": [139, 147], "recognit": [139, 141, 157, 167], "resnet50_v1": [139, 151], "resizecropimagenet": [139, 168], "realiz": [139, 155, 162, 165], "tow": 139, "node1": 139, "node2": 139, "TO": 139, "your_node1_nam": 139, "your_node2_nam": 139, "resnet50_fp32_pretrained_model": 139, "nc_resnet50_v1": 139, "resnet": [139, 172], "10k": [140, 144], "2x": [140, 146], "exchang": 141, "hope": 141, "inc_model": [141, 153], "fp32_onnx_config": 141, "verifi": [141, 149], "vgg16": [141, 172], "mobilenet": [141, 165, 172], "rcnn": 141, "torchscript": [141, 161, 166], "unsupport": [141, 151, 157], "add_relu": 141, "conv1d_relu": 141, "conv2d_relu": 141, "group_norm": 141, "hardswish": 141, "instance_norm": 141, "layer_norm": 141, "leaky_relu": 141, "sigmoid": 141, "toolchain": [142, 158], "bare": 142, "metal": 142, "sudo": 142, "apt": [142, 147], "python3": 142, "dev": 142, "distutil": 142, "libgl1": 142, "mesa": 142, "glx": 142, "libglib2": 142, "wget": [142, 144], "ln": 142, "sf": 142, "usr": 142, "incompat": 142, "88": [142, 165, 172], "80": [142, 149, 161, 167, 172], "pyobject": 142, "reinstal": 142, "importerror": 142, "libgl": 142, "yum": [142, 147], "opencv": 142, "conda": [142, 164], "pend": 142, "sqlalchemi": 142, "27": [142, 149, 172], "alemb": 142, "forg": 142, "quick": [143, 152, 157, 170, 171], "dive": [143, 170], "unless": 143, "syntax": 143, "go": [143, 159, 163, 168], "15": [143, 147], "up1": 143, "up2": 143, "valid_mixed_precis": 143, "concatv2": 143, "maxpool": 143, "avgpool": 143, "depthwiseconv2dn": 143, "relu6": 143, "biasadd": 143, "addn": 143, "addv2": 143, "grappler": 143, "grappler_optim": 143, "constfold": 143, "arithmet": 143, "debug_stripp": 143, "googleapi": 144, "v1_6": 144, "mobilenet_v1_1": 144, "0_224_frozen": 144, "concept": [145, 165, 170], "custom_metr": 145, "420": 146, "geomean": 146, "coder": [146, 158], "gui": [146, 157], "upload": 146, "click": [146, 158, 167], "qintegerop": [146, 160], "lock": [146, 156, 157], "momentum": [146, 151, 157, 171], "sensit": [146, 157], "lasso": [146, 157], "oneapi": [147, 158, 170], "analyt": [147, 158, 170], "satisfi": 147, "success": 147, "frequent": 147, "pypi": 147, "nightli": 147, "requirements_pt": 147, "requirements_tf": 147, "consolid": 147, "streamlin": [147, 158], "scienc": 147, "websit": 147, "anaconda": 147, "suit": [147, 167], "formerli": 147, "skylak": 147, "cascad": 147, "ic": [147, 158], "sapphir": [147, 149], "rapid": [147, 149], "hbm": 147, "arctic": 147, "sound": 147, "pont": 147, "vecchio": 147, "cento": [147, 172], "ubuntu": 147, "22": [147, 149, 172], "maco": 147, "ventura": 147, "fortensorflow": 147, "forpytorch": 147, "18": [147, 149, 158, 172], "17": 147, "apach": 148, "subject": 148, "accompani": [148, 169], "wish": 148, "bibtex": 148, "misc": 148, "author": 148, "feng": 148, "tian": 148, "hanwen": 148, "haihao": [148, 157], "shen": [148, 157], "suyu": 148, "chen": 148, "howpublish": 148, "year": 148, "logo": 148, "atom": 148, "phi": 148, "pentium": 148, "vtune": 148, "corpor": 148, "subsidiari": 148, "brand": 148, "claim": 148, "hf": [149, 166, 172], "70b": [149, 172], "40b": 149, "baichuan": 149, "baichuan2": 149, "12b": 149, "neox": [149, 172], "20b": [149, 172], "mistralai": 149, "mistral": 149, "thudm": 149, "chatglm2": 149, "chatglm3": 149, "wip": 149, "soon": 149, "lambada_openai": [149, 172], "67": [149, 172], "69": [149, 172], "0222": 149, "55": [149, 172], "9997": 149, "68": [149, 168, 172], "12": [149, 172], "0081": 149, "66": [149, 172], "9905": 149, "71": [149, 172], "51": [149, 172], "75": [149, 157, 172], "0568": 149, "0008": [149, 172], "70": [149, 172], "81": [149, 172], "9902": [149, 172], "06": [149, 171, 172], "0058": [149, 172], "61": [149, 172], "9991": 149, "0034": 149, "46": [149, 172], "0356": 149, "9972": 149, "0121": 149, "35": [149, 157, 172], "63": [149, 157, 172], "92": [149, 172], "9933": [149, 172], "31": [149, 172], "9994": [149, 172], "0006": [149, 172], "9958": [149, 172], "29": [149, 172], "74": [149, 172], "9918": 149, "9964": 149, "58": [149, 172], "0040": 149, "26": [149, 172], "0064": 149, "49": [149, 172], "78": [149, 168, 172], "0041": 149, "53": [149, 172], "0014": 149, "0043": 149, "76": [149, 172], "77": [149, 172], "25": [149, 157, 172], "9932": [149, 172], "0016": 149, "0116": 149, "60": [149, 172], "9978": [149, 172], "79": [149, 167, 172], "9937": [149, 172], "62": [149, 172], "09": [149, 172], "0057": 149, "0005": 149, "73": [149, 172], "9936": 149, "9989": 149, "9987": 149, "0046": [149, 172], "9979": [149, 172], "23": [149, 172], "52": [149, 172], "86": [149, 172], "9930": 149, "00": [149, 172], "9957": [149, 172], "9938": 149, "9942": [149, 172], "9990": 149, "9965": 149, "9995": 149, "82": [149, 172], "0078": 149, "0262": 149, "0052": 149, "9910": 149, "popularli": 150, "industri": [150, 158], "label_map": 150, "ap": 150, "curv": 150, "turn": [150, 161], "target_boxes_num": 150, "str_label": 150, "int_label": 150, "inturn": 150, "cocomap": 150, "vocmap": 150, "categor": 150, "multiclass": 150, "multilabel": 150, "newmetr": 150, "reset": 150, "reflect": [150, 168], "new_metr": 150, "kind": 151, "resort": 151, "inject": 151, "automodelforsequenceclassif": 151, "worker": [151, 160], "ping_memori": [151, 160], "formul": 151, "templat": [151, 157], "effort": 151, "written": 151, "onnxrt_integ": [151, 171], "onnxrt_qlinear": [151, 171], "image_tensor": [151, 171], "post_training_dynamic_qu": [151, 159, 169], "1000": [151, 171], "2000": 151, "sampling_s": [151, 171], "model_wis": [151, 171], "op_dict": 151, "op_wis": [151, 167, 171], "sigopt_api_token": [151, 165, 169], "sigopt_project_id": [151, 165, 169], "sigopt_experiment_nam": [151, 165, 169], "performance_onli": 151, "600": [151, 172], "training_arg": 151, "trainer": 151, "maxim": [151, 157, 169], "pruning_func": 151, "num_train_epoch": [151, 157], "train_dataload": [151, 157, 160], "n_gpu": 151, "gradient_accumulation_step": 151, "clip_grad_norm_": 151, "max_grad_norm": 151, "start_epoch": [151, 159, 171], "end_epoch": [151, 159, 171], "97": [151, 172], "pruner": [151, 157, 171], "newli": [151, 157], "on_after_optimizer_step": [151, 157], "layer3": [151, 157], "layer2": [151, 157, 160], "knowledgedistillationloss": [151, 171], "weight_decai": [151, 171], "0004": 151, "nesterov": [151, 171], "randomresizedcrop": [151, 168], "totensor": [151, 168], "485": 151, "456": 151, "406": [151, 172], "nepoch": 151, "cnt": 151, "loss_sum": 151, "iter_bar": 151, "tqdm": 151, "desc": 151, "teacher_logit": 151, "pytorchknowledgedistillationloss": 151, "unnecessari": 151, "train_fun": 151, "training_func": 151, "output_model": [151, 167], "exit_polici": [151, 171], "determinist": 151, "meaning": [151, 156], "prune_conf": 151, "quantization_aware_training_conf": 151, "aforement": 151, "inset": 151, "p_conf": [151, 156], "ssd_mobilenet_v1": 151, "benchmarkconf": 151, "cpuexecutionprovid": [152, 160], "tensorrtexecutionprovid": [152, 160], "cudaexecutionprovid": [152, 160], "cuda": [152, 157, 160], "dnnlexecutionprovid": [152, 160], "plu": 152, "persist": 153, "tf1": 153, "tf2": 153, "h5": 153, "hybridblock": 153, "0000": 153, "input_model": [153, 167], "10005": [154, 161], "multi_object": 155, "simultan": [156, 159], "gain": [156, 158], "benefit": 156, "possibl": [156, 157, 161, 162, 169], "instanti": 156, "neuron": 157, "art": 157, "grown": 157, "unpreced": 157, "increasingli": 157, "stand": [157, 169], "delet": 157, "consecut": 157, "commonli": 157, "shrink": 157, "advantag": [157, 159, 169], "influenc": 157, "decreas": 157, "mechan": [157, 165, 170], "contextu": 157, "vari": [157, 166, 172], "scene": 157, "haven": 157, "color": [157, 161], "lowest": [157, 169], "interv": 157, "gradual": 157, "emsp": 157, "immedi": 157, "pure": 157, "downstream": 157, "simplifi": [157, 158], "prone": 157, "co": 157, "discourag": 157, "connect": [157, 165], "penal": 157, "parameter": 157, "coeffici": 157, "sparsegpt": 157, "lightweight": 157, "perceptron": 157, "valuabl": [157, 167], "basi": 157, "mha": 157, "billion": 157, "tend": 157, "exemplifi": 157, "fortieth": 157, "pruner2": 157, "prepare_prun": 157, "retrain_fre": 157, "few": [157, 158, 166, 169], "yourself": 157, "uncertain": 157, "parse_auto_slim_config": 157, "auto_config": 157, "ffn2_sparsiti": 157, "mha_spars": 157, "itself": 157, "quit": 157, "carri": 157, "pruning_pattern": 157, "pruning_start": 157, "pruning_end": 157, "sparse_gpt": 157, "embed_out": 157, "card": 157, "readi": 157, "hesit": 157, "causal": 157, "clm": 157, "sst": [157, 172], "v": [157, 169, 171], "flan": 157, "t5": 157, "english": 157, "romanian": 157, "404": [157, 172], "381": 157, "yolov5": 157, "2x1": [157, 172], "801": 157, "7895": 157, "reduct": [157, 161, 171], "xgboost": 157, "namhoon": 157, "lee": 157, "thalaiyasingam": 157, "ajanthan": 157, "philip": 157, "torr": 157, "2019": 157, "zafrir": 157, "ofir": 157, "ariel": 157, "larei": 157, "boudoukh": 157, "mosh": 157, "wasserblat": 157, "2111": 157, "05754": 157, "2021": 157, "kwon": 157, "kim": 157, "mahonei": 157, "hassoun": 157, "keutzer": 157, "gholami": 157, "pp": 157, "24101": 157, "24116": 157, "alistarh": 157, "massiv": 157, "2301": 157, "00774": 157, "oct": 158, "medium": 158, "diagnosi": 158, "insight": [158, 164, 169], "aug": 158, "juli": 158, "onnxcommunitymeetup2023": 158, "msft": 158, "netflix": 158, "mlperf": [158, 172], "5x": 158, "\u96c6\u6210\u82f1\u7279\u5c14": 158, "\u817e\u8baf\u4e91taco": 158, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 158, "mar": 158, "heterogen": 158, "jan": 158, "busi": 158, "amx": 158, "innov": 158, "journei": 158, "dec": 158, "mleffici": 158, "deepen": 158, "foundat": 158, "intellig": 158, "vmware": 158, "applianc": 158, "bitnami": 158, "nov": 158, "neurip": 158, "quala": 158, "minilm": [158, 172], "plug": 158, "twitter": 158, "linkedin": 158, "zone": 158, "land": 158, "gcp": 158, "aw": [158, 172], "pat": 158, "keynot": 158, "intelon": 158, "chines": 158, "purif": 158, "jun": 158, "partner": 158, "democrat": 158, "feb": 158, "joint": 158, "bilibili": 158, "gestalt": 158, "ml": 158, "easier": 158, "youtub": 158, "reconstruct": 158, "abound": 158, "lpot": [158, 164], "nextplatform": 158, "cern": 158, "gan": 158, "3dgan": 158, "iml": 158, "workshop": 158, "asplo": 158, "intelcaff": 158, "aris": 159, "henc": 159, "onnxrt_qoper": 159, "quant_aware_train": 159, "use_bf16": 159, "weight_compress": [159, 171], "initial_spars": [159, 171], "max_sparsity_ratio_per_lay": 159, "prune_typ": [159, 171], "basic_magnitud": [159, 171], "update_frequ": 159, "update_frequency_on_step": 159, "prune_domain": 159, "tile_pattern_1x1": 159, "affin": 160, "neither": 160, "nor": 160, "val_load": 160, "avg": 160, "themselv": 160, "dmlexecutionprovid": 160, "meanwhil": 161, "substanti": 161, "constrain": 161, "grei": 161, "blue": 161, "rectangl": 161, "subgraph": [161, 169], "load_empty_model": 161, "lambda": 161, "ouput_dir": 161, "fp32_model_path": 161, "int8_model_path": 161, "ON": 162, "forc": 162, "postposttrainingquantconfig": 162, "datatyp": [162, 169, 172], "cast": [162, 168], "bf16convert": 162, "matter": 162, "bf16wrapper": 162, "retrac": 162, "enable_mse_search": 163, "805": 163, "005": 163, "return_int": 163, "enable_auto_scal": 163, "nsampl": 163, "pad_max_length": 163, "use_max_length": 163, "true_sequenti": 163, "slower": 163, "sym_full_rang": 163, "qweight_config_path": 163, "gptq_config_path": 163, "gptq_config": 163, "re": 163, "use_full_length": 163, "compressed_model": 163, "seek": 163, "omit": 163, "rtn_g32asym": 163, "gptq_g32asym": 163, "gptq_g32asym_disable_last_matmul": 163, "amp": 163, "gptq_g128asym": 163, "awq_g32asym": 163, "site": 164, "inspect": [164, 167], "sed": 164, "your_script": 164, "backbon": 165, "fill": [165, 168, 169], "sigopt_experiment_id": 165, "nc": [165, 169], "login": 165, "although": 165, "suffici": 165, "ordinari": 165, "receiv": 165, "latenc": [165, 169], "durat": 165, "8266": 165, "8372": 165, "2132": 165, "7495": 165, "8299": 165, "8294": 165, "0837": 165, "8291": 165, "4469": 165, "allevi": 166, "herebi": 166, "optdecoderlay": 166, "blockwis": 166, "waq": 166, "torchsmoothqu": 166, "auto_alpha_arg": 166, "overhead": 166, "leakyrelu": 166, "hardtanh": 166, "instancenorm": 166, "t5norm": 166, "llamanorm": 166, "groupnorm": 166, "7392": [166, 172], "7335": 166, "7058": [166, 172], "6994": 166, "7677": [166, 172], "7615": [166, 172], "7332": 166, "7632": 166, "stock": 166, "arang": 166, "tolist": 166, "default_alpha": 166, "alpha_min": 166, "alpha_max": 166, "alpha_step": 166, "step_siz": 166, "shared_criterion": 166, "do_blockwis": 166, "jason": 166, "transact": 166, "instrument": 167, "writer": 167, "_pre_eval_hook": 167, "_post_eval_hook": 167, "submodul": 167, "whitelist": 167, "_recordingobserv": 167, "output_tensors_dict": 167, "current_it": 167, "get_tensor_valu": 167, "_observer_forward_hook": 167, "activation_post_process": 167, "_add_observer_": 167, "child": 167, "named_children": 167, "leaf": 167, "add_modul": 167, "register_forward_hook": 167, "dump_tim": 167, "summarywrit": 167, "_acc": 167, "tune_": 167, "add_graph": 167, "get_observer_dict": 167, "observer_dict": 167, "strip": 167, "parent": 167, "is_quant": 167, "add_histogram": 167, "bind_al": 167, "logdir_spec": 167, "tune_0_acc0": 167, "tune_1": 167, "tune_1_acc0": 167, "baseline_acc_0": 167, "776": 167, "tune_1_acc_0": 167, "095": 167, "runs_v3": 167, "image_recognit": 167, "run_tuning_dump_tensor": 167, "sh": 167, "inceptionv3": 167, "skip": [167, 169], "cg": 167, "conv0": 167, "bash": 167, "run_quant": 167, "topologi": 167, "inception_v3": 167, "dataset_loc": 167, "inceptionv3_fp32_pretrained_model": 167, "nc_inceptionv3": 167, "inceptionv3_dump_tensor": 167, "poor": 167, "eightbit": 167, "requant": 167, "switch": 167, "disappear": 167, "centercrop": 168, "randomcrop": 168, "cropres": 168, "decodeimag": 168, "jpeg": 168, "encodejp": 168, "alignimagechannel": 168, "116": 168, "103": [168, 172], "94": [168, 172], "017": 168, "bilinearimagenet": [168, 171], "topilimag": 168, "padding_mod": 168, "border": 168, "pixel": 168, "edg": 168, "colorjitt": 168, "bright": 168, "contrast": 168, "satur": 168, "hue": 168, "jitter": 168, "tondarrai": 168, "o1": 169, "human": 169, "concret": 169, "aggress": 169, "flowchart": 169, "htmllabel": 169, "td": 169, "classdef": 169, "itemstyl": 169, "cce5ff": 169, "stroke": 169, "99ccff": 169, "s1": 169, "s2": 169, "s3": 169, "s4": 169, "s5": 169, "s6": 169, "s7": 169, "nbsp": [169, 172], "subgraphstyl": 169, "ffffff": 169, "attempt": 169, "post_training_auto_qu": 169, "increment": 169, "ii": 169, "highest": 169, "confidence_batch": 169, "spent": 169, "hawq_v2_loss": 169, "model_loss": 169, "black": 169, "discret": 169, "compli": 169, "prior": 169, "posterior": 169, "short": 169, "never": 169, "loglevel": 169, "endlessli": 169, "perspect": 169, "smbo": 169, "appl": 169, "surrog": 169, "repeat": 169, "quantil": 169, "densiti": 169, "parzen": 169, "greatest": 169, "hour": 169, "dai": 169, "next_tune_cfg": 169, "overridden": 169, "cluster": 169, "mpi": 169, "replic": 169, "replica": 169, "fed": 169, "synchron": 169, "mpirun": 169, "number_of_process": 169, "run_cmd": 169, "abctunestrategi": 169, "familiar": 170, "notebook": 170, "introduct": 170, "organ": 171, "mobilenet_v1": 171, "40": [171, 172], "adam": 171, "beta_1": 171, "beta_2": 171, "999": 171, "epsilon": 171, "sparsecategoricalcrossentropi": 171, "sum_over_batch_s": 171, "from_logit": 171, "54": [171, 172], "19": [171, 172], "1x": 172, "platinum": 172, "8480": 172, "8ghz": 172, "56": 172, "ht": 172, "turbo": 172, "256gb": 172, "16x16gb": 172, "ddr5": 172, "4800": 172, "mt": 172, "bio": 172, "3a14": 172, "tel2p1": 172, "microcod": 172, "0x2b0001b0": 172, "gcc": 172, "20210514": 172, "red": 172, "hat": 172, "visit": 172, "1s4c14ins1bsthroughput": 172, "1720": 172, "582": 172, "95x": 172, "1517": 172, "38": 172, "570": 172, "65": 172, "66x": 172, "resnet101": 172, "41": 172, "1058": 172, "382": 172, "96": 172, "77x": 172, "incept": 172, "2080": 172, "951": 172, "19x": 172, "1587": 172, "863": 172, "37": 172, "84x": 172, "v3": 172, "1052": 172, "434": 172, "42x": 172, "v4": 172, "707": 172, "234": 172, "02x": 172, "320": 172, "179": 172, "79x": 172, "4312": 172, "1512": 172, "85x": 172, "2287": 172, "1406": 172, "63x": 172, "1367": 172, "59x": 172, "vgg19": 172, "1244": 172, "176": 172, "04x": 172, "resnetv2": 172, "780": 172, "34x": 172, "494": 172, "43": 172, "329": 172, "50x": 172, "152": 172, "349": 172, "235": 172, "48x": 172, "densenet": 172, "161": 172, "282": 172, "223": 172, "26x": 172, "1284": 172, "756": 172, "70x": 172, "1280": 172, "530": 172, "cnn": 172, "39": 172, "178": 172, "13x": 172, "yolov3": 172, "249": 172, "44": 172, "64x": 172, "28x": 172, "36": 172, "05x": 172, "390": 172, "212": 172, "83x": 172, "vit": 172, "230": 172, "142": 172, "62x": 172, "1989": 172, "31x": 172, "1165": 172, "303": 172, "953": 172, "302": 172, "15x": 172, "resnest50": 172, "365": 172, "21x": 172, "resnext101_32x8d": 172, "548": 172, "104": 172, "27x": 172, "efficientnet_b0": 172, "636": 172, "566": 172, "12x": 172, "efficientnet_b3": 172, "471": 172, "358": 172, "32x": 172, "peleenet": 172, "790": 172, "504": 172, "57x": 172, "yolo": 172, "137": 172, "88x": 172, "175": 172, "23x": 172, "camembert": 172, "393": 172, "174": 172, "783": 172, "344": 172, "684": 172, "99x": 172, "albert": 172, "312": 172, "155": 172, "01x": 172, "funnel": 172, "281": 172, "395": 172, "173": 172, "373": 172, "405": 172, "30x": 172, "stsb": 172, "396": 172, "136": 172, "377": 172, "17x": 172, "391": 172, "25x": 172, "135": 172, "61x": 172, "117": 172, "93x": 172, "lvwerra": 172, "pegasu": 172, "samsum": 172, "1981": 172, "598": 172, "1095": 172, "298": 172, "67x": 172, "549": 172, "29x": 172, "375": 172, "hellaswag": 172, "winogrand": 172, "piqa": 172, "wikitext": 172, "word_perplex": 172, "4954": 172, "6409": 172, "7541": 172, "6434": 172, "8816": 172, "gptqw4g128asym": 172, "679": 172, "4895": 172, "6433": 172, "7476": 172, "6399": 172, "9945": 172, "0999": 172, "gptqw4g32asym": 172, "6829": 172, "4923": 172, "6401": 172, "7486": 172, "6410": 172, "9963": 172, "0141": 172, "gptqw4g128sym": 172, "685": 172, "4907": 172, "6361": 172, "7443": 172, "6390": 172, "1498": 172, "gptqw4g32sym": 172, "6911": 172, "4899": 172, "6448": 172, "7497": 172, "6439": 172, "0927": 172, "5049": 172, "6543": 172, "7628": 172, "6497": 172, "2862": 172, "4984": 172, "6535": 172, "7568": 172, "6473": 172, "9962": 172, "4193": 172, "6885": 172, "4973": 172, "753": 172, "6455": 172, "9935": 172, "4607": 172, "decapoda": 172, "5642": 172, "6709": 172, "7835": 172, "6887": 172, "4202": 172, "7244": 172, "5603": 172, "6614": 172, "6824": 172, "9909": 172, "5881": 172, "5911": 172, "7009": 172, "7878": 172, "7106": 172, "7518": 172, "5843": 172, "6961": 172, "7911": 172, "4319": 172, "7572": 172, "5898": 172, "7056": 172, "7894": 172, "7105": 172, "9998": 172, "3429": 172, "7596": 172, "5841": 172, "6977": 172, "7905": 172, "7080": 172, "4916": 172, "6266": 172, "7277": 172, "8096": 172, "7350": 172, "2384": 172, "778": 172, "624": 172, "7269": 172, "8047": 172, "7334": 172, "4237": 172, "7706": 172, "6239": 172, "7285": 172, "8058": 172, "7322": 172, "4697": 172, "7836": 172, "6195": 172, "7337": 172, "9983": 172, "5604": 172, "5732": 172, "648": 172, "7715": 172, "6746": 172, "7107": 172, "6982": 172, "5637": 172, "6527": 172, "7704": 172, "6713": 172, "9950": 172, "9702": 172, "5682": 172, "6575": 172, "7758": 172, "6742": 172, "9317": 172, "567": 172, "6902": 172, "7353": 172, "6622": 172, "7829": 172, "6862": 172, "9635": 172, "7246": 172, "5617": 172, "6756": 172, "7797": 172, "6854": 172, "9931": 172, "2799": 172, "7312": 172, "6059": 172, "7103": 172, "7077": 172, "2213": 172, "7273": 172, "6018": 172, "7088": 172, "7742": 172, "7030": 172, "9934": 172, "2538": 172, "083": 172, "7283": 172, "6053": 172, "7024": 172, "7764": 172, "7031": 172, "1889": 172, "374": 172, "727": 172, "5997": 172, "7018": 172, "9916": 172, "2504": 172, "497": 172, "7122": 172, "8984": 172, "5933": 172, "689": 172, "7851": 172, "7075": 172, "1556": 172, "448": 172, "7675": 172, "5934": 172, "7856": 172, "7111": 172, "9984": 172, "1514": 172, "927": 172, "7566": 172, "5899": 172, "7032": 172, "9953": 172, "1374": 172, "728": 172, "4628": 172, "6456": 172, "6029": 172, "6438": 172, "5799": 172, "4542": 172, "6004": 172, "0626": 172, "4789": 172, "6134": 172, "7432": 172, "5525": 172, "4731": 172, "6504": 172, "7617": 172, "6094": 172, "7828": 172, "5098": 172, "7622": 172, "6505": 172, "3242": 172, "6878": 172, "5058": 172, "6393": 172, "7633": 172, "6491": 172, "5514": 172, "6864": 172, "5084": 172, "6519": 172, "6509": 172, "4728": 172, "6876": 172, "5045": 172, "6474": 172, "9952": 172, "6379": 172, "5282": 172, "614": 172, "7448": 172, "6312": 172, "6377": 172, "5228": 172, "5991": 172, "6261": 172, "9919": 172, "4096": 172, "6224": 172, "4271": 172, "577": 172, "722": 172, "5871": 172, "9359": 172, "6123": 172, "4227": 172, "5738": 172, "7203": 172, "5823": 172, "9917": 172, "3377": 172, "615": 172, "4259": 172, "5714": 172, "7247": 172, "9951": 172, "2083": 172, "6154": 172, "4208": 172, "5777": 172, "7198": 172, "5834": 172, "3121": 172, "7233": 172, "5359": 172, "7753": 172, "195": 172, "7186": 172, "5328": 172, "7699": 172, "6687": 172, "9922": 172, "3463": 172, "7268": 172, "533": 172, "659": 172, "6726": 172, "2897": 172, "5718": 172, "6859": 172, "7927": 172, "6890": 172, "9324": 172, "7006": 172, "5655": 172, "6803": 172, "7965": 172, "6857": 172, "1515": 172, "5752": 172, "6748": 172, "7845": 172, "6724": 172, "5951": 172, "6472": 172, "5716": 172, "6685": 172, "784": 172, "6678": 172, "8539": 172, "6918": 172, "5819": 172, "678": 172, "6861": 172, "8863": 172, "5765": 172, "6827": 172, "7873": 172, "6832": 172, "1451": 172, "storywrit": 172, "693": 172, "5477": 172, "663": 172, "6719": 172, "9125": 172, "6661": 172, "7813": 172, "6693": 172, "9961": 172, "1137": 172, "rw": 172, "6604": 172, "5419": 172, "6598": 172, "6594": 172, "7616": 172, "6484": 172, "5369": 172, "7807": 172, "6559": 172, "9947": 172, "9411": 172, "6571": 172, "5398": 172, "6582": 172, "6579": 172, "8809": 172, "652": 172, "535": 172, "7682": 172, "6532": 172, "9906": 172, "0048": 172, "5177": 172, "6669": 172, "7824": 172, "5053": 172, "6301": 172, "5142": 172, "6654": 172, "6483": 172, "8146": 172, "517": 172, "6488": 172, "9941": 172, "1666": 172, "734": 172, "1658": 172, "1495": 172, "733": 172, "1661": 172, "732": 172, "1713": 172, "767": 172, "1747": 172, "770": 172, "7519": 172, "4430": 172, "4413": 172, "72x": 172, "7190": 172, "4019": 172, "613": 172, "170": 172, "611": 172, "186": 172, "619": 172, "184": 172, "36x": 172, "623": 172, "5711": 172, "2584": 172, "6136": 172, "2630": 172, "33x": 172, "shufflenet": 172, "6820": 172, "3686": 172, "googlenet": 172, "1971": 172, "1120": 172, "76x": 172, "1838": 172, "1142": 172, "squeezenet": 172, "10163": 172, "5771": 172, "10339": 172, "6002": 172, "caffenet": 172, "2805": 172, "1077": 172, "60x": 172, "4351": 172, "822": 172, "alexnet": 172, "2169": 172, "893": 172, "43x": 172, "2232": 172, "841": 172, "65x": 172, "zfnet": 172, "921": 172, "525": 172, "75x": 172, "925": 172, "534": 172, "73x": 172, "1862": 172, "1161": 172, "1956": 172, "1262": 172, "55x": 172, "efficientnet": 172, "2793": 172, "1383": 172, "beit": 172, "206": 172, "91x": 172, "duc": 172, "74x": 172, "ultra": 172, "8780": 172, "1920": 172, "emot": 172, "ferplu": 172, "6360": 172, "3067": 172, "07x": 172, "arcfac": 172, "449": 172, "511": 172, "484": 172, "222": 172, "18x": 172, "integerop": 172, "635": 172, "1324": 172, "244": 172, "47x": 172, "440": 172, "214": 172, "06x": 172, "715": 172, "201": 172, "03x": 172, "714": 172, "213": 172, "339": 172, "58x": 172, "215": 172, "89x": 172, "712": 172, "217": 172, "l12": 172, "h384": 172, "1209": 172, "588": 172, "1268": 172, "16x": 172, "1253": 172, "399": 172, "14x": 172, "l6": 172, "1139": 172, "94x": 172, "2365": 172, "08x": 172, "718": 172, "35x": 172, "electra": 172, "discrimin": 172, "1951": 172, "71x": 172, "2198": 172, "1129": 172, "mini": 172, "5814": 172, "3388": 172, "6396": 172, "3445": 172, "86x": 172, "bart": 172, "126": 172, "spanbert": 172, "multilingu": 172, "82x": 172, "118": 172, "46x": 172, "layoutlmv3": 172, "funsd": 172, "layoutlmv2": 172, "perplex": 172, "2788": 172, "7002": 172, "4124": 172, "9921": 172, "3950": 172, "9892": 172, "9163": 172, "7240": 172, "0438": 172, "7634": 172, "1186": 172, "9944": 172, "1276": 172, "7543": 172, "6181": 172, "rtnw4g32asym": 172, "6496": 172, "9967": 172, "7964": 172, "6612": 172, "rtnw4g32sym": 172, "7941": 172, "7243": 172, "9971": 172, "taskdataset": 172, "accuracyspars": 172, "ratiospars": 172, "commentsbalancedor": 172, "unbalanc": 172, "answeringsquad": 172, "87f1": 172, "momentumunbalanc": 172, "momentumbalanc": 172, "90f1": 172, "59f1": 172, "23f1": 172, "classificationmrpc": 172, "52f1": 172, "26f1": 172, "classificationsst": 172, "61accuraci": 172, "recognitionimagenet": 172, "95top1": 172, "v5s6": 172, "detectioncoco": 172, "ap0": 172, "6ap0": 172, "584": 172, "34f1": 172, "lassounbalanc": 172, "classificationmnli": 172, "mm": 172, "allbalanc": 172, "32accuraci": 172, "sensitivitybalanc": 172, "classificationqqp": 172, "classificationqnli": 172, "54accuraci": 172, "em": 172, "mobilenetv2": 172, "wideresnet40": 172, "9522": 172, "8178": 172, "0213": 172, "8235": 172, "027": 172, "5494": 172, "7153": 172, "5540": 172, "5523": 172, "vgg": 172, "bn": 172, "7022": 172, "7415": 172, "7025": 172, "0003": 172, "6739": 172, "7399": 172, "6845": 172, "0106": 172, "blendcnn": 172, "7034": 172, "8382": 172, "bilstm": 172, "8314": 172, "9403": 172, "9048": 172, "0734": 172, "7323": 172, "8256": 172, "8084": 172, "8814": 172, "7442": 172, "8371": 172, "0119": 172, "0115": 172, "tinybert": 172, "8018": 172, "8044": 172, "8363": 172, "8411": 172, "8025": 172, "8074": 172, "0007": 172, "0030": 172, "8626": 172, "8213": 172, "9091": 172, "8782": 172, "8684": 172, "8259": 172, "distilroberta": 172, "6057": 172, "6187": 172, "0130": 172, "c6i": 172, "2xlarg": 172, "c6a": 172, "c6g": 172, "a100cuda": 172, "executionprovid": 172}, "objects": {"": [[37, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [8, 0, 0, "-", "common"], [15, 0, 0, "-", "config"], [16, 0, 0, "-", "contrib"], [31, 0, 0, "-", "data"], [44, 0, 0, "-", "metric"], [46, 0, 0, "-", "mix_precision"], [48, 0, 0, "-", "model"], [56, 0, 0, "-", "objective"], [57, 0, 0, "-", "profiling"], [58, 0, 0, "-", "quantization"], [66, 0, 0, "-", "strategy"], [77, 0, 0, "-", "training"], [85, 0, 0, "-", "utils"], [93, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[6, 0, 0, "-", "base_config"], [7, 0, 0, "-", "base_tuning"], [9, 0, 0, "-", "tuning_param"], [11, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[6, 1, 1, "", "BaseConfig"], [6, 1, 1, "", "ComposableConfig"], [6, 1, 1, "", "ConfigRegistry"], [6, 2, 1, "", "get_all_config_set_from_config_registry"], [6, 2, 1, "", "register_config"], [6, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[6, 3, 1, "", "name"], [6, 3, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[6, 3, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[7, 1, 1, "", "ConfigLoader"], [7, 1, 1, "", "ConfigSet"], [7, 1, 1, "", "EvaluationFuncWrapper"], [7, 1, 1, "", "Evaluator"], [7, 1, 1, "", "Sampler"], [7, 1, 1, "", "SequentialSampler"], [7, 1, 1, "", "TuningConfig"], [7, 1, 1, "", "TuningMonitor"], [7, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[7, 3, 1, "", "config_list"]], "neural_compressor.common.tuning_param": [[9, 1, 1, "", "ParamLevel"], [9, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[9, 3, 1, "", "MODEL_LEVEL"], [9, 3, 1, "", "OP_LEVEL"], [9, 3, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[10, 0, 0, "-", "constants"], [12, 0, 0, "-", "logger"], [13, 0, 0, "-", "save_load"], [14, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[10, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[12, 1, 1, "", "Logger"], [12, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[13, 2, 1, "", "load_config_mapping"], [13, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[14, 1, 1, "", "CpuInfo"], [14, 1, 1, "", "LazyImport"], [14, 1, 1, "", "ProcessorType"], [14, 1, 1, "", "Statistics"], [14, 2, 1, "", "call_counter"], [14, 2, 1, "", "detect_processor_type_based_on_hw"], [14, 2, 1, "", "dump_elapsed_time"], [14, 2, 1, "", "get_workspace"], [14, 2, 1, "", "log_process"], [14, 2, 1, "", "set_random_seed"], [14, 2, 1, "", "set_resume_from"], [14, 2, 1, "", "set_tensorboard"], [14, 2, 1, "", "set_workspace"], [14, 2, 1, "", "singleton"]], "neural_compressor.config": [[15, 1, 1, "", "AccuracyCriterion"], [15, 1, 1, "", "BenchmarkConfig"], [15, 1, 1, "", "DistillationConfig"], [15, 1, 1, "", "DotDict"], [15, 1, 1, "", "ExportConfig"], [15, 1, 1, "", "HPOConfig"], [15, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [15, 1, 1, "", "Keras"], [15, 1, 1, "", "KnowledgeDistillationLossConfig"], [15, 1, 1, "", "MXNet"], [15, 1, 1, "", "MixedPrecisionConfig"], [15, 1, 1, "", "NASConfig"], [15, 1, 1, "", "ONNX"], [15, 1, 1, "", "ONNXQlinear2QDQConfig"], [15, 1, 1, "", "Options"], [15, 1, 1, "", "PostTrainingQuantConfig"], [15, 1, 1, "", "PyTorch"], [15, 1, 1, "", "QuantizationAwareTrainingConfig"], [15, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [15, 1, 1, "", "TF2ONNXConfig"], [15, 1, 1, "", "TensorFlow"], [15, 1, 1, "", "Torch2ONNXConfig"], [15, 1, 1, "", "TuningCriterion"], [15, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[17, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[18, 0, 0, "-", "sigopt"], [19, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[18, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[26, 0, 0, "-", "datasets"], [30, 0, 0, "-", "filters"], [33, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[20, 0, 0, "-", "bert_dataset"], [21, 0, 0, "-", "coco_dataset"], [22, 0, 0, "-", "dataset"], [23, 0, 0, "-", "dummy_dataset"], [24, 0, 0, "-", "dummy_dataset_v2"], [25, 0, 0, "-", "imagenet_dataset"], [27, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[20, 1, 1, "", "InputFeatures"], [20, 1, 1, "", "ONNXRTBertDataset"], [20, 1, 1, "", "ParseDecodeBert"], [20, 1, 1, "", "PytorchBertDataset"], [20, 1, 1, "", "TensorflowBertDataset"], [20, 1, 1, "", "TensorflowModelZooBertDataset"], [20, 2, 1, "", "convert_examples_to_features"], [20, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[21, 1, 1, "", "COCONpy"], [21, 1, 1, "", "COCORaw"], [21, 1, 1, "", "COCORecordDataset"], [21, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[22, 1, 1, "", "CIFAR10"], [22, 1, 1, "", "CIFAR100"], [22, 1, 1, "", "Dataset"], [22, 1, 1, "", "Datasets"], [22, 1, 1, "", "FashionMNIST"], [22, 1, 1, "", "ImageFolder"], [22, 1, 1, "", "IterableDataset"], [22, 1, 1, "", "MNIST"], [22, 1, 1, "", "MXNetCIFAR10"], [22, 1, 1, "", "MXNetCIFAR100"], [22, 1, 1, "", "MXNetDatasets"], [22, 1, 1, "", "MXNetFashionMNIST"], [22, 1, 1, "", "MXNetImageFolder"], [22, 1, 1, "", "MXNetMNIST"], [22, 1, 1, "", "ONNXRTITDatasets"], [22, 1, 1, "", "ONNXRTQLDatasets"], [22, 1, 1, "", "PyTorchDatasets"], [22, 1, 1, "", "PytorchCIFAR10"], [22, 1, 1, "", "PytorchCIFAR100"], [22, 1, 1, "", "PytorchFashionMNIST"], [22, 1, 1, "", "PytorchMNIST"], [22, 1, 1, "", "PytorchMxnetWrapDataset"], [22, 1, 1, "", "PytorchMxnetWrapFunction"], [22, 1, 1, "", "Tensorflow"], [22, 1, 1, "", "TensorflowCIFAR10"], [22, 1, 1, "", "TensorflowCIFAR100"], [22, 1, 1, "", "TensorflowDatasets"], [22, 1, 1, "", "TensorflowFashionMNIST"], [22, 1, 1, "", "TensorflowImageRecord"], [22, 1, 1, "", "TensorflowMNIST"], [22, 1, 1, "", "TensorflowTFRecordDataset"], [22, 1, 1, "", "TensorflowVOCRecord"], [22, 2, 1, "", "calculate_md5"], [22, 2, 1, "", "check_integrity"], [22, 2, 1, "", "dataset_registry"], [22, 2, 1, "", "download_url"], [22, 4, 1, "", "framework_datasets"], [22, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[23, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, 1, 1, "", "DummyDataset"], [24, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, 1, 1, "", "ImagenetRaw"], [25, 1, 1, "", "MXNetImagenetRaw"], [25, 1, 1, "", "ONNXRTImagenetDataset"], [25, 1, 1, "", "PytorchImagenetRaw"], [25, 1, 1, "", "TensorflowImagenetDataset"], [25, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[28, 0, 0, "-", "coco_filter"], [29, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[28, 1, 1, "", "LabelBalanceCOCORawFilter"], [28, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[29, 1, 1, "", "FILTERS"], [29, 1, 1, "", "Filter"], [29, 1, 1, "", "MXNetFilters"], [29, 1, 1, "", "ONNXRTITFilters"], [29, 1, 1, "", "ONNXRTQLFilters"], [29, 1, 1, "", "PyTorchFilters"], [29, 1, 1, "", "TensorflowFilters"], [29, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[32, 0, 0, "-", "imagenet_transform"], [34, 0, 0, "-", "postprocess"], [35, 0, 0, "-", "tokenization"], [36, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[32, 1, 1, "", "BilinearImagenetTransform"], [32, 1, 1, "", "LabelShift"], [32, 1, 1, "", "ONNXResizeCropImagenetTransform"], [32, 1, 1, "", "OnnxBilinearImagenetTransform"], [32, 1, 1, "", "ParseDecodeImagenet"], [32, 1, 1, "", "ParseDecodeImagenetTransform"], [32, 1, 1, "", "QuantizedInput"], [32, 1, 1, "", "ResizeWithAspectRatio"], [32, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [32, 1, 1, "", "TensorflowShiftRescale"], [32, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[34, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, 1, 1, "", "BasicTokenizer"], [35, 1, 1, "", "FullTokenizer"], [35, 1, 1, "", "WordpieceTokenizer"], [35, 2, 1, "", "convert_by_vocab"], [35, 2, 1, "", "convert_to_unicode"], [35, 2, 1, "", "load_vocab"], [35, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[36, 1, 1, "", "AlignImageChannelTransform"], [36, 1, 1, "", "BaseTransform"], [36, 1, 1, "", "CastONNXTransform"], [36, 1, 1, "", "CastPyTorchTransform"], [36, 1, 1, "", "CastTFTransform"], [36, 1, 1, "", "CenterCropTFTransform"], [36, 1, 1, "", "CenterCropTransform"], [36, 1, 1, "", "CollectTransform"], [36, 1, 1, "", "ComposeTransform"], [36, 1, 1, "", "CropResizeTFTransform"], [36, 1, 1, "", "CropResizeTransform"], [36, 1, 1, "", "CropToBoundingBox"], [36, 1, 1, "", "InputFeatures"], [36, 1, 1, "", "MXNetCropResizeTransform"], [36, 1, 1, "", "MXNetCropToBoundingBox"], [36, 1, 1, "", "MXNetNormalizeTransform"], [36, 1, 1, "", "MXNetTransforms"], [36, 1, 1, "", "MXNetTranspose"], [36, 1, 1, "", "NormalizeTFTransform"], [36, 1, 1, "", "NormalizeTransform"], [36, 1, 1, "", "ONNXRTCropToBoundingBox"], [36, 1, 1, "", "ONNXRTITTransforms"], [36, 1, 1, "", "ONNXRTQLTransforms"], [36, 1, 1, "", "PaddedCenterCropTransform"], [36, 1, 1, "", "ParseDecodeVocTransform"], [36, 1, 1, "", "PyTorchAlignImageChannel"], [36, 1, 1, "", "PyTorchCropResizeTransform"], [36, 1, 1, "", "PyTorchNormalizeTransform"], [36, 1, 1, "", "PyTorchTransforms"], [36, 1, 1, "", "PyTorchTranspose"], [36, 1, 1, "", "PytorchMxnetTransform"], [36, 1, 1, "", "PytorchMxnetWrapFunction"], [36, 1, 1, "", "RandomCropTFTransform"], [36, 1, 1, "", "RandomCropTransform"], [36, 1, 1, "", "RandomHorizontalFlip"], [36, 1, 1, "", "RandomResizedCropMXNetTransform"], [36, 1, 1, "", "RandomResizedCropPytorchTransform"], [36, 1, 1, "", "RandomResizedCropTFTransform"], [36, 1, 1, "", "RandomResizedCropTransform"], [36, 1, 1, "", "RandomVerticalFlip"], [36, 1, 1, "", "RescaleKerasPretrainTransform"], [36, 1, 1, "", "RescaleTFTransform"], [36, 1, 1, "", "RescaleTransform"], [36, 1, 1, "", "ResizeMXNetTransform"], [36, 1, 1, "", "ResizePytorchTransform"], [36, 1, 1, "", "ResizeTFTransform"], [36, 1, 1, "", "ResizeTransform"], [36, 1, 1, "", "ResizeWithRatio"], [36, 1, 1, "", "SquadExample"], [36, 1, 1, "", "TFModelZooCollectTransform"], [36, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [36, 1, 1, "", "TFSquadV1PostTransform"], [36, 1, 1, "", "TRANSFORMS"], [36, 1, 1, "", "TensorflowCropToBoundingBox"], [36, 1, 1, "", "TensorflowRandomHorizontalFlip"], [36, 1, 1, "", "TensorflowRandomVerticalFlip"], [36, 1, 1, "", "TensorflowResizeWithRatio"], [36, 1, 1, "", "TensorflowTransform"], [36, 1, 1, "", "TensorflowTransforms"], [36, 1, 1, "", "TensorflowTranspose"], [36, 1, 1, "", "TensorflowWrapFunction"], [36, 1, 1, "", "ToArray"], [36, 1, 1, "", "ToNDArrayTransform"], [36, 1, 1, "", "Transforms"], [36, 1, 1, "", "Transpose"], [36, 2, 1, "", "convert_examples_to_features"], [36, 2, 1, "", "get_final_text"], [36, 2, 1, "", "get_torchvision_map"], [36, 2, 1, "", "read_squad_examples"], [36, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[38, 0, 0, "-", "bleu"], [39, 0, 0, "-", "bleu_util"], [40, 0, 0, "-", "coco_label_map"], [41, 0, 0, "-", "coco_tools"], [42, 0, 0, "-", "evaluate_squad"], [43, 0, 0, "-", "f1"], [45, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[38, 1, 1, "", "BLEU"], [38, 1, 1, "", "UnicodeRegex"], [38, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[38, 3, 1, "", "labels"], [38, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[38, 3, 1, "", "nondigit_punct_re"], [38, 3, 1, "", "punct_nondigit_re"], [38, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[39, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[41, 1, 1, "", "COCOEvalWrapper"], [41, 1, 1, "", "COCOWrapper"], [41, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [41, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [41, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[41, 3, 1, "", "dataset"], [41, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[42, 2, 1, "", "evaluate"], [42, 2, 1, "", "exact_match_score"], [42, 2, 1, "", "f1_score"], [42, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, 2, 1, "", "evaluate"], [43, 2, 1, "", "f1_score"], [43, 2, 1, "", "metric_max_over_ground_truths"], [43, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[45, 1, 1, "", "Accuracy"], [45, 1, 1, "", "BaseMetric"], [45, 1, 1, "", "COCOmAPv2"], [45, 1, 1, "", "F1"], [45, 1, 1, "", "GeneralTopK"], [45, 1, 1, "", "Loss"], [45, 1, 1, "", "MAE"], [45, 1, 1, "", "METRICS"], [45, 1, 1, "", "MSE"], [45, 1, 1, "", "MXNetMetrics"], [45, 1, 1, "", "Metric"], [45, 1, 1, "", "ONNXRTGLUE"], [45, 1, 1, "", "ONNXRTITMetrics"], [45, 1, 1, "", "ONNXRTQLMetrics"], [45, 1, 1, "", "PyTorchLoss"], [45, 1, 1, "", "PyTorchMetrics"], [45, 1, 1, "", "RMSE"], [45, 1, 1, "", "ROC"], [45, 1, 1, "", "SquadF1"], [45, 1, 1, "", "TensorflowCOCOMAP"], [45, 1, 1, "", "TensorflowMAP"], [45, 1, 1, "", "TensorflowMetrics"], [45, 1, 1, "", "TensorflowTopK"], [45, 1, 1, "", "TensorflowVOCMAP"], [45, 1, 1, "", "WrapMXNetMetric"], [45, 1, 1, "", "WrapONNXRTMetric"], [45, 1, 1, "", "WrapPyTorchMetric"], [45, 1, 1, "", "mIOU"], [45, 2, 1, "", "metric_registry"], [45, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"], [45, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[45, 3, 1, "", "sample"], [45, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[45, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[46, 2, 1, "", "fit"]], "neural_compressor.model": [[47, 0, 0, "-", "base_model"], [49, 0, 0, "-", "keras_model"], [50, 0, 0, "-", "model"], [51, 0, 0, "-", "mxnet_model"], [52, 0, 0, "-", "nets_factory"], [53, 0, 0, "-", "onnx_model"], [54, 0, 0, "-", "tensorflow_model"], [55, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[47, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[49, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[50, 1, 1, "", "Model"], [50, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[51, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[52, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[53, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[54, 1, 1, "", "TensorflowBaseModel"], [54, 1, 1, "", "TensorflowCheckpointModel"], [54, 1, 1, "", "TensorflowLLMModel"], [54, 1, 1, "", "TensorflowModel"], [54, 1, 1, "", "TensorflowQATModel"], [54, 1, 1, "", "TensorflowSavedModelModel"], [54, 2, 1, "", "checkpoint_session"], [54, 2, 1, "", "estimator_session"], [54, 2, 1, "", "frozen_pb_session"], [54, 2, 1, "", "get_model_type"], [54, 2, 1, "", "graph_def_session"], [54, 2, 1, "", "graph_session"], [54, 2, 1, "", "keras_session"], [54, 2, 1, "", "load_saved_model"], [54, 2, 1, "", "saved_model_session"], [54, 2, 1, "", "slim_session"], [54, 2, 1, "", "try_loading_keras"], [54, 2, 1, "", "validate_and_inference_input_output"], [54, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[55, 1, 1, "", "IPEXModel"], [55, 1, 1, "", "PyTorchBaseModel"], [55, 1, 1, "", "PyTorchFXModel"], [55, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[56, 1, 1, "", "Accuracy"], [56, 1, 1, "", "Footprint"], [56, 1, 1, "", "ModelSize"], [56, 1, 1, "", "MultiObjective"], [56, 1, 1, "", "Objective"], [56, 1, 1, "", "Performance"], [56, 2, 1, "", "objective_custom_registry"], [56, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[58, 2, 1, "", "fit"]], "neural_compressor.strategy": [[59, 0, 0, "-", "auto"], [60, 0, 0, "-", "auto_mixed_precision"], [61, 0, 0, "-", "basic"], [62, 0, 0, "-", "bayesian"], [63, 0, 0, "-", "conservative"], [64, 0, 0, "-", "exhaustive"], [65, 0, 0, "-", "hawq_v2"], [67, 0, 0, "-", "mse"], [68, 0, 0, "-", "mse_v2"], [69, 0, 0, "-", "random"], [70, 0, 0, "-", "strategy"], [72, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[59, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[61, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[62, 1, 1, "", "BayesianOptimization"], [62, 1, 1, "", "BayesianTuneStrategy"], [62, 1, 1, "", "TargetSpace"], [62, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[63, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[67, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[69, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[70, 1, 1, "", "TuneStrategy"], [70, 1, 1, "", "TuneStrategyMeta"], [70, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[71, 0, 0, "-", "constant"], [73, 0, 0, "-", "tuning_sampler"], [74, 0, 0, "-", "tuning_space"], [75, 0, 0, "-", "tuning_structs"], [76, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, 1, 1, "", "BlockFallbackTuningSampler"], [73, 1, 1, "", "FallbackTuningSampler"], [73, 1, 1, "", "LowerBitsSampler"], [73, 1, 1, "", "ModelWiseTuningSampler"], [73, 1, 1, "", "OpTypeWiseTuningSampler"], [73, 1, 1, "", "OpWiseTuningSampler"], [73, 1, 1, "", "SmoothQuantSampler"], [73, 1, 1, "", "TuningOrder"], [73, 1, 1, "", "TuningSampler"], [73, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, 1, 1, "", "TuningItem"], [74, 1, 1, "", "TuningSpace"], [74, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [74, 2, 1, "", "pattern_to_internal"], [74, 2, 1, "", "pattern_to_path"], [74, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[75, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[76, 1, 1, "", "ClassRegister"], [76, 1, 1, "", "OrderedDefaultDict"], [76, 1, 1, "", "QuantOptions"], [76, 1, 1, "", "QuantType"], [76, 2, 1, "", "build_slave_faker_model"], [76, 2, 1, "", "extract_data_type"], [76, 2, 1, "", "get_adaptor_name"], [76, 2, 1, "", "preprocess_user_cfg"], [76, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[77, 1, 1, "", "CallBacks"], [77, 1, 1, "", "CompressionManager"], [77, 2, 1, "", "fit"], [77, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[78, 0, 0, "-", "collect_layer_histogram"], [79, 0, 0, "-", "constant"], [80, 0, 0, "-", "create_obj_from_config"], [81, 0, 0, "-", "export"], [86, 0, 0, "-", "kl_divergence"], [87, 0, 0, "-", "load_huggingface"], [88, 0, 0, "-", "logger"], [89, 0, 0, "-", "options"], [90, 0, 0, "-", "pytorch"], [91, 0, 0, "-", "utility"], [92, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[78, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[80, 2, 1, "", "create_dataloader"], [80, 2, 1, "", "create_dataset"], [80, 2, 1, "", "create_eval_func"], [80, 2, 1, "", "create_train_func"], [80, 2, 1, "", "get_algorithm"], [80, 2, 1, "", "get_func_from_config"], [80, 2, 1, "", "get_metrics"], [80, 2, 1, "", "get_postprocess"], [80, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[82, 0, 0, "-", "qlinear2qdq"], [83, 0, 0, "-", "tf2onnx"], [84, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[82, 2, 1, "", "check_model"], [82, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, 2, 1, "", "tf_to_fp32_onnx"], [83, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[84, 2, 1, "", "dynamic_quant_export"], [84, 2, 1, "", "get_node_mapping"], [84, 2, 1, "", "get_quantizable_onnx_ops"], [84, 2, 1, "", "static_quant_export"], [84, 2, 1, "", "torch_to_fp32_onnx"], [84, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[86, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[87, 1, 1, "", "OptimizedModel"], [87, 2, 1, "", "export_compressed_model"], [87, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[88, 1, 1, "", "Logger"], [88, 2, 1, "", "debug"], [88, 2, 1, "", "error"], [88, 2, 1, "", "fatal"], [88, 2, 1, "", "info"], [88, 2, 1, "", "log"], [88, 2, 1, "", "warn"], [88, 2, 1, "", "warning"]], "neural_compressor.utils.options": [[89, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[90, 2, 1, "", "is_int8_model"], [90, 2, 1, "", "load"], [90, 2, 1, "", "load_weight_only"], [90, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[91, 1, 1, "", "CaptureOutputToFile"], [91, 1, 1, "", "CpuInfo"], [91, 2, 1, "", "Dequantize"], [91, 1, 1, "", "DotDict"], [91, 1, 1, "", "GLOBAL_STATE"], [91, 1, 1, "", "LazyImport"], [91, 1, 1, "", "MODE"], [91, 1, 1, "", "OpEntry"], [91, 1, 1, "", "Statistics"], [91, 2, 1, "", "alias_param"], [91, 2, 1, "", "calculate_mse"], [91, 2, 1, "", "check_key_exist"], [91, 2, 1, "", "combine_histogram"], [91, 2, 1, "", "compare_objects"], [91, 2, 1, "", "compute_sparsity"], [91, 2, 1, "", "deep_get"], [91, 2, 1, "", "deep_set"], [91, 2, 1, "", "dequantize_weight"], [91, 2, 1, "", "dump_class_attrs"], [91, 2, 1, "", "dump_data_to_local"], [91, 2, 1, "", "dump_elapsed_time"], [91, 2, 1, "", "dump_table"], [91, 2, 1, "", "dump_table_to_csv"], [91, 2, 1, "", "equal_dicts"], [91, 2, 1, "", "fault_tolerant_file"], [91, 2, 1, "", "get_all_fp32_data"], [91, 2, 1, "", "get_number_of_sockets"], [91, 2, 1, "", "get_op_list"], [91, 2, 1, "", "get_size"], [91, 2, 1, "", "get_tensor_histogram"], [91, 2, 1, "", "get_tensors_info"], [91, 2, 1, "", "get_tuning_history"], [91, 2, 1, "", "get_weights_details"], [91, 2, 1, "", "load_data_from_pkl"], [91, 2, 1, "", "mse_metric_gap"], [91, 2, 1, "", "print_op_list"], [91, 2, 1, "", "print_table"], [91, 2, 1, "", "recover"], [91, 2, 1, "", "set_random_seed"], [91, 2, 1, "", "set_resume_from"], [91, 2, 1, "", "set_tensorboard"], [91, 2, 1, "", "set_workspace"], [91, 2, 1, "", "show_memory_info"], [91, 2, 1, "", "singleton"], [91, 2, 1, "", "str2array"], [91, 2, 1, "", "time_limit"], [91, 2, 1, "", "version1_eq_version2"], [91, 2, 1, "", "version1_gt_version2"], [91, 2, 1, "", "version1_gte_version2"], [91, 2, 1, "", "version1_lt_version2"], [91, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[92, 1, 1, "", "WeightsDetails"], [92, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "algorithm": [0, 1, 2, 3, 4, 132, 163, 166, 169], "class": [0, 1, 3, 4, 6, 7, 9, 10, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 41, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 86, 87, 88, 89, 91, 92, 114], "function": [0, 5, 6, 7, 13, 14, 20, 22, 29, 35, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 82, 83, 84, 87, 88, 90, 91, 139], "modul": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92], "content": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 113], "fast_bias_correct": 1, "submodul": [2, 8, 11, 17, 26, 30, 33, 37, 44, 48, 66, 72, 81, 85], "smooth_quant": 3, "weight_correct": 4, "benchmark": [5, 105, 122, 131, 151, 159], "common": [6, 7, 8, 9, 10, 11, 12, 13, 14, 99, 100, 110, 142], "base_config": 6, "base_tun": 7, "subpackag": [8, 16, 31, 37, 66, 85], "tuning_param": 9, "util": [10, 11, 12, 13, 14, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 119], "constant": [10, 71, 79], "logger": [12, 88, 133], "save_load": 13, "config": [15, 124, 135, 155], "contrib": [16, 17, 18, 19], "strategi": [17, 18, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 129, 165, 169], "sigopt": [18, 165, 169], "tpe": [19, 169], "data": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 115, 116, 140], "dataset": [20, 21, 22, 23, 24, 25, 26, 27, 135, 145], "bert_dataset": 20, "coco_dataset": 21, "attribut": [22, 108], "dummy_dataset": 23, "dummy_dataset_v2": 24, "imagenet_dataset": 25, "style_transfer_dataset": 27, "filter": [28, 29, 30], "coco_filt": 28, "transform": [32, 33, 34, 35, 36, 145, 168], "imagenet_transform": 32, "postprocess": 34, "token": 35, "metric": [38, 39, 40, 41, 42, 43, 44, 45, 145, 150], "bleu": 38, "bleu_util": 39, "coco_label_map": 40, "coco_tool": 41, "evaluate_squad": 42, "f1": 43, "mix_precis": 46, "model": [47, 48, 49, 50, 51, 52, 53, 54, 55, 97, 98, 104, 115, 126, 141, 144, 147, 149, 151, 153, 154, 157, 161, 163, 166, 172], "base_model": 47, "keras_model": 49, "mxnet_model": 51, "nets_factori": 52, "onnx_model": 53, "tensorflow_model": 54, "torch_model": 55, "object": [56, 127, 155], "profil": 57, "quantiz": [58, 94, 95, 97, 98, 99, 100, 101, 103, 106, 110, 113, 115, 116, 128, 132, 138, 141, 144, 147, 149, 151, 152, 154, 159, 160, 161, 162, 163, 166, 172], "auto": [59, 102, 162, 166, 169], "auto_mixed_precis": 60, "basic": [61, 111, 169], "bayesian": [62, 169], "conserv": [63, 169], "exhaust": [64, 169], "hawq_v2": [65, 169], "mse": [67, 169], "mse_v2": [68, 169], "random": [69, 169], "tuning_sampl": 73, "tuning_spac": 74, "tuning_struct": 75, "train": [77, 103, 106, 110, 130, 139, 151, 157, 160], "collect_layer_histogram": 78, "create_obj_from_config": 80, "export": [81, 82, 83, 84, 141, 163], "qlinear2qdq": 82, "tf2onnx": 83, "torch2onnx": 84, "kl_diverg": 86, "load_huggingfac": 87, "option": [89, 139], "pytorch": [90, 96, 97, 98, 99, 104, 106, 135, 139, 141, 150, 160, 161, 162, 167, 168, 172], "weights_detail": 92, "version": 93, "dynam": [94, 106, 110, 111, 160], "introduct": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 111, 114, 115, 116, 131, 132, 134, 135, 137, 138, 139, 141, 143, 146, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 167, 168, 169, 171], "get": [94, 95, 96, 98, 99, 101, 110, 111, 113, 114, 131, 134, 135, 137, 138, 139, 143, 144, 150, 152, 154, 155, 156, 157, 159, 160, 167, 171], "start": [94, 95, 96, 98, 99, 101, 110, 111, 113, 114, 131, 134, 135, 137, 138, 139, 143, 144, 150, 152, 154, 155, 156, 157, 159, 160, 167, 171], "exampl": [94, 95, 96, 98, 99, 101, 102, 106, 110, 111, 114, 120, 131, 134, 135, 137, 138, 139, 140, 141, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 163, 166, 167, 172], "microsc": [95, 154], "api": [95, 96, 100, 103, 111, 114, 115, 120, 121, 131, 134, 135, 137, 138, 139, 144, 145, 150, 152, 154, 155, 156, 157, 159, 170], "refer": [95, 99, 106, 132, 133, 154, 157, 160, 163, 166], "mix": [96, 125, 151, 152, 162], "precis": [96, 125, 151, 152, 162], "support": [96, 97, 99, 100, 103, 105, 109, 110, 111, 114, 116, 131, 132, 134, 135, 137, 138, 139, 141, 143, 146, 147, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 166, 167, 168, 171], "matrix": [96, 97, 99, 100, 103, 105, 110, 111, 114, 131, 132, 134, 135, 137, 138, 139, 141, 143, 146, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 166, 167, 171], "hardwar": [96, 147, 152, 172], "softwar": [96, 147, 152], "request": [96, 109, 152], "bf16": [96, 152], "fp16": [96, 152], "accuraci": [96, 101, 106, 149, 152, 160, 169], "driven": [96, 152], "autotun": [96, 100, 104], "smooth": [97, 102, 103, 106, 166], "usag": [97, 98, 99, 102, 105, 111, 166, 167, 169], "fix": [97, 102, 166], "alpha": [97, 102, 166], "specifi": [97, 98, 99, 101, 160], "rule": [97, 98, 99, 101, 133, 160], "valid": [97, 144, 147, 166, 172], "framework": [97, 115, 134, 135, 141, 143, 153, 154, 159, 161, 163, 166], "static": [98, 103, 106, 110, 113, 160], "ipex": [98, 106, 160], "backend": [98, 103, 114, 160], "sampl": [98, 115, 144], "pt2e": 98, "weight": [99, 106, 113, 163], "onli": [99, 106, 111, 113, 163], "argument": 99, "rtn": 99, "gptq": 99, "autoround": 99, "awq": 99, "teq": 99, "hqq": 99, "save": 99, "load": [99, 100], "torch": [100, 119, 172], "like": [100, 116], "problem": [100, 110], "tensorflow": [101, 103, 104, 106, 135, 139, 141, 150, 160, 162, 167, 168, 172], "without": 101, "awar": [101, 106, 110, 151, 157, 160], "tune": [101, 102, 106, 116, 160, 163, 166, 169], "With": 101, "quant": [102, 166], "us": [102, 105, 116, 134, 150, 166], "determin": [102, 166], "through": [102, 147, 166, 172], "scheme": [103, 106, 160], "approach": [103, 160], "post": [103, 110, 151, 160], "devic": [103, 160], "overview": [104, 109, 170], "how": [104, 115, 116], "work": [104, 114, 160], "gener": [105, 115], "case": 105, "dump": 105, "throughput": 105, "latenc": 105, "summari": [105, 116], "demo": 105, "fundament": [106, 160, 166], "symmetr": 106, "asymmetr": 106, "per": [106, 166], "tensor": [106, 166], "channel": [106, 166], "matmul": [106, 166], "limit": [106, 166], "intel": [107, 113, 134, 146, 147, 150, 151, 173], "neural": [107, 110, 111, 113, 134, 146, 147, 150, 151, 157, 165, 173], "compressor": [107, 110, 113, 134, 146, 147, 150, 151, 165, 173], "document": [107, 113, 120, 173], "section": [107, 173], "contributor": [108, 109], "coven": [108, 109], "code": [108, 109, 111, 133, 151, 163], "conduct": [108, 109], "our": [108, 166], "pledg": 108, "standard": 108, "respons": 108, "scope": [108, 157], "enforc": 108, "contribut": 109, "guidelin": 109, "creat": 109, "pull": 109, "step": 109, "checklist": 109, "templat": 109, "accept": 109, "criteria": [109, 157, 169], "statu": 109, "check": 109, "fx": 110, "mode": [110, 172], "note": [110, 164], "detail": 110, "architectur": [111, 136, 146, 147], "search": 111, "na": [111, 159], "1": [111, 139, 142, 145, 151, 172], "python": [111, 134, 144, 150, 159, 170], "yaml": [111, 115, 135, 139, 143, 171], "2": [111, 139, 142, 145, 151, 172], "advanc": [111, 170], "custom": [111, 134, 150, 169], "secur": [112, 139], "polici": [112, 169], "report": 112, "vulner": 112, "what": 113, "": [113, 147], "new": [113, 114, 116, 169], "instal": [113, 147], "from": [113, 115, 147, 151], "pypi": 113, "llm": [113, 149], "non": 113, "select": 113, "public": [113, 133, 158], "event": [113, 158], "addit": 113, "commun": 113, "adaptor": [114, 115, 117], "flow": [114, 160], "queri": 114, "background": [114, 133], "ad": 114, "capabl": [114, 163], "implement": [114, 115], "onnxrtadaptor": 114, "add": 115, "an": 115, "list": [115, 140, 168], "need": 115, "design": [115, 136, 169], "query_fw_cap": 115, "accord": [115, 116], "tune_cfg": 115, "prepar": [115, 165], "calibr": [115, 132], "fp32": [115, 141], "graph": 115, "run": 115, "iter": 115, "oper": [115, 116], "calcul": 115, "rang": 115, "type": [116, 133, 157], "int4": 116, "few": 116, "line": 116, "chang": [116, 145, 164], "defin": [116, 139], "abil": 116, "specif": [116, 135], "invok": 116, "kernel": 116, "configur": [116, 139, 143, 159, 165, 171], "onnx": [118, 147, 160, 161, 172], "runtim": [118, 147, 160, 161, 172], "compress": [123, 163], "inc": 133, "convent": 133, "import": 133, "string": 133, "annot": 133, "comment": 133, "todo": 133, "intern": 133, "interfac": 133, "folder": 133, "structur": 133, "recommend": 133, "v": 133, "set": 133, "json": 133, "dataload": [134, 135], "build": [134, 142, 150], "mxnet": [135, 150, 160, 168], "onnxrt": [135, 150, 168], "file": [135, 143, 171], "user": [135, 139, 145, 159, 163, 170, 171], "workflow": 136, "distil": [137, 138, 151, 159, 172], "knowledg": [137, 172], "intermedi": 137, "layer": [137, 161, 166], "self": 137, "distribut": [139, 169], "infer": 139, "evalu": 139, "featur": [139, 143, 146, 159, 160, 167, 171], "pure": 139, "horovodrun": 139, "execut": 139, "releas": [140, 164], "int8": [141, 172], "appendix": 141, "op": 141, "frequent": 142, "ask": 142, "question": 142, "issu": [142, 164], "3": [142, 158], "4": [142, 158], "quick": 144, "incompat": [145, 164], "between": 145, "v1": 145, "face": 145, "built": [145, 147, 150], "infrastructur": 146, "prerequisit": 147, "binari": 147, "sourc": 147, "ai": 147, "kit": 147, "system": 147, "requir": 147, "environ": 147, "cpu": [147, 172], "base": [147, 170], "64": 147, "compat": 147, "processor": 147, "gpu": 147, "xe": 147, "multipl": [147, 155, 172], "vendor": 147, "legal": 148, "inform": 148, "licens": 148, "citat": 148, "trademark": 148, "recip": [149, 160], "larg": [149, 157], "languag": [149, 157], "migrat": 151, "x": 151, "prune": [151, 157, 159, 172], "orchestr": [151, 156], "dure": [152, 162], "singl": 155, "optim": [156, 157], "One": 156, "shot": 156, "network": 157, "pattern": 157, "schedul": 157, "sparsiti": 157, "decai": 157, "regular": 157, "retrain": 157, "free": 157, "spars": 157, "deploy": 157, "hyperparamet": 157, "full": 158, "82": 158, "2024": 158, "2023": 158, "25": 158, "2022": 158, "35": 158, "2021": 158, "15": [158, 172], "2018": 158, "2020": 158, "style": 159, "access": 159, "wise": 161, "lwq": 161, "turn": 162, "off": 162, "woq": [163, 172], "known": 164, "platform": 165, "perform": 165, "benefit": 165, "comparison": 165, "differ": 165, "smoothquant": 166, "enhanc": 166, "engin": 166, "entir": 166, "each": 166, "block": 166, "tensorboard": 167, "space": 169, "exit": 169, "process": 169, "guid": 170, "topic": 170, "0": 172, "ptq": 172, "qat": 172, "17": 172, "qdq": 172}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [45, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [91, "classes"], [92, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [13, "functions"], [14, "functions"], [20, "functions"], [22, "functions"], [29, "functions"], [35, "functions"], [36, "functions"], [38, "functions"], [39, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [46, "functions"], [50, "functions"], [54, "functions"], [56, "functions"], [58, "functions"], [62, "functions"], [70, "functions"], [74, "functions"], [76, "functions"], [77, "functions"], [80, "functions"], [82, "functions"], [83, "functions"], [84, "functions"], [87, "functions"], [88, "functions"], [90, "functions"], [91, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [8, "submodules"], [11, "submodules"], [17, "submodules"], [26, "submodules"], [30, "submodules"], [33, "submodules"], [37, "submodules"], [44, "submodules"], [48, "submodules"], [66, "submodules"], [72, "submodules"], [81, "submodules"], [85, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "Subpackages": [[8, "subpackages"], [16, "subpackages"], [31, "subpackages"], [37, "subpackages"], [66, "subpackages"], [85, "subpackages"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[22, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[37, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[77, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[78, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[79, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[80, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[81, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[82, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[84, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[85, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[86, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[87, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[88, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[89, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[90, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[91, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[92, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[93, "module-neural_compressor.version"]], "Dynamic Quantization": [[94, "dynamic-quantization"], [106, "dynamic-quantization"], [110, "dynamic-quantization"]], "Introduction": [[94, "introduction"], [95, "introduction"], [96, "introduction"], [97, "introduction"], [98, "introduction"], [99, "introduction"], [100, "introduction"], [101, "introduction"], [102, "introduction"], [103, "introduction"], [105, "introduction"], [106, "introduction"], [110, "introduction"], [111, "introduction"], [114, "introduction"], [115, "introduction"], [116, "introduction"], [131, "introduction"], [132, "introduction"], [134, "introduction"], [135, "introduction"], [137, "introduction"], [138, "introduction"], [139, "introduction"], [141, "introduction"], [143, "introduction"], [146, "introduction"], [150, "introduction"], [152, "introduction"], [153, "introduction"], [154, "introduction"], [155, "introduction"], [156, "introduction"], [157, "introduction"], [159, "introduction"], [161, "introduction"], [163, "introduction"], [165, "introduction"], [166, "introduction"], [167, "introduction"], [168, "introduction"], [169, "introduction"], [171, "introduction"]], "Getting Started with Dynamic Quantization": [[94, "getting-started-with-dynamic-quantization"]], "Examples": [[94, "examples"], [95, "examples"], [96, "examples"], [99, "examples"], [101, "examples"], [102, "examples"], [110, "examples"], [111, "examples"], [131, "examples"], [134, "examples"], [135, "examples"], [137, "examples"], [138, "examples"], [139, "examples"], [140, "examples"], [141, "examples"], [151, "examples"], [152, "examples"], [153, "examples"], [154, "examples"], [156, "examples"], [157, "examples"], [160, "examples"], [161, "examples"], [163, "examples"], [167, "examples"]], "Microscaling Quantization": [[95, "microscaling-quantization"], [154, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[95, "get-started-with-microscaling-quantization-api"], [154, "get-started-with-microscaling-quantization-api"]], "Reference": [[95, "reference"], [99, "reference"], [106, "reference"], [132, "reference"], [133, "reference"], [154, "reference"], [157, "reference"], [160, "reference"], [163, "reference"], [166, "reference"]], "PyTorch Mixed Precision": [[96, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[96, "mixed-precision-support-matrix"], [152, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[96, "hardware-and-software-requests-for-bf16"], [152, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[96, "hardware-and-software-requests-for-fp16"], [152, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[96, "accuracy-driven-mixed-precision"], [152, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[96, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[97, "pytorch-smooth-quantization"]], "Usage": [[97, "usage"], [99, "usage"], [102, "usage"], [105, "usage"], [166, "usage"], [167, "usage"], [167, "id1"], [169, "usage"], [169, "id2"], [169, "id4"], [169, "id6"], [169, "id8"], [169, "id10"], [169, "id12"], [169, "id14"], [169, "id16"], [169, "id18"], [169, "id20"], [169, "id22"]], "Fixed Alpha": [[97, "fixed-alpha"]], "Specify Quantization Rules": [[97, "specify-quantization-rules"], [98, "specify-quantization-rules"], [99, "specify-quantization-rules"], [101, "specify-quantization-rules"], [160, "specify-quantization-rules"]], "Validated Models": [[97, "validated-models"], [144, "validated-models"], [166, "validated-models"], [172, "validated-models"]], "Supported Framework Matrix": [[97, "supported-framework-matrix"], [166, "supported-framework-matrix"]], "PyTorch Static Quantization": [[98, "pytorch-static-quantization"]], "Get Started": [[98, "get-started"], [99, "get-started"], [101, "get-started"], [110, "get-started"], [160, "get-started"]], "Static Quantization with IPEX Backend": [[98, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[98, "usage-sample-with-ipex"]], "Model Examples": [[98, "model-examples"]], "Static Quantization with PT2E Backend": [[98, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[98, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[98, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[99, "pytorch-weight-only-quantization"]], "Supported Matrix": [[99, "supported-matrix"], [100, "supported-matrix"], [105, "supported-matrix"]], "Common arguments": [[99, "common-arguments"]], "RTN": [[99, "rtn"]], "GPTQ": [[99, "gptq"]], "AutoRound": [[99, "autoround"]], "AWQ": [[99, "awq"]], "TEQ": [[99, "teq"]], "HQQ": [[99, "hqq"]], "Saving and Loading": [[99, "saving-and-loading"]], "Torch": [[100, "torch"]], "Torch-like APIs": [[100, "torch-like-apis"]], "Quantization APIs": [[100, "quantization-apis"]], "Autotune API": [[100, "autotune-api"]], "Load API": [[100, "load-api"]], "Common Problems": [[100, "common-problems"]], "TensorFlow Quantization": [[101, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[101, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[101, "with-accuracy-aware-tuning"]], "Smooth Quant": [[102, "smooth-quant"], [166, "smooth-quant"]], "Using a Fixed alpha": [[102, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[102, "determining-the-alpha-through-auto-tuning"], [166, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[103, "tensorflow"], [135, "tensorflow"], [150, "tensorflow"], [168, "tensorflow"]], "API for TensorFlow": [[103, "api-for-tensorflow"]], "Support Matrix": [[103, "support-matrix"], [132, "support-matrix"]], "Quantization Scheme": [[103, "quantization-scheme"]], "Quantization Approaches": [[103, "quantization-approaches"], [160, "quantization-approaches"]], "Post Training Static Quantization": [[103, "post-training-static-quantization"], [110, "post-training-static-quantization"], [160, "post-training-static-quantization"]], "Smooth Quantization": [[103, "smooth-quantization"], [106, "smooth-quantization"]], "Backend and Device": [[103, "backend-and-device"]], "AutoTune": [[104, "autotune"]], "Overview": [[104, "overview"], [170, "overview"]], "How it Works": [[104, "how-it-works"]], "Working with Autotune": [[104, "working-with-autotune"]], "Working with PyTorch Model": [[104, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[104, "working-with-tensorflow-model"]], "Benchmark": [[105, "benchmark"], [122, "benchmark"], [151, "benchmark"], [159, "benchmark"]], "General Use Cases": [[105, "general-use-cases"]], "Dump Throughput and Latency Summary": [[105, "dump-throughput-and-latency-summary"]], "Demo usage": [[105, "demo-usage"]], "Quantization": [[106, "quantization"], [128, "quantization"], [159, "quantization"], [160, "quantization"]], "Quantization Fundamentals": [[106, "quantization-fundamentals"], [160, "quantization-fundamentals"], [166, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[106, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[106, "quantization-scheme-in-tensorflow"], [160, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[106, "quantization-scheme-in-pytorch"], [160, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[106, "quantization-scheme-in-ipex"], [160, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[106, "per-tensor-per-channel"], [166, "per-tensor-per-channel"]], "Per-tensor example": [[106, "per-tensor-example"], [166, "per-tensor-example"]], "Per-channel example": [[106, "per-channel-example"], [166, "per-channel-example"]], "Matmul quantization example": [[106, "matmul-quantization-example"], [166, "matmul-quantization-example"]], "Static Quantization": [[106, "static-quantization"]], "Per-channel limitation": [[106, "per-channel-limitation"], [166, "per-channel-limitation"]], "Weight Only Quantization": [[106, "weight-only-quantization"]], "Quantization Aware Training": [[106, "quantization-aware-training"], [151, "quantization-aware-training"], [160, "quantization-aware-training"], [160, "id1"]], "Accuracy Aware Tuning": [[106, "accuracy-aware-tuning"], [160, "accuracy-aware-tuning"]], "Intel\u00ae Neural Compressor Documentation": [[107, "intel-neural-compressor-documentation"], [173, "intel-neural-compressor-documentation"]], "Sections": [[107, "sections"], [173, "sections"]], "Contributor Covenant Code of Conduct": [[108, "contributor-covenant-code-of-conduct"], [109, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[108, "our-pledge"]], "Our Standards": [[108, "our-standards"]], "Our Responsibilities": [[108, "our-responsibilities"]], "Scope": [[108, "scope"]], "Enforcement": [[108, "enforcement"]], "Attribution": [[108, "attribution"]], "Contribution Guidelines": [[109, "contribution-guidelines"]], "Create Pull Request": [[109, "create-pull-request"]], "Step-by-Step guidelines": [[109, "step-by-step-guidelines"]], "Pull Request Checklist": [[109, "pull-request-checklist"]], "Pull Request Template": [[109, "pull-request-template"]], "Pull Request Acceptance Criteria": [[109, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[109, "pull-request-status-checks-overview"]], "Support": [[109, "support"]], "FX": [[110, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[110, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[110, "post-training-dynamic-quantization"], [160, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[110, "quantization-aware-training"]], "Note": [[110, "note"]], "Details": [[110, "details"]], "Common Problem": [[110, "common-problem"]], "Static Quantization & Quantization Aware Training": [[110, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[111, "neural-architecture-search"]], "Basic NAS": [[111, "basic-nas"]], "Dynamic NAS": [[111, "dynamic-nas"]], "NAS Support Matrix": [[111, "nas-support-matrix"]], "Get Started with NAS API": [[111, "get-started-with-nas-api"]], "Basic Usage": [[111, "basic-usage"]], "1. Python code + YAML": [[111, "python-code-yaml"]], "2. Python code only": [[111, "python-code-only"]], "Advanced Usage (Custom NAS)": [[111, "advanced-usage-custom-nas"]], "Security Policy": [[112, "security-policy"]], "Report a Vulnerability": [[112, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[113, "intel-neural-compressor"]], "What\u2019s New": [[113, "what-s-new"]], "Installation": [[113, "installation"], [147, "installation"], [147, "id1"]], "Install from pypi": [[113, "install-from-pypi"]], "Getting Started": [[113, "getting-started"], [144, "getting-started"]], "Weight-Only Quantization (LLMs)": [[113, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[113, "static-quantization-non-llms"]], "Documentation": [[113, "documentation"]], "Selected Publications/Events": [[113, "selected-publications-events"]], "Additional Content": [[113, "additional-content"]], "Communication": [[113, "communication"]], "Adaptor": [[114, "adaptor"], [117, "adaptor"]], "Adaptor Support Matrix": [[114, "adaptor-support-matrix"]], "Working Flow": [[114, "working-flow"], [160, "working-flow"]], "Get Started with Adaptor API": [[114, "get-started-with-adaptor-api"]], "Query API": [[114, "query-api"]], "Background": [[114, "background"], [133, "background"]], "Query API Introduction": [[114, "query-api-introduction"]], "Example of Adding a New Backend Support": [[114, "example-of-adding-a-new-backend-support"]], "Capability": [[114, "capability"]], "Implement ONNXRTAdaptor Class": [[114, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[115, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[115, "api-list-that-need-to-implement"]], "Design the framework YAML": [[115, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[115, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[115, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[115, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[115, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[115, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[116, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[116, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[116, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[116, "use-the-new-data-type"]], "Summary": [[116, "summary"]], "ONNX Runtime": [[118, "onnx-runtime"]], "Torch Utils": [[119, "torch-utils"]], "API Document Example": [[120, "api-document-example"]], "APIs": [[121, "apis"]], "Compression": [[123, "compression"]], "Config": [[124, "config"]], "Mix Precision": [[125, "mix-precision"], [151, "mix-precision"]], "Model": [[126, "model"], [153, "model"]], "Objective": [[127, "objective"], [155, "objective"]], "Strategy": [[129, "strategy"]], "Training": [[130, "training"]], "Benchmarking": [[131, "benchmarking"]], "Benchmark Support Matrix": [[131, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[131, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[132, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[132, "calibration-algorithms"]], "INC Coding Conventions": [[133, "inc-coding-conventions"]], "Rules": [[133, "rules"]], "Imports": [[133, "imports"]], "Strings": [[133, "strings"]], "Logger": [[133, "logger"]], "Type Annotations": [[133, "type-annotations"]], "Comments": [[133, "comments"]], "TODO Comments": [[133, "todo-comments"]], "Public and Internal Interfaces": [[133, "public-and-internal-interfaces"]], "Folder structure": [[133, "folder-structure"]], "Recommend VS Code settings.json": [[133, "recommend-vs-code-settings-json"]], "DataLoader": [[134, "dataloader"]], "Supported Framework Dataloader Matrix": [[134, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[134, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[134, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[134, "build-custom-dataloader-with-python-api"]], "Dataset": [[135, "dataset"]], "Supported Framework Dataset Matrix": [[135, "supported-framework-dataset-matrix"]], "PyTorch": [[135, "pytorch"], [150, "pytorch"], [162, "pytorch"]], "MXNet": [[135, "mxnet"], [150, "mxnet"], [168, "mxnet"]], "ONNXRT": [[135, "onnxrt"], [150, "onnxrt"], [168, "onnxrt"]], "Get start with Dataset API": [[135, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[135, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[135, "user-specific-dataset"]], "Design": [[136, "design"], [169, "design"], [169, "id1"], [169, "id3"], [169, "id5"], [169, "id7"], [169, "id9"], [169, "id11"], [169, "id13"], [169, "id15"], [169, "id17"], [169, "id19"], [169, "id21"]], "Architecture": [[136, "architecture"], [146, "architecture"]], "Workflow": [[136, "workflow"]], "Distillation": [[137, "distillation"], [151, "distillation"], [159, "distillation"]], "Knowledge Distillation": [[137, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[137, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[137, "self-distillation"]], "Distillation Support Matrix": [[137, "distillation-support-matrix"]], "Get Started with Distillation API": [[137, "get-started-with-distillation-api"]], "Distillation for Quantization": [[138, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[138, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[138, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[139, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[139, "supported-feature-matrix"], [143, "supported-feature-matrix"], [146, "supported-feature-matrix"], [159, "supported-feature-matrix"], [160, "supported-feature-matrix"], [167, "supported-feature-matrix"], [171, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[139, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[139, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[139, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[139, "horovodrun-execution"]], "Security": [[139, "security"]], "PyTorch Examples:": [[139, "pytorch-examples"]], "TensorFlow Examples:": [[139, "tensorflow-examples"]], "Example List": [[140, "example-list"]], "Release Data": [[140, "release-data"]], "Export": [[141, "export"]], "Supported Framework Model Matrix": [[141, "supported-framework-model-matrix"], [153, "supported-framework-model-matrix"], [154, "supported-framework-model-matrix"], [161, "supported-framework-model-matrix"], [163, "supported-framework-model-matrix"]], "PyTorch Model": [[141, "pytorch-model"]], "FP32 Model Export": [[141, "fp32-model-export"], [141, "id1"]], "INT8 Model Export": [[141, "int8-model-export"], [141, "id2"]], "Tensorflow Model": [[141, "tensorflow-model"]], "Appendix": [[141, "appendix"]], "Supported quantized ops": [[141, "supported-quantized-ops"]], "Frequently Asked Questions": [[142, "frequently-asked-questions"]], "Common Build Issues": [[142, "common-build-issues"]], "Issue 1:": [[142, "issue-1"]], "Issue 2:": [[142, "issue-2"]], "Issue 3:": [[142, "issue-3"]], "Issue 4:": [[142, "issue-4"]], "Framework YAML Configuration Files": [[143, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[143, "get-started-with-framework-yaml-files"]], "Quick Samples": [[144, "quick-samples"]], "Quantization with Python API": [[144, "quantization-with-python-api"]], "Incompatible changes between v1.2 and v1.1": [[145, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[145, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[145, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[146, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[147, "prerequisites"]], "Install from Binary": [[147, "install-from-binary"]], "Install from Source": [[147, "install-from-source"]], "Install from AI Kit": [[147, "install-from-ai-kit"]], "System Requirements": [[147, "system-requirements"]], "Validated Hardware Environment": [[147, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[147, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[147, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[147, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[147, "validated-software-environment"]], "Legal Information": [[148, "legal-information"]], "License": [[148, "license"]], "Citation": [[148, "citation"]], "Trademarks": [[148, "trademarks"]], "LLMs Quantization Recipes": [[149, "llms-quantization-recipes"]], "Large Language Models Recipes": [[149, "large-language-models-recipes"]], "Large Language Models Accuracy": [[149, "large-language-models-accuracy"]], "Metrics": [[150, "metrics"]], "Supported Built-in Metric Matrix": [[150, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[150, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[150, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[150, "build-custom-metric-with-python-api"]], "Example": [[150, "example"], [155, "example"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[151, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[151, "model-quantization"]], "Post-training Quantization": [[151, "post-training-quantization"]], "Pruning": [[151, "pruning"], [157, "pruning"], [159, "pruning"]], "Orchestration": [[151, "orchestration"]], "Mixed Precision": [[152, "mixed-precision"]], "During quantization mixed precision": [[152, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[152, "get-started-with-mixed-precision-api"]], "Single Objective": [[155, "single-objective"]], "Multiple Objectives": [[155, "multiple-objectives"]], "Objective Support Matrix": [[155, "objective-support-matrix"]], "Get Started with Objective API": [[155, "get-started-with-objective-api"]], "Config Single Objective": [[155, "config-single-objective"]], "Config Multiple Objectives": [[155, "config-multiple-objectives"]], "Optimization Orchestration": [[156, "optimization-orchestration"]], "One-shot": [[156, "one-shot"]], "Orchestration Support Matrix": [[156, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[156, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[157, "neural-network-pruning"]], "Pruning Patterns": [[157, "pruning-patterns"]], "Pruning Criteria": [[157, "pruning-criteria"]], "Pruning Types": [[157, "pruning-types"]], "Pruning Schedules": [[157, "pruning-schedules"]], "Pruning Scope": [[157, "pruning-scope"]], "Sparsity Decay Types": [[157, "sparsity-decay-types"]], "Regularization": [[157, "regularization"]], "Large Language Model Pruning": [[157, "large-language-model-pruning"]], "Pruning Support Matrix": [[157, "pruning-support-matrix"]], "Get Started with Pruning API": [[157, "get-started-with-pruning-api"]], "Training-aware pruning API": [[157, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[157, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[157, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[157, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[158, "full-publications-events-82"]], "2024 (3)": [[158, "id1"]], "2023 (25)": [[158, "id2"]], "2022 (35)": [[158, "id3"]], "2021 (15)": [[158, "id4"]], "2018 - 2020 (4)": [[158, "id5"]], "Pythonic Style Access for Configurations": [[159, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[159, "pythonic-api-for-user-configurations"], [159, "id1"]], "Pythonic API for Framework Configurations": [[159, "pythonic-api-for-framework-configurations"], [159, "id2"]], "Get Started with Pythonic API for Configurations": [[159, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[159, "nas"]], "Quantization Introduction": [[160, "quantization-introduction"]], "Quantization Support Matrix": [[160, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[160, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[160, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[160, "post-training-quantization"]], "Specify Quantization Recipes": [[160, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[160, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[161, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[161, "pytorch-framework-example"]], "ONNX Runtime framework example": [[161, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[162, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[162, "tensorflow"]], "Weight Only Quantization (WOQ)": [[163, "weight-only-quantization-woq"]], "Quantization Capability": [[163, "quantization-capability"]], "Export Compressed Model": [[163, "export-compressed-model"]], "User Code Example": [[163, "user-code-example"]], "WOQ Algorithms Tuning": [[163, "woq-algorithms-tuning"]], "User code example": [[163, "id1"]], "Release": [[164, "release"]], "Release Notes": [[164, "release-notes"]], "Known Issues": [[164, "known-issues"]], "Incompatible Changes": [[164, "incompatible-changes"]], "SigOpt Strategy": [[165, "sigopt-strategy"]], "Preparation": [[165, "preparation"]], "SigOpt Platform": [[165, "sigopt-platform"]], "Neural Compressor Configuration": [[165, "neural-compressor-configuration"]], "Performance": [[165, "performance"]], "Benefit of SigOpt Strategy": [[165, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[165, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[166, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[166, "smoothquant"]], "Our enhancement:": [[166, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[166, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[166, "engineering"]], "Using a fixed alpha": [[166, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[166, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[166, "auto-tune-the-alpha-for-each-layer-block"]], "TensorBoard": [[167, "tensorboard"]], "Get Started with TensorBoard": [[167, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[167, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[167, "tensorflow-tensorboard"]], "PyTorch Examples": [[167, "pytorch-examples"]], "TensorFlow Examples": [[167, "tensorflow-examples"]], "Transform": [[168, "transform"]], "Transform Support List": [[168, "transform-support-list"]], "Pytorch": [[168, "pytorch"]], "Tuning Strategies": [[169, "tuning-strategies"]], "Strategy Design": [[169, "strategy-design"]], "Tuning Space": [[169, "tuning-space"]], "Exit Policy": [[169, "exit-policy"]], "Accuracy Criteria": [[169, "accuracy-criteria"]], "Tuning Process": [[169, "tuning-process"]], "Tuning Algorithms": [[169, "tuning-algorithms"]], "Auto": [[169, "auto"]], "Conservative Tuning": [[169, "conservative-tuning"]], "Basic": [[169, "basic"]], "MSE": [[169, "mse"]], "MSE_V2": [[169, "mse-v2"]], "HAWQ_V2": [[169, "hawq-v2"]], "Bayesian": [[169, "bayesian"]], "Exhaustive": [[169, "exhaustive"]], "Random": [[169, "random"]], "SigOpt": [[169, "sigopt"]], "TPE": [[169, "tpe"]], "Distributed Tuning": [[169, "distributed-tuning"]], "Customize a New Tuning Strategy": [[169, "customize-a-new-tuning-strategy"]], "User Guide": [[170, "user-guide"]], "Python-based APIs": [[170, "python-based-apis"]], "Advanced Topics": [[170, "advanced-topics"]], "User YAML Configuration Files": [[171, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[171, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[172, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[172, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[172, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[172, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[172, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[172, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[172, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[172, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[172, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[172, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.common.base_config"], [7, "module-neural_compressor.common.base_tuning"], [8, "module-neural_compressor.common"], [9, "module-neural_compressor.common.tuning_param"], [10, "module-neural_compressor.common.utils.constants"], [11, "module-neural_compressor.common.utils"], [12, "module-neural_compressor.common.utils.logger"], [13, "module-neural_compressor.common.utils.save_load"], [14, "module-neural_compressor.common.utils.utility"], [15, "module-neural_compressor.config"], [16, "module-neural_compressor.contrib"], [17, "module-neural_compressor.contrib.strategy"], [18, "module-neural_compressor.contrib.strategy.sigopt"], [19, "module-neural_compressor.contrib.strategy.tpe"], [20, "module-neural_compressor.data.datasets.bert_dataset"], [21, "module-neural_compressor.data.datasets.coco_dataset"], [22, "module-neural_compressor.data.datasets.dataset"], [23, "module-neural_compressor.data.datasets.dummy_dataset"], [24, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [25, "module-neural_compressor.data.datasets.imagenet_dataset"], [26, "module-neural_compressor.data.datasets"], [27, "module-neural_compressor.data.datasets.style_transfer_dataset"], [28, "module-neural_compressor.data.filters.coco_filter"], [29, "module-neural_compressor.data.filters.filter"], [30, "module-neural_compressor.data.filters"], [31, "module-neural_compressor.data"], [32, "module-neural_compressor.data.transforms.imagenet_transform"], [33, "module-neural_compressor.data.transforms"], [34, "module-neural_compressor.data.transforms.postprocess"], [35, "module-neural_compressor.data.transforms.tokenization"], [36, "module-neural_compressor.data.transforms.transform"], [37, "module-neural_compressor"], [38, "module-neural_compressor.metric.bleu"], [39, "module-neural_compressor.metric.bleu_util"], [40, "module-neural_compressor.metric.coco_label_map"], [41, "module-neural_compressor.metric.coco_tools"], [42, "module-neural_compressor.metric.evaluate_squad"], [43, "module-neural_compressor.metric.f1"], [44, "module-neural_compressor.metric"], [45, "module-neural_compressor.metric.metric"], [46, "module-neural_compressor.mix_precision"], [47, "module-neural_compressor.model.base_model"], [48, "module-neural_compressor.model"], [49, "module-neural_compressor.model.keras_model"], [50, "module-neural_compressor.model.model"], [51, "module-neural_compressor.model.mxnet_model"], [52, "module-neural_compressor.model.nets_factory"], [53, "module-neural_compressor.model.onnx_model"], [54, "module-neural_compressor.model.tensorflow_model"], [55, "module-neural_compressor.model.torch_model"], [56, "module-neural_compressor.objective"], [57, "module-neural_compressor.profiling"], [58, "module-neural_compressor.quantization"], [59, "module-neural_compressor.strategy.auto"], [60, "module-neural_compressor.strategy.auto_mixed_precision"], [61, "module-neural_compressor.strategy.basic"], [62, "module-neural_compressor.strategy.bayesian"], [63, "module-neural_compressor.strategy.conservative"], [64, "module-neural_compressor.strategy.exhaustive"], [65, "module-neural_compressor.strategy.hawq_v2"], [66, "module-neural_compressor.strategy"], [67, "module-neural_compressor.strategy.mse"], [68, "module-neural_compressor.strategy.mse_v2"], [69, "module-neural_compressor.strategy.random"], [70, "module-neural_compressor.strategy.strategy"], [71, "module-neural_compressor.strategy.utils.constant"], [72, "module-neural_compressor.strategy.utils"], [73, "module-neural_compressor.strategy.utils.tuning_sampler"], [74, "module-neural_compressor.strategy.utils.tuning_space"], [75, "module-neural_compressor.strategy.utils.tuning_structs"], [76, "module-neural_compressor.strategy.utils.utility"], [77, "module-neural_compressor.training"], [78, "module-neural_compressor.utils.collect_layer_histogram"], [79, "module-neural_compressor.utils.constant"], [80, "module-neural_compressor.utils.create_obj_from_config"], [81, "module-neural_compressor.utils.export"], [82, "module-neural_compressor.utils.export.qlinear2qdq"], [83, "module-neural_compressor.utils.export.tf2onnx"], [84, "module-neural_compressor.utils.export.torch2onnx"], [85, "module-neural_compressor.utils"], [86, "module-neural_compressor.utils.kl_divergence"], [87, "module-neural_compressor.utils.load_huggingface"], [88, "module-neural_compressor.utils.logger"], [89, "module-neural_compressor.utils.options"], [90, "module-neural_compressor.utils.pytorch"], [91, "module-neural_compressor.utils.utility"], [92, "module-neural_compressor.utils.weights_details"], [93, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ComposableConfig"]], "configregistry (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ConfigRegistry"]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[6, "neural_compressor.common.base_config.ComposableConfig.config_list"]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.get_all_config_set_from_config_registry"]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.name"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.params_list"]], "register_config() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "configloader (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigLoader"]], "configset (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigSet"]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.EvaluationFuncWrapper"]], "evaluator (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Evaluator"]], "sampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Sampler"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningConfig"]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningMonitor"]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[7, "neural_compressor.common.base_tuning.ConfigSet.config_list"]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.init_tuning"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL"]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL"]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "mode (class in neural_compressor.common.utils.constants)": [[10, "neural_compressor.common.utils.constants.Mode"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.LazyImport"]], "processortype (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.ProcessorType"]], "statistics (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.Statistics"]], "call_counter() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.call_counter"]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.get_workspace"]], "log_process() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.log_process"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.singleton"]], "accuracycriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[15, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[15, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[15, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[15, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[15, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[15, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[18, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[19, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[23, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[27, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[34, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TRANSFORMS"], [36, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[37, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[39, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[45, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[45, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[45, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[45, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[45, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[46, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[47, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[49, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[50, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[50, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[51, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[52, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[53, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[56, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[58, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[59, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[60, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[61, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[63, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[64, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[65, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[67, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[68, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[69, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[75, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[77, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[77, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[77, "neural_compressor.training.fit"]], "neural_compressor.training": [[77, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[77, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[78, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[78, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[79, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[80, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[81, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[82, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[82, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[82, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[83, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[83, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[84, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[85, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[86, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[86, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[87, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[88, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[89, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[89, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[90, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[91, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[92, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[92, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[92, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[93, "module-neural_compressor.version"]]}})