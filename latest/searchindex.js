Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/tensorflow/algorithms/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index", "autoapi/neural_compressor/tensorflow/index", "autoapi/neural_compressor/tensorflow/keras/index", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/index", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index", "autoapi/neural_compressor/tensorflow/keras/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index", "autoapi/neural_compressor/tensorflow/quantization/autotune/index", "autoapi/neural_compressor/tensorflow/quantization/config/index", "autoapi/neural_compressor/tensorflow/quantization/index", "autoapi/neural_compressor/tensorflow/quantization/quantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index", "autoapi/neural_compressor/tensorflow/quantization/utils/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index", "autoapi/neural_compressor/tensorflow/utils/constants/index", "autoapi/neural_compressor/tensorflow/utils/data/index", "autoapi/neural_compressor/tensorflow/utils/index", "autoapi/neural_compressor/tensorflow/utils/model/index", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index", "autoapi/neural_compressor/tensorflow/utils/utility/index", "autoapi/neural_compressor/torch/export/index", "autoapi/neural_compressor/torch/export/pt2e_export/index", "autoapi/neural_compressor/torch/index", "autoapi/neural_compressor/torch/quantization/autotune/index", "autoapi/neural_compressor/torch/quantization/config/index", "autoapi/neural_compressor/torch/quantization/index", "autoapi/neural_compressor/torch/quantization/quantize/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/2x_user_guide", "docs/source/3x/PT_DynamicQuant", "docs/source/3x/PT_MXQuant", "docs/source/3x/PT_MixedPrecision", "docs/source/3x/PT_SmoothQuant", "docs/source/3x/PT_StaticQuant", "docs/source/3x/PT_WeightOnlyQuant", "docs/source/3x/PyTorch", "docs/source/3x/TF_Quant", "docs/source/3x/TF_SQ", "docs/source/3x/TensorFlow", "docs/source/3x/autotune", "docs/source/3x/benchmark", "docs/source/3x/client_quant", "docs/source/3x/design", "docs/source/3x/llm_recipes", "docs/source/3x/quantization", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_2", "docs/source/api-doc/api_3", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/tf_quantization_autotune", "docs/source/api-doc/tf_quantization_common", "docs/source/api-doc/tf_quantization_config", "docs/source/api-doc/torch_quantization_autotune", "docs/source/api-doc/torch_quantization_common", "docs/source/api-doc/torch_quantization_config", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/design", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/calibration/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/core/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/smoother/scaler/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/keras/index.rst", "autoapi/neural_compressor/tensorflow/algorithms/static_quant/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/index.rst", "autoapi/neural_compressor/tensorflow/keras/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/dense/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/depthwise_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/layer_initializer/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/pool2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/layers/separable_conv2d/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/keras/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/algorithm_entry/index.rst", "autoapi/neural_compressor/tensorflow/quantization/autotune/index.rst", "autoapi/neural_compressor/tensorflow/quantization/config/index.rst", "autoapi/neural_compressor/tensorflow/quantization/index.rst", "autoapi/neural_compressor/tensorflow/quantization/quantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/graph_util/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/tensorflow/quantization/utils/utility/index.rst", "autoapi/neural_compressor/tensorflow/utils/constants/index.rst", "autoapi/neural_compressor/tensorflow/utils/data/index.rst", "autoapi/neural_compressor/tensorflow/utils/index.rst", "autoapi/neural_compressor/tensorflow/utils/model/index.rst", "autoapi/neural_compressor/tensorflow/utils/model_wrappers/index.rst", "autoapi/neural_compressor/tensorflow/utils/utility/index.rst", "autoapi/neural_compressor/torch/export/index.rst", "autoapi/neural_compressor/torch/export/pt2e_export/index.rst", "autoapi/neural_compressor/torch/index.rst", "autoapi/neural_compressor/torch/quantization/autotune/index.rst", "autoapi/neural_compressor/torch/quantization/config/index.rst", "autoapi/neural_compressor/torch/quantization/index.rst", "autoapi/neural_compressor/torch/quantization/quantize/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/2x_user_guide.md", "docs/source/3x/PT_DynamicQuant.md", "docs/source/3x/PT_MXQuant.md", "docs/source/3x/PT_MixedPrecision.md", "docs/source/3x/PT_SmoothQuant.md", "docs/source/3x/PT_StaticQuant.md", "docs/source/3x/PT_WeightOnlyQuant.md", "docs/source/3x/PyTorch.md", "docs/source/3x/TF_Quant.md", "docs/source/3x/TF_SQ.md", "docs/source/3x/TensorFlow.md", "docs/source/3x/autotune.md", "docs/source/3x/benchmark.md", "docs/source/3x/client_quant.md", "docs/source/3x/design.md", "docs/source/3x/llm_recipes.md", "docs/source/3x/quantization.md", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_2.rst", "docs/source/api-doc/api_3.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/tf_quantization_autotune.rst", "docs/source/api-doc/tf_quantization_common.rst", "docs/source/api-doc/tf_quantization_config.rst", "docs/source/api-doc/torch_quantization_autotune.rst", "docs/source/api-doc/torch_quantization_common.rst", "docs/source/api-doc/torch_quantization_config.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/design.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.tensorflow.algorithms", "neural_compressor.tensorflow.algorithms.smoother.calibration", "neural_compressor.tensorflow.algorithms.smoother.core", "neural_compressor.tensorflow.algorithms.smoother", "neural_compressor.tensorflow.algorithms.smoother.scaler", "neural_compressor.tensorflow.algorithms.static_quant", "neural_compressor.tensorflow.algorithms.static_quant.keras", "neural_compressor.tensorflow.algorithms.static_quant.tensorflow", "neural_compressor.tensorflow", "neural_compressor.tensorflow.keras", "neural_compressor.tensorflow.keras.layers.conv2d", "neural_compressor.tensorflow.keras.layers.dense", "neural_compressor.tensorflow.keras.layers.depthwise_conv2d", "neural_compressor.tensorflow.keras.layers", "neural_compressor.tensorflow.keras.layers.layer_initializer", "neural_compressor.tensorflow.keras.layers.pool2d", "neural_compressor.tensorflow.keras.layers.separable_conv2d", "neural_compressor.tensorflow.keras.quantization.config", "neural_compressor.tensorflow.keras.quantization", "neural_compressor.tensorflow.quantization.algorithm_entry", "neural_compressor.tensorflow.quantization.autotune", "neural_compressor.tensorflow.quantization.config", "neural_compressor.tensorflow.quantization", "neural_compressor.tensorflow.quantization.quantize", "neural_compressor.tensorflow.quantization.utils.graph_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base", "neural_compressor.tensorflow.quantization.utils.graph_rewriter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq", "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern", "neural_compressor.tensorflow.quantization.utils.graph_util", "neural_compressor.tensorflow.quantization.utils", "neural_compressor.tensorflow.quantization.utils.quantize_graph", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul", "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling", "neural_compressor.tensorflow.quantization.utils.quantize_graph_common", "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction", "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base", "neural_compressor.tensorflow.quantization.utils.transform_graph", "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging", "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat", "neural_compressor.tensorflow.quantization.utils.utility", "neural_compressor.tensorflow.utils.constants", "neural_compressor.tensorflow.utils.data", "neural_compressor.tensorflow.utils", "neural_compressor.tensorflow.utils.model", "neural_compressor.tensorflow.utils.model_wrappers", "neural_compressor.tensorflow.utils.utility", "neural_compressor.torch.export", "neural_compressor.torch.export.pt2e_export", "neural_compressor.torch", "neural_compressor.torch.quantization.autotune", "neural_compressor.torch.quantization.config", "neural_compressor.torch.quantization", "neural_compressor.torch.quantization.quantize", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Intel\u00ae Neural Compressor Documentation", "2.X API User Guide", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization on Client", "Design", "&lt;no title&gt;", "Quantization", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "2.0 API", "3.0 API", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Tensorflow Quantization AutoTune", "Tensorflow Quantization Base API", "Tensorflow Quantization Config", "Pytorch Quantization AutoTune", "Pytorch Quantization Base API", "Pytorch Quantization Config", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Design", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "Transform", "Tuning Strategies", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 6, 22, 29, 36, 45, 56, 70, 76, 94, 186, 234, 261, 265, 276, 277, 281, 291, 293], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 36, 217, 222, 265, 285, 289, 292], "sourc": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 231, 233, 274, 277, 284], "decor": [0, 6, 14, 36, 45, 56, 70, 119, 120, 122, 186, 208, 231, 234, 293], "all": [0, 2, 5, 6, 10, 15, 22, 29, 36, 38, 41, 43, 45, 47, 56, 70, 76, 77, 94, 97, 115, 148, 182, 184, 185, 186, 190, 197, 201, 208, 216, 219, 222, 223, 225, 228, 229, 230, 233, 234, 235, 236, 261, 262, 265, 269, 273, 277, 282, 283, 284, 285, 287, 288, 291, 292, 293], "subclass": [0, 22, 29, 36, 45, 56, 70, 234], "paramet": [0, 5, 6, 7, 9, 13, 14, 15, 18, 19, 20, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 78, 81, 96, 100, 119, 120, 122, 138, 167, 180, 185, 186, 188, 190, 191, 193, 194, 197, 199, 200, 201, 204, 205, 207, 208, 214, 216, 217, 218, 221, 222, 224, 228, 231, 235, 262, 265, 272, 276, 277, 280, 283, 285, 286, 288, 290, 291, 292, 293], "cl": [0, 14, 22, 29, 36, 45, 56, 70, 186, 208, 261], "The": [0, 5, 6, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 28, 29, 36, 38, 39, 40, 42, 43, 45, 46, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 76, 78, 79, 83, 87, 88, 89, 92, 93, 94, 96, 97, 100, 106, 126, 139, 156, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 193, 194, 195, 197, 203, 204, 207, 208, 209, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 228, 229, 231, 234, 235, 236, 237, 239, 245, 248, 251, 259, 260, 261, 262, 265, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "str": [0, 6, 9, 13, 14, 15, 20, 21, 22, 29, 32, 36, 38, 39, 41, 43, 45, 73, 76, 78, 94, 97, 98, 100, 186, 188, 191, 197, 200, 201, 204, 208, 209, 218, 219, 222, 261, 262, 276, 292], "registr": [0, 22, 29, 36], "name": [0, 5, 6, 7, 9, 13, 15, 20, 21, 22, 25, 29, 34, 36, 40, 45, 50, 54, 56, 58, 74, 76, 78, 87, 88, 92, 106, 119, 120, 122, 155, 180, 185, 186, 195, 197, 199, 200, 201, 208, 214, 217, 218, 219, 220, 230, 231, 236, 261, 265, 267, 269, 274, 276, 277, 279, 280, 283, 285, 289, 290, 293, 294], "call": [0, 14, 41, 222, 225, 228, 231, 234, 262, 271, 283, 285, 291, 292], "return": [0, 5, 6, 13, 14, 18, 19, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 94, 96, 98, 100, 106, 119, 120, 122, 126, 180, 185, 186, 188, 190, 191, 193, 194, 197, 201, 207, 208, 215, 219, 220, 223, 228, 231, 235, 236, 262, 265, 276, 279, 281, 283, 285, 288, 291, 293], "type": [0, 6, 7, 9, 13, 14, 15, 20, 22, 29, 36, 38, 39, 41, 45, 54, 56, 62, 63, 70, 74, 76, 78, 96, 100, 126, 147, 167, 180, 185, 186, 188, 190, 191, 201, 207, 208, 212, 214, 215, 216, 217, 218, 219, 220, 222, 225, 234, 235, 265, 267, 269, 272, 277, 278, 280, 285, 286, 288, 290, 292, 293], "build": [0, 1, 3, 4, 49, 51, 53, 54, 55, 185, 222, 234, 235, 236, 273, 279, 284, 293], "dict": [0, 5, 13, 15, 18, 19, 40, 41, 42, 43, 45, 46, 54, 58, 73, 76, 84, 94, 98, 100, 180, 185, 186, 188, 190, 191, 193, 194, 195, 197, 199, 201, 207, 208, 218, 219, 220, 225, 231, 235, 261, 267, 276, 283, 285, 291, 293], "algorithmschedul": 0, "conf": [0, 5, 15, 18, 19, 46, 56, 58, 59, 61, 62, 63, 67, 70, 74, 194, 231, 233, 236, 259, 271, 277, 278, 279, 282, 285, 286, 287, 288, 290, 291, 293], "control": [0, 15, 231, 277, 283, 293], "differ": [0, 4, 6, 9, 10, 15, 22, 36, 45, 54, 56, 175, 185, 203, 218, 219, 222, 225, 228, 229, 231, 235, 262, 265, 266, 270, 271, 272, 276, 277, 279, 281, 283, 285, 288, 291, 292, 293], "phase": [0, 222, 228, 277, 283, 285, 287, 293], "base": [0, 6, 7, 14, 15, 20, 22, 29, 36, 45, 47, 54, 55, 56, 67, 70, 74, 84, 100, 138, 167, 176, 182, 185, 191, 193, 213, 215, 216, 218, 219, 223, 225, 228, 234, 235, 236, 241, 261, 264, 265, 269, 277, 278, 283, 284, 285, 288, 290, 291, 293, 294], "fastbiascorrect": [1, 4], "threshold": [1, 195, 203, 276], "2": [1, 3, 5, 7, 15, 21, 41, 43, 45, 56, 62, 92, 106, 126, 154, 208, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 231, 233, 234, 243, 260, 262, 269, 270, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293], "0": [1, 3, 6, 7, 15, 20, 23, 24, 27, 32, 36, 45, 56, 58, 63, 98, 106, 180, 182, 191, 201, 204, 214, 215, 216, 218, 221, 223, 224, 228, 231, 233, 243, 261, 262, 265, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 283, 285, 286, 288, 289, 290, 291, 292, 293], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 7, 15, 20, 21, 23, 24, 27, 28, 32, 36, 41, 42, 43, 45, 56, 58, 76, 79, 87, 89, 93, 107, 126, 141, 154, 178, 180, 182, 186, 191, 197, 204, 208, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 228, 229, 231, 233, 234, 236, 260, 262, 267, 269, 273, 275, 276, 278, 280, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293], "fetch": [2, 113, 182, 235], "file": [2, 13, 15, 18, 19, 20, 21, 22, 25, 35, 36, 41, 46, 56, 58, 180, 186, 207, 208, 218, 224, 230, 234, 235, 236, 265, 268, 271, 274, 276, 277, 279, 281, 285, 288, 292], "init": [2, 276, 293], "fast_bias_correct": [2, 15, 285], "smooth_quant": [2, 15, 261, 285, 291], "weight_correct": [2, 15, 285], "smoothquant": [3, 79, 191, 212, 216, 218, 219, 221, 228, 275, 284, 288], "alpha": [3, 81, 98, 191, 228, 261, 285, 293], "5": [3, 7, 15, 24, 32, 45, 58, 98, 191, 216, 218, 221, 228, 234, 267, 269, 273, 276, 277, 283, 285, 288, 291, 292, 293, 294], "fake": [3, 9, 76, 218, 228, 277, 285, 288, 291], "input": [3, 15, 18, 19, 20, 21, 22, 24, 32, 35, 36, 45, 46, 50, 54, 58, 81, 106, 112, 116, 119, 120, 122, 123, 124, 126, 134, 135, 137, 138, 154, 155, 180, 182, 185, 186, 188, 193, 194, 199, 200, 201, 204, 207, 208, 213, 217, 218, 219, 228, 234, 235, 259, 260, 262, 264, 265, 267, 269, 271, 276, 277, 278, 279, 283, 285, 288, 291, 292], "channel": [3, 4, 15, 32, 36, 175, 204, 214, 216, 218, 233, 234, 236, 272, 273, 280, 283, 288, 292, 294], "quantiz": [3, 5, 7, 10, 12, 14, 15, 18, 19, 32, 37, 63, 65, 67, 76, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 187, 188, 189, 194, 195, 201, 203, 204, 207, 208, 212, 215, 221, 223, 226, 234, 240, 241, 261, 262, 265, 266, 269, 270, 271, 272, 276, 279, 282, 284, 289, 292, 293], "more": [3, 9, 36, 180, 191, 212, 214, 215, 216, 218, 219, 222, 228, 232, 233, 235, 260, 261, 265, 267, 272, 273, 275, 277, 278, 280, 281, 282, 283, 287, 288, 291, 293, 294], "detail": [3, 6, 36, 191, 208, 209, 212, 215, 216, 218, 219, 220, 221, 222, 228, 229, 233, 235, 236, 260, 261, 269, 271, 275, 276, 277, 278, 283, 288, 289, 290, 291, 293], "pleas": [3, 15, 20, 21, 22, 25, 45, 58, 212, 215, 216, 217, 218, 219, 220, 221, 228, 231, 232, 233, 234, 259, 260, 264, 265, 267, 273, 275, 276, 278, 283, 285, 287, 288, 289, 290, 291, 293], "refer": [3, 15, 20, 38, 39, 45, 58, 191, 215, 216, 217, 219, 220, 221, 222, 231, 233, 234, 235, 259, 262, 264, 265, 267, 271, 273, 274, 276, 277, 278, 281, 286, 289, 292, 293], "accur": [3, 191, 217, 218, 228, 283, 288, 291], "effici": [3, 217, 225, 228, 233, 260, 262, 282, 283, 284, 288, 291, 293], "post": [3, 15, 18, 19, 58, 148, 149, 191, 214, 216, 217, 218, 219, 221, 223, 228, 229, 233, 234, 235, 264, 265, 267, 272, 273, 280, 283, 284, 286, 288, 291, 293], "train": [3, 15, 18, 19, 20, 22, 36, 37, 58, 109, 132, 191, 197, 214, 215, 216, 217, 218, 219, 221, 223, 233, 234, 235, 240, 264, 267, 270, 272, 278, 280, 282, 284, 286, 288, 290, 291, 293], "larg": [3, 214, 216, 218, 219, 221, 222, 228, 233, 262, 277, 280, 284, 286, 288, 291, 294], "languag": [3, 38, 214, 216, 218, 219, 221, 222, 228, 229, 233, 267, 280, 284, 286, 288, 291], "model": [3, 5, 7, 9, 15, 18, 19, 20, 22, 36, 37, 45, 46, 56, 58, 59, 61, 62, 63, 67, 70, 76, 78, 81, 83, 96, 97, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 180, 183, 185, 186, 188, 190, 193, 194, 199, 200, 201, 204, 207, 208, 210, 212, 213, 214, 215, 218, 219, 220, 221, 222, 225, 228, 230, 231, 233, 234, 236, 240, 259, 260, 261, 262, 264, 265, 266, 270, 271, 272, 274, 276, 278, 281, 282, 284, 285, 289, 290, 292, 293], "spiq": [3, 228, 291], "data": [3, 14, 15, 18, 19, 37, 46, 58, 62, 74, 76, 78, 96, 100, 108, 180, 183, 186, 194, 197, 201, 208, 212, 213, 214, 215, 217, 218, 219, 222, 228, 233, 234, 260, 262, 265, 269, 273, 276, 277, 278, 280, 285, 287, 288, 289, 290, 291, 292, 293], "free": [3, 18, 19, 58, 216, 221, 228, 229, 281, 290, 291], "per": [3, 5, 15, 203, 214, 216, 218, 224, 234, 236, 262, 280, 283, 287, 288, 294], "static": [3, 15, 58, 74, 82, 83, 84, 94, 96, 98, 191, 193, 201, 219, 234, 235, 236, 267, 270, 272, 277, 286, 291, 293, 294], "For": [3, 7, 9, 13, 15, 22, 36, 42, 43, 45, 46, 58, 191, 208, 216, 218, 219, 220, 221, 225, 228, 229, 231, 232, 234, 236, 264, 265, 267, 269, 270, 272, 283, 287, 288, 291, 293, 294], "torch": [3, 7, 13, 15, 37, 46, 58, 201, 204, 207, 213, 214, 215, 216, 217, 218, 223, 225, 228, 231, 236, 237, 265, 267, 268, 270, 277, 278, 279, 280, 285, 288, 291], "backend": [3, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 68, 191, 215, 218, 219, 231, 236, 265, 271, 272, 277, 278, 288, 292, 293], "we": [3, 4, 5, 7, 15, 38, 41, 65, 119, 120, 122, 126, 138, 175, 212, 213, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 231, 233, 234, 235, 236, 261, 262, 265, 267, 269, 270, 275, 276, 277, 281, 282, 283, 285, 286, 288, 289, 290, 291, 293], "onli": [3, 4, 5, 15, 20, 58, 68, 76, 106, 115, 122, 138, 154, 175, 191, 201, 208, 212, 215, 219, 223, 224, 234, 235, 236, 259, 260, 261, 262, 265, 268, 269, 270, 275, 277, 278, 283, 284, 285, 286, 291, 293], "handl": [3, 12, 113, 180, 205, 231, 232, 261, 262, 291], "layer": [3, 15, 83, 84, 86, 186, 195, 197, 208, 212, 216, 217, 219, 228, 234, 235, 236, 264, 268, 272, 283, 288, 289], "whose": [3, 54, 185, 271, 291, 293], "smooth": [3, 15, 78, 79, 80, 81, 96, 98, 191, 219, 233, 261, 270, 283, 293], "scale": [3, 4, 32, 36, 81, 87, 88, 89, 92, 93, 150, 175, 213, 214, 216, 217, 218, 222, 228, 280, 285, 288, 290, 291, 292, 293], "could": [3, 18, 19, 22, 46, 58, 194, 212, 215, 217, 218, 220, 222, 228, 229, 231, 264, 268, 277, 282, 283, 285, 288, 291], "absorb": [3, 218, 288], "support": [3, 6, 15, 18, 19, 20, 22, 29, 32, 36, 37, 45, 46, 50, 56, 58, 68, 74, 148, 194, 197, 203, 204, 208, 210, 212, 213, 217, 220, 223, 228, 233, 235, 261, 270, 275, 277, 284, 287, 290, 293], "other": [3, 43, 54, 119, 120, 122, 185, 214, 219, 222, 228, 229, 231, 235, 236, 241, 261, 269, 270, 272, 274, 277, 279, 280, 281, 283, 285, 291, 292, 293, 294], "later": [3, 213, 261], "onnx": [3, 15, 46, 53, 199, 200, 201, 206, 230, 233, 234, 235, 237, 262, 266, 267, 269, 272, 278, 279, 280, 284, 288, 291, 293], "insert": [3, 83, 129, 152, 154, 178, 193, 217, 218, 219, 221, 228, 231, 235, 262, 272, 277, 283, 285, 287, 288, 291], "mul": [3, 107, 117, 118, 121, 218, 267, 288, 291], "befor": [3, 15, 20, 83, 152, 154, 218, 228, 230, 236, 262, 264, 265, 268, 269, 277, 285, 288, 290, 293], "conv": [3, 15, 110, 114, 118, 123, 124, 125, 143, 154, 231, 235, 236, 277, 283, 285, 293], "linear": [3, 15, 216, 217, 218, 228, 231, 267, 277, 283, 288, 291, 293], "op": [3, 15, 63, 65, 67, 74, 75, 76, 81, 103, 105, 117, 118, 119, 120, 121, 122, 123, 124, 126, 130, 133, 137, 140, 142, 143, 144, 145, 147, 152, 154, 158, 159, 160, 166, 168, 169, 170, 171, 175, 178, 180, 199, 201, 203, 208, 215, 216, 219, 228, 233, 234, 235, 236, 269, 277, 278, 283, 285, 287, 289, 291, 293], "fuse": [3, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 142, 143, 144, 145, 147, 166, 171, 231, 291], "kernel": [3, 15, 218, 234, 235, 293], "futur": [3, 7, 18, 19, 212, 219, 272, 275, 277], "weightcorrect": 4, "ep": [4, 278], "1e": [4, 228, 291], "05": [4, 15, 45, 276, 291, 294], "correct": [4, 15, 41, 42, 43, 45, 175, 229], "int8": [4, 5, 15, 32, 74, 76, 87, 88, 89, 92, 93, 94, 98, 139, 158, 159, 160, 166, 168, 169, 170, 171, 175, 191, 199, 200, 201, 207, 208, 214, 216, 218, 219, 220, 222, 228, 230, 231, 234, 235, 236, 259, 264, 269, 275, 277, 278, 280, 284, 285, 287, 288, 289, 290, 291, 292], "weight": [4, 7, 15, 45, 58, 65, 74, 76, 78, 81, 112, 113, 175, 191, 201, 208, 209, 212, 213, 216, 217, 219, 220, 221, 222, 223, 234, 235, 236, 260, 264, 269, 270, 271, 275, 277, 281, 283, 284, 285, 286, 291, 293], "distribut": [4, 15, 175, 182, 203, 212, 218, 222, 228, 235, 262, 273, 284, 285, 288, 289, 291, 294], "close": [4, 175, 260], "fp32": [4, 15, 18, 19, 45, 63, 67, 74, 96, 100, 131, 166, 171, 175, 186, 197, 200, 201, 204, 207, 208, 215, 216, 217, 218, 219, 220, 222, 228, 230, 234, 236, 269, 275, 276, 277, 278, 285, 287, 288, 289, 290, 291, 293, 294], "r": [4, 175, 216, 217, 218, 220, 222, 224, 228, 273, 285, 294], "w_int8": [4, 175], "u": [4, 175], "w_fp32": [4, 175], "i": [4, 5, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 29, 32, 36, 38, 41, 43, 45, 46, 56, 58, 63, 68, 76, 101, 103, 106, 107, 112, 116, 122, 134, 137, 167, 175, 180, 182, 186, 188, 191, 194, 204, 207, 208, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 245, 248, 251, 259, 260, 261, 262, 264, 265, 267, 268, 269, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "varianc": [4, 175], "ratio": [4, 15, 32, 36, 175, 275, 277, 283, 292, 294], "between": [4, 15, 36, 42, 45, 175, 208, 214, 218, 219, 222, 228, 231, 234, 235, 236, 260, 272, 276, 277, 280, 285, 288, 289, 290, 291, 292, 293], "wise": [4, 15, 62, 63, 67, 175, 212, 235, 272, 283, 288, 291, 293], "": [4, 6, 15, 22, 35, 36, 43, 45, 46, 50, 58, 175, 180, 186, 208, 212, 213, 215, 216, 217, 218, 220, 222, 224, 228, 229, 230, 235, 236, 261, 265, 267, 268, 269, 270, 272, 277, 278, 282, 283, 284, 285, 288, 289, 290, 291, 293, 294], "equal": [4, 175, 186, 208, 214, 280, 283, 288], "minim": [4, 62, 175, 217, 218, 222, 228, 235, 236, 260, 266, 276, 277, 283, 285, 293], "round": [4, 175, 191, 213, 218, 219, 228, 233, 284, 285, 288, 291], "scale_c": [4, 175], "shift": [4, 32, 175, 292], "notic": [4, 175, 215, 218, 274, 278, 289], "can": [4, 15, 18, 19, 22, 36, 41, 43, 45, 46, 56, 58, 175, 193, 194, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 231, 233, 234, 235, 236, 259, 261, 262, 264, 265, 267, 269, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294], "chang": [4, 15, 65, 147, 175, 193, 208, 219, 230, 235, 262, 265, 268, 274, 277, 283, 292, 293], "first": [4, 6, 15, 20, 41, 63, 74, 175, 186, 208, 214, 215, 218, 224, 228, 231, 233, 234, 235, 236, 273, 278, 280, 285, 287, 288, 290, 291, 293], "an": [4, 15, 22, 36, 37, 38, 42, 43, 46, 58, 81, 119, 120, 122, 175, 180, 194, 208, 210, 214, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 231, 233, 234, 236, 260, 262, 263, 267, 275, 276, 277, 278, 280, 281, 283, 284, 285, 288, 290, 291, 292, 293], "empir": [4, 175], "solut": [4, 175, 216, 218, 221, 228, 233, 234, 235, 268, 284, 288, 289, 291, 293], "make": [4, 175, 208, 215, 216, 218, 221, 228, 229, 234, 235, 259, 261, 262, 269, 276, 277, 283, 285, 286, 287, 288, 290, 291, 293], "thi": [4, 6, 7, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 36, 38, 41, 42, 43, 45, 46, 56, 58, 62, 67, 76, 138, 155, 167, 174, 175, 179, 182, 194, 207, 208, 212, 215, 216, 217, 218, 220, 221, 222, 223, 228, 229, 230, 231, 234, 235, 236, 260, 261, 262, 264, 265, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 283, 285, 287, 288, 289, 290, 291, 292, 293], "don": [4, 15, 175, 216, 217, 231, 283, 293], "t": [4, 15, 36, 43, 119, 120, 122, 175, 215, 216, 217, 222, 224, 231, 234, 261, 265, 277, 278, 283, 285, 288, 293], "min": [4, 15, 175, 208, 214, 218, 222, 228, 280, 283, 285, 288, 291, 292, 293], "max": [4, 15, 36, 42, 43, 62, 175, 191, 208, 214, 218, 222, 228, 233, 273, 277, 280, 283, 285, 288, 291, 292, 293], "valu": [4, 5, 15, 18, 19, 20, 23, 24, 32, 36, 41, 45, 46, 58, 62, 67, 74, 76, 108, 119, 120, 122, 141, 175, 182, 194, 195, 197, 208, 213, 214, 215, 216, 218, 221, 222, 228, 231, 235, 236, 260, 269, 276, 277, 278, 280, 281, 283, 285, 288, 291, 292, 293], "us": [5, 6, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 35, 36, 38, 39, 41, 45, 56, 58, 62, 65, 67, 70, 74, 76, 81, 83, 84, 96, 100, 101, 122, 182, 186, 190, 193, 194, 195, 196, 197, 200, 201, 202, 204, 208, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 228, 229, 230, 231, 234, 235, 259, 260, 261, 264, 265, 267, 269, 270, 271, 274, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294], "evalu": [5, 7, 18, 19, 20, 38, 41, 42, 43, 45, 46, 56, 58, 190, 194, 197, 219, 221, 222, 223, 228, 234, 235, 261, 264, 271, 272, 275, 276, 277, 278, 281, 283, 285, 290, 291, 293], "perform": [5, 15, 20, 32, 45, 56, 58, 63, 67, 78, 79, 147, 213, 215, 217, 218, 220, 222, 223, 224, 225, 228, 230, 231, 233, 234, 235, 259, 263, 264, 266, 267, 270, 272, 273, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 15, 20, 22, 32, 36, 41, 45, 56, 58, 84, 87, 88, 89, 92, 93, 98, 101, 123, 124, 141, 143, 166, 171, 175, 178, 179, 180, 182, 191, 197, 204, 207, 208, 216, 218, 220, 222, 223, 224, 234, 235, 262, 269, 276, 277, 285, 288, 291, 292, 293], "set": [5, 6, 7, 14, 15, 18, 19, 20, 22, 25, 36, 41, 45, 46, 54, 58, 83, 97, 103, 147, 180, 182, 184, 185, 190, 191, 194, 208, 215, 216, 218, 219, 220, 221, 223, 224, 225, 228, 229, 233, 235, 259, 262, 265, 267, 268, 269, 271, 272, 276, 277, 278, 283, 285, 288, 290, 291, 293], "specifi": [5, 9, 15, 18, 19, 36, 41, 45, 46, 58, 155, 191, 194, 207, 208, 225, 228, 235, 236, 265, 269, 276, 277, 281, 283, 288, 292, 293], "environ": [5, 215, 219, 225, 229, 233, 259, 293], "variabl": [5, 15, 22, 62, 76, 215, 225, 283, 293], "new": [5, 14, 22, 36, 56, 180, 182, 212, 215, 216, 217, 218, 228, 230, 235, 265, 277, 278, 283, 284, 285, 288, 289, 290, 292], "env": [5, 268], "two": [5, 22, 27, 41, 68, 208, 214, 215, 217, 218, 221, 223, 226, 228, 230, 231, 261, 262, 265, 267, 269, 277, 278, 280, 283, 285, 287, 288, 290, 291, 293], "case": [5, 15, 35, 36, 56, 122, 126, 212, 218, 222, 228, 236, 261, 262, 264, 265, 269, 271, 276, 281, 283, 284, 285, 288, 289, 291, 292, 294], "exist": [5, 54, 106, 185, 186, 208, 215, 219, 267, 276, 293], "alreadi": [5, 22, 35, 215, 219, 234, 268, 272, 293], "param": [5, 9, 45, 62, 182, 208, 234, 279, 293], "true": [5, 7, 15, 20, 22, 23, 35, 36, 39, 45, 56, 58, 73, 87, 88, 89, 93, 94, 98, 137, 178, 180, 182, 191, 193, 197, 201, 204, 207, 208, 213, 216, 217, 218, 219, 220, 222, 223, 224, 228, 233, 235, 262, 265, 269, 276, 277, 285, 286, 288, 291, 292, 293], "set_all_env_var": 5, "configur": [5, 6, 7, 14, 15, 18, 19, 22, 25, 45, 46, 56, 58, 67, 76, 96, 100, 191, 193, 194, 196, 197, 201, 206, 207, 219, 223, 225, 231, 234, 235, 277, 281, 283, 285, 288, 289, 291, 292, 293, 294], "neural": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 65, 66, 72, 85, 97, 98, 99, 100, 184, 189, 190, 191, 192, 193, 198, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 228, 230, 234, 235, 236, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 279, 280, 281, 282, 284, 285, 288, 289, 291, 292, 293, 294], "compressor": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 66, 72, 85, 97, 98, 99, 100, 184, 189, 190, 191, 192, 193, 198, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 228, 230, 234, 235, 236, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294], "physic": [5, 229, 259], "core": [5, 15, 80, 218, 224, 225, 230, 233, 259, 273, 274, 294], "get_architectur": 5, "get": [5, 14, 15, 36, 45, 54, 58, 67, 74, 76, 94, 97, 119, 120, 122, 180, 182, 185, 186, 191, 197, 201, 204, 208, 212, 216, 219, 224, 228, 235, 260, 268, 272, 273, 275, 277, 284, 288, 291, 293, 295], "architectur": [5, 212, 215, 218, 225, 228, 233, 259, 270, 277, 283, 284, 288], "system": [5, 208, 214, 215, 225, 259, 280, 283, 294], "get_threads_per_cor": 5, "thread": [5, 15, 262, 268], "get_thread": 5, "list": [5, 6, 7, 9, 15, 18, 19, 20, 32, 36, 38, 39, 41, 42, 43, 45, 46, 54, 58, 73, 78, 94, 97, 98, 100, 106, 180, 185, 190, 191, 194, 195, 200, 201, 208, 216, 219, 221, 222, 231, 233, 234, 267, 269, 273, 275, 277, 281, 283, 285, 287, 291, 293], "get_physical_id": 5, "socket": [5, 208, 294], "get_core_id": 5, "id": [5, 35, 38, 40, 41, 42, 43, 276, 290, 293], "get_bounded_thread": 5, "core_id": 5, "bind": [5, 225], "instanc": [5, 15, 18, 19, 42, 43, 45, 46, 58, 62, 76, 194, 208, 218, 224, 229, 230, 231, 234, 259, 270, 277, 288, 293, 294], "run_inst": 5, "b_dataload": [5, 15, 259, 277], "none": [5, 6, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 36, 41, 45, 46, 56, 58, 59, 61, 62, 63, 67, 70, 74, 79, 83, 84, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 115, 141, 155, 180, 182, 186, 188, 190, 191, 193, 194, 195, 197, 200, 201, 204, 207, 208, 214, 218, 219, 222, 224, 233, 234, 235, 262, 276, 280, 285, 288, 292, 293], "b_func": [5, 259], "run": [5, 15, 18, 19, 35, 46, 58, 62, 78, 180, 194, 215, 218, 219, 222, 224, 225, 228, 233, 234, 259, 265, 268, 269, 277, 284, 285, 288, 289, 290, 293], "object": [5, 7, 13, 15, 18, 19, 20, 21, 22, 36, 37, 41, 45, 46, 54, 55, 58, 62, 76, 126, 138, 167, 180, 182, 185, 186, 194, 197, 207, 208, 212, 217, 219, 222, 231, 235, 240, 259, 261, 262, 268, 276, 277, 279, 282, 283, 285, 292, 293, 294], "benchmarkconfig": [5, 15, 259, 277], "contain": [5, 15, 18, 19, 20, 21, 22, 41, 42, 43, 46, 58, 119, 120, 122, 126, 174, 180, 194, 197, 201, 207, 212, 218, 222, 233, 260, 268, 272, 276, 283, 288, 293], "accuraci": [5, 7, 15, 18, 19, 45, 46, 56, 58, 63, 194, 214, 216, 217, 218, 222, 223, 225, 231, 233, 235, 236, 260, 262, 264, 265, 266, 267, 270, 276, 277, 280, 281, 282, 283, 284, 288, 289, 290, 291, 294], "goal": [5, 46, 58, 223, 228, 235, 262, 282, 285, 293], "tune": [5, 6, 7, 9, 12, 15, 18, 19, 20, 22, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 97, 190, 191, 194, 208, 215, 216, 217, 218, 219, 223, 226, 233, 234, 235, 260, 261, 262, 265, 270, 272, 274, 277, 278, 281, 283, 284, 287, 289, 290], "prefer": [5, 58, 218, 228, 283, 288], "calibr": [5, 15, 18, 19, 58, 80, 96, 100, 141, 190, 193, 203, 212, 217, 218, 219, 222, 228, 234, 236, 271, 272, 283, 285, 288, 293], "space": [5, 15, 18, 19, 43, 46, 58, 62, 67, 74, 219, 223, 228, 229, 230, 234, 235, 236, 261, 283, 285, 291], "etc": [5, 35, 43, 46, 58, 207, 233, 272, 283, 290, 293], "dataload": [5, 18, 19, 20, 31, 58, 78, 81, 182, 194, 197, 212, 222, 231, 233, 234, 235, 264, 265, 271, 277, 278, 282, 283, 285, 286, 287, 288, 291, 292], "framework": [5, 6, 10, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 36, 45, 46, 47, 48, 50, 68, 74, 83, 94, 184, 197, 212, 215, 217, 222, 223, 228, 234, 236, 260, 261, 265, 266, 270, 271, 272, 276, 277, 278, 283, 284, 285, 292, 293, 294], "custom": [5, 45, 56, 87, 88, 89, 90, 92, 93, 207, 219, 223, 228, 259, 264, 283, 284, 288, 290], "If": [5, 7, 9, 15, 18, 19, 22, 36, 46, 58, 119, 120, 122, 126, 188, 194, 219, 222, 228, 230, 231, 235, 259, 261, 262, 265, 268, 273, 274, 276, 277, 281, 283, 285, 288, 290, 291, 292, 293], "user": [5, 15, 18, 19, 22, 25, 29, 36, 45, 46, 56, 58, 63, 76, 191, 194, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 231, 234, 235, 236, 240, 259, 261, 262, 264, 267, 269, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293], "pass": [5, 14, 45, 58, 129, 180, 186, 207, 208, 218, 228, 230, 231, 234, 259, 264, 265, 271, 276, 277, 283, 285, 287, 291], "need": [5, 9, 15, 18, 19, 22, 29, 36, 45, 46, 56, 58, 67, 154, 182, 194, 201, 207, 208, 218, 221, 223, 225, 228, 231, 234, 261, 262, 265, 268, 272, 277, 283, 285, 286, 287, 288, 289, 291, 292, 293], "generate_prefix": 5, "core_list": 5, "gener": [5, 7, 14, 18, 19, 22, 23, 24, 25, 36, 38, 46, 58, 62, 94, 98, 101, 139, 180, 182, 190, 191, 194, 214, 215, 216, 218, 219, 220, 225, 228, 230, 231, 234, 236, 262, 276, 277, 278, 280, 281, 283, 284, 285, 287, 288, 291, 292, 293], "command": [5, 194, 224, 225, 265], "prefix": [5, 180], "numactl": [5, 268], "index": [5, 15, 22, 119, 120, 122, 182, 208, 228, 233, 273, 276, 288, 291], "bound": [5, 36, 41, 62, 126, 276, 292], "specif": [5, 6, 15, 20, 21, 22, 23, 27, 29, 45, 58, 182, 184, 214, 215, 217, 218, 219, 222, 225, 229, 234, 235, 260, 261, 262, 269, 271, 275, 276, 277, 278, 279, 280, 281, 283, 288, 293], "call_on": 5, "cmd": [5, 273], "log_fil": 5, "execut": [5, 10, 15, 58, 59, 61, 106, 194, 197, 207, 208, 217, 218, 228, 264, 277, 278, 282, 283, 285, 288, 290, 293, 294], "one": [5, 36, 38, 41, 45, 154, 155, 215, 218, 219, 222, 223, 224, 228, 234, 260, 264, 265, 269, 272, 273, 276, 277, 278, 281, 282, 283, 285, 286, 288, 289, 291, 292, 293], "dump": [5, 201, 208, 222, 228, 230, 285], "log": [5, 12, 14, 178, 205, 224, 231, 290, 293], "window": [5, 224, 225, 259, 273], "config_inst": 5, "raw_cmd": 5, "multi": [5, 41, 45, 58, 224, 262, 272, 277, 281, 283, 285, 293], "trigger": [5, 224], "sub": [5, 118, 261, 293], "process": [5, 7, 12, 14, 15, 18, 19, 20, 21, 22, 32, 36, 46, 58, 59, 61, 62, 78, 194, 207, 208, 213, 214, 217, 218, 221, 222, 223, 225, 228, 234, 235, 236, 260, 262, 264, 265, 267, 277, 280, 282, 283, 285, 286, 288, 291, 292], "raw": [5, 21, 25, 28, 67, 276, 293], "summary_benchmark": 5, "summari": [5, 194, 294], "profil": [5, 15, 37], "benchmark_with_raw_cmd": 5, "string": [5, 14, 15, 22, 38, 41, 50, 54, 180, 185, 186, 197, 208, 222, 276, 292], "exampl": [5, 6, 7, 9, 13, 15, 20, 21, 22, 32, 36, 41, 42, 43, 45, 46, 56, 58, 76, 186, 188, 194, 207, 208, 212, 216, 222, 223, 225, 229, 233, 235, 236, 240, 270, 271, 272, 287, 289, 292, 293, 295], "accord": [5, 15, 20, 21, 22, 36, 65, 67, 197, 222, 223, 228, 234, 265, 283, 287, 291, 292, 293], "config": [5, 6, 7, 9, 13, 14, 18, 19, 20, 37, 46, 74, 75, 76, 79, 83, 84, 95, 96, 97, 99, 100, 184, 190, 192, 193, 194, 197, 207, 208, 213, 215, 217, 218, 219, 220, 233, 235, 236, 240, 241, 259, 261, 262, 264, 265, 267, 272, 276, 277, 278, 279, 282, 283, 285, 287, 288, 290, 293], "from": [5, 6, 7, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 38, 41, 42, 43, 46, 54, 56, 58, 74, 76, 83, 113, 119, 120, 122, 180, 182, 185, 194, 197, 199, 200, 201, 204, 207, 208, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 234, 236, 259, 261, 262, 264, 265, 266, 267, 268, 270, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293], "import": [5, 7, 14, 15, 46, 56, 58, 180, 194, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 228, 231, 233, 236, 259, 262, 264, 265, 267, 270, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293], "fit_with_raw_cmd": 5, "iter": [5, 15, 18, 19, 22, 23, 46, 58, 78, 96, 100, 180, 182, 191, 194, 197, 218, 222, 223, 231, 234, 259, 262, 277, 283, 285, 291, 293], "100": [5, 6, 7, 15, 22, 96, 97, 100, 222, 228, 259, 265, 271, 273, 277, 285, 292, 293, 294], "cores_per_inst": [5, 15, 259, 277], "4": [5, 15, 29, 32, 36, 38, 39, 41, 76, 106, 191, 213, 214, 216, 217, 218, 219, 224, 228, 229, 233, 234, 236, 259, 265, 266, 269, 272, 273, 276, 277, 280, 283, 285, 288, 291, 292, 293, 294], "num_of_inst": [5, 15, 259, 277], "7": [5, 15, 56, 216, 218, 221, 228, 236, 259, 268, 269, 277, 283, 285, 289, 291, 293, 294], "test": [5, 15, 36, 230, 233, 294], "py": [5, 15, 39, 41, 42, 43, 180, 220, 224, 225, 231, 234, 261, 265, 273, 277, 285, 289], "fit": [5, 15, 46, 58, 62, 194, 231, 233, 259, 262, 265, 271, 276, 277, 278, 279, 283, 285, 286, 287, 288], "pb": [5, 15, 46, 54, 58, 185, 222, 259, 265, 277, 279, 294], "eval_dataload": [5, 15, 18, 19, 46, 58, 59, 61, 62, 63, 67, 70, 194, 259, 271, 276, 277, 285, 286, 293], "configregistri": [6, 13], "A": [6, 7, 12, 14, 15, 22, 36, 38, 41, 42, 43, 45, 46, 50, 54, 62, 78, 81, 107, 126, 127, 180, 184, 185, 186, 194, 208, 216, 218, 219, 228, 230, 235, 261, 262, 266, 269, 275, 276, 277, 279, 283, 284, 285, 288, 291, 292, 293], "registri": 6, "manag": [6, 194, 197, 277], "algorithm": [6, 9, 15, 37, 38, 45, 85, 94, 96, 100, 186, 191, 197, 203, 218, 219, 222, 223, 225, 228, 233, 234, 235, 236, 261, 264, 269, 270, 272, 275, 283, 285], "within": [6, 7, 41, 54, 185, 215, 229, 231, 236, 260, 278, 283, 284, 288, 291, 293], "register_config": [6, 261], "framework_nam": [6, 261], "algo_nam": [6, 100, 261], "prioriti": [6, 261], "float": [6, 15, 20, 32, 39, 41, 42, 43, 73, 78, 81, 98, 191, 193, 208, 213, 214, 215, 216, 217, 218, 220, 221, 223, 228, 261, 276, 280, 285, 291, 292], "int": [6, 9, 14, 15, 20, 21, 32, 36, 39, 41, 45, 76, 78, 79, 83, 96, 97, 100, 180, 191, 200, 201, 204, 208, 218, 222, 233, 261, 262, 276, 277, 288, 292], "usag": [6, 7, 9, 41, 186, 219, 220, 225, 228, 235, 265, 266, 281, 288, 292], "examplealgorithm": 6, "examplealgorithmconfig": 6, "larger": [6, 218, 228, 235, 283, 288, 291], "number": [6, 7, 14, 15, 21, 32, 36, 42, 43, 45, 62, 78, 119, 120, 182, 197, 208, 213, 218, 223, 224, 228, 259, 262, 265, 276, 283, 285, 288, 290, 291, 292, 293], "indic": [6, 15, 20, 41, 182, 222, 231, 262, 268], "higher": [6, 15, 18, 19, 46, 58, 194, 225, 228, 231, 267, 276, 283, 285, 288, 290], "which": [6, 15, 20, 21, 22, 32, 38, 43, 45, 50, 56, 58, 62, 108, 135, 155, 186, 208, 212, 215, 217, 218, 219, 220, 222, 223, 228, 229, 231, 233, 234, 235, 236, 260, 262, 265, 268, 269, 272, 276, 277, 278, 279, 282, 283, 285, 286, 287, 288, 289, 291, 292, 293], "tri": [6, 15, 261, 293], "auto": [6, 7, 15, 60, 66, 97, 190, 191, 208, 216, 219, 226, 231, 233, 260, 270, 283, 285, 288], "stage": [6, 14, 59, 61, 68, 283, 293], "default": [6, 9, 14, 15, 18, 19, 20, 21, 22, 32, 36, 38, 45, 54, 76, 94, 98, 148, 180, 185, 186, 188, 190, 191, 193, 197, 200, 201, 204, 208, 214, 215, 216, 218, 219, 222, 223, 224, 225, 231, 234, 261, 262, 269, 272, 276, 277, 278, 280, 281, 283, 285, 287, 288, 290, 291, 292, 293], "baseconfig": [6, 7, 9, 94, 96, 97, 100, 190, 193, 219, 222, 261], "white_list": [6, 94, 98, 191], "util": [6, 7, 8, 15, 37, 39, 66, 85, 96, 97, 99, 100, 191, 212, 222, 225, 235, 236, 237, 260, 261, 265, 277, 283, 285, 293], "op_name_or_module_typ": [6, 94, 98, 191], "default_white_list": [6, 94, 98, 191], "params_list": [6, 9], "tunabl": [6, 9], "composableconfig": [6, 261], "repres": [6, 7, 9, 10, 22, 27, 41, 43, 45, 217, 218, 222, 228, 229, 236, 260, 267, 283, 285, 286, 293], "compos": [6, 36, 197, 292], "allow": [6, 62, 215, 217, 218, 223, 265, 276, 277, 278, 283, 288, 291, 293], "multipl": [6, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 56, 222, 259, 267, 270, 277, 282, 283, 290, 291, 293], "togeth": [6, 15, 36, 273, 284, 292], "oper": [6, 9, 15, 32, 78, 94, 155, 180, 213, 215, 216, 217, 218, 219, 220, 221, 222, 228, 231, 259, 262, 267, 283, 285, 288, 291, 292, 293], "config_list": [6, 7], "get_all_config_set_from_config_registri": [6, 261], "fwk_name": [6, 261], "retriev": [6, 12, 182, 283], "given": [6, 36, 41, 58, 119, 120, 122, 193, 219, 223, 236, 283, 291, 292], "union": [6, 45, 188, 190, 191, 194, 219, 222, 276], "register_supported_configs_for_fwk": 6, "evaluationfuncwrapp": 7, "eval_fn": [7, 97, 190, 215, 219, 220, 221, 222, 223], "callabl": [7, 15, 43, 79, 96, 97, 100, 190, 191, 193, 194, 219, 222, 261, 262], "eval_arg": [7, 97, 190, 215, 219, 220, 222], "wrapper": [7, 36, 41, 45, 50, 54, 78, 127, 184, 185, 222, 287], "collect": [7, 34, 36, 43, 45, 186, 195, 208, 222, 228, 235, 285, 293], "note": [7, 41, 68, 107, 212, 213, 215, 216, 217, 218, 221, 224, 228, 233, 235, 236, 261, 262, 265, 267, 269, 270, 273, 275, 277, 283, 285, 288, 291, 293], "deprec": [7, 261, 289, 292], "def": [7, 18, 19, 58, 119, 120, 122, 186, 194, 215, 216, 219, 220, 222, 223, 228, 231, 234, 261, 262, 264, 265, 276, 277, 285, 291, 293], "eval_acc": 7, "eval_perf": 7, "mold": 7, "user_eval_fns1": 7, "user_eval_fns2": 7, "user_eval_fns3": 7, "user_eval_fns4": 7, "configset": 7, "base_config": [7, 8, 94, 96, 97, 98, 100, 190, 193], "sampler": [7, 73, 182, 191, 218, 223, 262, 265], "config_sourc": 7, "sequentialsampl": [7, 182], "size": [7, 22, 28, 32, 36, 54, 56, 149, 182, 185, 208, 214, 217, 218, 228, 229, 235, 262, 265, 268, 277, 280, 281, 283, 285, 286, 288, 291, 292, 294], "sampl": [7, 15, 20, 21, 22, 32, 36, 45, 62, 129, 182, 218, 222, 223, 224, 228, 262, 266, 272, 285, 288, 291, 292, 293, 294], "element": [7, 41, 182, 208, 214, 218, 228, 272, 276, 280, 283, 288, 291], "sequenti": [7, 59, 61, 182, 186, 223, 293], "alwai": [7, 41, 45, 58, 223, 276, 277, 288], "same": [7, 15, 20, 36, 41, 81, 135, 180, 208, 214, 218, 223, 224, 228, 234, 236, 259, 262, 265, 269, 277, 280, 283, 285, 288, 291, 292, 293], "order": [7, 38, 39, 62, 67, 76, 218, 223, 228, 231, 276, 288, 291, 293], "_configset": 7, "configload": 7, "config_set": [7, 215, 220, 221, 222, 223], "default_sampl": [7, 223], "skip_verified_config": 7, "bool": [7, 14, 15, 20, 22, 32, 36, 39, 45, 73, 81, 94, 98, 180, 191, 193, 201, 204, 207, 208, 218, 219, 262, 276, 292], "yield": [7, 18, 19, 46, 58, 62, 182, 194, 228, 262, 285, 293], "tuningconfig": [7, 97, 190, 215, 219, 220, 221, 222, 223], "tolerable_loss": [7, 15, 223, 277, 293], "01": [7, 15, 191, 218, 277, 288, 293, 294], "max_trial": [7, 15, 215, 223, 277, 293], "pipelin": [7, 230, 264, 277, 282], "tune_config": [7, 97, 190, 215, 219, 220, 221, 222, 223, 235], "config1": 7, "config2": 7, "3": [7, 15, 22, 36, 41, 180, 208, 214, 215, 217, 218, 220, 222, 223, 224, 228, 231, 233, 243, 260, 261, 262, 265, 267, 269, 270, 273, 276, 277, 278, 280, 281, 283, 285, 288, 289, 290, 291, 292, 293, 294], "stop": [7, 15, 212, 223, 277, 293], "when": [7, 15, 20, 21, 29, 36, 39, 58, 96, 100, 106, 116, 122, 180, 194, 217, 218, 222, 223, 224, 225, 228, 229, 235, 261, 262, 277, 283, 285, 288, 291, 292, 293], "either": [7, 15, 41, 217, 222, 223, 225, 228, 282, 285], "follow": [7, 22, 38, 41, 140, 155, 214, 215, 216, 221, 224, 225, 228, 229, 230, 231, 233, 234, 235, 236, 261, 262, 264, 265, 268, 269, 273, 274, 276, 277, 278, 279, 280, 282, 283, 285, 288, 291, 293], "condit": [7, 20, 21, 22, 36, 59, 61, 137, 223, 274, 292, 293], "met": [7, 223, 228, 269, 285], "trial": [7, 223, 293], "reach": [7, 15, 230, 262, 283, 293], "maximum": [7, 15, 20, 36, 39, 54, 62, 107, 185, 218, 228, 236, 260, 277, 283, 285, 291, 292], "metric": [7, 15, 18, 19, 37, 46, 58, 194, 197, 212, 221, 234, 235, 265, 277, 278, 285, 290, 291, 293, 294], "loss": [7, 15, 45, 194, 215, 217, 218, 222, 228, 260, 264, 265, 266, 275, 276, 277, 278, 282, 283, 284, 285, 288, 291, 293], "toler": [7, 222], "calcul": [7, 15, 23, 24, 42, 43, 67, 112, 182, 195, 208, 216, 218, 222, 228, 260, 276, 277, 281, 283, 285, 288, 290, 291, 293], "relative_loss": 7, "fp32_baselin": [7, 197, 234], "eval_result_of_q_model": 7, "99": [7, 98, 275, 294], "so": [7, 36, 76, 193, 212, 214, 218, 219, 222, 228, 231, 234, 268, 272, 278, 280, 285, 287, 288, 291, 292], "tuningmonitor": 7, "tuning_config": 7, "monitor": [7, 193, 219], "init_tun": 7, "tupl": [7, 15, 18, 19, 32, 36, 46, 58, 73, 97, 100, 188, 190, 191, 193, 194, 201, 207, 219, 222, 235, 261, 276, 277, 285, 292], "tuninglogg": [7, 12], "initi": [7, 18, 19, 20, 58, 74, 77, 80, 82, 86, 87, 88, 89, 90, 91, 92, 93, 95, 180, 194, 219, 222, 228, 236, 276, 283, 285, 291, 293], "modul": [8, 11, 187, 212, 215, 218, 219, 223, 231, 233, 241, 261, 262, 270, 272, 276, 277, 279, 283, 287, 288], "base_tun": [8, 97, 190, 220, 222], "tuning_param": 8, "paramlevel": 9, "enumer": [9, 10, 14, 194, 214, 234, 264, 265, 277, 280, 282, 283], "level": [9, 63, 205, 214, 228, 229, 280, 291, 293], "op_level": 9, "op_type_level": 9, "model_level": 9, "tuningparam": 9, "default_v": 9, "ani": [9, 41, 43, 73, 97, 188, 193, 208, 219, 222, 229, 233, 236, 261, 265, 283, 290, 293], "tunable_typ": 9, "option": [9, 14, 15, 18, 19, 20, 36, 41, 45, 46, 58, 74, 76, 186, 188, 190, 191, 193, 194, 200, 201, 202, 204, 208, 218, 219, 222, 228, 235, 236, 261, 262, 269, 273, 277, 283, 285, 288, 290, 291, 292, 293], "defin": [9, 14, 15, 18, 19, 46, 58, 138, 194, 207, 220, 222, 223, 228, 229, 234, 235, 262, 264, 269, 272, 276, 277, 282, 283, 285, 288, 290, 291, 293], "fakealgoconfig": 9, "algo": [9, 83, 84, 197], "simpl": [9, 36, 222, 228, 277, 283, 290, 291, 293], "like": [9, 15, 18, 19, 22, 45, 54, 58, 126, 147, 149, 180, 182, 185, 194, 215, 218, 222, 228, 230, 231, 233, 234, 235, 264, 272, 282, 283, 285, 288, 289, 291, 293], "give": [9, 235, 293], "enough": [9, 222, 228, 285], "creat": [9, 15, 20, 22, 41, 74, 76, 182, 197, 212, 228, 229, 234, 279, 283, 285, 290, 293], "implicitli": 9, "simple_attr": 9, "complex": [9, 215, 261, 277, 278, 283], "develop": [9, 56, 214, 215, 230, 231, 261, 273, 277, 278, 280, 283, 284, 287, 290], "explicitli": [9, 15, 217, 225, 271, 283], "complex_attr": 9, "model_attr": 9, "todo": [9, 20, 23, 41, 74, 182], "explain": [9, 228, 236, 291], "agnost": [10, 219], "mode": [10, 14, 29, 41, 54, 74, 155, 185, 193, 207, 208, 218, 219, 234, 235, 272, 285, 287, 288, 293], "constant": [11, 62, 72, 183, 201, 202, 261, 262, 269, 292], "logger": [11, 14, 195, 202, 208], "save_load": 11, "function": [12, 15, 18, 19, 21, 78, 91, 174, 202, 212, 215, 217, 218, 219, 222, 228, 230, 231, 234, 235, 236, 259, 262, 264, 267, 271, 272, 275, 276, 277, 278, 283, 285, 288, 290, 291, 293], "unifi": [12, 188, 234, 235, 236, 262, 271, 272, 276, 277, 279], "It": [12, 18, 19, 43, 45, 46, 58, 63, 67, 106, 193, 194, 214, 217, 218, 219, 220, 222, 223, 228, 234, 235, 236, 260, 268, 270, 277, 280, 283, 285, 288, 290, 293], "assist": [12, 289], "valid": [12, 15, 22, 41, 54, 87, 89, 92, 93, 107, 119, 120, 185, 233, 234, 266, 269, 272, 274, 277, 283, 285, 288, 289], "team": [12, 43, 229, 287], "save": [13, 15, 22, 54, 58, 180, 185, 194, 195, 200, 201, 204, 208, 219, 220, 228, 231, 234, 271, 277, 278, 279, 282, 285, 286, 288, 291], "load": [13, 20, 35, 36, 46, 54, 58, 180, 185, 207, 208, 222, 235, 262, 268, 285, 286, 291], "save_config_map": 13, "config_map": 13, "qconfig_file_path": 13, "map": [13, 15, 36, 40, 42, 43, 45, 199, 201, 218, 228, 261, 265, 276, 277, 283, 285, 288], "json": [13, 21, 36, 207, 218, 279, 288, 292], "path": [13, 20, 21, 22, 36, 46, 54, 58, 74, 78, 180, 185, 193, 200, 201, 204, 208, 217, 218, 219, 225, 231, 234, 265, 271, 276, 277, 278, 279, 282, 288, 292], "load_config_map": 13, "config_name_map": 13, "reload": 13, "get_all_config": 13, "singleton": [14, 155, 186, 208], "lazyimport": [14, 208], "module_nam": [14, 208], "lazi": [14, 208], "python": [14, 22, 37, 127, 180, 208, 210, 225, 231, 233, 261, 265, 268, 273, 277, 283, 284, 292], "till": [14, 208, 293], "cpuinfo": [14, 186, 208], "cpu": [14, 15, 142, 143, 144, 145, 186, 204, 208, 215, 217, 222, 224, 235, 259, 260, 272, 277, 278, 284, 285, 286, 287, 288], "info": [14, 34, 50, 186, 204, 205, 208, 231, 261, 279], "dump_elapsed_tim": [14, 186, 208, 234], "customized_msg": [14, 186, 208], "elaps": [14, 186, 208], "time": [14, 15, 36, 45, 56, 62, 180, 186, 208, 217, 218, 219, 221, 223, 225, 228, 235, 262, 265, 268, 277, 281, 283, 284, 285, 288, 290, 291, 292, 293], "set_random_se": [14, 15, 208], "seed": [14, 15, 186, 191, 208, 218, 277], "random": [14, 15, 32, 36, 62, 66, 108, 186, 208, 218, 277, 283, 292], "set_workspac": [14, 15, 208], "workspac": [14, 15, 207, 208, 279], "get_workspac": 14, "set_resume_from": [14, 15, 208], "resume_from": [14, 15, 208], "set_tensorboard": [14, 15, 208], "tensorboard": [14, 15, 197, 208, 234, 277], "log_process": 14, "call_count": 14, "func": [14, 180, 208, 285], "keep": [14, 63, 231, 234, 261, 289], "track": [14, 290], "processortyp": [14, 191], "deriv": 14, "detect_processor_type_based_on_hw": 14, "detect": [14, 15, 41, 45, 50, 219, 230, 231, 283, 293], "processor": [14, 191, 215, 225, 228, 233, 275, 278, 284, 285, 287], "hardwar": [14, 214, 217, 225, 233, 234, 272, 277, 280, 283, 284], "server": [14, 225], "client": [14, 233], "statist": [14, 208, 209], "header": [14, 208, 268], "field_nam": [14, 208], "output_handl": [14, 208], "printer": [14, 208], "x": [15, 36, 62, 107, 126, 223, 228, 233, 260, 261, 265, 270, 273, 278, 279, 285, 286, 291, 292], "dotdict": [15, 56, 208], "access": [15, 119, 120, 122, 204, 208], "yaml": [15, 18, 19, 20, 22, 83, 207, 208, 234, 236, 271, 276, 277, 281, 292], "attribut": [15, 135, 208, 234, 262, 269, 271, 277], "instead": [15, 208, 217, 283, 288], "dictionari": [15, 35, 41, 119, 120, 122, 186, 208], "notat": [15, 208], "random_se": [15, 62, 277], "1978": 15, "default_workspac": 15, "global": [15, 76, 184, 208, 218, 219, 220, 231, 277, 283, 293], "you": [15, 20, 45, 58, 212, 230, 231, 235, 261, 262, 265, 268, 273, 274, 276, 278, 283, 285, 288, 289, 290, 291], "want": [15, 20, 63, 119, 120, 122, 194, 231, 234, 262, 265, 277, 281, 285, 288, 290, 293], "should": [15, 18, 19, 20, 22, 36, 39, 45, 46, 58, 96, 100, 107, 194, 201, 208, 217, 219, 220, 221, 222, 224, 228, 231, 234, 235, 236, 265, 276, 277, 281, 283, 285, 288, 292, 293], "directori": [15, 21, 22, 54, 185, 204, 207, 208, 265, 268], "where": [15, 41, 45, 76, 208, 228, 236, 260, 291], "intermedi": [15, 228, 231, 272, 285], "histori": [15, 207, 208, 293], "ar": [15, 20, 36, 41, 45, 59, 61, 62, 76, 119, 120, 197, 207, 208, 213, 214, 215, 217, 218, 219, 221, 222, 225, 228, 229, 230, 231, 234, 235, 261, 262, 264, 265, 266, 267, 269, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293], "store": [15, 22, 78, 271], "nc_workspac": 15, "format": [15, 20, 21, 22, 41, 74, 83, 84, 106, 180, 184, 185, 201, 204, 214, 215, 217, 219, 222, 224, 228, 233, 235, 236, 261, 265, 267, 276, 277, 278, 279, 280, 284, 285, 288], "datetim": 15, "now": [15, 36, 231, 236, 265, 292, 293], "strftime": 15, "y": [15, 36, 62, 154, 228, 261, 268, 291, 292], "m": [15, 224, 230, 273, 283, 294], "d_": 15, "h": [15, 36, 265, 292], "resum": [15, 18, 19, 59, 61, 62, 63, 67, 70], "wa": [15, 214, 216, 234, 277, 280, 284, 293], "automat": [15, 22, 25, 32, 219, 222, 224, 225, 231, 233, 259, 272, 277, 278, 282, 283, 285, 291, 292, 293], "dure": [15, 56, 193, 208, 216, 217, 219, 222, 228, 233, 235, 270, 277, 279, 281, 282, 283, 285, 291], "last": [15, 215, 216, 218, 262, 278, 285, 288, 291], "flag": [15, 39], "whether": [15, 20, 32, 36, 39, 41, 45, 100, 180, 186, 197, 204, 207, 208, 218, 224, 234, 276, 285, 288, 291, 292], "each": [15, 22, 25, 32, 36, 39, 41, 42, 43, 67, 81, 182, 208, 212, 218, 221, 224, 228, 230, 234, 235, 236, 261, 264, 269, 277, 281, 283, 286, 288, 290, 292, 293], "visual": [15, 290, 293], "displai": [15, 73, 74, 186, 208], "2022": [15, 218, 228, 274, 283, 288, 291], "workspace_path": 15, "output": [15, 18, 19, 38, 45, 46, 54, 58, 103, 106, 111, 126, 149, 155, 180, 185, 186, 193, 194, 200, 201, 204, 205, 208, 218, 219, 220, 228, 231, 234, 235, 264, 265, 267, 269, 271, 276, 277, 279, 282, 283, 285, 288, 291, 292, 293], "devic": [15, 131, 141, 142, 143, 144, 145, 148, 152, 166, 171, 179, 191, 204, 215, 218, 219, 225, 228, 233, 235, 262, 277, 278, 283, 286, 288], "warmup": [15, 259, 277], "model_nam": [15, 233], "inter_num_of_thread": [15, 277], "intra_num_of_thread": [15, 277], "ni_workload_nam": 15, "benchmark": [15, 37, 56, 208, 212, 233, 240, 241, 270, 279, 293, 294], "empti": [15, 218, 219, 286], "includ": [15, 20, 22, 29, 36, 208, 218, 219, 222, 223, 225, 229, 234, 235, 236, 262, 273, 274, 275, 276, 277, 283, 285, 287, 288, 293], "itex": [15, 84, 154, 200, 222, 278, 285, 291], "ipex": [15, 207, 215, 216, 272, 275, 277, 278, 291], "onnxrt_trt_ep": [15, 278, 285], "onnxrt_cuda_ep": [15, 278, 285], "onnxrt_dnnl_ep": [15, 278, 285], "onnxrt_dml_ep": [15, 285], "inter": 15, "intra": 15, "accuracycriterion": [15, 277, 293], "higher_is_bett": [15, 45, 58, 293], "criterion": [15, 264, 277, 283, 285, 291, 293], "rel": [15, 56, 277, 293, 294], "better": [15, 18, 19, 46, 58, 147, 194, 215, 218, 228, 261, 264, 276, 278, 283, 284, 285, 288, 290, 291, 293], "absolut": [15, 45, 214, 228, 276, 277, 280, 283, 285, 293], "how": [15, 36, 212, 215, 217, 218, 219, 220, 221, 222, 228, 230, 231, 232, 234, 262, 264, 265, 271, 276, 277, 283, 284, 285, 291, 292, 293], "much": [15, 36, 228, 291, 292], "accept": [15, 223, 229, 259, 261, 262, 288], "accuracy_criterion": [15, 56, 277, 281, 293], "avail": [15, 50, 215, 218, 219, 225, 233, 237, 239, 245, 248, 251, 261, 266, 268, 270, 272, 283, 293, 294], "tuningcriterion": [15, 277, 281, 290, 293], "strategi": [15, 16, 22, 37, 212, 223, 228, 233, 234, 235, 236, 240, 260, 261, 262, 265, 272, 277, 284, 285, 287, 288, 289], "basic": [15, 35, 66, 70, 73, 194, 214, 272, 277, 280, 290], "strategy_kwarg": [15, 290, 293], "timeout": [15, 277, 293], "doc": [15, 45, 58, 73, 74, 186, 208, 233, 273, 276, 277], "tuning_strategi": 15, "md": [15, 45, 58], "constraint": [15, 277, 283, 290, 293], "guarante": [15, 277], "models": [15, 56, 277, 281], "footprint": [15, 56, 264, 277, 281, 283, 286], "second": [15, 20, 63, 116, 208, 218, 225, 228, 277, 288, 291, 293], "mean": [15, 32, 36, 43, 45, 67, 218, 220, 228, 231, 235, 236, 262, 265, 269, 276, 277, 283, 285, 286, 288, 291, 292, 293, 294], "earli": [15, 228, 277, 285, 293], "combin": [15, 18, 19, 32, 46, 58, 186, 194, 208, 218, 221, 231, 234, 272, 277, 282, 284, 285, 287, 288, 292, 293], "field": [15, 22, 41, 214, 231, 234, 236, 265, 277, 280, 290, 293], "decid": [15, 39, 222, 224, 234, 235, 277, 285, 289, 293], "exit": [15, 59, 61, 223, 277], "tuning_criterion": [15, 277, 281, 290, 293], "posttrainingquantconfig": [15, 58, 231, 233, 236, 262, 267, 276, 277, 279, 285, 286, 287, 288, 290, 291, 293], "domain": [15, 283, 293], "recip": [15, 101, 214, 223, 233, 270, 277, 280, 286, 288, 291, 293], "quant_format": [15, 201, 267], "approach": [15, 191, 217, 218, 228, 231, 233, 260, 272, 277, 283, 284, 286, 288, 293], "calibration_sampling_s": [15, 277], "op_type_dict": [15, 217, 233, 236, 285, 288, 293], "op_name_dict": [15, 217, 277, 285, 293], "reduce_rang": [15, 236], "example_input": [15, 188, 190, 193, 201, 207, 213, 216, 217, 218, 219, 267], "excluded_precis": [15, 191, 287], "quant_level": [15, 288, 291, 293], "gpu": [15, 141, 148, 218, 222, 259, 272, 277, 278, 285, 286], "npu": [15, 285], "xpu": [15, 222, 285], "cv": [15, 217, 219, 222, 283], "object_detect": [15, 41], "nlp": [15, 215, 219, 222, 228, 283, 285], "recommendation_system": 15, "adaptor": [15, 76, 83, 84, 197, 212, 233, 236, 272, 286, 287, 289, 291], "overrid": [15, 208, 261], "quantiztaion": 15, "below": [15, 45, 58, 107, 118, 126, 212, 214, 216, 218, 219, 222, 223, 228, 230, 231, 233, 234, 235, 236, 262, 265, 270, 271, 276, 280, 281, 282, 283, 285, 288, 290, 291, 293], "do": [15, 20, 38, 41, 201, 207, 219, 229, 235, 261, 265, 269, 272, 276, 277, 283, 287, 289, 291, 293], "quant": [15, 74, 80, 82, 83, 84, 94, 98, 190, 191, 218, 228, 231, 261, 275, 277, 285], "smooth_quant_arg": [15, 285, 291], "layer_wise_qu": [15, 286], "fast": [15, 218, 222, 283, 284, 288], "bia": [15, 175, 288], "gemm_to_matmul": [15, 285], "convert": [15, 20, 32, 35, 36, 41, 74, 78, 83, 84, 101, 102, 105, 106, 107, 108, 109, 118, 126, 138, 150, 166, 171, 193, 200, 213, 214, 215, 216, 217, 218, 219, 221, 222, 225, 228, 231, 235, 270, 277, 278, 285, 287, 288, 291, 292, 293], "gemm": 15, "matmul": [15, 98, 105, 111, 117, 125, 145, 154, 163, 172, 269, 288, 293], "add": [15, 20, 22, 74, 105, 116, 154, 180, 208, 212, 216, 230, 231, 233, 236, 262, 265, 267, 269, 276, 277, 290, 291, 293], "graph_optimization_level": [15, 285], "disable_al": 15, "enable_bas": 15, "enable_extend": 15, "enable_al": 15, "first_conv_or_matmul_quant": [15, 285], "last_conv_or_matmul_quant": [15, 285], "pre_post_process_quant": [15, 285], "preprocess": [15, 20, 36, 76, 197, 265, 292], "postprocess": [15, 33, 36, 45, 58, 197, 234, 277, 292], "add_qdq_pair_to_weight": [15, 285], "qdq": [15, 83, 139, 157, 199, 200, 201, 221, 234, 267, 272, 285, 291], "pair": [15, 152, 215, 217, 235, 262, 277, 278], "optypes_to_exclude_output_qu": [15, 285], "optyp": [15, 199, 235], "dedicated_qdq_pair": [15, 285], "dedic": 15, "qoper": [15, 267], "requir": [15, 54, 185, 215, 217, 218, 222, 228, 231, 234, 235, 259, 260, 262, 264, 265, 268, 269, 277, 278, 279, 283, 285, 288, 289, 290, 291, 293], "onnxruntim": [15, 22, 29, 234, 260, 262, 272, 273, 278], "tensorflow": [15, 20, 21, 22, 25, 27, 29, 36, 37, 39, 41, 45, 46, 54, 58, 68, 200, 201, 208, 221, 230, 234, 235, 241, 260, 261, 262, 264, 266, 269, 270, 272, 277, 278, 279, 280, 283, 284, 290, 291, 293], "method": [15, 20, 22, 29, 36, 74, 76, 81, 175, 197, 202, 204, 205, 218, 219, 220, 222, 228, 231, 233, 260, 261, 262, 264, 276, 277, 282, 283, 285, 287, 288, 291, 292, 293], "dynam": [15, 74, 182, 188, 191, 201, 218, 219, 233, 234, 262, 267, 270, 272, 277, 284, 293, 294], "weight_onli": [15, 191, 207, 214, 233, 261, 280, 286, 288], "ptq": [15, 58, 216, 217, 221, 222, 231, 265, 272, 277, 285, 291, 293], "both": [15, 180, 217, 218, 220, 225, 228, 229, 234, 264, 277, 283, 285, 288, 291, 293], "meet": [15, 59, 61, 218, 220, 222, 223, 228, 231, 235, 281, 284, 285, 288, 293], "criteria": [15, 223, 231, 291], "bayesian": [15, 66, 283], "mse": [15, 45, 58, 66, 208, 218, 228, 276, 288, 289], "mse_v2": [15, 66], "hawq_v2": [15, 66], "exhaust": [15, 66], "els": [15, 56, 180, 288], "advanc": [15, 214, 215, 218, 220, 222, 228, 229, 235, 240, 275, 280, 283, 285, 288], "reduc": [15, 191, 215, 216, 217, 218, 221, 222, 228, 234, 260, 264, 277, 278, 283, 284, 285, 286, 287, 288, 291, 293], "dtype": [15, 23, 24, 32, 36, 182, 191, 204, 215, 218, 219, 228, 233, 235, 236, 267, 269, 285, 288, 291, 292], "activ": [15, 74, 76, 81, 87, 88, 89, 93, 191, 213, 216, 217, 218, 221, 222, 228, 234, 235, 236, 260, 264, 269, 277, 285, 288, 291], "layer1": [15, 277, 283, 285], "conv1": [15, 220, 285], "bit": [15, 76, 191, 213, 214, 215, 218, 219, 228, 233, 236, 260, 264, 278, 280, 284, 285, 288, 291], "precis": [15, 18, 19, 43, 45, 46, 56, 60, 63, 74, 84, 191, 208, 212, 214, 217, 218, 219, 223, 228, 233, 234, 235, 240, 259, 260, 264, 265, 269, 270, 272, 280, 284, 285, 288, 291, 293], "exclud": [15, 234, 260, 287], "enabl": [15, 154, 215, 217, 218, 222, 235, 236, 265, 278, 283, 284, 291, 293], "mix": [15, 46, 60, 74, 191, 212, 219, 233, 234, 240, 270, 272], "bf16": [15, 74, 139, 222, 234, 235, 269, 277, 287, 293, 294], "disabl": [15, 186, 229, 287, 288, 291], "conserv": [15, 66], "In": [15, 41, 56, 212, 218, 219, 222, 228, 229, 231, 233, 234, 235, 262, 264, 265, 276, 277, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293], "docstr": 15, "quantizationawaretrainingconfig": [15, 194, 231, 264, 267, 277, 285, 287, 293], "awar": [15, 65, 191, 194, 218, 219, 223, 234, 235, 236, 260, 264, 265, 267, 272, 282, 284, 288, 293], "qat": [15, 54, 233, 264, 265, 270, 272, 277, 285], "copi": [15, 208, 262], "deepcopi": 15, "model_origin": [15, 58, 287], "qat_op_name_dict": 15, "compression_manag": [15, 194, 231, 264, 277, 282, 283, 285], "prepare_compress": [15, 194, 231, 264, 277, 282, 283, 285], "weightpruningconfig": [15, 277, 282, 283], "pruning_config": [15, 277, 283], "target_spars": [15, 277, 283], "9": [15, 216, 224, 231, 273, 277, 283, 291, 293, 294], "pruning_typ": [15, 277, 283], "snip_momentum": [15, 277, 283], "pattern": [15, 22, 74, 110, 111, 113, 130, 147, 152, 153, 154, 166, 171, 213, 217, 221, 224, 234, 261, 269, 272, 277, 282, 291, 293, 294], "4x1": [15, 277, 283, 294], "op_nam": [15, 75, 208, 209, 217, 235, 277, 283], "excluded_op_nam": [15, 123, 124, 277, 283], "start_step": [15, 277, 283], "end_step": [15, 277, 283], "pruning_scop": [15, 277, 283], "pruning_frequ": [15, 277, 283], "min_sparsity_ratio_per_op": [15, 277, 283], "max_sparsity_ratio_per_op": [15, 277, 283], "98": [15, 277, 283, 294], "sparsity_decay_typ": [15, 277, 283], "exp": [15, 214, 277, 280, 283], "pruning_op_typ": [15, 277, 283], "low_memory_usag": 15, "kwarg": [15, 22, 34, 36, 45, 46, 47, 49, 51, 53, 54, 55, 58, 73, 75, 87, 88, 89, 92, 93, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 172, 185, 194, 204, 205, 207, 208, 262], "prune": [15, 208, 212, 233, 265, 266, 269, 270, 272, 282, 284], "singl": [15, 20, 36, 41, 45, 58, 100, 182, 218, 231, 233, 273, 283, 286, 291], "sequenc": [15, 20, 35, 36, 39, 43, 115, 218, 228, 234, 269, 283, 288, 292], "local": [15, 208, 218, 220, 233, 268, 273, 283, 290], "link": [15, 20, 45, 58, 219, 260, 267, 288, 294], "out": [15, 20, 21, 22, 218, 220, 222, 228, 230, 231, 233, 283, 285, 288], "By": [15, 38, 218, 225, 235, 236, 276, 279, 283, 284, 288, 293], "correspond": [15, 20, 38, 41, 45, 197, 208, 219, 228, 234, 269, 277, 283, 285, 290, 293], "sparsiti": [15, 208, 212, 218, 233, 272, 277, 294], "after": [15, 20, 32, 36, 63, 130, 180, 204, 208, 213, 217, 218, 221, 228, 233, 235, 264, 267, 272, 276, 277, 281, 282, 283, 285, 287, 288, 290, 291, 292, 293], "90": [15, 275, 286, 294], "magnitud": [15, 45, 272, 283], "snip": [15, 272, 283, 294], "magnitude_progress": 15, "snip_progress": 15, "snip_momentum_progress": 15, "pattern_lock": 15, "most": [15, 45, 215, 218, 222, 228, 277, 278, 283, 285, 288, 291, 293, 294], "feasibl": 15, "under": [15, 22, 155, 186, 204, 207, 223, 230, 233, 274, 276, 277, 282, 283, 284, 286, 288, 293], "situat": [15, 265, 283], "structur": [15, 75, 208, 212, 219, 228, 272, 283, 284, 285, 294], "unstructur": [15, 272, 283, 294], "nxm": [15, 283], "e": [15, 218, 225, 228, 229, 230, 233, 266, 283, 288, 291, 293], "g": [15, 218, 225, 228, 230, 266, 283, 288, 289, 291, 293], "8x1": 15, "channelx1": [15, 283], "1xchannel": [15, 283], "n": [15, 21, 36, 39, 228, 236, 261, 275, 283, 285, 291, 292], "directli": [15, 41, 45, 220, 233, 276, 277, 283, 285], "our": [15, 175, 214, 233, 267, 277, 280, 290], "itrex": [15, 216, 291], "some": [15, 20, 218, 228, 233, 235, 236, 261, 267, 270, 273, 276, 277, 281, 283, 285, 287, 288, 291, 293], "step": [15, 194, 213, 216, 217, 218, 228, 235, 236, 264, 265, 277, 282, 283, 287, 288, 290, 291, 293], "start": [15, 36, 41, 63, 212, 273, 284, 292, 293, 295], "integ": [15, 41, 45, 216, 218, 221, 228, 234, 236, 260, 285, 288, 291, 293], "end": [15, 20, 35, 36, 59, 61, 180, 234, 235, 236, 264, 269, 273, 277, 281, 283, 288, 292, 293], "determin": [15, 203, 213, 217, 223, 225, 229, 231, 260, 283, 285], "score": [15, 38, 39, 41, 42, 43, 45, 65, 197, 231, 276, 281, 283, 290, 293], "gather": 15, "sort": [15, 67, 218, 288, 293], "sinc": [15, 38, 218, 228, 267, 276, 282, 288], "lead": [15, 215, 218, 222, 228, 261, 277, 278, 283, 288, 291], "less": [15, 107, 186, 208, 259, 277, 283], "frequenc": [15, 277, 283], "minimum": [15, 214, 236, 260, 277, 280, 283, 291, 293], "restrict": [15, 122, 283, 290], "everi": [15, 119, 120, 122, 218, 234, 262, 286, 288, 293], "schedul": [15, 218, 277, 282], "increas": [15, 214, 218, 263, 272, 280, 288, 293], "cube": [15, 283], "current": [15, 62, 68, 122, 208, 217, 218, 219, 223, 231, 233, 234, 236, 260, 261, 265, 269, 270, 277, 281, 283, 285, 288, 291, 293], "local_config": 15, "6": [15, 214, 216, 218, 221, 228, 269, 280, 285, 291, 293, 294], "queri": [15, 83, 84, 228, 235, 236, 285], "kei": [15, 54, 185, 186, 195, 197, 208, 218, 228, 233, 235, 284, 288, 293], "self": [15, 56, 115, 219, 234, 235, 262, 272, 276, 290, 293], "attent": [15, 20, 229, 283], "dens": [15, 90, 283, 294], "8": [15, 35, 191, 213, 214, 216, 218, 219, 228, 231, 235, 260, 261, 269, 273, 280, 283, 284, 288, 291, 293, 294], "update_config": 15, "10": [15, 22, 62, 223, 224, 233, 259, 267, 273, 277, 283, 292, 293, 294], "hpoconfig": 15, "search_spac": 15, "searcher": 15, "xgb": 15, "loss_typ": [15, 277], "reg": 15, "min_train_sampl": 15, "42": [15, 191, 218, 294], "hyperparamet": [15, 228, 290, 291, 293], "optim": [15, 62, 106, 126, 127, 131, 132, 180, 191, 194, 195, 208, 212, 217, 218, 221, 222, 223, 225, 228, 233, 259, 261, 264, 265, 269, 272, 273, 275, 277, 279, 284, 285, 287, 288, 290, 291, 293], "search": [15, 18, 19, 38, 62, 208, 212, 218, 219, 221, 233, 261, 272, 276, 283, 284, 288, 291, 293], "grid": [15, 283], "bo": 15, "knowledgedistillationlossconfig": [15, 264, 277, 282], "temperatur": [15, 277], "ce": [15, 277], "loss_weight": [15, 277], "knowledg": [15, 221, 264, 266, 272, 277, 279], "distil": [15, 212, 233, 266, 270, 272, 282], "entropi": [15, 260, 293], "probabl": [15, 203, 218, 228, 288], "length": [15, 20, 36, 41, 218, 228, 276, 284, 285, 288, 292], "item": [15, 35, 74, 186, 208, 228, 260, 265, 283, 291, 293], "student": [15, 20, 264, 294], "groundtruth": [15, 41], "label": [15, 18, 19, 20, 22, 23, 24, 25, 28, 32, 36, 38, 40, 45, 46, 58, 182, 194, 222, 231, 262, 276, 277, 285, 292], "teacher": [15, 264, 277, 294], "kl": [15, 191, 195, 203, 235, 236, 260, 269, 277, 293], "sum": [15, 45], "multipli": [15, 213, 214, 218, 280, 288], "distillationconfig": [15, 194, 264, 277, 282], "criterion_conf": 15, "d_conf": [15, 264, 277, 282], "teacher_model": [15, 264, 277], "intermediatelayersknowledgedistillationlossconfig": 15, "layer_map": 15, "add_origin_loss": 15, "relationship": 15, "student_layer_nam": 15, "student_layer_output_process": 15, "teacher_layer_nam": 15, "teacher_layer_output_process": 15, "bert": [15, 20, 36, 233, 276, 278, 283, 292, 294], "desir": [15, 32, 36, 216, 235, 236, 283, 291, 292], "its": [15, 22, 36, 39, 40, 62, 112, 147, 199, 215, 218, 223, 228, 229, 274, 276, 278, 283, 288, 290, 292, 293], "take": [15, 18, 19, 36, 45, 46, 58, 62, 182, 194, 215, 218, 222, 225, 229, 231, 262, 269, 277, 283, 285, 287, 288, 292, 293], "serv": [15, 54, 185, 228], "numer": [15, 45, 214, 215, 218, 222, 236, 278, 280, 284, 285, 288], "abbrevi": 15, "further": [15, 122, 215, 228, 229, 233, 278, 279, 285], "layer_nam": [15, 283], "student_model": [15, 277], "l1": 15, "len": [15, 36, 265, 292], "origin": [15, 20, 36, 63, 76, 78, 180, 193, 204, 208, 218, 219, 220, 222, 228, 230, 283, 285, 288, 292, 293], "selfknowledgedistillationlossconfig": [15, 277], "student1_layer_name1": 15, "teacher_layer_name1": 15, "student2_layer_name1": 15, "student1_layer_name2": 15, "teacher_layer_name2": 15, "student2_layer_name2": 15, "soft": 15, "l2": [15, 283], "hard": [15, 262], "resblock": 15, "featur": [15, 20, 21, 32, 36, 215, 220, 228, 230, 233, 259, 262, 263, 277, 278, 279, 283, 284, 289, 292], "deepst": 15, "fc": [15, 283], "02": [15, 275, 294], "nn": [15, 46, 58, 188, 190, 193, 201, 204, 207, 218, 219, 228, 231, 277, 279, 288, 291], "crossentropyloss": [15, 277], "sgd": [15, 277], "lr": [15, 191, 218, 265, 277], "0001": [15, 277], "learning_r": [15, 277], "altern": [15, 58], "distil_loss": [15, 277], "mixedprecisionconfig": [15, 46, 191, 215, 277, 278], "mixedprecis": [15, 277], "target": [15, 62, 83, 204, 219, 265, 277, 283, 292, 293], "convers": [15, 106, 107, 215, 216, 228, 230, 234, 235, 277, 278, 285, 287, 291], "fp16": [15, 74, 191, 228, 285], "fallback": [15, 65, 67, 68, 215, 216, 217, 267, 278, 287, 293], "won": [15, 285, 288], "work": [15, 96, 100, 219, 222, 224, 225, 228, 232, 235, 261, 262, 287, 288, 289, 291], "tensor": [15, 36, 54, 67, 78, 122, 180, 185, 186, 190, 193, 199, 201, 204, 207, 208, 213, 214, 219, 222, 231, 236, 261, 262, 280, 283, 285, 289, 292, 293], "trace": [15, 65, 190, 193, 201, 217, 219, 231, 293], "mix_precis": [15, 37, 277, 278], "converted_model": [15, 46, 277, 278], "exportconfig": 15, "opset_vers": [15, 200, 201, 267], "14": [15, 200, 201, 233, 267, 273, 275, 294], "input_nam": [15, 54, 119, 120, 185, 200, 201, 267], "output_nam": [15, 54, 185, 200, 201, 267], "dynamic_ax": [15, 201, 267], "common": [15, 34, 37, 94, 96, 97, 98, 100, 174, 190, 191, 193, 197, 216, 220, 221, 222, 229, 261, 264, 265, 267, 270, 271, 273, 277, 285, 291], "export": [15, 41, 189, 202, 212, 213, 215, 217, 268], "select": [15, 20, 204, 218, 228, 231, 260, 272, 273, 283, 285, 288, 293], "opset": [15, 200, 201, 267], "version": [15, 37, 106, 200, 201, 212, 216, 229, 231, 234, 261, 269, 273, 274, 277, 284, 291, 293], "qlinear": [15, 22, 29, 45, 199, 234], "ax": [15, 201], "inform": [15, 18, 19, 45, 184, 208, 214, 216, 218, 222, 224, 225, 229, 230, 232, 233, 234, 235, 236, 237, 239, 245, 248, 251, 260, 261, 269, 277, 279, 280, 283, 287, 288, 289, 291, 294, 295], "onnxqlinear2qdqconfig": 15, "onnxqlinear2qdq": 15, "torch2onnxconfig": [15, 267], "torch2onnx": [15, 198], "qdq_op_fp32_bia": 15, "qdq_op_int32_bia": 15, "qdq_op_fp32_bias_qdq": 15, "resnet50": [15, 220, 233, 265, 267, 278, 283, 285, 290, 294], "int8_onnx_config": [15, 267], "randn": [15, 267], "224": [15, 32, 233, 265, 267, 277, 292], "batch_siz": [15, 20, 21, 182, 191, 201, 218, 262, 265, 267, 271, 277, 285], "q_model": [15, 58, 96, 100, 213, 216, 217, 221, 223, 231, 262, 265, 267, 271, 276, 277, 279, 285, 286, 287, 288], "tf2onnxconfig": [15, 267], "tf2onnx": [15, 198], "axi": 15, "addit": [15, 194, 218, 235, 236, 288, 289, 293], "keyword": 15, "argument": [15, 190, 193, 219, 222, 223, 288], "output_graph": 15, "nasconfig": 15, "search_algorithm": 15, "dyna": 15, "na": [15, 50, 222, 272, 294], "mxnet": [15, 22, 25, 29, 36, 45, 46, 51, 58, 230, 233, 234, 235, 260, 262, 266, 269, 272, 277, 278, 279, 293], "kera": [15, 22, 29, 49, 54, 82, 85, 97, 100, 122, 185, 186, 220, 222, 235, 262, 265, 279], "pytorch": [15, 20, 22, 25, 29, 36, 45, 46, 55, 58, 68, 188, 189, 190, 191, 192, 193, 201, 202, 208, 214, 219, 230, 231, 233, 234, 235, 236, 241, 260, 261, 262, 264, 266, 269, 270, 272, 273, 275, 277, 278, 279, 280, 283, 284, 288, 289, 291, 293], "built": [16, 17, 20, 21, 26, 28, 30, 31, 32, 33, 36, 45, 48, 56, 58, 96, 100, 127, 194, 222, 223, 234, 265, 277, 281, 285, 290, 292, 293], "sigopt": [17, 284], "tpe": 17, "provid": [18, 19, 36, 41, 46, 58, 155, 194, 202, 204, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 233, 234, 235, 236, 259, 262, 264, 265, 266, 270, 272, 273, 275, 276, 277, 278, 279, 283, 285, 288, 291, 293, 294], "sigopttunestrategi": 18, "q_dataload": [18, 19, 59, 61, 62, 63, 67, 70, 271, 293], "q_func": [18, 19, 59, 61, 62, 63, 67, 70, 234, 235, 277, 293], "eval_func": [18, 19, 46, 58, 59, 61, 62, 63, 67, 70, 78, 194, 231, 262, 264, 265, 277, 285, 286, 287, 288, 293], "eval_metr": [18, 19, 46, 58, 59, 61, 62, 63, 67, 70, 194, 276, 285], "q_hook": [18, 19, 59, 61, 62, 63, 67, 70], "hpo": [18, 283], "low": [18, 19, 23, 24, 46, 182, 215, 218, 223, 228, 234, 235, 259, 260, 265, 277, 278, 284, 285, 288, 291, 293], "loader": [18, 19, 46, 58, 78, 96, 100, 194, 204, 262, 285], "mandatori": [18, 19, 58, 277], "dataset": [18, 19, 31, 41, 42, 43, 45, 46, 58, 78, 81, 182, 194, 197, 216, 218, 220, 221, 222, 228, 233, 234, 235, 262, 265, 276, 277, 283, 285, 288, 289, 291, 293, 294], "_": [18, 19, 58, 215, 216, 218, 219, 222, 224, 228, 231, 233, 234, 235, 260, 265, 267, 269, 273, 277, 278, 279, 281, 283, 285, 288, 289, 290, 291, 293], "depend": [18, 19, 46, 58, 194, 230, 233, 268, 269, 273, 285, 293], "implement": [18, 19, 20, 22, 38, 46, 56, 58, 65, 155, 175, 179, 194, 218, 236, 262, 276, 277, 283, 285, 288, 289, 293], "well": [18, 19, 46, 58, 194, 214, 228, 233, 261, 280, 283, 285, 289, 291], "taken": [18, 19, 46, 58, 194, 285], "reserv": [18, 19], "abl": [18, 19, 46, 58, 194, 222, 228, 285], "pre": [18, 19, 20, 46, 58, 131, 191, 194, 217, 218, 223, 228, 261, 264, 277, 283, 284, 285, 288, 293], "through": [18, 19, 45, 46, 58, 217, 218, 219, 228, 233, 259, 269, 271, 272, 276, 281, 282, 283, 285, 288], "tuner": [18, 19, 46, 58, 194, 285], "encapsul": [18, 19, 46, 58, 155, 194, 279], "scalar": [18, 19, 46, 58, 194, 276, 285, 293], "pseudo": [18, 19, 58, 194, 218, 288], "code": [18, 19, 58, 191, 194, 212, 215, 218, 220, 231, 233, 234, 235, 236, 264, 265, 271, 272, 274, 276, 281, 282, 283, 284, 285, 290, 291, 292], "someth": [18, 19, 22, 58, 194], "fefin": 19, "tpetunestrategi": 19, "pytorchbertdataset": 20, "task": [20, 27, 45, 175, 216, 218, 225, 228, 264, 267, 272, 276, 277, 283, 286, 288, 291, 294], "model_typ": [20, 208], "transform": [20, 21, 22, 23, 24, 25, 27, 29, 31, 102, 175, 177, 178, 179, 182, 191, 216, 217, 218, 221, 228, 231, 233, 260, 264, 265, 266, 270, 275, 277, 283, 284, 287, 288, 291, 293], "filter": [20, 21, 22, 23, 24, 25, 27, 31, 87, 93, 182, 208, 236, 272, 283], "construct": [20, 23, 24, 27, 34, 45, 50, 54, 76, 182, 184, 185, 197, 223, 229, 235, 236, 265, 283, 293], "tensordataset": 20, "full": [20, 21, 22, 204, 208, 218, 233, 260, 268, 274, 283, 288, 289], "repo": [20, 211, 230, 266, 295], "http": [20, 22, 38, 39, 41, 42, 43, 45, 58, 191, 218, 231, 233, 273, 274, 277, 283, 289], "github": [20, 38, 39, 42, 43, 45, 58, 191, 218, 230, 233, 266, 273, 274, 277, 289], "com": [20, 38, 39, 42, 43, 45, 58, 191, 229, 261, 273, 274, 277, 289, 290, 294], "huggingfac": [20, 204, 214, 266, 280, 291, 294], "your": [20, 212, 217, 230, 233, 261, 262, 265, 274, 277, 283, 284, 290, 293], "easi": [20, 217, 219, 222, 267, 277, 284, 285, 288, 290], "ad": [20, 38, 62, 213, 215, 218, 235, 236, 278, 283, 288], "arg": [20, 21, 22, 62, 106, 204, 205, 214, 219, 265, 277, 280, 283, 285, 288, 291, 292], "classifi": [20, 45], "squad": [20, 36, 42, 43, 45, 276, 283, 292, 294], "distilbert": [20, 278, 284, 294], "xlnet": 20, "xlm": [20, 294], "101": [20, 45, 228, 276, 291, 294], "2043": 20, "2001": 20, "onnxrtbertdataset": 20, "data_dir": 20, "model_name_or_path": [20, 277, 286], "max_seq_length": [20, 36, 292], "128": [20, 23, 24, 36, 182, 191, 218, 223, 228, 277, 285, 288, 292, 294], "do_lower_cas": [20, 35, 36, 292], "mrpc": [20, 45, 276, 283, 293, 294], "dynamic_length": 20, "onnxrt": [20, 22, 29, 36, 45, 206, 234, 278, 285, 294], "dir": [20, 204, 207, 268, 271], "shortcut": 20, "token": [20, 33, 36, 38, 39, 204, 216, 218, 228, 233, 276, 277, 288, 290, 291, 292, 293], "longer": [20, 36, 225, 292], "than": [20, 36, 107, 186, 208, 214, 218, 228, 233, 259, 271, 280, 281, 282, 283, 285, 288, 290, 292, 293], "truncat": [20, 36, 292], "shorter": [20, 36, 292], "pad": [20, 36, 87, 89, 92, 93, 123, 124, 292], "lowercas": 20, "fine": [20, 219, 261, 283, 284, 285], "choic": [20, 218, 222, 228, 234, 276, 291], "qqp": [20, 276, 294], "qnli": [20, 276, 294], "rte": [20, 276, 294], "st": [20, 276], "b": [20, 126, 208, 218, 228, 230, 260, 276, 283, 288, 291, 293], "cola": [20, 276, 294], "mnli": [20, 276, 294], "wnli": [20, 276], "mobilebert": 20, "roberta": [20, 294], "fix": [20, 180, 218, 262, 283, 285, 288, 293], "uncas": [20, 36, 292, 294], "load_and_cache_exampl": 20, "cach": [20, 218, 228, 268, 285, 288], "helper": [20, 21, 22, 35, 54, 155, 180, 185, 199, 200, 201, 206], "convert_examples_to_featur": [20, 36], "max_length": 20, "label_list": [20, 45], "output_mod": 20, "classif": [20, 36, 45, 267, 276, 283, 284], "pad_token": 20, "pad_token_segment_id": 20, "mask_padding_with_zero": 20, "inputfeatur": [20, 36], "properti": [20, 76, 274], "input_id": [20, 36, 277], "vocabulari": [20, 35, 36, 292], "attention_mask": [20, 277], "mask": [20, 41, 283, 294], "avoid": [20, 224, 231, 261], "usual": [20, 222, 228, 235, 282, 283, 285, 286, 291], "NOT": [20, 269], "token_type_id": [20, 277], "segment": [20, 39, 41, 230], "portion": 20, "them": [20, 218, 219, 228, 231, 236, 262, 267, 269, 271, 273, 282, 283, 288, 293], "problem": [20, 45, 215, 276, 278], "regress": [20, 230], "seq_length": 20, "tensorflowbertdataset": 20, "root": [20, 21, 22, 25, 45, 265, 276, 277], "label_fil": [20, 36, 292], "tfrecord": [20, 21, 22], "guid": [20, 215, 222, 231, 233, 261, 273], "parsedecodebert": 20, "tensorflowmodelzoobertdataset": [20, 21], "pars": [20, 21, 32, 36, 180, 185, 235, 236, 292], "num_cor": [20, 21, 25], "28": [20, 21, 25, 294], "three": [20, 59, 61, 126, 215, 219, 223, 228, 231, 234, 235, 260, 273, 278, 282, 285, 287, 290, 291], "tf": [20, 21, 22, 36, 52, 54, 81, 98, 100, 156, 180, 182, 184, 185, 186, 220, 222, 233, 261, 265, 273, 279, 284, 287, 292], "record": [20, 21, 22, 28, 208, 223, 288, 290, 293], "resiz": [20, 21, 32, 36, 292], "coco": [21, 28, 41, 45, 276, 283], "parsedecodecoco": 21, "cocorecorddataset": 21, "interleav": 21, "parallel": [21, 277, 293], "cocoraw": 21, "img_dir": 21, "val2017": 21, "anno_dir": 21, "annot": [21, 41, 235, 236, 276, 283, 293], "instances_val2017": 21, "arrang": [21, 22, 25, 283], "wai": [21, 22, 25, 54, 185, 218, 221, 228, 236, 262, 276, 277, 282, 283, 285, 288, 291, 293], "jpg": [21, 25, 27, 233], "imag": [21, 22, 25, 27, 32, 36, 41, 215, 228, 265, 267, 283, 291, 292, 294], "coconpi": 21, "npy_dir": 21, "npy": 21, "tensorflowdataset": 22, "pytorchdataset": 22, "mxnetdataset": 22, "onnxrtqldataset": 22, "onnxrtitdataset": 22, "IT": [22, 29, 284], "pytorchmxnetwrapdataset": 22, "datafunc": 22, "pytorchmxnetwrapfunct": [22, 36], "framework_dataset": 22, "convent": [22, 41, 214, 230, 280], "imageclassifi": 22, "choos": [22, 204, 219, 228, 272, 284, 289, 291, 293], "tensorflow_itex": [22, 25, 27, 29, 262], "onnxrt_qdq": [22, 29], "onnxrt_qlinearop": [22, 29, 36], "onnxrt_integerop": [22, 29, 36], "pytorch_ipex": [22, 29, 277], "pytorch_fx": [22, 29, 277], "dataset_registri": 22, "dataset_typ": 22, "dataset_format": 22, "data_format": [22, 32, 87, 89, 92, 93], "eg": 22, "raw_imag": 22, "overwrit": 22, "__getitem__": [22, 36, 262, 277], "__len__": 22, "iterabledataset": 22, "also": [22, 36, 38, 45, 56, 58, 215, 218, 219, 220, 221, 228, 230, 234, 235, 236, 262, 266, 270, 272, 276, 277, 281, 283, 284, 285, 287, 288, 291, 293], "__iter__": [22, 262, 277], "over": [22, 45, 235, 266, 272, 276, 283, 291, 293], "download_url": 22, "url": [22, 230, 233, 273, 274, 283], "filenam": [22, 208], "md5": 22, "download": [22, 233, 273, 289], "address": [22, 215, 218, 223, 229, 261, 278, 284], "gen_bar_updat": 22, "progress": [22, 283, 285], "bar": [22, 284], "check_integr": 22, "fpath": 22, "check": [22, 119, 120, 180, 186, 199, 207, 208, 222, 224, 233, 265, 273, 289], "checksum": 22, "calculate_md5": 22, "chunk_siz": 22, "1024": [22, 178], "cifar10": 22, "cifar100": 22, "databas": 22, "extract": [22, 76, 119, 120, 122], "otherwis": [22, 36, 208, 218, 229, 235, 288, 292], "www": [22, 294], "c": [22, 126, 208, 218, 224, 228, 268, 288, 293], "toronto": 22, "edu": 22, "kriz": 22, "cifar": [22, 294], "tar": 22, "gz": 22, "manual": [22, 283], "subset": [22, 25], "internet": 22, "put": 22, "again": [22, 287], "pytorchcifar10": 22, "mxnetcifar10": 22, "tensorflowcifar10": 22, "pytorchcifar100": 22, "mxnetcifar100": 22, "tensorflowcifar100": 22, "mnist": [22, 265], "modifi": [22, 76, 231, 236, 265, 269, 283], "nation": [22, 229], "institut": 22, "standard": [22, 36, 230, 235, 261, 267, 276, 292, 293], "technologi": [22, 214, 275, 277, 280], "fashionmnist": 22, "npz": 22, "idx1": 22, "ubyt": 22, "idx3": 22, "t10k": 22, "pytorchmnist": 22, "mxnetmnist": 22, "tensorflowmnist": 22, "pytorchfashionmnist": 22, "mxnetfashionmnist": 22, "tensorflowfashionmnist": 22, "imagefold": [22, 265, 277], "expect": [22, 218, 220, 228, 229, 230, 268, 275, 285, 288, 293], "folder": [22, 27, 46, 58, 180, 207, 218, 219, 288], "subfold": 22, "belong": [22, 50, 285], "class_1": 22, "xxx": [22, 277], "png": 22, "xxy": 22, "xxz": 22, "class_n": 22, "123": [22, 292], "nsdf3": 22, "asd932_": 22, "categori": [22, 40, 259], "mxnetimagefold": 22, "tensorflowtfrecorddataset": 22, "tensorflowimagerecord": 22, "imagenet": [22, 25, 32, 220, 277, 283, 292, 294], "000": [22, 233], "001": [22, 228, 265, 291], "099": 22, "tensorflowvocrecord": 22, "pascal": 22, "voc": [22, 45], "2012": 22, "val": [22, 25, 277], "00000": 22, "00004": 22, "00001": 22, "00003": 22, "dummi": [23, 24, 45, 111, 182, 222, 233, 276, 277], "dummydataset": [23, 24, 182, 222], "shape": [23, 24, 32, 36, 41, 180, 182, 188, 218, 222, 228, 233, 269, 277, 288, 291, 292], "high": [23, 24, 182, 222, 273, 284, 293], "127": [23, 24, 182, 228, 285, 291], "float32": [23, 24, 36, 41, 182, 204, 218, 228, 234, 259, 277, 285, 288, 291, 292], "rang": [23, 24, 36, 182, 194, 204, 213, 214, 215, 218, 219, 222, 224, 228, 233, 234, 236, 260, 264, 265, 277, 280, 282, 283, 285, 288, 291, 292], "stand_norm": [23, 24, 182], "real": [23, 182, 228, 235, 260, 265, 284, 285], "dummy_v2": [24, 182], "sparse_dummy_v2": 24, "input_shap": [24, 182], "label_shap": [24, 182], "sparsedummydataset": 24, "dense_shap": 24, "sparse_ratio": 24, "imagenetraw": 25, "data_path": 25, "image_list": 25, "img1": 25, "img2": 25, "imgx": 25, "read": [25, 36, 180, 287, 290], "val_map": 25, "txt": [25, 268, 273], "pytorchimagenetraw": 25, "mxnetimagenetraw": 25, "tensorflowimagenetraw": 25, "inteltensorflow": [25, 27], "tensorflowimagenetdataset": 25, "onnxrtimagenetdataset": 25, "class": [26, 46, 58, 80, 82, 86, 100, 218, 219, 220, 222, 223, 231, 235, 261, 262, 276, 277, 281, 282, 285, 289, 293], "bert_dataset": 26, "coco_dataset": 26, "dummy_dataset": 26, "dummy_dataset_v2": 26, "imagenet_dataset": 26, "style_transfer_dataset": 26, "style": [27, 261, 271], "transfer": [27, 228, 264, 277, 291], "styletransferdataset": 27, "content_fold": 27, "style_fold": 27, "crop_ratio": 27, "resize_shap": 27, "256": [27, 32, 191, 265, 277, 292], "image_format": 27, "holder": 27, "labelbalancecocorecordfilt": 28, "balanc": [28, 214, 216, 218, 222, 228, 280, 288, 291], "labelbalancecocorawfilt": 28, "tensorflowfilt": 29, "onnxrtqlfilt": 29, "onnxrtitfilt": 29, "pytorchfilt": 29, "mxnetfilt": 29, "filter_registri": 29, "filter_typ": 29, "__call__": 29, "write": [29, 180, 208, 265, 271, 277], "coco_filt": 30, "quantizedinput": [32, 292], "uint8": [32, 41, 76, 191, 222, 228, 234, 269, 285, 292], "point": [32, 42, 43, 62, 208, 213, 214, 215, 216, 217, 218, 221, 228, 276, 280, 285, 288, 291, 292, 293], "labelshift": [32, 292], "label_shift": [32, 292], "parsedecodeimagenet": [32, 292], "proto": [32, 36, 292], "parsedecodeimagenettransform": 32, "decod": [32, 38, 276, 292], "v1": [32, 42, 43, 45, 54, 180, 185, 216, 265, 267, 268, 276, 279, 283, 289, 290, 291, 294], "tensorflowtransposelastchannel": 32, "transpos": [32, 36, 125, 200, 288, 292], "nhwc": [32, 106], "nchw": [32, 106], "tensorflowshiftrescal": 32, "rescal": [32, 36, 292], "tensorflowresizecropimagenettransform": 32, "height": [32, 36, 265, 292], "width": [32, 36, 228, 260, 265, 283, 285, 292], "random_crop": [32, 292], "resize_sid": [32, 292], "resize_method": 32, "bilinear": [32, 36, 292], "random_flip_left_right": [32, 292], "mean_valu": [32, 292], "channels_last": 32, "subpixel": 32, "rgb": 32, "seri": [32, 233, 273, 277, 292], "applic": [32, 218, 220, 228, 236, 267, 284, 288, 291, 292], "result": [32, 36, 38, 41, 42, 43, 45, 58, 65, 180, 194, 207, 208, 212, 213, 216, 218, 221, 223, 224, 228, 229, 233, 262, 265, 272, 274, 276, 277, 281, 283, 284, 285, 288, 290, 291, 292, 293, 294], "crop": [32, 36, 292], "flip": [32, 36, 292], "left": [32, 36, 228, 291, 292], "right": [32, 41, 228, 229, 230, 231, 291, 292], "std": [32, 36, 277, 292], "bilinearimagenettransform": 32, "central_fract": [32, 292], "875": [32, 292], "fraction": [32, 292], "onnxbilinearimagenettransform": 32, "onnxresizecropimagenettransform": 32, "std_valu": 32, "229": [32, 277], "225": [32, 277, 294], "resizewithaspectratio": 32, "87": [32, 294], "inter_pol": 32, "cv2": 32, "inter_area": 32, "aspect": [32, 36, 292], "imagenet_transform": 33, "postprocess_cl": [34, 277], "user_postprocess": 34, "just": [34, 36, 56, 148, 182, 217, 222, 228, 268, 277, 282, 285, 291, 292, 293], "convert_to_unicod": 35, "text": [35, 36, 38, 43, 214, 216, 218, 228, 267, 274, 280, 283, 284, 288, 291, 292, 294], "unicod": 35, "assum": [35, 41, 234, 269], "utf": 35, "load_vocab": 35, "vocab_fil": [35, 36, 292], "convert_by_vocab": 35, "vocab": 35, "whitespace_token": 35, "whitespac": [35, 43], "clean": [35, 277], "split": [35, 36, 134, 228, 231, 286, 288, 291, 292], "piec": [35, 38, 218, 228, 276, 288], "fulltoken": 35, "tokenzi": 35, "basictoken": 35, "punctuat": [35, 38, 43], "lower": [35, 36, 43, 63, 213, 214, 217, 222, 228, 264, 280, 283, 284, 285, 291, 292, 293], "wordpiecetoken": 35, "unk_token": 35, "unk": 35, "max_input_chars_per_word": 35, "200": [35, 191, 218, 231, 293], "wordpiec": [35, 36, 292], "concat_gener": 36, "inc": [36, 96, 100, 219, 222, 223, 229, 233, 235, 275, 284, 289, 293], "abstract": [36, 138, 234, 236, 271], "own": [36, 56, 126, 212, 228, 235, 262, 272, 276, 281, 288, 290], "inherit": [36, 234, 235], "tensorflowtransform": 36, "mxnettransform": 36, "pytorchtransform": 36, "onnxrtqltransform": 36, "onnxrtittransform": 36, "transform_registri": 36, "transform_typ": 36, "basetransform": 36, "tensorflowwrapfunct": 36, "transform_func": 36, "pytorchmxnettransform": 36, "get_torchvision_map": 36, "interpol": [36, 276, 283, 292], "torchvis": [36, 233, 266], "composetransform": 36, "transform_list": [36, 292], "sever": [36, 174, 214, 215, 225, 228, 264, 272, 277, 278, 280, 283, 286, 291, 292, 293], "croptoboundingbox": [36, 292], "offset_height": [36, 292], "offset_width": [36, 292], "target_height": [36, 292], "target_width": [36, 292], "box": [36, 41, 45, 231, 276, 292, 293], "vertic": [36, 292], "coordin": [36, 62, 292, 293], "top": [36, 45, 230, 276, 292], "corner": [36, 230, 234, 236, 292], "horizont": [36, 292], "mxnetcroptoboundingbox": 36, "onnxrtcroptoboundingbox": 36, "tensorflowcroptoboundingbox": 36, "resizewithratio": [36, 292], "min_dim": [36, 292], "800": [36, 292], "max_dim": [36, 292], "1365": [36, 292], "constant_valu": 36, "np": [36, 62, 265, 291, 292, 293], "arrai": [36, 41, 208, 292], "smaller": [36, 122, 214, 277, 280, 283, 292], "dimens": [36, 119, 120, 182, 218, 288, 292], "ensur": [36, 62, 217, 220, 265, 285, 292], "longest": [36, 292], "side": [36, 233, 292], "doesn": [36, 215, 222, 234, 265, 277, 278], "exce": [36, 288, 292], "zero": [36, 87, 88, 89, 93, 208, 214, 217, 218, 228, 280, 283, 285, 288, 291, 292, 293], "tensorflowresizewithratio": 36, "perm": [36, 292], "permut": [36, 292], "tensorflowtranspos": 36, "mxnettranspos": 36, "pytorchtranspos": 36, "randomverticalflip": [36, 292], "randomli": [36, 62, 228, 291, 292, 293], "tensorflowrandomverticalflip": 36, "randomhorizontalflip": [36, 277, 292], "tensorflowrandomhorizontalflip": 36, "toarrai": [36, 292], "pil": [36, 292], "ndarrai": [36, 119, 120, 122, 195, 268, 292], "numpi": [36, 41, 119, 120, 122, 268, 291, 292], "casttftransform": 36, "castonnxtransform": 36, "castpytorchtransform": 36, "centercroptftransform": 36, "center": [36, 232, 233, 273, 292, 293], "paddedcentercroptransform": 36, "crop_pad": 36, "resizetftransform": 36, "nearest": [36, 191, 218, 219, 228, 288, 292], "bicub": [36, 292], "resizepytorchtransform": 36, "randomcroptftransform": 36, "randomresizedcroppytorchtransform": 36, "08": [36, 292, 294], "randomresizedcropmxnettransform": 36, "randomresizedcroptftransform": 36, "normalizetftransform": 36, "normal": [36, 43, 218, 228, 277, 281, 288, 291, 292], "deviat": [36, 292], "broadcast": [36, 265, 292], "rescalekeraspretraintransform": 36, "rescaletftransform": 36, "rescaletransform": 36, "alignimagechanneltransform": 36, "dim": [36, 228, 291, 292], "align": [36, 229, 288, 292], "w": [36, 216, 228, 283, 291, 292], "must": [36, 41, 230, 231, 235, 259, 262, 273, 285, 292], "pytorchalignimagechannel": 36, "tondarraytransform": 36, "resizemxnettransform": 36, "resizetransform": 36, "cropresizetftransform": 36, "boundari": [36, 292], "area": [36, 41, 214, 276, 280, 292], "pytorchcropresizetransform": 36, "mxnetcropresizetransform": 36, "cropresizetransform": 36, "centercroptransform": 36, "mxnetnormalizetransform": 36, "pytorchnormalizetransform": 36, "normalizetransform": 36, "randomcroptransform": 36, "randomresizedcroptransform": 36, "get_final_text": 36, "pred_text": 36, "orig_text": 36, "project": [36, 211, 229, 230, 284, 290, 293, 295], "predict": [36, 38, 42, 43, 45, 58, 180, 218, 228, 276, 288, 291, 292], "back": 36, "squadexampl": 36, "qas_id": 36, "question_text": 36, "doc_token": 36, "orig_answer_text": 36, "start_posit": 36, "end_posit": 36, "is_imposs": 36, "without": [36, 76, 180, 214, 228, 229, 265, 277, 280, 283, 284, 285, 293], "answer": [36, 42, 43, 229, 283, 292, 294], "posit": [36, 193, 229, 276], "unique_id": 36, "example_index": 36, "doc_span_index": 36, "token_to_orig_map": 36, "token_is_max_context": 36, "input_mask": [36, 277], "segment_id": [36, 277], "read_squad_exampl": 36, "input_fil": 36, "doc_strid": [36, 292], "max_query_length": [36, 292], "output_fn": 36, "inputbatch": 36, "collecttransform": 36, "10833": 36, "tfsquadv1posttransform": 36, "n_best_siz": [36, 292], "20": [36, 283, 292, 294], "384": [36, 292], "64": [36, 191, 215, 223, 228, 275, 288, 291, 292, 294], "max_answer_length": [36, 292], "30": [36, 266, 272, 292, 294], "total": [36, 45, 218, 283, 288, 292, 294], "best": [36, 67, 218, 219, 220, 221, 223, 229, 233, 261, 273, 281, 285, 288, 291, 292, 293], "nbest_predict": [36, 292], "question": [36, 42, 43, 228, 229, 230, 233, 234, 273, 283, 291, 292, 294], "becaus": [36, 221, 228, 231, 285, 291, 292, 293], "anoth": [36, 38, 208, 292, 293], "up": [36, 150, 228, 233, 265, 266, 268, 269, 272, 283, 284, 285, 290, 292, 293], "long": [36, 218, 261, 268, 288, 292], "document": [36, 212, 215, 220, 221, 228, 235, 236, 240, 265, 275, 278, 283, 289, 292], "chunk": [36, 292], "stride": [36, 87, 89, 92, 93, 292], "tfmodelzoocollecttransform": 36, "zoo": [36, 233, 266, 294], "tfsquadv1modelzooposttransform": 36, "squadv1": [36, 292], "see": [36, 38, 218, 228, 229, 230, 231, 232, 261, 274, 277, 288, 291, 293], "parsedecodevoctransform": 36, "intel": [37, 44, 45, 57, 58, 66, 72, 85, 97, 98, 99, 100, 186, 189, 190, 191, 192, 193, 198, 210, 212, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 228, 229, 230, 232, 234, 235, 236, 260, 263, 264, 266, 267, 268, 269, 270, 274, 275, 278, 279, 281, 282, 283, 284, 285, 287, 288, 289, 291, 293, 294], "open": [37, 197, 210, 229, 233, 267, 268, 277, 284], "librari": [37, 210, 215, 222, 233, 273, 277, 278, 284, 285], "popular": [37, 210, 212, 219, 223, 228, 233, 234, 235, 260, 266, 267, 275, 277, 283, 285, 288, 293], "compress": [37, 56, 191, 194, 204, 210, 212, 216, 218, 219, 221, 223, 228, 233, 240, 270, 272, 277, 281, 282, 283, 284, 285, 291, 294], "techniqu": [37, 210, 212, 217, 222, 223, 228, 233, 270, 272, 277, 282, 283, 284, 285, 294], "contrib": 37, "script": [38, 39, 42, 43, 230, 233, 265, 272, 284], "unicoderegex": 38, "hoc": 38, "hack": 38, "recogn": [38, 293], "symbol": [38, 46, 58, 231, 279], "nondigit_punct_r": 38, "compil": [38, 213, 217, 277], "regular": 38, "express": [38, 229], "preced": [38, 228, 291, 293], "digit": [38, 208, 284], "punct_nondigit_r": 38, "symbol_r": 38, "bleu_token": 38, "offici": [38, 42, 43, 180, 229, 291], "mose": 38, "smt": 38, "mosesdecod": 38, "blob": [38, 39, 42, 43, 45, 58, 277], "master": [38, 39, 42, 43, 45, 58, 277, 293], "mteval": 38, "v14": 38, "pl": 38, "l954": 38, "l983": 38, "comput": [38, 39, 42, 43, 45, 194, 208, 214, 215, 217, 218, 228, 260, 262, 264, 267, 276, 277, 278, 280, 283, 284, 285, 288, 291, 293], "bilingu": 38, "understudi": 38, "qualiti": [38, 261], "ha": [38, 119, 120, 122, 126, 186, 215, 220, 222, 228, 230, 234, 235, 236, 262, 267, 272, 277, 278, 283, 285, 287, 290, 291, 293], "been": [38, 186, 215, 218, 222, 228, 236, 261, 277, 278, 288, 291], "machin": [38, 218, 222, 225, 267, 273, 284, 291], "translat": [38, 39, 214, 280, 283, 293], "natur": [38, 218, 267], "approxim": [38, 39, 218, 235, 276, 288], "glue": [38, 45, 276, 277], "word": [38, 218, 228, 261, 276, 283, 288, 294], "ngram": [38, 276], "breviti": [38, 39, 276], "penalti": [38, 39, 276], "doe": [38, 76, 96, 100, 217, 218, 222, 261, 262, 276, 277, 288, 289, 292], "have": [38, 41, 45, 58, 76, 81, 126, 135, 180, 214, 215, 216, 218, 223, 228, 229, 230, 235, 236, 261, 262, 265, 269, 274, 276, 277, 278, 280, 281, 283, 285, 286, 288, 291, 293], "beam": [38, 276], "bleu": [39, 44, 276, 283], "tensor2tensor": 39, "bleu_hook": 39, "compute_bleu": 39, "reference_corpu": 39, "translation_corpu": 39, "max_ord": 39, "use_bp": 39, "against": 39, "gram": 39, "appli": [39, 96, 100, 161, 162, 163, 166, 168, 172, 180, 212, 214, 217, 221, 222, 223, 228, 229, 235, 236, 277, 280, 282, 283, 285, 287, 290, 291, 293], "bleu_scor": 39, "third": [41, 230, 274], "parti": [41, 228, 230, 274, 285], "pycocotool": [41, 268], "noth": [41, 293], "relat": [41, 76, 197, 236, 270, 283, 288], "thu": [41, 228, 277, 283, 285], "cannot": [41, 218, 231, 261, 268, 288], "slim": [41, 52, 54, 185, 186, 279, 283], "jonathanhuang": 41, "wrap": [41, 100, 184, 231, 265], "image_id": [41, 276], "encod": [41, 292], "invok": [41, 235], "groundtruth_dict": 41, "exportgroundtruthtococo": 41, "groundtruth_boxes_list": 41, "groundtruth_classes_list": 41, "max_num_class": 41, "output_path": 41, "detections_list": 41, "exportdetectionstococo": 41, "detection_boxes_list": 41, "detection_scores_list": 41, "detection_classes_list": 41, "cocowrapp": 41, "loadannot": 41, "cocoevalwrapp": 41, "agnostic_mod": 41, "computemetr": 41, "detection_typ": 41, "bbox": [41, 231, 276], "hold": [41, 62], "being": [41, 236], "iou_typ": 41, "iou_thr": [41, 45, 276], "map_point": [41, 45, 276], "cocoev": 41, "To": [41, 56, 214, 215, 216, 217, 218, 221, 223, 224, 228, 230, 233, 235, 236, 261, 265, 278, 280, 283, 287, 288, 289, 291, 293], "mscoco": 41, "org": [41, 191, 231, 233, 273, 283], "Then": [41, 228, 235, 291, 293], "exportsingleimagegroundtruthtococo": 41, "next_annotation_id": 41, "category_id_set": 41, "groundtruth_box": 41, "groundtruth_class": 41, "groundtruth_mask": 41, "groundtruth_is_crowd": 41, "ingest": 41, "api": [41, 45, 58, 73, 74, 85, 97, 98, 99, 100, 122, 127, 155, 184, 186, 189, 190, 191, 192, 193, 208, 216, 218, 223, 228, 231, 233, 237, 239, 245, 248, 251, 267, 268, 270, 272, 273, 277, 289, 290, 293, 295], "here": [41, 216, 217, 218, 221, 222, 225, 228, 235, 265, 266, 267, 269, 275, 276, 285, 289, 290, 291, 294], "match": [41, 42, 130, 217, 222, 224, 233, 288], "ones": [41, 283], "exportsingleimagedetectionstococo": 41, "associ": 41, "uniqu": [41, 228, 285], "identifi": [41, 54, 119, 120, 122, 185, 223, 283, 288], "assign": [41, 208, 265, 293], "continu": [41, 218, 275, 277, 283], "drop": [41, 215, 216, 218, 228, 230, 277, 278, 283, 288, 291, 294], "num_gt_box": 41, "num_detect": [41, 45, 276, 277], "image_height": 41, "image_width": 41, "detection_mask": 41, "crowd": 41, "rais": [41, 46, 119, 120, 122, 188, 233, 261, 283, 284], "valueerror": [41, 119, 120, 122, 268], "insid": [41, 218, 264, 268, 283, 286, 293], "exportsingleimagedetectionboxestococo": 41, "detection_box": [41, 277], "detection_scor": [41, 277], "detection_class": [41, 277], "exporsingleimagedetectionboxestococo": 41, "exportsingleimagedetectionmaskstococo": 41, "allenai": [42, 43], "bi": [42, 43], "att": [42, 43], "flow": [42, 43, 228, 231, 277], "f1_score": [42, 43], "ground_truth": [42, 43], "f1": [42, 44, 45, 265, 276, 277, 290, 294], "ground": [42, 43], "truth": [42, 43], "metric_max_over_ground_truth": [42, 43], "metric_fn": [42, 43], "exact_match_scor": 42, "exact": 42, "averag": [42, 43, 45, 218, 276, 277, 288, 293, 294], "articl": [42, 43], "paragraph": [42, 43], "qa": [42, 43, 233], "normalize_answ": 43, "remov": [43, 78, 103, 109, 112, 126, 132, 135, 136, 137, 147, 149, 229, 277, 283], "extra": [43, 218, 277, 288], "replac": [43, 213, 214, 217, 261, 265, 277, 280, 289], "newlin": [43, 208], "tab": 43, "abc": [43, 234, 293], "harmon": [43, 45], "recal": [43, 45], "equat": [43, 45, 228, 285, 291], "answer_start": 43, "177": [43, 294], "denver": 43, "bronco": 43, "nfl": 43, "afc": 43, "super": 43, "bowl": 43, "50": [43, 228, 235, 283, 291, 294], "56be4db0acb8001400a502ec": 43, "form": 43, "percentag": [43, 218, 260, 288], "bleu_util": 44, "coco_label_map": 44, "coco_tool": 44, "evaluate_squad": 44, "user_metr": [45, 58], "metric_cl": [45, 58, 277], "recommend": [45, 215, 225, 233, 234, 269, 270, 283, 293], "design": [45, 63, 212, 217, 219, 222, 233, 277, 283, 285], "sub_class": [45, 58], "basemetr": [45, 58], "tensorflowmetr": 45, "maintain": [45, 217, 218, 222, 228, 229, 230, 261, 279, 283, 288, 289], "pytorchmetr": 45, "mxnetmetr": 45, "onnxrtqlmetr": 45, "onnxrtitmetr": 45, "metric_registri": 45, "metric_typ": 45, "cross": [45, 224, 271, 293], "decorator_metr": 45, "single_output": 45, "hvd": [45, 265], "wrappytorchmetr": 45, "wrapmxnetmetr": 45, "wraponnxrtmetr": 45, "binari": [45, 180, 268, 276, 289], "proport": 45, "were": [45, 283], "pred_list": 45, "pytorchloss": 45, "print": [45, 129, 208, 224, 228, 265, 276, 277, 283, 291, 293], "mae": [45, 276], "compare_label": [45, 58, 276], "error": [45, 67, 205, 218, 228, 268, 276, 288, 291, 293], "actual": [45, 217, 265, 268], "compar": [45, 208, 214, 217, 218, 223, 228, 264, 276, 280, 283, 285, 288, 290, 293], "pred": [45, 180, 276], "rmse": [45, 276, 293], "squar": [45, 67, 218, 276, 293], "estim": [45, 54, 185, 293], "tensorflowtopk": 45, "k": [45, 58, 276, 283], "among": [45, 214, 228, 280, 291], "outcom": 45, "consid": [45, 180, 229, 260, 261, 293], "find": [45, 62, 119, 120, 122, 180, 208, 223, 234, 275, 283, 288, 290, 291, 293], "num_correct": 45, "num_sampl": 45, "generaltopk": 45, "cocomapv2": [45, 276], "anno_path": [45, 276], "95": [45, 275, 276, 294], "map_kei": 45, "detectionboxes_precis": 45, "output_index_map": [45, 276], "tensorflowmap": 45, "tensorflowcocomap": 45, "tensorflowvocmap": 45, "squadf1": [45, 276], "miou": 45, "num_class": 45, "21": [45, 228, 275, 284, 291, 294], "iou": 45, "intersect": [45, 234, 276], "onnxrtglu": 45, "roc": 45, "dlrm": 45, "register_customer_metr": 45, "mani": [45, 58, 218, 222, 228, 261, 262, 273, 288, 293], "tell": [45, 58], "what": [45, 58, 194, 222, 229, 284], "topk": [45, 58, 265, 276, 277, 285], "matrix": [45, 58, 221, 228], "updat": [45, 58, 126, 212, 218, 268, 275, 276, 277, 283, 288, 291, 293], "across": [46, 214, 223, 263, 270, 277, 280, 283, 286, 291, 293], "frozen": [46, 54, 58, 185, 279], "graph_def": [46, 54, 58, 78, 81, 106, 180, 185, 200], "ckpt": [46, 54, 58, 180, 185, 294], "savedmodel": [46, 54, 58, 185], "onnx_ml_pb2": [46, 279], "modelproto": [46, 199, 279], "gluon": [46, 58, 279], "hybirdblock": [46, 58], "mixed_precis": [46, 277], "obj": [46, 56, 58, 194, 197, 208], "measur": [46, 180, 203, 218, 222, 228, 234, 259, 270, 276, 277, 288, 293], "variou": [46, 214, 217, 219, 222, 236, 272, 280, 283, 286], "dl": [46, 215, 271, 284, 294], "assertionerror": [46, 188], "basemodel": [47, 96, 97, 100, 185, 222], "plai": [47, 185, 218, 228, 284, 288, 291], "graph": [47, 54, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 165, 167, 171, 174, 175, 177, 178, 179, 180, 185, 213, 217, 228, 231, 234, 265, 271, 279, 285, 286, 287], "role": [47, 185, 218, 228, 288, 291], "base_model": 48, "keras_model": 48, "mxnet_model": 48, "nets_factori": 48, "onnx_model": 48, "tensorflow_model": 48, "torch_model": 48, "kerasmodel": [49, 185], "get_model_fwk_nam": 50, "fwk": 50, "mxnetmodel": 51, "net": [52, 186, 233], "factori": [52, 186], "tfslimnetsfactori": [52, 186], "onnxmodel": 53, "get_model_typ": [54, 185], "validate_graph_nod": [54, 185], "node_nam": [54, 119, 120, 122, 185, 235], "node": [54, 78, 102, 106, 107, 108, 109, 112, 114, 116, 119, 120, 122, 126, 129, 132, 134, 135, 136, 149, 155, 167, 180, 185, 199, 201, 224, 234, 265, 286, 293, 294], "compat": [54, 180, 185, 230, 265, 279, 283, 289], "graphdef": [54, 126, 180, 185, 279], "validate_and_inference_input_output": [54, 185], "input_tensor_nam": [54, 180, 185], "output_tensor_nam": [54, 180, 185], "infer": [54, 56, 58, 78, 96, 100, 185, 194, 215, 216, 217, 218, 221, 222, 228, 233, 234, 235, 260, 264, 270, 277, 278, 281, 283, 284, 285, 288, 291, 293], "graph_sess": [54, 185], "session": [54, 180, 185, 277], "sess": [54, 180, 185], "graph_def_sess": [54, 185], "frozen_pb_sess": [54, 185], "load_saved_model": [54, 185], "saved_model_tag": [54, 185], "signatur": [54, 185], "tag": [54, 185, 228, 291], "metagraphdef": [54, 185], "analyz": [54, 155, 185, 290, 291], "input_tensor": [54, 180, 185], "output_tensor": [54, 180, 185], "try_loading_kera": [54, 185], "try": [54, 185, 222, 228, 231, 233, 268, 283, 285, 291, 293], "keras_sess": [54, 185], "slim_sess": [54, 185], "checkpoint_sess": [54, 185], "estimator_sess": [54, 185], "input_fn": [54, 185], "saved_model_sess": [54, 185], "tensorflowbasemodel": [54, 185], "tensorflowsavedmodelmodel": [54, 185], "tensorflowllmmodel": [54, 185], "exceed": [54, 185], "protobuf": [54, 185], "2gb": [54, 185], "tensorflowqatmodel": 54, "tensorflowcheckpointmodel": [54, 185], "checkpoint": [54, 185, 207, 279], "tensorflowmodel": [54, 185], "pytorchbasemodel": 55, "pytorchmodel": 55, "pytorchfxmodel": 55, "ipexmodel": 55, "driven": [56, 233, 270, 277, 281], "objective_registri": 56, "objective_custom_registri": 56, "obj_cl": 56, "eural_compressor": 56, "objective_cl": 56, "user_object": 56, "__class__": 56, "__name__": 56, "objective_cfg": 56, "deep_get": [56, 186, 208], "usr_cfg": 56, "deep_set": [56, 208], "user_obj_cfg": 56, "With": [56, 147, 222, 228, 231, 234, 236, 262, 273, 277, 281, 283, 284, 285, 290, 291, 293, 294], "easili": [56, 223, 228, 234, 281, 291], "special": [56, 219, 231, 262, 276, 277, 281, 283, 288], "peak": [56, 224, 281], "memori": [56, 126, 208, 214, 215, 216, 218, 221, 224, 228, 260, 262, 264, 277, 278, 280, 281, 283, 285, 286, 288, 291, 293, 294], "block": [56, 214, 218, 272, 280, 281, 283, 288, 293], "multiobject": 56, "metric_criterion": 56, "metric_weight": 56, "obj_criterion": 56, "obj_weight": 56, "is_measur": 56, "calib_dataload": [58, 79, 96, 97, 100, 220, 221, 222, 223, 231, 233, 262, 271, 276, 277, 285, 286, 287, 288], "calib_func": [58, 79, 96, 97, 100, 101, 222, 287], "entir": [58, 194, 216, 218, 221, 231, 235, 236, 260, 283], "autotunestrategi": 59, "There": [59, 61, 213, 217, 221, 228, 261, 269, 272, 277, 288, 291, 293], "onc": [59, 61, 180, 222, 235, 236, 262, 283, 284, 293, 294], "polici": [59, 61, 67, 223, 229, 233, 295], "automixedprecisiontunestrategi": 60, "basictunestrategi": 61, "bayesiantunestrategi": 62, "acq_max": 62, "ac": 62, "gp": 62, "y_max": 62, "n_warmup": 62, "10000": [62, 283], "n_iter": 62, "acquisit": 62, "gaussian": [62, 293], "relev": [62, 235, 236, 261, 283], "known": [62, 214, 277, 280, 283, 285, 293], "limit": [62, 208, 214, 218, 219, 222, 233, 275, 280, 285, 288], "acq": 62, "randomst": 62, "scipi": 62, "x_max": 62, "targetspac": 62, "pbound": 62, "9527": [62, 277], "append": [62, 231, 264, 277, 282], "while": [62, 215, 217, 218, 222, 228, 234, 235, 266, 272, 278, 283, 285, 288, 291], "duplic": [62, 149, 153], "bayesianoptim": 62, "verbos": [62, 201], "conservativetunestrategi": 63, "o0": [63, 293], "who": [63, 229], "exhaustivetunestrategi": 64, "hawq_v2tunestrategi": 65, "hawq": [65, 293], "v2": [65, 216, 262, 265, 267, 268, 275, 289, 291, 293, 294], "hessian": [65, 218, 288, 293], "network": [65, 191, 214, 215, 228, 260, 264, 267, 277, 280, 284, 285, 291, 293], "made": [65, 228, 234, 285, 289, 293], "small": [65, 119, 120, 121, 122, 218, 228, 283, 288, 293, 294], "impact": [65, 283, 289, 293], "auto_mixed_precis": 66, "msetunestrategi": 67, "those": [67, 126, 208, 217, 222, 228, 264, 271, 277, 278, 282, 283, 285, 293], "mse_v2tunestrategi": 68, "revert": [68, 76, 293], "fx": [68, 188, 213, 215, 217, 272, 278, 284, 285, 287], "randomtunestrategi": 69, "strategy_registri": [70, 293], "tunestrategi": [70, 293], "tunestrategymeta": 70, "metaclass": 70, "tuning_sampl": 72, "tuning_spac": [72, 73, 75], "tuning_struct": [72, 73, 74], "tuningord": 73, "Not": [73, 74, 186, 208, 261], "tuningsampl": 73, "tuningspac": [73, 74], "tuning_order_lst": 73, "initial_op_tuning_cfg": 73, "modelwisetuningsampl": 73, "tuning_items_prior": 73, "op_dtype_dict": 73, "optuningconfig": [73, 74, 75], "optypewisetuningsampl": 73, "opwisetuningsampl": 73, "fallbacktuningsampl": 73, "op_dtyp": 73, "accumul": [73, 214, 218, 280, 293], "skip_first": 73, "lowerbitssampl": 73, "blockfallbacktuningsampl": 73, "op_block_lst": 73, "target_dtyp": 73, "smoothquantsampl": 73, "alpha_list": 73, "weightonlyquantsampl": 73, "tuningitem": 74, "item_typ": 74, "capabl": [74, 84, 215, 218, 228, 235, 236, 259, 269, 277, 278, 283, 285, 293], "intern": [74, 182, 262, 276, 283], "merg": [74, 153, 182, 224, 293], "tree": 74, "pattern_to_intern": 74, "default_dtyp": 74, "pattern_to_path": 74, "quant_mode_from_pattern": 74, "internal_pattern": 74, "initial_tuning_cfg_with_quant_mod": 74, "op_name_typ": 74, "quant_mod": [74, 84, 87, 88, 89, 92, 93, 235, 236], "cfg": [74, 123, 124, 197, 235, 236], "step1": 74, "step2": 74, "complet": [74, 234, 235, 283, 285, 293, 294], "step3": 74, "step4": 74, "step5": 74, "op_typ": [75, 78, 81, 98, 216, 217], "op_quant_mod": 75, "quanttyp": 76, "quantopt": 76, "quant_typ": 76, "quant_opt": 76, "preprocess_user_cfg": 76, "op_user_cfg": 76, "op_user_cfg_modifi": 76, "group_siz": [76, 191, 218, 223, 288], "32": [76, 191, 214, 215, 222, 223, 265, 271, 280, 288, 294], "ordereddefaultdict": 76, "extract_data_typ": 76, "data_typ": 76, "sign": [76, 191, 218, 228, 230, 233, 236, 260, 284, 285, 288, 290], "unsign": [76, 236, 288], "reverted_data_typ": 76, "signed_flag": 76, "get_adaptor_nam": 76, "build_slave_faker_model": 76, "slave": [76, 293], "virtual": [76, 284], "classregist": 76, "smoother": 77, "static_qu": [77, 220, 261], "smoothquantcalibr": 78, "percentil": [78, 98, 260], "outlier": [78, 216, 218, 221, 228, 235, 260, 288, 291], "smoothquantcalibrationllm": 78, "model_path": [78, 180, 191, 218], "temp_path": 78, "weight_name_map": 78, "llm": [78, 81, 191, 214, 216, 217, 218, 221, 228, 270, 280, 283, 284, 286, 288, 291], "temporari": [78, 208, 229], "median": 78, "autotrack": [78, 180], "compon": [79, 223, 231, 261, 265, 273, 274, 282, 283], "sq": [79, 222, 275, 291], "smoothquantconfig": [79, 96, 98, 191, 216, 221, 222], "calib_iter": [79, 83, 96, 97, 100, 222, 235], "scaler": 80, "smoothquantscal": 81, "scales_per_op": [81, 98], "factor": [81, 213, 216, 218, 222, 228, 288, 291, 294], "individu": [81, 228, 229, 283, 291], "share": [81, 134, 149, 154, 218, 228, 268, 269, 288, 291, 293], "smoothquantscalerllm": 81, "kerasadaptor": 83, "framework_specific_info": [83, 84, 234], "kerasqueri": 83, "local_config_fil": [83, 84], "kerasconfigconvert": 83, "quant_config": [83, 84, 96, 100, 186, 193, 213, 214, 216, 217, 218, 219, 220, 221, 222, 225, 270, 280], "staticquantconfig": [83, 84, 94, 98, 186, 191, 217, 220, 221, 222, 223], "kerassurgeri": 83, "fakequ": [83, 140], "tensorflowadaptor": 84, "stock": [84, 291], "spr": 84, "tensorflow_itexadaptor": 84, "tensorflowconfig": 84, "tensorflowqueri": [84, 234], "performance_onli": [84, 101, 152, 166, 171, 179, 277], "itex_mod": [84, 101, 141, 152, 166, 171], "tensorflowconfigconvert": 84, "qconv2d": 87, "kernel_s": [87, 89, 93], "dilation_r": [87, 89, 93], "group": [87, 218, 228, 233, 272, 283, 288, 292, 293, 294], "use_bia": [87, 88, 89, 93], "kernel_initi": [87, 88], "glorot_uniform": [87, 88, 89, 93], "bias_initi": [87, 88, 89, 93], "kernel_regular": [87, 88], "bias_regular": [87, 88, 89, 93], "activity_regular": [87, 88, 89, 93], "kernel_constraint": [87, 88], "bias_constraint": [87, 88, 89, 93], "act_min_valu": [87, 88, 89, 92, 93], "act_max_valu": [87, 88, 89, 92, 93], "weight_min_valu": [87, 88, 89, 92, 93], "weight_max_valu": [87, 88, 89, 92, 93], "granular": [87, 88, 89, 92, 93, 214, 228, 234, 235, 236, 269, 272, 280, 285, 291], "per_tensor": [87, 88, 89, 92, 93, 94, 98, 191, 220, 235, 236, 269, 285], "quant_statu": [87, 88, 89, 92, 93], "calib": [87, 88, 89, 92, 93, 235], "quant_t": [87, 88, 89, 92, 93], "s8": [87, 88, 89, 92, 93, 201], "quant_round_mod": [87, 88, 89, 92, 93], "half_away_from_zero": [87, 88, 89, 92, 93], "quant_narrow_rang": [87, 88, 89, 92, 93], "quant_axi": [87, 88, 89, 92, 93], "initialize_int8_conv2d": 87, "fp32_layer": [87, 88, 89, 92, 93], "q_config": [87, 88, 89, 92, 93, 201, 234], "qdens": 88, "unit": [88, 230, 283], "initialize_int8_dens": 88, "depthwis": 89, "conv2d": [89, 90, 93, 98, 105, 111, 112, 113, 117, 118, 123, 160, 170, 175, 235, 236, 267, 269, 291, 293], "qdepthwiseconv2d": 89, "depth_multipli": [89, 93], "depthwise_initi": [89, 93], "depthwise_regular": [89, 93], "depthwise_constraint": [89, 93], "depthwiseconv2d": 89, "initialize_int8_depthwise_conv2d": 89, "depthwise_conv2d": 90, "layer_initi": 90, "pool2d": 90, "separable_conv2d": 90, "qavgpool2d": 92, "pool_siz": 92, "averagepooling2d": 92, "qmaxpool2d": 92, "maxpooling2d": 92, "initialize_int8_avgpool": 92, "avgpool": [92, 164, 173, 269], "initialize_int8_maxpool": 92, "maxpool": [92, 164, 173, 269], "separ": [93, 229, 261, 271, 273, 274, 282], "qseparableconv2d": 93, "pointwise_initi": 93, "pointwise_regular": 93, "pointwise_constraint": 93, "separableconv2d": 93, "initialize_int8_separable_conv2d": 93, "operatorconfig": [94, 191], "weight_dtyp": [94, 98, 220], "weight_sym": [94, 98, 220, 222, 223], "weight_granular": [94, 98, 220], "act_dtyp": [94, 98, 191, 214, 216, 217, 220, 280], "act_sym": [94, 98, 191, 217, 220, 222, 223], "act_granular": [94, 98, 191, 220], "get_all_registered_config": 94, "get_default_static_quant_config": [94, 98], "entri": [96, 97, 100, 119, 120, 122, 190, 193, 208, 219, 261, 274], "interfac": [96, 138, 185, 197, 215, 217, 219, 222, 228, 272, 277, 285, 289], "static_quant_entri": 96, "main": [96, 97, 100, 190, 193, 218, 219, 220, 222, 224, 225, 228, 231, 262, 265, 277, 283, 285, 288], "substitut": [96, 100, 222], "smooth_quant_entri": [96, 261], "smooth_quant_config": 96, "get_all_config_set": [97, 190], "weight_algorithm": 98, "minmax": [98, 191, 217, 235, 236, 260, 269, 285], "act_algorithm": 98, "fold": [98, 114, 115, 191, 201, 216, 218, 269, 288, 291], "999": 98, "record_max_info": 98, "weight_clip": 98, "auto_alpha_arg": [98, 191, 291], "default_sq_alpha_arg": 98, "get_default_sq_config": [98, 191], "rtn": [98, 190, 191, 219, 225, 228, 261, 286, 288], "algorithm_entri": [99, 261], "autotun": [99, 192, 220, 221, 222, 228, 241, 261], "need_appli": 100, "configs_map": 100, "quantize_model": [100, 220, 221, 222, 228], "quantize_model_with_single_config": 100, "graphconvert": 101, "qt_config": 101, "int8_sequ": 101, "fp32_op": [101, 102, 152], "bf16_op": [101, 102, 152, 235, 287], "data_load": [101, 234], "fake_qu": [101, 140, 152, 166, 171], "qdq_enabl": 101, "new_api": [101, 123, 124, 129, 131, 143, 166, 171, 175], "use_bf16": 101, "rewrit": [102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "bf16convert": [102, 287], "dequant": [103, 140, 142, 143, 144, 145, 147, 208, 228, 231, 235, 291], "cast": [103, 287, 292], "rerewrit": 103, "dequantizecastoptim": 103, "b16": 103, "bf16_convert": 104, "dequantize_cast_optim": 104, "biasadd": [105, 111, 116, 118, 154, 269], "convertaddtobiasaddoptim": 105, "addv2": [105, 121, 269], "layout": 106, "convertlayoutoptim": 106, "abov": [106, 216, 217, 218, 220, 228, 234, 235, 236, 283, 285, 291, 293], "leakyrelu": [107, 291], "convertleakyreluoptim": 107, "subgraph": [107, 118, 286, 293], "coeffici": [107, 283], "nan": 108, "convertnantorandom": 108, "const": [108, 109, 115, 116, 119, 120, 122, 134, 149], "consist": [108, 115, 218, 230, 231, 261, 291, 293], "placehold": [109, 182, 261], "convertplaceholdertoconst": 109, "dilat": 110, "contract": 110, "dilatedcontract": 110, "spacetobatchnd": 110, "batchtospacend": 110, "inject": [111, 277], "injectdummybiasaddoptim": 111, "fusion": [111, 113, 122, 130, 154, 161, 162, 163, 166, 167, 168, 172, 221, 231, 234, 269], "expanddim": 112, "expanddimsoptim": 112, "next": [112, 182, 218, 228, 235, 236, 262, 288, 293], "reshap": [113, 119, 120, 125, 228, 291], "fetchweightfromreshapeoptim": 113, "pack": 113, "batchnorm": [114, 119, 231, 291], "foldbatchnormnodesoptim": 114, "graphfoldconstantoptim": 115, "supported_op_typ": 115, "fusebiasaddandaddoptim": 116, "columnwis": 117, "fusecolumnwisemuloptim": 117, "depthwiseconv2dn": [117, 123, 160, 170, 269], "math": [118, 228, 285], "fuseconvwithmathoptim": 118, "elimin": 118, "realdiv": [118, 121], "decompos": [119, 120], "fusedecomposedbnoptim": 119, "input_graph_def": [119, 120, 122], "node_name_from_input": [119, 120, 122], "strip": [119, 120, 122, 135, 136, 180], "off": [119, 120, 122, 218, 228, 230, 288], "port": [119, 120, 122], "underli": [119, 120, 122], "node_from_map": [119, 120, 122], "node_map": [119, 120, 122], "pull": [119, 120, 122], "nodedef": [119, 120, 122], "isn": [119, 120, 122], "present": [119, 120, 122, 228, 284, 291], "values_from_const": [119, 120, 122], "node_def": [119, 120, 122], "valid_reshape_input": [119, 120], "reshape_in0_ndef": [119, 120], "reshape_in1_ndef": [119, 120], "bypass_reshap": [119, 120], "input_node_map": [119, 120], "get_const_dim_count": [119, 120], "instancenorm": [120, 291], "fusedecomposedinoptim": 120, "gelu": 121, "fusegeluoptim": 121, "sqrt": 121, "erf": 121, "layernorm": [122, 228, 291], "fuselayernormoptim": 122, "remap": 122, "fusedbatcnormv3": 122, "And": [122, 222, 228, 230, 231, 259, 261, 277, 291], "2d": [122, 228, 291], "3d": [122, 228, 284, 291], "fusepadwithconv2doptim": 123, "itex_qdq_mod": [123, 124], "conv3d": [123, 160], "fusepadwithfp32conv2doptim": 124, "fusetransposereshapeoptim": 125, "cse": [126, 149], "graphcseoptim": 126, "introduc": [126, 212, 218, 228, 234, 235, 236, 269, 277, 285, 288, 289, 291], "ident": [126, 132, 229], "d": [126, 271, 283], "child": 126, "b1": 126, "c1c2": 126, "d1": [126, 208], "c1": 126, "c2": 126, "relu": [126, 130, 154, 231, 269, 291], "relu6": [126, 269], "grappler": [127, 269], "grappleroptim": 127, "input_output_nam": 127, "opt_cfg": 127, "leverag": [127, 204, 213, 217, 220, 223, 228, 233, 267, 282, 285, 288, 293], "convert_add_to_biasadd": 128, "convert_layout": 128, "convert_leakyrelu": 128, "convert_nan_to_random": 128, "convert_placeholder_to_const": 128, "dilated_contract": 128, "dummy_biasadd": 128, "expanddims_optim": 128, "fetch_weight_from_reshap": 128, "fold_batch_norm": 128, "fold_const": 128, "fuse_biasadd_add": 128, "fuse_column_wise_mul": 128, "fuse_conv_with_math": 128, "fuse_decomposed_bn": 128, "fuse_decomposed_in": 128, "fuse_gelu": 128, "fuse_layer_norm": 128, "fuse_pad_with_conv": 128, "fuse_pad_with_fp32_conv": 128, "fuse_reshape_transpos": 128, "graph_cse_optim": 128, "grappler_pass": 128, "insert_print_nod": 128, "move_squeeze_after_relu": 128, "pre_optim": 128, "remove_training_nod": 128, "rename_batch_norm": 128, "split_shared_input": 128, "strip_equivalent_nod": [128, 180], "strip_unused_nod": [128, 180], "switch_optim": 128, "insertprintminmaxnod": 129, "pre_node_nam": 129, "post_node_nam": 129, "move": [130, 218, 228, 231, 288, 289], "squeez": [130, 231], "movesqueezeafterreluoptim": 130, "entranc": 131, "preoptim": 131, "removetrainingnodesoptim": 132, "protected_nod": 132, "types_to_splic": 132, "checknumer": 132, "stopgradi": 132, "renam": [133, 219, 289], "fusedbatchnorm": 133, "fusedbatchnormv2": 133, "renamebatchnormoptim": 133, "splitsharedinputoptim": 134, "equival": [135, 214, 216, 218, 221, 228, 233, 280, 284, 288, 291], "stripequivalentnodesoptim": 135, "output_node_nam": [135, 136, 166, 167, 171, 180], "unus": [136, 180], "stripunusednodesoptim": 136, "input_node_nam": [136, 166, 171, 180], "switch": 137, "switchoptim": 137, "graphrewriterbas": 138, "graph_bas": 139, "freez": [140, 141, 180, 213, 217, 283], "freezefakequantopoptim": 140, "prior": [140, 293], "freezevaluetransform": 141, "max_min_data": 141, "postfix": 141, "tensor_data": [141, 186, 208, 209], "th": 141, "quantizedconv": [142, 143], "quantizeddeconv": 142, "redund": [142, 144], "fuseconvredundantdequantizetransform": 142, "_quantizedconv": 142, "_quantizeddeconv": 142, "successor": [142, 143, 144, 145], "requant": [143, 145], "fuseconvrequantizetransform": 143, "quantizedmatmul": [144, 145], "fusematmulredundantdequantizetransform": 144, "_quantizedmatmul": [144, 145], "fusematmulrequantizedequantizetransform": 145, "quantizedmatmulwithbiasanddequant": 145, "fusematmulrequantizetransform": 145, "fusematmulrequantizedequantizenewapitransform": 145, "fusematmulrequantizenewapitransform": 145, "newapi": 145, "freeze_fake_qu": 146, "freeze_valu": 146, "fuse_conv_redundant_dequant": 146, "fuse_conv_requant": 146, "fuse_matmul_redundant_dequant": 146, "fuse_matmul_requant": 146, "meta_op_optim": 146, "post_hostconst_convert": 146, "post_quantized_op_cs": 146, "scale_propag": 146, "meta": [147, 225, 233, 275, 284, 294], "metainfochangingmemopoptim": 147, "metaop": 147, "hostconst": 148, "posthostconstconvert": 148, "postcseoptim": 149, "quantizev2": 149, "decreas": [149, 283], "propag": 150, "scalepropagationtransform": 150, "direct": [150, 219, 283], "insert_qdq_pattern": 151, "merge_duplicated_qdq": 151, "share_qdq_y_pattern": 151, "generategraphwithqdqpattern": 152, "calibration_data": 152, "op_wise_config": [152, 166, 171, 235], "quantized_nod": 152, "llm_weight_minmax": 152, "q": [152, 154, 166, 213, 217, 219, 228, 288, 291], "dq": [152, 154, 166, 213, 217, 219, 228, 291], "mergeduplicatedqdqoptim": 153, "shareqdqforitexypatternoptim": 154, "break": [154, 265, 277], "graphanalyz": 155, "extend_engin": 155, "graphrewriterhelp": 155, "graph_rewrit": 156, "quantize_graph": 156, "transform_graph": 156, "graph_convert": 156, "graph_util": 156, "quantize_graph_common": 156, "quantize_graph_bas": 157, "quantize_graph_bn": 157, "quantize_graph_concatv2": 157, "quantize_graph_conv": 157, "quantize_graph_for_intel_cpu": 157, "quantize_graph_matmul": 157, "quantize_graph_pool": 157, "fusedbatchnormv3": [158, 168], "fusenodestartwithfusedbatchnormv3": [158, 168], "_quantizedfusedbatchnorm": 158, "concatv2": [159, 169, 179, 269], "fusenodestartwithconcatv2": [159, 169], "quantizedconcatv2": [159, 169], "fusenodestartwithconv2d": [160, 170], "conv2dbackpropinput": 161, "conv3dbackpropinputv2": 161, "fusenodestartwithdeconv2d": 161, "fusedinstancenorm": 162, "fusenodestartwithfusedinstancenorm": 162, "batchmatmul": 163, "batchmatmulv2": 163, "fusenodestartwithmatmul": [163, 172], "fusenodestartwithpool": [164, 173], "fuse_qdq_bn": 165, "fuse_qdq_concatv2": 165, "fuse_qdq_conv": 165, "fuse_qdq_deconv": 165, "fuse_qdq_in": 165, "fuse_qdq_matmul": 165, "fuse_qdq_pool": 165, "optimize_qdq": 165, "optimizeqdqgraph": 166, "input_graph": [166, 171, 175, 234], "op_wise_sequ": [166, 171], "quantizegraph": 167, "quantizegraphbas": 167, "quantizenodebas": 167, "descript": [167, 216, 231, 235, 236, 262, 291], "quantizegraphforintel": 171, "herlper": 174, "quantizegraphhelp": 174, "staticmethod": 174, "biascorrect": 175, "fp32_graph": 175, "weight_empir": 175, "Will": [175, 272], "graphtransform": 176, "graphtransformbas": 176, "input_pb": [176, 178, 179], "bias_correct": 177, "graph_transform_bas": 177, "insert_log": 177, "rerange_quantized_concat": 177, "insertlog": 178, "node_name_list": 178, "show_nam": 178, "show_op": 178, "first_n": 178, "summar": [178, 261], "messag": [178, 224, 230, 293], "dump_fp32": 178, "rerang": 179, "rerangequantizedconcat": 179, "rerange_quant": 179, "concat": 179, "read_graph": 180, "in_graph": 180, "in_graph_is_binari": 180, "write_graph": 180, "out_graph_def": 180, "out_graph_fil": 180, "is_ckpt_format": 180, "is_saved_model_format": 180, "saved_model": [180, 222, 286], "get_tensor_by_nam": 180, "try_cnt": 180, "scope": [180, 219, 230, 235, 277], "mai": [180, 215, 218, 221, 228, 229, 230, 235, 260, 261, 267, 268, 274, 278, 284, 285, 288, 291, 293], "tensor_nam": 180, "suffix": 180, "got": [180, 235, 268], "iterator_sess_run": 180, "iter_op": 180, "feed_dict": 180, "integr": [180, 215, 219, 222, 228, 234, 277, 288], "makeiter": 180, "feed": [180, 283], "collate_tf_pr": 180, "collat": 180, "get_input_output_node_nam": 180, "fix_ref_type_of_graph_def": 180, "ref": 180, "tool": [180, 200, 208, 228, 233, 234, 277, 283, 284, 285], "strip_unused_lib": 180, "r1": 180, "15": [180, 269, 273], "branch": [180, 230], "attr": 180, "get_graph_def": 180, "auto_input_output": 180, "get_model_input_shap": 180, "generate_feed_dict": 180, "apply_inlin": 180, "inlin": 180, "definit": 180, "concret": [180, 185, 293], "new_graph_def": 180, "construct_function_from_graph_def": 180, "frozen_func": 180, "rebuild": 180, "reconstruct": [180, 284], "new_func": 180, "parse_saved_model": 180, "_saved_model": 180, "reconstruct_saved_model": 180, "trackabl": 180, "destin": [180, 199], "basedatalod": 182, "default_col": 182, "batch": [182, 194, 218, 262, 264, 277, 282, 283, 285, 291, 292, 293, 294], "outer": 182, "iterablefetch": 182, "collate_fn": [182, 262], "drop_last": 182, "indexfetch": 182, "iterablesampl": 182, "act": [182, 229], "batchsampl": 182, "basedataload": 182, "last_batch": [182, 262], "rollov": [182, 262], "batch_sampl": [182, 262], "num_work": [182, 262, 277, 285], "pin_memori": [182, 262], "shuffl": [182, 262, 277, 285], "_generate_dataload": 182, "dummydatasetv2": 182, "model_wrapp": 183, "tensorflowglobalconfig": 184, "get_tf_model_typ": 185, "version1_lt_version2": [186, 208], "version1": [186, 208], "version2": [186, 208], "version1_gt_version2": [186, 208], "greater": [186, 208, 222, 283, 293], "version1_eq_version2": [186, 208], "version1_gte_version2": [186, 208], "version1_lte_version2": [186, 208], "register_algo": [186, 261], "algos_map": 186, "example_algo": 186, "dot": [186, 208, 215, 228, 278, 285], "nest": [186, 208], "person": [186, 208, 229, 284], "john": [186, 208], "deep": [186, 208, 212, 214, 215, 219, 222, 228, 233, 234, 235, 262, 272, 273, 277, 278, 280, 284, 285, 293], "itex_instal": 186, "extens": [186, 208, 215, 216, 217, 219, 228, 233, 234, 241, 261, 268, 269, 270, 272, 273, 275, 277, 278, 279, 283, 284, 285, 288, 291, 293], "instal": [186, 222, 265, 268, 270, 295], "combine_histogram": [186, 208], "old_hist": [186, 208], "arr": [186, 208], "histogram": [186, 195, 208], "old": [186, 208, 216, 277, 289], "get_all_fp32_data": [186, 208], "get_tensor_histogram": [186, 208], "bin": [186, 208, 268], "2048": [186, 191, 208, 218, 233, 288], "disable_random": 186, "valid_keras_format": 186, "captureoutputtofil": [186, 208], "tmp_file_path": [186, 208], "stream": [186, 208, 294], "sy": [186, 208, 261], "stderr": [186, 208], "captur": [186, 208, 217, 218], "pt2e_export": 187, "export_model_for_pt2e_qu": 188, "dynamic_shap": 188, "graph_modul": 188, "graphmodul": [188, 231, 287], "eager": [188, 213, 217, 218, 219, 233, 265, 272, 285, 287], "pt2e": 188, "get_rtn_double_quant_config_set": 190, "rtnconfig": [190, 191, 218, 219, 223, 270], "doubl": [190, 191, 218, 284], "run_fn": [190, 193, 216, 217, 218, 219], "run_arg": [190, 193, 219], "_description_": [190, 191, 219], "torchbaseconfig": 191, "use_sym": [191, 218, 223], "group_dim": [191, 218, 288], "use_full_rang": [191, 218], "use_mse_search": [191, 218], "use_layer_wis": [191, 218], "use_double_qu": [191, 218], "double_quant_dtyp": [191, 218], "double_quant_bit": [191, 218], "double_quant_use_sym": [191, 218], "double_quant_group_s": [191, 218], "quant_lm_head": [191, 218], "get_default_rtn_config": [191, 225], "processor_typ": [191, 225], "torch_util": [191, 233, 286, 291], "get_default_double_quant_config": 191, "bnb_nf4": 191, "gptqconfig": [191, 218, 223], "act_ord": [191, 218], "percdamp": [191, 218, 288], "block_siz": [191, 218, 288], "static_group": [191, 218, 288], "gptq": [191, 219, 225, 228, 261, 275, 286, 288], "arxiv": [191, 214, 218, 228, 233, 260, 280, 283, 284, 288, 291], "ab": [191, 222, 228, 283, 285, 291], "2210": [191, 218, 228, 288], "17323": [191, 218, 228, 288], "awqconfig": [191, 218], "use_auto_scal": [191, 218], "use_auto_clip": [191, 218], "absorb_layer_dict": 191, "awq": [191, 219, 228, 286, 288], "acceler": [191, 215, 216, 218, 221, 228, 233, 273, 277, 283, 284, 287, 288, 291, 293], "2306": [191, 218, 228, 288], "00978": [191, 218, 228, 288], "get_default_awq_config": 191, "teqconfig": [191, 218], "absorb_to_lay": 191, "teq": [191, 219, 233, 284, 286, 288], "get_default_teq_config": 191, "autoroundconfig": [191, 218], "act_bit": 191, "act_group_s": 191, "act_dynam": 191, "enable_full_rang": [191, 204, 218, 286, 288], "lr_schedul": [191, 218, 277, 283], "enable_quanted_input": [191, 218], "enable_minmax_tun": [191, 218], "minmax_lr": [191, 218], "low_gpu_mem_usag": [191, 218], "seqlen": [191, 218, 233], "nsampl": [191, 288], "rand": [191, 218, 228, 291], "nblock": 191, "gradient_accumulate_step": [191, 218], "not_use_best_ms": [191, 218], "dynamic_max_gap": [191, 218], "scale_dtyp": [191, 204, 218, 288], "quant_block_list": 191, "autoround": [191, 219, 228, 233, 275], "via": [191, 218, 228, 229, 233, 265, 272, 277, 283, 284], "gradient": [191, 218, 228, 233, 272, 277, 283, 284, 294], "descent": [191, 218, 228, 233, 284], "2309": [191, 218, 228], "05516": [191, 218, 228], "mxquantconfig": [191, 214, 280], "w_dtype": [191, 214, 216, 217, 280], "out_dtyp": 191, "bfloat16": [191, 215, 278, 287], "blocksiz": [191, 214, 280], "round_method": 191, "mx": [191, 214, 219, 233, 270, 280], "get_default_mx_config": 191, "dynamicquantconfig": [191, 213], "w_sym": 191, "w_granular": 191, "w_algo": 191, "act_algo": [191, 217], "get_default_dynamic_config": 191, "per_channel": [191, 235, 236, 269, 285], "model_info": 191, "get_default_static_config": 191, "scale_shar": 191, "init_alpha": 191, "alpha_min": [191, 291], "alpha_max": [191, 291], "alpha_step": [191, 291], "shared_criterion": [191, 291], "do_blockwis": [191, 291], "hqqconfig": [191, 218], "quant_zero": [191, 218], "quant_scal": [191, 218], "scale_quant_group_s": [191, 218], "half": [191, 215, 218, 278], "quadrat": [191, 218], "hqq": [191, 219, 233], "blog": [191, 233, 284], "mobiusml": [191, 218], "io": [191, 218, 233, 273], "hqq_blog": [191, 218], "get_default_hqq_config": 191, "fp8config": 191, "fp8_e4m3": 191, "w_observ": 191, "minmax_per_channel": 191, "act_observ": 191, "hpu": 191, "fp8": [191, 214, 219, 233, 280, 284], "get_default_fp8_config": 191, "get_default_fp8_config_set": 191, "get_default_mixed_precision_config": 191, "get_default_mixed_precision_config_set": 191, "get_woq_tuning_config": [191, 223], "woq": [191, 214, 233, 275, 280], "inplac": [193, 219], "prepar": [193, 213, 214, 216, 217, 218, 219, 222, 225, 228, 231, 265, 270, 283, 285], "observ": [193, 213, 217, 218, 219, 236, 288, 290, 293], "place": [193, 219, 264, 273, 283, 293], "loop": [194, 231, 235, 236, 269, 290, 293], "compressionmanag": 194, "deal": 194, "pruningconfig": 194, "orchestr": [194, 212, 272], "callback": [194, 197, 231, 277, 282, 283, 285], "on_train_begin": [194, 231, 264, 277, 282, 283, 285], "train_loop": [194, 277, 282], "epoch": [194, 262, 264, 265, 277, 282, 283], "on_epoch_begin": [194, 197, 264, 277, 282], "on_step_begin": [194, 197, 264, 277, 282, 283], "on_after_compute_loss": [194, 264, 277, 282], "backward": [194, 228, 264, 265, 277, 282, 283, 285, 289], "on_before_optimizer_step": [194, 264, 277, 282, 283], "on_step_end": [194, 197, 264, 277, 282], "on_epoch_end": [194, 197, 264, 277, 282], "on_train_end": [194, 264, 277, 282, 283, 285], "path_to_sav": 194, "train_func": [194, 265, 277, 285], "top1": [194, 276, 283, 285, 294], "callbacks_list": 194, "layerhistogramcollector": 195, "num_bin": 195, "8001": 195, "layer_tensor": 195, "include_lay": 195, "collector": 195, "diverg": [195, 203, 236, 260, 293], "get_func_from_config": 197, "func_dict": 197, "get_preprocess": 197, "get_metr": 197, "get_postprocess": 197, "get_algorithm": 197, "create_dataset": 197, "data_sourc": 197, "cfg_preprocess": 197, "cfg_filter": 197, "create_dataload": 197, "dataloader_cfg": 197, "create_eval_func": 197, "postprocess_cfg": 197, "baselin": [197, 223, 290, 291], "create_train_func": 197, "train_cfg": 197, "hook": [197, 264, 277, 283, 291], "Their": 197, "qlinear2qdq": 198, "check_model": 199, "onnx_qlinear_to_qdq": 199, "input_name_to_nod": 199, "qlinearop": [199, 272, 285, 294], "tf_to_fp32_onnx": 200, "save_path": [200, 201, 234, 279], "inputs_as_nchw": 200, "tf_to_int8_onnx": 200, "int8_model": [200, 201], "get_node_map": 201, "fp32_model": [201, 208, 216, 217, 221, 222, 286, 288], "fp32_onnx_path": 201, "module_node_map": 201, "get_quantizable_onnx_op": 201, "quantize_nod": 201, "dynamic_quant_export": 201, "pt_fp32_model": 201, "pt_int8_model": 201, "weight_typ": 201, "static_quant_export": 201, "_quantiz": 201, "torch_to_fp32_onnx": 201, "do_constant_fold": 201, "torch_to_int8_onnx": 201, "auxiliari": 202, "collect_layer_histogram": 202, "create_obj_from_config": 202, "kl_diverg": 202, "load_huggingfac": [202, 277], "weights_detail": 202, "pretrain": 204, "optimizedmodel": 204, "from_pretrain": [204, 233, 270, 277], "save_for_huggingface_upstream": [204, 277], "output_dir": [204, 219, 277], "export_compressed_model": [204, 288], "saved_dir": [204, 288], "use_optimum_format": [204, 288], "compression_dtyp": [204, 288], "int32": [204, 218, 288], "compression_dim": [204, 288], "_type_": 204, "symmetr": [204, 222, 236, 285, 288, 292, 293], "comoress": 204, "float16": [204, 218, 288], "msg": 205, "debug": [205, 293], "fatal": 205, "warn": [205, 261], "alia": [205, 208], "is_int8_model": 207, "load_weight_onli": 207, "checkpoint_dir": 207, "layer_wis": [207, 286], "qconfig": [207, 218, 288], "best_model": [207, 215, 220, 221, 222, 223, 288], "pt": [207, 218, 233, 270, 273, 279, 284, 285, 287, 288], "history_cfg": 207, "best_configur": 207, "best_model_weight": 207, "snapshot": 207, "recover_model_from_json": 207, "json_file_path": 207, "recov": [207, 208, 234, 264], "cfg_from_fil": 208, "yaml_fil": [208, 265], "time_limit": 208, "context": [208, 218, 228, 288], "get_siz": 208, "seen": [208, 234], "recurs": 208, "compute_spars": 208, "non": [208, 215, 218, 231, 288, 293], "fault_tolerant_fil": 208, "equal_dict": 208, "d2": 208, "compare_kei": 208, "ignore_kei": 208, "except": [208, 218, 261, 285, 286], "ignor": [208, 218, 228, 260, 288, 291, 293], "get_tuning_histori": 208, "tuning_history_path": 208, "num": 208, "offlin": [208, 216, 221, 222, 228, 229, 277, 285, 291], "str2arrai": 208, "dequantize_weight": 208, "weight_tensor": 208, "min_filter_tensor": 208, "max_filter_tensor": 208, "scale_info": 208, "global_st": 208, "load_data_from_pkl": 208, "pkl": 208, "dump_data_to_loc": 208, "show_memory_info": 208, "hint": [208, 268], "show": [208, 214, 228, 229, 265, 277, 280, 291, 293], "dump_class_attr": 208, "sex": [208, 229], "male": 208, "compare_object": 208, "obj1": 208, "obj2": 208, "ignore_attr": 208, "comparison": [208, 288, 289], "alias_param": 208, "param_nam": 208, "param_alia": 208, "alias": [208, 261], "print_tabl": 208, "column_map": 208, "table_entri": 208, "titl": [208, 274, 293], "insert_newlin": 208, "tabl": [208, 214, 236, 267, 270, 280, 294], "prettyt": 208, "column": [208, 218, 228, 288, 291], "handler": [208, 293], "row": [208, 228, 291], "decim": 208, "get_tensors_info": 208, "workload_loc": 208, "about": [208, 212, 229, 261, 262, 277, 283, 287, 293, 294], "workload": [208, 215, 284], "get_weights_detail": 208, "weightdetail": 208, "dump_tabl": 208, "filepath": [208, 261], "file_typ": 208, "csv": 208, "dump_table_to_csv": 208, "get_number_of_socket": 208, "platform": [208, 224, 228, 272, 284, 285], "opentri": 208, "activation_min": 208, "activation_max": 208, "print_op_list": 208, "get_op_list": 208, "minmax_file_path": 208, "input_model_tensor": 208, "optimized_model_tensor": 208, "activation_min_max": 208, "calculate_ms": 208, "mse_metric_gap": 208, "fp32_tensor": 208, "dequantize_tensor": 208, "euclidean": 208, "distanc": 208, "check_key_exist": 208, "weightsdetail": 209, "input_tensor_data": 209, "optimized_tensor_data": 209, "weightsstatist": 209, "welcom": [211, 229, 230, 233, 295], "aim": [212, 223, 233, 270, 275, 283, 291, 293], "help": [212, 223, 228, 261, 275, 279, 288, 293], "familiar": 212, "concept": [212, 271, 290], "learn": [212, 214, 215, 218, 219, 222, 228, 233, 234, 235, 262, 267, 271, 272, 273, 277, 278, 280, 283, 284, 285, 291, 293], "conduct": [212, 231, 277, 293], "mainstream": [212, 233], "part": [212, 215, 228, 231, 273, 278, 283, 286, 291], "quick": [212, 225, 269, 278, 283], "understand": [212, 228, 285], "workflow": [212, 214, 233, 235, 236, 267, 270, 273, 278, 280], "broad": [212, 233, 272], "notebook": 212, "oneapi": [212, 215, 273, 284], "ai": [212, 214, 215, 233, 280, 284, 287], "analyt": [212, 273, 284], "toolkit": [212, 231, 273, 284], "mechan": [212, 283, 290], "tutori": [212, 231, 284], "comprehens": [212, 219, 222, 277], "migrat": [212, 216, 221, 228, 291], "previou": [212, 219, 228, 235, 236, 277, 283, 289, 291, 293, 294], "veri": [212, 218, 228, 277, 285, 288, 293], "introduct": 212, "dive": [212, 269], "bitwidth": 213, "whole": [213, 228, 236, 285, 294], "runtim": [213, 228, 230, 233, 234, 235, 237, 262, 266, 269, 272, 278, 280, 288, 293], "w8a8": [213, 217, 218, 228, 286, 288], "x86inductorquant": 213, "four": [213, 217, 223, 294], "neural_compressor": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 231, 233, 236, 259, 261, 262, 264, 265, 267, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293], "userfloatmodel": [213, 217], "exported_model": [213, 217], "prepared_model": [213, 216, 217, 218, 225, 270], "_inductor": [213, 217], "opt_model": [213, 217, 277], "set_loc": [213, 216, 217, 218, 219, 220], "releas": [213, 217, 233, 270, 273, 295], "breakthrough": [214, 280], "emerg": [214, 280, 291], "analysi": [214, 280, 283, 290], "chatbot": [214, 280, 284], "fuel": [214, 280], "nevertheless": [214, 280], "power": [214, 222, 277, 280, 284], "come": [214, 275, 280, 293], "challeng": [214, 218, 280, 286], "explos": [214, 280], "growth": [214, 215, 277, 278, 280, 283], "pose": [214, 280, 286], "obstacl": [214, 280], "practic": [214, 280], "preserv": [214, 218, 260, 280, 283, 288], "promot": [214, 218, 280], "microsoft": [214, 233, 234, 280], "msfp": [214, 280], "mxfp8": [214, 280], "e5m2": [214, 280], "e8m0": [214, 280], "e4m3": [214, 280], "mxfp6": [214, 280], "fp6": [214, 280], "e3m2": [214, 280], "e2m3": [214, 280], "mxfp4": [214, 280], "fp4": [214, 218, 280, 288], "e2m1": [214, 218, 280, 288], "mxint8": [214, 280], "At": [214, 230, 235, 280, 293], "demonstr": [214, 218, 223, 225, 233, 266, 280], "abil": [214, 234, 235, 269, 280, 291], "occupi": [214, 280], "incur": [214, 280], "energi": [214, 280], "cost": [214, 218, 228, 280, 285, 288], "silicon": [214, 280], "seamlessli": [214, 280, 283, 293], "offer": [214, 218, 222, 280], "meticul": [214, 280], "craft": [214, 280], "empow": [214, 280], "sacrif": [214, 280, 284], "shown": [214, 216, 228, 262, 276, 277, 280, 281, 282, 283, 286, 291, 293], "explor": [214, 234, 280], "focus": [214, 218, 222, 229, 234, 270, 280], "distinct": [214, 280], "friendli": [214, 228, 269, 277, 280, 284, 291], "adapt": [214, 229, 235, 280, 284], "fall": [214, 280], "consumpt": [214, 218, 228, 280, 291], "frac": [214, 228, 280, 291], "amax": [214, 280], "expon": [214, 280], "floor": [214, 280], "log2": [214, 280], "represent": [214, 218, 228, 229, 231, 260, 264, 280, 283, 285], "rmin": [214, 222, 228, 280, 285], "user_model": [214, 270, 280], "darvish": [214, 280], "rouhani": [214, 280], "bita": [214, 280], "et": [214, 218, 228, 260, 280, 288, 291], "al": [214, 218, 228, 233, 260, 273, 280, 288, 291], "push": [214, 218, 228, 230, 280, 283, 288, 291], "narrow": [214, 280], "inferenc": [214, 280], "cloud": [214, 230, 233, 280, 284], "33": [214, 275, 280, 294], "2020": [214, 280], "10271": [214, 280], "10281": [214, 280], "ocp": [214, 280], "preprint": [214, 218, 228, 260, 280, 283, 288, 291], "2310": [214, 280], "10537": [214, 280], "2023": [214, 218, 228, 233, 280, 283, 288, 291], "recent": [215, 277, 278], "significantli": [215, 218, 277, 278, 283, 293], "propos": [215, 218, 228, 234, 278, 288, 291], "googl": [215, 233, 261, 278, 284], "ieee": [215, 228, 278, 291], "wide": [215, 218, 228, 233, 266, 278, 283, 285], "sixteen": [215, 278], "bandwidth": [215, 218, 228, 277, 278, 288], "3rd": [215, 228, 278, 284, 285, 287], "gen": [215, 228, 275, 278, 284, 285, 287], "xeon": [215, 224, 228, 233, 273, 274, 275, 278, 284, 285, 287, 294], "scalabl": [215, 222, 228, 233, 273, 275, 278, 284, 285, 287], "codenam": [215, 275, 278], "cooper": [215, 273, 278, 284], "lake": [215, 273, 278, 284], "boost": [215, 233, 278, 283, 284], "purpos": [215, 216, 217, 218, 220, 269, 278, 285], "x86": [215, 278], "instruct": [215, 216, 228, 235, 236, 273, 278, 283, 284, 285, 291, 294], "avx512": [215, 228, 278, 285], "vcvtne2ps2bf16": [215, 278], "vcvtneps2bf16": [215, 278], "vdpbf16p": [215, 278], "product": [215, 228, 272, 278, 284, 285, 290, 293], "found": [215, 233, 261, 275, 278, 291, 293, 294], "publish": [215, 229, 274, 275, 278, 291], "4th": [215, 228, 275, 284, 285], "isa": 215, "vector": 215, "512": [215, 218], "avx": 215, "16": [215, 273, 288, 294], "754": 215, "complement": [215, 283], "latest": [215, 219, 233, 273, 284, 289], "deliv": [215, 218, 277, 284, 289], "flexibl": [215, 218, 222, 233, 283, 288], "amx": [215, 284], "improv": [215, 217, 218, 228, 230, 233, 260, 261, 277, 283, 284, 285, 287, 288, 293, 294], "ideal": 215, "recognit": [215, 265, 267, 283], "advantag": [215, 283, 293], "thei": [215, 229, 261, 269, 277, 281], "onednn": [215, 222, 278, 285], "engin": 215, "fbgemm": [215, 278, 285], "10004": [215, 218, 219, 224, 231, 234, 262, 264, 265, 269, 272, 278, 280, 282, 286, 288], "avx512_bf16": [215, 278], "11": [215, 228, 273, 276, 278, 291, 293, 294], "avx512_fp16": 215, "onednn_max_cpu_isa": 215, "avx512_core_amx_fp16": 215, "eval_acc_fn": [215, 220, 222], "acc": [215, 220, 275, 283, 294], "might": [215, 231, 261, 293], "custom_tune_config": [215, 220, 221, 222, 223], "build_torch_model": 215, "gigant": [216, 221, 291], "systemat": [216, 221, 291], "quantif": [216, 218, 221, 288, 291], "difficult": [216, 221, 223, 228, 234, 291], "difficulti": [216, 221, 228, 291], "mathemat": [216, 221, 228, 291], "stai": [216, 218, 219, 288, 291], "achiev": [216, 217, 218, 219, 220, 223, 225, 228, 267, 275, 277, 282, 283, 284, 285, 291, 293], "lambada": [216, 291], "openai": [216, 291], "sweet": [216, 291], "spot": [216, 291], "region": [216, 291], "paper": [216, 218, 228, 283, 288, 291], "bigscienc": [216, 275, 291, 294], "bloom": [216, 228, 233, 275, 283, 291, 294], "560m": [216, 291], "354": [216, 291], "3542": [216, 291], "1b7": [216, 275, 291], "4634": [216, 291], "4936": [216, 291], "3b": [216, 275, 291], "518": [216, 291], "5185": [216, 291], "7b1": [216, 291, 294], "5764": [216, 291, 294], "5977": [216, 291], "bloomz": [216, 291, 294], "3947": [216, 291], "3930": [216, 291], "4828": [216, 291], "4906": [216, 291], "5018": [216, 291], "4980": [216, 291], "5593": [216, 291, 294], "5552": [216, 291], "facebook": [216, 275, 291, 294], "opt": [216, 228, 233, 275, 283, 291, 293, 294], "125m": [216, 233, 270, 291], "379": [216, 291], "3757": [216, 291], "350m": [216, 291], "4516": [216, 291], "4533": [216, 291], "5789": [216, 291], "5742": [216, 291], "7b": [216, 225, 275, 291, 294], "6365": [216, 291], "6404": [216, 291], "6769": [216, 291, 294], "6804": [216, 291, 294], "13b": [216, 275, 291, 294], "6872": [216, 291], "6814": [216, 291], "30b": [216, 275, 291, 294], "7149": [216, 291], "7128": [216, 291], "66b": [216, 291], "7398": [216, 291], "7326": [216, 291], "llama": [216, 225, 233, 275, 283, 284, 286, 288, 291, 294], "7361": [216, 291, 294], "7357": [216, 291], "7627": [216, 291, 294], "7590": [216, 291], "7759": [216, 291, 294], "7840": [216, 291], "65b": [216, 291], "7908": [216, 291], "7957": [216, 291], "eleutherai": [216, 233, 270, 275, 291, 294], "gpt": [216, 233, 270, 275, 283, 291, 294], "j": [216, 228, 233, 275, 283, 291, 294], "6b": [216, 275, 291, 294], "6831": [216, 291, 294], "6821": [216, 228, 291], "mbzuai": [216, 291], "lamini": [216, 283, 291], "124m": [216, 291], "3804": [216, 291], "3887": [216, 291], "774m": [216, 291], "5048": [216, 291], "5057": [216, 291], "5b": [216, 291], "5443": [216, 291, 294], "5436": [216, 291], "mosaicml": [216, 291, 294], "mpt": [216, 283, 291, 294], "chat": [216, 225, 275, 291, 294], "655": [216, 291, 294], "6499": [216, 291], "stabilityai": [216, 291], "stablelm": [216, 291], "4172": [216, 291], "4149": [216, 291], "togethercomput": [216, 291], "redpajama": [216, 291], "incit": [216, 291], "6542": [216, 291], "6735": [216, 291], "6718": [216, 291], "6740": [216, 291, 294], "6569": [216, 291], "6621": [216, 291], "v0": [216, 275, 291], "7143": [216, 291], "7221": [216, 291], "6895": [216, 291], "6953": [216, 291, 294], "databrick": [216, 275, 291, 294], "dolli": [216, 275, 283, 291, 294], "6866": [216, 291, 294], "6297": [216, 291], "6247": [216, 291], "tiiuae": [216, 275, 291, 294], "falcon": [216, 233, 275, 283, 291, 294], "6437": [216, 291, 294], "6392": [216, 291], "asterisk": [216, 291], "gt": [216, 218, 291, 292], "retrain": [217, 264], "involv": 217, "philosophi": [217, 222, 285], "request": [217, 233, 285], "would": [217, 228, 230, 277, 283, 285, 291], "appropri": [217, 223, 225, 228, 229, 260, 291], "crucial": [217, 283], "occur": 217, "jit": [217, 291], "effect": [217, 218, 234, 283, 284], "intel_extension_for_pytorch": 217, "begin": [217, 261, 262, 264, 277, 283, 293], "program": [217, 233, 265, 274], "fc1": 217, "dynamo": [217, 219], "qd": 217, "final": [217, 228, 235, 277, 281, 283, 285, 289, 293], "As": [218, 228, 231, 235, 262, 276, 277, 283, 288, 293], "becom": [218, 228, 234, 267, 283, 288], "preval": [218, 228, 288], "grow": [218, 228, 288], "demand": [218, 228, 288], "modern": [218, 228, 288], "trade": [218, 228, 288], "bottleneck": [218, 228, 288], "deploi": [218, 223, 228, 230, 277, 288, 293], "roughli": [218, 228, 288], "speak": [218, 228, 288], "count": [218, 228, 288], "p": [218, 225, 228, 288], "theoret": [218, 228, 285, 288], "capac": [218, 228, 288, 290], "flop": [218, 228, 288], "forward": [218, 228, 235, 277, 283, 285, 288, 291], "f": [218, 228, 261, 265, 285, 288, 291], "famou": [218, 228, 288], "scenario": [218, 219, 228, 234, 259, 277, 283, 288], "approx": [218, 228, 288], "bmm": [218, 228, 288], "past": [218, 228, 234, 288], "howev": [218, 225, 228, 283, 288, 291], "100x": [218, 228, 288], "besid": [218, 228, 234, 288], "mention": [218, 228, 283, 288], "reason": [218, 228, 229, 235, 262, 288, 293], "caus": [218, 228, 235, 262, 283, 288], "straightforward": [218, 222, 228, 283, 288, 291], "think": [218, 288], "intuit": [218, 228, 288, 291], "uniformli": [218, 288], "qlora": [218, 228, 288], "uniform": [218, 260, 288], "nf4": [218, 288], "prove": [218, 228, 260, 288, 291], "shot": [218, 222, 272, 277, 283, 284, 288], "highli": [218, 284, 288], "invers": [218, 288], "restor": [218, 288], "tailor": [218, 225], "often": [218, 262, 282, 283], "outperform": 218, "signround": 218, "protect": [218, 288], "salient": [218, 283, 288], "greatli": [218, 286, 288], "big": [218, 288], "trainabl": [218, 233, 284, 288], "inspir": [218, 288], "rather": [218, 271, 288], "addition": [218, 236, 265, 283, 293], "incorpor": [218, 235, 236, 264, 283, 293], "l": [218, 224, 260, 293], "norm": 218, "hyper": 218, "laplacian": 218, "heavi": [218, 264], "tail": 218, "nuanc": 218, "weightonlyqu": 218, "c_": [218, 288], "along": [218, 273, 283, 288], "normalfloat": [218, 288], "bnb": [218, 288], "lm": [218, 283], "head": [218, 283], "emb": 218, "rtn_arg": [218, 286, 288], "comment": [218, 224, 229, 235, 276, 277, 288, 292], "state_dict": [218, 265, 288], "gptq_arg": [218, 288], "diagon": [218, 288], "rearrang": [218, 283, 288], "stabil": [218, 288], "c_out": 218, "mitig": [218, 288], "actord": [218, 288], "autoround_arg": 218, "rate": [218, 228, 277, 283, 285], "n_sampl": 218, "n_block": [218, 288], "gap": [218, 279], "awq_arg": [218, 288], "clip": [218, 228, 288, 291], "teq_arg": 218, "train_fn": 218, "hqq_arg": 218, "lm_head": [218, 283, 288], "lm_head_config": 218, "quantit": 218, "weightonlylinear": [218, 288], "storag": [218, 228, 276, 288, 291], "date": [218, 288], "saved_result": [218, 219, 279, 288], "orig_model": 218, "yourmodel": 218, "loaded_model": 218, "original_model": 218, "card": [218, 283], "ram": [218, 225], "impract": 218, "lwq": 218, "diagram": [218, 235, 236, 293], "illustr": [218, 235, 236, 264, 293], "figur": [218, 286], "color": [218, 283, 286], "grei": [218, 286], "blue": [218, 286], "rectangl": [218, 286], "load_empty_model": [218, 225, 286], "model_state_dict_path": [218, 225], "state": [218, 225, 236, 283], "float_model": [218, 225, 233], "quantized_model": [218, 225, 233, 270], "overhead": [218, 291], "xiao": [218, 228, 288, 291], "guangxuan": [218, 228, 288, 291], "2211": [218, 228, 288, 291], "10438": [218, 228, 288, 291], "wei": [218, 228, 288, 291], "xiui": [218, 228, 288, 291], "suppress": [218, 228, 288, 291], "2209": [218, 228, 288, 291, 294], "13325": [218, 228, 288, 291], "lin": [218, 228, 288], "ji": [218, 228, 288], "frantar": [218, 228, 283, 288], "elia": [218, 228, 288], "cheng": [218, 228], "wenhua": [218, 228], "badri": 218, "hicham": 218, "shaji": 218, "appu": 218, "onlin": [218, 229, 290], "dettmer": [218, 228, 288], "tim": [218, 228, 288], "finetun": [218, 228, 283, 288], "2305": [218, 228, 288], "14314": [218, 228, 288], "grain": [219, 283, 284, 293], "varieti": [219, 223, 266, 293], "classic": [219, 293], "research": [219, 233, 274, 291, 294], "simul": [219, 236], "emul": [219, 228, 277, 285], "term": [219, 222, 230, 260, 274, 276, 281, 282, 293], "eas": [219, 222, 273, 284], "commit": [219, 222, 229, 230], "extend": [219, 235, 236, 270], "hand": [219, 222], "reus": 219, "conveni": [219, 277], "discuss": [219, 233], "far": 219, "still": [219, 221, 228, 260, 277, 284, 285, 287], "reli": [219, 277, 291], "plan": [219, 272], "arbitrari": [219, 277, 282], "deploy": [219, 263, 284, 286, 291], "One": [219, 236, 261, 265, 272, 283, 284, 293], "orig_sav": 219, "suggest": [219, 231, 261, 290], "statu": [219, 224, 229, 262, 280, 281, 283], "trane": 219, "torchdynamo": 219, "microsc": 219, "pytorchdynamo": 219, "logic": 219, "torchimport": 219, "operator_name_or_list": 219, "demo": [219, 277], "mlp": [219, 283], "conv1d": [219, 236], "fundament": [220, 221, 260, 277], "fulli": [220, 277, 285, 291], "respons": [220, 285], "val_dataset": [220, 277, 285], "val_dataload": [220, 277, 285], "mydataload": [220, 222, 223], "qmodel": [220, 222], "good": [220, 229, 285, 293], "from_dict": 220, "conv2d_config": 220, "output_graph_def": 221, "sq_config": 221, "static_config": 221, "look": [221, 234, 236, 269, 276, 291], "eval_fn_wrapp": 221, "consider": [221, 291], "amount": [221, 291], "experi": [222, 229, 290, 291, 293], "rule": [222, 283], "partial": [222, 283, 285], "particularli": 222, "critic": [222, 229], "supplement": 222, "baseline_model": [222, 223], "asymmetr": [222, 236, 285, 288, 293], "rmax": [222, 228, 285], "mp": 222, "unseen": [222, 228, 285], "zeropoint": [222, 228, 285], "unlik": 222, "tradit": [222, 283], "signific": [222, 228, 283, 284, 286, 291], "refin": [222, 271, 283], "quickli": [223, 275, 293], "despit": 223, "consum": [223, 262], "certain": [223, 290], "predefin": 223, "primari": [223, 260, 293], "travers": [223, 235, 236, 288, 293], "incbench": 224, "launch": [224, 278], "numa": 224, "therefor": [224, 228, 231, 277, 283, 285, 286, 289, 291], "linux": [224, 225, 259, 268], "num_inst": 224, "num_cores_per_inst": 224, "num_cores_on_numa": 224, "visibl": 224, "cross_memori": 224, "alloc": 224, "insuffici": 224, "num_i": 224, "num_c": 224, "24": [224, 283, 293, 294], "47": [224, 275, 294], "throughput_pattern": 224, "hroughput": 224, "za": 224, "z": [224, 228, 260, 261, 291], "latency_pattern": 224, "atenc": 224, "3f": 224, "sec": [224, 294], "lightweight": [225, 283], "enhanc": [225, 260, 283, 284, 287], "tip": 225, "omp_num_thread": 225, "hybrid": 225, "taskset": 225, "finish": 225, "ten": 225, "gb": 225, "hf": [225, 275, 291, 294], "invent": [228, 285], "speed": [228, 260, 277, 283, 284, 285, 293], "int4": [228, 233, 275, 285, 294], "mainli": [228, 233, 270, 277, 283, 285], "miss": [228, 283, 285], "On": [228, 285, 294], "4x": [228, 285], "speedup": [228, 266, 272, 285], "255": [228, 285, 291], "sometim": [228, 231, 285], "overflow": [228, 285], "issu": [228, 229, 230, 232, 233, 273, 285], "due": [228, 236, 267, 283, 285, 291], "vnni": [228, 266, 272, 285], "solv": [228, 230, 285, 289], "coarsest": [228, 291], "finer": [228, 291, 293], "matric": [228, 291], "similarli": [228, 291], "finest": [228, 291], "adopt": [228, 230, 283, 284, 291], "bring": [228, 291], "why": [228, 291], "suppos": [228, 291], "6839": [228, 291], "4741": [228, 291], "7451": [228, 291], "9301": [228, 291], "1742": [228, 291], "6835": [228, 291], "formula": [228, 283, 291], "num_bit": [228, 291], "q_min": [228, 291], "q_max": [228, 291], "zp": [228, 291], "q_x": [228, 291], "clamp_": [228, 291], "round_": [228, 291], "w_q": [228, 291], "00296431384049356": [228, 291], "59": [228, 275, 291, 294], "172": [228, 291, 294], "192": [228, 291], "w_dq": [228, 291], "2220": [228, 291], "1510": [228, 291], "2420": [228, 291], "2570": [228, 291], "0500": [228, 291], "1890": [228, 291], "mseloss": [228, 291], "1983354538679123": [228, 291], "6848": [228, 291], "4743": [228, 291], "7440": [228, 291], "9308": [228, 291], "1749": [228, 291], "385297635664756e": [228, 291], "07": [228, 233, 275, 291, 294], "affect": [228, 291], "quantize_per_channel": [228, 291], "x_tmp": [228, 291], "detach": [228, 291], "keepdim": [228, 291], "divid": [228, 262, 291, 293], "dequantize_per_channel": [228, 291], "0029": [228, 291, 294], "0036": [228, 291], "162": [228, 291, 294], "48": [228, 291, 294], "72": [228, 275, 291, 294], "93": [228, 275, 291, 294], "207": [228, 291, 294], "139": [228, 291, 294], "6837": [228, 291], "4734": [228, 291], "1751": [228, 291], "637690492221736e": [228, 291], "6376e": [228, 291], "3852e": [228, 291], "cdot": [228, 291], "quantize_per_tensor_absmax": [228, 291], "n_bit": [228, 291], "div_": [228, 291], "0806": [228, 291], "7589": [228, 291], "6038": [228, 291], "3815": [228, 291], "5040": [228, 291], "7174": [228, 291], "5444": [228, 291], "5826": [228, 291], "7772": [228, 291], "5555": [228, 291], "3740": [228, 291], "3253": [228, 291], "0698": [228, 291], "1381": [228, 291], "5972": [228, 291, 294], "0086": [228, 291], "0737": [228, 291], "8298": [228, 291], "6883": [228, 291], "2991": [228, 291], "1601": [228, 291], "6506": [228, 291], "8246": [228, 291], "3924": [228, 291], "3845": [228, 291], "8768": [228, 291], "w_scale": [228, 291], "x_q": [228, 291], "x_scale": [228, 291], "13": [228, 268, 273, 291, 294], "84": [228, 275, 291, 294], "120": [228, 291], "0059755356051027775": [228, 291], "83": [228, 290, 291, 294], "89": [228, 275, 291, 294], "119": [228, 291], "85": [228, 290, 291, 294], "57": [228, 275, 291, 294], "91": [228, 288, 291, 294], "006533813662827015": [228, 291], "y_q": [228, 291], "17509": [228, 291], "7608": [228, 291], "4055": [228, 291], "16599": [228, 291], "21020": [228, 291], "10016": [228, 291], "9860": [228, 291], "22444": [228, 291], "y_dq": [228, 291], "6836": [228, 291], "2970": [228, 291], "1583": [228, 291], "6481": [228, 291], "8207": [228, 291], "3911": [228, 291], "3850": [228, 291], "8763": [228, 291], "major": [228, 271, 285, 291], "peopl": [228, 285], "though": [228, 291], "simplic": [228, 291], "1x2": [228, 291], "2x2": [228, 291], "obtain": [228, 231, 235, 283, 290, 291, 293], "middl": [228, 291], "denot": [228, 291], "fp1": [228, 291], "fp2": [228, 291], "subsect": [228, 291], "even": [228, 286, 288, 291], "lot": [228, 231, 291], "briefli": [228, 277, 291], "similar": [228, 277, 291, 293], "idea": [228, 233, 283, 291, 293], "attach": [228, 277, 291], "x1": [228, 291, 293], "x2": [228, 291, 293], "excel": [228, 288], "mimic": [228, 285], "done": [228, 231, 264, 283, 285], "adjust": [228, 285, 291], "fact": [228, 285], "ultim": [228, 285], "pain": [228, 285], "brought": [228, 279, 285], "lossi": [228, 285], "respect": [228, 229, 269, 283, 291], "chart": [228, 285, 290], "yvinec": [228, 291], "edouard": [228, 291], "proceed": [228, 291], "cvf": [228, 291], "winter": [228, 291], "confer": [228, 283, 291], "vision": [228, 233, 267, 291], "interest": [229, 233], "foster": 229, "particip": 229, "commun": 229, "harass": 229, "everyon": 229, "regardless": 229, "ag": 229, "bodi": 229, "ethnic": 229, "characterist": 229, "gender": 229, "educ": 229, "socio": 229, "econom": 229, "appear": 229, "race": 229, "religion": 229, "sexual": 229, "orient": 229, "behavior": [229, 234, 235, 236, 269, 279, 288, 293], "contribut": [229, 233, 283], "inclus": 229, "Being": 229, "viewpoint": 229, "gracefulli": 229, "empathi": 229, "toward": 229, "member": [229, 234], "unaccept": 229, "imageri": 229, "unwelcom": 229, "troll": 229, "insult": 229, "derogatori": 229, "polit": 229, "attack": 229, "public": 229, "privat": 229, "electron": 229, "explicit": 229, "permiss": 229, "inappropri": 229, "profession": 229, "clarifi": 229, "fair": 229, "action": 229, "edit": 229, "reject": 229, "wiki": 229, "ban": 229, "temporarili": 229, "perman": [229, 283], "deem": 229, "threaten": 229, "offens": 229, "harm": 229, "mail": 229, "social": [229, 284], "media": [229, 284], "account": [229, 290, 293], "appoint": 229, "event": 229, "abus": 229, "report": [229, 230, 233, 290], "contact": [229, 289, 290], "complaint": 229, "review": [229, 230, 233, 284], "investig": [229, 261], "necessari": [229, 235, 279, 283, 290, 293], "circumst": 229, "oblig": 229, "confidenti": 229, "regard": [229, 287], "incid": 229, "faith": 229, "face": [229, 233, 240, 284, 289, 294], "repercuss": 229, "leadership": 229, "faq": [229, 233], "page": [229, 230], "send": [230, 235], "view": [230, 233, 266, 289], "star": 230, "repositori": 230, "button": [230, 272], "fork": 230, "clone": [230, 273], "pc": 230, "git": [230, 268, 273], "modif": [230, 234, 269], "checkout": 230, "my": 230, "cover": [230, 267, 271, 284], "certif": 230, "agre": 230, "pr": [230, 262, 276, 289], "least": [230, 277, 283, 293], "approv": 230, "licens": 230, "azur": [230, 233, 284], "devop": 230, "ci": 230, "e16": 230, "v5": 230, "scan": [230, 233], "pylint": 230, "bandit": 230, "copyright": [230, 274], "docstyl": 230, "spellcheck": 230, "dco": 230, "pytest": 230, "No": [230, 261, 268, 277, 284], "failur": [230, 231], "fault": 230, "coverag": 230, "submit": [230, 284], "bug": [230, 233], "intend": 230, "safe": 230, "collabor": [230, 233], "adher": 230, "tracer": 231, "resolv": [231, 232], "floatfunct": 231, "cat": [231, 267], "eval": [231, 261, 262, 285], "fail": [231, 262, 267], "imper": 231, "successfulli": [231, 233, 265, 284], "traceabl": 231, "proxi": 231, "prototyp": 231, "html": [231, 233, 235, 260, 265, 272, 273, 285], "highlight": 231, "untrac": 231, "ssd": [231, 267, 294], "resnet34": [231, 294], "r34": 231, "bboxes_labels_scor": 231, "prob": 231, "45": [231, 275, 294], "max_output": 231, "zip": 231, "dbox": 231, "dlabel": 231, "dscore": 231, "decode_singl": 231, "guidelin": [232, 233], "particular": [233, 283, 288], "typic": [233, 264, 266, 283, 294], "gaudi": [233, 273], "ultra": [233, 273, 294], "flex": [233, 273], "amd": [233, 273, 294], "arm": [233, 272, 273, 294], "nvidia": [233, 260, 272, 273, 294], "llama2": 233, "stabl": [233, 283, 284], "diffus": [233, 284], "hub": [233, 266], "hug": [233, 284], "marketplac": [233, 284], "amazon": 233, "web": 233, "servic": [233, 284], "softwar": [233, 274, 283, 284, 289], "alibaba": [233, 284], "tencent": [233, 284], "taco": [233, 284], "oliv": [233, 284], "ecosystem": [233, 284], "lightn": 233, "2024": [233, 294], "usabl": 233, "pip": [233, 265, 268, 270, 273, 289], "whl": [233, 273], "habana": [233, 273], "en": [233, 273], "bare": [233, 268, 273], "metal": [233, 268, 273], "fresh": [233, 273], "o": [233, 261, 273], "click": [233, 272, 273, 284], "34": [233, 275, 294], "packag": [233, 234, 261, 268, 273, 284, 289, 293], "gaudi2": [233, 273], "stack": 233, "setup": [233, 269, 273, 283], "interact": [233, 290], "shell": 233, "habana_visible_devic": 233, "ompi_mca_btl_vader_single_copy_mechan": 233, "cap": 233, "sys_nic": 233, "host": [233, 265], "ipc": 233, "vault": 233, "ubuntu22": 233, "04": [233, 273, 294], "habanalab": 233, "optimum": [233, 288], "upgrad": [233, 277], "auto_round": 233, "automodel": 233, "autotoken": [233, 277], "get_dataload": 233, "neo": [233, 270, 294], "trust_remote_cod": 233, "woq_conf": 233, "resnet18": [233, 278, 294], "static_quant_conf": 233, "overview": [233, 270, 293], "june": [233, 284], "qwen2": [233, 284], "apr": [233, 284], "emnlp": [233, 284], "sep": [233, 284], "legal": [233, 295], "secur": [233, 284, 295], "ask": [233, 273], "email": 233, "discord": 233, "join": 233, "technic": 233, "wechat": [233, 284], "img": 233, "bridg": [234, 235, 272], "vanilla": [234, 235, 272], "adaptor_registri": 234, "abcadaptor": 234, "__init__": [234, 261, 262, 276, 293], "tune_cfg": [234, 236, 293], "query_fw_cap": [234, 236], "query_fused_pattern": 234, "he": 234, "describ": [234, 236, 261, 269], "hidden": 234, "mainten": 234, "clear": [234, 269, 276, 277], "fragment": 234, "scheme": [234, 235, 236, 262, 269, 288, 293], "semant": [234, 269], "querybackendcap": [234, 235], "mla": [234, 278, 285], "qtype": 234, "onnxrt_qlinearopsadaptor": 234, "inspect_tensor": 234, "op_list": 234, "iteration_list": 234, "inspect_typ": 234, "save_to_disk": 234, "quantization_cfg": 234, "set_tensor": 234, "tensor_dict": 234, "fw": 235, "outlin": [235, 236], "accommod": [235, 236], "sequencediagram": [235, 236], "autonumb": [235, 236], "query_framework_cap": 235, "opwis": 235, "optypewis": 235, "\u2776": 235, "\u2777": 235, "\u2778": 235, "\u2779": 235, "\u277a": 235, "\u277b": 235, "\u277c": 235, "These": [235, 272], "chapter": 235, "node_op": 235, "confirm": 235, "chosen": [235, 260], "int8_conv_config": 235, "optype_wise_": 235, "sym": [235, 236, 269, 285, 288], "tuning_cfg_to_fw": 235, "Its": [235, 260, 283], "quantize_config": 235, "dispatch": [235, 272], "is_perchannel": 235, "is_asymmetr": 235, "weight_bit": 235, "convert_bf16": 235, "subsequ": 235, "somewhat": 235, "distort": 235, "line": [235, 261, 265, 272], "until": [235, 293], "let": [236, 269, 283], "overal": [236, 288], "drive": 236, "section": [236, 261, 264, 283, 288], "uint4": 236, "asym": [236, 269, 288], "independ": 236, "kullback": 236, "leibler": 236, "pytorch_cpu": 236, "1_11_capabl": 236, "cap_s8_1_11": 236, "cap_s8_1_11_conv1d": 236, "per_channel_symmetr": 236, "per_tensor_symmetr": 236, "nativ": 236, "with_arg": 236, "qscheme": 236, "torch_dtyp": 236, "quant_min": 236, "quant_max": 236, "x86_64": 259, "aarch64": 259, "sure": 259, "benefici": 260, "\u03b2": 260, "\u03b1": 260, "lie": 260, "simplest": 260, "focu": [260, 293], "essenti": [260, 268], "remaind": 260, "resolut": 260, "extrem": 260, "retain": 260, "noteworthi": 260, "vanhouck": 260, "vincent": 260, "andrew": 260, "senior": 260, "mark": 260, "mao": 260, "2011": 260, "szymon": 260, "migacz": 260, "tensorrt": [260, 278, 285], "2017": 260, "mckinstri": 260, "jeffrei": 260, "discov": 260, "embed": [260, 283], "1809": 260, "04191": 260, "2018": 260, "mostli": 261, "conflict": [261, 268], "overli": 261, "argu": 261, "decis": [261, 276], "pep": 261, "tile": 261, "sub_modul": 261, "namespac": 261, "pollut": 261, "subprocess": [261, 262], "popen": 261, "statement": 261, "pipe": 261, "long_str": 261, "extran": 261, "__version__": 261, "pager": 261, "getenv": 261, "readabl": 261, "seem": 261, "worth": [261, 283], "4f": 261, "65421": 261, "sentenc": 261, "eval_result": 261, "declar": 261, "typealia": 261, "_lossandgradi": 261, "complextfmap": 261, "xx_func": 261, "ordereddict": 261, "pylanc": 261, "cheeseshopaddress": 261, "chees": 261, "shop": 261, "outofcheeseerror": 261, "crbug": 261, "192795": 261, "cpufreq": 261, "facilit": 261, "__all__": 261, "know": [261, 265, 289], "snippet": [261, 272], "rtn_algo_entri": 261, "vscode": 261, "settings_recommend": 261, "encount": [262, 268], "previous": 262, "lack": [262, 268], "faster": [262, 263, 267, 284, 293, 294], "treat": 262, "Of": 262, "evenli": 262, "discard": 262, "throw": 262, "awai": 262, "draw": [262, 290, 293], "pin": 262, "reshuffl": 262, "manner": [262, 279], "newdataload": 262, "input_data": 262, "customis": [262, 276], "aid": 263, "infrastructur": 263, "promis": [264, 277, 283], "huge": [264, 283, 286], "light": 264, "booster": 264, "degrad": [264, 283, 293], "novel": 264, "10006": 264, "student_output": 264, "student_loss": 264, "training_func_for_nc": 264, "launcher": 264, "experiment": [264, 265, 267, 277, 283, 285, 289, 292], "comb": 264, "distillation_criterion": [264, 277, 282], "q_conf": 264, "horovod": 265, "builtin": 265, "enable_eager_execut": 265, "yaml_file_path": 265, "pre_process": 265, "simpli": [265, 279], "evaluation_result": 265, "evaluation_time_cost": 265, "partit": [265, 283], "distributedsampl": 265, "train_sampl": 265, "train_dataset": [265, 285], "num_replica": 265, "rank": 265, "train_load": 265, "train_kwarg": 265, "adadelta": 265, "distributedoptim": 265, "named_paramet": 265, "broadcast_paramet": 265, "root_rank": 265, "broadcast_optimizer_st": 265, "set_epoch": 265, "batch_idx": 265, "zero_grad": [265, 277, 283], "nll_loss": 265, "log_interv": 265, "0f": 265, "tloss": 265, "6f": 265, "dry_run": 265, "test_func": 265, "num_of_process": 265, "002": 265, "ssh": 265, "prompt": 265, "readm": 265, "exactli": 265, "cd": [265, 273], "resnet50_v1": [265, 277], "imagerecord": 265, "resizecropimagenet": [265, 292], "realiz": [265, 281, 287, 290], "tow": 265, "node1": 265, "node2": 265, "TO": 265, "your_node1_nam": 265, "your_node2_nam": 265, "resnet50_fp32_pretrained_model": 265, "nc_resnet50_v1": 265, "resnet": [265, 294], "10k": 266, "2x": [266, 272], "exchang": 267, "hope": 267, "inc_model": [267, 279], "fp32_onnx_config": 267, "verifi": [267, 275], "vgg16": [267, 294], "mobilenet": [267, 290, 294], "rcnn": 267, "torchscript": [267, 286, 291], "unsupport": [267, 277, 283], "add_relu": 267, "conv1d_relu": 267, "conv2d_relu": 267, "group_norm": 267, "hardswish": 267, "instance_norm": 267, "layer_norm": 267, "leaky_relu": 267, "sigmoid": 267, "toolchain": [268, 284], "sudo": 268, "apt": [268, 273], "python3": 268, "dev": 268, "distutil": 268, "libgl1": 268, "mesa": 268, "glx": 268, "libglib2": 268, "wget": 268, "ln": 268, "sf": 268, "usr": 268, "incompat": 268, "88": [268, 290, 294], "80": [268, 275, 286, 294], "pyobject": 268, "reinstal": 268, "importerror": 268, "libgl": 268, "yum": [268, 273], "opencv": 268, "conda": [268, 289], "pend": 268, "sqlalchemi": 268, "27": [268, 275, 294], "alemb": 268, "forg": 268, "3x": 268, "docker": 268, "tbb": 268, "requirements_pt": [268, 273], "ld_library_path": 268, "lib": 268, "unless": 269, "syntax": 269, "go": [269, 288, 292], "up1": 269, "up2": 269, "valid_mixed_precis": 269, "addn": 269, "grappler_optim": 269, "constfold": 269, "arithmet": 269, "debug_stripp": 269, "automodelforcausallm": 270, "especi": 270, "benefit": [270, 282], "custom_metr": 271, "420": 272, "geomean": 272, "coder": [272, 284], "gui": [272, 283], "upload": 272, "qintegerop": [272, 285], "lock": [272, 282, 283], "momentum": [272, 277, 283], "sensit": [272, 283], "lasso": [272, 283], "satisfi": 273, "success": 273, "frequent": 273, "pypi": 273, "requirements_tf": 273, "consolid": 273, "streamlin": [273, 284], "scienc": 273, "websit": 273, "anaconda": 273, "suit": 273, "skylak": 273, "cascad": 273, "ic": [273, 284], "sapphir": [273, 275], "rapid": [273, 275], "hbm": 273, "meteor": 273, "arctic": 273, "sound": 273, "pont": 273, "vecchio": 273, "cento": [273, 294], "ubuntu": 273, "22": [273, 275, 294], "maco": 273, "ventura": 273, "fortensorflow": 273, "forpytorch": 273, "18": [273, 275, 284, 294], "17": 273, "apach": 274, "subject": 274, "accompani": [274, 293], "wish": 274, "bibtex": 274, "misc": 274, "author": 274, "feng": 274, "tian": 274, "hanwen": 274, "haihao": [274, 283], "shen": [274, 283], "suyu": 274, "chen": 274, "howpublish": 274, "year": 274, "logo": 274, "atom": 274, "phi": 274, "pentium": 274, "vtune": 274, "corpor": 274, "subsidiari": 274, "brand": 274, "claim": 274, "70b": [275, 294], "40b": 275, "baichuan": 275, "baichuan2": 275, "12b": 275, "neox": [275, 294], "20b": [275, 294], "mistralai": 275, "mistral": 275, "thudm": 275, "chatglm2": 275, "chatglm3": 275, "wip": 275, "soon": 275, "lambada_openai": [275, 294], "67": [275, 294], "69": [275, 294], "0222": 275, "55": [275, 294], "9997": 275, "68": [275, 292, 294], "12": [275, 294], "0081": 275, "66": [275, 294], "9905": 275, "71": [275, 294], "51": [275, 294], "75": [275, 283, 294], "0568": 275, "0008": [275, 294], "70": [275, 294], "81": [275, 294], "9902": [275, 294], "06": [275, 294], "0058": [275, 294], "61": [275, 294], "9991": 275, "0034": 275, "46": [275, 294], "0356": 275, "9972": 275, "0121": 275, "35": [275, 283, 294], "63": [275, 283, 294], "92": [275, 294], "9933": [275, 294], "31": [275, 294], "9994": [275, 294], "0006": [275, 294], "9958": [275, 294], "29": [275, 294], "74": [275, 294], "9918": 275, "9964": 275, "58": [275, 294], "0040": 275, "26": [275, 294], "0064": 275, "49": [275, 294], "78": [275, 292, 294], "0041": 275, "53": [275, 294], "0014": 275, "0043": 275, "76": [275, 294], "77": [275, 294], "25": [275, 283, 294], "9932": [275, 294], "0016": 275, "0116": 275, "60": [275, 294], "9978": [275, 294], "79": [275, 294], "9937": [275, 294], "62": [275, 294], "09": [275, 294], "0057": 275, "0005": 275, "73": [275, 294], "9936": 275, "9989": 275, "9987": 275, "0046": [275, 294], "9979": [275, 294], "23": [275, 294], "52": [275, 294], "86": [275, 294], "9930": 275, "00": [275, 294], "9957": [275, 294], "9938": 275, "9942": [275, 294], "03": [275, 294], "9990": 275, "9965": 275, "9995": 275, "82": [275, 294], "0078": 275, "0262": 275, "0052": 275, "9910": 275, "popularli": 276, "industri": [276, 284], "label_map": 276, "ap": 276, "curv": 276, "turn": [276, 286], "target_boxes_num": 276, "str_label": 276, "int_label": 276, "inturn": 276, "cocomap": 276, "vocmap": 276, "categor": 276, "multiclass": 276, "multilabel": 276, "newmetr": 276, "reset": 276, "reflect": [276, 292], "new_metr": 276, "kind": 277, "resort": 277, "automodelforsequenceclassif": 277, "worker": [277, 285], "ping_memori": [277, 285], "formul": 277, "templat": [277, 283], "effort": 277, "written": 277, "onnxrt_integ": 277, "onnxrt_qlinear": 277, "image_tensor": 277, "post_training_static_qu": [277, 293], "post_training_dynamic_qu": [277, 293], "1000": 277, "2000": 277, "sampling_s": 277, "model_wis": 277, "op_dict": 277, "op_wis": 277, "sigopt_api_token": [277, 290, 293], "sigopt_project_id": [277, 290, 293], "sigopt_experiment_nam": [277, 290, 293], "600": [277, 294], "training_arg": 277, "trainer": 277, "compact": [277, 283], "maxim": [277, 283, 293], "pruning_func": 277, "num_train_epoch": [277, 283], "train_dataload": [277, 283, 285], "n_gpu": 277, "gradient_accumulation_step": 277, "clip_grad_norm_": 277, "max_grad_norm": 277, "start_epoch": 277, "end_epoch": 277, "97": [277, 294], "pruner": [277, 283], "newli": [277, 283], "on_after_optimizer_step": [277, 283], "layer3": [277, 283], "layer2": [277, 283, 285], "1x1": [277, 283], "expens": [277, 293], "mobil": [277, 294], "knowledgedistillationloss": 277, "weight_decai": 277, "0004": 277, "nesterov": 277, "randomresizedcrop": [277, 292], "totensor": [277, 292], "485": 277, "456": 277, "406": [277, 294], "nepoch": 277, "cnt": 277, "loss_sum": 277, "iter_bar": 277, "tqdm": 277, "desc": 277, "teacher_logit": 277, "pytorchknowledgedistillationloss": 277, "unnecessari": 277, "train_fun": 277, "training_func": 277, "output_model": 277, "exit_polici": 277, "determinist": 277, "meaning": [277, 282], "prune_conf": 277, "quantization_aware_training_conf": 277, "aforement": 277, "inset": 277, "p_conf": [277, 282], "ssd_mobilenet_v1": 277, "benchmarkconf": 277, "cpuexecutionprovid": [278, 285], "tensorrtexecutionprovid": [278, 285], "cudaexecutionprovid": [278, 285], "cuda": [278, 283, 285], "dnnlexecutionprovid": [278, 285], "plu": 278, "helloworld": [278, 292], "persist": 279, "tf1": 279, "tf2": 279, "h5": 279, "hybridblock": 279, "0000": 279, "input_model": 279, "10005": [280, 286], "multi_object": 281, "simultan": 282, "gain": [282, 284], "possibl": [282, 283, 286, 287, 293], "instanti": 282, "neuron": 283, "art": 283, "grown": 283, "unpreced": 283, "increasingli": 283, "stand": [283, 293], "delet": 283, "consecut": 283, "commonli": 283, "shrink": 283, "influenc": 283, "contextu": 283, "vari": [283, 291, 294], "scene": 283, "haven": 283, "lowest": [283, 293], "interv": 283, "gradual": 283, "emsp": 283, "immedi": 283, "pure": 283, "downstream": 283, "simplifi": [283, 284], "procedur": [283, 293], "prone": 283, "co": 283, "discourag": 283, "connect": [283, 290], "penal": 283, "parameter": 283, "sparsegpt": 283, "perceptron": 283, "valuabl": 283, "basi": 283, "mha": 283, "billion": 283, "tend": 283, "exemplifi": 283, "250": 283, "fortieth": 283, "pruner2": 283, "prepare_prun": 283, "retrain_fre": 283, "300": 283, "few": [283, 284, 291, 293], "yourself": 283, "uncertain": 283, "parse_auto_slim_config": 283, "auto_config": 283, "ffn2_sparsiti": 283, "mha_spars": 283, "itself": 283, "quit": 283, "carri": 283, "pruning_pattern": 283, "pruning_start": 283, "pruning_end": 283, "sparse_gpt": 283, "embed_out": 283, "readi": 283, "hesit": 283, "causal": 283, "clm": 283, "sst": [283, 294], "v": [283, 293], "flan": 283, "t5": 283, "english": 283, "romanian": 283, "404": [283, 294], "381": 283, "yolov5": 283, "2x1": [283, 294], "801": 283, "7895": 283, "reduct": [283, 286], "xgboost": 283, "namhoon": 283, "lee": 283, "thalaiyasingam": 283, "ajanthan": 283, "philip": 283, "torr": 283, "2019": 283, "zafrir": 283, "ofir": 283, "ariel": 283, "larei": 283, "boudoukh": 283, "mosh": 283, "wasserblat": 283, "2111": 283, "05754": 283, "2021": 283, "kwon": 283, "kim": 283, "mahonei": 283, "hassoun": 283, "keutzer": 283, "gholami": 283, "pp": 283, "24101": 283, "24116": 283, "alistarh": 283, "massiv": 283, "2301": 283, "00774": 283, "oct": 284, "medium": 284, "diagnosi": 284, "insight": [284, 289, 293], "aug": 284, "juli": 284, "onnxcommunitymeetup2023": 284, "msft": 284, "autom": [284, 291], "netflix": 284, "mlperf": [284, 294], "5x": 284, "\u96c6\u6210\u82f1\u7279\u5c14": 284, "\u817e\u8baf\u4e91taco": 284, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 284, "mar": 284, "heterogen": 284, "jan": 284, "busi": 284, "innov": 284, "journei": 284, "dec": 284, "mleffici": 284, "deepen": 284, "foundat": 284, "intellig": 284, "vmware": 284, "applianc": 284, "bitnami": 284, "nov": 284, "sota": 284, "neurip": 284, "quala": 284, "minilm": [284, 294], "plug": 284, "twitter": 284, "linkedin": 284, "zone": 284, "land": 284, "gcp": 284, "aw": [284, 294], "pat": 284, "keynot": 284, "intelon": 284, "chines": 284, "purif": 284, "jun": 284, "partner": 284, "democrat": 284, "feb": 284, "joint": 284, "bilibili": 284, "gestalt": 284, "ml": 284, "spars": 284, "easier": 284, "youtub": 284, "abound": 284, "lpot": [284, 289], "nextplatform": 284, "cern": 284, "gan": 284, "3dgan": 284, "iml": 284, "workshop": 284, "asplo": 284, "convolut": 284, "intelcaff": 284, "affin": 285, "neither": 285, "nor": 285, "val_load": 285, "avg": 285, "themselv": 285, "dmlexecutionprovid": 285, "yet": 285, "meanwhil": 286, "substanti": 286, "constrain": 286, "lambda": 286, "ouput_dir": 286, "fp32_model_path": 286, "int8_model_path": 286, "ON": 287, "forc": 287, "postposttrainingquantconfig": 287, "datatyp": [287, 293, 294], "depth": 287, "matter": 287, "bf16wrapper": 287, "retrac": 287, "enable_mse_search": 288, "805": 288, "005": 288, "return_int": 288, "enable_auto_scal": 288, "pad_max_length": 288, "use_max_length": 288, "true_sequenti": 288, "slower": 288, "sym_full_rang": 288, "qweight_config_path": 288, "gptq_config_path": 288, "gptq_config": 288, "re": 288, "use_full_length": 288, "compressed_model": 288, "seek": 288, "omit": 288, "rtn_g32asym": 288, "gptq_g32asym": 288, "gptq_g32asym_disable_last_matmul": 288, "amp": 288, "gptq_g128asym": 288, "awq_g32asym": 288, "site": 289, "inspect": 289, "sed": 289, "your_script": 289, "backbon": 290, "fill": [290, 292, 293], "sigopt_experiment_id": 290, "nc": [290, 293], "login": 290, "although": 290, "suffici": 290, "ordinari": 290, "receiv": 290, "latenc": [290, 293], "durat": 290, "8266": 290, "8372": 290, "2132": 290, "7495": 290, "8299": 290, "8294": 290, "0837": 290, "8291": 290, "4469": 290, "allevi": 291, "herebi": 291, "optdecoderlay": 291, "blockwis": 291, "accordingli": 291, "waq": 291, "torchsmoothqu": 291, "hardtanh": 291, "t5norm": 291, "llamanorm": 291, "groupnorm": 291, "7392": [291, 294], "7335": 291, "7058": [291, 294], "6994": 291, "7677": [291, 294], "7615": [291, 294], "7332": 291, "7632": 291, "arang": 291, "tolist": 291, "default_alpha": 291, "step_siz": 291, "jason": 291, "transact": 291, "ensp": 292, "centercrop": 292, "randomcrop": 292, "cropres": 292, "decodeimag": 292, "jpeg": 292, "encodejp": 292, "alignimagechannel": 292, "116": 292, "103": [292, 294], "94": [292, 294], "017": 292, "bilinearimagenet": 292, "topilimag": 292, "padding_mod": 292, "border": 292, "pixel": 292, "edg": 292, "colorjitt": 292, "bright": 292, "contrast": 292, "satur": 292, "hue": 292, "jitter": 292, "tondarrai": 292, "o1": 293, "human": 293, "aggress": 293, "flowchart": 293, "htmllabel": 293, "td": 293, "classdef": 293, "itemstyl": 293, "cce5ff": 293, "stroke": 293, "99ccff": 293, "s1": 293, "s2": 293, "s3": 293, "s4": 293, "s5": 293, "s6": 293, "s7": 293, "nbsp": [293, 294], "subgraphstyl": 293, "ffffff": 293, "skip": 293, "attempt": 293, "post_training_auto_qu": 293, "increment": 293, "ii": 293, "highest": 293, "confidence_batch": 293, "spent": 293, "hawq_v2_loss": 293, "model_loss": 293, "black": 293, "discret": 293, "compli": 293, "posterior": 293, "short": 293, "never": 293, "loglevel": 293, "endlessli": 293, "perspect": 293, "smbo": 293, "appl": 293, "surrog": 293, "repeat": 293, "quantil": 293, "densiti": 293, "parzen": 293, "greatest": 293, "hour": 293, "dai": 293, "next_tune_cfg": 293, "overridden": 293, "cluster": 293, "mpi": 293, "replic": 293, "replica": 293, "fed": 293, "synchron": 293, "resourc": 293, "mpirun": 293, "number_of_process": 293, "run_cmd": 293, "abctunestrategi": 293, "1x": 294, "platinum": 294, "8480": 294, "8ghz": 294, "56": 294, "ht": 294, "turbo": 294, "256gb": 294, "16x16gb": 294, "ddr5": 294, "4800": 294, "mt": 294, "bio": 294, "3a14": 294, "tel2p1": 294, "microcod": 294, "0x2b0001b0": 294, "gcc": 294, "20210514": 294, "red": 294, "hat": 294, "visit": 294, "1s4c14ins1bsthroughput": 294, "1720": 294, "582": 294, "95x": 294, "1517": 294, "38": 294, "570": 294, "65": 294, "66x": 294, "resnet101": 294, "41": 294, "1058": 294, "382": 294, "96": 294, "77x": 294, "incept": 294, "2080": 294, "951": 294, "19x": 294, "1587": 294, "863": 294, "37": 294, "84x": 294, "v3": 294, "1052": 294, "434": 294, "42x": 294, "v4": 294, "707": 294, "234": 294, "02x": 294, "40": 294, "320": 294, "179": 294, "79x": 294, "4312": 294, "1512": 294, "85x": 294, "2287": 294, "1406": 294, "63x": 294, "1367": 294, "59x": 294, "vgg19": 294, "1244": 294, "176": 294, "04x": 294, "resnetv2": 294, "780": 294, "34x": 294, "494": 294, "43": 294, "329": 294, "50x": 294, "152": 294, "349": 294, "235": 294, "48x": 294, "densenet": 294, "161": 294, "282": 294, "223": 294, "19": 294, "26x": 294, "1284": 294, "756": 294, "70x": 294, "1280": 294, "530": 294, "cnn": 294, "39": 294, "178": 294, "13x": 294, "yolov3": 294, "249": 294, "44": 294, "64x": 294, "54": 294, "28x": 294, "36": 294, "05x": 294, "390": 294, "212": 294, "83x": 294, "vit": 294, "230": 294, "142": 294, "62x": 294, "1989": 294, "31x": 294, "1165": 294, "303": 294, "953": 294, "302": 294, "15x": 294, "resnest50": 294, "365": 294, "21x": 294, "resnext101_32x8d": 294, "548": 294, "104": 294, "27x": 294, "efficientnet_b0": 294, "636": 294, "566": 294, "12x": 294, "efficientnet_b3": 294, "471": 294, "358": 294, "32x": 294, "peleenet": 294, "790": 294, "504": 294, "57x": 294, "yolo": 294, "137": 294, "88x": 294, "175": 294, "23x": 294, "camembert": 294, "393": 294, "174": 294, "783": 294, "344": 294, "684": 294, "99x": 294, "albert": 294, "312": 294, "155": 294, "01x": 294, "funnel": 294, "281": 294, "395": 294, "173": 294, "373": 294, "405": 294, "30x": 294, "stsb": 294, "396": 294, "136": 294, "377": 294, "17x": 294, "391": 294, "25x": 294, "135": 294, "61x": 294, "117": 294, "93x": 294, "lvwerra": 294, "pegasu": 294, "samsum": 294, "1981": 294, "598": 294, "1095": 294, "298": 294, "67x": 294, "549": 294, "29x": 294, "375": 294, "hellaswag": 294, "winogrand": 294, "piqa": 294, "wikitext": 294, "word_perplex": 294, "4954": 294, "6409": 294, "7541": 294, "6434": 294, "8816": 294, "gptqw4g128asym": 294, "679": 294, "4895": 294, "6433": 294, "7476": 294, "6399": 294, "9945": 294, "0999": 294, "gptqw4g32asym": 294, "6829": 294, "4923": 294, "6401": 294, "7486": 294, "6410": 294, "9963": 294, "0141": 294, "gptqw4g128sym": 294, "685": 294, "4907": 294, "6361": 294, "7443": 294, "6390": 294, "1498": 294, "gptqw4g32sym": 294, "6911": 294, "4899": 294, "6448": 294, "7497": 294, "6439": 294, "0927": 294, "5049": 294, "6543": 294, "7628": 294, "6497": 294, "2862": 294, "4984": 294, "6535": 294, "7568": 294, "6473": 294, "9962": 294, "4193": 294, "6885": 294, "4973": 294, "753": 294, "6455": 294, "9935": 294, "4607": 294, "decapoda": 294, "5642": 294, "6709": 294, "7835": 294, "6887": 294, "4202": 294, "7244": 294, "5603": 294, "6614": 294, "6824": 294, "9909": 294, "5881": 294, "5911": 294, "7009": 294, "7878": 294, "7106": 294, "7518": 294, "5843": 294, "6961": 294, "7911": 294, "4319": 294, "7572": 294, "5898": 294, "7056": 294, "7894": 294, "7105": 294, "9998": 294, "3429": 294, "7596": 294, "5841": 294, "6977": 294, "7905": 294, "7080": 294, "4916": 294, "6266": 294, "7277": 294, "8096": 294, "7350": 294, "2384": 294, "778": 294, "624": 294, "7269": 294, "8047": 294, "7334": 294, "4237": 294, "7706": 294, "6239": 294, "7285": 294, "8058": 294, "7322": 294, "4697": 294, "7836": 294, "6195": 294, "7337": 294, "9983": 294, "5604": 294, "5732": 294, "648": 294, "7715": 294, "6746": 294, "7107": 294, "6982": 294, "5637": 294, "6527": 294, "7704": 294, "6713": 294, "9950": 294, "9702": 294, "5682": 294, "6575": 294, "7758": 294, "6742": 294, "9317": 294, "567": 294, "6902": 294, "7353": 294, "6622": 294, "7829": 294, "6862": 294, "9635": 294, "7246": 294, "5617": 294, "6756": 294, "7797": 294, "6854": 294, "9931": 294, "2799": 294, "7312": 294, "6059": 294, "7103": 294, "7077": 294, "2213": 294, "7273": 294, "6018": 294, "7088": 294, "7742": 294, "7030": 294, "9934": 294, "2538": 294, "083": 294, "7283": 294, "6053": 294, "7024": 294, "7764": 294, "7031": 294, "1889": 294, "374": 294, "727": 294, "5997": 294, "7018": 294, "9916": 294, "2504": 294, "497": 294, "7122": 294, "8984": 294, "5933": 294, "689": 294, "7851": 294, "7075": 294, "1556": 294, "448": 294, "7675": 294, "5934": 294, "7856": 294, "7111": 294, "9984": 294, "1514": 294, "927": 294, "7566": 294, "5899": 294, "7032": 294, "9953": 294, "1374": 294, "728": 294, "4628": 294, "6456": 294, "6029": 294, "6438": 294, "5799": 294, "4542": 294, "6004": 294, "0626": 294, "4789": 294, "6134": 294, "7432": 294, "5525": 294, "4731": 294, "6504": 294, "7617": 294, "6094": 294, "7828": 294, "5098": 294, "7622": 294, "6505": 294, "3242": 294, "6878": 294, "5058": 294, "6393": 294, "7633": 294, "6491": 294, "5514": 294, "6864": 294, "5084": 294, "6519": 294, "6509": 294, "4728": 294, "6876": 294, "5045": 294, "6474": 294, "9952": 294, "6379": 294, "5282": 294, "614": 294, "7448": 294, "6312": 294, "6377": 294, "5228": 294, "5991": 294, "6261": 294, "9919": 294, "4096": 294, "6224": 294, "4271": 294, "577": 294, "722": 294, "5871": 294, "9359": 294, "6123": 294, "4227": 294, "5738": 294, "7203": 294, "5823": 294, "9917": 294, "3377": 294, "615": 294, "4259": 294, "5714": 294, "7247": 294, "9951": 294, "2083": 294, "6154": 294, "4208": 294, "5777": 294, "7198": 294, "5834": 294, "3121": 294, "7233": 294, "5359": 294, "7753": 294, "195": 294, "7186": 294, "5328": 294, "7699": 294, "6687": 294, "9922": 294, "3463": 294, "7268": 294, "533": 294, "659": 294, "6726": 294, "2897": 294, "5718": 294, "6859": 294, "7927": 294, "6890": 294, "9324": 294, "7006": 294, "5655": 294, "6803": 294, "7965": 294, "6857": 294, "1515": 294, "5752": 294, "6748": 294, "7845": 294, "6724": 294, "5951": 294, "6472": 294, "5716": 294, "6685": 294, "784": 294, "6678": 294, "8539": 294, "6918": 294, "5819": 294, "678": 294, "6861": 294, "8863": 294, "5765": 294, "6827": 294, "7873": 294, "6832": 294, "1451": 294, "storywrit": 294, "693": 294, "5477": 294, "663": 294, "6719": 294, "9125": 294, "6661": 294, "7813": 294, "6693": 294, "9961": 294, "1137": 294, "rw": 294, "6604": 294, "5419": 294, "6598": 294, "6594": 294, "7616": 294, "6484": 294, "5369": 294, "7807": 294, "6559": 294, "9947": 294, "9411": 294, "6571": 294, "5398": 294, "6582": 294, "6579": 294, "8809": 294, "652": 294, "535": 294, "7682": 294, "6532": 294, "9906": 294, "0048": 294, "5177": 294, "6669": 294, "7824": 294, "5053": 294, "6301": 294, "5142": 294, "6654": 294, "6483": 294, "8146": 294, "517": 294, "6488": 294, "9941": 294, "1666": 294, "734": 294, "1658": 294, "1495": 294, "733": 294, "1661": 294, "732": 294, "1713": 294, "767": 294, "1747": 294, "770": 294, "7519": 294, "4430": 294, "4413": 294, "72x": 294, "7190": 294, "4019": 294, "613": 294, "170": 294, "611": 294, "186": 294, "619": 294, "184": 294, "36x": 294, "623": 294, "5711": 294, "2584": 294, "6136": 294, "2630": 294, "33x": 294, "shufflenet": 294, "6820": 294, "3686": 294, "googlenet": 294, "1971": 294, "1120": 294, "76x": 294, "1838": 294, "1142": 294, "squeezenet": 294, "10163": 294, "5771": 294, "10339": 294, "6002": 294, "caffenet": 294, "2805": 294, "1077": 294, "60x": 294, "4351": 294, "822": 294, "alexnet": 294, "2169": 294, "893": 294, "43x": 294, "2232": 294, "841": 294, "65x": 294, "zfnet": 294, "921": 294, "525": 294, "75x": 294, "925": 294, "534": 294, "73x": 294, "1862": 294, "1161": 294, "1956": 294, "1262": 294, "55x": 294, "efficientnet": 294, "2793": 294, "1383": 294, "beit": 294, "206": 294, "91x": 294, "duc": 294, "74x": 294, "8780": 294, "1920": 294, "emot": 294, "ferplu": 294, "6360": 294, "3067": 294, "07x": 294, "arcfac": 294, "449": 294, "511": 294, "484": 294, "222": 294, "18x": 294, "integerop": 294, "635": 294, "1324": 294, "244": 294, "47x": 294, "440": 294, "214": 294, "06x": 294, "715": 294, "201": 294, "03x": 294, "714": 294, "213": 294, "339": 294, "58x": 294, "215": 294, "89x": 294, "712": 294, "217": 294, "l12": 294, "h384": 294, "1209": 294, "588": 294, "1268": 294, "16x": 294, "1253": 294, "399": 294, "14x": 294, "l6": 294, "1139": 294, "94x": 294, "2365": 294, "08x": 294, "718": 294, "35x": 294, "electra": 294, "discrimin": 294, "1951": 294, "71x": 294, "2198": 294, "1129": 294, "mini": 294, "5814": 294, "3388": 294, "6396": 294, "3445": 294, "86x": 294, "bart": 294, "126": 294, "spanbert": 294, "multilingu": 294, "82x": 294, "118": 294, "46x": 294, "layoutlmv3": 294, "funsd": 294, "layoutlmv2": 294, "perplex": 294, "2788": 294, "7002": 294, "4124": 294, "9921": 294, "3950": 294, "9892": 294, "9163": 294, "7240": 294, "0438": 294, "7634": 294, "1186": 294, "9944": 294, "1276": 294, "7543": 294, "6181": 294, "rtnw4g32asym": 294, "6496": 294, "9967": 294, "7964": 294, "6612": 294, "rtnw4g32sym": 294, "7941": 294, "7243": 294, "9971": 294, "taskdataset": 294, "accuracyspars": 294, "ratiospars": 294, "commentsbalancedor": 294, "unbalanc": 294, "answeringsquad": 294, "87f1": 294, "momentumunbalanc": 294, "momentumbalanc": 294, "90f1": 294, "59f1": 294, "23f1": 294, "classificationmrpc": 294, "52f1": 294, "26f1": 294, "classificationsst": 294, "61accuraci": 294, "recognitionimagenet": 294, "95top1": 294, "v5s6": 294, "detectioncoco": 294, "ap0": 294, "6ap0": 294, "584": 294, "34f1": 294, "lassounbalanc": 294, "classificationmnli": 294, "mm": 294, "allbalanc": 294, "32accuraci": 294, "sensitivitybalanc": 294, "classificationqqp": 294, "classificationqnli": 294, "54accuraci": 294, "em": 294, "mobilenetv2": 294, "wideresnet40": 294, "9522": 294, "8178": 294, "0213": 294, "8235": 294, "027": 294, "5494": 294, "7153": 294, "5540": 294, "5523": 294, "vgg": 294, "bn": 294, "7022": 294, "7415": 294, "7025": 294, "0003": 294, "6739": 294, "7399": 294, "6845": 294, "0106": 294, "blendcnn": 294, "7034": 294, "8382": 294, "bilstm": 294, "8314": 294, "9403": 294, "9048": 294, "0734": 294, "7323": 294, "8256": 294, "8084": 294, "8814": 294, "7442": 294, "8371": 294, "0119": 294, "0115": 294, "tinybert": 294, "8018": 294, "8044": 294, "8363": 294, "8411": 294, "8025": 294, "8074": 294, "0007": 294, "0030": 294, "8626": 294, "8213": 294, "9091": 294, "8782": 294, "8684": 294, "8259": 294, "distilroberta": 294, "6057": 294, "6187": 294, "0130": 294, "c6i": 294, "2xlarg": 294, "c6a": 294, "c6g": 294, "a100cuda": 294, "executionprovid": 294}, "objects": {"": [[37, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [8, 0, 0, "-", "common"], [15, 0, 0, "-", "config"], [16, 0, 0, "-", "contrib"], [31, 0, 0, "-", "data"], [44, 0, 0, "-", "metric"], [46, 0, 0, "-", "mix_precision"], [48, 0, 0, "-", "model"], [56, 0, 0, "-", "objective"], [57, 0, 0, "-", "profiling"], [58, 0, 0, "-", "quantization"], [66, 0, 0, "-", "strategy"], [85, 0, 0, "-", "tensorflow"], [189, 0, 0, "-", "torch"], [194, 0, 0, "-", "training"], [202, 0, 0, "-", "utils"], [210, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[6, 0, 0, "-", "base_config"], [7, 0, 0, "-", "base_tuning"], [9, 0, 0, "-", "tuning_param"], [11, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[6, 1, 1, "", "BaseConfig"], [6, 1, 1, "", "ComposableConfig"], [6, 1, 1, "", "ConfigRegistry"], [6, 2, 1, "", "get_all_config_set_from_config_registry"], [6, 2, 1, "", "register_config"], [6, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[6, 3, 1, "", "name"], [6, 3, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[6, 3, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[7, 1, 1, "", "ConfigLoader"], [7, 1, 1, "", "ConfigSet"], [7, 1, 1, "", "EvaluationFuncWrapper"], [7, 1, 1, "", "Evaluator"], [7, 1, 1, "", "Sampler"], [7, 1, 1, "", "SequentialSampler"], [7, 1, 1, "", "TuningConfig"], [7, 1, 1, "", "TuningMonitor"], [7, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[7, 3, 1, "", "config_list"]], "neural_compressor.common.tuning_param": [[9, 1, 1, "", "ParamLevel"], [9, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[9, 3, 1, "", "MODEL_LEVEL"], [9, 3, 1, "", "OP_LEVEL"], [9, 3, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[10, 0, 0, "-", "constants"], [12, 0, 0, "-", "logger"], [13, 0, 0, "-", "save_load"], [14, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[10, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[12, 1, 1, "", "Logger"], [12, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[13, 2, 1, "", "load_config_mapping"], [13, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[14, 1, 1, "", "CpuInfo"], [14, 1, 1, "", "LazyImport"], [14, 1, 1, "", "ProcessorType"], [14, 1, 1, "", "Statistics"], [14, 2, 1, "", "call_counter"], [14, 2, 1, "", "detect_processor_type_based_on_hw"], [14, 2, 1, "", "dump_elapsed_time"], [14, 2, 1, "", "get_workspace"], [14, 2, 1, "", "log_process"], [14, 2, 1, "", "set_random_seed"], [14, 2, 1, "", "set_resume_from"], [14, 2, 1, "", "set_tensorboard"], [14, 2, 1, "", "set_workspace"], [14, 2, 1, "", "singleton"]], "neural_compressor.config": [[15, 1, 1, "", "AccuracyCriterion"], [15, 1, 1, "", "BenchmarkConfig"], [15, 1, 1, "", "DistillationConfig"], [15, 1, 1, "", "DotDict"], [15, 1, 1, "", "ExportConfig"], [15, 1, 1, "", "HPOConfig"], [15, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [15, 1, 1, "", "Keras"], [15, 1, 1, "", "KnowledgeDistillationLossConfig"], [15, 1, 1, "", "MXNet"], [15, 1, 1, "", "MixedPrecisionConfig"], [15, 1, 1, "", "NASConfig"], [15, 1, 1, "", "ONNX"], [15, 1, 1, "", "ONNXQlinear2QDQConfig"], [15, 1, 1, "", "Options"], [15, 1, 1, "", "PostTrainingQuantConfig"], [15, 1, 1, "", "PyTorch"], [15, 1, 1, "", "QuantizationAwareTrainingConfig"], [15, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [15, 1, 1, "", "TF2ONNXConfig"], [15, 1, 1, "", "TensorFlow"], [15, 1, 1, "", "Torch2ONNXConfig"], [15, 1, 1, "", "TuningCriterion"], [15, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[17, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[18, 0, 0, "-", "sigopt"], [19, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[18, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[26, 0, 0, "-", "datasets"], [30, 0, 0, "-", "filters"], [33, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[20, 0, 0, "-", "bert_dataset"], [21, 0, 0, "-", "coco_dataset"], [22, 0, 0, "-", "dataset"], [23, 0, 0, "-", "dummy_dataset"], [24, 0, 0, "-", "dummy_dataset_v2"], [25, 0, 0, "-", "imagenet_dataset"], [27, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[20, 1, 1, "", "InputFeatures"], [20, 1, 1, "", "ONNXRTBertDataset"], [20, 1, 1, "", "ParseDecodeBert"], [20, 1, 1, "", "PytorchBertDataset"], [20, 1, 1, "", "TensorflowBertDataset"], [20, 1, 1, "", "TensorflowModelZooBertDataset"], [20, 2, 1, "", "convert_examples_to_features"], [20, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[21, 1, 1, "", "COCONpy"], [21, 1, 1, "", "COCORaw"], [21, 1, 1, "", "COCORecordDataset"], [21, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[22, 1, 1, "", "CIFAR10"], [22, 1, 1, "", "CIFAR100"], [22, 1, 1, "", "Dataset"], [22, 1, 1, "", "Datasets"], [22, 1, 1, "", "FashionMNIST"], [22, 1, 1, "", "ImageFolder"], [22, 1, 1, "", "IterableDataset"], [22, 1, 1, "", "MNIST"], [22, 1, 1, "", "MXNetCIFAR10"], [22, 1, 1, "", "MXNetCIFAR100"], [22, 1, 1, "", "MXNetDatasets"], [22, 1, 1, "", "MXNetFashionMNIST"], [22, 1, 1, "", "MXNetImageFolder"], [22, 1, 1, "", "MXNetMNIST"], [22, 1, 1, "", "ONNXRTITDatasets"], [22, 1, 1, "", "ONNXRTQLDatasets"], [22, 1, 1, "", "PyTorchDatasets"], [22, 1, 1, "", "PytorchCIFAR10"], [22, 1, 1, "", "PytorchCIFAR100"], [22, 1, 1, "", "PytorchFashionMNIST"], [22, 1, 1, "", "PytorchMNIST"], [22, 1, 1, "", "PytorchMxnetWrapDataset"], [22, 1, 1, "", "PytorchMxnetWrapFunction"], [22, 1, 1, "", "Tensorflow"], [22, 1, 1, "", "TensorflowCIFAR10"], [22, 1, 1, "", "TensorflowCIFAR100"], [22, 1, 1, "", "TensorflowDatasets"], [22, 1, 1, "", "TensorflowFashionMNIST"], [22, 1, 1, "", "TensorflowImageRecord"], [22, 1, 1, "", "TensorflowMNIST"], [22, 1, 1, "", "TensorflowTFRecordDataset"], [22, 1, 1, "", "TensorflowVOCRecord"], [22, 2, 1, "", "calculate_md5"], [22, 2, 1, "", "check_integrity"], [22, 2, 1, "", "dataset_registry"], [22, 2, 1, "", "download_url"], [22, 4, 1, "", "framework_datasets"], [22, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[23, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, 1, 1, "", "DummyDataset"], [24, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, 1, 1, "", "ImagenetRaw"], [25, 1, 1, "", "MXNetImagenetRaw"], [25, 1, 1, "", "ONNXRTImagenetDataset"], [25, 1, 1, "", "PytorchImagenetRaw"], [25, 1, 1, "", "TensorflowImagenetDataset"], [25, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[28, 0, 0, "-", "coco_filter"], [29, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[28, 1, 1, "", "LabelBalanceCOCORawFilter"], [28, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[29, 1, 1, "", "FILTERS"], [29, 1, 1, "", "Filter"], [29, 1, 1, "", "MXNetFilters"], [29, 1, 1, "", "ONNXRTITFilters"], [29, 1, 1, "", "ONNXRTQLFilters"], [29, 1, 1, "", "PyTorchFilters"], [29, 1, 1, "", "TensorflowFilters"], [29, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[32, 0, 0, "-", "imagenet_transform"], [34, 0, 0, "-", "postprocess"], [35, 0, 0, "-", "tokenization"], [36, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[32, 1, 1, "", "BilinearImagenetTransform"], [32, 1, 1, "", "LabelShift"], [32, 1, 1, "", "ONNXResizeCropImagenetTransform"], [32, 1, 1, "", "OnnxBilinearImagenetTransform"], [32, 1, 1, "", "ParseDecodeImagenet"], [32, 1, 1, "", "ParseDecodeImagenetTransform"], [32, 1, 1, "", "QuantizedInput"], [32, 1, 1, "", "ResizeWithAspectRatio"], [32, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [32, 1, 1, "", "TensorflowShiftRescale"], [32, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[34, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, 1, 1, "", "BasicTokenizer"], [35, 1, 1, "", "FullTokenizer"], [35, 1, 1, "", "WordpieceTokenizer"], [35, 2, 1, "", "convert_by_vocab"], [35, 2, 1, "", "convert_to_unicode"], [35, 2, 1, "", "load_vocab"], [35, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[36, 1, 1, "", "AlignImageChannelTransform"], [36, 1, 1, "", "BaseTransform"], [36, 1, 1, "", "CastONNXTransform"], [36, 1, 1, "", "CastPyTorchTransform"], [36, 1, 1, "", "CastTFTransform"], [36, 1, 1, "", "CenterCropTFTransform"], [36, 1, 1, "", "CenterCropTransform"], [36, 1, 1, "", "CollectTransform"], [36, 1, 1, "", "ComposeTransform"], [36, 1, 1, "", "CropResizeTFTransform"], [36, 1, 1, "", "CropResizeTransform"], [36, 1, 1, "", "CropToBoundingBox"], [36, 1, 1, "", "InputFeatures"], [36, 1, 1, "", "MXNetCropResizeTransform"], [36, 1, 1, "", "MXNetCropToBoundingBox"], [36, 1, 1, "", "MXNetNormalizeTransform"], [36, 1, 1, "", "MXNetTransforms"], [36, 1, 1, "", "MXNetTranspose"], [36, 1, 1, "", "NormalizeTFTransform"], [36, 1, 1, "", "NormalizeTransform"], [36, 1, 1, "", "ONNXRTCropToBoundingBox"], [36, 1, 1, "", "ONNXRTITTransforms"], [36, 1, 1, "", "ONNXRTQLTransforms"], [36, 1, 1, "", "PaddedCenterCropTransform"], [36, 1, 1, "", "ParseDecodeVocTransform"], [36, 1, 1, "", "PyTorchAlignImageChannel"], [36, 1, 1, "", "PyTorchCropResizeTransform"], [36, 1, 1, "", "PyTorchNormalizeTransform"], [36, 1, 1, "", "PyTorchTransforms"], [36, 1, 1, "", "PyTorchTranspose"], [36, 1, 1, "", "PytorchMxnetTransform"], [36, 1, 1, "", "PytorchMxnetWrapFunction"], [36, 1, 1, "", "RandomCropTFTransform"], [36, 1, 1, "", "RandomCropTransform"], [36, 1, 1, "", "RandomHorizontalFlip"], [36, 1, 1, "", "RandomResizedCropMXNetTransform"], [36, 1, 1, "", "RandomResizedCropPytorchTransform"], [36, 1, 1, "", "RandomResizedCropTFTransform"], [36, 1, 1, "", "RandomResizedCropTransform"], [36, 1, 1, "", "RandomVerticalFlip"], [36, 1, 1, "", "RescaleKerasPretrainTransform"], [36, 1, 1, "", "RescaleTFTransform"], [36, 1, 1, "", "RescaleTransform"], [36, 1, 1, "", "ResizeMXNetTransform"], [36, 1, 1, "", "ResizePytorchTransform"], [36, 1, 1, "", "ResizeTFTransform"], [36, 1, 1, "", "ResizeTransform"], [36, 1, 1, "", "ResizeWithRatio"], [36, 1, 1, "", "SquadExample"], [36, 1, 1, "", "TFModelZooCollectTransform"], [36, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [36, 1, 1, "", "TFSquadV1PostTransform"], [36, 1, 1, "", "TRANSFORMS"], [36, 1, 1, "", "TensorflowCropToBoundingBox"], [36, 1, 1, "", "TensorflowRandomHorizontalFlip"], [36, 1, 1, "", "TensorflowRandomVerticalFlip"], [36, 1, 1, "", "TensorflowResizeWithRatio"], [36, 1, 1, "", "TensorflowTransform"], [36, 1, 1, "", "TensorflowTransforms"], [36, 1, 1, "", "TensorflowTranspose"], [36, 1, 1, "", "TensorflowWrapFunction"], [36, 1, 1, "", "ToArray"], [36, 1, 1, "", "ToNDArrayTransform"], [36, 1, 1, "", "Transforms"], [36, 1, 1, "", "Transpose"], [36, 2, 1, "", "convert_examples_to_features"], [36, 2, 1, "", "get_final_text"], [36, 2, 1, "", "get_torchvision_map"], [36, 2, 1, "", "read_squad_examples"], [36, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[38, 0, 0, "-", "bleu"], [39, 0, 0, "-", "bleu_util"], [40, 0, 0, "-", "coco_label_map"], [41, 0, 0, "-", "coco_tools"], [42, 0, 0, "-", "evaluate_squad"], [43, 0, 0, "-", "f1"], [45, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[38, 1, 1, "", "BLEU"], [38, 1, 1, "", "UnicodeRegex"], [38, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[38, 3, 1, "", "labels"], [38, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[38, 3, 1, "", "nondigit_punct_re"], [38, 3, 1, "", "punct_nondigit_re"], [38, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[39, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[41, 1, 1, "", "COCOEvalWrapper"], [41, 1, 1, "", "COCOWrapper"], [41, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [41, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [41, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[41, 3, 1, "", "dataset"], [41, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[42, 2, 1, "", "evaluate"], [42, 2, 1, "", "exact_match_score"], [42, 2, 1, "", "f1_score"], [42, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, 2, 1, "", "evaluate"], [43, 2, 1, "", "f1_score"], [43, 2, 1, "", "metric_max_over_ground_truths"], [43, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[45, 1, 1, "", "Accuracy"], [45, 1, 1, "", "BaseMetric"], [45, 1, 1, "", "COCOmAPv2"], [45, 1, 1, "", "F1"], [45, 1, 1, "", "GeneralTopK"], [45, 1, 1, "", "Loss"], [45, 1, 1, "", "MAE"], [45, 1, 1, "", "METRICS"], [45, 1, 1, "", "MSE"], [45, 1, 1, "", "MXNetMetrics"], [45, 1, 1, "", "Metric"], [45, 1, 1, "", "ONNXRTGLUE"], [45, 1, 1, "", "ONNXRTITMetrics"], [45, 1, 1, "", "ONNXRTQLMetrics"], [45, 1, 1, "", "PyTorchLoss"], [45, 1, 1, "", "PyTorchMetrics"], [45, 1, 1, "", "RMSE"], [45, 1, 1, "", "ROC"], [45, 1, 1, "", "SquadF1"], [45, 1, 1, "", "TensorflowCOCOMAP"], [45, 1, 1, "", "TensorflowMAP"], [45, 1, 1, "", "TensorflowMetrics"], [45, 1, 1, "", "TensorflowTopK"], [45, 1, 1, "", "TensorflowVOCMAP"], [45, 1, 1, "", "WrapMXNetMetric"], [45, 1, 1, "", "WrapONNXRTMetric"], [45, 1, 1, "", "WrapPyTorchMetric"], [45, 1, 1, "", "mIOU"], [45, 2, 1, "", "metric_registry"], [45, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"], [45, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[45, 3, 1, "", "sample"], [45, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[45, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[46, 2, 1, "", "fit"]], "neural_compressor.model": [[47, 0, 0, "-", "base_model"], [49, 0, 0, "-", "keras_model"], [50, 0, 0, "-", "model"], [51, 0, 0, "-", "mxnet_model"], [52, 0, 0, "-", "nets_factory"], [53, 0, 0, "-", "onnx_model"], [54, 0, 0, "-", "tensorflow_model"], [55, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[47, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[49, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[50, 1, 1, "", "Model"], [50, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[51, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[52, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[53, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[54, 1, 1, "", "TensorflowBaseModel"], [54, 1, 1, "", "TensorflowCheckpointModel"], [54, 1, 1, "", "TensorflowLLMModel"], [54, 1, 1, "", "TensorflowModel"], [54, 1, 1, "", "TensorflowQATModel"], [54, 1, 1, "", "TensorflowSavedModelModel"], [54, 2, 1, "", "checkpoint_session"], [54, 2, 1, "", "estimator_session"], [54, 2, 1, "", "frozen_pb_session"], [54, 2, 1, "", "get_model_type"], [54, 2, 1, "", "graph_def_session"], [54, 2, 1, "", "graph_session"], [54, 2, 1, "", "keras_session"], [54, 2, 1, "", "load_saved_model"], [54, 2, 1, "", "saved_model_session"], [54, 2, 1, "", "slim_session"], [54, 2, 1, "", "try_loading_keras"], [54, 2, 1, "", "validate_and_inference_input_output"], [54, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[55, 1, 1, "", "IPEXModel"], [55, 1, 1, "", "PyTorchBaseModel"], [55, 1, 1, "", "PyTorchFXModel"], [55, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[56, 1, 1, "", "Accuracy"], [56, 1, 1, "", "Footprint"], [56, 1, 1, "", "ModelSize"], [56, 1, 1, "", "MultiObjective"], [56, 1, 1, "", "Objective"], [56, 1, 1, "", "Performance"], [56, 2, 1, "", "objective_custom_registry"], [56, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[58, 2, 1, "", "fit"]], "neural_compressor.strategy": [[59, 0, 0, "-", "auto"], [60, 0, 0, "-", "auto_mixed_precision"], [61, 0, 0, "-", "basic"], [62, 0, 0, "-", "bayesian"], [63, 0, 0, "-", "conservative"], [64, 0, 0, "-", "exhaustive"], [65, 0, 0, "-", "hawq_v2"], [67, 0, 0, "-", "mse"], [68, 0, 0, "-", "mse_v2"], [69, 0, 0, "-", "random"], [70, 0, 0, "-", "strategy"], [72, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[59, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[61, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[62, 1, 1, "", "BayesianOptimization"], [62, 1, 1, "", "BayesianTuneStrategy"], [62, 1, 1, "", "TargetSpace"], [62, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[63, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[67, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[69, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[70, 1, 1, "", "TuneStrategy"], [70, 1, 1, "", "TuneStrategyMeta"], [70, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[71, 0, 0, "-", "constant"], [73, 0, 0, "-", "tuning_sampler"], [74, 0, 0, "-", "tuning_space"], [75, 0, 0, "-", "tuning_structs"], [76, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, 1, 1, "", "BlockFallbackTuningSampler"], [73, 1, 1, "", "FallbackTuningSampler"], [73, 1, 1, "", "LowerBitsSampler"], [73, 1, 1, "", "ModelWiseTuningSampler"], [73, 1, 1, "", "OpTypeWiseTuningSampler"], [73, 1, 1, "", "OpWiseTuningSampler"], [73, 1, 1, "", "SmoothQuantSampler"], [73, 1, 1, "", "TuningOrder"], [73, 1, 1, "", "TuningSampler"], [73, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, 1, 1, "", "TuningItem"], [74, 1, 1, "", "TuningSpace"], [74, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [74, 2, 1, "", "pattern_to_internal"], [74, 2, 1, "", "pattern_to_path"], [74, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[75, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[76, 1, 1, "", "ClassRegister"], [76, 1, 1, "", "OrderedDefaultDict"], [76, 1, 1, "", "QuantOptions"], [76, 1, 1, "", "QuantType"], [76, 2, 1, "", "build_slave_faker_model"], [76, 2, 1, "", "extract_data_type"], [76, 2, 1, "", "get_adaptor_name"], [76, 2, 1, "", "preprocess_user_cfg"], [76, 2, 1, "", "reverted_data_type"]], "neural_compressor.tensorflow": [[77, 0, 0, "-", "algorithms"], [86, 0, 0, "-", "keras"], [99, 0, 0, "-", "quantization"], [183, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.algorithms": [[80, 0, 0, "-", "smoother"], [82, 0, 0, "-", "static_quant"]], "neural_compressor.tensorflow.algorithms.smoother": [[78, 0, 0, "-", "calibration"], [79, 0, 0, "-", "core"], [81, 0, 0, "-", "scaler"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[78, 1, 1, "", "SmoothQuantCalibration"], [78, 1, 1, "", "SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[79, 1, 1, "", "SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[81, 1, 1, "", "SmoothQuantScaler"], [81, 1, 1, "", "SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.static_quant": [[83, 0, 0, "-", "keras"], [84, 0, 0, "-", "tensorflow"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[83, 1, 1, "", "KerasAdaptor"], [83, 1, 1, "", "KerasConfigConverter"], [83, 1, 1, "", "KerasQuery"], [83, 1, 1, "", "KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[84, 1, 1, "", "TensorFlowAdaptor"], [84, 1, 1, "", "TensorFlowConfig"], [84, 1, 1, "", "TensorflowConfigConverter"], [84, 1, 1, "", "TensorflowQuery"], [84, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.keras": [[90, 0, 0, "-", "layers"], [95, 0, 0, "-", "quantization"]], "neural_compressor.tensorflow.keras.layers": [[87, 0, 0, "-", "conv2d"], [88, 0, 0, "-", "dense"], [89, 0, 0, "-", "depthwise_conv2d"], [91, 0, 0, "-", "layer_initializer"], [92, 0, 0, "-", "pool2d"], [93, 0, 0, "-", "separable_conv2d"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[87, 1, 1, "", "QConv2D"], [87, 2, 1, "", "initialize_int8_conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[88, 1, 1, "", "QDense"], [88, 2, 1, "", "initialize_int8_dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[89, 1, 1, "", "QDepthwiseConv2D"], [89, 2, 1, "", "initialize_int8_depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[92, 1, 1, "", "QAvgPool2D"], [92, 1, 1, "", "QMaxPool2D"], [92, 2, 1, "", "initialize_int8_avgpool"], [92, 2, 1, "", "initialize_int8_maxpool"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[93, 1, 1, "", "QSeparableConv2D"], [93, 2, 1, "", "initialize_int8_separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization": [[94, 0, 0, "-", "config"]], "neural_compressor.tensorflow.keras.quantization.config": [[94, 1, 1, "", "OperatorConfig"], [94, 1, 1, "", "StaticQuantConfig"], [94, 2, 1, "", "get_all_registered_configs"], [94, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization": [[96, 0, 0, "-", "algorithm_entry"], [97, 0, 0, "-", "autotune"], [98, 0, 0, "-", "config"], [100, 0, 0, "-", "quantize"], [156, 0, 0, "-", "utils"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[96, 2, 1, "", "smooth_quant_entry"], [96, 2, 1, "", "static_quant_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[97, 2, 1, "", "autotune"], [97, 2, 1, "", "get_all_config_set"]], "neural_compressor.tensorflow.quantization.config": [[98, 1, 1, "", "SmoothQuantConfig"], [98, 1, 1, "", "StaticQuantConfig"], [98, 2, 1, "", "get_default_sq_config"], [98, 2, 1, "", "get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.quantize": [[100, 2, 1, "", "need_apply"], [100, 2, 1, "", "quantize_model"], [100, 2, 1, "", "quantize_model_with_single_config"]], "neural_compressor.tensorflow.quantization.utils": [[101, 0, 0, "-", "graph_converter"], [139, 0, 0, "-", "graph_rewriter"], [155, 0, 0, "-", "graph_util"], [157, 0, 0, "-", "quantize_graph"], [174, 0, 0, "-", "quantize_graph_common"], [177, 0, 0, "-", "transform_graph"], [180, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[101, 1, 1, "", "GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[104, 0, 0, "-", "bf16"], [128, 0, 0, "-", "generic"], [138, 0, 0, "-", "graph_base"], [146, 0, 0, "-", "int8"], [151, 0, 0, "-", "qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[102, 0, 0, "-", "bf16_convert"], [103, 0, 0, "-", "dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[102, 1, 1, "", "BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[103, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[105, 0, 0, "-", "convert_add_to_biasadd"], [106, 0, 0, "-", "convert_layout"], [107, 0, 0, "-", "convert_leakyrelu"], [108, 0, 0, "-", "convert_nan_to_random"], [109, 0, 0, "-", "convert_placeholder_to_const"], [110, 0, 0, "-", "dilated_contraction"], [111, 0, 0, "-", "dummy_biasadd"], [112, 0, 0, "-", "expanddims_optimizer"], [113, 0, 0, "-", "fetch_weight_from_reshape"], [114, 0, 0, "-", "fold_batch_norm"], [115, 0, 0, "-", "fold_constant"], [116, 0, 0, "-", "fuse_biasadd_add"], [117, 0, 0, "-", "fuse_column_wise_mul"], [118, 0, 0, "-", "fuse_conv_with_math"], [119, 0, 0, "-", "fuse_decomposed_bn"], [120, 0, 0, "-", "fuse_decomposed_in"], [121, 0, 0, "-", "fuse_gelu"], [122, 0, 0, "-", "fuse_layer_norm"], [123, 0, 0, "-", "fuse_pad_with_conv"], [124, 0, 0, "-", "fuse_pad_with_fp32_conv"], [125, 0, 0, "-", "fuse_reshape_transpose"], [126, 0, 0, "-", "graph_cse_optimizer"], [127, 0, 0, "-", "grappler_pass"], [129, 0, 0, "-", "insert_print_node"], [130, 0, 0, "-", "move_squeeze_after_relu"], [131, 0, 0, "-", "pre_optimize"], [132, 0, 0, "-", "remove_training_nodes"], [133, 0, 0, "-", "rename_batch_norm"], [134, 0, 0, "-", "split_shared_input"], [135, 0, 0, "-", "strip_equivalent_nodes"], [136, 0, 0, "-", "strip_unused_nodes"], [137, 0, 0, "-", "switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[105, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[106, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[107, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[108, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[109, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[110, 1, 1, "", "DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[111, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[112, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[113, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[114, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[115, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[116, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[117, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[118, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[119, 1, 1, "", "FuseDecomposedBNOptimizer"], [119, 2, 1, "", "bypass_reshape"], [119, 2, 1, "", "get_const_dim_count"], [119, 2, 1, "", "node_from_map"], [119, 2, 1, "", "node_name_from_input"], [119, 2, 1, "", "valid_reshape_inputs"], [119, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[120, 1, 1, "", "FuseDecomposedINOptimizer"], [120, 2, 1, "", "bypass_reshape"], [120, 2, 1, "", "get_const_dim_count"], [120, 2, 1, "", "node_from_map"], [120, 2, 1, "", "node_name_from_input"], [120, 2, 1, "", "valid_reshape_inputs"], [120, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[121, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[122, 1, 1, "", "FuseLayerNormOptimizer"], [122, 2, 1, "", "node_from_map"], [122, 2, 1, "", "node_name_from_input"], [122, 2, 1, "", "values_from_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[123, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[124, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[125, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[126, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[127, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[129, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[130, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[131, 1, 1, "", "PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[132, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[133, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[134, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[135, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[136, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[137, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[138, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[140, 0, 0, "-", "freeze_fake_quant"], [141, 0, 0, "-", "freeze_value"], [142, 0, 0, "-", "fuse_conv_redundant_dequantize"], [143, 0, 0, "-", "fuse_conv_requantize"], [144, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [145, 0, 0, "-", "fuse_matmul_requantize"], [147, 0, 0, "-", "meta_op_optimizer"], [148, 0, 0, "-", "post_hostconst_converter"], [149, 0, 0, "-", "post_quantized_op_cse"], [150, 0, 0, "-", "scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[140, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[141, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[142, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[143, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[144, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[145, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [145, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [145, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [145, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[147, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[148, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[149, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[150, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[152, 0, 0, "-", "insert_qdq_pattern"], [153, 0, 0, "-", "merge_duplicated_qdq"], [154, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[152, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[153, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[154, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[155, 1, 1, "", "GraphAnalyzer"], [155, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[165, 0, 0, "-", "qdq"], [167, 0, 0, "-", "quantize_graph_base"], [168, 0, 0, "-", "quantize_graph_bn"], [169, 0, 0, "-", "quantize_graph_concatv2"], [170, 0, 0, "-", "quantize_graph_conv"], [171, 0, 0, "-", "quantize_graph_for_intel_cpu"], [172, 0, 0, "-", "quantize_graph_matmul"], [173, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[158, 0, 0, "-", "fuse_qdq_bn"], [159, 0, 0, "-", "fuse_qdq_concatv2"], [160, 0, 0, "-", "fuse_qdq_conv"], [161, 0, 0, "-", "fuse_qdq_deconv"], [162, 0, 0, "-", "fuse_qdq_in"], [163, 0, 0, "-", "fuse_qdq_matmul"], [164, 0, 0, "-", "fuse_qdq_pooling"], [166, 0, 0, "-", "optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[158, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[159, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[160, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[161, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[162, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[163, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[164, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[166, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[167, 1, 1, "", "QuantizeGraphBase"], [167, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[168, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[169, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[170, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[171, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[172, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[173, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[174, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[175, 0, 0, "-", "bias_correction"], [176, 0, 0, "-", "graph_transform_base"], [178, 0, 0, "-", "insert_logging"], [179, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[175, 1, 1, "", "BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[176, 1, 1, "", "GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[178, 1, 1, "", "InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[179, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[180, 2, 1, "", "apply_inlining"], [180, 2, 1, "", "collate_tf_preds"], [180, 2, 1, "", "construct_function_from_graph_def"], [180, 2, 1, "", "fix_ref_type_of_graph_def"], [180, 2, 1, "", "generate_feed_dict"], [180, 2, 1, "", "get_graph_def"], [180, 2, 1, "", "get_input_output_node_names"], [180, 2, 1, "", "get_model_input_shape"], [180, 2, 1, "", "get_tensor_by_name"], [180, 2, 1, "", "is_ckpt_format"], [180, 2, 1, "", "is_saved_model_format"], [180, 2, 1, "", "iterator_sess_run"], [180, 2, 1, "", "parse_saved_model"], [180, 2, 1, "", "read_graph"], [180, 2, 1, "", "reconstruct_saved_model"], [180, 2, 1, "", "strip_equivalent_nodes"], [180, 2, 1, "", "strip_unused_nodes"], [180, 2, 1, "", "write_graph"]], "neural_compressor.tensorflow.utils": [[181, 0, 0, "-", "constants"], [182, 0, 0, "-", "data"], [184, 0, 0, "-", "model"], [185, 0, 0, "-", "model_wrappers"], [186, 0, 0, "-", "utility"]], "neural_compressor.tensorflow.utils.data": [[182, 1, 1, "", "BaseDataLoader"], [182, 1, 1, "", "BatchSampler"], [182, 1, 1, "", "DummyDataset"], [182, 1, 1, "", "DummyDatasetV2"], [182, 1, 1, "", "IndexFetcher"], [182, 1, 1, "", "IterableFetcher"], [182, 1, 1, "", "IterableSampler"], [182, 1, 1, "", "SequentialSampler"], [182, 2, 1, "", "default_collate"]], "neural_compressor.tensorflow.utils.model": [[184, 1, 1, "", "Model"], [184, 1, 1, "", "TensorflowGlobalConfig"]], "neural_compressor.tensorflow.utils.model_wrappers": [[185, 1, 1, "", "BaseModel"], [185, 1, 1, "", "KerasModel"], [185, 1, 1, "", "TensorflowBaseModel"], [185, 1, 1, "", "TensorflowCheckpointModel"], [185, 1, 1, "", "TensorflowLLMModel"], [185, 1, 1, "", "TensorflowModel"], [185, 1, 1, "", "TensorflowSavedModelModel"], [185, 2, 1, "", "checkpoint_session"], [185, 2, 1, "", "estimator_session"], [185, 2, 1, "", "frozen_pb_session"], [185, 2, 1, "", "get_model_type"], [185, 2, 1, "", "get_tf_model_type"], [185, 2, 1, "", "graph_def_session"], [185, 2, 1, "", "graph_session"], [185, 2, 1, "", "keras_session"], [185, 2, 1, "", "load_saved_model"], [185, 2, 1, "", "saved_model_session"], [185, 2, 1, "", "slim_session"], [185, 2, 1, "", "try_loading_keras"], [185, 2, 1, "", "validate_and_inference_input_output"], [185, 2, 1, "", "validate_graph_node"]], "neural_compressor.tensorflow.utils.utility": [[186, 1, 1, "", "CaptureOutputToFile"], [186, 1, 1, "", "CpuInfo"], [186, 1, 1, "", "TFSlimNetsFactory"], [186, 2, 1, "", "combine_histogram"], [186, 2, 1, "", "deep_get"], [186, 2, 1, "", "disable_random"], [186, 2, 1, "", "dump_elapsed_time"], [186, 2, 1, "", "get_all_fp32_data"], [186, 2, 1, "", "get_tensor_histogram"], [186, 2, 1, "", "itex_installed"], [186, 2, 1, "", "register_algo"], [186, 2, 1, "", "singleton"], [186, 2, 1, "", "valid_keras_format"], [186, 2, 1, "", "version1_eq_version2"], [186, 2, 1, "", "version1_gt_version2"], [186, 2, 1, "", "version1_gte_version2"], [186, 2, 1, "", "version1_lt_version2"], [186, 2, 1, "", "version1_lte_version2"]], "neural_compressor.torch": [[187, 0, 0, "-", "export"], [192, 0, 0, "-", "quantization"]], "neural_compressor.torch.export": [[188, 0, 0, "-", "pt2e_export"]], "neural_compressor.torch.export.pt2e_export": [[188, 2, 1, "", "export"], [188, 2, 1, "", "export_model_for_pt2e_quant"]], "neural_compressor.torch.quantization": [[190, 0, 0, "-", "autotune"], [191, 0, 0, "-", "config"], [193, 0, 0, "-", "quantize"]], "neural_compressor.torch.quantization.autotune": [[190, 2, 1, "", "autotune"], [190, 2, 1, "", "get_all_config_set"], [190, 2, 1, "", "get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.config": [[191, 1, 1, "", "AWQConfig"], [191, 1, 1, "", "AutoRoundConfig"], [191, 1, 1, "", "DynamicQuantConfig"], [191, 1, 1, "", "FP8Config"], [191, 1, 1, "", "GPTQConfig"], [191, 1, 1, "", "HQQConfig"], [191, 1, 1, "", "MXQuantConfig"], [191, 1, 1, "", "MixedPrecisionConfig"], [191, 1, 1, "", "OperatorConfig"], [191, 1, 1, "", "RTNConfig"], [191, 1, 1, "", "SmoothQuantConfig"], [191, 1, 1, "", "StaticQuantConfig"], [191, 1, 1, "", "TEQConfig"], [191, 1, 1, "", "TorchBaseConfig"], [191, 2, 1, "", "get_default_awq_config"], [191, 2, 1, "", "get_default_double_quant_config"], [191, 2, 1, "", "get_default_dynamic_config"], [191, 2, 1, "", "get_default_fp8_config"], [191, 2, 1, "", "get_default_fp8_config_set"], [191, 2, 1, "", "get_default_hqq_config"], [191, 2, 1, "", "get_default_mixed_precision_config"], [191, 2, 1, "", "get_default_mixed_precision_config_set"], [191, 2, 1, "", "get_default_mx_config"], [191, 2, 1, "", "get_default_rtn_config"], [191, 2, 1, "", "get_default_sq_config"], [191, 2, 1, "", "get_default_static_config"], [191, 2, 1, "", "get_default_teq_config"], [191, 2, 1, "", "get_woq_tuning_config"]], "neural_compressor.torch.quantization.quantize": [[193, 2, 1, "", "convert"], [193, 2, 1, "", "prepare"], [193, 2, 1, "", "quantize"]], "neural_compressor.training": [[194, 1, 1, "", "CallBacks"], [194, 1, 1, "", "CompressionManager"], [194, 2, 1, "", "fit"], [194, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[195, 0, 0, "-", "collect_layer_histogram"], [196, 0, 0, "-", "constant"], [197, 0, 0, "-", "create_obj_from_config"], [198, 0, 0, "-", "export"], [203, 0, 0, "-", "kl_divergence"], [204, 0, 0, "-", "load_huggingface"], [205, 0, 0, "-", "logger"], [206, 0, 0, "-", "options"], [207, 0, 0, "-", "pytorch"], [208, 0, 0, "-", "utility"], [209, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[195, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[197, 2, 1, "", "create_dataloader"], [197, 2, 1, "", "create_dataset"], [197, 2, 1, "", "create_eval_func"], [197, 2, 1, "", "create_train_func"], [197, 2, 1, "", "get_algorithm"], [197, 2, 1, "", "get_func_from_config"], [197, 2, 1, "", "get_metrics"], [197, 2, 1, "", "get_postprocess"], [197, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[199, 0, 0, "-", "qlinear2qdq"], [200, 0, 0, "-", "tf2onnx"], [201, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[199, 2, 1, "", "check_model"], [199, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[200, 2, 1, "", "tf_to_fp32_onnx"], [200, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[201, 2, 1, "", "dynamic_quant_export"], [201, 2, 1, "", "get_node_mapping"], [201, 2, 1, "", "get_quantizable_onnx_ops"], [201, 2, 1, "", "static_quant_export"], [201, 2, 1, "", "torch_to_fp32_onnx"], [201, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[203, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[204, 1, 1, "", "OptimizedModel"], [204, 2, 1, "", "export_compressed_model"], [204, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[205, 1, 1, "", "Logger"], [205, 2, 1, "", "debug"], [205, 2, 1, "", "error"], [205, 2, 1, "", "fatal"], [205, 2, 1, "", "info"], [205, 2, 1, "", "log"], [205, 2, 1, "", "warn"], [205, 2, 1, "", "warning"]], "neural_compressor.utils.options": [[206, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[207, 2, 1, "", "is_int8_model"], [207, 2, 1, "", "load"], [207, 2, 1, "", "load_weight_only"], [207, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[208, 1, 1, "", "CaptureOutputToFile"], [208, 1, 1, "", "CpuInfo"], [208, 2, 1, "", "Dequantize"], [208, 1, 1, "", "DotDict"], [208, 1, 1, "", "GLOBAL_STATE"], [208, 1, 1, "", "LazyImport"], [208, 1, 1, "", "MODE"], [208, 1, 1, "", "OpEntry"], [208, 1, 1, "", "Statistics"], [208, 2, 1, "", "alias_param"], [208, 2, 1, "", "calculate_mse"], [208, 2, 1, "", "check_key_exist"], [208, 2, 1, "", "combine_histogram"], [208, 2, 1, "", "compare_objects"], [208, 2, 1, "", "compute_sparsity"], [208, 2, 1, "", "deep_get"], [208, 2, 1, "", "deep_set"], [208, 2, 1, "", "dequantize_weight"], [208, 2, 1, "", "dump_class_attrs"], [208, 2, 1, "", "dump_data_to_local"], [208, 2, 1, "", "dump_elapsed_time"], [208, 2, 1, "", "dump_table"], [208, 2, 1, "", "dump_table_to_csv"], [208, 2, 1, "", "equal_dicts"], [208, 2, 1, "", "fault_tolerant_file"], [208, 2, 1, "", "get_all_fp32_data"], [208, 2, 1, "", "get_number_of_sockets"], [208, 2, 1, "", "get_op_list"], [208, 2, 1, "", "get_size"], [208, 2, 1, "", "get_tensor_histogram"], [208, 2, 1, "", "get_tensors_info"], [208, 2, 1, "", "get_tuning_history"], [208, 2, 1, "", "get_weights_details"], [208, 2, 1, "", "load_data_from_pkl"], [208, 2, 1, "", "mse_metric_gap"], [208, 2, 1, "", "print_op_list"], [208, 2, 1, "", "print_table"], [208, 2, 1, "", "recover"], [208, 2, 1, "", "set_random_seed"], [208, 2, 1, "", "set_resume_from"], [208, 2, 1, "", "set_tensorboard"], [208, 2, 1, "", "set_workspace"], [208, 2, 1, "", "show_memory_info"], [208, 2, 1, "", "singleton"], [208, 2, 1, "", "str2array"], [208, 2, 1, "", "time_limit"], [208, 2, 1, "", "version1_eq_version2"], [208, 2, 1, "", "version1_gt_version2"], [208, 2, 1, "", "version1_gte_version2"], [208, 2, 1, "", "version1_lt_version2"], [208, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[209, 1, 1, "", "WeightsDetails"], [209, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "algorithm": [0, 1, 2, 3, 4, 77, 78, 79, 80, 81, 82, 83, 84, 260, 288, 291, 293], "class": [0, 1, 3, 4, 6, 7, 9, 10, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 41, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 92, 93, 94, 98, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 184, 185, 186, 191, 194, 195, 203, 204, 205, 206, 208, 209, 234], "function": [0, 5, 6, 7, 13, 14, 20, 22, 29, 35, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 119, 120, 122, 180, 182, 185, 186, 188, 190, 191, 193, 194, 197, 199, 200, 201, 204, 205, 207, 208, 265], "modul": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209], "content": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 78, 79, 81, 83, 84, 87, 88, 89, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 233], "fast_bias_correct": 1, "submodul": [2, 8, 11, 17, 26, 30, 33, 37, 44, 48, 66, 72, 80, 82, 90, 95, 99, 104, 128, 139, 146, 151, 156, 157, 165, 177, 183, 187, 192, 198, 202], "smooth_quant": 3, "weight_correct": 4, "benchmark": [5, 224, 244, 259, 277], "common": [6, 7, 8, 9, 10, 11, 12, 13, 14, 218, 219, 231, 268], "base_config": 6, "base_tun": 7, "subpackag": [8, 16, 31, 37, 66, 77, 85, 86, 99, 139, 156, 157, 189, 202], "tuning_param": 9, "util": [10, 11, 12, 13, 14, 71, 72, 73, 74, 75, 76, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 239], "constant": [10, 71, 181, 196], "logger": [12, 205, 261], "save_load": 13, "config": [15, 94, 98, 191, 246, 254, 257, 281], "contrib": [16, 17, 18, 19], "strategi": [17, 18, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 251, 290, 293], "sigopt": [18, 290, 293], "tpe": [19, 293], "data": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 182, 235, 236, 266], "dataset": [20, 21, 22, 23, 24, 25, 26, 27, 271], "bert_dataset": 20, "coco_dataset": 21, "attribut": [22, 229], "dummy_dataset": 23, "dummy_dataset_v2": 24, "imagenet_dataset": 25, "style_transfer_dataset": 27, "filter": [28, 29, 30], "coco_filt": 28, "transform": [32, 33, 34, 35, 36, 271, 292], "imagenet_transform": 32, "postprocess": 34, "token": 35, "metric": [38, 39, 40, 41, 42, 43, 44, 45, 271, 276], "bleu": 38, "bleu_util": 39, "coco_label_map": 40, "coco_tool": 41, "evaluate_squad": 42, "f1": 43, "mix_precis": 46, "model": [47, 48, 49, 50, 51, 52, 53, 54, 55, 184, 216, 217, 223, 235, 248, 267, 273, 275, 277, 279, 280, 283, 286, 288, 291, 294], "base_model": 47, "keras_model": 49, "mxnet_model": 51, "nets_factori": 52, "onnx_model": 53, "tensorflow_model": 54, "torch_model": 55, "object": [56, 249, 281], "profil": 57, "quantiz": [58, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 190, 191, 192, 193, 213, 214, 216, 217, 218, 219, 220, 222, 225, 228, 231, 233, 235, 236, 250, 252, 253, 254, 255, 256, 257, 260, 264, 267, 273, 275, 277, 278, 280, 285, 286, 287, 288, 291, 294], "auto": [59, 221, 287, 291, 293], "auto_mixed_precis": 60, "basic": [61, 293], "bayesian": [62, 293], "conserv": [63, 293], "exhaust": [64, 293], "hawq_v2": [65, 293], "mse": [67, 293], "mse_v2": [68, 293], "random": [69, 293], "tuning_sampl": 73, "tuning_spac": 74, "tuning_struct": 75, "tensorflow": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 220, 222, 223, 228, 233, 252, 253, 254, 265, 267, 273, 276, 285, 287, 292, 294], "smoother": [78, 79, 80, 81], "calibr": [78, 235, 260], "core": 79, "scaler": 81, "static_qu": [82, 83, 84], "kera": [83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "layer": [87, 88, 89, 90, 91, 92, 93, 218, 286, 291], "conv2d": 87, "dens": 88, "depthwise_conv2d": 89, "layer_initi": 91, "pool2d": 92, "separable_conv2d": 93, "algorithm_entri": 96, "autotun": [97, 190, 215, 219, 223, 252, 255], "graph_convert": 101, "graph_rewrit": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "bf16": [102, 103, 104, 215, 278], "bf16_convert": 102, "dequantize_cast_optim": 103, "gener": [105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 224, 235], "convert_add_to_biasadd": 105, "convert_layout": 106, "convert_leakyrelu": 107, "convert_nan_to_random": 108, "convert_placeholder_to_const": 109, "dilated_contract": 110, "dummy_biasadd": 111, "expanddims_optim": 112, "fetch_weight_from_reshap": 113, "fold_batch_norm": 114, "fold_const": 115, "fuse_biasadd_add": 116, "fuse_column_wise_mul": 117, "fuse_conv_with_math": 118, "fuse_decomposed_bn": 119, "fuse_decomposed_in": 120, "fuse_gelu": 121, "fuse_layer_norm": 122, "fuse_pad_with_conv": 123, "fuse_pad_with_fp32_conv": 124, "fuse_reshape_transpos": 125, "graph_cse_optim": 126, "grappler_pass": 127, "insert_print_nod": 129, "move_squeeze_after_relu": 130, "pre_optim": 131, "remove_training_nod": 132, "rename_batch_norm": 133, "split_shared_input": 134, "strip_equivalent_nod": 135, "strip_unused_nod": 136, "switch_optim": 137, "graph_bas": 138, "int8": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 267, 294], "freeze_fake_qu": 140, "freeze_valu": 141, "fuse_conv_redundant_dequant": 142, "fuse_conv_requant": 143, "fuse_matmul_redundant_dequant": 144, "fuse_matmul_requant": 145, "meta_op_optim": 147, "post_hostconst_convert": 148, "post_quantized_op_cs": 149, "scale_propag": 150, "qdq": [151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 294], "insert_qdq_pattern": 152, "merge_duplicated_qdq": 153, "share_qdq_y_pattern": 154, "graph_util": 155, "quantize_graph": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "fuse_qdq_bn": 158, "fuse_qdq_concatv2": 159, "fuse_qdq_conv": 160, "fuse_qdq_deconv": 161, "fuse_qdq_in": 162, "fuse_qdq_matmul": 163, "fuse_qdq_pool": 164, "optimize_qdq": 166, "quantize_graph_bas": 167, "quantize_graph_bn": 168, "quantize_graph_concatv2": 169, "quantize_graph_conv": 170, "quantize_graph_for_intel_cpu": 171, "quantize_graph_matmul": 172, "quantize_graph_pool": 173, "quantize_graph_common": 174, "transform_graph": [175, 176, 177, 178, 179], "bias_correct": 175, "graph_transform_bas": 176, "insert_log": 178, "rerange_quantized_concat": 179, "model_wrapp": 185, "torch": [187, 188, 189, 190, 191, 192, 193, 219, 233, 239, 273, 294], "export": [187, 188, 198, 199, 200, 201, 267, 288], "pt2e_export": 188, "train": [194, 222, 228, 231, 258, 265, 277, 283, 285], "collect_layer_histogram": 195, "create_obj_from_config": 197, "qlinear2qdq": 199, "tf2onnx": 200, "torch2onnx": 201, "kl_diverg": 203, "load_huggingfac": 204, "option": [206, 265], "pytorch": [207, 215, 216, 217, 218, 223, 228, 255, 256, 257, 265, 267, 276, 285, 286, 287, 292, 294], "weights_detail": 209, "version": 210, "intel": [211, 233, 262, 272, 273, 276, 277, 295], "neural": [211, 231, 233, 262, 272, 273, 276, 277, 283, 290, 295], "compressor": [211, 231, 233, 262, 272, 273, 276, 277, 290, 295], "document": [211, 233, 242, 295], "section": [211, 295], "2": [212, 240, 265, 268, 271, 277, 294], "x": [212, 277], "api": [212, 214, 215, 219, 222, 234, 235, 240, 241, 242, 243, 253, 256, 259, 262, 264, 265, 271, 276, 278, 280, 281, 282, 283], "user": [212, 265, 271, 288], "guid": 212, "overview": [212, 223, 230], "python": [212, 262, 276], "base": [212, 253, 256, 273], "advanc": 212, "topic": 212, "dynam": [213, 228, 231, 285], "introduct": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 228, 231, 234, 235, 236, 259, 260, 262, 264, 265, 267, 269, 272, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 290, 291, 292, 293], "get": [213, 214, 215, 217, 218, 220, 225, 231, 233, 234, 259, 262, 264, 265, 269, 270, 276, 278, 280, 281, 282, 283, 285], "start": [213, 214, 215, 217, 218, 220, 225, 231, 233, 234, 259, 262, 264, 265, 269, 270, 276, 278, 280, 281, 282, 283, 285], "exampl": [213, 214, 215, 217, 218, 220, 221, 228, 231, 234, 242, 259, 262, 264, 265, 266, 267, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 291, 294], "microsc": [214, 280], "refer": [214, 218, 228, 260, 261, 280, 283, 285, 288, 291], "mix": [215, 222, 247, 277, 278, 287], "precis": [215, 222, 247, 277, 278, 287], "support": [215, 216, 218, 219, 222, 224, 230, 231, 234, 236, 259, 260, 262, 264, 265, 267, 269, 272, 273, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 291, 292], "matrix": [215, 216, 218, 219, 222, 224, 231, 234, 259, 260, 262, 264, 265, 267, 269, 270, 272, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 291], "hardwar": [215, 273, 278, 294], "softwar": [215, 273, 278], "request": [215, 230, 278], "fp16": [215, 278], "accuraci": [215, 220, 228, 275, 278, 285, 293], "driven": [215, 278], "smooth": [216, 221, 222, 228, 291], "usag": [216, 217, 218, 221, 224, 291, 293], "fix": [216, 221, 291], "alpha": [216, 221, 291], "specifi": [216, 217, 218, 220, 285], "rule": [216, 217, 218, 220, 261, 285], "valid": [216, 273, 291, 294], "framework": [216, 233, 235, 262, 267, 269, 273, 279, 280, 286, 288, 291], "static": [217, 222, 228, 231, 233, 285], "ipex": [217, 228, 285], "backend": [217, 222, 234, 285], "sampl": [217, 235, 270], "pt2e": 217, "weight": [218, 228, 233, 288], "onli": [218, 228, 233, 288], "argument": 218, "rtn": 218, "gptq": 218, "autoround": 218, "awq": 218, "teq": 218, "hqq": 218, "save": 218, "load": [218, 219], "wise": [218, 286], "effici": 218, "client": [218, 225], "side": 218, "like": [219, 236], "problem": [219, 231], "without": 220, "awar": [220, 228, 231, 277, 283, 285], "tune": [220, 221, 228, 236, 285, 288, 291, 293], "With": 220, "quant": [221, 291], "us": [221, 224, 233, 236, 262, 273, 276, 291], "determin": [221, 291], "through": [221, 273, 291, 294], "scheme": [222, 228, 285], "approach": [222, 285], "post": [222, 231, 277, 285], "devic": [222, 285], "how": [223, 235, 236], "work": [223, 234, 285], "case": 224, "dump": 224, "throughput": 224, "latenc": 224, "summari": [224, 236], "demo": 224, "design": [226, 235, 263, 293], "architectur": [226, 263, 272, 273], "workflow": [226, 263], "fundament": [228, 285, 291], "symmetr": 228, "asymmetr": 228, "per": [228, 291], "tensor": [228, 291], "channel": [228, 291], "matmul": [228, 291], "limit": [228, 291], "contributor": [229, 230], "coven": [229, 230], "code": [229, 230, 261, 277, 288], "conduct": [229, 230], "our": [229, 291], "pledg": 229, "standard": 229, "respons": 229, "scope": [229, 283], "enforc": 229, "contribut": 230, "guidelin": 230, "creat": 230, "pull": 230, "step": 230, "checklist": 230, "templat": 230, "accept": 230, "criteria": [230, 283, 293], "statu": 230, "check": 230, "fx": 231, "mode": [231, 294], "note": [231, 289], "detail": 231, "secur": [232, 265], "polici": [232, 293], "report": 232, "vulner": 232, "what": 233, "": [233, 273], "new": [233, 234, 236, 293], "instal": [233, 273], "cpu": [233, 273, 294], "docker": [233, 273], "imag": [233, 273], "hpu": [233, 273], "intel_extension_for_pytorch": [233, 273], "gpu": [233, 273], "other": [233, 273], "platform": [233, 273, 290], "from": [233, 235, 273, 277], "pypi": 233, "llm": [233, 275], "non": 233, "select": 233, "public": [233, 261, 284], "event": [233, 284], "addit": 233, "commun": 233, "adaptor": [234, 235, 237], "flow": [234, 285], "queri": 234, "background": [234, 261], "ad": 234, "capabl": [234, 288], "implement": [234, 235], "onnxrtadaptor": 234, "add": 235, "an": 235, "list": [235, 266, 292], "need": 235, "yaml": [235, 265, 269], "query_fw_cap": 235, "accord": [235, 236], "tune_cfg": 235, "prepar": [235, 290], "fp32": [235, 267], "graph": 235, "run": 235, "iter": 235, "oper": [235, 236], "calcul": 235, "rang": 235, "type": [236, 261, 283], "int4": 236, "few": 236, "line": 236, "chang": [236, 271, 289], "defin": [236, 265], "abil": 236, "specif": 236, "invok": 236, "kernel": 236, "configur": [236, 265, 269, 290], "onnx": [238, 273, 285, 286, 294], "runtim": [238, 273, 285, 286, 294], "0": [240, 241, 294], "3": [241, 268, 284], "compress": [245, 288], "inc": 261, "convent": 261, "import": 261, "string": 261, "annot": 261, "comment": 261, "todo": 261, "intern": 261, "interfac": 261, "folder": 261, "structur": 261, "recommend": 261, "v": 261, "set": 261, "json": 261, "dataload": 262, "build": [262, 268, 276], "custom": [262, 276, 293], "distil": [264, 277, 294], "distribut": [265, 293], "infer": 265, "evalu": 265, "featur": [265, 269, 270, 272, 285], "1": [265, 268, 271, 277, 294], "pure": 265, "horovodrun": 265, "execut": 265, "releas": [266, 289], "appendix": 267, "op": 267, "frequent": 268, "ask": 268, "question": 268, "issu": [268, 289], "4": [268, 284], "5": 268, "file": 269, "quick": 270, "incompat": [271, 289], "between": 271, "v1": 271, "face": 271, "built": [271, 273, 276], "infrastructur": 272, "prerequisit": 273, "binari": 273, "sourc": 273, "ai": 273, "kit": 273, "system": 273, "requir": 273, "environ": 273, "heterogen": 273, "two": 273, "comput": 273, "engin": [273, 291], "mme": 273, "tpc": 273, "64": 273, "compat": 273, "processor": 273, "xe": 273, "multipl": [273, 281, 294], "vendor": 273, "legal": 274, "inform": 274, "licens": 274, "citat": 274, "trademark": 274, "recip": [275, 285], "larg": [275, 283], "languag": [275, 283], "mxnet": [276, 285, 292], "onnxrt": [276, 292], "migrat": 277, "prune": [277, 283, 294], "orchestr": [277, 282], "dure": [278, 287], "singl": 281, "optim": [282, 283], "One": 282, "shot": 282, "network": 283, "pattern": 283, "schedul": 283, "sparsiti": 283, "decai": 283, "regular": 283, "retrain": 283, "free": 283, "spars": 283, "deploy": 283, "hyperparamet": 283, "full": 284, "82": 284, "2024": 284, "2023": 284, "25": 284, "2022": 284, "35": 284, "2021": 284, "15": [284, 294], "2018": 284, "2020": 284, "lwq": 286, "turn": 287, "off": 287, "woq": [288, 294], "known": 289, "perform": 290, "benefit": 290, "comparison": 290, "differ": 290, "smoothquant": 291, "enhanc": 291, "entir": 291, "each": 291, "block": 291, "space": 293, "exit": 293, "process": 293, "ptq": 294, "qat": 294, "17": 294, "knowledg": 294}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [45, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [78, "classes"], [79, "classes"], [81, "classes"], [83, "classes"], [84, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [98, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [111, "classes"], [112, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [158, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [182, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [191, "classes"], [194, "classes"], [195, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [208, "classes"], [209, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [13, "functions"], [14, "functions"], [20, "functions"], [22, "functions"], [29, "functions"], [35, "functions"], [36, "functions"], [38, "functions"], [39, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [46, "functions"], [50, "functions"], [54, "functions"], [56, "functions"], [58, "functions"], [62, "functions"], [70, "functions"], [74, "functions"], [76, "functions"], [87, "functions"], [88, "functions"], [89, "functions"], [92, "functions"], [93, "functions"], [94, "functions"], [96, "functions"], [97, "functions"], [98, "functions"], [100, "functions"], [119, "functions"], [120, "functions"], [122, "functions"], [180, "functions"], [182, "functions"], [185, "functions"], [186, "functions"], [188, "functions"], [190, "functions"], [191, "functions"], [193, "functions"], [194, "functions"], [197, "functions"], [199, "functions"], [200, "functions"], [201, "functions"], [204, "functions"], [205, "functions"], [207, "functions"], [208, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [83, "module-contents"], [84, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [111, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [182, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [8, "submodules"], [11, "submodules"], [17, "submodules"], [26, "submodules"], [30, "submodules"], [33, "submodules"], [37, "submodules"], [44, "submodules"], [48, "submodules"], [66, "submodules"], [72, "submodules"], [80, "submodules"], [82, "submodules"], [90, "submodules"], [95, "submodules"], [99, "submodules"], [104, "submodules"], [128, "submodules"], [139, "submodules"], [146, "submodules"], [151, "submodules"], [156, "submodules"], [157, "submodules"], [165, "submodules"], [177, "submodules"], [183, "submodules"], [187, "submodules"], [192, "submodules"], [198, "submodules"], [202, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "Subpackages": [[8, "subpackages"], [16, "subpackages"], [31, "subpackages"], [37, "subpackages"], [66, "subpackages"], [77, "subpackages"], [85, "subpackages"], [86, "subpackages"], [99, "subpackages"], [139, "subpackages"], [156, "subpackages"], [157, "subpackages"], [189, "subpackages"], [202, "subpackages"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[22, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[37, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.tensorflow.algorithms": [[77, "module-neural_compressor.tensorflow.algorithms"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[78, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[79, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[80, "module-neural_compressor.tensorflow.algorithms.smoother"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[81, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[82, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[83, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[84, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[85, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[86, "module-neural_compressor.tensorflow.keras"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[87, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "neural_compressor.tensorflow.keras.layers.dense": [[88, "module-neural_compressor.tensorflow.keras.layers.dense"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[89, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[90, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[91, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[92, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[93, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "neural_compressor.tensorflow.keras.quantization.config": [[94, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[95, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[96, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "neural_compressor.tensorflow.quantization.autotune": [[97, "module-neural_compressor.tensorflow.quantization.autotune"]], "neural_compressor.tensorflow.quantization.config": [[98, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[99, "module-neural_compressor.tensorflow.quantization"]], "neural_compressor.tensorflow.quantization.quantize": [[100, "module-neural_compressor.tensorflow.quantization.quantize"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[101, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[102, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[103, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[104, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[105, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[106, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[107, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[108, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[109, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[110, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[111, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[112, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[113, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[114, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[115, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[116, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[117, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[118, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[119, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[120, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[121, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[122, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[123, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[124, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[125, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[126, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[127, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[128, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[129, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[130, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[131, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[132, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[133, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[134, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[135, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[136, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[137, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[138, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[139, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[140, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[141, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[142, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[143, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[144, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[145, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[146, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[147, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[148, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[149, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[150, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[151, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[152, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[153, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[154, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[155, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[156, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[157, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[158, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[159, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[160, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[161, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[162, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[163, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[164, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[165, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[166, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[167, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[168, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[169, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[170, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[171, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[172, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[173, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[174, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[175, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[176, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[177, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[178, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[179, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.tensorflow.quantization.utils.utility": [[180, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "neural_compressor.tensorflow.utils.constants": [[181, "module-neural_compressor.tensorflow.utils.constants"]], "neural_compressor.tensorflow.utils.data": [[182, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[183, "module-neural_compressor.tensorflow.utils"]], "neural_compressor.tensorflow.utils.model": [[184, "module-neural_compressor.tensorflow.utils.model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[185, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "neural_compressor.tensorflow.utils.utility": [[186, "module-neural_compressor.tensorflow.utils.utility"]], "neural_compressor.torch.export": [[187, "module-neural_compressor.torch.export"]], "neural_compressor.torch.export.pt2e_export": [[188, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch": [[189, "module-neural_compressor.torch"]], "neural_compressor.torch.quantization.autotune": [[190, "module-neural_compressor.torch.quantization.autotune"]], "neural_compressor.torch.quantization.config": [[191, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[192, "module-neural_compressor.torch.quantization"]], "neural_compressor.torch.quantization.quantize": [[193, "module-neural_compressor.torch.quantization.quantize"]], "neural_compressor.training": [[194, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[195, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[196, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[197, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[198, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[199, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[200, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[201, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[202, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[203, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[204, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[205, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[206, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[207, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[208, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[209, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[210, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[211, "intel-neural-compressor-documentation"], [295, "intel-neural-compressor-documentation"]], "Sections": [[211, "sections"], [295, "sections"]], "2.X API User Guide": [[212, "x-api-user-guide"]], "Overview": [[212, "overview"], [223, "overview"]], "Python-based APIs": [[212, "python-based-apis"]], "Advanced Topics": [[212, "advanced-topics"]], "Dynamic Quantization": [[213, "dynamic-quantization"], [228, "dynamic-quantization"], [231, "dynamic-quantization"]], "Introduction": [[213, "introduction"], [214, "introduction"], [215, "introduction"], [216, "introduction"], [217, "introduction"], [218, "introduction"], [219, "introduction"], [220, "introduction"], [221, "introduction"], [222, "introduction"], [224, "introduction"], [225, "introduction"], [228, "introduction"], [231, "introduction"], [234, "introduction"], [235, "introduction"], [236, "introduction"], [259, "introduction"], [260, "introduction"], [262, "introduction"], [264, "introduction"], [265, "introduction"], [267, "introduction"], [269, "introduction"], [272, "introduction"], [276, "introduction"], [278, "introduction"], [279, "introduction"], [280, "introduction"], [281, "introduction"], [282, "introduction"], [283, "introduction"], [286, "introduction"], [288, "introduction"], [290, "introduction"], [291, "introduction"], [292, "introduction"], [293, "introduction"]], "Getting Started with Dynamic Quantization": [[213, "getting-started-with-dynamic-quantization"]], "Examples": [[213, "examples"], [214, "examples"], [215, "examples"], [218, "examples"], [220, "examples"], [221, "examples"], [231, "examples"], [259, "examples"], [262, "examples"], [264, "examples"], [265, "examples"], [266, "examples"], [267, "examples"], [277, "examples"], [278, "examples"], [279, "examples"], [280, "examples"], [282, "examples"], [283, "examples"], [285, "examples"], [286, "examples"], [288, "examples"]], "Microscaling Quantization": [[214, "microscaling-quantization"], [280, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[214, "get-started-with-microscaling-quantization-api"], [280, "get-started-with-microscaling-quantization-api"]], "Reference": [[214, "reference"], [218, "reference"], [228, "reference"], [260, "reference"], [261, "reference"], [280, "reference"], [283, "reference"], [285, "reference"], [288, "reference"], [291, "reference"]], "PyTorch Mixed Precision": [[215, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[215, "mixed-precision-support-matrix"], [278, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[215, "hardware-and-software-requests-for-bf16"], [278, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[215, "hardware-and-software-requests-for-fp16"], [278, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[215, "accuracy-driven-mixed-precision"], [278, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[215, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[216, "pytorch-smooth-quantization"]], "Usage": [[216, "usage"], [218, "usage"], [221, "usage"], [224, "usage"], [291, "usage"], [293, "usage"], [293, "id2"], [293, "id4"], [293, "id6"], [293, "id8"], [293, "id10"], [293, "id12"], [293, "id14"], [293, "id16"], [293, "id18"], [293, "id20"], [293, "id22"]], "Fixed Alpha": [[216, "fixed-alpha"]], "Specify Quantization Rules": [[216, "specify-quantization-rules"], [217, "specify-quantization-rules"], [218, "specify-quantization-rules"], [220, "specify-quantization-rules"], [285, "specify-quantization-rules"]], "Validated Models": [[216, "validated-models"], [291, "validated-models"], [294, "validated-models"]], "Supported Framework Matrix": [[216, "supported-framework-matrix"], [291, "supported-framework-matrix"]], "PyTorch Static Quantization": [[217, "pytorch-static-quantization"]], "Get Started": [[217, "get-started"], [218, "get-started"], [220, "get-started"], [225, "get-started"], [231, "get-started"], [285, "get-started"]], "Static Quantization with IPEX Backend": [[217, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[217, "usage-sample-with-ipex"]], "Model Examples": [[217, "model-examples"]], "Static Quantization with PT2E Backend": [[217, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[217, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[217, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[218, "pytorch-weight-only-quantization"]], "Supported Matrix": [[218, "supported-matrix"], [219, "supported-matrix"], [224, "supported-matrix"]], "Common arguments": [[218, "common-arguments"]], "RTN": [[218, "rtn"]], "GPTQ": [[218, "gptq"]], "AutoRound": [[218, "autoround"]], "AWQ": [[218, "awq"]], "TEQ": [[218, "teq"]], "HQQ": [[218, "hqq"]], "Saving and Loading": [[218, "saving-and-loading"]], "Layer Wise Quantization": [[218, "layer-wise-quantization"]], "Efficient Usage on Client-Side": [[218, "efficient-usage-on-client-side"]], "Torch": [[219, "torch"]], "Torch-like APIs": [[219, "torch-like-apis"]], "Quantization APIs": [[219, "quantization-apis"]], "Autotune API": [[219, "autotune-api"]], "Load API": [[219, "load-api"]], "Common Problems": [[219, "common-problems"]], "TensorFlow Quantization": [[220, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[220, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[220, "with-accuracy-aware-tuning"]], "Smooth Quant": [[221, "smooth-quant"], [291, "smooth-quant"]], "Using a Fixed alpha": [[221, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[221, "determining-the-alpha-through-auto-tuning"], [291, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[222, "tensorflow"], [276, "tensorflow"], [292, "tensorflow"]], "API for TensorFlow": [[222, "api-for-tensorflow"]], "Support Matrix": [[222, "support-matrix"], [260, "support-matrix"]], "Quantization Scheme": [[222, "quantization-scheme"]], "Quantization Approaches": [[222, "quantization-approaches"], [285, "quantization-approaches"]], "Post Training Static Quantization": [[222, "post-training-static-quantization"], [231, "post-training-static-quantization"], [285, "post-training-static-quantization"]], "Smooth Quantization": [[222, "smooth-quantization"], [228, "smooth-quantization"]], "Mixed Precision": [[222, "mixed-precision"], [278, "mixed-precision"]], "Backend and Device": [[222, "backend-and-device"]], "AutoTune": [[223, "autotune"]], "How it Works": [[223, "how-it-works"]], "Working with Autotune": [[223, "working-with-autotune"]], "Working with PyTorch Model": [[223, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[223, "working-with-tensorflow-model"]], "Benchmark": [[224, "benchmark"], [244, "benchmark"], [277, "benchmark"]], "General Use Cases": [[224, "general-use-cases"]], "Dump Throughput and Latency Summary": [[224, "dump-throughput-and-latency-summary"]], "Demo usage": [[224, "demo-usage"]], "Quantization on Client": [[225, "quantization-on-client"]], "Design": [[226, "design"], [263, "design"], [293, "design"], [293, "id1"], [293, "id3"], [293, "id5"], [293, "id7"], [293, "id9"], [293, "id11"], [293, "id13"], [293, "id15"], [293, "id17"], [293, "id19"], [293, "id21"]], "Architecture": [[226, "architecture"], [263, "architecture"], [272, "architecture"]], "Workflows": [[226, "workflows"]], "Quantization": [[228, "quantization"], [250, "quantization"], [285, "quantization"]], "Quantization Fundamentals": [[228, "quantization-fundamentals"], [285, "quantization-fundamentals"], [291, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[228, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[228, "quantization-scheme-in-tensorflow"], [285, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[228, "quantization-scheme-in-pytorch"], [285, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[228, "quantization-scheme-in-ipex"], [285, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[228, "per-tensor-per-channel"], [291, "per-tensor-per-channel"]], "Per-tensor example": [[228, "per-tensor-example"], [291, "per-tensor-example"]], "Per-channel example": [[228, "per-channel-example"], [291, "per-channel-example"]], "Matmul quantization example": [[228, "matmul-quantization-example"], [291, "matmul-quantization-example"]], "Static Quantization": [[228, "static-quantization"]], "Per-channel limitation": [[228, "per-channel-limitation"], [291, "per-channel-limitation"]], "Weight Only Quantization": [[228, "weight-only-quantization"]], "Quantization Aware Training": [[228, "quantization-aware-training"], [277, "quantization-aware-training"], [285, "quantization-aware-training"], [285, "id1"]], "Accuracy Aware Tuning": [[228, "accuracy-aware-tuning"], [285, "accuracy-aware-tuning"]], "Contributor Covenant Code of Conduct": [[229, "contributor-covenant-code-of-conduct"], [230, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[229, "our-pledge"]], "Our Standards": [[229, "our-standards"]], "Our Responsibilities": [[229, "our-responsibilities"]], "Scope": [[229, "scope"]], "Enforcement": [[229, "enforcement"]], "Attribution": [[229, "attribution"]], "Contribution Guidelines": [[230, "contribution-guidelines"]], "Create Pull Request": [[230, "create-pull-request"]], "Step-by-Step guidelines": [[230, "step-by-step-guidelines"]], "Pull Request Checklist": [[230, "pull-request-checklist"]], "Pull Request Template": [[230, "pull-request-template"]], "Pull Request Acceptance Criteria": [[230, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[230, "pull-request-status-checks-overview"]], "Support": [[230, "support"]], "FX": [[231, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[231, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[231, "post-training-dynamic-quantization"], [285, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[231, "quantization-aware-training"]], "Note": [[231, "note"]], "Details": [[231, "details"]], "Common Problem": [[231, "common-problem"]], "Static Quantization & Quantization Aware Training": [[231, "static-quantization-quantization-aware-training"]], "Security Policy": [[232, "security-policy"]], "Report a Vulnerability": [[232, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[233, "intel-neural-compressor"]], "What\u2019s New": [[233, "what-s-new"]], "Installation": [[233, "installation"], [273, "installation"], [273, "id1"]], "Install Framework": [[233, "install-framework"], [273, "install-framework"]], "Install torch for CPU": [[233, "install-torch-for-cpu"], [273, "install-torch-for-cpu"]], "Use Docker Image with torch installed for HPU": [[233, "use-docker-image-with-torch-installed-for-hpu"], [273, "use-docker-image-with-torch-installed-for-hpu"]], "Install torch/intel_extension_for_pytorch for Intel GPU": [[233, "install-torch-intel-extension-for-pytorch-for-intel-gpu"], [273, "install-torch-intel-extension-for-pytorch-for-intel-gpu"]], "Install torch for other platform": [[233, "install-torch-for-other-platform"], [273, "install-torch-for-other-platform"]], "Install tensorflow": [[233, "install-tensorflow"], [273, "install-tensorflow"]], "Install from pypi": [[233, "install-from-pypi"]], "Getting Started": [[233, "getting-started"], [270, "getting-started"]], "Weight-Only Quantization (LLMs)": [[233, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[233, "static-quantization-non-llms"]], "Documentation": [[233, "documentation"]], "Selected Publications/Events": [[233, "selected-publications-events"]], "Additional Content": [[233, "additional-content"]], "Communication": [[233, "communication"]], "Adaptor": [[234, "adaptor"], [237, "adaptor"]], "Adaptor Support Matrix": [[234, "adaptor-support-matrix"]], "Working Flow": [[234, "working-flow"], [285, "working-flow"]], "Get Started with Adaptor API": [[234, "get-started-with-adaptor-api"]], "Query API": [[234, "query-api"]], "Background": [[234, "background"], [261, "background"]], "Query API Introduction": [[234, "query-api-introduction"]], "Example of Adding a New Backend Support": [[234, "example-of-adding-a-new-backend-support"]], "Capability": [[234, "capability"]], "Implement ONNXRTAdaptor Class": [[234, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[235, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[235, "api-list-that-need-to-implement"]], "Design the framework YAML": [[235, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[235, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[235, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[235, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[235, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[235, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[236, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[236, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[236, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[236, "use-the-new-data-type"]], "Summary": [[236, "summary"]], "ONNX Runtime": [[238, "onnx-runtime"]], "Torch Utils": [[239, "torch-utils"]], "2.0 API": [[240, "api"]], "3.0 API": [[241, "api"]], "API Document Example": [[242, "api-document-example"]], "APIs": [[243, "apis"]], "Compression": [[245, "compression"]], "Config": [[246, "config"]], "Mix Precision": [[247, "mix-precision"], [277, "mix-precision"]], "Model": [[248, "model"], [279, "model"]], "Objective": [[249, "objective"], [281, "objective"]], "Strategy": [[251, "strategy"]], "Tensorflow Quantization AutoTune": [[252, "tensorflow-quantization-autotune"]], "Tensorflow Quantization Base API": [[253, "tensorflow-quantization-base-api"]], "Tensorflow Quantization Config": [[254, "tensorflow-quantization-config"]], "Pytorch Quantization AutoTune": [[255, "pytorch-quantization-autotune"]], "Pytorch Quantization Base API": [[256, "pytorch-quantization-base-api"]], "Pytorch Quantization Config": [[257, "pytorch-quantization-config"]], "Training": [[258, "training"]], "Benchmarking": [[259, "benchmarking"]], "Benchmark Support Matrix": [[259, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[259, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[260, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[260, "calibration-algorithms"]], "INC Coding Conventions": [[261, "inc-coding-conventions"]], "Rules": [[261, "rules"]], "Imports": [[261, "imports"]], "Strings": [[261, "strings"]], "Logger": [[261, "logger"]], "Type Annotations": [[261, "type-annotations"]], "Comments": [[261, "comments"]], "TODO Comments": [[261, "todo-comments"]], "Public and Internal Interfaces": [[261, "public-and-internal-interfaces"]], "Folder structure": [[261, "folder-structure"]], "Recommend VS Code settings.json": [[261, "recommend-vs-code-settings-json"]], "DataLoader": [[262, "dataloader"]], "Supported Framework Dataloader Matrix": [[262, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[262, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[262, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[262, "build-custom-dataloader-with-python-api"]], "Workflow": [[263, "workflow"]], "Distillation for Quantization": [[264, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[264, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[264, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[265, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[265, "supported-feature-matrix"], [269, "supported-feature-matrix"], [272, "supported-feature-matrix"], [285, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[265, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[265, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[265, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[265, "horovodrun-execution"]], "Security": [[265, "security"]], "PyTorch Examples:": [[265, "pytorch-examples"]], "TensorFlow Examples:": [[265, "tensorflow-examples"]], "Example List": [[266, "example-list"]], "Release Data": [[266, "release-data"]], "Export": [[267, "export"]], "Supported Framework Model Matrix": [[267, "supported-framework-model-matrix"], [279, "supported-framework-model-matrix"], [280, "supported-framework-model-matrix"], [286, "supported-framework-model-matrix"], [288, "supported-framework-model-matrix"]], "PyTorch Model": [[267, "pytorch-model"]], "FP32 Model Export": [[267, "fp32-model-export"], [267, "id1"]], "INT8 Model Export": [[267, "int8-model-export"], [267, "id2"]], "Tensorflow Model": [[267, "tensorflow-model"]], "Appendix": [[267, "appendix"]], "Supported quantized ops": [[267, "supported-quantized-ops"]], "Frequently Asked Questions": [[268, "frequently-asked-questions"]], "Common Build Issues": [[268, "common-build-issues"]], "Issue 1:": [[268, "issue-1"]], "Issue 2:": [[268, "issue-2"]], "Issue 3:": [[268, "issue-3"]], "Issue 4:": [[268, "issue-4"]], "Issue 5:": [[268, "issue-5"]], "Framework YAML Configuration Files": [[269, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[269, "get-started-with-framework-yaml-files"]], "Quick Samples": [[270, "quick-samples"]], "Feature Matrix": [[270, "feature-matrix"]], "Incompatible changes between v1.2 and v1.1": [[271, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[271, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[271, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[272, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[273, "prerequisites"]], "Install from Binary": [[273, "install-from-binary"]], "Install from Source": [[273, "install-from-source"]], "Install from AI Kit": [[273, "install-from-ai-kit"]], "System Requirements": [[273, "system-requirements"]], "Validated Hardware Environment": [[273, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports HPUs based on heterogeneous architecture with two compute engines (MME and TPC):": [[273, "intel-neural-compressor-supports-hpus-based-on-heterogeneous-architecture-with-two-compute-engines-mme-and-tpc"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[273, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[273, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[273, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[273, "validated-software-environment"]], "Legal Information": [[274, "legal-information"]], "License": [[274, "license"]], "Citation": [[274, "citation"]], "Trademarks": [[274, "trademarks"]], "LLMs Quantization Recipes": [[275, "llms-quantization-recipes"]], "Large Language Models Recipes": [[275, "large-language-models-recipes"]], "Large Language Models Accuracy": [[275, "large-language-models-accuracy"]], "Metrics": [[276, "metrics"]], "Supported Built-in Metric Matrix": [[276, "supported-built-in-metric-matrix"]], "PyTorch": [[276, "pytorch"], [287, "pytorch"]], "MXNet": [[276, "mxnet"], [292, "mxnet"]], "ONNXRT": [[276, "onnxrt"], [292, "onnxrt"]], "Get Started with Metric": [[276, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[276, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[276, "build-custom-metric-with-python-api"]], "Example": [[276, "example"], [281, "example"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[277, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[277, "model-quantization"]], "Post-training Quantization": [[277, "post-training-quantization"]], "Pruning": [[277, "pruning"], [283, "pruning"]], "Distillation": [[277, "distillation"]], "Orchestration": [[277, "orchestration"]], "During quantization mixed precision": [[278, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[278, "get-started-with-mixed-precision-api"]], "Single Objective": [[281, "single-objective"]], "Multiple Objectives": [[281, "multiple-objectives"]], "Objective Support Matrix": [[281, "objective-support-matrix"]], "Get Started with Objective API": [[281, "get-started-with-objective-api"]], "Config Single Objective": [[281, "config-single-objective"]], "Config Multiple Objectives": [[281, "config-multiple-objectives"]], "Optimization Orchestration": [[282, "optimization-orchestration"]], "One-shot": [[282, "one-shot"]], "Orchestration Support Matrix": [[282, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[282, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[283, "neural-network-pruning"]], "Pruning Patterns": [[283, "pruning-patterns"]], "Pruning Criteria": [[283, "pruning-criteria"]], "Pruning Types": [[283, "pruning-types"]], "Pruning Schedules": [[283, "pruning-schedules"]], "Pruning Scope": [[283, "pruning-scope"]], "Sparsity Decay Types": [[283, "sparsity-decay-types"]], "Regularization": [[283, "regularization"]], "Large Language Model Pruning": [[283, "large-language-model-pruning"]], "Pruning Support Matrix": [[283, "pruning-support-matrix"]], "Get Started with Pruning API": [[283, "get-started-with-pruning-api"]], "Training-aware pruning API": [[283, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[283, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[283, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[283, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[284, "full-publications-events-82"]], "2024 (3)": [[284, "id1"]], "2023 (25)": [[284, "id2"]], "2022 (35)": [[284, "id3"]], "2021 (15)": [[284, "id4"]], "2018 - 2020 (4)": [[284, "id5"]], "Quantization Introduction": [[285, "quantization-introduction"]], "Quantization Support Matrix": [[285, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[285, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[285, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[285, "post-training-quantization"]], "Specify Quantization Recipes": [[285, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[285, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[286, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[286, "pytorch-framework-example"]], "ONNX Runtime framework example": [[286, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[287, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[287, "tensorflow"]], "Weight Only Quantization (WOQ)": [[288, "weight-only-quantization-woq"]], "Quantization Capability": [[288, "quantization-capability"]], "Export Compressed Model": [[288, "export-compressed-model"]], "User Code Example": [[288, "user-code-example"]], "WOQ Algorithms Tuning": [[288, "woq-algorithms-tuning"]], "User code example": [[288, "id1"]], "Release": [[289, "release"]], "Release Notes": [[289, "release-notes"]], "Known Issues": [[289, "known-issues"]], "Incompatible Changes": [[289, "incompatible-changes"]], "SigOpt Strategy": [[290, "sigopt-strategy"]], "Preparation": [[290, "preparation"]], "SigOpt Platform": [[290, "sigopt-platform"]], "Neural Compressor Configuration": [[290, "neural-compressor-configuration"]], "Performance": [[290, "performance"]], "Benefit of SigOpt Strategy": [[290, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[290, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[291, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[291, "smoothquant"]], "Our enhancement:": [[291, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[291, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[291, "engineering"]], "Using a fixed alpha": [[291, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[291, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[291, "auto-tune-the-alpha-for-each-layer-block"]], "Transform": [[292, "transform"]], "Transform Support List": [[292, "transform-support-list"]], "Pytorch": [[292, "pytorch"]], "Tuning Strategies": [[293, "tuning-strategies"]], "Strategy Design": [[293, "strategy-design"]], "Tuning Space": [[293, "tuning-space"]], "Exit Policy": [[293, "exit-policy"]], "Accuracy Criteria": [[293, "accuracy-criteria"]], "Tuning Process": [[293, "tuning-process"]], "Tuning Algorithms": [[293, "tuning-algorithms"]], "Auto": [[293, "auto"]], "Conservative Tuning": [[293, "conservative-tuning"]], "Basic": [[293, "basic"]], "MSE": [[293, "mse"]], "MSE_V2": [[293, "mse-v2"]], "HAWQ_V2": [[293, "hawq-v2"]], "Bayesian": [[293, "bayesian"]], "Exhaustive": [[293, "exhaustive"]], "Random": [[293, "random"]], "SigOpt": [[293, "sigopt"]], "TPE": [[293, "tpe"]], "Distributed Tuning": [[293, "distributed-tuning"]], "Customize a New Tuning Strategy": [[293, "customize-a-new-tuning-strategy"]], "Validated Quantization Examples": [[294, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[294, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[294, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[294, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[294, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[294, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[294, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[294, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[294, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[294, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.common.base_config"], [7, "module-neural_compressor.common.base_tuning"], [8, "module-neural_compressor.common"], [9, "module-neural_compressor.common.tuning_param"], [10, "module-neural_compressor.common.utils.constants"], [11, "module-neural_compressor.common.utils"], [12, "module-neural_compressor.common.utils.logger"], [13, "module-neural_compressor.common.utils.save_load"], [14, "module-neural_compressor.common.utils.utility"], [15, "module-neural_compressor.config"], [16, "module-neural_compressor.contrib"], [17, "module-neural_compressor.contrib.strategy"], [18, "module-neural_compressor.contrib.strategy.sigopt"], [19, "module-neural_compressor.contrib.strategy.tpe"], [20, "module-neural_compressor.data.datasets.bert_dataset"], [21, "module-neural_compressor.data.datasets.coco_dataset"], [22, "module-neural_compressor.data.datasets.dataset"], [23, "module-neural_compressor.data.datasets.dummy_dataset"], [24, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [25, "module-neural_compressor.data.datasets.imagenet_dataset"], [26, "module-neural_compressor.data.datasets"], [27, "module-neural_compressor.data.datasets.style_transfer_dataset"], [28, "module-neural_compressor.data.filters.coco_filter"], [29, "module-neural_compressor.data.filters.filter"], [30, "module-neural_compressor.data.filters"], [31, "module-neural_compressor.data"], [32, "module-neural_compressor.data.transforms.imagenet_transform"], [33, "module-neural_compressor.data.transforms"], [34, "module-neural_compressor.data.transforms.postprocess"], [35, "module-neural_compressor.data.transforms.tokenization"], [36, "module-neural_compressor.data.transforms.transform"], [37, "module-neural_compressor"], [38, "module-neural_compressor.metric.bleu"], [39, "module-neural_compressor.metric.bleu_util"], [40, "module-neural_compressor.metric.coco_label_map"], [41, "module-neural_compressor.metric.coco_tools"], [42, "module-neural_compressor.metric.evaluate_squad"], [43, "module-neural_compressor.metric.f1"], [44, "module-neural_compressor.metric"], [45, "module-neural_compressor.metric.metric"], [46, "module-neural_compressor.mix_precision"], [47, "module-neural_compressor.model.base_model"], [48, "module-neural_compressor.model"], [49, "module-neural_compressor.model.keras_model"], [50, "module-neural_compressor.model.model"], [51, "module-neural_compressor.model.mxnet_model"], [52, "module-neural_compressor.model.nets_factory"], [53, "module-neural_compressor.model.onnx_model"], [54, "module-neural_compressor.model.tensorflow_model"], [55, "module-neural_compressor.model.torch_model"], [56, "module-neural_compressor.objective"], [57, "module-neural_compressor.profiling"], [58, "module-neural_compressor.quantization"], [59, "module-neural_compressor.strategy.auto"], [60, "module-neural_compressor.strategy.auto_mixed_precision"], [61, "module-neural_compressor.strategy.basic"], [62, "module-neural_compressor.strategy.bayesian"], [63, "module-neural_compressor.strategy.conservative"], [64, "module-neural_compressor.strategy.exhaustive"], [65, "module-neural_compressor.strategy.hawq_v2"], [66, "module-neural_compressor.strategy"], [67, "module-neural_compressor.strategy.mse"], [68, "module-neural_compressor.strategy.mse_v2"], [69, "module-neural_compressor.strategy.random"], [70, "module-neural_compressor.strategy.strategy"], [71, "module-neural_compressor.strategy.utils.constant"], [72, "module-neural_compressor.strategy.utils"], [73, "module-neural_compressor.strategy.utils.tuning_sampler"], [74, "module-neural_compressor.strategy.utils.tuning_space"], [75, "module-neural_compressor.strategy.utils.tuning_structs"], [76, "module-neural_compressor.strategy.utils.utility"], [77, "module-neural_compressor.tensorflow.algorithms"], [78, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"], [79, "module-neural_compressor.tensorflow.algorithms.smoother.core"], [80, "module-neural_compressor.tensorflow.algorithms.smoother"], [81, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"], [82, "module-neural_compressor.tensorflow.algorithms.static_quant"], [83, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"], [84, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"], [85, "module-neural_compressor.tensorflow"], [86, "module-neural_compressor.tensorflow.keras"], [87, "module-neural_compressor.tensorflow.keras.layers.conv2d"], [88, "module-neural_compressor.tensorflow.keras.layers.dense"], [89, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"], [90, "module-neural_compressor.tensorflow.keras.layers"], [91, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"], [92, "module-neural_compressor.tensorflow.keras.layers.pool2d"], [93, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"], [94, "module-neural_compressor.tensorflow.keras.quantization.config"], [95, "module-neural_compressor.tensorflow.keras.quantization"], [96, "module-neural_compressor.tensorflow.quantization.algorithm_entry"], [97, "module-neural_compressor.tensorflow.quantization.autotune"], [98, "module-neural_compressor.tensorflow.quantization.config"], [99, "module-neural_compressor.tensorflow.quantization"], [100, "module-neural_compressor.tensorflow.quantization.quantize"], [101, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"], [102, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"], [103, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"], [104, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"], [105, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"], [106, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"], [107, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"], [108, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"], [109, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"], [110, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"], [111, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"], [112, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"], [113, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"], [114, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"], [115, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"], [116, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"], [117, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"], [118, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"], [119, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"], [120, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"], [121, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"], [122, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"], [123, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"], [124, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [125, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"], [126, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"], [127, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"], [128, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"], [129, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"], [130, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"], [131, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"], [132, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"], [133, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"], [134, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"], [135, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"], [136, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"], [137, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"], [138, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"], [139, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"], [140, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"], [141, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"], [142, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [143, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"], [144, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [145, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"], [146, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"], [147, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"], [148, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"], [149, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"], [150, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"], [151, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"], [152, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"], [153, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"], [154, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"], [155, "module-neural_compressor.tensorflow.quantization.utils.graph_util"], [156, "module-neural_compressor.tensorflow.quantization.utils"], [157, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"], [158, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"], [159, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"], [160, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"], [161, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"], [162, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"], [163, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"], [164, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"], [165, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"], [166, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"], [167, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"], [168, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"], [169, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"], [170, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"], [171, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"], [172, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"], [173, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"], [174, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"], [175, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"], [176, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"], [177, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"], [178, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"], [179, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"], [180, "module-neural_compressor.tensorflow.quantization.utils.utility"], [181, "module-neural_compressor.tensorflow.utils.constants"], [182, "module-neural_compressor.tensorflow.utils.data"], [183, "module-neural_compressor.tensorflow.utils"], [184, "module-neural_compressor.tensorflow.utils.model"], [185, "module-neural_compressor.tensorflow.utils.model_wrappers"], [186, "module-neural_compressor.tensorflow.utils.utility"], [187, "module-neural_compressor.torch.export"], [188, "module-neural_compressor.torch.export.pt2e_export"], [189, "module-neural_compressor.torch"], [190, "module-neural_compressor.torch.quantization.autotune"], [191, "module-neural_compressor.torch.quantization.config"], [192, "module-neural_compressor.torch.quantization"], [193, "module-neural_compressor.torch.quantization.quantize"], [194, "module-neural_compressor.training"], [195, "module-neural_compressor.utils.collect_layer_histogram"], [196, "module-neural_compressor.utils.constant"], [197, "module-neural_compressor.utils.create_obj_from_config"], [198, "module-neural_compressor.utils.export"], [199, "module-neural_compressor.utils.export.qlinear2qdq"], [200, "module-neural_compressor.utils.export.tf2onnx"], [201, "module-neural_compressor.utils.export.torch2onnx"], [202, "module-neural_compressor.utils"], [203, "module-neural_compressor.utils.kl_divergence"], [204, "module-neural_compressor.utils.load_huggingface"], [205, "module-neural_compressor.utils.logger"], [206, "module-neural_compressor.utils.options"], [207, "module-neural_compressor.utils.pytorch"], [208, "module-neural_compressor.utils.utility"], [209, "module-neural_compressor.utils.weights_details"], [210, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ComposableConfig"]], "configregistry (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ConfigRegistry"]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[6, "neural_compressor.common.base_config.ComposableConfig.config_list"]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.get_all_config_set_from_config_registry"]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.name"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.params_list"]], "register_config() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "configloader (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigLoader"]], "configset (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigSet"]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.EvaluationFuncWrapper"]], "evaluator (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Evaluator"]], "sampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Sampler"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningConfig"]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningMonitor"]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[7, "neural_compressor.common.base_tuning.ConfigSet.config_list"]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.init_tuning"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL"]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL"]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "mode (class in neural_compressor.common.utils.constants)": [[10, "neural_compressor.common.utils.constants.Mode"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.LazyImport"]], "processortype (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.ProcessorType"]], "statistics (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.Statistics"]], "call_counter() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.call_counter"]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.get_workspace"]], "log_process() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.log_process"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.singleton"]], "accuracycriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[15, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[15, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[15, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[15, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[15, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[15, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[18, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[19, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[23, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[27, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[34, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TRANSFORMS"], [36, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[37, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[39, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[45, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[45, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[45, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[45, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[45, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[46, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[47, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[49, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[50, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[50, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[51, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[52, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[53, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[56, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[58, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[59, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[60, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[61, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[63, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[64, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[65, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[67, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[68, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[69, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[75, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "neural_compressor.tensorflow.algorithms": [[77, "module-neural_compressor.tensorflow.algorithms"]], "smoothquantcalibration (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[78, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibration"]], "smoothquantcalibrationllm (class in neural_compressor.tensorflow.algorithms.smoother.calibration)": [[78, "neural_compressor.tensorflow.algorithms.smoother.calibration.SmoothQuantCalibrationLLM"]], "neural_compressor.tensorflow.algorithms.smoother.calibration": [[78, "module-neural_compressor.tensorflow.algorithms.smoother.calibration"]], "smoothquant (class in neural_compressor.tensorflow.algorithms.smoother.core)": [[79, "neural_compressor.tensorflow.algorithms.smoother.core.SmoothQuant"]], "neural_compressor.tensorflow.algorithms.smoother.core": [[79, "module-neural_compressor.tensorflow.algorithms.smoother.core"]], "neural_compressor.tensorflow.algorithms.smoother": [[80, "module-neural_compressor.tensorflow.algorithms.smoother"]], "smoothquantscaler (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[81, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScaler"]], "smoothquantscalerllm (class in neural_compressor.tensorflow.algorithms.smoother.scaler)": [[81, "neural_compressor.tensorflow.algorithms.smoother.scaler.SmoothQuantScalerLLM"]], "neural_compressor.tensorflow.algorithms.smoother.scaler": [[81, "module-neural_compressor.tensorflow.algorithms.smoother.scaler"]], "neural_compressor.tensorflow.algorithms.static_quant": [[82, "module-neural_compressor.tensorflow.algorithms.static_quant"]], "kerasadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[83, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasAdaptor"]], "kerasconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[83, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasConfigConverter"]], "kerasquery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[83, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasQuery"]], "kerassurgery (class in neural_compressor.tensorflow.algorithms.static_quant.keras)": [[83, "neural_compressor.tensorflow.algorithms.static_quant.keras.KerasSurgery"]], "neural_compressor.tensorflow.algorithms.static_quant.keras": [[83, "module-neural_compressor.tensorflow.algorithms.static_quant.keras"]], "tensorflowadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowAdaptor"]], "tensorflowconfig (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorFlowConfig"]], "tensorflowconfigconverter (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowConfigConverter"]], "tensorflowquery (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.tensorflow.algorithms.static_quant.tensorflow)": [[84, "neural_compressor.tensorflow.algorithms.static_quant.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.tensorflow.algorithms.static_quant.tensorflow": [[84, "module-neural_compressor.tensorflow.algorithms.static_quant.tensorflow"]], "neural_compressor.tensorflow": [[85, "module-neural_compressor.tensorflow"]], "neural_compressor.tensorflow.keras": [[86, "module-neural_compressor.tensorflow.keras"]], "qconv2d (class in neural_compressor.tensorflow.keras.layers.conv2d)": [[87, "neural_compressor.tensorflow.keras.layers.conv2d.QConv2D"]], "initialize_int8_conv2d() (in module neural_compressor.tensorflow.keras.layers.conv2d)": [[87, "neural_compressor.tensorflow.keras.layers.conv2d.initialize_int8_conv2d"]], "neural_compressor.tensorflow.keras.layers.conv2d": [[87, "module-neural_compressor.tensorflow.keras.layers.conv2d"]], "qdense (class in neural_compressor.tensorflow.keras.layers.dense)": [[88, "neural_compressor.tensorflow.keras.layers.dense.QDense"]], "initialize_int8_dense() (in module neural_compressor.tensorflow.keras.layers.dense)": [[88, "neural_compressor.tensorflow.keras.layers.dense.initialize_int8_dense"]], "neural_compressor.tensorflow.keras.layers.dense": [[88, "module-neural_compressor.tensorflow.keras.layers.dense"]], "qdepthwiseconv2d (class in neural_compressor.tensorflow.keras.layers.depthwise_conv2d)": [[89, "neural_compressor.tensorflow.keras.layers.depthwise_conv2d.QDepthwiseConv2D"]], "initialize_int8_depthwise_conv2d() (in module neural_compressor.tensorflow.keras.layers.depthwise_conv2d)": [[89, "neural_compressor.tensorflow.keras.layers.depthwise_conv2d.initialize_int8_depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers.depthwise_conv2d": [[89, "module-neural_compressor.tensorflow.keras.layers.depthwise_conv2d"]], "neural_compressor.tensorflow.keras.layers": [[90, "module-neural_compressor.tensorflow.keras.layers"]], "neural_compressor.tensorflow.keras.layers.layer_initializer": [[91, "module-neural_compressor.tensorflow.keras.layers.layer_initializer"]], "qavgpool2d (class in neural_compressor.tensorflow.keras.layers.pool2d)": [[92, "neural_compressor.tensorflow.keras.layers.pool2d.QAvgPool2D"]], "qmaxpool2d (class in neural_compressor.tensorflow.keras.layers.pool2d)": [[92, "neural_compressor.tensorflow.keras.layers.pool2d.QMaxPool2D"]], "initialize_int8_avgpool() (in module neural_compressor.tensorflow.keras.layers.pool2d)": [[92, "neural_compressor.tensorflow.keras.layers.pool2d.initialize_int8_avgpool"]], "initialize_int8_maxpool() (in module neural_compressor.tensorflow.keras.layers.pool2d)": [[92, "neural_compressor.tensorflow.keras.layers.pool2d.initialize_int8_maxpool"]], "neural_compressor.tensorflow.keras.layers.pool2d": [[92, "module-neural_compressor.tensorflow.keras.layers.pool2d"]], "qseparableconv2d (class in neural_compressor.tensorflow.keras.layers.separable_conv2d)": [[93, "neural_compressor.tensorflow.keras.layers.separable_conv2d.QSeparableConv2D"]], "initialize_int8_separable_conv2d() (in module neural_compressor.tensorflow.keras.layers.separable_conv2d)": [[93, "neural_compressor.tensorflow.keras.layers.separable_conv2d.initialize_int8_separable_conv2d"]], "neural_compressor.tensorflow.keras.layers.separable_conv2d": [[93, "module-neural_compressor.tensorflow.keras.layers.separable_conv2d"]], "operatorconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[94, "neural_compressor.tensorflow.keras.quantization.config.OperatorConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.keras.quantization.config)": [[94, "neural_compressor.tensorflow.keras.quantization.config.StaticQuantConfig"]], "get_all_registered_configs() (in module neural_compressor.tensorflow.keras.quantization.config)": [[94, "neural_compressor.tensorflow.keras.quantization.config.get_all_registered_configs"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.keras.quantization.config)": [[94, "neural_compressor.tensorflow.keras.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.keras.quantization.config": [[94, "module-neural_compressor.tensorflow.keras.quantization.config"]], "neural_compressor.tensorflow.keras.quantization": [[95, "module-neural_compressor.tensorflow.keras.quantization"]], "neural_compressor.tensorflow.quantization.algorithm_entry": [[96, "module-neural_compressor.tensorflow.quantization.algorithm_entry"]], "smooth_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[96, "neural_compressor.tensorflow.quantization.algorithm_entry.smooth_quant_entry"]], "static_quant_entry() (in module neural_compressor.tensorflow.quantization.algorithm_entry)": [[96, "neural_compressor.tensorflow.quantization.algorithm_entry.static_quant_entry"]], "autotune() (in module neural_compressor.tensorflow.quantization.autotune)": [[97, "neural_compressor.tensorflow.quantization.autotune.autotune"]], "get_all_config_set() (in module neural_compressor.tensorflow.quantization.autotune)": [[97, "neural_compressor.tensorflow.quantization.autotune.get_all_config_set"]], "neural_compressor.tensorflow.quantization.autotune": [[97, "module-neural_compressor.tensorflow.quantization.autotune"]], "smoothquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[98, "neural_compressor.tensorflow.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.tensorflow.quantization.config)": [[98, "neural_compressor.tensorflow.quantization.config.StaticQuantConfig"]], "get_default_sq_config() (in module neural_compressor.tensorflow.quantization.config)": [[98, "neural_compressor.tensorflow.quantization.config.get_default_sq_config"]], "get_default_static_quant_config() (in module neural_compressor.tensorflow.quantization.config)": [[98, "neural_compressor.tensorflow.quantization.config.get_default_static_quant_config"]], "neural_compressor.tensorflow.quantization.config": [[98, "module-neural_compressor.tensorflow.quantization.config"]], "neural_compressor.tensorflow.quantization": [[99, "module-neural_compressor.tensorflow.quantization"]], "need_apply() (in module neural_compressor.tensorflow.quantization.quantize)": [[100, "neural_compressor.tensorflow.quantization.quantize.need_apply"]], "neural_compressor.tensorflow.quantization.quantize": [[100, "module-neural_compressor.tensorflow.quantization.quantize"]], "quantize_model() (in module neural_compressor.tensorflow.quantization.quantize)": [[100, "neural_compressor.tensorflow.quantization.quantize.quantize_model"]], "quantize_model_with_single_config() (in module neural_compressor.tensorflow.quantization.quantize)": [[100, "neural_compressor.tensorflow.quantization.quantize.quantize_model_with_single_config"]], "graphconverter (class in neural_compressor.tensorflow.quantization.utils.graph_converter)": [[101, "neural_compressor.tensorflow.quantization.utils.graph_converter.GraphConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_converter": [[101, "module-neural_compressor.tensorflow.quantization.utils.graph_converter"]], "bf16convert (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert)": [[102, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert": [[102, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.bf16_convert"]], "dequantizecastoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer)": [[103, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer": [[103, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16.dequantize_cast_optimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16": [[104, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd)": [[105, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd": [[105, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout)": [[106, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout": [[106, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu)": [[107, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu": [[107, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random)": [[108, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random": [[108, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const)": [[109, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const": [[109, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dilatedcontraction (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction)": [[110, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction": [[110, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd)": [[111, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd": [[111, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer)": [[112, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer": [[112, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[113, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape": [[113, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm)": [[114, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm": [[114, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant)": [[115, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant": [[115, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add)": [[116, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add": [[116, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul)": [[117, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul": [[117, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math)": [[118, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math": [[118, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn": [[119, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn)": [[119, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in": [[120, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in)": [[120, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu)": [[121, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu": [[121, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[122, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm": [[122, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[122, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[122, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm)": [[122, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv)": [[123, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv": [[123, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[124, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[124, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose)": [[125, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose": [[125, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer)": [[126, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer": [[126, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass)": [[127, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass": [[127, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic": [[128, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node)": [[129, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node": [[129, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu)": [[130, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu": [[130, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize)": [[131, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize": [[131, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes)": [[132, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes": [[132, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm)": [[133, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm": [[133, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input)": [[134, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input": [[134, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes)": [[135, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes": [[135, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes)": [[136, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes": [[136, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer)": [[137, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer": [[137, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base)": [[138, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base": [[138, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.graph_base"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter": [[139, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant)": [[140, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant": [[140, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value)": [[141, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value": [[141, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.freeze_value"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[142, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[142, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize)": [[143, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize": [[143, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[144, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[144, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[145, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[145, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[145, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize)": [[145, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize": [[145, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8": [[146, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer)": [[147, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer": [[147, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter)": [[148, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter": [[148, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse)": [[149, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse": [[149, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.post_quantized_op_cse"]], "scalepropagationtransformer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation)": [[150, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation": [[150, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq": [[151, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern)": [[152, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern": [[152, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[153, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq": [[153, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[154, "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern": [[154, "module-neural_compressor.tensorflow.quantization.utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[155, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.tensorflow.quantization.utils.graph_util)": [[155, "neural_compressor.tensorflow.quantization.utils.graph_util.GraphRewriterHelper"]], "neural_compressor.tensorflow.quantization.utils.graph_util": [[155, "module-neural_compressor.tensorflow.quantization.utils.graph_util"]], "neural_compressor.tensorflow.quantization.utils": [[156, "module-neural_compressor.tensorflow.quantization.utils"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph": [[157, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn)": [[158, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn": [[158, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[159, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2": [[159, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv)": [[160, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv": [[160, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv)": [[161, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv": [[161, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in)": [[162, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in": [[162, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul)": [[163, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul": [[163, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling)": [[164, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling": [[164, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq": [[165, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq)": [[166, "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq": [[166, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[167, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base)": [[167, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base": [[167, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn)": [[168, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn": [[168, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2)": [[169, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2": [[169, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv)": [[170, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv": [[170, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu)": [[171, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu": [[171, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul)": [[172, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul": [[172, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling)": [[173, "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling": [[173, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.tensorflow.quantization.utils.quantize_graph_common)": [[174, "neural_compressor.tensorflow.quantization.utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.tensorflow.quantization.utils.quantize_graph_common": [[174, "module-neural_compressor.tensorflow.quantization.utils.quantize_graph_common"]], "biascorrection (class in neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction)": [[175, "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction": [[175, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base)": [[176, "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base": [[176, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.graph_transform_base"]], "neural_compressor.tensorflow.quantization.utils.transform_graph": [[177, "module-neural_compressor.tensorflow.quantization.utils.transform_graph"]], "insertlogging (class in neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging)": [[178, "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging": [[178, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat)": [[179, "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat": [[179, "module-neural_compressor.tensorflow.quantization.utils.transform_graph.rerange_quantized_concat"]], "apply_inlining() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.apply_inlining"]], "collate_tf_preds() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.collate_tf_preds"]], "construct_function_from_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.construct_function_from_graph_def"]], "fix_ref_type_of_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.generate_feed_dict"]], "get_graph_def() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.get_tensor_by_name"]], "is_ckpt_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.iterator_sess_run"]], "neural_compressor.tensorflow.quantization.utils.utility": [[180, "module-neural_compressor.tensorflow.quantization.utils.utility"]], "parse_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.parse_saved_model"]], "read_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.read_graph"]], "reconstruct_saved_model() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.reconstruct_saved_model"]], "strip_equivalent_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.strip_unused_nodes"]], "write_graph() (in module neural_compressor.tensorflow.quantization.utils.utility)": [[180, "neural_compressor.tensorflow.quantization.utils.utility.write_graph"]], "neural_compressor.tensorflow.utils.constants": [[181, "module-neural_compressor.tensorflow.utils.constants"]], "basedataloader (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.BaseDataLoader"]], "batchsampler (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.BatchSampler"]], "dummydataset (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.DummyDataset"]], "dummydatasetv2 (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.DummyDatasetV2"]], "indexfetcher (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.IndexFetcher"]], "iterablefetcher (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.IterableFetcher"]], "iterablesampler (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.IterableSampler"]], "sequentialsampler (class in neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.SequentialSampler"]], "default_collate() (in module neural_compressor.tensorflow.utils.data)": [[182, "neural_compressor.tensorflow.utils.data.default_collate"]], "neural_compressor.tensorflow.utils.data": [[182, "module-neural_compressor.tensorflow.utils.data"]], "neural_compressor.tensorflow.utils": [[183, "module-neural_compressor.tensorflow.utils"]], "model (class in neural_compressor.tensorflow.utils.model)": [[184, "neural_compressor.tensorflow.utils.model.Model"]], "tensorflowglobalconfig (class in neural_compressor.tensorflow.utils.model)": [[184, "neural_compressor.tensorflow.utils.model.TensorflowGlobalConfig"]], "neural_compressor.tensorflow.utils.model": [[184, "module-neural_compressor.tensorflow.utils.model"]], "basemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.BaseModel"]], "kerasmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.KerasModel"]], "tensorflowbasemodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.checkpoint_session"]], "estimator_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.estimator_session"]], "frozen_pb_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.frozen_pb_session"]], "get_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.get_model_type"]], "get_tf_model_type() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.get_tf_model_type"]], "graph_def_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.graph_def_session"]], "graph_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.graph_session"]], "keras_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.keras_session"]], "load_saved_model() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.load_saved_model"]], "neural_compressor.tensorflow.utils.model_wrappers": [[185, "module-neural_compressor.tensorflow.utils.model_wrappers"]], "saved_model_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.saved_model_session"]], "slim_session() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.slim_session"]], "try_loading_keras() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.tensorflow.utils.model_wrappers)": [[185, "neural_compressor.tensorflow.utils.model_wrappers.validate_graph_node"]], "captureoutputtofile (class in neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.CpuInfo"]], "tfslimnetsfactory (class in neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.TFSlimNetsFactory"]], "combine_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.combine_histogram"]], "deep_get() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.deep_get"]], "disable_random() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.disable_random"]], "dump_elapsed_time() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.dump_elapsed_time"]], "get_all_fp32_data() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.get_all_fp32_data"]], "get_tensor_histogram() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.get_tensor_histogram"]], "itex_installed() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.itex_installed"]], "neural_compressor.tensorflow.utils.utility": [[186, "module-neural_compressor.tensorflow.utils.utility"]], "register_algo() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.register_algo"]], "singleton() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.singleton"]], "valid_keras_format() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.valid_keras_format"]], "version1_eq_version2() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.tensorflow.utils.utility)": [[186, "neural_compressor.tensorflow.utils.utility.version1_lte_version2"]], "neural_compressor.torch.export": [[187, "module-neural_compressor.torch.export"]], "export() (in module neural_compressor.torch.export.pt2e_export)": [[188, "neural_compressor.torch.export.pt2e_export.export"]], "export_model_for_pt2e_quant() (in module neural_compressor.torch.export.pt2e_export)": [[188, "neural_compressor.torch.export.pt2e_export.export_model_for_pt2e_quant"]], "neural_compressor.torch.export.pt2e_export": [[188, "module-neural_compressor.torch.export.pt2e_export"]], "neural_compressor.torch": [[189, "module-neural_compressor.torch"]], "autotune() (in module neural_compressor.torch.quantization.autotune)": [[190, "neural_compressor.torch.quantization.autotune.autotune"]], "get_all_config_set() (in module neural_compressor.torch.quantization.autotune)": [[190, "neural_compressor.torch.quantization.autotune.get_all_config_set"]], "get_rtn_double_quant_config_set() (in module neural_compressor.torch.quantization.autotune)": [[190, "neural_compressor.torch.quantization.autotune.get_rtn_double_quant_config_set"]], "neural_compressor.torch.quantization.autotune": [[190, "module-neural_compressor.torch.quantization.autotune"]], "awqconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.AWQConfig"]], "autoroundconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.AutoRoundConfig"]], "dynamicquantconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.DynamicQuantConfig"]], "fp8config (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.FP8Config"]], "gptqconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.GPTQConfig"]], "hqqconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.HQQConfig"]], "mxquantconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.MXQuantConfig"]], "mixedprecisionconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.MixedPrecisionConfig"]], "operatorconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.OperatorConfig"]], "rtnconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.RTNConfig"]], "smoothquantconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.SmoothQuantConfig"]], "staticquantconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.StaticQuantConfig"]], "teqconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.TEQConfig"]], "torchbaseconfig (class in neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.TorchBaseConfig"]], "get_default_awq_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_awq_config"]], "get_default_double_quant_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_double_quant_config"]], "get_default_dynamic_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_dynamic_config"]], "get_default_fp8_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_fp8_config"]], "get_default_fp8_config_set() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_fp8_config_set"]], "get_default_hqq_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_hqq_config"]], "get_default_mixed_precision_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config"]], "get_default_mixed_precision_config_set() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_mixed_precision_config_set"]], "get_default_mx_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_mx_config"]], "get_default_rtn_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_rtn_config"]], "get_default_sq_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_sq_config"]], "get_default_static_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_static_config"]], "get_default_teq_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_default_teq_config"]], "get_woq_tuning_config() (in module neural_compressor.torch.quantization.config)": [[191, "neural_compressor.torch.quantization.config.get_woq_tuning_config"]], "neural_compressor.torch.quantization.config": [[191, "module-neural_compressor.torch.quantization.config"]], "neural_compressor.torch.quantization": [[192, "module-neural_compressor.torch.quantization"]], "convert() (in module neural_compressor.torch.quantization.quantize)": [[193, "neural_compressor.torch.quantization.quantize.convert"]], "neural_compressor.torch.quantization.quantize": [[193, "module-neural_compressor.torch.quantization.quantize"]], "prepare() (in module neural_compressor.torch.quantization.quantize)": [[193, "neural_compressor.torch.quantization.quantize.prepare"]], "quantize() (in module neural_compressor.torch.quantization.quantize)": [[193, "neural_compressor.torch.quantization.quantize.quantize"]], "callbacks (class in neural_compressor.training)": [[194, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[194, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[194, "neural_compressor.training.fit"]], "neural_compressor.training": [[194, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[194, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[195, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[195, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[196, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[197, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[197, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[198, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[199, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[199, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[199, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[200, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[200, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[200, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[201, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[201, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[201, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[201, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[201, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[201, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[201, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[202, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[203, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[203, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[204, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[204, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[204, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[204, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[205, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[205, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[206, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[206, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[207, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[207, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[207, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[207, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[207, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[208, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[208, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[209, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[209, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[209, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[210, "module-neural_compressor.version"]]}})